
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   0:	20003f00 	.word	0x20003f00
   4:	00014231 	.word	0x00014231
   8:	000257b5 	.word	0x000257b5

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   c:	00014205 	.word	0x00014205
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  10:	00014205 	.word	0x00014205
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
  14:	00014205 	.word	0x00014205
  18:	00014205 	.word	0x00014205
	...

	fs->flash_device = device_get_binding(dev_name);
	if (!fs->flash_device) {
		LOG_ERR("No valid flash device found");
  2c:	00013bc1 	.word	0x00013bc1
  30:	00014205 	.word	0x00014205
		return -ENXIO;
  34:	00000000 	.word	0x00000000
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
  38:	00013b6d 	.word	0x00013b6d
  3c:	00014205 	.word	0x00014205

00000040 <_irq_vector_table>:
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
  40:	00013c79 00027d13 00013c79 00013c79     y<...}..y<..y<..
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
  50:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
		return -EINVAL;
  60:	00027cdb 00013c79 00013c79 00027cf9     .|..y<..y<...|..
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
  70:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
		LOG_ERR("Unsupported write block size");
  80:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
  90:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
		LOG_ERR("Unable to get page info");
  a0:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
	if (!fs->sector_size || fs->sector_size % info.size) {
  b0:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
		LOG_ERR("Invalid sector size");
  c0:	00013c79 00013c79 00013c79 00013c79     y<..y<..y<..y<..
  d0:	00013c79 00013c79 00013c79              y<..y<..y<..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
	uint8_t erase_value = fs->flash_parameters->erase_value;
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
	for (i = 0; i < fs->sector_count; i++) {
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
	if (closed_sectors == fs->sector_count) {
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
	if (i == fs->sector_count) {
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_FLASH_SIZE+0x26>
		if (!rc) {
     122:	428a      	cmp	r2, r1
			nvs_sector_advance(fs, &addr);
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
	rc = nvs_recover_last_ate(fs, &addr);
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
	if (rc) {
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
	fs->ate_wra = addr;
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
	fs->data_wra = addr & ADDR_SECT_MASK;
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
			fs->data_wra = addr & ADDR_SECT_MASK;
     146:	0c23      	lsrs	r3, r4, #16
	while (fs->ate_wra >= fs->data_wra) {
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
		if (rc) {
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
		if (data8[i] != value) {
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
	addr = fs->ate_wra & ADDR_SECT_MASK;
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
	nvs_sector_advance(fs, &addr);
     176:	b2a4      	uxth	r4, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
     178:	fbb3 f0f8 	udiv	r0, r3, r8
	nvs_sector_advance(fs, &addr);
     17c:	fb08 3310 	mls	r3, r8, r0, r3
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
	if (rc < 0) {
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
		       (uint16_t)(fs->sector_size - ate_size);
     192:	f080 8101 	bcs.w	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     196:	42a1      	cmp	r1, r4
		addr = (i << ADDR_SECT_SHIFT) +
     198:	f240 80fe 	bls.w	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
		addr = (i << ADDR_SECT_SHIFT) +
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1a6:	2100      	movs	r1, #0
		if (rc) {
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
			nvs_sector_advance(fs, &addr);
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
			closed_sectors++;
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
			closed_sectors++;
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_FLASH_SIZE+0x62>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
			if (!rc) {
     1c8:	fa1f f887 	uxth.w	r8, r7
	for (i = 0; i < fs->sector_count; i++) {
     1cc:	2101      	movs	r1, #1
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
				rc = -ESPIPE;
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
		addr = fs->ate_wra + ate_size;
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
     1e2:	d907      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa8>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
		LOG_INF("No GC Done marker found: restarting gc");
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
		if (rc) {
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
		fs->ate_wra &= ADDR_SECT_MASK;
     212:	d202      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc8>
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
		rc = nvs_gc(fs);
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
			if (rc) {
     240:	2900      	cmp	r1, #0
			if (nvs_ate_valid(fs, &gc_done_ate) &&
     242:	d14b      	bne.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_FLASH_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
			    (gc_done_ate.id == 0xffff) &&
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
			addr += ate_size;
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
		if (rc < 0) {
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
		fs->data_wra += fs->flash_parameters->write_block_size;
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
	while (fs->ate_wra > fs->data_wra) {
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     292:	fa04 f402 	lsl.w	r4, r4, r2
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     296:	d909      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
		if (rc) {
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
		      (fs->sector_size - 2 * ate_size))) {
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
     2bc:	fb00 f308 	mul.w	r3, r0, r8
		rc = nvs_add_gc_done_ate(fs);
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
		rc = -EDEADLK;
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
	if (rc) {
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
	fs->ready = true;
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     31c:	197d      	adds	r5, r7, r5
	LOG_INF("alloc wra: %d, %x",
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     328:	f1a9 0902 	sub.w	r9, r9, #2
	LOG_INF("data wra: %d, %x",
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
			LOG_INF("GC Done marker found");
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
			addr = fs->ate_wra & ADDR_SECT_MASK;
     350:	45a0      	cmp	r8, r4
			nvs_sector_advance(fs, &addr);
     352:	d92b      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
			addr = fs->ate_wra & ADDR_SECT_MASK;
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
			nvs_sector_advance(fs, &addr);
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
			rc = nvs_flash_erase_sector(fs, addr);
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
			goto end;
     368:	464d      	mov	r5, r9
		if (nvs_ate_valid(fs, &last_ate)) {
     36a:	d319      	bcc.n	3a0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa0>
     36c:	d016      	beq.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     36e:	b15e      	cbz	r6, 388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
			fs->data_wra = addr & ADDR_SECT_MASK;
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
			fs->data_wra = addr & ADDR_SECT_MASK;
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
     394:	46ac      	mov	ip, r5
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
		fs->ate_wra -= ate_size;
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_FLASH_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3d6:	4615      	mov	r5, r2
     3d8:	4a0a      	ldr	r2, [pc, #40]	; (404 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4>)
     3da:	461c      	mov	r4, r3
     3dc:	6856      	ldr	r6, [r2, #4]
     3de:	b12e      	cbz	r6, 3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     3e0:	b001      	add	sp, #4
     3e2:	462a      	mov	r2, r5
     3e4:	46b4      	mov	ip, r6
     3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3ea:	4760      	bx	ip
     3ec:	2000      	movs	r0, #0
     3ee:	f88d 0000 	strb.w	r0, [sp]
     3f2:	4668      	mov	r0, sp
     3f4:	f00b ffc6 	bl	c384 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     3f8:	f89d 0000 	ldrb.w	r0, [sp]
     3fc:	1a28      	subs	r0, r5, r0
     3fe:	7020      	strb	r0, [r4, #0]
     400:	2000      	movs	r0, #0
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	20000000 	.word	0x20000000
     408:	2800      	cmp	r0, #0
     40a:	d019      	beq.n	440 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x40>
     40c:	7803      	ldrb	r3, [r0, #0]
     40e:	4913      	ldr	r1, [pc, #76]	; (45c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5c>)
     410:	4a13      	ldr	r2, [pc, #76]	; (460 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x60>)
     412:	b113      	cbz	r3, 41a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x1a>
     414:	2b01      	cmp	r3, #1
     416:	d00e      	beq.n	436 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x36>
     418:	e011      	b.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     41a:	7903      	ldrb	r3, [r0, #4]
     41c:	2b01      	cmp	r3, #1
     41e:	d000      	beq.n	422 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x22>
     420:	b96b      	cbnz	r3, 43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     422:	7943      	ldrb	r3, [r0, #5]
     424:	b10b      	cbz	r3, 42a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2a>
     426:	2b01      	cmp	r3, #1
     428:	d109      	bne.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     42a:	6883      	ldr	r3, [r0, #8]
     42c:	3b64      	subs	r3, #100	; 0x64
     42e:	428b      	cmp	r3, r1
     430:	d205      	bcs.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     432:	68c0      	ldr	r0, [r0, #12]
     434:	e00e      	b.n	454 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x54>
     436:	7903      	ldrb	r3, [r0, #4]
     438:	2b01      	cmp	r3, #1
     43a:	d002      	beq.n	442 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x42>
     43c:	b10b      	cbz	r3, 442 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x42>
     43e:	2000      	movs	r0, #0
     440:	4770      	bx	lr
     442:	7943      	ldrb	r3, [r0, #5]
     444:	b10b      	cbz	r3, 44a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4a>
     446:	2b01      	cmp	r3, #1
     448:	d1f9      	bne.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     44a:	68c3      	ldr	r3, [r0, #12]
     44c:	3b64      	subs	r3, #100	; 0x64
     44e:	428b      	cmp	r3, r1
     450:	d2f5      	bcs.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     452:	6880      	ldr	r0, [r0, #8]
     454:	4290      	cmp	r0, r2
     456:	d8f2      	bhi.n	43e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3e>
     458:	2001      	movs	r0, #1
     45a:	4770      	bx	lr
     45c:	0001863d 	.word	0x0001863d
     460:	07a11fff 	.word	0x07a11fff
     464:	b510      	push	{r4, lr}
     466:	4c05      	ldr	r4, [pc, #20]	; (47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>)
     468:	6820      	ldr	r0, [r4, #0]
     46a:	b110      	cbz	r0, 472 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x72>
     46c:	4780      	blx	r0
     46e:	2000      	movs	r0, #0
     470:	6020      	str	r0, [r4, #0]
     472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     476:	f002 b805 	b.w	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     47a:	0000      	.short	0x0000
     47c:	20000008 	.word	0x20000008

00000480 <mpsl_timeslot_session_open>:
     480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     484:	460e      	mov	r6, r1
     486:	0005      	movs	r5, r0
     488:	d004      	beq.n	494 <mpsl_timeslot_session_open+0x14>
     48a:	f000 f845 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     48e:	4607      	mov	r7, r0
     490:	2400      	movs	r4, #0
     492:	e00a      	b.n	4aa <mpsl_timeslot_session_open+0x2a>
     494:	f06f 0015 	mvn.w	r0, #21
     498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     49c:	4620      	mov	r0, r4
     49e:	f000 f841 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4a2:	7880      	ldrb	r0, [r0, #2]
     4a4:	b138      	cbz	r0, 4b6 <mpsl_timeslot_session_open+0x36>
     4a6:	1c64      	adds	r4, r4, #1
     4a8:	b2e4      	uxtb	r4, r4
     4aa:	42bc      	cmp	r4, r7
     4ac:	d3f6      	bcc.n	49c <mpsl_timeslot_session_open+0x1c>
     4ae:	bf00      	nop
     4b0:	f06f 000b 	mvn.w	r0, #11
     4b4:	e7f0      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4b6:	4627      	mov	r7, r4
     4b8:	2cff      	cmp	r4, #255	; 0xff
     4ba:	d0f9      	beq.n	4b0 <mpsl_timeslot_session_open+0x30>
     4bc:	4620      	mov	r0, r4
     4be:	f000 f831 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4c2:	4604      	mov	r4, r0
     4c4:	f00c f901 	bl	c6ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
     4c8:	7127      	strb	r7, [r4, #4]
     4ca:	4621      	mov	r1, r4
     4cc:	4807      	ldr	r0, [pc, #28]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4ce:	f001 ffb1 	bl	2434 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4d2:	70e0      	strb	r0, [r4, #3]
     4d4:	2820      	cmp	r0, #32
     4d6:	d005      	beq.n	4e4 <mpsl_timeslot_session_open+0x64>
     4d8:	2001      	movs	r0, #1
     4da:	60a5      	str	r5, [r4, #8]
     4dc:	70a0      	strb	r0, [r4, #2]
     4de:	7037      	strb	r7, [r6, #0]
     4e0:	2000      	movs	r0, #0
     4e2:	e7d9      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
     4e8:	e7d6      	b.n	498 <mpsl_timeslot_session_open+0x18>
     4ea:	0000      	.short	0x0000
     4ec:	0000c42b 	.word	0x0000c42b

000004f0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     4f0:	b510      	push	{r4, lr}
     4f2:	0782      	lsls	r2, r0, #30
     4f4:	d002      	beq.n	4fc <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     4f6:	f06f 000d 	mvn.w	r0, #13
     4fa:	bd10      	pop	{r4, pc}
     4fc:	4a05      	ldr	r2, [pc, #20]	; (514 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     4fe:	7011      	strb	r1, [r2, #0]
     500:	6050      	str	r0, [r2, #4]
     502:	b128      	cbz	r0, 510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     504:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     508:	008a      	lsls	r2, r1, #2
     50a:	2100      	movs	r1, #0
     50c:	f00c fb63 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     510:	2000      	movs	r0, #0
     512:	bd10      	pop	{r4, pc}
     514:	2000000c 	.word	0x2000000c

00000518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     518:	4801      	ldr	r0, [pc, #4]	; (520 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     51a:	7800      	ldrb	r0, [r0, #0]
     51c:	4770      	bx	lr
     51e:	0000      	.short	0x0000
     520:	2000000c 	.word	0x2000000c

00000524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     524:	4905      	ldr	r1, [pc, #20]	; (53c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     526:	780a      	ldrb	r2, [r1, #0]
     528:	4290      	cmp	r0, r2
     52a:	d301      	bcc.n	530 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     52c:	2000      	movs	r0, #0
     52e:	4770      	bx	lr
     530:	6849      	ldr	r1, [r1, #4]
     532:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     536:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     53a:	4770      	bx	lr
     53c:	2000000c 	.word	0x2000000c
     540:	b570      	push	{r4, r5, r6, lr}
     542:	4605      	mov	r5, r0
     544:	2a20      	cmp	r2, #32
     546:	d027      	beq.n	598 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     548:	4819      	ldr	r0, [pc, #100]	; (5b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     54a:	4c1a      	ldr	r4, [pc, #104]	; (5b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     54c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     550:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     558:	2920      	cmp	r1, #32
     55a:	d022      	beq.n	5a2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     55c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     560:	7840      	ldrb	r0, [r0, #1]
     562:	784c      	ldrb	r4, [r1, #1]
     564:	7048      	strb	r0, [r1, #1]
     566:	4620      	mov	r0, r4
     568:	4601      	mov	r1, r0
     56a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     56e:	4291      	cmp	r1, r2
     570:	7005      	strb	r5, [r0, #0]
     572:	7840      	ldrb	r0, [r0, #1]
     574:	d1f8      	bne.n	568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     576:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     57a:	2a20      	cmp	r2, #32
     57c:	bf1a      	itte	ne
     57e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     582:	7054      	strbne	r4, [r2, #1]
     584:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     588:	2220      	movs	r2, #32
     58a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     58e:	f88c 2001 	strb.w	r2, [ip, #1]
     592:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     596:	bd70      	pop	{r4, r5, r6, pc}
     598:	f240 217e 	movw	r1, #638	; 0x27e
     59c:	2070      	movs	r0, #112	; 0x70
     59e:	f003 f9a1 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5a2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5a6:	7840      	ldrb	r0, [r0, #1]
     5a8:	f883 0020 	strb.w	r0, [r3, #32]
     5ac:	e7db      	b.n	566 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5ae:	0000      	.short	0x0000
     5b0:	20000cec 	.word	0x20000cec
     5b4:	20000d6c 	.word	0x20000d6c
     5b8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5bc:	b085      	sub	sp, #20
     5be:	4615      	mov	r5, r2
     5c0:	460c      	mov	r4, r1
     5c2:	f002 f915 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5c6:	4428      	add	r0, r5
     5c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5cc:	9002      	str	r0, [sp, #8]
     5ce:	6821      	ldr	r1, [r4, #0]
     5d0:	1a08      	subs	r0, r1, r0
     5d2:	0200      	lsls	r0, r0, #8
     5d4:	17c1      	asrs	r1, r0, #31
     5d6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5da:	1200      	asrs	r0, r0, #8
     5dc:	2800      	cmp	r0, #0
     5de:	f300 80d5 	bgt.w	78c <__data_size+0x18b>
     5e2:	48ac      	ldr	r0, [pc, #688]	; (894 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x94>)
     5e4:	9f08      	ldr	r7, [sp, #32]
     5e6:	4eac      	ldr	r6, [pc, #688]	; (898 <CONFIG_BT_RX_STACK_SIZE>)
     5e8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     5ec:	9003      	str	r0, [sp, #12]
     5ee:	f890 5020 	ldrb.w	r5, [r0, #32]
     5f2:	2020      	movs	r0, #32
     5f4:	46e9      	mov	r9, sp
     5f6:	f10d 0804 	add.w	r8, sp, #4
     5fa:	f88d 0000 	strb.w	r0, [sp]
     5fe:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     602:	2d20      	cmp	r5, #32
     604:	bf18      	it	ne
     606:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     60a:	d025      	beq.n	658 <__data_size+0x57>
     60c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     610:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     614:	6822      	ldr	r2, [r4, #0]
     616:	68c1      	ldr	r1, [r0, #12]
     618:	1a51      	subs	r1, r2, r1
     61a:	0209      	lsls	r1, r1, #8
     61c:	17ca      	asrs	r2, r1, #31
     61e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     622:	3008      	adds	r0, #8
     624:	1209      	asrs	r1, r1, #8
     626:	d417      	bmi.n	658 <__data_size+0x57>
     628:	8961      	ldrh	r1, [r4, #10]
     62a:	b171      	cbz	r1, 64a <__data_size+0x49>
     62c:	8941      	ldrh	r1, [r0, #10]
     62e:	b961      	cbnz	r1, 64a <__data_size+0x49>
     630:	f000 fdb4 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     634:	f002 f8dc 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     638:	6821      	ldr	r1, [r4, #0]
     63a:	1a08      	subs	r0, r1, r0
     63c:	0200      	lsls	r0, r0, #8
     63e:	17c1      	asrs	r1, r0, #31
     640:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     644:	1200      	asrs	r0, r0, #8
     646:	2833      	cmp	r0, #51	; 0x33
     648:	db06      	blt.n	658 <__data_size+0x57>
     64a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     64e:	f889 5000 	strb.w	r5, [r9]
     652:	7845      	ldrb	r5, [r0, #1]
     654:	2d20      	cmp	r5, #32
     656:	d1d9      	bne.n	60c <__data_size+0xb>
     658:	f899 0000 	ldrb.w	r0, [r9]
     65c:	f888 0000 	strb.w	r0, [r8]
     660:	46a1      	mov	r9, r4
     662:	2d20      	cmp	r5, #32
     664:	bf1c      	itt	ne
     666:	488d      	ldrne	r0, [pc, #564]	; (89c <CONFIG_BT_RX_STACK_SIZE+0x4>)
     668:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     66c:	f000 810e 	beq.w	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     670:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     674:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     678:	f8d9 2004 	ldr.w	r2, [r9, #4]
     67c:	f8da 1008 	ldr.w	r1, [sl, #8]
     680:	4648      	mov	r0, r9
     682:	1a89      	subs	r1, r1, r2
     684:	0209      	lsls	r1, r1, #8
     686:	17ca      	asrs	r2, r1, #31
     688:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     68c:	f10a 0708 	add.w	r7, sl, #8
     690:	1209      	asrs	r1, r1, #8
     692:	d415      	bmi.n	6c0 <__data_size+0xbf>
     694:	8979      	ldrh	r1, [r7, #10]
     696:	2900      	cmp	r1, #0
     698:	f000 80f8 	beq.w	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     69c:	8941      	ldrh	r1, [r0, #10]
     69e:	2900      	cmp	r1, #0
     6a0:	f040 80f4 	bne.w	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     6a4:	f000 fd7a 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     6a8:	f002 f8a2 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6ac:	6839      	ldr	r1, [r7, #0]
     6ae:	1a08      	subs	r0, r1, r0
     6b0:	0200      	lsls	r0, r0, #8
     6b2:	17c1      	asrs	r1, r0, #31
     6b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6b8:	1200      	asrs	r0, r0, #8
     6ba:	2833      	cmp	r0, #51	; 0x33
     6bc:	f280 80e6 	bge.w	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     6c0:	f888 5000 	strb.w	r5, [r8]
     6c4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6c8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6cc:	4281      	cmp	r1, r0
     6ce:	d906      	bls.n	6de <__data_size+0xdd>
     6d0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6d4:	7845      	ldrb	r5, [r0, #1]
     6d6:	2d20      	cmp	r5, #32
     6d8:	d1ca      	bne.n	670 <__data_size+0x6f>
     6da:	f000 b8d7 	b.w	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     6de:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     6e6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     6ea:	8a68      	ldrh	r0, [r5, #18]
     6ec:	68ef      	ldr	r7, [r5, #12]
     6ee:	2800      	cmp	r0, #0
     6f0:	d143      	bne.n	77a <__data_size+0x179>
     6f2:	8960      	ldrh	r0, [r4, #10]
     6f4:	b3e8      	cbz	r0, 772 <__data_size+0x171>
     6f6:	68a8      	ldr	r0, [r5, #8]
     6f8:	f00c f885 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     6fc:	8a69      	ldrh	r1, [r5, #18]
     6fe:	7c2a      	ldrb	r2, [r5, #16]
     700:	4b67      	ldr	r3, [pc, #412]	; (8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>)
     702:	4411      	add	r1, r2
     704:	1c49      	adds	r1, r1, #1
     706:	1842      	adds	r2, r0, r1
     708:	4298      	cmp	r0, r3
     70a:	d904      	bls.n	716 <__data_size+0x115>
     70c:	f240 6109 	movw	r1, #1545	; 0x609
     710:	2070      	movs	r0, #112	; 0x70
     712:	f003 f8e7 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     716:	4863      	ldr	r0, [pc, #396]	; (8a4 <CONFIG_BT_RX_STACK_SIZE+0xc>)
     718:	4281      	cmp	r1, r0
     71a:	dd04      	ble.n	726 <__data_size+0x125>
     71c:	f240 610a 	movw	r1, #1546	; 0x60a
     720:	2070      	movs	r0, #112	; 0x70
     722:	f003 f8df 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     726:	4860      	ldr	r0, [pc, #384]	; (8a8 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     728:	4281      	cmp	r1, r0
     72a:	da04      	bge.n	736 <__data_size+0x135>
     72c:	f240 610b 	movw	r1, #1547	; 0x60b
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f8d7 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	485d      	ldr	r0, [pc, #372]	; (8ac <CONFIG_BT_RX_STACK_SIZE+0x14>)
     738:	4290      	cmp	r0, r2
     73a:	bfdc      	itt	le
     73c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     740:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     744:	dd05      	ble.n	752 <__data_size+0x151>
     746:	2a00      	cmp	r2, #0
     748:	bfbc      	itt	lt
     74a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     74e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     752:	4610      	mov	r0, r2
     754:	f002 f84c 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     758:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     75c:	1a78      	subs	r0, r7, r1
     75e:	0200      	lsls	r0, r0, #8
     760:	17c2      	asrs	r2, r0, #31
     762:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     766:	1200      	asrs	r0, r0, #8
     768:	2833      	cmp	r0, #51	; 0x33
     76a:	bfb8      	it	lt
     76c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     770:	e000      	b.n	774 <__data_size+0x173>
     772:	e002      	b.n	77a <__data_size+0x179>
     774:	bfb8      	it	lt
     776:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     77a:	9802      	ldr	r0, [sp, #8]
     77c:	1a38      	subs	r0, r7, r0
     77e:	0200      	lsls	r0, r0, #8
     780:	17c1      	asrs	r1, r0, #31
     782:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     786:	1200      	asrs	r0, r0, #8
     788:	2800      	cmp	r0, #0
     78a:	dd03      	ble.n	794 <__data_size+0x193>
     78c:	b009      	add	sp, #36	; 0x24
     78e:	2000      	movs	r0, #0
     790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     794:	e9d4 1000 	ldrd	r1, r0, [r4]
     798:	1a40      	subs	r0, r0, r1
     79a:	4438      	add	r0, r7
     79c:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7a4:	e9c4 1000 	strd	r1, r0, [r4]
     7a8:	9803      	ldr	r0, [sp, #12]
     7aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7ae:	466f      	mov	r7, sp
     7b0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7b4:	2020      	movs	r0, #32
     7b6:	f10d 0a04 	add.w	sl, sp, #4
     7ba:	f88d 0000 	strb.w	r0, [sp]
     7be:	2d20      	cmp	r5, #32
     7c0:	bf1c      	itt	ne
     7c2:	4836      	ldrne	r0, [pc, #216]	; (89c <CONFIG_BT_RX_STACK_SIZE+0x4>)
     7c4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7c8:	d025      	beq.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     7ca:	bf00      	nop
     7cc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7d0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7d4:	6822      	ldr	r2, [r4, #0]
     7d6:	68c1      	ldr	r1, [r0, #12]
     7d8:	1a51      	subs	r1, r2, r1
     7da:	0209      	lsls	r1, r1, #8
     7dc:	17ca      	asrs	r2, r1, #31
     7de:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     7e2:	3008      	adds	r0, #8
     7e4:	1209      	asrs	r1, r1, #8
     7e6:	d416      	bmi.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     7e8:	8961      	ldrh	r1, [r4, #10]
     7ea:	b171      	cbz	r1, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7ec:	8941      	ldrh	r1, [r0, #10]
     7ee:	b961      	cbnz	r1, 80a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa>
     7f0:	f000 fcd4 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     7f4:	f001 fffc 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7f8:	6821      	ldr	r1, [r4, #0]
     7fa:	1a08      	subs	r0, r1, r0
     7fc:	0200      	lsls	r0, r0, #8
     7fe:	17c1      	asrs	r1, r0, #31
     800:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     804:	1200      	asrs	r0, r0, #8
     806:	2833      	cmp	r0, #51	; 0x33
     808:	db05      	blt.n	816 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16>
     80a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     80e:	703d      	strb	r5, [r7, #0]
     810:	7845      	ldrb	r5, [r0, #1]
     812:	2d20      	cmp	r5, #32
     814:	d1da      	bne.n	7cc <__data_size+0x1cb>
     816:	7838      	ldrb	r0, [r7, #0]
     818:	f88a 0000 	strb.w	r0, [sl]
     81c:	4627      	mov	r7, r4
     81e:	2d20      	cmp	r5, #32
     820:	bf1c      	itt	ne
     822:	481e      	ldrne	r0, [pc, #120]	; (89c <CONFIG_BT_RX_STACK_SIZE+0x4>)
     824:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     828:	d030      	beq.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     82a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     82e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     832:	6879      	ldr	r1, [r7, #4]
     834:	f8d9 2008 	ldr.w	r2, [r9, #8]
     838:	4638      	mov	r0, r7
     83a:	1a51      	subs	r1, r2, r1
     83c:	0209      	lsls	r1, r1, #8
     83e:	17ca      	asrs	r2, r1, #31
     840:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     844:	f109 0808 	add.w	r8, r9, #8
     848:	1209      	asrs	r1, r1, #8
     84a:	d412      	bmi.n	872 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x72>
     84c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     850:	b1e1      	cbz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     852:	8941      	ldrh	r1, [r0, #10]
     854:	b9d1      	cbnz	r1, 88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     856:	f000 fca1 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     85a:	f001 ffc9 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     85e:	f8d8 1000 	ldr.w	r1, [r8]
     862:	1a08      	subs	r0, r1, r0
     864:	0200      	lsls	r0, r0, #8
     866:	17c1      	asrs	r1, r0, #31
     868:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     86c:	1200      	asrs	r0, r0, #8
     86e:	2833      	cmp	r0, #51	; 0x33
     870:	da0c      	bge.n	88c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8c>
     872:	f88a 5000 	strb.w	r5, [sl]
     876:	f899 0014 	ldrb.w	r0, [r9, #20]
     87a:	7b39      	ldrb	r1, [r7, #12]
     87c:	4288      	cmp	r0, r1
     87e:	f67f af2e 	bls.w	6de <__data_size+0xdd>
     882:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     886:	7845      	ldrb	r5, [r0, #1]
     888:	2d20      	cmp	r5, #32
     88a:	d1ce      	bne.n	82a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a>
     88c:	b009      	add	sp, #36	; 0x24
     88e:	2001      	movs	r0, #1
     890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     894:	20000d6c 	.word	0x20000d6c
     898:	200009ec 	.word	0x200009ec
     89c:	20000cec 	.word	0x20000cec
     8a0:	1e847fff 	.word	0x1e847fff
     8a4:	07a12000 	.word	0x07a12000
     8a8:	f85ee000 	.word	0xf85ee000
     8ac:	1e848000 	.word	0x1e848000
     8b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8b4:	4604      	mov	r4, r0
     8b6:	483c      	ldr	r0, [pc, #240]	; (9a8 <CONFIG_BT_RX_STACK_SIZE+0x110>)
     8b8:	460e      	mov	r6, r1
     8ba:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8be:	4f3b      	ldr	r7, [pc, #236]	; (9ac <CONFIG_BT_RX_STACK_SIZE+0x114>)
     8c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     8c4:	2020      	movs	r0, #32
     8c6:	4698      	mov	r8, r3
     8c8:	4692      	mov	sl, r2
     8ca:	7010      	strb	r0, [r2, #0]
     8cc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8d0:	2d20      	cmp	r5, #32
     8d2:	bf18      	it	ne
     8d4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8d8:	d028      	beq.n	92c <CONFIG_BT_RX_STACK_SIZE+0x94>
     8da:	bf00      	nop
     8dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     8e0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     8e4:	f100 0108 	add.w	r1, r0, #8
     8e8:	68c0      	ldr	r0, [r0, #12]
     8ea:	6822      	ldr	r2, [r4, #0]
     8ec:	1a10      	subs	r0, r2, r0
     8ee:	0200      	lsls	r0, r0, #8
     8f0:	17c2      	asrs	r2, r0, #31
     8f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8f6:	1200      	asrs	r0, r0, #8
     8f8:	d418      	bmi.n	92c <CONFIG_BT_RX_STACK_SIZE+0x94>
     8fa:	8960      	ldrh	r0, [r4, #10]
     8fc:	b178      	cbz	r0, 91e <CONFIG_BT_RX_STACK_SIZE+0x86>
     8fe:	8948      	ldrh	r0, [r1, #10]
     900:	b968      	cbnz	r0, 91e <CONFIG_BT_RX_STACK_SIZE+0x86>
     902:	4608      	mov	r0, r1
     904:	f000 fc4a 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     908:	f001 ff72 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     90c:	6821      	ldr	r1, [r4, #0]
     90e:	1a08      	subs	r0, r1, r0
     910:	0200      	lsls	r0, r0, #8
     912:	17c1      	asrs	r1, r0, #31
     914:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     918:	1200      	asrs	r0, r0, #8
     91a:	2833      	cmp	r0, #51	; 0x33
     91c:	db06      	blt.n	92c <CONFIG_BT_RX_STACK_SIZE+0x94>
     91e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     922:	f88a 5000 	strb.w	r5, [sl]
     926:	7845      	ldrb	r5, [r0, #1]
     928:	2d20      	cmp	r5, #32
     92a:	d1d7      	bne.n	8dc <CONFIG_BT_RX_STACK_SIZE+0x44>
     92c:	f89a 0000 	ldrb.w	r0, [sl]
     930:	f888 0000 	strb.w	r0, [r8]
     934:	2d20      	cmp	r5, #32
     936:	bf18      	it	ne
     938:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     93c:	d030      	beq.n	9a0 <CONFIG_BT_RX_STACK_SIZE+0x108>
     93e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     942:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     946:	6861      	ldr	r1, [r4, #4]
     948:	f8d9 2008 	ldr.w	r2, [r9, #8]
     94c:	4620      	mov	r0, r4
     94e:	1a51      	subs	r1, r2, r1
     950:	0209      	lsls	r1, r1, #8
     952:	17ca      	asrs	r2, r1, #31
     954:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     958:	f109 0608 	add.w	r6, r9, #8
     95c:	1209      	asrs	r1, r1, #8
     95e:	d410      	bmi.n	982 <CONFIG_BT_RX_STACK_SIZE+0xea>
     960:	8971      	ldrh	r1, [r6, #10]
     962:	b1e9      	cbz	r1, 9a0 <CONFIG_BT_RX_STACK_SIZE+0x108>
     964:	8941      	ldrh	r1, [r0, #10]
     966:	b9d9      	cbnz	r1, 9a0 <CONFIG_BT_RX_STACK_SIZE+0x108>
     968:	f000 fc18 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     96c:	f001 ff40 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     970:	6831      	ldr	r1, [r6, #0]
     972:	1a08      	subs	r0, r1, r0
     974:	0200      	lsls	r0, r0, #8
     976:	17c1      	asrs	r1, r0, #31
     978:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     97c:	1200      	asrs	r0, r0, #8
     97e:	2833      	cmp	r0, #51	; 0x33
     980:	da0e      	bge.n	9a0 <CONFIG_BT_RX_STACK_SIZE+0x108>
     982:	f888 5000 	strb.w	r5, [r8]
     986:	f899 0014 	ldrb.w	r0, [r9, #20]
     98a:	7b21      	ldrb	r1, [r4, #12]
     98c:	4288      	cmp	r0, r1
     98e:	d802      	bhi.n	996 <CONFIG_BT_RX_STACK_SIZE+0xfe>
     990:	2000      	movs	r0, #0
     992:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     996:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     99a:	7845      	ldrb	r5, [r0, #1]
     99c:	2d20      	cmp	r5, #32
     99e:	d1ce      	bne.n	93e <CONFIG_BT_RX_STACK_SIZE+0xa6>
     9a0:	2001      	movs	r0, #1
     9a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9a6:	0000      	.short	0x0000
     9a8:	20000d6c 	.word	0x20000d6c
     9ac:	200009ec 	.word	0x200009ec
     9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b4:	b098      	sub	sp, #96	; 0x60
     9b6:	4616      	mov	r6, r2
     9b8:	460d      	mov	r5, r1
     9ba:	f04f 0800 	mov.w	r8, #0
     9be:	f04f 0b01 	mov.w	fp, #1
     9c2:	f002 f997 	bl	2cf4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9c6:	4604      	mov	r4, r0
     9c8:	2d01      	cmp	r5, #1
     9ca:	bf18      	it	ne
     9cc:	2d02      	cmpne	r5, #2
     9ce:	d005      	beq.n	9dc <CONFIG_BT_RX_STACK_SIZE+0x144>
     9d0:	f640 1194 	movw	r1, #2452	; 0x994
     9d4:	f04f 0070 	mov.w	r0, #112	; 0x70
     9d8:	f002 ff84 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9dc:	49f9      	ldr	r1, [pc, #996]	; (dc4 <CONFIG_BT_RX_STACK_SIZE+0x52c>)
     9de:	2001      	movs	r0, #1
     9e0:	6008      	str	r0, [r1, #0]
     9e2:	49f9      	ldr	r1, [pc, #996]	; (dc8 <CONFIG_BT_RX_STACK_SIZE+0x530>)
     9e4:	6889      	ldr	r1, [r1, #8]
     9e6:	6008      	str	r0, [r1, #0]
     9e8:	2000      	movs	r0, #0
     9ea:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     9ee:	900c      	str	r0, [sp, #48]	; 0x30
     9f0:	1e40      	subs	r0, r0, #1
     9f2:	900e      	str	r0, [sp, #56]	; 0x38
     9f4:	49f5      	ldr	r1, [pc, #980]	; (dcc <CONFIG_BT_RX_STACK_SIZE+0x534>)
     9f6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     9fa:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     9fe:	3308      	adds	r3, #8
     a00:	af0f      	add	r7, sp, #60	; 0x3c
     a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a04:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a08:	a80f      	add	r0, sp, #60	; 0x3c
     a0a:	f000 fbc7 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     a0e:	900d      	str	r0, [sp, #52]	; 0x34
     a10:	48ee      	ldr	r0, [pc, #952]	; (dcc <CONFIG_BT_RX_STACK_SIZE+0x534>)
     a12:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a16:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a1a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a1e:	f1b9 0f00 	cmp.w	r9, #0
     a22:	bf14      	ite	ne
     a24:	f04f 0a01 	movne.w	sl, #1
     a28:	f04f 0a00 	moveq.w	sl, #0
     a2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a2e:	9014      	str	r0, [sp, #80]	; 0x50
     a30:	f1ba 0f00 	cmp.w	sl, #0
     a34:	d009      	beq.n	a4a <CONFIG_BT_RX_STACK_SIZE+0x1b2>
     a36:	48e6      	ldr	r0, [pc, #920]	; (dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>)
     a38:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a3c:	b928      	cbnz	r0, a4a <CONFIG_BT_RX_STACK_SIZE+0x1b2>
     a3e:	f002 fed9 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a42:	2800      	cmp	r0, #0
     a44:	bf08      	it	eq
     a46:	2701      	moveq	r7, #1
     a48:	d000      	beq.n	a4c <CONFIG_BT_RX_STACK_SIZE+0x1b4>
     a4a:	2700      	movs	r7, #0
     a4c:	48e1      	ldr	r0, [pc, #900]	; (dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>)
     a4e:	2200      	movs	r2, #0
     a50:	9215      	str	r2, [sp, #84]	; 0x54
     a52:	7800      	ldrb	r0, [r0, #0]
     a54:	4616      	mov	r6, r2
     a56:	2801      	cmp	r0, #1
     a58:	bf18      	it	ne
     a5a:	2803      	cmpne	r0, #3
     a5c:	d140      	bne.n	ae0 <CONFIG_BT_RX_STACK_SIZE+0x248>
     a5e:	48dd      	ldr	r0, [pc, #884]	; (dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>)
     a60:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a64:	eba8 0009 	sub.w	r0, r8, r9
     a68:	9015      	str	r0, [sp, #84]	; 0x54
     a6a:	45c8      	cmp	r8, r9
     a6c:	d938      	bls.n	ae0 <CONFIG_BT_RX_STACK_SIZE+0x248>
     a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a70:	ea6f 0108 	mvn.w	r1, r8
     a74:	f8df e360 	ldr.w	lr, [pc, #864]	; dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>
     a78:	1858      	adds	r0, r3, r1
     a7a:	f10d 0c0c 	add.w	ip, sp, #12
     a7e:	aa17      	add	r2, sp, #92	; 0x5c
     a80:	4573      	cmp	r3, lr
     a82:	d904      	bls.n	a8e <CONFIG_BT_RX_STACK_SIZE+0x1f6>
     a84:	f240 6109 	movw	r1, #1545	; 0x609
     a88:	2070      	movs	r0, #112	; 0x70
     a8a:	f002 ff2b 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a8e:	4bd3      	ldr	r3, [pc, #844]	; (ddc <CONFIG_BT_RX_STACK_SIZE+0x544>)
     a90:	4299      	cmp	r1, r3
     a92:	dd04      	ble.n	a9e <CONFIG_BT_RX_STACK_SIZE+0x206>
     a94:	f240 610a 	movw	r1, #1546	; 0x60a
     a98:	2070      	movs	r0, #112	; 0x70
     a9a:	f002 ff23 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a9e:	4bd0      	ldr	r3, [pc, #832]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     aa0:	4299      	cmp	r1, r3
     aa2:	da04      	bge.n	aae <CONFIG_BT_RX_STACK_SIZE+0x216>
     aa4:	f240 610b 	movw	r1, #1547	; 0x60b
     aa8:	2070      	movs	r0, #112	; 0x70
     aaa:	f002 ff1b 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aae:	49cd      	ldr	r1, [pc, #820]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     ab0:	4281      	cmp	r1, r0
     ab2:	bfdc      	itt	le
     ab4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ab8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     abc:	dd05      	ble.n	aca <CONFIG_BT_RX_STACK_SIZE+0x232>
     abe:	2800      	cmp	r0, #0
     ac0:	bfbc      	itt	lt
     ac2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ac6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     aca:	4661      	mov	r1, ip
     acc:	f001 feac 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ad0:	9803      	ldr	r0, [sp, #12]
     ad2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ad4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ad8:	9003      	str	r0, [sp, #12]
     ada:	1a08      	subs	r0, r1, r0
     adc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     ae0:	2f00      	cmp	r7, #0
     ae2:	bf18      	it	ne
     ae4:	2632      	movne	r6, #50	; 0x32
     ae6:	d104      	bne.n	af2 <CONFIG_BT_RX_STACK_SIZE+0x25a>
     ae8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     aec:	2800      	cmp	r0, #0
     aee:	bf18      	it	ne
     af0:	2602      	movne	r6, #2
     af2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af6:	d008      	beq.n	b0a <CONFIG_BT_RX_STACK_SIZE+0x272>
     af8:	980f      	ldr	r0, [sp, #60]	; 0x3c
     afa:	1b00      	subs	r0, r0, r4
     afc:	0200      	lsls	r0, r0, #8
     afe:	17c1      	asrs	r1, r0, #31
     b00:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b04:	1200      	asrs	r0, r0, #8
     b06:	2801      	cmp	r0, #1
     b08:	da02      	bge.n	b10 <CONFIG_BT_RX_STACK_SIZE+0x278>
     b0a:	2004      	movs	r0, #4
     b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
     b0e:	e00b      	b.n	b28 <CONFIG_BT_RX_STACK_SIZE+0x290>
     b10:	b147      	cbz	r7, b24 <CONFIG_BT_RX_STACK_SIZE+0x28c>
     b12:	48af      	ldr	r0, [pc, #700]	; (dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>)
     b14:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b18:	b120      	cbz	r0, b24 <CONFIG_BT_RX_STACK_SIZE+0x28c>
     b1a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b1e:	1c06      	adds	r6, r0, #0
     b20:	bf18      	it	ne
     b22:	2602      	movne	r6, #2
     b24:	4621      	mov	r1, r4
     b26:	2001      	movs	r0, #1
     b28:	f1b9 0f00 	cmp.w	r9, #0
     b2c:	d002      	beq.n	b34 <CONFIG_BT_RX_STACK_SIZE+0x29c>
     b2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b30:	2b1e      	cmp	r3, #30
     b32:	da02      	bge.n	b3a <CONFIG_BT_RX_STACK_SIZE+0x2a2>
     b34:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b38:	b113      	cbz	r3, b40 <CONFIG_BT_RX_STACK_SIZE+0x2a8>
     b3a:	f04f 0b00 	mov.w	fp, #0
     b3e:	1e40      	subs	r0, r0, #1
     b40:	1983      	adds	r3, r0, r6
     b42:	48a4      	ldr	r0, [pc, #656]	; (dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>)
     b44:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b48:	7800      	ldrb	r0, [r0, #0]
     b4a:	9015      	str	r0, [sp, #84]	; 0x54
     b4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b4e:	1a80      	subs	r0, r0, r2
     b50:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     b54:	ebac 0001 	sub.w	r0, ip, r1
     b58:	0200      	lsls	r0, r0, #8
     b5a:	17c6      	asrs	r6, r0, #31
     b5c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     b60:	1200      	asrs	r0, r0, #8
     b62:	4298      	cmp	r0, r3
     b64:	db18      	blt.n	b98 <CONFIG_BT_RX_STACK_SIZE+0x300>
     b66:	2a00      	cmp	r2, #0
     b68:	bf18      	it	ne
     b6a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b6e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b70:	9705      	str	r7, [sp, #20]
     b72:	2700      	movs	r7, #0
     b74:	f001 ffb6 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b78:	1a30      	subs	r0, r6, r0
     b7a:	0200      	lsls	r0, r0, #8
     b7c:	17c1      	asrs	r1, r0, #31
     b7e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b82:	1200      	asrs	r0, r0, #8
     b84:	283e      	cmp	r0, #62	; 0x3e
     b86:	da3f      	bge.n	c08 <CONFIG_BT_RX_STACK_SIZE+0x370>
     b88:	2d01      	cmp	r5, #1
     b8a:	d020      	beq.n	bce <CONFIG_BT_RX_STACK_SIZE+0x336>
     b8c:	1e70      	subs	r0, r6, #1
     b8e:	9905      	ldr	r1, [sp, #20]
     b90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b94:	b319      	cbz	r1, bde <CONFIG_BT_RX_STACK_SIZE+0x346>
     b96:	e02d      	b.n	bf4 <CONFIG_BT_RX_STACK_SIZE+0x35c>
     b98:	b182      	cbz	r2, bbc <CONFIG_BT_RX_STACK_SIZE+0x324>
     b9a:	f1be 0f00 	cmp.w	lr, #0
     b9e:	bf04      	itt	eq
     ba0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     ba2:	2803      	cmpeq	r0, #3
     ba4:	d00a      	beq.n	bbc <CONFIG_BT_RX_STACK_SIZE+0x324>
     ba6:	b927      	cbnz	r7, bb2 <CONFIG_BT_RX_STACK_SIZE+0x31a>
     ba8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bac:	2800      	cmp	r0, #0
     bae:	bf18      	it	ne
     bb0:	1e9b      	subne	r3, r3, #2
     bb2:	2200      	movs	r2, #0
     bb4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bb8:	4690      	mov	r8, r2
     bba:	e7c7      	b.n	b4c <CONFIG_BT_RX_STACK_SIZE+0x2b4>
     bbc:	bb07      	cbnz	r7, c00 <CONFIG_BT_RX_STACK_SIZE+0x368>
     bbe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bc2:	b1e8      	cbz	r0, c00 <CONFIG_BT_RX_STACK_SIZE+0x368>
     bc4:	2000      	movs	r0, #0
     bc6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     bca:	1e9b      	subs	r3, r3, #2
     bcc:	e7be      	b.n	b4c <CONFIG_BT_RX_STACK_SIZE+0x2b4>
     bce:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bd2:	d120      	bne.n	c16 <CONFIG_BT_RX_STACK_SIZE+0x37e>
     bd4:	f640 110d 	movw	r1, #2317	; 0x90d
     bd8:	2070      	movs	r0, #112	; 0x70
     bda:	f002 fe83 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bde:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     be2:	d007      	beq.n	bf4 <CONFIG_BT_RX_STACK_SIZE+0x35c>
     be4:	1a21      	subs	r1, r4, r0
     be6:	0209      	lsls	r1, r1, #8
     be8:	17ca      	asrs	r2, r1, #31
     bea:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     bee:	1209      	asrs	r1, r1, #8
     bf0:	2904      	cmp	r1, #4
     bf2:	dd03      	ble.n	bfc <CONFIG_BT_RX_STACK_SIZE+0x364>
     bf4:	4604      	mov	r4, r0
     bf6:	f001 ff7b 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bfa:	e00c      	b.n	c16 <CONFIG_BT_RX_STACK_SIZE+0x37e>
     bfc:	2900      	cmp	r1, #0
     bfe:	dd0a      	ble.n	c16 <CONFIG_BT_RX_STACK_SIZE+0x37e>
     c00:	b01b      	add	sp, #108	; 0x6c
     c02:	2000      	movs	r0, #0
     c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c08:	1e70      	subs	r0, r6, #1
     c0a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c0e:	4620      	mov	r0, r4
     c10:	f001 ff6e 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c14:	4657      	mov	r7, sl
     c16:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c1a:	d024      	beq.n	c66 <CONFIG_BT_RX_STACK_SIZE+0x3ce>
     c1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     c20:	1b00      	subs	r0, r0, r4
     c22:	1b1b      	subs	r3, r3, r4
     c24:	4a70      	ldr	r2, [pc, #448]	; (de8 <CONFIG_BT_RX_STACK_SIZE+0x550>)
     c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c2e:	4583      	cmp	fp, r0
     c30:	bf98      	it	ls
     c32:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c36:	d2e3      	bcs.n	c00 <CONFIG_BT_RX_STACK_SIZE+0x368>
     c38:	429a      	cmp	r2, r3
     c3a:	d3e1      	bcc.n	c00 <CONFIG_BT_RX_STACK_SIZE+0x368>
     c3c:	4620      	mov	r0, r4
     c3e:	f00b fde2 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c42:	4965      	ldr	r1, [pc, #404]	; (dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>)
     c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c46:	1c4b      	adds	r3, r1, #1
     c48:	1a16      	subs	r6, r2, r0
     c4a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c4e:	bf24      	itt	cs
     c50:	eba0 0c02 	subcs.w	ip, r0, r2
     c54:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c58:	d310      	bcc.n	c7c <CONFIG_BT_RX_STACK_SIZE+0x3e4>
     c5a:	42b1      	cmp	r1, r6
     c5c:	d208      	bcs.n	c70 <CONFIG_BT_RX_STACK_SIZE+0x3d8>
     c5e:	1a08      	subs	r0, r1, r0
     c60:	4410      	add	r0, r2
     c62:	1c46      	adds	r6, r0, #1
     c64:	e00a      	b.n	c7c <CONFIG_BT_RX_STACK_SIZE+0x3e4>
     c66:	f640 212d 	movw	r1, #2605	; 0xa2d
     c6a:	2070      	movs	r0, #112	; 0x70
     c6c:	f002 fe3a 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c70:	4561      	cmp	r1, ip
     c72:	d22c      	bcs.n	cce <CONFIG_BT_RX_STACK_SIZE+0x436>
     c74:	1a89      	subs	r1, r1, r2
     c76:	4408      	add	r0, r1
     c78:	1c40      	adds	r0, r0, #1
     c7a:	4246      	negs	r6, r0
     c7c:	4854      	ldr	r0, [pc, #336]	; (dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>)
     c7e:	7f80      	ldrb	r0, [r0, #30]
     c80:	b350      	cbz	r0, cd8 <CONFIG_BT_RX_STACK_SIZE+0x440>
     c82:	4628      	mov	r0, r5
     c84:	4645      	mov	r5, r8
     c86:	f04f 0b00 	mov.w	fp, #0
     c8a:	46d8      	mov	r8, fp
     c8c:	2801      	cmp	r0, #1
     c8e:	d005      	beq.n	c9c <CONFIG_BT_RX_STACK_SIZE+0x404>
     c90:	2002      	movs	r0, #2
     c92:	f002 f985 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c96:	2001      	movs	r0, #1
     c98:	f002 f982 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c9c:	45a9      	cmp	r9, r5
     c9e:	d227      	bcs.n	cf0 <CONFIG_BT_RX_STACK_SIZE+0x458>
     ca0:	eba6 0105 	sub.w	r1, r6, r5
     ca4:	f04f 0301 	mov.w	r3, #1
     ca8:	f04f 0203 	mov.w	r2, #3
     cac:	f04f 0002 	mov.w	r0, #2
     cb0:	f002 f8a2 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb4:	2800      	cmp	r0, #0
     cb6:	bf08      	it	eq
     cb8:	f04f 0801 	moveq.w	r8, #1
     cbc:	f1b9 0f00 	cmp.w	r9, #0
     cc0:	d030      	beq.n	d24 <CONFIG_BT_RX_STACK_SIZE+0x48c>
     cc2:	2301      	movs	r3, #1
     cc4:	eba6 0109 	sub.w	r1, r6, r9
     cc8:	2203      	movs	r2, #3
     cca:	4618      	mov	r0, r3
     ccc:	e01e      	b.n	d0c <CONFIG_BT_RX_STACK_SIZE+0x474>
     cce:	f640 310c 	movw	r1, #2828	; 0xb0c
     cd2:	2070      	movs	r0, #112	; 0x70
     cd4:	f002 fe06 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cd8:	45c1      	cmp	r9, r8
     cda:	bf34      	ite	cc
     cdc:	4640      	movcc	r0, r8
     cde:	4648      	movcs	r0, r9
     ce0:	4458      	add	r0, fp
     ce2:	42b0      	cmp	r0, r6
     ce4:	dbcd      	blt.n	c82 <CONFIG_BT_RX_STACK_SIZE+0x3ea>
     ce6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     cea:	2070      	movs	r0, #112	; 0x70
     cec:	f002 fdfa 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cf0:	d910      	bls.n	d14 <CONFIG_BT_RX_STACK_SIZE+0x47c>
     cf2:	2301      	movs	r3, #1
     cf4:	eba6 0109 	sub.w	r1, r6, r9
     cf8:	2203      	movs	r2, #3
     cfa:	4618      	mov	r0, r3
     cfc:	f002 f87c 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d00:	b328      	cbz	r0, d4e <CONFIG_BT_RX_STACK_SIZE+0x4b6>
     d02:	b17d      	cbz	r5, d24 <CONFIG_BT_RX_STACK_SIZE+0x48c>
     d04:	1b71      	subs	r1, r6, r5
     d06:	2301      	movs	r3, #1
     d08:	2203      	movs	r2, #3
     d0a:	2002      	movs	r0, #2
     d0c:	f002 f874 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d10:	b1e8      	cbz	r0, d4e <CONFIG_BT_RX_STACK_SIZE+0x4b6>
     d12:	e007      	b.n	d24 <CONFIG_BT_RX_STACK_SIZE+0x48c>
     d14:	ea55 0009 	orrs.w	r0, r5, r9
     d18:	d004      	beq.n	d24 <CONFIG_BT_RX_STACK_SIZE+0x48c>
     d1a:	f640 1177 	movw	r1, #2423	; 0x977
     d1e:	2070      	movs	r0, #112	; 0x70
     d20:	f002 fde0 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d24:	2301      	movs	r3, #1
     d26:	2203      	movs	r2, #3
     d28:	4631      	mov	r1, r6
     d2a:	2000      	movs	r0, #0
     d2c:	f002 f864 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d30:	b168      	cbz	r0, d4e <CONFIG_BT_RX_STACK_SIZE+0x4b6>
     d32:	2501      	movs	r5, #1
     d34:	f1b8 0f00 	cmp.w	r8, #0
     d38:	d003      	beq.n	d42 <CONFIG_BT_RX_STACK_SIZE+0x4aa>
     d3a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d3c:	900f      	str	r0, [sp, #60]	; 0x3c
     d3e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d42:	f8df 80a8 	ldr.w	r8, [pc, #168]	; dec <CONFIG_BT_RX_STACK_SIZE+0x554>
     d46:	f1ba 0f00 	cmp.w	sl, #0
     d4a:	d10e      	bne.n	d6a <CONFIG_BT_RX_STACK_SIZE+0x4d2>
     d4c:	e009      	b.n	d62 <CONFIG_BT_RX_STACK_SIZE+0x4ca>
     d4e:	2002      	movs	r0, #2
     d50:	f002 f926 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d54:	2001      	movs	r0, #1
     d56:	f002 f923 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d5a:	b01b      	add	sp, #108	; 0x6c
     d5c:	2000      	movs	r0, #0
     d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d62:	481b      	ldr	r0, [pc, #108]	; (dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>)
     d64:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d68:	b100      	cbz	r0, d6c <CONFIG_BT_RX_STACK_SIZE+0x4d4>
     d6a:	b34f      	cbz	r7, dc0 <CONFIG_BT_RX_STACK_SIZE+0x528>
     d6c:	f8df a060 	ldr.w	sl, [pc, #96]	; dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>
     d70:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d74:	b118      	cbz	r0, d7e <CONFIG_BT_RX_STACK_SIZE+0x4e6>
     d76:	f002 fc05 	bl	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d7a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d7e:	b307      	cbz	r7, dc2 <CONFIG_BT_RX_STACK_SIZE+0x52a>
     d80:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d84:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d8c:	f8c8 0000 	str.w	r0, [r8]
     d90:	2300      	movs	r3, #0
     d92:	2203      	movs	r2, #3
     d94:	2005      	movs	r0, #5
     d96:	f002 f82f 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d9a:	b368      	cbz	r0, df8 <CONFIG_BT_RX_STACK_SIZE+0x560>
     d9c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     da0:	2005      	movs	r0, #5
     da2:	f002 f9e3 	bl	316c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     da6:	4912      	ldr	r1, [pc, #72]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     da8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dac:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     db0:	4910      	ldr	r1, [pc, #64]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     db2:	12e0      	asrs	r0, r4, #11
     db4:	6008      	str	r0, [r1, #0]
     db6:	4c06      	ldr	r4, [pc, #24]	; (dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>)
     db8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     dbc:	b3e8      	cbz	r0, e3a <CONFIG_BT_RX_STACK_SIZE+0x5a2>
     dbe:	e030      	b.n	e22 <CONFIG_BT_RX_STACK_SIZE+0x58a>
     dc0:	e01b      	b.n	dfa <CONFIG_BT_RX_STACK_SIZE+0x562>
     dc2:	e01f      	b.n	e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>
     dc4:	40000508 	.word	0x40000508
     dc8:	20000014 	.word	0x20000014
     dcc:	200009ec 	.word	0x200009ec
     dd0:	20000d6c 	.word	0x20000d6c
     dd4:	20000016 	.word	0x20000016
     dd8:	1e847fff 	.word	0x1e847fff
     ddc:	07a12000 	.word	0x07a12000
     de0:	f85ee000 	.word	0xf85ee000
     de4:	1e848000 	.word	0x1e848000
     de8:	003fffff 	.word	0x003fffff
     dec:	4001f508 	.word	0x4001f508
     df0:	4001f098 	.word	0x4001f098
     df4:	4001f504 	.word	0x4001f504
     df8:	e025      	b.n	e46 <CONFIG_BT_RX_STACK_SIZE+0x5ae>
     dfa:	f8df a0b8 	ldr.w	sl, [pc, #184]	; eb4 <CONFIG_BT_RX_STACK_SIZE+0x61c>
     dfe:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e02:	b1c8      	cbz	r0, e38 <CONFIG_BT_RX_STACK_SIZE+0x5a0>
     e04:	4c2b      	ldr	r4, [pc, #172]	; (eb4 <CONFIG_BT_RX_STACK_SIZE+0x61c>)
     e06:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e0a:	b150      	cbz	r0, e22 <CONFIG_BT_RX_STACK_SIZE+0x58a>
     e0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e10:	f8c8 0000 	str.w	r0, [r8]
     e14:	2005      	movs	r0, #5
     e16:	f002 f8c3 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e1a:	f002 fc1b 	bl	3654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e1e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e22:	eba6 0009 	sub.w	r0, r6, r9
     e26:	f1a0 0119 	sub.w	r1, r0, #25
     e2a:	2900      	cmp	r1, #0
     e2c:	dc15      	bgt.n	e5a <CONFIG_BT_RX_STACK_SIZE+0x5c2>
     e2e:	f640 2171 	movw	r1, #2673	; 0xa71
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fd56 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	e000      	b.n	e3c <CONFIG_BT_RX_STACK_SIZE+0x5a4>
     e3a:	e009      	b.n	e50 <CONFIG_BT_RX_STACK_SIZE+0x5b8>
     e3c:	f002 fbbe 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e40:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e44:	e79b      	b.n	d7e <CONFIG_BT_RX_STACK_SIZE+0x4e6>
     e46:	f240 313e 	movw	r1, #830	; 0x33e
     e4a:	2070      	movs	r0, #112	; 0x70
     e4c:	f002 fd4a 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e50:	f002 fbf2 	bl	3638 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e54:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e58:	e7e3      	b.n	e22 <CONFIG_BT_RX_STACK_SIZE+0x58a>
     e5a:	2203      	movs	r2, #3
     e5c:	2301      	movs	r3, #1
     e5e:	4610      	mov	r0, r2
     e60:	f001 ffca 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e64:	b308      	cbz	r0, eaa <CONFIG_BT_RX_STACK_SIZE+0x612>
     e66:	4814      	ldr	r0, [pc, #80]	; (eb8 <CONFIG_BT_RX_STACK_SIZE+0x620>)
     e68:	6880      	ldr	r0, [r0, #8]
     e6a:	f8c0 b000 	str.w	fp, [r0]
     e6e:	4813      	ldr	r0, [pc, #76]	; (ebc <CONFIG_BT_RX_STACK_SIZE+0x624>)
     e70:	f8c0 b000 	str.w	fp, [r0]
     e74:	ac0c      	add	r4, sp, #48	; 0x30
     e76:	4812      	ldr	r0, [pc, #72]	; (ec0 <CONFIG_BT_RX_STACK_SIZE+0x628>)
     e78:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e7c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     e80:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     e84:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     e88:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     e8c:	ac10      	add	r4, sp, #64	; 0x40
     e8e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e92:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     e96:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     e9a:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     e9e:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     ea2:	b01b      	add	sp, #108	; 0x6c
     ea4:	2001      	movs	r0, #1
     ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eaa:	f640 2179 	movw	r1, #2681	; 0xa79
     eae:	2070      	movs	r0, #112	; 0x70
     eb0:	f002 fd18 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eb4:	20000d6c 	.word	0x20000d6c
     eb8:	20000014 	.word	0x20000014
     ebc:	40000508 	.word	0x40000508
     ec0:	200009ec 	.word	0x200009ec
     ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ec8:	4606      	mov	r6, r0
     eca:	b083      	sub	sp, #12
     ecc:	7808      	ldrb	r0, [r1, #0]
     ece:	7390      	strb	r0, [r2, #14]
     ed0:	7acf      	ldrb	r7, [r1, #11]
     ed2:	7357      	strb	r7, [r2, #13]
     ed4:	7a88      	ldrb	r0, [r1, #10]
     ed6:	7310      	strb	r0, [r2, #12]
     ed8:	8908      	ldrh	r0, [r1, #8]
     eda:	4614      	mov	r4, r2
     edc:	8150      	strh	r0, [r2, #10]
     ede:	460d      	mov	r5, r1
     ee0:	780a      	ldrb	r2, [r1, #0]
     ee2:	495f      	ldr	r1, [pc, #380]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
     ee4:	4699      	mov	r9, r3
     ee6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     eea:	424b      	negs	r3, r1
     eec:	f1ac 0801 	sub.w	r8, ip, #1
     ef0:	b15a      	cbz	r2, f0a <CONFIG_BT_RX_STACK_SIZE+0x672>
     ef2:	43c0      	mvns	r0, r0
     ef4:	f8d5 8004 	ldr.w	r8, [r5, #4]
     ef8:	f104 0208 	add.w	r2, r4, #8
     efc:	4288      	cmp	r0, r1
     efe:	dd3d      	ble.n	f7c <CONFIG_BT_RX_STACK_SIZE+0x6e4>
     f00:	f240 610a 	movw	r1, #1546	; 0x60a
     f04:	2070      	movs	r0, #112	; 0x70
     f06:	f002 fced 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f0a:	68ee      	ldr	r6, [r5, #12]
     f0c:	686d      	ldr	r5, [r5, #4]
     f0e:	ea6f 0900 	mvn.w	r9, r0
     f12:	f104 0208 	add.w	r2, r4, #8
     f16:	eb06 0009 	add.w	r0, r6, r9
     f1a:	4546      	cmp	r6, r8
     f1c:	d904      	bls.n	f28 <CONFIG_BT_RX_STACK_SIZE+0x690>
     f1e:	f240 6109 	movw	r1, #1545	; 0x609
     f22:	2070      	movs	r0, #112	; 0x70
     f24:	f002 fcde 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f28:	4589      	cmp	r9, r1
     f2a:	dce9      	bgt.n	f00 <CONFIG_BT_RX_STACK_SIZE+0x668>
     f2c:	4599      	cmp	r9, r3
     f2e:	db28      	blt.n	f82 <CONFIG_BT_RX_STACK_SIZE+0x6ea>
     f30:	4584      	cmp	ip, r0
     f32:	bfdc      	itt	le
     f34:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f38:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f3c:	dd05      	ble.n	f4a <CONFIG_BT_RX_STACK_SIZE+0x6b2>
     f3e:	2800      	cmp	r0, #0
     f40:	bfbc      	itt	lt
     f42:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f46:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f4a:	4621      	mov	r1, r4
     f4c:	f001 fc6c 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f50:	6820      	ldr	r0, [r4, #0]
     f52:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f56:	1970      	adds	r0, r6, r5
     f58:	1c40      	adds	r0, r0, #1
     f5a:	6021      	str	r1, [r4, #0]
     f5c:	2f00      	cmp	r7, #0
     f5e:	bf08      	it	eq
     f60:	307a      	addeq	r0, #122	; 0x7a
     f62:	d003      	beq.n	f6c <CONFIG_BT_RX_STACK_SIZE+0x6d4>
     f64:	2f01      	cmp	r7, #1
     f66:	bf08      	it	eq
     f68:	3048      	addeq	r0, #72	; 0x48
     f6a:	d12d      	bne.n	fc8 <CONFIG_BT_RX_STACK_SIZE+0x730>
     f6c:	f001 fc40 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f74:	6060      	str	r0, [r4, #4]
     f76:	b003      	add	sp, #12
     f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f7c:	4601      	mov	r1, r0
     f7e:	4298      	cmp	r0, r3
     f80:	da04      	bge.n	f8c <CONFIG_BT_RX_STACK_SIZE+0x6f4>
     f82:	f240 610b 	movw	r1, #1547	; 0x60b
     f86:	2070      	movs	r0, #112	; 0x70
     f88:	f002 fcac 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f8c:	4584      	cmp	ip, r0
     f8e:	bfdc      	itt	le
     f90:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     f94:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     f98:	dd05      	ble.n	fa6 <CONFIG_BT_RX_STACK_SIZE+0x70e>
     f9a:	2800      	cmp	r0, #0
     f9c:	bfbc      	itt	lt
     f9e:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fa2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fa6:	4621      	mov	r1, r4
     fa8:	f001 fc3e 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fac:	6820      	ldr	r0, [r4, #0]
     fae:	2f00      	cmp	r7, #0
     fb0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fb4:	f108 0001 	add.w	r0, r8, #1
     fb8:	6021      	str	r1, [r4, #0]
     fba:	bf08      	it	eq
     fbc:	307a      	addeq	r0, #122	; 0x7a
     fbe:	d008      	beq.n	fd2 <CONFIG_BT_RX_STACK_SIZE+0x73a>
     fc0:	2f01      	cmp	r7, #1
     fc2:	bf08      	it	eq
     fc4:	3048      	addeq	r0, #72	; 0x48
     fc6:	d004      	beq.n	fd2 <CONFIG_BT_RX_STACK_SIZE+0x73a>
     fc8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     fcc:	2070      	movs	r0, #112	; 0x70
     fce:	f002 fc89 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd2:	f001 fc0d 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fd6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fda:	6061      	str	r1, [r4, #4]
     fdc:	8960      	ldrh	r0, [r4, #10]
     fde:	aa01      	add	r2, sp, #4
     fe0:	4669      	mov	r1, sp
     fe2:	f001 fc21 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fe6:	481f      	ldr	r0, [pc, #124]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
     fe8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     fec:	2920      	cmp	r1, #32
     fee:	d023      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
     ff0:	6900      	ldr	r0, [r0, #16]
     ff2:	1d40      	adds	r0, r0, #5
     ff4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ff8:	e9d4 2100 	ldrd	r2, r1, [r4]
     ffc:	1a89      	subs	r1, r1, r2
     ffe:	6020      	str	r0, [r4, #0]
    1000:	4408      	add	r0, r1
    1002:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1006:	6060      	str	r0, [r4, #4]
    1008:	464b      	mov	r3, r9
    100a:	4632      	mov	r2, r6
    100c:	4621      	mov	r1, r4
    100e:	68e8      	ldr	r0, [r5, #12]
    1010:	f7ff fad2 	bl	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1014:	2800      	cmp	r0, #0
    1016:	bf1c      	itt	ne
    1018:	b003      	addne	sp, #12
    101a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    101e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1022:	1a40      	subs	r0, r0, r1
    1024:	4430      	add	r0, r6
    1026:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    102a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    102e:	e9c4 1000 	strd	r1, r0, [r4]
    1032:	b003      	add	sp, #12
    1034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1038:	8960      	ldrh	r0, [r4, #10]
    103a:	f106 0709 	add.w	r7, r6, #9
    103e:	b120      	cbz	r0, 104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    1040:	f002 fbd8 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1044:	2800      	cmp	r0, #0
    1046:	bf08      	it	eq
    1048:	3732      	addeq	r7, #50	; 0x32
    104a:	4807      	ldr	r0, [pc, #28]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    104c:	7841      	ldrb	r1, [r0, #1]
    104e:	9800      	ldr	r0, [sp, #0]
    1050:	4281      	cmp	r1, r0
    1052:	bf84      	itt	hi
    1054:	1a08      	subhi	r0, r1, r0
    1056:	4407      	addhi	r7, r0
    1058:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    105c:	e7cc      	b.n	ff8 <CONFIG_BT_RX_STACK_SIZE+0x760>
    105e:	0000      	.short	0x0000
    1060:	07a12000 	.word	0x07a12000
    1064:	20000d6c 	.word	0x20000d6c
    1068:	20000016 	.word	0x20000016
    106c:	b510      	push	{r4, lr}
    106e:	4c15      	ldr	r4, [pc, #84]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
    1070:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1074:	2820      	cmp	r0, #32
    1076:	bf18      	it	ne
    1078:	bd10      	popne	{r4, pc}
    107a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    107e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1082:	f890 1020 	ldrb.w	r1, [r0, #32]
    1086:	2920      	cmp	r1, #32
    1088:	d017      	beq.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    108a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>
    108e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1092:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1096:	785b      	ldrb	r3, [r3, #1]
    1098:	f880 3020 	strb.w	r3, [r0, #32]
    109c:	2301      	movs	r3, #1
    109e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10a2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10a6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10aa:	2002      	movs	r0, #2
    10ac:	f000 f8b0 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    10b0:	2000      	movs	r0, #0
    10b2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10b6:	77a0      	strb	r0, [r4, #30]
    10b8:	bd10      	pop	{r4, pc}
    10ba:	f240 318b 	movw	r1, #907	; 0x38b
    10be:	2070      	movs	r0, #112	; 0x70
    10c0:	f002 fc10 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10c4:	20000d6c 	.word	0x20000d6c
    10c8:	20000cec 	.word	0x20000cec
    10cc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    10d4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    10d8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    10dc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    10e0:	2c20      	cmp	r4, #32
    10e2:	bf08      	it	eq
    10e4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10e8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
    10ec:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
    10f0:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    10f4:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    10f8:	2607      	movs	r6, #7
    10fa:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    10fe:	2801      	cmp	r0, #1
    1100:	d00e      	beq.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1102:	2804      	cmp	r0, #4
    1104:	bf08      	it	eq
    1106:	2602      	moveq	r6, #2
    1108:	d00a      	beq.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    110a:	2805      	cmp	r0, #5
    110c:	bf0c      	ite	eq
    110e:	2603      	moveq	r6, #3
    1110:	2806      	cmpne	r0, #6
    1112:	d005      	beq.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1114:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1118:	f04f 0070 	mov.w	r0, #112	; 0x70
    111c:	f002 fbe2 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1120:	f1bb 0f00 	cmp.w	fp, #0
    1124:	bf18      	it	ne
    1126:	f3af 8000 	nopne.w
    112a:	f3ef 8010 	mrs	r0, PRIMASK
    112e:	b672      	cpsid	i
    1130:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1134:	784a      	ldrb	r2, [r1, #1]
    1136:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    113a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    113e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1142:	42a2      	cmp	r2, r4
    1144:	bf04      	itt	eq
    1146:	2220      	moveq	r2, #32
    1148:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    114c:	b1b8      	cbz	r0, 117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    114e:	462a      	mov	r2, r5
    1150:	4621      	mov	r1, r4
    1152:	2001      	movs	r0, #1
    1154:	f000 f85c 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1158:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    115c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1160:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1164:	6840      	ldr	r0, [r0, #4]
    1166:	4631      	mov	r1, r6
    1168:	4790      	blx	r2
    116a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    116e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1172:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1176:	2c20      	cmp	r4, #32
    1178:	d1bc      	bne.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    117a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    117e:	4806      	ldr	r0, [pc, #24]	; (1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>)
    1180:	2800      	cmp	r0, #0
    1182:	bf18      	it	ne
    1184:	f3af 8000 	nopne.w
    1188:	b662      	cpsie	i
    118a:	e7e0      	b.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
    118c:	20000d6c 	.word	0x20000d6c
    1190:	00000000 	.word	0x00000000
    1194:	20000cec 	.word	0x20000cec
    1198:	00000000 	.word	0x00000000
    119c:	b510      	push	{r4, lr}
    119e:	4604      	mov	r4, r0
    11a0:	6800      	ldr	r0, [r0, #0]
    11a2:	f00b fb30 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11a6:	4602      	mov	r2, r0
    11a8:	8960      	ldrh	r0, [r4, #10]
    11aa:	7a21      	ldrb	r1, [r4, #8]
    11ac:	4b14      	ldr	r3, [pc, #80]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    11ae:	4408      	add	r0, r1
    11b0:	1c41      	adds	r1, r0, #1
    11b2:	1850      	adds	r0, r2, r1
    11b4:	429a      	cmp	r2, r3
    11b6:	d904      	bls.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
    11b8:	f240 6109 	movw	r1, #1545	; 0x609
    11bc:	2070      	movs	r0, #112	; 0x70
    11be:	f002 fb91 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11c2:	4a10      	ldr	r2, [pc, #64]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    11c4:	4291      	cmp	r1, r2
    11c6:	dd04      	ble.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11c8:	f240 610a 	movw	r1, #1546	; 0x60a
    11cc:	2070      	movs	r0, #112	; 0x70
    11ce:	f002 fb89 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11d2:	4a0d      	ldr	r2, [pc, #52]	; (1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    11d4:	4291      	cmp	r1, r2
    11d6:	da04      	bge.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d8:	f240 610b 	movw	r1, #1547	; 0x60b
    11dc:	2070      	movs	r0, #112	; 0x70
    11de:	f002 fb81 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e2:	490a      	ldr	r1, [pc, #40]	; (120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>)
    11e4:	4281      	cmp	r1, r0
    11e6:	bfde      	ittt	le
    11e8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    11ec:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    11f0:	bd10      	pople	{r4, pc}
    11f2:	2800      	cmp	r0, #0
    11f4:	bfbc      	itt	lt
    11f6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    11fa:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    11fe:	bd10      	pop	{r4, pc}
    1200:	1e847fff 	.word	0x1e847fff
    1204:	07a12000 	.word	0x07a12000
    1208:	f85ee000 	.word	0xf85ee000
    120c:	1e848000 	.word	0x1e848000
    1210:	f8df c054 	ldr.w	ip, [pc, #84]	; 1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
    1214:	b510      	push	{r4, lr}
    1216:	2300      	movs	r3, #0
    1218:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    121c:	2807      	cmp	r0, #7
    121e:	d21e      	bcs.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
    1220:	e8df f000 	tbb	[pc, r0]
    1224:	05050505 	.word	0x05050505
    1228:	00040404 	.word	0x00040404
    122c:	2301      	movs	r3, #1
    122e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1232:	2b00      	cmp	r3, #0
    1234:	bf08      	it	eq
    1236:	bd10      	popeq	{r4, pc}
    1238:	480c      	ldr	r0, [pc, #48]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    123a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    123e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1242:	2820      	cmp	r0, #32
    1244:	bf0e      	itee	eq
    1246:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    124a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    124e:	7041      	strbne	r1, [r0, #1]
    1250:	2020      	movs	r0, #32
    1252:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1256:	7058      	strb	r0, [r3, #1]
    1258:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    125c:	bd10      	pop	{r4, pc}
    125e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1262:	2070      	movs	r0, #112	; 0x70
    1264:	f002 fb3e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1268:	20000cec 	.word	0x20000cec
    126c:	20000d6c 	.word	0x20000d6c
    1270:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1274:	b083      	sub	sp, #12
    1276:	485c      	ldr	r0, [pc, #368]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    1278:	9904      	ldr	r1, [sp, #16]
    127a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    127e:	9001      	str	r0, [sp, #4]
    1280:	f890 4020 	ldrb.w	r4, [r0, #32]
    1284:	9803      	ldr	r0, [sp, #12]
    1286:	4625      	mov	r5, r4
    1288:	2801      	cmp	r0, #1
    128a:	bf18      	it	ne
    128c:	2802      	cmpne	r0, #2
    128e:	d005      	beq.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1290:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1294:	f04f 0070 	mov.w	r0, #112	; 0x70
    1298:	f002 fb24 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    129c:	2700      	movs	r7, #0
    129e:	2d20      	cmp	r5, #32
    12a0:	d04a      	beq.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
    12a2:	4851      	ldr	r0, [pc, #324]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    12a4:	9100      	str	r1, [sp, #0]
    12a6:	2600      	movs	r6, #0
    12a8:	7f80      	ldrb	r0, [r0, #30]
    12aa:	2800      	cmp	r0, #0
    12ac:	bf08      	it	eq
    12ae:	2602      	moveq	r6, #2
    12b0:	f001 fc18 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12b4:	f8df a138 	ldr.w	sl, [pc, #312]	; 13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
    12b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12bc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12c0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    12c4:	688a      	ldr	r2, [r1, #8]
    12c6:	68c9      	ldr	r1, [r1, #12]
    12c8:	1a12      	subs	r2, r2, r0
    12ca:	1a09      	subs	r1, r1, r0
    12cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12d4:	4296      	cmp	r6, r2
    12d6:	bf98      	it	ls
    12d8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    12dc:	d201      	bcs.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    12de:	4589      	cmp	r9, r1
    12e0:	d228      	bcs.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    12e2:	4a44      	ldr	r2, [pc, #272]	; (13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>)
    12e4:	9900      	ldr	r1, [sp, #0]
    12e6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    12ea:	4622      	mov	r2, r4
    12ec:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    12f0:	784c      	ldrb	r4, [r1, #1]
    12f2:	2c20      	cmp	r4, #32
    12f4:	d016      	beq.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
    12f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12fa:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    12fe:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1302:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1306:	eba8 0800 	sub.w	r8, r8, r0
    130a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    130e:	ebac 0100 	sub.w	r1, ip, r0
    1312:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1316:	4546      	cmp	r6, r8
    1318:	bf98      	it	ls
    131a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    131e:	d2e4      	bcs.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
    1320:	4589      	cmp	r9, r1
    1322:	d3e2      	bcc.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
    1324:	2a20      	cmp	r2, #32
    1326:	d005      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    1328:	2120      	movs	r1, #32
    132a:	2004      	movs	r0, #4
    132c:	9b00      	ldr	r3, [sp, #0]
    132e:	f7ff f907 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1332:	4604      	mov	r4, r0
    1334:	42ac      	cmp	r4, r5
    1336:	d115      	bne.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
    1338:	482f      	ldr	r0, [pc, #188]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    133a:	2800      	cmp	r0, #0
    133c:	bf18      	it	ne
    133e:	f3af 8000 	nopne.w
    1342:	f001 fbcf 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1346:	4c28      	ldr	r4, [pc, #160]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    1348:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    134c:	2920      	cmp	r1, #32
    134e:	d00d      	beq.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
    1350:	68e1      	ldr	r1, [r4, #12]
    1352:	1c82      	adds	r2, r0, #2
    1354:	1a51      	subs	r1, r2, r1
    1356:	0209      	lsls	r1, r1, #8
    1358:	17ca      	asrs	r2, r1, #31
    135a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    135e:	1209      	asrs	r1, r1, #8
    1360:	2900      	cmp	r1, #0
    1362:	dd03      	ble.n	136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>
    1364:	b005      	add	sp, #20
    1366:	2000      	movs	r0, #0
    1368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    136c:	2d20      	cmp	r5, #32
    136e:	d00d      	beq.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1370:	462a      	mov	r2, r5
    1372:	9903      	ldr	r1, [sp, #12]
    1374:	f7ff fb1c 	bl	9b0 <CONFIG_BT_RX_STACK_SIZE+0x118>
    1378:	b358      	cbz	r0, 13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
    137a:	9801      	ldr	r0, [sp, #4]
    137c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1380:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1384:	b005      	add	sp, #20
    1386:	2001      	movs	r0, #1
    1388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    138c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1390:	b118      	cbz	r0, 139a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12>
    1392:	f002 f8f7 	bl	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1396:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    139a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    139e:	b150      	cbz	r0, 13b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e>
    13a0:	4916      	ldr	r1, [pc, #88]	; (13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>)
    13a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13a6:	6008      	str	r0, [r1, #0]
    13a8:	2005      	movs	r0, #5
    13aa:	f001 fdf9 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ae:	f002 f951 	bl	3654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13b2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13b6:	2004      	movs	r0, #4
    13b8:	f001 fdf2 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13bc:	f001 fe5e 	bl	307c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13c0:	2020      	movs	r0, #32
    13c2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13c6:	480e      	ldr	r0, [pc, #56]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    13c8:	6880      	ldr	r0, [r0, #8]
    13ca:	6007      	str	r7, [r0, #0]
    13cc:	480d      	ldr	r0, [pc, #52]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    13ce:	6007      	str	r7, [r0, #0]
    13d0:	e7d8      	b.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    13d2:	462a      	mov	r2, r5
    13d4:	2120      	movs	r1, #32
    13d6:	2004      	movs	r0, #4
    13d8:	9b04      	ldr	r3, [sp, #16]
    13da:	f7ff f8b1 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    13de:	b005      	add	sp, #20
    13e0:	2000      	movs	r0, #0
    13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e6:	0000      	.short	0x0000
    13e8:	20000d6c 	.word	0x20000d6c
    13ec:	003fffff 	.word	0x003fffff
    13f0:	200009ec 	.word	0x200009ec
    13f4:	20000cec 	.word	0x20000cec
    13f8:	00000000 	.word	0x00000000
    13fc:	4001f508 	.word	0x4001f508
    1400:	20000014 	.word	0x20000014
    1404:	40000508 	.word	0x40000508

00001408 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1408:	4906      	ldr	r1, [pc, #24]	; (1424 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    140a:	b510      	push	{r4, lr}
    140c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1410:	2a20      	cmp	r2, #32
    1412:	bf1c      	itt	ne
    1414:	7788      	strbne	r0, [r1, #30]
    1416:	bd10      	popne	{r4, pc}
    1418:	f240 31ea 	movw	r1, #1002	; 0x3ea
    141c:	2070      	movs	r0, #112	; 0x70
    141e:	f002 fa61 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1422:	0000      	.short	0x0000
    1424:	20000d6c 	.word	0x20000d6c

00001428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    142c:	4e5b      	ldr	r6, [pc, #364]	; (159c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    142e:	4681      	mov	r9, r0
    1430:	b085      	sub	sp, #20
    1432:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1436:	468a      	mov	sl, r1
    1438:	2820      	cmp	r0, #32
    143a:	d04d      	beq.n	14d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    143c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1440:	f106 040c 	add.w	r4, r6, #12
    1444:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1448:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    144c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1450:	2020      	movs	r0, #32
    1452:	f88d 0000 	strb.w	r0, [sp]
    1456:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    145a:	aa03      	add	r2, sp, #12
    145c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1460:	a901      	add	r1, sp, #4
    1462:	f890 5020 	ldrb.w	r5, [r0, #32]
    1466:	6930      	ldr	r0, [r6, #16]
    1468:	9002      	str	r0, [sp, #8]
    146a:	6830      	ldr	r0, [r6, #0]
    146c:	4448      	add	r0, r9
    146e:	f001 f9db 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1472:	68f8      	ldr	r0, [r7, #12]
    1474:	9901      	ldr	r1, [sp, #4]
    1476:	4a4a      	ldr	r2, [pc, #296]	; (15a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1478:	4408      	add	r0, r1
    147a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    147e:	4291      	cmp	r1, r2
    1480:	d82f      	bhi.n	14e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1482:	68b9      	ldr	r1, [r7, #8]
    1484:	1a41      	subs	r1, r0, r1
    1486:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    148a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    148e:	d228      	bcs.n	14e2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1490:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1494:	6060      	str	r0, [r4, #4]
    1496:	4630      	mov	r0, r6
    1498:	f884 a00c 	strb.w	sl, [r4, #12]
    149c:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14a0:	46ea      	mov	sl, sp
    14a2:	2d20      	cmp	r5, #32
    14a4:	bf1c      	itt	ne
    14a6:	493f      	ldrne	r1, [pc, #252]	; (15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14a8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14ac:	d03c      	beq.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14ae:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14b2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14b6:	6860      	ldr	r0, [r4, #4]
    14b8:	68ba      	ldr	r2, [r7, #8]
    14ba:	4621      	mov	r1, r4
    14bc:	1a10      	subs	r0, r2, r0
    14be:	0200      	lsls	r0, r0, #8
    14c0:	17c2      	asrs	r2, r0, #31
    14c2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14c6:	f107 0608 	add.w	r6, r7, #8
    14ca:	1200      	asrs	r0, r0, #8
    14cc:	d41b      	bmi.n	1506 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14ce:	8970      	ldrh	r0, [r6, #10]
    14d0:	b350      	cbz	r0, 1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14d2:	8948      	ldrh	r0, [r1, #10]
    14d4:	b148      	cbz	r0, 14ea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    14d6:	e027      	b.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14d8:	f640 317b 	movw	r1, #2939	; 0xb7b
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	f002 fa01 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	b005      	add	sp, #20
    14e4:	2001      	movs	r0, #1
    14e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ea:	4620      	mov	r0, r4
    14ec:	f7ff fe56 	bl	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    14f0:	f001 f97e 	bl	27f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14f4:	6831      	ldr	r1, [r6, #0]
    14f6:	1a08      	subs	r0, r1, r0
    14f8:	0200      	lsls	r0, r0, #8
    14fa:	17c1      	asrs	r1, r0, #31
    14fc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1500:	1200      	asrs	r0, r0, #8
    1502:	2833      	cmp	r0, #51	; 0x33
    1504:	da10      	bge.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1506:	f88a 5000 	strb.w	r5, [sl]
    150a:	7d39      	ldrb	r1, [r7, #20]
    150c:	7b20      	ldrb	r0, [r4, #12]
    150e:	4281      	cmp	r1, r0
    1510:	d805      	bhi.n	151e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1512:	9802      	ldr	r0, [sp, #8]
    1514:	6060      	str	r0, [r4, #4]
    1516:	b005      	add	sp, #20
    1518:	2002      	movs	r0, #2
    151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    151e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1522:	7845      	ldrb	r5, [r0, #1]
    1524:	2d20      	cmp	r5, #32
    1526:	d1c2      	bne.n	14ae <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1528:	2005      	movs	r0, #5
    152a:	f001 fd39 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    152e:	4c1b      	ldr	r4, [pc, #108]	; (159c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1530:	f04f 30ff 	mov.w	r0, #4294967295
    1534:	60a0      	str	r0, [r4, #8]
    1536:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    153a:	f89d 2000 	ldrb.w	r2, [sp]
    153e:	2120      	movs	r1, #32
    1540:	2a20      	cmp	r2, #32
    1542:	bf13      	iteet	ne
    1544:	2005      	movne	r0, #5
    1546:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    154a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    154e:	f7fe fff7 	blne	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1552:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1556:	4913      	ldr	r1, [pc, #76]	; (15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1558:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    155c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1560:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1564:	7048      	strb	r0, [r1, #1]
    1566:	6820      	ldr	r0, [r4, #0]
    1568:	4448      	add	r0, r9
    156a:	6020      	str	r0, [r4, #0]
    156c:	2001      	movs	r0, #1
    156e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1572:	7e60      	ldrb	r0, [r4, #25]
    1574:	2801      	cmp	r0, #1
    1576:	d105      	bne.n	1584 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1578:	6920      	ldr	r0, [r4, #16]
    157a:	1e40      	subs	r0, r0, #1
    157c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1580:	f001 fb54 	bl	2c2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1584:	f89d 0000 	ldrb.w	r0, [sp]
    1588:	2820      	cmp	r0, #32
    158a:	d003      	beq.n	1594 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    158c:	4806      	ldr	r0, [pc, #24]	; (15a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    158e:	7840      	ldrb	r0, [r0, #1]
    1590:	f002 fa78 	bl	3a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1594:	b005      	add	sp, #20
    1596:	2000      	movs	r0, #0
    1598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    159c:	20000d6c 	.word	0x20000d6c
    15a0:	07a11f9b 	.word	0x07a11f9b
    15a4:	20000cec 	.word	0x20000cec
    15a8:	20000014 	.word	0x20000014

000015ac <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    15ac:	b570      	push	{r4, r5, r6, lr}
    15ae:	4a23      	ldr	r2, [pc, #140]	; (163c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    15b0:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    15b4:	2920      	cmp	r1, #32
    15b6:	d039      	beq.n	162c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    15b8:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    15bc:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    15c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15c4:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    15c8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    15cc:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    15d0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    15d4:	f891 1020 	ldrb.w	r1, [r1, #32]
    15d8:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    15dc:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    15e0:	2920      	cmp	r1, #32
    15e2:	d028      	beq.n	1636 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    15e4:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    15e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    15ec:	7d2d      	ldrb	r5, [r5, #20]
    15ee:	4285      	cmp	r5, r0
    15f0:	bf84      	itt	hi
    15f2:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    15f6:	7849      	ldrbhi	r1, [r1, #1]
    15f8:	d8f2      	bhi.n	15e0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    15fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15fe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1602:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1606:	6889      	ldr	r1, [r1, #8]
    1608:	6814      	ldr	r4, [r2, #0]
    160a:	1a08      	subs	r0, r1, r0
    160c:	0200      	lsls	r0, r0, #8
    160e:	17c1      	asrs	r1, r0, #31
    1610:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1614:	1200      	asrs	r0, r0, #8
    1616:	d407      	bmi.n	1628 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1618:	f00b f8f5 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    161c:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1620:	4288      	cmp	r0, r1
    1622:	bf24      	itt	cs
    1624:	1b00      	subcs	r0, r0, r4
    1626:	bd70      	popcs	{r4, r5, r6, pc}
    1628:	2000      	movs	r0, #0
    162a:	bd70      	pop	{r4, r5, r6, pc}
    162c:	f640 314d 	movw	r1, #2893	; 0xb4d
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f002 f957 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	f04f 30ff 	mov.w	r0, #4294967295
    163a:	bd70      	pop	{r4, r5, r6, pc}
    163c:	20000d6c 	.word	0x20000d6c

00001640 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1640:	4806      	ldr	r0, [pc, #24]	; (165c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1642:	b510      	push	{r4, lr}
    1644:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1648:	2920      	cmp	r1, #32
    164a:	bf1c      	itt	ne
    164c:	7e00      	ldrbne	r0, [r0, #24]
    164e:	bd10      	popne	{r4, pc}
    1650:	f640 3174 	movw	r1, #2932	; 0xb74
    1654:	2070      	movs	r0, #112	; 0x70
    1656:	f002 f945 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    165a:	0000      	.short	0x0000
    165c:	20000d6c 	.word	0x20000d6c

00001660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    1660:	4602      	mov	r2, r0
    1662:	4b14      	ldr	r3, [pc, #80]	; (16b4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1664:	b510      	push	{r4, lr}
    1666:	4408      	add	r0, r1
    1668:	429a      	cmp	r2, r3
    166a:	d904      	bls.n	1676 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    166c:	f240 6109 	movw	r1, #1545	; 0x609
    1670:	2070      	movs	r0, #112	; 0x70
    1672:	f002 f937 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1676:	4a10      	ldr	r2, [pc, #64]	; (16b8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1678:	4291      	cmp	r1, r2
    167a:	dd04      	ble.n	1686 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    167c:	f240 610a 	movw	r1, #1546	; 0x60a
    1680:	2070      	movs	r0, #112	; 0x70
    1682:	f002 f92f 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1686:	4a0d      	ldr	r2, [pc, #52]	; (16bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1688:	4291      	cmp	r1, r2
    168a:	da04      	bge.n	1696 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    168c:	f240 610b 	movw	r1, #1547	; 0x60b
    1690:	2070      	movs	r0, #112	; 0x70
    1692:	f002 f927 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1696:	490a      	ldr	r1, [pc, #40]	; (16c0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1698:	4281      	cmp	r1, r0
    169a:	bfde      	ittt	le
    169c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    16a0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    16a4:	bd10      	pople	{r4, pc}
    16a6:	2800      	cmp	r0, #0
    16a8:	bfbc      	itt	lt
    16aa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    16ae:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    16b2:	bd10      	pop	{r4, pc}
    16b4:	1e847fff 	.word	0x1e847fff
    16b8:	07a12000 	.word	0x07a12000
    16bc:	f85ee000 	.word	0xf85ee000
    16c0:	1e848000 	.word	0x1e848000

000016c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    16c4:	4a10      	ldr	r2, [pc, #64]	; (1708 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    16c6:	1a0b      	subs	r3, r1, r0
    16c8:	f102 0c01 	add.w	ip, r2, #1
    16cc:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    16d0:	bf3c      	itt	cc
    16d2:	4618      	movcc	r0, r3
    16d4:	4770      	bxcc	lr
    16d6:	b510      	push	{r4, lr}
    16d8:	1a44      	subs	r4, r0, r1
    16da:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    16de:	bf3c      	itt	cc
    16e0:	4618      	movcc	r0, r3
    16e2:	bd10      	popcc	{r4, pc}
    16e4:	429a      	cmp	r2, r3
    16e6:	d203      	bcs.n	16f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    16e8:	1a10      	subs	r0, r2, r0
    16ea:	4408      	add	r0, r1
    16ec:	1c40      	adds	r0, r0, #1
    16ee:	bd10      	pop	{r4, pc}
    16f0:	42a2      	cmp	r2, r4
    16f2:	d204      	bcs.n	16fe <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    16f4:	1a51      	subs	r1, r2, r1
    16f6:	4408      	add	r0, r1
    16f8:	1c40      	adds	r0, r0, #1
    16fa:	4240      	negs	r0, r0
    16fc:	bd10      	pop	{r4, pc}
    16fe:	f640 310c 	movw	r1, #2828	; 0xb0c
    1702:	2070      	movs	r0, #112	; 0x70
    1704:	f002 f8ee 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1708:	1e847fff 	.word	0x1e847fff

0000170c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    170c:	4907      	ldr	r1, [pc, #28]	; (172c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    170e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1712:	4282      	cmp	r2, r0
    1714:	bf04      	itt	eq
    1716:	6848      	ldreq	r0, [r1, #4]
    1718:	4770      	bxeq	lr
    171a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    171e:	4904      	ldr	r1, [pc, #16]	; (1730 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1720:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1724:	3008      	adds	r0, #8
    1726:	f7ff bd39 	b.w	119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    172a:	0000      	.short	0x0000
    172c:	20000d6c 	.word	0x20000d6c
    1730:	200009ec 	.word	0x200009ec

00001734 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1734:	490e      	ldr	r1, [pc, #56]	; (1770 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1736:	b510      	push	{r4, lr}
    1738:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    173c:	2820      	cmp	r0, #32
    173e:	d012      	beq.n	1766 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1740:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1744:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1748:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    174c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1750:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1754:	6840      	ldr	r0, [r0, #4]
    1756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    175a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    175e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1762:	2104      	movs	r1, #4
    1764:	4710      	bx	r2
    1766:	f640 01bc 	movw	r1, #2236	; 0x8bc
    176a:	2070      	movs	r0, #112	; 0x70
    176c:	f002 f8ba 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1770:	20000d6c 	.word	0x20000d6c

00001774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1776:	4d6d      	ldr	r5, [pc, #436]	; (192c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1778:	496d      	ldr	r1, [pc, #436]	; (1930 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    177a:	2601      	movs	r6, #1
    177c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    1780:	2808      	cmp	r0, #8
    1782:	d273      	bcs.n	186c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1784:	e8df f000 	tbb	[pc, r0]
    1788:	af9d6704 	.word	0xaf9d6704
    178c:	b9b444cd 	.word	0xb9b444cd
    1790:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1794:	b918      	cbnz	r0, 179e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1796:	f001 ff11 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    179a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    179e:	8ae0      	ldrh	r0, [r4, #22]
    17a0:	b110      	cbz	r0, 17a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    17a2:	f002 f827 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17a6:	b188      	cbz	r0, 17cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    17a8:	f7ff fc60 	bl	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    17ac:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    17b0:	68a1      	ldr	r1, [r4, #8]
    17b2:	f1b1 3fff 	cmp.w	r1, #4294967295
    17b6:	d005      	beq.n	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    17b8:	2301      	movs	r3, #1
    17ba:	2203      	movs	r2, #3
    17bc:	2005      	movs	r0, #5
    17be:	f001 fb1b 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    17c2:	b140      	cbz	r0, 17d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    17c4:	7e60      	ldrb	r0, [r4, #25]
    17c6:	2801      	cmp	r0, #1
    17c8:	d110      	bne.n	17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    17ca:	e009      	b.n	17e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    17cc:	f44f 6107 	mov.w	r1, #2160	; 0x870
    17d0:	2070      	movs	r0, #112	; 0x70
    17d2:	f002 f887 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d6:	f640 0175 	movw	r1, #2165	; 0x875
    17da:	2070      	movs	r0, #112	; 0x70
    17dc:	f002 f882 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e0:	6920      	ldr	r0, [r4, #16]
    17e2:	1e40      	subs	r0, r0, #1
    17e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17e8:	f001 fa20 	bl	2c2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    17ec:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17f8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17fc:	6840      	ldr	r0, [r0, #4]
    17fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1802:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1806:	b001      	add	sp, #4
    1808:	2101      	movs	r1, #1
    180a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    180e:	4710      	bx	r2
    1810:	f7ff fc2c 	bl	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    1814:	f04f 30ff 	mov.w	r0, #4294967295
    1818:	60a0      	str	r0, [r4, #8]
    181a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    181e:	f88d 0000 	strb.w	r0, [sp]
    1822:	f89d 0000 	ldrb.w	r0, [sp]
    1826:	b188      	cbz	r0, 184c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1828:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    182c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1830:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1834:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1838:	6840      	ldr	r0, [r0, #4]
    183a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    183e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1842:	b001      	add	sp, #4
    1844:	2106      	movs	r1, #6
    1846:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    184a:	4710      	bx	r2
    184c:	f640 0186 	movw	r1, #2182	; 0x886
    1850:	2070      	movs	r0, #112	; 0x70
    1852:	f002 f847 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1856:	f7ff fc09 	bl	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    185a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    185e:	f001 ffc9 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1862:	b120      	cbz	r0, 186e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1864:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1868:	b130      	cbz	r0, 1878 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    186a:	e009      	b.n	1880 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    186c:	e059      	b.n	1922 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    186e:	f640 0196 	movw	r1, #2198	; 0x896
    1872:	2070      	movs	r0, #112	; 0x70
    1874:	f002 f836 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1878:	f001 fea0 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    187c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1880:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1884:	b158      	cbz	r0, 189e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1886:	492b      	ldr	r1, [pc, #172]	; (1934 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1888:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    188c:	6008      	str	r0, [r1, #0]
    188e:	2005      	movs	r0, #5
    1890:	f001 fb86 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1894:	f001 fede 	bl	3654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1898:	2000      	movs	r0, #0
    189a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    189e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    18a2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    18a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    18aa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    18ae:	6840      	ldr	r0, [r0, #4]
    18b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18b4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    18b8:	b001      	add	sp, #4
    18ba:	2100      	movs	r1, #0
    18bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18c0:	4710      	bx	r2
    18c2:	f001 fc25 	bl	3110 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    18c6:	8ae0      	ldrh	r0, [r4, #22]
    18c8:	b110      	cbz	r0, 18d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    18ca:	f001 ff93 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    18ce:	b128      	cbz	r0, 18dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    18d0:	4819      	ldr	r0, [pc, #100]	; (1938 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    18d2:	7800      	ldrb	r0, [r0, #0]
    18d4:	2803      	cmp	r0, #3
    18d6:	bf08      	it	eq
    18d8:	7766      	strbeq	r6, [r4, #29]
    18da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18dc:	f640 01a1 	movw	r1, #2209	; 0x8a1
    18e0:	2070      	movs	r0, #112	; 0x70
    18e2:	f001 ffff 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18e6:	4815      	ldr	r0, [pc, #84]	; (193c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    18e8:	6006      	str	r6, [r0, #0]
    18ea:	6888      	ldr	r0, [r1, #8]
    18ec:	6006      	str	r6, [r0, #0]
    18ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f0:	7808      	ldrb	r0, [r1, #0]
    18f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    18f6:	f002 b8c5 	b.w	3a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    18fa:	f7ff fbb7 	bl	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
    18fe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1902:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1906:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    190a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    190e:	6840      	ldr	r0, [r0, #4]
    1910:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1914:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1918:	b001      	add	sp, #4
    191a:	2105      	movs	r1, #5
    191c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1920:	4710      	bx	r2
    1922:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1926:	2070      	movs	r0, #112	; 0x70
    1928:	f001 ffdc 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    192c:	200009ec 	.word	0x200009ec
    1930:	20000014 	.word	0x20000014
    1934:	4001f508 	.word	0x4001f508
    1938:	20000016 	.word	0x20000016
    193c:	40000508 	.word	0x40000508

00001940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1940:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1944:	4682      	mov	sl, r0
    1946:	48dc      	ldr	r0, [pc, #880]	; (1cb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1948:	b08b      	sub	sp, #44	; 0x2c
    194a:	6800      	ldr	r0, [r0, #0]
    194c:	4ddb      	ldr	r5, [pc, #876]	; (1cbc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    194e:	05c0      	lsls	r0, r0, #23
    1950:	0dc0      	lsrs	r0, r0, #23
    1952:	d00e      	beq.n	1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1954:	3810      	subs	r0, #16
    1956:	b240      	sxtb	r0, r0
    1958:	2800      	cmp	r0, #0
    195a:	bfb8      	it	lt
    195c:	f000 000f 	andlt.w	r0, r0, #15
    1960:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1964:	bfac      	ite	ge
    1966:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    196a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    196e:	0940      	lsrs	r0, r0, #5
    1970:	d00d      	beq.n	198e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1972:	980c      	ldr	r0, [sp, #48]	; 0x30
    1974:	f04f 0b00 	mov.w	fp, #0
    1978:	7800      	ldrb	r0, [r0, #0]
    197a:	2800      	cmp	r0, #0
    197c:	bf18      	it	ne
    197e:	2801      	cmpne	r0, #1
    1980:	d018      	beq.n	19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1982:	f240 714f 	movw	r1, #1871	; 0x74f
    1986:	f04f 0070 	mov.w	r0, #112	; 0x70
    198a:	f001 ffab 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    198e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1992:	f04f 0b01 	mov.w	fp, #1
    1996:	2820      	cmp	r0, #32
    1998:	d007      	beq.n	19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    199a:	980c      	ldr	r0, [sp, #48]	; 0x30
    199c:	7800      	ldrb	r0, [r0, #0]
    199e:	b148      	cbz	r0, 19b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    19a0:	f240 714b 	movw	r1, #1867	; 0x74b
    19a4:	2070      	movs	r0, #112	; 0x70
    19a6:	f001 ff9d 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19aa:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    19ae:	2070      	movs	r0, #112	; 0x70
    19b0:	f001 ff98 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b4:	4cc2      	ldr	r4, [pc, #776]	; (1cc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    19b6:	b124      	cbz	r4, 19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    19b8:	2100      	movs	r1, #0
    19ba:	f240 7052 	movw	r0, #1874	; 0x752
    19be:	f3af 8000 	nop.w
    19c2:	49c0      	ldr	r1, [pc, #768]	; (1cc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    19c4:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    19c8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    19cc:	f04f 0801 	mov.w	r8, #1
    19d0:	9000      	str	r0, [sp, #0]
    19d2:	b124      	cbz	r4, 19de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    19d4:	2100      	movs	r1, #0
    19d6:	f240 705a 	movw	r0, #1882	; 0x75a
    19da:	f3af 8000 	nop.w
    19de:	f1b8 0f00 	cmp.w	r8, #0
    19e2:	d009      	beq.n	19f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    19e4:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    19e8:	f04f 0900 	mov.w	r9, #0
    19ec:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    19f0:	f1bb 0f00 	cmp.w	fp, #0
    19f4:	d007      	beq.n	1a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    19f6:	e032      	b.n	1a5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    19f8:	48b3      	ldr	r0, [pc, #716]	; (1cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    19fa:	2800      	cmp	r0, #0
    19fc:	bf18      	it	ne
    19fe:	f3af 8000 	nopne.w
    1a02:	b662      	cpsie	i
    1a04:	e7ee      	b.n	19e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1a06:	4637      	mov	r7, r6
    1a08:	2001      	movs	r0, #1
    1a0a:	ea20 0607 	bic.w	r6, r0, r7
    1a0e:	48af      	ldr	r0, [pc, #700]	; (1ccc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a10:	2240      	movs	r2, #64	; 0x40
    1a12:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1a16:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1a1a:	f00b f862 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a1e:	b124      	cbz	r4, 1a2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1a20:	2100      	movs	r1, #0
    1a22:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1a26:	f3af 8000 	nop.w
    1a2a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1a2e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a32:	6a09      	ldr	r1, [r1, #32]
    1a34:	6201      	str	r1, [r0, #32]
    1a36:	b124      	cbz	r4, 1a42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1a38:	2100      	movs	r1, #0
    1a3a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1a3e:	f3af 8000 	nop.w
    1a42:	b124      	cbz	r4, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1a44:	2100      	movs	r1, #0
    1a46:	f240 7064 	movw	r0, #1892	; 0x764
    1a4a:	f3af 8000 	nop.w
    1a4e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a52:	f88d 0004 	strb.w	r0, [sp, #4]
    1a56:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d1b9      	bne.n	19d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a5e:	b124      	cbz	r4, 1a6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1a60:	2100      	movs	r1, #0
    1a62:	f240 706e 	movw	r0, #1902	; 0x76e
    1a66:	f3af 8000 	nop.w
    1a6a:	f001 f83b 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a6e:	4680      	mov	r8, r0
    1a70:	4633      	mov	r3, r6
    1a72:	aa06      	add	r2, sp, #24
    1a74:	990c      	ldr	r1, [sp, #48]	; 0x30
    1a76:	f7ff fa25 	bl	ec4 <CONFIG_BT_RX_STACK_SIZE+0x62c>
    1a7a:	b124      	cbz	r4, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 7075 	movw	r0, #1909	; 0x775
    1a82:	f3af 8000 	nop.w
    1a86:	4991      	ldr	r1, [pc, #580]	; (1ccc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a88:	a806      	add	r0, sp, #24
    1a8a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1a8e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1a92:	2901      	cmp	r1, #1
    1a94:	bf18      	it	ne
    1a96:	2902      	cmpne	r1, #2
    1a98:	d13c      	bne.n	1b14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a9a:	9906      	ldr	r1, [sp, #24]
    1a9c:	9b07      	ldr	r3, [sp, #28]
    1a9e:	eba1 0108 	sub.w	r1, r1, r8
    1aa2:	4a8b      	ldr	r2, [pc, #556]	; (1cd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1aa4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1aa8:	eba3 0308 	sub.w	r3, r3, r8
    1aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ab0:	2902      	cmp	r1, #2
    1ab2:	d371      	bcc.n	1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1ab4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1ab8:	d26e      	bcs.n	1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1aba:	429a      	cmp	r2, r3
    1abc:	d36c      	bcc.n	1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1abe:	f04f 0901 	mov.w	r9, #1
    1ac2:	ab01      	add	r3, sp, #4
    1ac4:	aa05      	add	r2, sp, #20
    1ac6:	4631      	mov	r1, r6
    1ac8:	f7fe fef2 	bl	8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>
    1acc:	2800      	cmp	r0, #0
    1ace:	d06b      	beq.n	1ba8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1ad0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1ad4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1ad8:	4633      	mov	r3, r6
    1ada:	428a      	cmp	r2, r1
    1adc:	d068      	beq.n	1bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1ade:	2005      	movs	r0, #5
    1ae0:	f7fe fd2e 	bl	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1ae4:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1ae8:	7048      	strb	r0, [r1, #1]
    1aea:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1aee:	2820      	cmp	r0, #32
    1af0:	bf03      	ittte	eq
    1af2:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1af6:	f880 a020 	strbeq.w	sl, [r0, #32]
    1afa:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1afe:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1b02:	bf18      	it	ne
    1b04:	f880 a001 	strbne.w	sl, [r0, #1]
    1b08:	4632      	mov	r2, r6
    1b0a:	4651      	mov	r1, sl
    1b0c:	f05f 0003 	movs.w	r0, #3
    1b10:	f7ff fb7e 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1b14:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1b18:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1b1c:	f88d 0004 	strb.w	r0, [sp, #4]
    1b20:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1b24:	b124      	cbz	r4, 1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1b26:	2100      	movs	r1, #0
    1b28:	f240 707c 	movw	r0, #1916	; 0x77c
    1b2c:	f3af 8000 	nop.w
    1b30:	4868      	ldr	r0, [pc, #416]	; (1cd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1b32:	2800      	cmp	r0, #0
    1b34:	bf18      	it	ne
    1b36:	f3af 8000 	nopne.w
    1b3a:	f3ef 8810 	mrs	r8, PRIMASK
    1b3e:	b672      	cpsid	i
    1b40:	b124      	cbz	r4, 1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1b42:	2100      	movs	r1, #0
    1b44:	f240 7082 	movw	r0, #1922	; 0x782
    1b48:	f3af 8000 	nop.w
    1b4c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1b50:	f88d 0004 	strb.w	r0, [sp, #4]
    1b54:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1b58:	2800      	cmp	r0, #0
    1b5a:	f47f af3a 	bne.w	19d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b5e:	b124      	cbz	r4, 1b6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1b60:	2100      	movs	r1, #0
    1b62:	f240 708a 	movw	r0, #1930	; 0x78a
    1b66:	f3af 8000 	nop.w
    1b6a:	f10d 0e18 	add.w	lr, sp, #24
    1b6e:	9800      	ldr	r0, [sp, #0]
    1b70:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1b74:	f100 0008 	add.w	r0, r0, #8
    1b78:	f1b9 0f00 	cmp.w	r9, #0
    1b7c:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1b80:	d044      	beq.n	1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b82:	b124      	cbz	r4, 1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1b84:	2100      	movs	r1, #0
    1b86:	f240 7097 	movw	r0, #1943	; 0x797
    1b8a:	f3af 8000 	nop.w
    1b8e:	f1bb 0f00 	cmp.w	fp, #0
    1b92:	d12c      	bne.n	1bee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b94:	e016      	b.n	1bc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b96:	e7ff      	b.n	1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b98:	4632      	mov	r2, r6
    1b9a:	4651      	mov	r1, sl
    1b9c:	2004      	movs	r0, #4
    1b9e:	f7ff fb37 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1ba2:	f04f 0901 	mov.w	r9, #1
    1ba6:	e7b5      	b.n	1b14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1ba8:	4632      	mov	r2, r6
    1baa:	4651      	mov	r1, sl
    1bac:	2004      	movs	r0, #4
    1bae:	e7af      	b.n	1b10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1bb0:	2920      	cmp	r1, #32
    1bb2:	bf19      	ittee	ne
    1bb4:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1bb8:	7840      	ldrbne	r0, [r0, #1]
    1bba:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1bbe:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1bc2:	e78f      	b.n	1ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1bc4:	b19f      	cbz	r7, 1bee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1bc6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1bca:	2820      	cmp	r0, #32
    1bcc:	d10f      	bne.n	1bee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1bce:	b124      	cbz	r4, 1bda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1bd0:	2100      	movs	r1, #0
    1bd2:	f240 709c 	movw	r0, #1948	; 0x79c
    1bd6:	f3af 8000 	nop.w
    1bda:	4631      	mov	r1, r6
    1bdc:	2002      	movs	r0, #2
    1bde:	f7ff fb47 	bl	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    1be2:	b920      	cbnz	r0, 1bee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1be4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1be6:	7800      	ldrb	r0, [r0, #0]
    1be8:	b3f0      	cbz	r0, 1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1bea:	2801      	cmp	r0, #1
    1bec:	d04c      	beq.n	1c88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1bee:	b124      	cbz	r4, 1bfa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1bf0:	2100      	movs	r1, #0
    1bf2:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1bf6:	f3af 8000 	nop.w
    1bfa:	f1bb 0f00 	cmp.w	fp, #0
    1bfe:	bf18      	it	ne
    1c00:	2001      	movne	r0, #1
    1c02:	d04a      	beq.n	1c9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1c04:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1c08:	f04f 0901 	mov.w	r9, #1
    1c0c:	b124      	cbz	r4, 1c18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1c0e:	2100      	movs	r1, #0
    1c10:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1c14:	f3af 8000 	nop.w
    1c18:	f1b8 0f00 	cmp.w	r8, #0
    1c1c:	d045      	beq.n	1caa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1c1e:	b124      	cbz	r4, 1c2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1c20:	2100      	movs	r1, #0
    1c22:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1c26:	f3af 8000 	nop.w
    1c2a:	f1b9 0f00 	cmp.w	r9, #0
    1c2e:	d011      	beq.n	1c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1c30:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1c34:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c38:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1c3c:	2820      	cmp	r0, #32
    1c3e:	d009      	beq.n	1c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1c40:	b124      	cbz	r4, 1c4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1c42:	2100      	movs	r1, #0
    1c44:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1c48:	f3af 8000 	nop.w
    1c4c:	4822      	ldr	r0, [pc, #136]	; (1cd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1c4e:	7840      	ldrb	r0, [r0, #1]
    1c50:	f001 ff18 	bl	3a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1c54:	b124      	cbz	r4, 1c60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1c56:	2100      	movs	r1, #0
    1c58:	f240 70da 	movw	r0, #2010	; 0x7da
    1c5c:	f3af 8000 	nop.w
    1c60:	b00d      	add	sp, #52	; 0x34
    1c62:	4648      	mov	r0, r9
    1c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c68:	e7ff      	b.n	1c6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1c6a:	b124      	cbz	r4, 1c76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1c6c:	2100      	movs	r1, #0
    1c6e:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1c72:	f3af 8000 	nop.w
    1c76:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1c7a:	4651      	mov	r1, sl
    1c7c:	2004      	movs	r0, #4
    1c7e:	f7ff fac7 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1c82:	f04f 0901 	mov.w	r9, #1
    1c86:	e7c1      	b.n	1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1c88:	2c00      	cmp	r4, #0
    1c8a:	f43f aea2 	beq.w	19d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c8e:	2100      	movs	r1, #0
    1c90:	f240 70af 	movw	r0, #1967	; 0x7af
    1c94:	f3af 8000 	nop.w
    1c98:	e69b      	b.n	19d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c9a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1c9e:	2001      	movs	r0, #1
    1ca0:	ea20 0101 	bic.w	r1, r0, r1
    1ca4:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1ca8:	e7ac      	b.n	1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1caa:	4807      	ldr	r0, [pc, #28]	; (1cc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1cac:	2800      	cmp	r0, #0
    1cae:	bf18      	it	ne
    1cb0:	f3af 8000 	nopne.w
    1cb4:	b662      	cpsie	i
    1cb6:	e7b2      	b.n	1c1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1cb8:	e000ed04 	.word	0xe000ed04
    1cbc:	20000d6c 	.word	0x20000d6c
    1cc0:	00000000 	.word	0x00000000
    1cc4:	200009ec 	.word	0x200009ec
    1cc8:	00000000 	.word	0x00000000
    1ccc:	20000cec 	.word	0x20000cec
    1cd0:	003fffff 	.word	0x003fffff
    1cd4:	00000000 	.word	0x00000000
    1cd8:	20000014 	.word	0x20000014

00001cdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1cdc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ce0:	48a5      	ldr	r0, [pc, #660]	; (1f78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>)
    1ce2:	b08c      	sub	sp, #48	; 0x30
    1ce4:	6800      	ldr	r0, [r0, #0]
    1ce6:	05c0      	lsls	r0, r0, #23
    1ce8:	0dc0      	lsrs	r0, r0, #23
    1cea:	d011      	beq.n	1d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1cec:	3810      	subs	r0, #16
    1cee:	b240      	sxtb	r0, r0
    1cf0:	2800      	cmp	r0, #0
    1cf2:	bfb8      	it	lt
    1cf4:	f000 000f 	andlt.w	r0, r0, #15
    1cf8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1cfc:	bfac      	ite	ge
    1cfe:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1d02:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1d06:	0940      	lsrs	r0, r0, #5
    1d08:	bf08      	it	eq
    1d0a:	f04f 0901 	moveq.w	r9, #1
    1d0e:	d001      	beq.n	1d14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1d10:	f04f 0900 	mov.w	r9, #0
    1d14:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d16:	7800      	ldrb	r0, [r0, #0]
    1d18:	2800      	cmp	r0, #0
    1d1a:	f04f 0000 	mov.w	r0, #0
    1d1e:	bf1c      	itt	ne
    1d20:	b00d      	addne	sp, #52	; 0x34
    1d22:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d26:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>
    1d2a:	4d95      	ldr	r5, [pc, #596]	; (1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1d2c:	4c95      	ldr	r4, [pc, #596]	; (1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1d2e:	f04f 0b00 	mov.w	fp, #0
    1d32:	900b      	str	r0, [sp, #44]	; 0x2c
    1d34:	b125      	cbz	r5, 1d40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1d36:	2100      	movs	r1, #0
    1d38:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1d3c:	f3af 8000 	nop.w
    1d40:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1d44:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1d48:	f04f 0800 	mov.w	r8, #0
    1d4c:	b125      	cbz	r5, 1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d4e:	2100      	movs	r1, #0
    1d50:	f240 605d 	movw	r0, #1629	; 0x65d
    1d54:	f3af 8000 	nop.w
    1d58:	f1b9 0f00 	cmp.w	r9, #0
    1d5c:	d11d      	bne.n	1d9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e>
    1d5e:	4637      	mov	r7, r6
    1d60:	2001      	movs	r0, #1
    1d62:	ea20 0607 	bic.w	r6, r0, r7
    1d66:	4888      	ldr	r0, [pc, #544]	; (1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>)
    1d68:	2240      	movs	r2, #64	; 0x40
    1d6a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d6e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d72:	f00a feb6 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d76:	b125      	cbz	r5, 1d82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d78:	2100      	movs	r1, #0
    1d7a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1d7e:	f3af 8000 	nop.w
    1d82:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1d86:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1d8a:	6a09      	ldr	r1, [r1, #32]
    1d8c:	6201      	str	r1, [r0, #32]
    1d8e:	b125      	cbz	r5, 1d9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e>
    1d90:	2100      	movs	r1, #0
    1d92:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1d96:	f3af 8000 	nop.w
    1d9a:	b125      	cbz	r5, 1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d9c:	2100      	movs	r1, #0
    1d9e:	f240 6065 	movw	r0, #1637	; 0x665
    1da2:	f3af 8000 	nop.w
    1da6:	f000 fe9d 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1daa:	4607      	mov	r7, r0
    1dac:	4633      	mov	r3, r6
    1dae:	466a      	mov	r2, sp
    1db0:	990c      	ldr	r1, [sp, #48]	; 0x30
    1db2:	f7ff f887 	bl	ec4 <CONFIG_BT_RX_STACK_SIZE+0x62c>
    1db6:	b125      	cbz	r5, 1dc2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x76>
    1db8:	2100      	movs	r1, #0
    1dba:	f240 606b 	movw	r0, #1643	; 0x66b
    1dbe:	f3af 8000 	nop.w
    1dc2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dc6:	2820      	cmp	r0, #32
    1dc8:	d014      	beq.n	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1dca:	6920      	ldr	r0, [r4, #16]
    1dcc:	9900      	ldr	r1, [sp, #0]
    1dce:	1a09      	subs	r1, r1, r0
    1dd0:	0209      	lsls	r1, r1, #8
    1dd2:	17ca      	asrs	r2, r1, #31
    1dd4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1dd8:	1209      	asrs	r1, r1, #8
    1dda:	d50b      	bpl.n	1df4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>
    1ddc:	e9dd 2100 	ldrd	r2, r1, [sp]
    1de0:	1a89      	subs	r1, r1, r2
    1de2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1de6:	4408      	add	r0, r1
    1de8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dec:	e9cd 2000 	strd	r2, r0, [sp]
    1df0:	f04f 0801 	mov.w	r8, #1
    1df4:	b14d      	cbz	r5, 1e0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1df6:	2100      	movs	r1, #0
    1df8:	f240 6075 	movw	r0, #1653	; 0x675
    1dfc:	f3af 8000 	nop.w
    1e00:	2100      	movs	r1, #0
    1e02:	f240 607b 	movw	r0, #1659	; 0x67b
    1e06:	f3af 8000 	nop.w
    1e0a:	9800      	ldr	r0, [sp, #0]
    1e0c:	9901      	ldr	r1, [sp, #4]
    1e0e:	1bc0      	subs	r0, r0, r7
    1e10:	1bc9      	subs	r1, r1, r7
    1e12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e1a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1e1e:	d205      	bcs.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e20:	458a      	cmp	sl, r1
    1e22:	d303      	bcc.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e24:	f1b9 0f00 	cmp.w	r9, #0
    1e28:	d10c      	bne.n	1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e2a:	e003      	b.n	1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>
    1e2c:	f1b9 0f00 	cmp.w	r9, #0
    1e30:	d038      	beq.n	1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>
    1e32:	e094      	b.n	1f5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1e34:	4633      	mov	r3, r6
    1e36:	463a      	mov	r2, r7
    1e38:	4669      	mov	r1, sp
    1e3a:	4854      	ldr	r0, [pc, #336]	; (1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>)
    1e3c:	f7fe fbbc 	bl	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1e40:	ea48 0800 	orr.w	r8, r8, r0
    1e44:	f1b8 0f00 	cmp.w	r8, #0
    1e48:	d022      	beq.n	1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>
    1e4a:	9800      	ldr	r0, [sp, #0]
    1e4c:	f00a fcdb 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e50:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e54:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e58:	4b4d      	ldr	r3, [pc, #308]	; (1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>)
    1e5a:	4411      	add	r1, r2
    1e5c:	1c49      	adds	r1, r1, #1
    1e5e:	1842      	adds	r2, r0, r1
    1e60:	4298      	cmp	r0, r3
    1e62:	d841      	bhi.n	1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>
    1e64:	4849      	ldr	r0, [pc, #292]	; (1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>)
    1e66:	4281      	cmp	r1, r0
    1e68:	dc5a      	bgt.n	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1e6a:	4240      	negs	r0, r0
    1e6c:	4281      	cmp	r1, r0
    1e6e:	db5f      	blt.n	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1e70:	1c58      	adds	r0, r3, #1
    1e72:	4290      	cmp	r0, r2
    1e74:	bfdc      	itt	le
    1e76:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e7a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e7e:	dd05      	ble.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e80:	2a00      	cmp	r2, #0
    1e82:	bfbc      	itt	lt
    1e84:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e88:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e8e:	60c2      	str	r2, [r0, #12]
    1e90:	2001      	movs	r0, #1
    1e92:	900b      	str	r0, [sp, #44]	; 0x2c
    1e94:	2d00      	cmp	r5, #0
    1e96:	d062      	beq.n	1f5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1e98:	2100      	movs	r1, #0
    1e9a:	f240 608e 	movw	r0, #1678	; 0x68e
    1e9e:	f3af 8000 	nop.w
    1ea2:	e05c      	b.n	1f5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1ea4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1ea8:	aa08      	add	r2, sp, #32
    1eaa:	a907      	add	r1, sp, #28
    1eac:	f000 fcbc 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1eb0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1eb4:	2820      	cmp	r0, #32
    1eb6:	d01c      	beq.n	1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1eb8:	6920      	ldr	r0, [r4, #16]
    1eba:	1d40      	adds	r0, r0, #5
    1ebc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ec0:	e9dd 2100 	ldrd	r2, r1, [sp]
    1ec4:	1a89      	subs	r1, r1, r2
    1ec6:	4401      	add	r1, r0
    1ec8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1ecc:	e9cd 0100 	strd	r0, r1, [sp]
    1ed0:	f00a fc99 	bl	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1ed4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1ed8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1edc:	4b2c      	ldr	r3, [pc, #176]	; (1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>)
    1ede:	4411      	add	r1, r2
    1ee0:	1c4a      	adds	r2, r1, #1
    1ee2:	1881      	adds	r1, r0, r2
    1ee4:	4298      	cmp	r0, r3
    1ee6:	d918      	bls.n	1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1ee8:	f240 6109 	movw	r1, #1545	; 0x609
    1eec:	2070      	movs	r0, #112	; 0x70
    1eee:	f001 fcf9 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ef2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1ef6:	f107 0609 	add.w	r6, r7, #9
    1efa:	b120      	cbz	r0, 1f06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ba>
    1efc:	f001 fc7a 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f00:	2800      	cmp	r0, #0
    1f02:	bf08      	it	eq
    1f04:	3632      	addeq	r6, #50	; 0x32
    1f06:	4823      	ldr	r0, [pc, #140]	; (1f94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x248>)
    1f08:	7841      	ldrb	r1, [r0, #1]
    1f0a:	9807      	ldr	r0, [sp, #28]
    1f0c:	4281      	cmp	r1, r0
    1f0e:	bf84      	itt	hi
    1f10:	1a08      	subhi	r0, r1, r0
    1f12:	4406      	addhi	r6, r0
    1f14:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1f18:	e7d2      	b.n	1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1f1a:	481c      	ldr	r0, [pc, #112]	; (1f8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x240>)
    1f1c:	4282      	cmp	r2, r0
    1f1e:	dd04      	ble.n	1f2a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1de>
    1f20:	f240 610a 	movw	r1, #1546	; 0x60a
    1f24:	2070      	movs	r0, #112	; 0x70
    1f26:	f001 fcdd 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f2a:	481b      	ldr	r0, [pc, #108]	; (1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>)
    1f2c:	4282      	cmp	r2, r0
    1f2e:	da04      	bge.n	1f3a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ee>
    1f30:	f240 610b 	movw	r1, #1547	; 0x60b
    1f34:	2070      	movs	r0, #112	; 0x70
    1f36:	f001 fcd5 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f3a:	4818      	ldr	r0, [pc, #96]	; (1f9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x250>)
    1f3c:	4288      	cmp	r0, r1
    1f3e:	bfdc      	itt	le
    1f40:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1f44:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1f48:	dd05      	ble.n	1f56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f4a:	2900      	cmp	r1, #0
    1f4c:	bfbc      	itt	lt
    1f4e:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1f52:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1f56:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f58:	60c1      	str	r1, [r0, #12]
    1f5a:	2001      	movs	r0, #1
    1f5c:	900b      	str	r0, [sp, #44]	; 0x2c
    1f5e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1f62:	f88d 0010 	strb.w	r0, [sp, #16]
    1f66:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1f6a:	2800      	cmp	r0, #0
    1f6c:	f47f aee2 	bne.w	1d34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f70:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1f72:	b00d      	add	sp, #52	; 0x34
    1f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f78:	e000ed04 	.word	0xe000ed04
    1f7c:	003fffff 	.word	0x003fffff
    1f80:	00000000 	.word	0x00000000
    1f84:	20000d6c 	.word	0x20000d6c
    1f88:	20000cec 	.word	0x20000cec
    1f8c:	07a12000 	.word	0x07a12000
    1f90:	1e847fff 	.word	0x1e847fff
    1f94:	20000016 	.word	0x20000016
    1f98:	f85ee000 	.word	0xf85ee000
    1f9c:	1e848000 	.word	0x1e848000

00001fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1fa0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa4:	4d88      	ldr	r5, [pc, #544]	; (21c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1c8>)
    1fa6:	b08c      	sub	sp, #48	; 0x30
    1fa8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1fac:	2000      	movs	r0, #0
    1fae:	9009      	str	r0, [sp, #36]	; 0x24
    1fb0:	2001      	movs	r0, #1
    1fb2:	4c86      	ldr	r4, [pc, #536]	; (21cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1cc>)
    1fb4:	f04f 0900 	mov.w	r9, #0
    1fb8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1fbc:	4680      	mov	r8, r0
    1fbe:	9008      	str	r0, [sp, #32]
    1fc0:	b124      	cbz	r4, 1fcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1fc2:	2100      	movs	r1, #0
    1fc4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1fc8:	f3af 8000 	nop.w
    1fcc:	9808      	ldr	r0, [sp, #32]
    1fce:	2800      	cmp	r0, #0
    1fd0:	d037      	beq.n	2042 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x42>
    1fd2:	bf00      	nop
    1fd4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1fd8:	b124      	cbz	r4, 1fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1fda:	2100      	movs	r1, #0
    1fdc:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1fe0:	f3af 8000 	nop.w
    1fe4:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1fe8:	2240      	movs	r2, #64	; 0x40
    1fea:	ea28 060a 	bic.w	r6, r8, sl
    1fee:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1ff2:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1ff6:	4683      	mov	fp, r0
    1ff8:	f00a fd73 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ffc:	b124      	cbz	r4, 2008 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8>
    1ffe:	2100      	movs	r1, #0
    2000:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2004:	f3af 8000 	nop.w
    2008:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    200c:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2010:	9000      	str	r0, [sp, #0]
    2012:	6a09      	ldr	r1, [r1, #32]
    2014:	6201      	str	r1, [r0, #32]
    2016:	b124      	cbz	r4, 2022 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x22>
    2018:	2100      	movs	r1, #0
    201a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    201e:	f3af 8000 	nop.w
    2022:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2026:	f88d 0008 	strb.w	r0, [sp, #8]
    202a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    202e:	b178      	cbz	r0, 2050 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x50>
    2030:	2c00      	cmp	r4, #0
    2032:	bf1c      	itt	ne
    2034:	2100      	movne	r1, #0
    2036:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    203a:	d0c1      	beq.n	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    203c:	f3af 8000 	nop.w
    2040:	e7be      	b.n	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2042:	4863      	ldr	r0, [pc, #396]	; (21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>)
    2044:	2800      	cmp	r0, #0
    2046:	bf18      	it	ne
    2048:	f3af 8000 	nopne.w
    204c:	b662      	cpsie	i
    204e:	e7c1      	b.n	1fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2050:	b124      	cbz	r4, 205c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x5c>
    2052:	2100      	movs	r1, #0
    2054:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2058:	f3af 8000 	nop.w
    205c:	980c      	ldr	r0, [sp, #48]	; 0x30
    205e:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2062:	2803      	cmp	r0, #3
    2064:	d172      	bne.n	214c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14c>
    2066:	f8dd a000 	ldr.w	sl, [sp]
    206a:	f8cd a018 	str.w	sl, [sp, #24]
    206e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2070:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2074:	4288      	cmp	r0, r1
    2076:	bf14      	ite	ne
    2078:	f04f 0b00 	movne.w	fp, #0
    207c:	f04f 0b01 	moveq.w	fp, #1
    2080:	f10a 0c20 	add.w	ip, sl, #32
    2084:	4686      	mov	lr, r0
    2086:	2220      	movs	r2, #32
    2088:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    208c:	e003      	b.n	2096 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x96>
    208e:	4602      	mov	r2, r0
    2090:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2094:	7840      	ldrb	r0, [r0, #1]
    2096:	4288      	cmp	r0, r1
    2098:	d002      	beq.n	20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
    209a:	2820      	cmp	r0, #32
    209c:	d00a      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    209e:	e7f6      	b.n	208e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8e>
    20a0:	2820      	cmp	r0, #32
    20a2:	d007      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    20a4:	4586      	cmp	lr, r0
    20a6:	d107      	bne.n	20b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb8>
    20a8:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    20ac:	7840      	ldrb	r0, [r0, #1]
    20ae:	f88c 0000 	strb.w	r0, [ip]
    20b2:	e007      	b.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    20b4:	4648      	mov	r0, r9
    20b6:	e00c      	b.n	20d2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd2>
    20b8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    20bc:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    20c0:	7840      	ldrb	r0, [r0, #1]
    20c2:	7048      	strb	r0, [r1, #1]
    20c4:	b124      	cbz	r4, 20d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd0>
    20c6:	2100      	movs	r1, #0
    20c8:	f240 5037 	movw	r0, #1335	; 0x537
    20cc:	f3af 8000 	nop.w
    20d0:	4640      	mov	r0, r8
    20d2:	ea10 0f0b 	tst.w	r0, fp
    20d6:	bf18      	it	ne
    20d8:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    20dc:	2800      	cmp	r0, #0
    20de:	d052      	beq.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    20e0:	b124      	cbz	r4, 20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20e2:	2100      	movs	r1, #0
    20e4:	f240 70fd 	movw	r0, #2045	; 0x7fd
    20e8:	f3af 8000 	nop.w
    20ec:	4632      	mov	r2, r6
    20ee:	2001      	movs	r0, #1
    20f0:	990c      	ldr	r1, [sp, #48]	; 0x30
    20f2:	f7ff f88d 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    20f6:	9806      	ldr	r0, [sp, #24]
    20f8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    20fc:	f88d 0008 	strb.w	r0, [sp, #8]
    2100:	f89d a008 	ldrb.w	sl, [sp, #8]
    2104:	b124      	cbz	r4, 2110 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x110>
    2106:	2100      	movs	r1, #0
    2108:	f640 0008 	movw	r0, #2056	; 0x808
    210c:	f3af 8000 	nop.w
    2110:	4830      	ldr	r0, [pc, #192]	; (21d4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d4>)
    2112:	2800      	cmp	r0, #0
    2114:	bf18      	it	ne
    2116:	f3af 8000 	nopne.w
    211a:	f3ef 8010 	mrs	r0, PRIMASK
    211e:	b672      	cpsid	i
    2120:	9008      	str	r0, [sp, #32]
    2122:	b124      	cbz	r4, 212e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x12e>
    2124:	2100      	movs	r1, #0
    2126:	f640 000d 	movw	r0, #2061	; 0x80d
    212a:	f3af 8000 	nop.w
    212e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2132:	f88d 0008 	strb.w	r0, [sp, #8]
    2136:	f89d 0008 	ldrb.w	r0, [sp, #8]
    213a:	b140      	cbz	r0, 214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    213c:	2c00      	cmp	r4, #0
    213e:	bf1c      	itt	ne
    2140:	2100      	movne	r1, #0
    2142:	f640 0011 	movwne	r0, #2065	; 0x811
    2146:	f43f af3b 	beq.w	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    214a:	e777      	b.n	203c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3c>
    214c:	e01b      	b.n	2186 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x186>
    214e:	f1ba 0f00 	cmp.w	sl, #0
    2152:	d008      	beq.n	2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    2154:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2158:	2820      	cmp	r0, #32
    215a:	d104      	bne.n	2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    215c:	4631      	mov	r1, r6
    215e:	2002      	movs	r0, #2
    2160:	f7ff f886 	bl	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    2164:	b308      	cbz	r0, 21aa <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1aa>
    2166:	b124      	cbz	r4, 2172 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x172>
    2168:	2100      	movs	r1, #0
    216a:	f640 0025 	movw	r0, #2085	; 0x825
    216e:	f3af 8000 	nop.w
    2172:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2176:	ea28 0000 	bic.w	r0, r8, r0
    217a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    217e:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2182:	2001      	movs	r0, #1
    2184:	9009      	str	r0, [sp, #36]	; 0x24
    2186:	b124      	cbz	r4, 2192 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x192>
    2188:	2100      	movs	r1, #0
    218a:	f640 002e 	movw	r0, #2094	; 0x82e
    218e:	f3af 8000 	nop.w
    2192:	9808      	ldr	r0, [sp, #32]
    2194:	b188      	cbz	r0, 21ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ba>
    2196:	b124      	cbz	r4, 21a2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1a2>
    2198:	2100      	movs	r1, #0
    219a:	f640 0032 	movw	r0, #2098	; 0x832
    219e:	f3af 8000 	nop.w
    21a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    21a4:	b00d      	add	sp, #52	; 0x34
    21a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21aa:	2c00      	cmp	r4, #0
    21ac:	d0f1      	beq.n	2192 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x192>
    21ae:	2100      	movs	r1, #0
    21b0:	f44f 6002 	mov.w	r0, #2080	; 0x820
    21b4:	f3af 8000 	nop.w
    21b8:	e7e6      	b.n	2188 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x188>
    21ba:	4805      	ldr	r0, [pc, #20]	; (21d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d0>)
    21bc:	2800      	cmp	r0, #0
    21be:	bf18      	it	ne
    21c0:	f3af 8000 	nopne.w
    21c4:	b662      	cpsie	i
    21c6:	e7e6      	b.n	2196 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x196>
    21c8:	20000d6c 	.word	0x20000d6c
	...

000021d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    21d8:	b510      	push	{r4, lr}
    21da:	2820      	cmp	r0, #32
    21dc:	d211      	bcs.n	2202 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21de:	490e      	ldr	r1, [pc, #56]	; (2218 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    21e0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21e4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    21e8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    21ec:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    21f0:	b13b      	cbz	r3, 2202 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21f2:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21f6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    21fa:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    21fe:	2a01      	cmp	r2, #1
    2200:	d001      	beq.n	2206 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2202:	2000      	movs	r0, #0
    2204:	bd10      	pop	{r4, pc}
    2206:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    220a:	4601      	mov	r1, r0
    220c:	2000      	movs	r0, #0
    220e:	f7fe ffff 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    2212:	2001      	movs	r0, #1
    2214:	bd10      	pop	{r4, pc}
    2216:	0000      	.short	0x0000
    2218:	20000d6c 	.word	0x20000d6c

0000221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    221c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2220:	4e80      	ldr	r6, [pc, #512]	; (2424 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2222:	4680      	mov	r8, r0
    2224:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2228:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    222c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2230:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2234:	2800      	cmp	r0, #0
    2236:	d068      	beq.n	230a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2238:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    223c:	4d7a      	ldr	r5, [pc, #488]	; (2428 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    223e:	b125      	cbz	r5, 224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2240:	2100      	movs	r1, #0
    2242:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2246:	f3af 8000 	nop.w
    224a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    224e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2252:	2801      	cmp	r0, #1
    2254:	d018      	beq.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2256:	b2c0      	uxtb	r0, r0
    2258:	2804      	cmp	r0, #4
    225a:	bf1c      	itt	ne
    225c:	2805      	cmpne	r0, #5
    225e:	2806      	cmpne	r0, #6
    2260:	d058      	beq.n	2314 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2262:	b12d      	cbz	r5, 2270 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2264:	f04f 0100 	mov.w	r1, #0
    2268:	f640 30cd 	movw	r0, #3021	; 0xbcd
    226c:	f3af 8000 	nop.w
    2270:	f001 fc5e 	bl	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2274:	b125      	cbz	r5, 2280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2276:	2100      	movs	r1, #0
    2278:	f640 30d1 	movw	r0, #3025	; 0xbd1
    227c:	f3af 8000 	nop.w
    2280:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2284:	2801      	cmp	r0, #1
    2286:	d1e6      	bne.n	2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2288:	2401      	movs	r4, #1
    228a:	b125      	cbz	r5, 2296 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    228c:	2100      	movs	r1, #0
    228e:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2292:	f3af 8000 	nop.w
    2296:	2c00      	cmp	r4, #0
    2298:	d042      	beq.n	2320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    229a:	2000      	movs	r0, #0
    229c:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22a0:	b125      	cbz	r5, 22ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    22a2:	2100      	movs	r1, #0
    22a4:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22a8:	f3af 8000 	nop.w
    22ac:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    22b0:	2001      	movs	r0, #1
    22b2:	ea20 090b 	bic.w	r9, r0, fp
    22b6:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    22ba:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    22be:	2240      	movs	r2, #64	; 0x40
    22c0:	f00a fc0f 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22c4:	b125      	cbz	r5, 22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    22c6:	2100      	movs	r1, #0
    22c8:	f240 50cd 	movw	r0, #1485	; 0x5cd
    22cc:	f3af 8000 	nop.w
    22d0:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    22d4:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    22d8:	6a00      	ldr	r0, [r0, #32]
    22da:	f8ca 0020 	str.w	r0, [sl, #32]
    22de:	b125      	cbz	r5, 22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    22e0:	2100      	movs	r1, #0
    22e2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    22e6:	f3af 8000 	nop.w
    22ea:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22ee:	f88d 0000 	strb.w	r0, [sp]
    22f2:	f89d 0000 	ldrb.w	r0, [sp]
    22f6:	b1d0      	cbz	r0, 232e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    22f8:	2d00      	cmp	r5, #0
    22fa:	bf1c      	itt	ne
    22fc:	2100      	movne	r1, #0
    22fe:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2302:	d0c2      	beq.n	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2304:	f3af 8000 	nop.w
    2308:	e7bf      	b.n	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    230a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    230e:	2070      	movs	r0, #112	; 0x70
    2310:	f001 fae8 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2314:	464a      	mov	r2, r9
    2316:	4641      	mov	r1, r8
    2318:	2001      	movs	r0, #1
    231a:	f7fe ff79 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    231e:	e7a9      	b.n	2274 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2320:	4842      	ldr	r0, [pc, #264]	; (242c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2322:	2800      	cmp	r0, #0
    2324:	bf18      	it	ne
    2326:	f3af 8000 	nopne.w
    232a:	b662      	cpsie	i
    232c:	e7b5      	b.n	229a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    232e:	b125      	cbz	r5, 233a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2330:	2100      	movs	r1, #0
    2332:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2336:	f3af 8000 	nop.w
    233a:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    233e:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2342:	4614      	mov	r4, r2
    2344:	f04f 0b20 	mov.w	fp, #32
    2348:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    234c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2350:	e003      	b.n	235a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2352:	46a3      	mov	fp, r4
    2354:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2358:	785c      	ldrb	r4, [r3, #1]
    235a:	4544      	cmp	r4, r8
    235c:	d002      	beq.n	2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    235e:	2c20      	cmp	r4, #32
    2360:	d02b      	beq.n	23ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2362:	e7f6      	b.n	2352 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2364:	2c20      	cmp	r4, #32
    2366:	d028      	beq.n	23ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2368:	42a2      	cmp	r2, r4
    236a:	d104      	bne.n	2376 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    236c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2370:	7840      	ldrb	r0, [r0, #1]
    2372:	7008      	strb	r0, [r1, #0]
    2374:	e005      	b.n	2382 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2376:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    237a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    237e:	7849      	ldrb	r1, [r1, #1]
    2380:	7041      	strb	r1, [r0, #1]
    2382:	f1ba 0f00 	cmp.w	sl, #0
    2386:	d011      	beq.n	23ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2388:	b125      	cbz	r5, 2394 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    238a:	2100      	movs	r1, #0
    238c:	f240 502f 	movw	r0, #1327	; 0x52f
    2390:	f3af 8000 	nop.w
    2394:	f89a 0000 	ldrb.w	r0, [sl]
    2398:	42a0      	cmp	r0, r4
    239a:	d107      	bne.n	23ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    239c:	b125      	cbz	r5, 23a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    239e:	2100      	movs	r1, #0
    23a0:	f240 5032 	movw	r0, #1330	; 0x532
    23a4:	f3af 8000 	nop.w
    23a8:	f88a b000 	strb.w	fp, [sl]
    23ac:	b15d      	cbz	r5, 23c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    23ae:	2100      	movs	r1, #0
    23b0:	f240 5037 	movw	r0, #1335	; 0x537
    23b4:	f3af 8000 	nop.w
    23b8:	e000      	b.n	23bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    23ba:	b125      	cbz	r5, 23c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    23bc:	2100      	movs	r1, #0
    23be:	f640 30eb 	movw	r0, #3051	; 0xbeb
    23c2:	f3af 8000 	nop.w
    23c6:	481a      	ldr	r0, [pc, #104]	; (2430 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    23c8:	2800      	cmp	r0, #0
    23ca:	bf18      	it	ne
    23cc:	f3af 8000 	nopne.w
    23d0:	f3ef 8410 	mrs	r4, PRIMASK
    23d4:	b672      	cpsid	i
    23d6:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    23da:	f88d 0000 	strb.w	r0, [sp]
    23de:	f89d 0000 	ldrb.w	r0, [sp]
    23e2:	b138      	cbz	r0, 23f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    23e4:	2d00      	cmp	r5, #0
    23e6:	bf1c      	itt	ne
    23e8:	2100      	movne	r1, #0
    23ea:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    23ee:	f43f af4c 	beq.w	228a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    23f2:	e787      	b.n	2304 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    23f4:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    23f8:	2001      	movs	r0, #1
    23fa:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    23fe:	b154      	cbz	r4, 2416 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2400:	2d00      	cmp	r5, #0
    2402:	bf08      	it	eq
    2404:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2408:	2100      	movs	r1, #0
    240a:	f640 30fe 	movw	r0, #3070	; 0xbfe
    240e:	f3af 8000 	nop.w
    2412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2416:	4805      	ldr	r0, [pc, #20]	; (242c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2418:	2800      	cmp	r0, #0
    241a:	bf18      	it	ne
    241c:	f3af 8000 	nopne.w
    2420:	b662      	cpsie	i
    2422:	e7ed      	b.n	2400 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2424:	20000d6c 	.word	0x20000d6c
	...

00002434 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2434:	b570      	push	{r4, r5, r6, lr}
    2436:	460d      	mov	r5, r1
    2438:	4606      	mov	r6, r0
    243a:	f001 f9c9 	bl	37d0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    243e:	480f      	ldr	r0, [pc, #60]	; (247c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2440:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2444:	2400      	movs	r4, #0
    2446:	3880      	subs	r0, #128	; 0x80
    2448:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    244c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2450:	b129      	cbz	r1, 245e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2452:	1c61      	adds	r1, r4, #1
    2454:	b2cc      	uxtb	r4, r1
    2456:	2c20      	cmp	r4, #32
    2458:	d3f8      	bcc.n	244c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    245a:	2020      	movs	r0, #32
    245c:	bd70      	pop	{r4, r5, r6, pc}
    245e:	4808      	ldr	r0, [pc, #32]	; (2480 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2460:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2464:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2468:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    246c:	4621      	mov	r1, r4
    246e:	6045      	str	r5, [r0, #4]
    2470:	2001      	movs	r0, #1
    2472:	f7fe fecd 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    2476:	4620      	mov	r0, r4
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	0000      	.short	0x0000
    247c:	20000d6c 	.word	0x20000d6c
    2480:	200009ec 	.word	0x200009ec

00002484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2488:	b083      	sub	sp, #12
    248a:	f000 fb2b 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    248e:	4605      	mov	r5, r0
    2490:	f000 fdf4 	bl	307c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2494:	4c67      	ldr	r4, [pc, #412]	; (2634 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2496:	68a0      	ldr	r0, [r4, #8]
    2498:	f1b0 3fff 	cmp.w	r0, #4294967295
    249c:	bf1c      	itt	ne
    249e:	f04f 30ff 	movne.w	r0, #4294967295
    24a2:	60a0      	strne	r0, [r4, #8]
    24a4:	7fa0      	ldrb	r0, [r4, #30]
    24a6:	f8df b190 	ldr.w	fp, [pc, #400]	; 2638 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    24aa:	b9a8      	cbnz	r0, 24d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    24ac:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    24b0:	1a08      	subs	r0, r1, r0
    24b2:	0200      	lsls	r0, r0, #8
    24b4:	17c1      	asrs	r1, r0, #31
    24b6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24ba:	1200      	asrs	r0, r0, #8
    24bc:	f44f 710c 	mov.w	r1, #560	; 0x230
    24c0:	f00a f9ce 	bl	c860 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    24c4:	6921      	ldr	r1, [r4, #16]
    24c6:	4408      	add	r0, r1
    24c8:	1a28      	subs	r0, r5, r0
    24ca:	0200      	lsls	r0, r0, #8
    24cc:	17c1      	asrs	r1, r0, #31
    24ce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24d2:	1200      	asrs	r0, r0, #8
    24d4:	0fc0      	lsrs	r0, r0, #31
    24d6:	d013      	beq.n	2500 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    24d8:	7e60      	ldrb	r0, [r4, #25]
    24da:	b328      	cbz	r0, 2528 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    24dc:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    24e0:	f88d 0000 	strb.w	r0, [sp]
    24e4:	f89d 0000 	ldrb.w	r0, [sp]
    24e8:	b1f0      	cbz	r0, 2528 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    24ea:	f000 fc09 	bl	2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    24ee:	bf00      	nop
    24f0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    24f4:	b1f0      	cbz	r0, 2534 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    24f6:	f240 4147 	movw	r1, #1095	; 0x447
    24fa:	2070      	movs	r0, #112	; 0x70
    24fc:	f001 f9f2 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2500:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2504:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2508:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    250c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2510:	6840      	ldr	r0, [r0, #4]
    2512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2516:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    251a:	2108      	movs	r1, #8
    251c:	4790      	blx	r2
    251e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2522:	2070      	movs	r0, #112	; 0x70
    2524:	f001 f9de 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2528:	1ce8      	adds	r0, r5, #3
    252a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    252e:	f000 fadf 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2532:	e7dd      	b.n	24f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2534:	f04f 0a01 	mov.w	sl, #1
    2538:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    253c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2540:	2820      	cmp	r0, #32
    2542:	d024      	beq.n	258e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2544:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2548:	2020      	movs	r0, #32
    254a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    254e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2552:	2600      	movs	r6, #0
    2554:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2558:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    255c:	4837      	ldr	r0, [pc, #220]	; (263c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    255e:	6026      	str	r6, [r4, #0]
    2560:	7800      	ldrb	r0, [r0, #0]
    2562:	2802      	cmp	r0, #2
    2564:	bf16      	itet	ne
    2566:	2803      	cmpne	r0, #3
    2568:	2001      	moveq	r0, #1
    256a:	2000      	movne	r0, #0
    256c:	7720      	strb	r0, [r4, #28]
    256e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2572:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2576:	f899 0020 	ldrb.w	r0, [r9, #32]
    257a:	2820      	cmp	r0, #32
    257c:	d031      	beq.n	25e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    257e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2582:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2586:	7d81      	ldrb	r1, [r0, #22]
    2588:	2901      	cmp	r1, #1
    258a:	d005      	beq.n	2598 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    258c:	e029      	b.n	25e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    258e:	f240 414a 	movw	r1, #1098	; 0x44a
    2592:	2070      	movs	r0, #112	; 0x70
    2594:	f001 f9a6 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2598:	46ab      	mov	fp, r5
    259a:	f100 0508 	add.w	r5, r0, #8
    259e:	8a40      	ldrh	r0, [r0, #18]
    25a0:	aa01      	add	r2, sp, #4
    25a2:	4669      	mov	r1, sp
    25a4:	f000 f940 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25a8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25ac:	2820      	cmp	r0, #32
    25ae:	d004      	beq.n	25ba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    25b0:	6920      	ldr	r0, [r4, #16]
    25b2:	1d40      	adds	r0, r0, #5
    25b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25b8:	e00b      	b.n	25d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    25ba:	8968      	ldrh	r0, [r5, #10]
    25bc:	f10b 0b09 	add.w	fp, fp, #9
    25c0:	b128      	cbz	r0, 25ce <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    25c2:	f001 f917 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25c6:	2800      	cmp	r0, #0
    25c8:	bf08      	it	eq
    25ca:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    25ce:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    25d2:	e9d5 2100 	ldrd	r2, r1, [r5]
    25d6:	1a89      	subs	r1, r1, r2
    25d8:	6028      	str	r0, [r5, #0]
    25da:	4408      	add	r0, r1
    25dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25e0:	6068      	str	r0, [r5, #4]
    25e2:	4639      	mov	r1, r7
    25e4:	2001      	movs	r0, #1
    25e6:	f7fe fe43 	bl	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
    25ea:	2800      	cmp	r0, #0
    25ec:	d0f9      	beq.n	25e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    25ee:	4814      	ldr	r0, [pc, #80]	; (2640 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    25f0:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    25f4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25f8:	2802      	cmp	r0, #2
    25fa:	d104      	bne.n	2606 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    25fc:	463a      	mov	r2, r7
    25fe:	4641      	mov	r1, r8
    2600:	2006      	movs	r0, #6
    2602:	f7fe fe05 	bl	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    2606:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    260a:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    260e:	2820      	cmp	r0, #32
    2610:	d003      	beq.n	261a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2612:	480c      	ldr	r0, [pc, #48]	; (2644 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2614:	7840      	ldrb	r0, [r0, #1]
    2616:	f001 fa35 	bl	3a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    261a:	7f20      	ldrb	r0, [r4, #28]
    261c:	2800      	cmp	r0, #0
    261e:	bf04      	itt	eq
    2620:	b003      	addeq	sp, #12
    2622:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2626:	f000 fd73 	bl	3110 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    262a:	7726      	strb	r6, [r4, #28]
    262c:	7766      	strb	r6, [r4, #29]
    262e:	b003      	add	sp, #12
    2630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2634:	20000d6c 	.word	0x20000d6c
    2638:	200009ec 	.word	0x200009ec
    263c:	20000016 	.word	0x20000016
    2640:	20000cec 	.word	0x20000cec
    2644:	20000014 	.word	0x20000014

00002648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2648:	b510      	push	{r4, lr}
    264a:	4c32      	ldr	r4, [pc, #200]	; (2714 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    264c:	b082      	sub	sp, #8
    264e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2652:	2920      	cmp	r1, #32
    2654:	d008      	beq.n	2668 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2656:	68a1      	ldr	r1, [r4, #8]
    2658:	f1b1 3fff 	cmp.w	r1, #4294967295
    265c:	d009      	beq.n	2672 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    265e:	f640 21e9 	movw	r1, #2793	; 0xae9
    2662:	2070      	movs	r0, #112	; 0x70
    2664:	f001 f93e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2668:	f640 21e8 	movw	r1, #2792	; 0xae8
    266c:	2070      	movs	r0, #112	; 0x70
    266e:	f001 f939 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2672:	6862      	ldr	r2, [r4, #4]
    2674:	4601      	mov	r1, r0
    2676:	4b28      	ldr	r3, [pc, #160]	; (2718 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2678:	1850      	adds	r0, r2, r1
    267a:	429a      	cmp	r2, r3
    267c:	d904      	bls.n	2688 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    267e:	f240 6109 	movw	r1, #1545	; 0x609
    2682:	2070      	movs	r0, #112	; 0x70
    2684:	f001 f92e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2688:	4a24      	ldr	r2, [pc, #144]	; (271c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    268a:	4291      	cmp	r1, r2
    268c:	dd04      	ble.n	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    268e:	f240 610a 	movw	r1, #1546	; 0x60a
    2692:	2070      	movs	r0, #112	; 0x70
    2694:	f001 f926 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2698:	4a21      	ldr	r2, [pc, #132]	; (2720 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    269a:	4291      	cmp	r1, r2
    269c:	da04      	bge.n	26a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    269e:	f240 610b 	movw	r1, #1547	; 0x60b
    26a2:	2070      	movs	r0, #112	; 0x70
    26a4:	f001 f91e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26a8:	491e      	ldr	r1, [pc, #120]	; (2724 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    26aa:	4281      	cmp	r1, r0
    26ac:	bfdc      	itt	le
    26ae:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    26b2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    26b6:	dd05      	ble.n	26c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    26b8:	2800      	cmp	r0, #0
    26ba:	bfbc      	itt	lt
    26bc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    26c0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    26c4:	aa01      	add	r2, sp, #4
    26c6:	4669      	mov	r1, sp
    26c8:	f000 f8ae 	bl	2828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    26cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    26d0:	280f      	cmp	r0, #15
    26d2:	bf8c      	ite	hi
    26d4:	2001      	movhi	r0, #1
    26d6:	2000      	movls	r0, #0
    26d8:	9900      	ldr	r1, [sp, #0]
    26da:	4408      	add	r0, r1
    26dc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26e0:	60a1      	str	r1, [r4, #8]
    26e2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26e6:	f88d 0000 	strb.w	r0, [sp]
    26ea:	f89d 0000 	ldrb.w	r0, [sp]
    26ee:	2800      	cmp	r0, #0
    26f0:	bf04      	itt	eq
    26f2:	b002      	addeq	sp, #8
    26f4:	bd10      	popeq	{r4, pc}
    26f6:	2301      	movs	r3, #1
    26f8:	2203      	movs	r2, #3
    26fa:	2005      	movs	r0, #5
    26fc:	f000 fb7c 	bl	2df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2700:	2800      	cmp	r0, #0
    2702:	bf1c      	itt	ne
    2704:	b002      	addne	sp, #8
    2706:	bd10      	popne	{r4, pc}
    2708:	f640 21f1 	movw	r1, #2801	; 0xaf1
    270c:	2070      	movs	r0, #112	; 0x70
    270e:	f001 f8e9 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2712:	0000      	.short	0x0000
    2714:	20000d6c 	.word	0x20000d6c
    2718:	1e847fff 	.word	0x1e847fff
    271c:	07a12000 	.word	0x07a12000
    2720:	f85ee000 	.word	0xf85ee000
    2724:	1e848000 	.word	0x1e848000

00002728 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2728:	b570      	push	{r4, r5, r6, lr}
    272a:	4c1e      	ldr	r4, [pc, #120]	; (27a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    272c:	2120      	movs	r1, #32
    272e:	f884 1020 	strb.w	r1, [r4, #32]
    2732:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2736:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    273a:	2000      	movs	r0, #0
    273c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2740:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2744:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2748:	1e42      	subs	r2, r0, #1
    274a:	60a2      	str	r2, [r4, #8]
    274c:	6020      	str	r0, [r4, #0]
    274e:	77a0      	strb	r0, [r4, #30]
    2750:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2754:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2758:	7720      	strb	r0, [r4, #28]
    275a:	7760      	strb	r0, [r4, #29]
    275c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2760:	4911      	ldr	r1, [pc, #68]	; (27a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2762:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2766:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    276a:	7008      	strb	r0, [r1, #0]
    276c:	7048      	strb	r0, [r1, #1]
    276e:	8048      	strh	r0, [r1, #2]
    2770:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2774:	2210      	movs	r2, #16
    2776:	7088      	strb	r0, [r1, #2]
    2778:	f801 0f04 	strb.w	r0, [r1, #4]!
    277c:	1e52      	subs	r2, r2, #1
    277e:	d1fa      	bne.n	2776 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2780:	4d0a      	ldr	r5, [pc, #40]	; (27ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2782:	2601      	movs	r6, #1
    2784:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2788:	20ff      	movs	r0, #255	; 0xff
    278a:	7028      	strb	r0, [r5, #0]
    278c:	4808      	ldr	r0, [pc, #32]	; (27b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    278e:	f001 f95b 	bl	3a48 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2792:	7068      	strb	r0, [r5, #1]
    2794:	f001 f9b6 	bl	3b04 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2798:	60a8      	str	r0, [r5, #8]
    279a:	f000 fd01 	bl	31a0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    279e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    27a2:	bd70      	pop	{r4, r5, r6, pc}
    27a4:	20000d6c 	.word	0x20000d6c
    27a8:	20000016 	.word	0x20000016
    27ac:	20000014 	.word	0x20000014
    27b0:	000010cd 	.word	0x000010cd

000027b4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	4605      	mov	r5, r0
    27b8:	2001      	movs	r0, #1
    27ba:	fa00 f405 	lsl.w	r4, r0, r5
    27be:	460e      	mov	r6, r1
    27c0:	2a00      	cmp	r2, #0
    27c2:	bf08      	it	eq
    27c4:	4808      	ldreq	r0, [pc, #32]	; (27e8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    27c6:	d00c      	beq.n	27e2 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    27c8:	2000      	movs	r0, #0
    27ca:	f000 fccf 	bl	316c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    27ce:	00e9      	lsls	r1, r5, #3
    27d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    27d4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    27d8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    27dc:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    27e0:	4802      	ldr	r0, [pc, #8]	; (27ec <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    27e2:	6004      	str	r4, [r0, #0]
    27e4:	bd70      	pop	{r4, r5, r6, pc}
    27e6:	0000      	.short	0x0000
    27e8:	4001f508 	.word	0x4001f508
    27ec:	4001f504 	.word	0x4001f504

000027f0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    27f0:	0b41      	lsrs	r1, r0, #13
    27f2:	f248 6237 	movw	r2, #34359	; 0x8637
    27f6:	4351      	muls	r1, r2
    27f8:	0c0a      	lsrs	r2, r1, #16
    27fa:	4b09      	ldr	r3, [pc, #36]	; (2820 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    27fc:	0251      	lsls	r1, r2, #9
    27fe:	fb02 0203 	mla	r2, r2, r3, r0
    2802:	4808      	ldr	r0, [pc, #32]	; (2824 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2804:	4350      	muls	r0, r2
    2806:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    280a:	306e      	adds	r0, #110	; 0x6e
    280c:	0d40      	lsrs	r0, r0, #21
    280e:	425b      	negs	r3, r3
    2810:	fb10 f303 	smulbb	r3, r0, r3
    2814:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2818:	bf88      	it	hi
    281a:	1c49      	addhi	r1, r1, #1
    281c:	4408      	add	r0, r1
    281e:	4770      	bx	lr
    2820:	ffffc2f7 	.word	0xffffc2f7
    2824:	00010c6f 	.word	0x00010c6f

00002828 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2828:	0b43      	lsrs	r3, r0, #13
    282a:	f248 6c37 	movw	ip, #34359	; 0x8637
    282e:	fb03 f30c 	mul.w	r3, r3, ip
    2832:	b430      	push	{r4, r5}
    2834:	0c1b      	lsrs	r3, r3, #16
    2836:	f8df c044 	ldr.w	ip, [pc, #68]	; 287c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    283a:	025c      	lsls	r4, r3, #9
    283c:	fb03 030c 	mla	r3, r3, ip, r0
    2840:	480f      	ldr	r0, [pc, #60]	; (2880 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2842:	4358      	muls	r0, r3
    2844:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2848:	eb04 000c 	add.w	r0, r4, ip
    284c:	f643 5409 	movw	r4, #15625	; 0x3d09
    2850:	fb1c f404 	smulbb	r4, ip, r4
    2854:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2858:	f643 5508 	movw	r5, #15624	; 0x3d08
    285c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2860:	442c      	add	r4, r5
    2862:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2866:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    286a:	bf84      	itt	hi
    286c:	f04f 0c00 	movhi.w	ip, #0
    2870:	1c40      	addhi	r0, r0, #1
    2872:	6008      	str	r0, [r1, #0]
    2874:	f882 c000 	strb.w	ip, [r2]
    2878:	bc30      	pop	{r4, r5}
    287a:	4770      	bx	lr
    287c:	ffffc2f7 	.word	0xffffc2f7
    2880:	00010c6f 	.word	0x00010c6f

00002884 <MPSL_IRQ_RTC0_Handler>:
    2884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2888:	4c36      	ldr	r4, [pc, #216]	; (2964 <MPSL_IRQ_RTC0_Handler+0xe0>)
    288a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    288e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2892:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2896:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    289a:	f04f 0500 	mov.w	r5, #0
    289e:	d019      	beq.n	28d4 <MPSL_IRQ_RTC0_Handler+0x50>
    28a0:	4831      	ldr	r0, [pc, #196]	; (2968 <MPSL_IRQ_RTC0_Handler+0xe4>)
    28a2:	6800      	ldr	r0, [r0, #0]
    28a4:	b1b0      	cbz	r0, 28d4 <MPSL_IRQ_RTC0_Handler+0x50>
    28a6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    28aa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28ae:	482f      	ldr	r0, [pc, #188]	; (296c <MPSL_IRQ_RTC0_Handler+0xe8>)
    28b0:	6800      	ldr	r0, [r0, #0]
    28b2:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    28b6:	1a40      	subs	r0, r0, r1
    28b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28bc:	2802      	cmp	r0, #2
    28be:	d302      	bcc.n	28c6 <MPSL_IRQ_RTC0_Handler+0x42>
    28c0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28c4:	d306      	bcc.n	28d4 <MPSL_IRQ_RTC0_Handler+0x50>
    28c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    28ca:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28ce:	2004      	movs	r0, #4
    28d0:	f7fe ff50 	bl	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28d4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28d8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28dc:	d019      	beq.n	2912 <MPSL_IRQ_RTC0_Handler+0x8e>
    28de:	4824      	ldr	r0, [pc, #144]	; (2970 <MPSL_IRQ_RTC0_Handler+0xec>)
    28e0:	6800      	ldr	r0, [r0, #0]
    28e2:	b1b0      	cbz	r0, 2912 <MPSL_IRQ_RTC0_Handler+0x8e>
    28e4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    28e8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28ec:	4821      	ldr	r0, [pc, #132]	; (2974 <MPSL_IRQ_RTC0_Handler+0xf0>)
    28ee:	6800      	ldr	r0, [r0, #0]
    28f0:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    28f4:	1a40      	subs	r0, r0, r1
    28f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28fa:	2802      	cmp	r0, #2
    28fc:	d302      	bcc.n	2904 <MPSL_IRQ_RTC0_Handler+0x80>
    28fe:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2902:	d306      	bcc.n	2912 <MPSL_IRQ_RTC0_Handler+0x8e>
    2904:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2908:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    290c:	2005      	movs	r0, #5
    290e:	f7fe ff31 	bl	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2912:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2916:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    291a:	bf08      	it	eq
    291c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2920:	4815      	ldr	r0, [pc, #84]	; (2978 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2922:	6800      	ldr	r0, [r0, #0]
    2924:	2800      	cmp	r0, #0
    2926:	bf08      	it	eq
    2928:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    292c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2930:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2934:	4811      	ldr	r0, [pc, #68]	; (297c <MPSL_IRQ_RTC0_Handler+0xf8>)
    2936:	6800      	ldr	r0, [r0, #0]
    2938:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    293c:	1a40      	subs	r0, r0, r1
    293e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2942:	2802      	cmp	r0, #2
    2944:	d304      	bcc.n	2950 <MPSL_IRQ_RTC0_Handler+0xcc>
    2946:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    294a:	bf38      	it	cc
    294c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2950:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2954:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    295c:	2006      	movs	r0, #6
    295e:	f7fe bf09 	b.w	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2962:	0000      	.short	0x0000
    2964:	4000b000 	.word	0x4000b000
    2968:	4000b140 	.word	0x4000b140
    296c:	4000b540 	.word	0x4000b540
    2970:	4000b144 	.word	0x4000b144
    2974:	4000b544 	.word	0x4000b544
    2978:	4000b148 	.word	0x4000b148
    297c:	4000b548 	.word	0x4000b548

00002980 <MPSL_IRQ_TIMER0_Handler>:
    2980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2984:	4d38      	ldr	r5, [pc, #224]	; (2a68 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    2986:	7828      	ldrb	r0, [r5, #0]
    2988:	2804      	cmp	r0, #4
    298a:	d068      	beq.n	2a5e <MPSL_IRQ_TIMER0_Handler+0xde>
    298c:	1ce8      	adds	r0, r5, #3
    298e:	2201      	movs	r2, #1
    2990:	7801      	ldrb	r1, [r0, #0]
    2992:	b159      	cbz	r1, 29ac <MPSL_IRQ_TIMER0_Handler+0x2c>
    2994:	2901      	cmp	r1, #1
    2996:	bf08      	it	eq
    2998:	706a      	strbeq	r2, [r5, #1]
    299a:	d002      	beq.n	29a2 <MPSL_IRQ_TIMER0_Handler+0x22>
    299c:	7869      	ldrb	r1, [r5, #1]
    299e:	2900      	cmp	r1, #0
    29a0:	d058      	beq.n	2a54 <MPSL_IRQ_TIMER0_Handler+0xd4>
    29a2:	2102      	movs	r1, #2
    29a4:	7001      	strb	r1, [r0, #0]
    29a6:	7840      	ldrb	r0, [r0, #1]
    29a8:	f000 fafa 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29ac:	4c2f      	ldr	r4, [pc, #188]	; (2a6c <MPSL_IRQ_TIMER0_Handler+0xec>)
    29ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29b2:	f04f 0800 	mov.w	r8, #0
    29b6:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    29ba:	f44f 7780 	mov.w	r7, #256	; 0x100
    29be:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    29c2:	d00a      	beq.n	29da <MPSL_IRQ_TIMER0_Handler+0x5a>
    29c4:	482a      	ldr	r0, [pc, #168]	; (2a70 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    29c6:	6800      	ldr	r0, [r0, #0]
    29c8:	b138      	cbz	r0, 29da <MPSL_IRQ_TIMER0_Handler+0x5a>
    29ca:	2003      	movs	r0, #3
    29cc:	f000 fae8 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29d4:	2003      	movs	r0, #3
    29d6:	f7fe fecd 	bl	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29de:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    29e2:	d00a      	beq.n	29fa <MPSL_IRQ_TIMER0_Handler+0x7a>
    29e4:	4823      	ldr	r0, [pc, #140]	; (2a74 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    29e6:	6800      	ldr	r0, [r0, #0]
    29e8:	b138      	cbz	r0, 29fa <MPSL_IRQ_TIMER0_Handler+0x7a>
    29ea:	2002      	movs	r0, #2
    29ec:	f000 fad8 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29f0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29f4:	2002      	movs	r0, #2
    29f6:	f7fe febd 	bl	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29fe:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2a02:	d00a      	beq.n	2a1a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2a04:	481c      	ldr	r0, [pc, #112]	; (2a78 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2a06:	6800      	ldr	r0, [r0, #0]
    2a08:	b138      	cbz	r0, 2a1a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2a0a:	2001      	movs	r0, #1
    2a0c:	f000 fac8 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a10:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a14:	2001      	movs	r0, #1
    2a16:	f7fe fead 	bl	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a1a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a1e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2a22:	bf08      	it	eq
    2a24:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a28:	4814      	ldr	r0, [pc, #80]	; (2a7c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2a2a:	6800      	ldr	r0, [r0, #0]
    2a2c:	2800      	cmp	r0, #0
    2a2e:	bf08      	it	eq
    2a30:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a34:	2000      	movs	r0, #0
    2a36:	f000 fab3 	bl	2fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a3a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a3e:	2004      	movs	r0, #4
    2a40:	7028      	strb	r0, [r5, #0]
    2a42:	f8c5 8008 	str.w	r8, [r5, #8]
    2a46:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a4e:	2000      	movs	r0, #0
    2a50:	f7fe be90 	b.w	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a54:	f240 316a 	movw	r1, #874	; 0x36a
    2a58:	206c      	movs	r0, #108	; 0x6c
    2a5a:	f000 ff43 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a62:	2007      	movs	r0, #7
    2a64:	f7fe be86 	b.w	1774 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a68:	20000020 	.word	0x20000020
    2a6c:	40008000 	.word	0x40008000
    2a70:	4000814c 	.word	0x4000814c
    2a74:	40008148 	.word	0x40008148
    2a78:	40008144 	.word	0x40008144
    2a7c:	40008140 	.word	0x40008140
    2a80:	2201      	movs	r2, #1
    2a82:	0211      	lsls	r1, r2, #8
    2a84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a88:	2000      	movs	r0, #0
    2a8a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2a92:	f3bf 8f4f 	dsb	sy
    2a96:	f3bf 8f6f 	isb	sy
    2a9a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2a9e:	490e      	ldr	r1, [pc, #56]	; (2ad8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2aa0:	f841 2f04 	str.w	r2, [r1, #4]!
    2aa4:	1e43      	subs	r3, r0, #1
    2aa6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2aaa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2aae:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2ab2:	4b0a      	ldr	r3, [pc, #40]	; (2adc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2ab4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2ab8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2abc:	1d1b      	adds	r3, r3, #4
    2abe:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2ac2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ac6:	1d1b      	adds	r3, r3, #4
    2ac8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2acc:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2ad0:	60ca      	str	r2, [r1, #12]
    2ad2:	4903      	ldr	r1, [pc, #12]	; (2ae0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2ad4:	7048      	strb	r0, [r1, #1]
    2ad6:	4770      	bx	lr
    2ad8:	40008000 	.word	0x40008000
    2adc:	40008004 	.word	0x40008004
    2ae0:	20000020 	.word	0x20000020

00002ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2ae4:	4801      	ldr	r0, [pc, #4]	; (2aec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2ae6:	6800      	ldr	r0, [r0, #0]
    2ae8:	4770      	bx	lr
    2aea:	0000      	.short	0x0000
    2aec:	4000b504 	.word	0x4000b504

00002af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2af4:	4e47      	ldr	r6, [pc, #284]	; (2c14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2af6:	4605      	mov	r5, r0
    2af8:	1ef7      	subs	r7, r6, #3
    2afa:	7832      	ldrb	r2, [r6, #0]
    2afc:	68f9      	ldr	r1, [r7, #12]
    2afe:	2a01      	cmp	r2, #1
    2b00:	bf04      	itt	eq
    2b02:	42a9      	cmpeq	r1, r5
    2b04:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b08:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2b0c:	4b42      	ldr	r3, [pc, #264]	; (2c18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2b0e:	6018      	str	r0, [r3, #0]
    2b10:	4842      	ldr	r0, [pc, #264]	; (2c1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b12:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2b16:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2b1a:	f100 0304 	add.w	r3, r0, #4
    2b1e:	f04f 0400 	mov.w	r4, #0
    2b22:	2a00      	cmp	r2, #0
    2b24:	d061      	beq.n	2bea <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2b26:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2b2a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2b2e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2b32:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2b36:	4b3a      	ldr	r3, [pc, #232]	; (2c20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b38:	681b      	ldr	r3, [r3, #0]
    2b3a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2b3e:	f04f 0801 	mov.w	r8, #1
    2b42:	2b00      	cmp	r3, #0
    2b44:	bf04      	itt	eq
    2b46:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2b4a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b52:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2b56:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2b5a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2b5e:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2b62:	1aeb      	subs	r3, r5, r3
    2b64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b68:	2b02      	cmp	r3, #2
    2b6a:	d34b      	bcc.n	2c04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b70:	d248      	bcs.n	2c04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b72:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b7a:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2b7e:	b132      	cbz	r2, 2b8e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2b80:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2b84:	1a8a      	subs	r2, r1, r2
    2b86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b8a:	2a02      	cmp	r2, #2
    2b8c:	d3f8      	bcc.n	2b80 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2b8e:	f8c7 8008 	str.w	r8, [r7, #8]
    2b92:	703c      	strb	r4, [r7, #0]
    2b94:	f7ff ff74 	bl	2a80 <MPSL_IRQ_TIMER0_Handler+0x100>
    2b98:	4822      	ldr	r0, [pc, #136]	; (2c24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2b9a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2b9e:	f364 0101 	bfi	r1, r4, #0, #2
    2ba2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2ba6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2baa:	2102      	movs	r1, #2
    2bac:	f361 0201 	bfi	r2, r1, #0, #2
    2bb0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2bb4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2bb8:	2104      	movs	r1, #4
    2bba:	f361 0203 	bfi	r2, r1, #0, #4
    2bbe:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2bc2:	f8c0 800c 	str.w	r8, [r0, #12]
    2bc6:	68b9      	ldr	r1, [r7, #8]
    2bc8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2bcc:	1580      	asrs	r0, r0, #22
    2bce:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2bd2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2bd6:	4914      	ldr	r1, [pc, #80]	; (2c28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2bd8:	05c0      	lsls	r0, r0, #23
    2bda:	6008      	str	r0, [r1, #0]
    2bdc:	2004      	movs	r0, #4
    2bde:	60fd      	str	r5, [r7, #12]
    2be0:	7070      	strb	r0, [r6, #1]
    2be2:	f886 8000 	strb.w	r8, [r6]
    2be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bea:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2bee:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2bf2:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2bf6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2bfa:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2bfe:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2c02:	e798      	b.n	2b36 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2c04:	2100      	movs	r1, #0
    2c06:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2c0e:	206c      	movs	r0, #108	; 0x6c
    2c10:	f000 fe68 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c14:	20000023 	.word	0x20000023
    2c18:	4001f508 	.word	0x4001f508
    2c1c:	4000b000 	.word	0x4000b000
    2c20:	4000b148 	.word	0x4000b148
    2c24:	40008000 	.word	0x40008000
    2c28:	4001f504 	.word	0x4001f504

00002c2c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2c2c:	b570      	push	{r4, r5, r6, lr}
    2c2e:	4c2c      	ldr	r4, [pc, #176]	; (2ce0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2c30:	68e2      	ldr	r2, [r4, #12]
    2c32:	4282      	cmp	r2, r0
    2c34:	bf14      	ite	ne
    2c36:	2101      	movne	r1, #1
    2c38:	2100      	moveq	r1, #0
    2c3a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2ce4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2c3e:	f89c 5000 	ldrb.w	r5, [ip]
    2c42:	2d02      	cmp	r5, #2
    2c44:	d002      	beq.n	2c4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2c46:	2900      	cmp	r1, #0
    2c48:	d037      	beq.n	2cba <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2c4a:	e002      	b.n	2c52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2c4c:	2900      	cmp	r1, #0
    2c4e:	bf08      	it	eq
    2c50:	bd70      	popeq	{r4, r5, r6, pc}
    2c52:	7861      	ldrb	r1, [r4, #1]
    2c54:	b381      	cbz	r1, 2cb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2c56:	4b24      	ldr	r3, [pc, #144]	; (2ce8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2c58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2c5c:	6019      	str	r1, [r3, #0]
    2c5e:	138b      	asrs	r3, r1, #14
    2c60:	4922      	ldr	r1, [pc, #136]	; (2cec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2c62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2c66:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2c6a:	2300      	movs	r3, #0
    2c6c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2c70:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c74:	1ac3      	subs	r3, r0, r3
    2c76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c7a:	2b02      	cmp	r3, #2
    2c7c:	d327      	bcc.n	2cce <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2c82:	d224      	bcs.n	2cce <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c84:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c8c:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2c90:	b13d      	cbz	r5, 2ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2c92:	bf00      	nop
    2c94:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c98:	1ad3      	subs	r3, r2, r3
    2c9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c9e:	2b02      	cmp	r3, #2
    2ca0:	d3f8      	bcc.n	2c94 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2ca2:	4b13      	ldr	r3, [pc, #76]	; (2cf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2ca4:	2102      	movs	r1, #2
    2ca6:	074a      	lsls	r2, r1, #29
    2ca8:	601a      	str	r2, [r3, #0]
    2caa:	60e0      	str	r0, [r4, #12]
    2cac:	2004      	movs	r0, #4
    2cae:	f88c 0001 	strb.w	r0, [ip, #1]
    2cb2:	f88c 1000 	strb.w	r1, [ip]
    2cb6:	bd70      	pop	{r4, r5, r6, pc}
    2cb8:	e004      	b.n	2cc4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2cba:	f240 2102 	movw	r1, #514	; 0x202
    2cbe:	206c      	movs	r0, #108	; 0x6c
    2cc0:	f000 fe10 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cc4:	f240 2106 	movw	r1, #518	; 0x206
    2cc8:	206c      	movs	r0, #108	; 0x6c
    2cca:	f000 fe0b 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cce:	2000      	movs	r0, #0
    2cd0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2cd4:	f240 2112 	movw	r1, #530	; 0x212
    2cd8:	206c      	movs	r0, #108	; 0x6c
    2cda:	f000 fe03 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cde:	0000      	.short	0x0000
    2ce0:	20000020 	.word	0x20000020
    2ce4:	20000023 	.word	0x20000023
    2ce8:	4001f508 	.word	0x4001f508
    2cec:	4000b000 	.word	0x4000b000
    2cf0:	4001f504 	.word	0x4001f504

00002cf4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2cf4:	4801      	ldr	r0, [pc, #4]	; (2cfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2cf6:	68c0      	ldr	r0, [r0, #12]
    2cf8:	4770      	bx	lr
    2cfa:	0000      	.short	0x0000
    2cfc:	20000020 	.word	0x20000020

00002d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d04:	4936      	ldr	r1, [pc, #216]	; (2de0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2d06:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2d0a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2d0e:	4d35      	ldr	r5, [pc, #212]	; (2de4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2d10:	1d0b      	adds	r3, r1, #4
    2d12:	2200      	movs	r2, #0
    2d14:	7828      	ldrb	r0, [r5, #0]
    2d16:	b168      	cbz	r0, 2d34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2d18:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2d1c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2d20:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d24:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d28:	4b2f      	ldr	r3, [pc, #188]	; (2de8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2d2a:	681b      	ldr	r3, [r3, #0]
    2d2c:	f04f 0c01 	mov.w	ip, #1
    2d30:	b99b      	cbnz	r3, 2d5a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2d32:	e00c      	b.n	2d4e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2d34:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2d38:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2d3c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2d40:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2d44:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d48:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d4c:	e7ec      	b.n	2d28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2d4e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2d56:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2d5a:	2802      	cmp	r0, #2
    2d5c:	d004      	beq.n	2d68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2d5e:	f240 211e 	movw	r1, #542	; 0x21e
    2d62:	206c      	movs	r0, #108	; 0x6c
    2d64:	f000 fdbe 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d68:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d6c:	4c1f      	ldr	r4, [pc, #124]	; (2dec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2d6e:	1cc0      	adds	r0, r0, #3
    2d70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d74:	68e3      	ldr	r3, [r4, #12]
    2d76:	4e1e      	ldr	r6, [pc, #120]	; (2df0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d78:	4298      	cmp	r0, r3
    2d7a:	d00c      	beq.n	2d96 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d7c:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2d80:	1bdf      	subs	r7, r3, r7
    2d82:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d86:	2f04      	cmp	r7, #4
    2d88:	d305      	bcc.n	2d96 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d8a:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2d8e:	d202      	bcs.n	2d96 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d90:	f7ff feae 	bl	2af0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d94:	e01f      	b.n	2dd6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2d96:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d9a:	1a18      	subs	r0, r3, r0
    2d9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2da0:	2802      	cmp	r0, #2
    2da2:	d315      	bcc.n	2dd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2da4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2da8:	d212      	bcs.n	2dd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2daa:	4912      	ldr	r1, [pc, #72]	; (2df4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2dac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2db0:	6008      	str	r0, [r1, #0]
    2db2:	f8c4 c008 	str.w	ip, [r4, #8]
    2db6:	7022      	strb	r2, [r4, #0]
    2db8:	f8c6 c004 	str.w	ip, [r6, #4]
    2dbc:	f8c6 c00c 	str.w	ip, [r6, #12]
    2dc0:	0040      	lsls	r0, r0, #1
    2dc2:	1f09      	subs	r1, r1, #4
    2dc4:	6008      	str	r0, [r1, #0]
    2dc6:	2004      	movs	r0, #4
    2dc8:	7068      	strb	r0, [r5, #1]
    2dca:	f885 c000 	strb.w	ip, [r5]
    2dce:	e002      	b.n	2dd6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2dd0:	f8c4 c008 	str.w	ip, [r4, #8]
    2dd4:	7022      	strb	r2, [r4, #0]
    2dd6:	68a0      	ldr	r0, [r4, #8]
    2dd8:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2de0:	4000b000 	.word	0x4000b000
    2de4:	20000023 	.word	0x20000023
    2de8:	4000b148 	.word	0x4000b148
    2dec:	20000020 	.word	0x20000020
    2df0:	40008000 	.word	0x40008000
    2df4:	4001f508 	.word	0x4001f508

00002df8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dfc:	f8df c190 	ldr.w	ip, [pc, #400]	; 2f90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2e00:	2600      	movs	r6, #0
    2e02:	2701      	movs	r7, #1
    2e04:	f89c 4000 	ldrb.w	r4, [ip]
    2e08:	f89c c001 	ldrb.w	ip, [ip, #1]
    2e0c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2e10:	2807      	cmp	r0, #7
    2e12:	d27b      	bcs.n	2f0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2e14:	e8df f000 	tbb	[pc, r0]
    2e18:	04040404 	.word	0x04040404
    2e1c:	006c6c6c 	.word	0x006c6c6c
    2e20:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2f94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2e24:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2e28:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2e2c:	bf04      	itt	eq
    2e2e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2e32:	f1b8 0f00 	cmpeq.w	r8, #0
    2e36:	d002      	beq.n	2e3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2e38:	2c02      	cmp	r4, #2
    2e3a:	d005      	beq.n	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2e3c:	e02c      	b.n	2e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2e3e:	f240 2151 	movw	r1, #593	; 0x251
    2e42:	206c      	movs	r0, #108	; 0x6c
    2e44:	f000 fd4e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e48:	f1ac 0804 	sub.w	r8, ip, #4
    2e4c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2e50:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2e54:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2e58:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2e5c:	2500      	movs	r5, #0
    2e5e:	2c01      	cmp	r4, #1
    2e60:	d002      	beq.n	2e68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2e62:	2c02      	cmp	r4, #2
    2e64:	d00b      	beq.n	2e7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2e66:	e014      	b.n	2e92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e68:	f1bc 0f04 	cmp.w	ip, #4
    2e6c:	bf24      	itt	cs
    2e6e:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e72:	f1b9 0f00 	cmpcs.w	r9, #0
    2e76:	bf08      	it	eq
    2e78:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2e7c:	e009      	b.n	2e92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e7e:	f1bc 0f04 	cmp.w	ip, #4
    2e82:	bf24      	itt	cs
    2e84:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e88:	f1b9 0f00 	cmpcs.w	r9, #0
    2e8c:	bf08      	it	eq
    2e8e:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2e92:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2e96:	d1e1      	bne.n	2e5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2e98:	4c3f      	ldr	r4, [pc, #252]	; (2f98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2e9a:	f100 0c10 	add.w	ip, r0, #16
    2e9e:	fa07 fc0c 	lsl.w	ip, r7, ip
    2ea2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2ea6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2eaa:	b1c2      	cbz	r2, 2ede <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2eac:	f04f 0840 	mov.w	r8, #64	; 0x40
    2eb0:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2eb4:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2eb8:	44a0      	add	r8, r4
    2eba:	f8c8 7000 	str.w	r7, [r8]
    2ebe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2ec2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2ec6:	eba1 0000 	sub.w	r0, r1, r0
    2eca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ece:	4282      	cmp	r2, r0
    2ed0:	bf98      	it	ls
    2ed2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2ed6:	bf28      	it	cs
    2ed8:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2edc:	d250      	bcs.n	2f80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2ede:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2ee2:	2b01      	cmp	r3, #1
    2ee4:	bf08      	it	eq
    2ee6:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2eea:	2001      	movs	r0, #1
    2eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ef0:	b134      	cbz	r4, 2f00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2ef2:	4584      	cmp	ip, r0
    2ef4:	d104      	bne.n	2f00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2ef6:	f44f 711d 	mov.w	r1, #628	; 0x274
    2efa:	206c      	movs	r0, #108	; 0x6c
    2efc:	f000 fcf2 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f00:	f1a0 0c04 	sub.w	ip, r0, #4
    2f04:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2f08:	2b01      	cmp	r3, #1
    2f0a:	e000      	b.n	2f0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2f0c:	e03b      	b.n	2f86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2f0e:	bf0c      	ite	eq
    2f10:	f04f 0801 	moveq.w	r8, #1
    2f14:	f04f 0800 	movne.w	r8, #0
    2f18:	2c03      	cmp	r4, #3
    2f1a:	d304      	bcc.n	2f26 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2f1c:	f240 114d 	movw	r1, #333	; 0x14d
    2f20:	206c      	movs	r0, #108	; 0x6c
    2f22:	f000 fcdf 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f26:	f8df c074 	ldr.w	ip, [pc, #116]	; 2f9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2f2a:	f104 0310 	add.w	r3, r4, #16
    2f2e:	fa07 f303 	lsl.w	r3, r7, r3
    2f32:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2f36:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2f3a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2f3e:	f84c 6004 	str.w	r6, [ip, r4]
    2f42:	1f00      	subs	r0, r0, #4
    2f44:	b2c0      	uxtb	r0, r0
    2f46:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2f4a:	b16a      	cbz	r2, 2f68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2f4c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2f50:	1b0c      	subs	r4, r1, r4
    2f52:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2f56:	42a2      	cmp	r2, r4
    2f58:	bf98      	it	ls
    2f5a:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2f5e:	bf24      	itt	cs
    2f60:	2100      	movcs	r1, #0
    2f62:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2f66:	d20b      	bcs.n	2f80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2f68:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f6c:	f1b8 0f00 	cmp.w	r8, #0
    2f70:	bf18      	it	ne
    2f72:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2f76:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2f7a:	2001      	movs	r0, #1
    2f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f80:	2000      	movs	r0, #0
    2f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f86:	f240 2179 	movw	r1, #633	; 0x279
    2f8a:	206c      	movs	r0, #108	; 0x6c
    2f8c:	f000 fcaa 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f90:	20000023 	.word	0x20000023
    2f94:	20000020 	.word	0x20000020
    2f98:	40008000 	.word	0x40008000
    2f9c:	4000b000 	.word	0x4000b000

00002fa0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2fa4:	2600      	movs	r6, #0
    2fa6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2faa:	f04f 0801 	mov.w	r8, #1
    2fae:	2807      	cmp	r0, #7
    2fb0:	d251      	bcs.n	3056 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2fb2:	e8df f000 	tbb	[pc, r0]
    2fb6:	0404      	.short	0x0404
    2fb8:	19190404 	.word	0x19190404
    2fbc:	0019      	.short	0x0019
    2fbe:	f100 0110 	add.w	r1, r0, #16
    2fc2:	fa08 f201 	lsl.w	r2, r8, r1
    2fc6:	4926      	ldr	r1, [pc, #152]	; (3060 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2fc8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fcc:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2fd0:	2200      	movs	r2, #0
    2fd2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2fd6:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2fda:	508e      	str	r6, [r1, r2]
    2fdc:	4921      	ldr	r1, [pc, #132]	; (3064 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2fde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2fe2:	9000      	str	r0, [sp, #0]
    2fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fe8:	4d1f      	ldr	r5, [pc, #124]	; (3068 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2fea:	1f01      	subs	r1, r0, #4
    2fec:	b2cc      	uxtb	r4, r1
    2fee:	7829      	ldrb	r1, [r5, #0]
    2ff0:	b179      	cbz	r1, 3012 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2ff2:	786a      	ldrb	r2, [r5, #1]
    2ff4:	4282      	cmp	r2, r0
    2ff6:	d10c      	bne.n	3012 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2ff8:	4a1c      	ldr	r2, [pc, #112]	; (306c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2ffa:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2ffe:	6010      	str	r0, [r2, #0]
    3000:	2901      	cmp	r1, #1
    3002:	bf08      	it	eq
    3004:	f7ff fd3c 	bleq	2a80 <MPSL_IRQ_TIMER0_Handler+0x100>
    3008:	702e      	strb	r6, [r5, #0]
    300a:	4919      	ldr	r1, [pc, #100]	; (3070 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    300c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3010:	60c8      	str	r0, [r1, #12]
    3012:	f104 0010 	add.w	r0, r4, #16
    3016:	fa08 f100 	lsl.w	r1, r8, r0
    301a:	4816      	ldr	r0, [pc, #88]	; (3074 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    301c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3020:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3024:	00a1      	lsls	r1, r4, #2
    3026:	4401      	add	r1, r0
    3028:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    302c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3030:	1a89      	subs	r1, r1, r2
    3032:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3036:	2902      	cmp	r1, #2
    3038:	d307      	bcc.n	304a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    303a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    303e:	2100      	movs	r1, #0
    3040:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3044:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3048:	5046      	str	r6, [r0, r1]
    304a:	480b      	ldr	r0, [pc, #44]	; (3078 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    304c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3050:	9000      	str	r0, [sp, #0]
    3052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3056:	f240 21f1 	movw	r1, #753	; 0x2f1
    305a:	206c      	movs	r0, #108	; 0x6c
    305c:	f000 fc42 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3060:	40008000 	.word	0x40008000
    3064:	40008140 	.word	0x40008140
    3068:	20000023 	.word	0x20000023
    306c:	4001f508 	.word	0x4001f508
    3070:	20000020 	.word	0x20000020
    3074:	4000b000 	.word	0x4000b000
    3078:	4000b140 	.word	0x4000b140

0000307c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    307c:	4920      	ldr	r1, [pc, #128]	; (3100 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    307e:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3082:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3086:	481f      	ldr	r0, [pc, #124]	; (3104 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3088:	1d0a      	adds	r2, r1, #4
    308a:	7803      	ldrb	r3, [r0, #0]
    308c:	2000      	movs	r0, #0
    308e:	b15b      	cbz	r3, 30a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3090:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3094:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3098:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    309c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    30a0:	4919      	ldr	r1, [pc, #100]	; (3108 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    30a2:	6809      	ldr	r1, [r1, #0]
    30a4:	b999      	cbnz	r1, 30ce <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    30a6:	e00c      	b.n	30c2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    30a8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    30ac:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    30b0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    30b4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    30b8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30bc:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    30c0:	e7ee      	b.n	30a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    30c2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    30c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    30ca:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    30ce:	490f      	ldr	r1, [pc, #60]	; (310c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    30d0:	f04f 32ff 	mov.w	r2, #4294967295
    30d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    30d8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    30dc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    30e0:	1d0a      	adds	r2, r1, #4
    30e2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30e6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    30ea:	1d12      	adds	r2, r2, #4
    30ec:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30f0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    30f4:	1d12      	adds	r2, r2, #4
    30f6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30fa:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    30fe:	4770      	bx	lr
    3100:	4000b000 	.word	0x4000b000
    3104:	20000023 	.word	0x20000023
    3108:	4000b148 	.word	0x4000b148
    310c:	40008000 	.word	0x40008000

00003110 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3110:	4808      	ldr	r0, [pc, #32]	; (3134 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3112:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3116:	2800      	cmp	r0, #0
    3118:	bfb8      	it	lt
    311a:	4770      	bxlt	lr
    311c:	f000 011f 	and.w	r1, r0, #31
    3120:	2201      	movs	r2, #1
    3122:	fa02 f101 	lsl.w	r1, r2, r1
    3126:	0940      	lsrs	r0, r0, #5
    3128:	0080      	lsls	r0, r0, #2
    312a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    312e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3132:	4770      	bx	lr
    3134:	20000020 	.word	0x20000020

00003138 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3138:	b510      	push	{r4, lr}
    313a:	2807      	cmp	r0, #7
    313c:	d20d      	bcs.n	315a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    313e:	e8df f000 	tbb	[pc, r0]
    3142:	0404      	.short	0x0404
    3144:	06060404 	.word	0x06060404
    3148:	0006      	.short	0x0006
    314a:	4906      	ldr	r1, [pc, #24]	; (3164 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    314c:	e002      	b.n	3154 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    314e:	1f00      	subs	r0, r0, #4
    3150:	4905      	ldr	r1, [pc, #20]	; (3168 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3152:	b2c0      	uxtb	r0, r0
    3154:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3158:	bd10      	pop	{r4, pc}
    315a:	f240 219d 	movw	r1, #669	; 0x29d
    315e:	206c      	movs	r0, #108	; 0x6c
    3160:	f000 fbc0 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3164:	40008140 	.word	0x40008140
    3168:	4000b140 	.word	0x4000b140

0000316c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    316c:	b510      	push	{r4, lr}
    316e:	2807      	cmp	r0, #7
    3170:	d20d      	bcs.n	318e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3172:	e8df f000 	tbb	[pc, r0]
    3176:	0404      	.short	0x0404
    3178:	06060404 	.word	0x06060404
    317c:	0006      	.short	0x0006
    317e:	4906      	ldr	r1, [pc, #24]	; (3198 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3180:	e002      	b.n	3188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3182:	1f00      	subs	r0, r0, #4
    3184:	4905      	ldr	r1, [pc, #20]	; (319c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3186:	b2c0      	uxtb	r0, r0
    3188:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    318c:	bd10      	pop	{r4, pc}
    318e:	f240 219d 	movw	r1, #669	; 0x29d
    3192:	206c      	movs	r0, #108	; 0x6c
    3194:	f000 fba6 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3198:	40008140 	.word	0x40008140
    319c:	4000b140 	.word	0x4000b140

000031a0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    31a0:	b510      	push	{r4, lr}
    31a2:	481c      	ldr	r0, [pc, #112]	; (3214 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    31a4:	2400      	movs	r4, #0
    31a6:	2104      	movs	r1, #4
    31a8:	7004      	strb	r4, [r0, #0]
    31aa:	1ec0      	subs	r0, r0, #3
    31ac:	7001      	strb	r1, [r0, #0]
    31ae:	0589      	lsls	r1, r1, #22
    31b0:	60c1      	str	r1, [r0, #12]
    31b2:	f7ff fc65 	bl	2a80 <MPSL_IRQ_TIMER0_Handler+0x100>
    31b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    31ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    31be:	f04f 0c01 	mov.w	ip, #1
    31c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    31c6:	f3bf 8f4f 	dsb	sy
    31ca:	f3bf 8f6f 	isb	sy
    31ce:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    31d2:	4811      	ldr	r0, [pc, #68]	; (3218 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    31d4:	f8c0 c004 	str.w	ip, [r0, #4]
    31d8:	f8c0 c008 	str.w	ip, [r0, #8]
    31dc:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    31e0:	2900      	cmp	r1, #0
    31e2:	d1fb      	bne.n	31dc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    31e4:	1e49      	subs	r1, r1, #1
    31e6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    31ea:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    31ee:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    31f2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    31f6:	4909      	ldr	r1, [pc, #36]	; (321c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    31f8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31fc:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3200:	1d09      	adds	r1, r1, #4
    3202:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3206:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    320a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    320e:	f8c0 c000 	str.w	ip, [r0]
    3212:	bd10      	pop	{r4, pc}
    3214:	20000023 	.word	0x20000023
    3218:	4000b000 	.word	0x4000b000
    321c:	4000b004 	.word	0x4000b004

00003220 <MPSL_IRQ_CLOCK_Handler>:
    3220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3224:	4c16      	ldr	r4, [pc, #88]	; (3280 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3226:	7a60      	ldrb	r0, [r4, #9]
    3228:	2800      	cmp	r0, #0
    322a:	d027      	beq.n	327c <MPSL_IRQ_CLOCK_Handler+0x5c>
    322c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3230:	058d      	lsls	r5, r1, #22
    3232:	4628      	mov	r0, r5
    3234:	f009 fb38 	bl	c8a8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3238:	4680      	mov	r8, r0
    323a:	f44f 7182 	mov.w	r1, #260	; 0x104
    323e:	4628      	mov	r0, r5
    3240:	f009 fb32 	bl	c8a8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3244:	2600      	movs	r6, #0
    3246:	4607      	mov	r7, r0
    3248:	f1b8 0f00 	cmp.w	r8, #0
    324c:	d009      	beq.n	3262 <MPSL_IRQ_CLOCK_Handler+0x42>
    324e:	2001      	movs	r0, #1
    3250:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3254:	7920      	ldrb	r0, [r4, #4]
    3256:	b120      	cbz	r0, 3262 <MPSL_IRQ_CLOCK_Handler+0x42>
    3258:	7126      	strb	r6, [r4, #4]
    325a:	69e0      	ldr	r0, [r4, #28]
    325c:	b108      	cbz	r0, 3262 <MPSL_IRQ_CLOCK_Handler+0x42>
    325e:	4780      	blx	r0
    3260:	61e6      	str	r6, [r4, #28]
    3262:	b137      	cbz	r7, 3272 <MPSL_IRQ_CLOCK_Handler+0x52>
    3264:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3268:	2002      	movs	r0, #2
    326a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    326e:	f000 fa6d 	bl	374c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3272:	4640      	mov	r0, r8
    3274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3278:	f000 b85a 	b.w	3330 <MPSL_IRQ_CLOCK_Handler+0x110>
    327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3280:	20000030 	.word	0x20000030
    3284:	b510      	push	{r4, lr}
    3286:	f009 fbb9 	bl	c9fc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    328a:	b930      	cbnz	r0, 329a <MPSL_IRQ_CLOCK_Handler+0x7a>
    328c:	f009 fbd7 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3290:	b918      	cbnz	r0, 329a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3292:	f009 fc0a 	bl	caaa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3296:	2800      	cmp	r0, #0
    3298:	d002      	beq.n	32a0 <MPSL_IRQ_CLOCK_Handler+0x80>
    329a:	4902      	ldr	r1, [pc, #8]	; (32a4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    329c:	2002      	movs	r0, #2
    329e:	6008      	str	r0, [r1, #0]
    32a0:	bd10      	pop	{r4, pc}
    32a2:	0000      	.short	0x0000
    32a4:	40000c34 	.word	0x40000c34
    32a8:	b570      	push	{r4, r5, r6, lr}
    32aa:	f000 f987 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32ae:	f000 faa1 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32b2:	4c09      	ldr	r4, [pc, #36]	; (32d8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    32b4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32b8:	b130      	cbz	r0, 32c8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    32ba:	f7ff ffe3 	bl	3284 <MPSL_IRQ_CLOCK_Handler+0x64>
    32be:	2001      	movs	r0, #1
    32c0:	6128      	str	r0, [r5, #16]
    32c2:	2004      	movs	r0, #4
    32c4:	72a0      	strb	r0, [r4, #10]
    32c6:	e004      	b.n	32d2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    32c8:	2003      	movs	r0, #3
    32ca:	72a0      	strb	r0, [r4, #10]
    32cc:	2001      	movs	r0, #1
    32ce:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32d2:	2000      	movs	r0, #0
    32d4:	71e0      	strb	r0, [r4, #7]
    32d6:	bd70      	pop	{r4, r5, r6, pc}
    32d8:	20000030 	.word	0x20000030
    32dc:	b570      	push	{r4, r5, r6, lr}
    32de:	4c13      	ldr	r4, [pc, #76]	; (332c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    32e0:	79a0      	ldrb	r0, [r4, #6]
    32e2:	b1f0      	cbz	r0, 3322 <MPSL_IRQ_CLOCK_Handler+0x102>
    32e4:	2801      	cmp	r0, #1
    32e6:	d003      	beq.n	32f0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    32e8:	79e1      	ldrb	r1, [r4, #7]
    32ea:	1e40      	subs	r0, r0, #1
    32ec:	4281      	cmp	r1, r0
    32ee:	da18      	bge.n	3322 <MPSL_IRQ_CLOCK_Handler+0x102>
    32f0:	f000 fa80 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32f4:	4605      	mov	r5, r0
    32f6:	f000 fb65 	bl	39c4 <mpsl_temperature_get>
    32fa:	79a1      	ldrb	r1, [r4, #6]
    32fc:	2901      	cmp	r1, #1
    32fe:	d902      	bls.n	3306 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3300:	79e1      	ldrb	r1, [r4, #7]
    3302:	1c49      	adds	r1, r1, #1
    3304:	71e1      	strb	r1, [r4, #7]
    3306:	b10d      	cbz	r5, 330c <MPSL_IRQ_CLOCK_Handler+0xec>
    3308:	6961      	ldr	r1, [r4, #20]
    330a:	e000      	b.n	330e <MPSL_IRQ_CLOCK_Handler+0xee>
    330c:	6921      	ldr	r1, [r4, #16]
    330e:	1a41      	subs	r1, r0, r1
    3310:	2902      	cmp	r1, #2
    3312:	da02      	bge.n	331a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3314:	f111 0f02 	cmn.w	r1, #2
    3318:	dc07      	bgt.n	332a <MPSL_IRQ_CLOCK_Handler+0x10a>
    331a:	b10d      	cbz	r5, 3320 <MPSL_IRQ_CLOCK_Handler+0x100>
    331c:	6160      	str	r0, [r4, #20]
    331e:	e000      	b.n	3322 <MPSL_IRQ_CLOCK_Handler+0x102>
    3320:	6120      	str	r0, [r4, #16]
    3322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3326:	f7ff bfbf 	b.w	32a8 <MPSL_IRQ_CLOCK_Handler+0x88>
    332a:	bd70      	pop	{r4, r5, r6, pc}
    332c:	20000030 	.word	0x20000030
    3330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3334:	4606      	mov	r6, r0
    3336:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    333a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    333e:	4628      	mov	r0, r5
    3340:	f009 fab2 	bl	c8a8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3344:	4680      	mov	r8, r0
    3346:	f44f 7188 	mov.w	r1, #272	; 0x110
    334a:	4628      	mov	r0, r5
    334c:	f009 faac 	bl	c8a8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3350:	4c27      	ldr	r4, [pc, #156]	; (33f0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3352:	4682      	mov	sl, r0
    3354:	7827      	ldrb	r7, [r4, #0]
    3356:	f104 0008 	add.w	r0, r4, #8
    335a:	f009 fb19 	bl	c990 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    335e:	b110      	cbz	r0, 3366 <MPSL_IRQ_CLOCK_Handler+0x146>
    3360:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3364:	e016      	b.n	3394 <MPSL_IRQ_CLOCK_Handler+0x174>
    3366:	f04f 0901 	mov.w	r9, #1
    336a:	b146      	cbz	r6, 337e <MPSL_IRQ_CLOCK_Handler+0x15e>
    336c:	7aa0      	ldrb	r0, [r4, #10]
    336e:	2803      	cmp	r0, #3
    3370:	d105      	bne.n	337e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3372:	2004      	movs	r0, #4
    3374:	72a0      	strb	r0, [r4, #10]
    3376:	f7ff ff85 	bl	3284 <MPSL_IRQ_CLOCK_Handler+0x64>
    337a:	f8c5 9010 	str.w	r9, [r5, #16]
    337e:	2600      	movs	r6, #0
    3380:	f1b8 0f00 	cmp.w	r8, #0
    3384:	d018      	beq.n	33b8 <MPSL_IRQ_CLOCK_Handler+0x198>
    3386:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    338a:	7aa0      	ldrb	r0, [r4, #10]
    338c:	2804      	cmp	r0, #4
    338e:	d004      	beq.n	339a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3390:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3394:	206d      	movs	r0, #109	; 0x6d
    3396:	f000 faa5 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    339a:	f009 fb2f 	bl	c9fc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    339e:	b928      	cbnz	r0, 33ac <MPSL_IRQ_CLOCK_Handler+0x18c>
    33a0:	f009 fb4d 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33a4:	b910      	cbnz	r0, 33ac <MPSL_IRQ_CLOCK_Handler+0x18c>
    33a6:	f009 fb80 	bl	caaa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    33aa:	b108      	cbz	r0, 33b0 <MPSL_IRQ_CLOCK_Handler+0x190>
    33ac:	4811      	ldr	r0, [pc, #68]	; (33f4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    33ae:	6006      	str	r6, [r0, #0]
    33b0:	2002      	movs	r0, #2
    33b2:	72a0      	strb	r0, [r4, #10]
    33b4:	f000 f8e6 	bl	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33b8:	f1ba 0f00 	cmp.w	sl, #0
    33bc:	d008      	beq.n	33d0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    33be:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    33c2:	7aa0      	ldrb	r0, [r4, #10]
    33c4:	2802      	cmp	r0, #2
    33c6:	d101      	bne.n	33cc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    33c8:	f7ff ff88 	bl	32dc <MPSL_IRQ_CLOCK_Handler+0xbc>
    33cc:	f8c5 9014 	str.w	r9, [r5, #20]
    33d0:	b13f      	cbz	r7, 33e2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    33d2:	7026      	strb	r6, [r4, #0]
    33d4:	7aa0      	ldrb	r0, [r4, #10]
    33d6:	2802      	cmp	r0, #2
    33d8:	d101      	bne.n	33de <MPSL_IRQ_CLOCK_Handler+0x1be>
    33da:	f7ff ff65 	bl	32a8 <MPSL_IRQ_CLOCK_Handler+0x88>
    33de:	f000 f8d1 	bl	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33e6:	4802      	ldr	r0, [pc, #8]	; (33f0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    33e8:	3008      	adds	r0, #8
    33ea:	f009 bae8 	b.w	c9be <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    33ee:	0000      	.short	0x0000
    33f0:	20000030 	.word	0x20000030
    33f4:	40000c34 	.word	0x40000c34
    33f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33fc:	4c5c      	ldr	r4, [pc, #368]	; (3570 <MPSL_IRQ_CLOCK_Handler+0x350>)
    33fe:	f04f 0800 	mov.w	r8, #0
    3402:	4606      	mov	r6, r0
    3404:	f8c4 8018 	str.w	r8, [r4, #24]
    3408:	7843      	ldrb	r3, [r0, #1]
    340a:	7882      	ldrb	r2, [r0, #2]
    340c:	7800      	ldrb	r0, [r0, #0]
    340e:	72e0      	strb	r0, [r4, #11]
    3410:	7163      	strb	r3, [r4, #5]
    3412:	2701      	movs	r7, #1
    3414:	71a2      	strb	r2, [r4, #6]
    3416:	07bd      	lsls	r5, r7, #30
    3418:	f884 8007 	strb.w	r8, [r4, #7]
    341c:	2805      	cmp	r0, #5
    341e:	d224      	bcs.n	346a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3420:	e8df f000 	tbb	[pc, r0]
    3424:	1f05030f 	.word	0x1f05030f
    3428:	0021      	.short	0x0021
    342a:	61a7      	str	r7, [r4, #24]
    342c:	e009      	b.n	3442 <MPSL_IRQ_CLOCK_Handler+0x222>
    342e:	f000 f8c5 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3432:	2101      	movs	r1, #1
    3434:	4628      	mov	r0, r5
    3436:	f009 fa3c 	bl	c8b2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    343a:	2800      	cmp	r0, #0
    343c:	d0f9      	beq.n	3432 <MPSL_IRQ_CLOCK_Handler+0x212>
    343e:	2002      	movs	r0, #2
    3440:	61a0      	str	r0, [r4, #24]
    3442:	f009 fa62 	bl	c90a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3446:	b1b0      	cbz	r0, 3476 <MPSL_IRQ_CLOCK_Handler+0x256>
    3448:	f000 f9ee 	bl	3828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    344c:	7e21      	ldrb	r1, [r4, #24]
    344e:	f001 0103 	and.w	r1, r1, #3
    3452:	4288      	cmp	r0, r1
    3454:	d10f      	bne.n	3476 <MPSL_IRQ_CLOCK_Handler+0x256>
    3456:	79b0      	ldrb	r0, [r6, #6]
    3458:	b150      	cbz	r0, 3470 <MPSL_IRQ_CLOCK_Handler+0x250>
    345a:	2002      	movs	r0, #2
    345c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3460:	e06a      	b.n	3538 <MPSL_IRQ_CLOCK_Handler+0x318>
    3462:	4844      	ldr	r0, [pc, #272]	; (3574 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3464:	e7ec      	b.n	3440 <MPSL_IRQ_CLOCK_Handler+0x220>
    3466:	4844      	ldr	r0, [pc, #272]	; (3578 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3468:	e7ea      	b.n	3440 <MPSL_IRQ_CLOCK_Handler+0x220>
    346a:	f240 312d 	movw	r1, #813	; 0x32d
    346e:	e049      	b.n	3504 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3470:	f000 f9ae 	bl	37d0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3474:	e060      	b.n	3538 <MPSL_IRQ_CLOCK_Handler+0x318>
    3476:	60ef      	str	r7, [r5, #12]
    3478:	f44f 7a82 	mov.w	sl, #260	; 0x104
    347c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3480:	69a0      	ldr	r0, [r4, #24]
    3482:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3486:	f009 faa5 	bl	c9d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    348a:	b940      	cbnz	r0, 349e <MPSL_IRQ_CLOCK_Handler+0x27e>
    348c:	f009 faac 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3490:	b928      	cbnz	r0, 349e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3492:	f009 fac0 	bl	ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3496:	b910      	cbnz	r0, 349e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3498:	f009 fad1 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    349c:	b138      	cbz	r0, 34ae <MPSL_IRQ_CLOCK_Handler+0x28e>
    349e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    34a2:	4836      	ldr	r0, [pc, #216]	; (357c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    34a4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    34a8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    34ac:	6001      	str	r1, [r0, #0]
    34ae:	f009 fa91 	bl	c9d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    34b2:	b940      	cbnz	r0, 34c6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34b4:	f009 fa98 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    34b8:	b928      	cbnz	r0, 34c6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34ba:	f009 faac 	bl	ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    34be:	b910      	cbnz	r0, 34c6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34c0:	f009 fabd 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34c4:	b110      	cbz	r0, 34cc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    34c6:	482d      	ldr	r0, [pc, #180]	; (357c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    34c8:	3010      	adds	r0, #16
    34ca:	6007      	str	r7, [r0, #0]
    34cc:	60af      	str	r7, [r5, #8]
    34ce:	2002      	movs	r0, #2
    34d0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    34d4:	79b0      	ldrb	r0, [r6, #6]
    34d6:	bb78      	cbnz	r0, 3538 <MPSL_IRQ_CLOCK_Handler+0x318>
    34d8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    34dc:	f010 0f02 	tst.w	r0, #2
    34e0:	d00e      	beq.n	3500 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    34e2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3580 <MPSL_IRQ_CLOCK_Handler+0x360>
    34e6:	f8d9 1000 	ldr.w	r1, [r9]
    34ea:	43c9      	mvns	r1, r1
    34ec:	f341 1700 	sbfx	r7, r1, #4, #1
    34f0:	f8d9 1000 	ldr.w	r1, [r9]
    34f4:	f041 0110 	orr.w	r1, r1, #16
    34f8:	f8c9 1000 	str.w	r1, [r9]
    34fc:	1c7f      	adds	r7, r7, #1
    34fe:	e007      	b.n	3510 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3500:	f240 21ee 	movw	r1, #750	; 0x2ee
    3504:	206d      	movs	r0, #109	; 0x6d
    3506:	f000 f9ed 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    350a:	bf00      	nop
    350c:	f000 fb10 	bl	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3510:	4651      	mov	r1, sl
    3512:	4628      	mov	r0, r5
    3514:	f009 f9c8 	bl	c8a8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3518:	2800      	cmp	r0, #0
    351a:	d0f7      	beq.n	350c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    351c:	f000 f958 	bl	37d0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3520:	b92f      	cbnz	r7, 352e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3522:	f8d9 1000 	ldr.w	r1, [r9]
    3526:	f021 0110 	bic.w	r1, r1, #16
    352a:	f8c9 1000 	str.w	r1, [r9]
    352e:	2002      	movs	r0, #2
    3530:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3534:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3538:	79a0      	ldrb	r0, [r4, #6]
    353a:	b170      	cbz	r0, 355a <MPSL_IRQ_CLOCK_Handler+0x33a>
    353c:	7830      	ldrb	r0, [r6, #0]
    353e:	b960      	cbnz	r0, 355a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3540:	f000 f958 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3544:	4606      	mov	r6, r0
    3546:	f000 fa3d 	bl	39c4 <mpsl_temperature_get>
    354a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    354e:	b116      	cbz	r6, 3556 <MPSL_IRQ_CLOCK_Handler+0x336>
    3550:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3554:	e001      	b.n	355a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3556:	e9c4 0204 	strd	r0, r2, [r4, #16]
    355a:	2101      	movs	r1, #1
    355c:	4628      	mov	r0, r5
    355e:	f009 f9a8 	bl	c8b2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3562:	b108      	cbz	r0, 3568 <MPSL_IRQ_CLOCK_Handler+0x348>
    3564:	f000 f940 	bl	37e8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3568:	f884 800a 	strb.w	r8, [r4, #10]
    356c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3570:	20000030 	.word	0x20000030
    3574:	00020001 	.word	0x00020001
    3578:	00030001 	.word	0x00030001
    357c:	4000053c 	.word	0x4000053c
    3580:	e000ed10 	.word	0xe000ed10

00003584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3584:	b510      	push	{r4, lr}
    3586:	f3ef 8410 	mrs	r4, PRIMASK
    358a:	b672      	cpsid	i
    358c:	480a      	ldr	r0, [pc, #40]	; (35b8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    358e:	7841      	ldrb	r1, [r0, #1]
    3590:	b129      	cbz	r1, 359e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3592:	7841      	ldrb	r1, [r0, #1]
    3594:	1e49      	subs	r1, r1, #1
    3596:	7041      	strb	r1, [r0, #1]
    3598:	7841      	ldrb	r1, [r0, #1]
    359a:	b129      	cbz	r1, 35a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    359c:	e008      	b.n	35b0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    359e:	f240 110d 	movw	r1, #269	; 0x10d
    35a2:	206d      	movs	r0, #109	; 0x6d
    35a4:	f000 f99e 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35a8:	7880      	ldrb	r0, [r0, #2]
    35aa:	b908      	cbnz	r0, 35b0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    35ac:	f000 f930 	bl	3810 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35b0:	2c00      	cmp	r4, #0
    35b2:	d100      	bne.n	35b6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    35b4:	b662      	cpsie	i
    35b6:	bd10      	pop	{r4, pc}
    35b8:	20000030 	.word	0x20000030

000035bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    35bc:	b510      	push	{r4, lr}
    35be:	f3ef 8410 	mrs	r4, PRIMASK
    35c2:	b672      	cpsid	i
    35c4:	4806      	ldr	r0, [pc, #24]	; (35e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    35c6:	7841      	ldrb	r1, [r0, #1]
    35c8:	1c49      	adds	r1, r1, #1
    35ca:	7041      	strb	r1, [r0, #1]
    35cc:	7840      	ldrb	r0, [r0, #1]
    35ce:	2801      	cmp	r0, #1
    35d0:	d101      	bne.n	35d6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    35d2:	f009 f985 	bl	c8e0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    35d6:	2c00      	cmp	r4, #0
    35d8:	d100      	bne.n	35dc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    35da:	b662      	cpsie	i
    35dc:	bd10      	pop	{r4, pc}
    35de:	0000      	.short	0x0000
    35e0:	20000030 	.word	0x20000030

000035e4 <mpsl_clock_hfclk_release>:
    35e4:	4805      	ldr	r0, [pc, #20]	; (35fc <mpsl_clock_hfclk_release+0x18>)
    35e6:	b510      	push	{r4, lr}
    35e8:	78c1      	ldrb	r1, [r0, #3]
    35ea:	b121      	cbz	r1, 35f6 <mpsl_clock_hfclk_release+0x12>
    35ec:	2100      	movs	r1, #0
    35ee:	7101      	strb	r1, [r0, #4]
    35f0:	70c1      	strb	r1, [r0, #3]
    35f2:	f7ff ffc7 	bl	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    35f6:	2000      	movs	r0, #0
    35f8:	bd10      	pop	{r4, pc}
    35fa:	0000      	.short	0x0000
    35fc:	20000030 	.word	0x20000030

00003600 <mpsl_clock_hfclk_request>:
    3600:	b570      	push	{r4, r5, r6, lr}
    3602:	4c0c      	ldr	r4, [pc, #48]	; (3634 <mpsl_clock_hfclk_request+0x34>)
    3604:	78e1      	ldrb	r1, [r4, #3]
    3606:	b961      	cbnz	r1, 3622 <mpsl_clock_hfclk_request+0x22>
    3608:	2501      	movs	r5, #1
    360a:	70e5      	strb	r5, [r4, #3]
    360c:	61e0      	str	r0, [r4, #28]
    360e:	f7ff ffd5 	bl	35bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3612:	f000 f8ef 	bl	37f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3616:	b130      	cbz	r0, 3626 <mpsl_clock_hfclk_request+0x26>
    3618:	69e0      	ldr	r0, [r4, #28]
    361a:	b110      	cbz	r0, 3622 <mpsl_clock_hfclk_request+0x22>
    361c:	4780      	blx	r0
    361e:	2000      	movs	r0, #0
    3620:	61e0      	str	r0, [r4, #28]
    3622:	2000      	movs	r0, #0
    3624:	bd70      	pop	{r4, r5, r6, pc}
    3626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    362a:	7125      	strb	r5, [r4, #4]
    362c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3630:	e7f7      	b.n	3622 <mpsl_clock_hfclk_request+0x22>
    3632:	0000      	.short	0x0000
    3634:	20000030 	.word	0x20000030

00003638 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3638:	f3ef 8010 	mrs	r0, PRIMASK
    363c:	b672      	cpsid	i
    363e:	4904      	ldr	r1, [pc, #16]	; (3650 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3640:	788a      	ldrb	r2, [r1, #2]
    3642:	1c52      	adds	r2, r2, #1
    3644:	708a      	strb	r2, [r1, #2]
    3646:	2800      	cmp	r0, #0
    3648:	d100      	bne.n	364c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    364a:	b662      	cpsie	i
    364c:	4770      	bx	lr
    364e:	0000      	.short	0x0000
    3650:	20000030 	.word	0x20000030

00003654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3654:	b510      	push	{r4, lr}
    3656:	f3ef 8410 	mrs	r4, PRIMASK
    365a:	b672      	cpsid	i
    365c:	480a      	ldr	r0, [pc, #40]	; (3688 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    365e:	7881      	ldrb	r1, [r0, #2]
    3660:	b129      	cbz	r1, 366e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3662:	7881      	ldrb	r1, [r0, #2]
    3664:	1e49      	subs	r1, r1, #1
    3666:	7081      	strb	r1, [r0, #2]
    3668:	7841      	ldrb	r1, [r0, #1]
    366a:	b129      	cbz	r1, 3678 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    366c:	e008      	b.n	3680 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    366e:	f240 1125 	movw	r1, #293	; 0x125
    3672:	206d      	movs	r0, #109	; 0x6d
    3674:	f000 f936 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3678:	7880      	ldrb	r0, [r0, #2]
    367a:	b908      	cbnz	r0, 3680 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    367c:	f000 f8c8 	bl	3810 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3680:	2c00      	cmp	r4, #0
    3682:	d100      	bne.n	3686 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3684:	b662      	cpsie	i
    3686:	bd10      	pop	{r4, pc}
    3688:	20000030 	.word	0x20000030

0000368c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3690:	0004      	movs	r4, r0
    3692:	f06f 0015 	mvn.w	r0, #21
    3696:	d03c      	beq.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3698:	7821      	ldrb	r1, [r4, #0]
    369a:	2904      	cmp	r1, #4
    369c:	d839      	bhi.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    369e:	2900      	cmp	r1, #0
    36a0:	7861      	ldrb	r1, [r4, #1]
    36a2:	d038      	beq.n	3716 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    36a4:	2900      	cmp	r1, #0
    36a6:	d134      	bne.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36a8:	78a1      	ldrb	r1, [r4, #2]
    36aa:	2900      	cmp	r1, #0
    36ac:	d131      	bne.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ae:	2000      	movs	r0, #0
    36b0:	f009 f8c5 	bl	c83e <MPSL_IRQ_RADIO_Handler+0x1e>
    36b4:	2000      	movs	r0, #0
    36b6:	f009 f8b5 	bl	c824 <MPSL_IRQ_RADIO_Handler+0x4>
    36ba:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    36be:	f04f 31ff 	mov.w	r1, #4294967295
    36c2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    36c6:	2600      	movs	r6, #0
    36c8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    36cc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    36d0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    36d4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    36d8:	4f14      	ldr	r7, [pc, #80]	; (372c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    36da:	707e      	strb	r6, [r7, #1]
    36dc:	88a0      	ldrh	r0, [r4, #4]
    36de:	81b8      	strh	r0, [r7, #12]
    36e0:	f009 f8f5 	bl	c8ce <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    36e4:	2501      	movs	r5, #1
    36e6:	b108      	cbz	r0, 36ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    36e8:	70fd      	strb	r5, [r7, #3]
    36ea:	707d      	strb	r5, [r7, #1]
    36ec:	2101      	movs	r1, #1
    36ee:	4640      	mov	r0, r8
    36f0:	f009 f8df 	bl	c8b2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    36f4:	b108      	cbz	r0, 36fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    36f6:	f000 f877 	bl	37e8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    36fa:	4620      	mov	r0, r4
    36fc:	f7ff fe7c 	bl	33f8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3700:	727d      	strb	r5, [r7, #9]
    3702:	2000      	movs	r0, #0
    3704:	f009 f88e 	bl	c824 <MPSL_IRQ_RADIO_Handler+0x4>
    3708:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    370c:	4630      	mov	r0, r6
    370e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3716:	2900      	cmp	r1, #0
    3718:	d0fb      	beq.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    371a:	2920      	cmp	r1, #32
    371c:	d8f9      	bhi.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    371e:	78a1      	ldrb	r1, [r4, #2]
    3720:	2921      	cmp	r1, #33	; 0x21
    3722:	d8f6      	bhi.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3724:	2901      	cmp	r1, #1
    3726:	d1c2      	bne.n	36ae <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3728:	e7f3      	b.n	3712 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    372a:	0000      	.short	0x0000
    372c:	20000030 	.word	0x20000030

00003730 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3730:	4801      	ldr	r0, [pc, #4]	; (3738 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3732:	8980      	ldrh	r0, [r0, #12]
    3734:	4770      	bx	lr
    3736:	0000      	.short	0x0000
    3738:	20000030 	.word	0x20000030

0000373c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    373c:	4802      	ldr	r0, [pc, #8]	; (3748 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    373e:	7a80      	ldrb	r0, [r0, #10]
    3740:	2800      	cmp	r0, #0
    3742:	d000      	beq.n	3746 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3744:	2001      	movs	r0, #1
    3746:	4770      	bx	lr
    3748:	20000030 	.word	0x20000030

0000374c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374e:	4d1f      	ldr	r5, [pc, #124]	; (37cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3750:	7ae8      	ldrb	r0, [r5, #11]
    3752:	2800      	cmp	r0, #0
    3754:	d10f      	bne.n	3776 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3756:	7e28      	ldrb	r0, [r5, #24]
    3758:	f000 0003 	and.w	r0, r0, #3
    375c:	f009 f8c5 	bl	c8ea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3760:	2800      	cmp	r0, #0
    3762:	d008      	beq.n	3776 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3764:	f3ef 8110 	mrs	r1, PRIMASK
    3768:	b672      	cpsid	i
    376a:	f7ff ffe7 	bl	373c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    376e:	b118      	cbz	r0, 3778 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3770:	2900      	cmp	r1, #0
    3772:	d100      	bne.n	3776 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3774:	b662      	cpsie	i
    3776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3778:	2601      	movs	r6, #1
    377a:	72ae      	strb	r6, [r5, #10]
    377c:	b901      	cbnz	r1, 3780 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    377e:	b662      	cpsie	i
    3780:	2018      	movs	r0, #24
    3782:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3786:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    378a:	61a6      	str	r6, [r4, #24]
    378c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3790:	f8ad 0000 	strh.w	r0, [sp]
    3794:	f8bd 0000 	ldrh.w	r0, [sp]
    3798:	1e41      	subs	r1, r0, #1
    379a:	f8ad 1000 	strh.w	r1, [sp]
    379e:	d2f9      	bcs.n	3794 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    37a0:	2700      	movs	r7, #0
    37a2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    37a6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    37aa:	4808      	ldr	r0, [pc, #32]	; (37cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    37ac:	3008      	adds	r0, #8
    37ae:	f009 f902 	bl	c9b6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    37b2:	702f      	strb	r7, [r5, #0]
    37b4:	f7ff fd78 	bl	32a8 <MPSL_IRQ_CLOCK_Handler+0x88>
    37b8:	6166      	str	r6, [r4, #20]
    37ba:	7968      	ldrb	r0, [r5, #5]
    37bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    37c0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    37c4:	2018      	movs	r0, #24
    37c6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37cc:	20000030 	.word	0x20000030

000037d0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37d0:	b510      	push	{r4, lr}
    37d2:	4c04      	ldr	r4, [pc, #16]	; (37e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37d4:	7e20      	ldrb	r0, [r4, #24]
    37d6:	f000 0003 	and.w	r0, r0, #3
    37da:	f009 f886 	bl	c8ea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37de:	2800      	cmp	r0, #0
    37e0:	d0f8      	beq.n	37d4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37e2:	bd10      	pop	{r4, pc}
    37e4:	20000030 	.word	0x20000030

000037e8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    37e8:	4901      	ldr	r1, [pc, #4]	; (37f0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    37ea:	2001      	movs	r0, #1
    37ec:	7008      	strb	r0, [r1, #0]
    37ee:	4770      	bx	lr
    37f0:	20000288 	.word	0x20000288

000037f4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    37f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    37f8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    37fc:	b918      	cbnz	r0, 3806 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    37fe:	4803      	ldr	r0, [pc, #12]	; (380c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3800:	7800      	ldrb	r0, [r0, #0]
    3802:	2800      	cmp	r0, #0
    3804:	d000      	beq.n	3808 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3806:	2001      	movs	r0, #1
    3808:	4770      	bx	lr
    380a:	0000      	.short	0x0000
    380c:	20000288 	.word	0x20000288

00003810 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3810:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3814:	2101      	movs	r1, #1
    3816:	6041      	str	r1, [r0, #4]
    3818:	2100      	movs	r1, #0
    381a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    381e:	4801      	ldr	r0, [pc, #4]	; (3824 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3820:	7001      	strb	r1, [r0, #0]
    3822:	4770      	bx	lr
    3824:	20000288 	.word	0x20000288

00003828 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3828:	4802      	ldr	r0, [pc, #8]	; (3834 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    382a:	6800      	ldr	r0, [r0, #0]
    382c:	f000 0003 	and.w	r0, r0, #3
    3830:	4770      	bx	lr
    3832:	0000      	.short	0x0000
    3834:	4000041c 	.word	0x4000041c
    3838:	b510      	push	{r4, lr}
    383a:	b131      	cbz	r1, 384a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    383c:	2901      	cmp	r1, #1
    383e:	d007      	beq.n	3850 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3840:	f240 3102 	movw	r1, #770	; 0x302
    3844:	a005      	add	r0, pc, #20	; (adr r0, 385c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3846:	f000 f821 	bl	388c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    384a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    384e:	e001      	b.n	3854 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3850:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3854:	f000 0001 	and.w	r0, r0, #1
    3858:	bd10      	pop	{r4, pc}
    385a:	0000      	.short	0x0000
    385c:	5f66726e 	.word	0x5f66726e
    3860:	636f6c63 	.word	0x636f6c63
    3864:	00682e6b 	.word	0x00682e6b
    3868:	f3bf 8f4f 	dsb	sy
    386c:	4805      	ldr	r0, [pc, #20]	; (3884 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    386e:	6801      	ldr	r1, [r0, #0]
    3870:	4a05      	ldr	r2, [pc, #20]	; (3888 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3872:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3876:	4311      	orrs	r1, r2
    3878:	6001      	str	r1, [r0, #0]
    387a:	f3bf 8f4f 	dsb	sy
    387e:	bf00      	nop
    3880:	e7fd      	b.n	387e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3882:	0000      	.short	0x0000
    3884:	e000ed0c 	.word	0xe000ed0c
    3888:	05fa0004 	.word	0x05fa0004

0000388c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    388c:	b672      	cpsid	i
    388e:	4a03      	ldr	r2, [pc, #12]	; (389c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    3890:	6852      	ldr	r2, [r2, #4]
    3892:	b102      	cbz	r2, 3896 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    3894:	4790      	blx	r2
    3896:	f7ff ffe7 	bl	3868 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    389a:	0000      	.short	0x0000
    389c:	20000050 	.word	0x20000050
    38a0:	4806      	ldr	r0, [pc, #24]	; (38bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    38a2:	b510      	push	{r4, lr}
    38a4:	2100      	movs	r1, #0
    38a6:	6001      	str	r1, [r0, #0]
    38a8:	2101      	movs	r1, #1
    38aa:	6001      	str	r1, [r0, #0]
    38ac:	4608      	mov	r0, r1
    38ae:	f009 f843 	bl	c938 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38b6:	2001      	movs	r0, #1
    38b8:	f009 b831 	b.w	c91e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38bc:	40001ffc 	.word	0x40001ffc
    38c0:	4807      	ldr	r0, [pc, #28]	; (38e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    38c2:	b510      	push	{r4, lr}
    38c4:	2101      	movs	r1, #1
    38c6:	6041      	str	r1, [r0, #4]
    38c8:	1e89      	subs	r1, r1, #2
    38ca:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38ce:	200c      	movs	r0, #12
    38d0:	f009 f832 	bl	c938 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38d8:	200c      	movs	r0, #12
    38da:	f009 b820 	b.w	c91e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38de:	0000      	.short	0x0000
    38e0:	4000c000 	.word	0x4000c000

000038e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    38e4:	b50e      	push	{r1, r2, r3, lr}
    38e6:	b672      	cpsid	i
    38e8:	4a0f      	ldr	r2, [pc, #60]	; (3928 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    38ea:	6855      	ldr	r5, [r2, #4]
    38ec:	b1d5      	cbz	r5, 3924 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    38ee:	2200      	movs	r2, #0
    38f0:	4603      	mov	r3, r0
    38f2:	466e      	mov	r6, sp
    38f4:	240a      	movs	r4, #10
    38f6:	e003      	b.n	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    38f8:	fbb0 f0f4 	udiv	r0, r0, r4
    38fc:	1c52      	adds	r2, r2, #1
    38fe:	b2d2      	uxtb	r2, r2
    3900:	2800      	cmp	r0, #0
    3902:	d1f9      	bne.n	38f8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3904:	54b0      	strb	r0, [r6, r2]
    3906:	e009      	b.n	391c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3908:	fbb3 f0f4 	udiv	r0, r3, r4
    390c:	fb04 3010 	mls	r0, r4, r0, r3
    3910:	fbb3 f3f4 	udiv	r3, r3, r4
    3914:	1e52      	subs	r2, r2, #1
    3916:	b2d2      	uxtb	r2, r2
    3918:	3030      	adds	r0, #48	; 0x30
    391a:	54b0      	strb	r0, [r6, r2]
    391c:	2a00      	cmp	r2, #0
    391e:	d1f3      	bne.n	3908 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3920:	4630      	mov	r0, r6
    3922:	47a8      	blx	r5
    3924:	f7ff ffa0 	bl	3868 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3928:	20000050 	.word	0x20000050

0000392c <mpsl_init>:
    392c:	b570      	push	{r4, r5, r6, lr}
    392e:	4c17      	ldr	r4, [pc, #92]	; (398c <mpsl_init+0x60>)
    3930:	4606      	mov	r6, r0
    3932:	460d      	mov	r5, r1
    3934:	7860      	ldrb	r0, [r4, #1]
    3936:	b110      	cbz	r0, 393e <mpsl_init+0x12>
    3938:	f04f 30ff 	mov.w	r0, #4294967295
    393c:	bd70      	pop	{r4, r5, r6, pc}
    393e:	b906      	cbnz	r6, 3942 <mpsl_init+0x16>
    3940:	4e13      	ldr	r6, [pc, #76]	; (3990 <mpsl_init+0x64>)
    3942:	6062      	str	r2, [r4, #4]
    3944:	7025      	strb	r5, [r4, #0]
    3946:	f7ff ffab 	bl	38a0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    394a:	f7ff ffb9 	bl	38c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    394e:	4630      	mov	r0, r6
    3950:	f7ff fe9c 	bl	368c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3954:	0006      	movs	r6, r0
    3956:	d1f1      	bne.n	393c <mpsl_init+0x10>
    3958:	f7fe fee6 	bl	2728 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    395c:	f7ff fef6 	bl	374c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3960:	f008 feb8 	bl	c6d4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3964:	4628      	mov	r0, r5
    3966:	f008 ffda 	bl	c91e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    396a:	2001      	movs	r0, #1
    396c:	2d00      	cmp	r5, #0
    396e:	db09      	blt.n	3984 <mpsl_init+0x58>
    3970:	f005 011f 	and.w	r1, r5, #31
    3974:	fa00 f101 	lsl.w	r1, r0, r1
    3978:	096a      	lsrs	r2, r5, #5
    397a:	0092      	lsls	r2, r2, #2
    397c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3980:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3984:	7060      	strb	r0, [r4, #1]
    3986:	4630      	mov	r0, r6
    3988:	bd70      	pop	{r4, r5, r6, pc}
    398a:	0000      	.short	0x0000
    398c:	20000050 	.word	0x20000050
    3990:	0000c95a 	.word	0x0000c95a

00003994 <mpsl_is_initialized>:
    3994:	4801      	ldr	r0, [pc, #4]	; (399c <mpsl_is_initialized+0x8>)
    3996:	7840      	ldrb	r0, [r0, #1]
    3998:	4770      	bx	lr
    399a:	0000      	.short	0x0000
    399c:	20000050 	.word	0x20000050

000039a0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    39a0:	4807      	ldr	r0, [pc, #28]	; (39c0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    39a2:	f990 0000 	ldrsb.w	r0, [r0]
    39a6:	2800      	cmp	r0, #0
    39a8:	db09      	blt.n	39be <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    39aa:	f000 021f 	and.w	r2, r0, #31
    39ae:	2101      	movs	r1, #1
    39b0:	4091      	lsls	r1, r2
    39b2:	0940      	lsrs	r0, r0, #5
    39b4:	0080      	lsls	r0, r0, #2
    39b6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    39ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    39be:	4770      	bx	lr
    39c0:	20000050 	.word	0x20000050

000039c4 <mpsl_temperature_get>:
    39c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39c8:	2601      	movs	r6, #1
    39ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39ce:	0331      	lsls	r1, r6, #12
    39d0:	f04f 0800 	mov.w	r8, #0
    39d4:	4640      	mov	r0, r8
    39d6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    39da:	f3bf 8f4f 	dsb	sy
    39de:	f3bf 8f6f 	isb	sy
    39e2:	4c16      	ldr	r4, [pc, #88]	; (3a3c <mpsl_temperature_get+0x78>)
    39e4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    39e8:	200c      	movs	r0, #12
    39ea:	f008 ffc4 	bl	c976 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39ee:	4d14      	ldr	r5, [pc, #80]	; (3a40 <mpsl_temperature_get+0x7c>)
    39f0:	6828      	ldr	r0, [r5, #0]
    39f2:	43c0      	mvns	r0, r0
    39f4:	f340 1700 	sbfx	r7, r0, #4, #1
    39f8:	6828      	ldr	r0, [r5, #0]
    39fa:	f040 0010 	orr.w	r0, r0, #16
    39fe:	6028      	str	r0, [r5, #0]
    3a00:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3a04:	6026      	str	r6, [r4, #0]
    3a06:	1c7f      	adds	r7, r7, #1
    3a08:	e002      	b.n	3a10 <mpsl_temperature_get+0x4c>
    3a0a:	bf00      	nop
    3a0c:	f000 f890 	bl	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a10:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3a14:	2800      	cmp	r0, #0
    3a16:	d0f9      	beq.n	3a0c <mpsl_temperature_get+0x48>
    3a18:	b91f      	cbnz	r7, 3a22 <mpsl_temperature_get+0x5e>
    3a1a:	6828      	ldr	r0, [r5, #0]
    3a1c:	f020 0010 	bic.w	r0, r0, #16
    3a20:	6028      	str	r0, [r5, #0]
    3a22:	4808      	ldr	r0, [pc, #32]	; (3a44 <mpsl_temperature_get+0x80>)
    3a24:	6805      	ldr	r5, [r0, #0]
    3a26:	6066      	str	r6, [r4, #4]
    3a28:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3a2c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3a30:	200c      	movs	r0, #12
    3a32:	f008 ffa0 	bl	c976 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a36:	4628      	mov	r0, r5
    3a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a3c:	4000c000 	.word	0x4000c000
    3a40:	e000ed10 	.word	0xe000ed10
    3a44:	4000c508 	.word	0x4000c508

00003a48 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3a48:	b510      	push	{r4, lr}
    3a4a:	4602      	mov	r2, r0
    3a4c:	2005      	movs	r0, #5
    3a4e:	490c      	ldr	r1, [pc, #48]	; (3a80 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3a50:	e004      	b.n	3a5c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a52:	bf00      	nop
    3a54:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a58:	791b      	ldrb	r3, [r3, #4]
    3a5a:	b133      	cbz	r3, 3a6a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a5c:	1e40      	subs	r0, r0, #1
    3a5e:	b2c0      	uxtb	r0, r0
    3a60:	d2f8      	bcs.n	3a54 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a62:	2148      	movs	r1, #72	; 0x48
    3a64:	2069      	movs	r0, #105	; 0x69
    3a66:	f7ff ff3d 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a6a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a72:	2200      	movs	r2, #0
    3a74:	714a      	strb	r2, [r1, #5]
    3a76:	718a      	strb	r2, [r1, #6]
    3a78:	2201      	movs	r2, #1
    3a7a:	710a      	strb	r2, [r1, #4]
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	0000      	.short	0x0000
    3a80:	20000da0 	.word	0x20000da0

00003a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a84:	b510      	push	{r4, lr}
    3a86:	2805      	cmp	r0, #5
    3a88:	d301      	bcc.n	3a8e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3a8a:	2158      	movs	r1, #88	; 0x58
    3a8c:	e006      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a8e:	490a      	ldr	r1, [pc, #40]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a90:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3a94:	7901      	ldrb	r1, [r0, #4]
    3a96:	2901      	cmp	r1, #1
    3a98:	d003      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a9a:	2159      	movs	r1, #89	; 0x59
    3a9c:	2069      	movs	r0, #105	; 0x69
    3a9e:	f7ff ff21 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3aa2:	7941      	ldrb	r1, [r0, #5]
    3aa4:	7982      	ldrb	r2, [r0, #6]
    3aa6:	1c49      	adds	r1, r1, #1
    3aa8:	b2c9      	uxtb	r1, r1
    3aaa:	428a      	cmp	r2, r1
    3aac:	d000      	beq.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3aae:	7141      	strb	r1, [r0, #5]
    3ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ab4:	f7ff bf74 	b.w	39a0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ab8:	20000da0 	.word	0x20000da0

00003abc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3abc:	b570      	push	{r4, r5, r6, lr}
    3abe:	2505      	movs	r5, #5
    3ac0:	4e0e      	ldr	r6, [pc, #56]	; (3afc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3ac2:	4c0f      	ldr	r4, [pc, #60]	; (3b00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3ac4:	e016      	b.n	3af4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ac6:	7821      	ldrb	r1, [r4, #0]
    3ac8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3acc:	7902      	ldrb	r2, [r0, #4]
    3ace:	2a01      	cmp	r2, #1
    3ad0:	d108      	bne.n	3ae4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ad2:	7942      	ldrb	r2, [r0, #5]
    3ad4:	7983      	ldrb	r3, [r0, #6]
    3ad6:	429a      	cmp	r2, r3
    3ad8:	d004      	beq.n	3ae4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ada:	7942      	ldrb	r2, [r0, #5]
    3adc:	7182      	strb	r2, [r0, #6]
    3ade:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3ae2:	4780      	blx	r0
    3ae4:	7820      	ldrb	r0, [r4, #0]
    3ae6:	1c40      	adds	r0, r0, #1
    3ae8:	b2c0      	uxtb	r0, r0
    3aea:	7020      	strb	r0, [r4, #0]
    3aec:	2805      	cmp	r0, #5
    3aee:	d301      	bcc.n	3af4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3af0:	2000      	movs	r0, #0
    3af2:	7020      	strb	r0, [r4, #0]
    3af4:	1e6d      	subs	r5, r5, #1
    3af6:	b2ed      	uxtb	r5, r5
    3af8:	d2e5      	bcs.n	3ac6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3afa:	bd70      	pop	{r4, r5, r6, pc}
    3afc:	20000da0 	.word	0x20000da0
    3b00:	20000289 	.word	0x20000289

00003b04 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3b04:	b500      	push	{lr}
    3b06:	f008 ff65 	bl	c9d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b0a:	b940      	cbnz	r0, 3b1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b0c:	f008 ff6c 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b10:	b928      	cbnz	r0, 3b1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b12:	f008 ff80 	bl	ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b16:	b910      	cbnz	r0, 3b1e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b18:	f008 ff91 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b1c:	b108      	cbz	r0, 3b22 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3b1e:	4802      	ldr	r0, [pc, #8]	; (3b28 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3b20:	bd00      	pop	{pc}
    3b22:	4802      	ldr	r0, [pc, #8]	; (3b2c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3b24:	bd00      	pop	{pc}
    3b26:	0000      	.short	0x0000
    3b28:	4000050c 	.word	0x4000050c
    3b2c:	4001e700 	.word	0x4001e700

00003b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3b30:	b510      	push	{r4, lr}
    3b32:	f008 ff84 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b36:	b330      	cbz	r0, 3b86 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3b38:	f3ef 8010 	mrs	r0, PRIMASK
    3b3c:	b1c8      	cbz	r0, 3b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3b3e:	2100      	movs	r1, #0
    3b40:	b672      	cpsid	i
    3b42:	4812      	ldr	r0, [pc, #72]	; (3b8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3b44:	6802      	ldr	r2, [r0, #0]
    3b46:	6803      	ldr	r3, [r0, #0]
    3b48:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3b4c:	f043 0310 	orr.w	r3, r3, #16
    3b50:	6003      	str	r3, [r0, #0]
    3b52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b56:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b5e:	431c      	orrs	r4, r3
    3b60:	d000      	beq.n	3b64 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b62:	bf40      	sev
    3b64:	bf20      	wfe
    3b66:	bf00      	nop
    3b68:	bf00      	nop
    3b6a:	bf00      	nop
    3b6c:	bf00      	nop
    3b6e:	b112      	cbz	r2, 3b76 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b70:	e005      	b.n	3b7e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b72:	2101      	movs	r1, #1
    3b74:	e7e4      	b.n	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b76:	6802      	ldr	r2, [r0, #0]
    3b78:	f022 0210 	bic.w	r2, r2, #16
    3b7c:	6002      	str	r2, [r0, #0]
    3b7e:	2900      	cmp	r1, #0
    3b80:	d000      	beq.n	3b84 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b82:	b662      	cpsie	i
    3b84:	bd10      	pop	{r4, pc}
    3b86:	bf20      	wfe
    3b88:	bd10      	pop	{r4, pc}
    3b8a:	0000      	.short	0x0000
    3b8c:	e000ed10 	.word	0xe000ed10

00003b90 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3b90:	0000ccaf 0000cccb 0000ccb9 0000ccc5     ................
    3ba0:	0000ccb3 0000ccad 0000ccab 0000ccd1     ................
    3bb0:	0000ccbf 0000cca5 0000cc9d 0000cca1     ................
    3bc0:	0000cc97                                ....

00003bc4 <mpsl_fem_disable>:
    3bc4:	4801      	ldr	r0, [pc, #4]	; (3bcc <mpsl_fem_disable+0x8>)
    3bc6:	6800      	ldr	r0, [r0, #0]
    3bc8:	6800      	ldr	r0, [r0, #0]
    3bca:	4700      	bx	r0
    3bcc:	20000058 	.word	0x20000058

00003bd0 <mpsl_fem_lna_configuration_clear>:
    3bd0:	4801      	ldr	r0, [pc, #4]	; (3bd8 <mpsl_fem_lna_configuration_clear+0x8>)
    3bd2:	6800      	ldr	r0, [r0, #0]
    3bd4:	6900      	ldr	r0, [r0, #16]
    3bd6:	4700      	bx	r0
    3bd8:	20000058 	.word	0x20000058

00003bdc <mpsl_fem_lna_configuration_set>:
    3bdc:	4a01      	ldr	r2, [pc, #4]	; (3be4 <mpsl_fem_lna_configuration_set+0x8>)
    3bde:	6812      	ldr	r2, [r2, #0]
    3be0:	6892      	ldr	r2, [r2, #8]
    3be2:	4710      	bx	r2
    3be4:	20000058 	.word	0x20000058

00003be8 <mpsl_fem_pa_configuration_clear>:
    3be8:	4801      	ldr	r0, [pc, #4]	; (3bf0 <mpsl_fem_pa_configuration_clear+0x8>)
    3bea:	6800      	ldr	r0, [r0, #0]
    3bec:	68c0      	ldr	r0, [r0, #12]
    3bee:	4700      	bx	r0
    3bf0:	20000058 	.word	0x20000058

00003bf4 <mpsl_fem_pa_configuration_set>:
    3bf4:	4a01      	ldr	r2, [pc, #4]	; (3bfc <mpsl_fem_pa_configuration_set+0x8>)
    3bf6:	6812      	ldr	r2, [r2, #0]
    3bf8:	6852      	ldr	r2, [r2, #4]
    3bfa:	4710      	bx	r2
    3bfc:	20000058 	.word	0x20000058

00003c00 <mpsl_fem_pa_is_configured>:
    3c00:	4901      	ldr	r1, [pc, #4]	; (3c08 <mpsl_fem_pa_is_configured+0x8>)
    3c02:	6809      	ldr	r1, [r1, #0]
    3c04:	6a09      	ldr	r1, [r1, #32]
    3c06:	4708      	bx	r1
    3c08:	20000058 	.word	0x20000058

00003c0c <mpsl_fem_device_config_254_apply_get>:
    3c0c:	4801      	ldr	r0, [pc, #4]	; (3c14 <mpsl_fem_device_config_254_apply_get+0x8>)
    3c0e:	7800      	ldrb	r0, [r0, #0]
    3c10:	4770      	bx	lr
    3c12:	0000      	.short	0x0000
    3c14:	2000028a 	.word	0x2000028a
    3c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c1a:	4c17      	ldr	r4, [pc, #92]	; (3c78 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3c1c:	7a20      	ldrb	r0, [r4, #8]
    3c1e:	2802      	cmp	r0, #2
    3c20:	d200      	bcs.n	3c24 <mpsl_fem_device_config_254_apply_get+0x18>
    3c22:	2002      	movs	r0, #2
    3c24:	f88d 0001 	strb.w	r0, [sp, #1]
    3c28:	79e0      	ldrb	r0, [r4, #7]
    3c2a:	2803      	cmp	r0, #3
    3c2c:	d200      	bcs.n	3c30 <mpsl_fem_device_config_254_apply_get+0x24>
    3c2e:	2003      	movs	r0, #3
    3c30:	f88d 0000 	strb.w	r0, [sp]
    3c34:	79a0      	ldrb	r0, [r4, #6]
    3c36:	f8ad 0004 	strh.w	r0, [sp, #4]
    3c3a:	7960      	ldrb	r0, [r4, #5]
    3c3c:	f8ad 0002 	strh.w	r0, [sp, #2]
    3c40:	4668      	mov	r0, sp
    3c42:	f006 ffeb 	bl	ac1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3c46:	b108      	cbz	r0, 3c4c <mpsl_fem_device_config_254_apply_get+0x40>
    3c48:	2184      	movs	r1, #132	; 0x84
    3c4a:	e010      	b.n	3c6e <mpsl_fem_device_config_254_apply_get+0x62>
    3c4c:	68e0      	ldr	r0, [r4, #12]
    3c4e:	9002      	str	r0, [sp, #8]
    3c50:	a802      	add	r0, sp, #8
    3c52:	f006 fff9 	bl	ac48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c56:	b108      	cbz	r0, 3c5c <mpsl_fem_device_config_254_apply_get+0x50>
    3c58:	2188      	movs	r1, #136	; 0x88
    3c5a:	e008      	b.n	3c6e <mpsl_fem_device_config_254_apply_get+0x62>
    3c5c:	4807      	ldr	r0, [pc, #28]	; (3c7c <mpsl_fem_device_config_254_apply_get+0x70>)
    3c5e:	6800      	ldr	r0, [r0, #0]
    3c60:	9003      	str	r0, [sp, #12]
    3c62:	a803      	add	r0, sp, #12
    3c64:	f00b fcf7 	bl	f656 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d003      	beq.n	3c74 <mpsl_fem_device_config_254_apply_get+0x68>
    3c6c:	218c      	movs	r1, #140	; 0x8c
    3c6e:	2003      	movs	r0, #3
    3c70:	f000 f918 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c74:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3c76:	0000      	.short	0x0000
    3c78:	20000dc8 	.word	0x20000dc8
    3c7c:	00003f90 	.word	0x00003f90
    3c80:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3c82:	4604      	mov	r4, r0
    3c84:	460e      	mov	r6, r1
    3c86:	f100 0003 	add.w	r0, r0, #3
    3c8a:	f020 0003 	bic.w	r0, r0, #3
    3c8e:	f04f 0100 	mov.w	r1, #0
    3c92:	e9cd 0100 	strd	r0, r1, [sp]
    3c96:	7831      	ldrb	r1, [r6, #0]
    3c98:	0015      	movs	r5, r2
    3c9a:	f88d 1005 	strb.w	r1, [sp, #5]
    3c9e:	d000      	beq.n	3ca2 <mpsl_fem_device_config_254_apply_get+0x96>
    3ca0:	2000      	movs	r0, #0
    3ca2:	a901      	add	r1, sp, #4
    3ca4:	f000 faee 	bl	4284 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3ca8:	9900      	ldr	r1, [sp, #0]
    3caa:	4408      	add	r0, r1
    3cac:	490c      	ldr	r1, [pc, #48]	; (3ce0 <mpsl_fem_device_config_254_apply_get+0xd4>)
    3cae:	9000      	str	r0, [sp, #0]
    3cb0:	78c9      	ldrb	r1, [r1, #3]
    3cb2:	b149      	cbz	r1, 3cc8 <mpsl_fem_device_config_254_apply_get+0xbc>
    3cb4:	7c31      	ldrb	r1, [r6, #16]
    3cb6:	b139      	cbz	r1, 3cc8 <mpsl_fem_device_config_254_apply_get+0xbc>
    3cb8:	2225      	movs	r2, #37	; 0x25
    3cba:	b105      	cbz	r5, 3cbe <mpsl_fem_device_config_254_apply_get+0xb2>
    3cbc:	2000      	movs	r0, #0
    3cbe:	f000 fd29 	bl	4714 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3cc2:	9900      	ldr	r1, [sp, #0]
    3cc4:	4408      	add	r0, r1
    3cc6:	9000      	str	r0, [sp, #0]
    3cc8:	462a      	mov	r2, r5
    3cca:	4631      	mov	r1, r6
    3ccc:	4668      	mov	r0, sp
    3cce:	f009 f801 	bl	ccd4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3cd2:	9800      	ldr	r0, [sp, #0]
    3cd4:	1dc0      	adds	r0, r0, #7
    3cd6:	f020 0007 	bic.w	r0, r0, #7
    3cda:	9000      	str	r0, [sp, #0]
    3cdc:	1b00      	subs	r0, r0, r4
    3cde:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3ce0:	2000005c 	.word	0x2000005c

00003ce4 <sdc_build_revision_get>:
    3ce4:	b510      	push	{r4, lr}
    3ce6:	b128      	cbz	r0, 3cf4 <sdc_build_revision_get+0x10>
    3ce8:	2214      	movs	r2, #20
    3cea:	4904      	ldr	r1, [pc, #16]	; (3cfc <sdc_build_revision_get+0x18>)
    3cec:	f008 fef9 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cf0:	2000      	movs	r0, #0
    3cf2:	bd10      	pop	{r4, pc}
    3cf4:	f06f 0015 	mvn.w	r0, #21
    3cf8:	bd10      	pop	{r4, pc}
    3cfa:	0000      	.short	0x0000
    3cfc:	00003fac 	.word	0x00003fac

00003d00 <sdc_cfg_set>:
    3d00:	b570      	push	{r4, r5, r6, lr}
    3d02:	0003      	movs	r3, r0
    3d04:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3d08:	d103      	bne.n	3d12 <sdc_cfg_set+0x12>
    3d0a:	4c2a      	ldr	r4, [pc, #168]	; (3db4 <sdc_cfg_set+0xb4>)
    3d0c:	7863      	ldrb	r3, [r4, #1]
    3d0e:	b10b      	cbz	r3, 3d14 <sdc_cfg_set+0x14>
    3d10:	1180      	asrs	r0, r0, #6
    3d12:	bd70      	pop	{r4, r5, r6, pc}
    3d14:	b319      	cbz	r1, 3d5e <sdc_cfg_set+0x5e>
    3d16:	f06f 0515 	mvn.w	r5, #21
    3d1a:	b38a      	cbz	r2, 3d80 <sdc_cfg_set+0x80>
    3d1c:	4b26      	ldr	r3, [pc, #152]	; (3db8 <sdc_cfg_set+0xb8>)
    3d1e:	290c      	cmp	r1, #12
    3d20:	d243      	bcs.n	3daa <sdc_cfg_set+0xaa>
    3d22:	e8df f001 	tbb	[pc, r1]
    3d26:	0642      	.short	0x0642
    3d28:	13100c09 	.word	0x13100c09
    3d2c:	2818251d 	.word	0x2818251d
    3d30:	332e      	.short	0x332e
    3d32:	7810      	ldrb	r0, [r2, #0]
    3d34:	7018      	strb	r0, [r3, #0]
    3d36:	e02d      	b.n	3d94 <sdc_cfg_set+0x94>
    3d38:	7810      	ldrb	r0, [r2, #0]
    3d3a:	7058      	strb	r0, [r3, #1]
    3d3c:	e02a      	b.n	3d94 <sdc_cfg_set+0x94>
    3d3e:	6810      	ldr	r0, [r2, #0]
    3d40:	f8c3 0005 	str.w	r0, [r3, #5]
    3d44:	e026      	b.n	3d94 <sdc_cfg_set+0x94>
    3d46:	6810      	ldr	r0, [r2, #0]
    3d48:	60d8      	str	r0, [r3, #12]
    3d4a:	e023      	b.n	3d94 <sdc_cfg_set+0x94>
    3d4c:	7811      	ldrb	r1, [r2, #0]
    3d4e:	2900      	cmp	r1, #0
    3d50:	d1df      	bne.n	3d12 <sdc_cfg_set+0x12>
    3d52:	7099      	strb	r1, [r3, #2]
    3d54:	e01e      	b.n	3d94 <sdc_cfg_set+0x94>
    3d56:	7811      	ldrb	r1, [r2, #0]
    3d58:	2900      	cmp	r1, #0
    3d5a:	d1da      	bne.n	3d12 <sdc_cfg_set+0x12>
    3d5c:	70d9      	strb	r1, [r3, #3]
    3d5e:	e019      	b.n	3d94 <sdc_cfg_set+0x94>
    3d60:	78e0      	ldrb	r0, [r4, #3]
    3d62:	b110      	cbz	r0, 3d6a <sdc_cfg_set+0x6a>
    3d64:	7810      	ldrb	r0, [r2, #0]
    3d66:	2802      	cmp	r0, #2
    3d68:	d31f      	bcc.n	3daa <sdc_cfg_set+0xaa>
    3d6a:	7810      	ldrb	r0, [r2, #0]
    3d6c:	7418      	strb	r0, [r3, #16]
    3d6e:	e011      	b.n	3d94 <sdc_cfg_set+0x94>
    3d70:	8810      	ldrh	r0, [r2, #0]
    3d72:	8258      	strh	r0, [r3, #18]
    3d74:	e00e      	b.n	3d94 <sdc_cfg_set+0x94>
    3d76:	7811      	ldrb	r1, [r2, #0]
    3d78:	2900      	cmp	r1, #0
    3d7a:	d1ca      	bne.n	3d12 <sdc_cfg_set+0x12>
    3d7c:	7119      	strb	r1, [r3, #4]
    3d7e:	e009      	b.n	3d94 <sdc_cfg_set+0x94>
    3d80:	e013      	b.n	3daa <sdc_cfg_set+0xaa>
    3d82:	7810      	ldrb	r0, [r2, #0]
    3d84:	2802      	cmp	r0, #2
    3d86:	d310      	bcc.n	3daa <sdc_cfg_set+0xaa>
    3d88:	7518      	strb	r0, [r3, #20]
    3d8a:	e003      	b.n	3d94 <sdc_cfg_set+0x94>
    3d8c:	7811      	ldrb	r1, [r2, #0]
    3d8e:	2900      	cmp	r1, #0
    3d90:	d1bf      	bne.n	3d12 <sdc_cfg_set+0x12>
    3d92:	7559      	strb	r1, [r3, #21]
    3d94:	2201      	movs	r2, #1
    3d96:	4908      	ldr	r1, [pc, #32]	; (3db8 <sdc_cfg_set+0xb8>)
    3d98:	2000      	movs	r0, #0
    3d9a:	f7ff ff71 	bl	3c80 <mpsl_fem_device_config_254_apply_get+0x74>
    3d9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3da2:	db04      	blt.n	3dae <sdc_cfg_set+0xae>
    3da4:	f06f 000b 	mvn.w	r0, #11
    3da8:	bd70      	pop	{r4, r5, r6, pc}
    3daa:	4628      	mov	r0, r5
    3dac:	bd70      	pop	{r4, r5, r6, pc}
    3dae:	2101      	movs	r1, #1
    3db0:	70a1      	strb	r1, [r4, #2]
    3db2:	bd70      	pop	{r4, r5, r6, pc}
    3db4:	2000005c 	.word	0x2000005c
    3db8:	20000dc8 	.word	0x20000dc8

00003dbc <sdc_enable>:
    3dbc:	b570      	push	{r4, r5, r6, lr}
    3dbe:	460c      	mov	r4, r1
    3dc0:	0005      	movs	r5, r0
    3dc2:	d019      	beq.n	3df8 <sdc_enable+0x3c>
    3dc4:	b1c4      	cbz	r4, 3df8 <sdc_enable+0x3c>
    3dc6:	f000 f925 	bl	4014 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3dca:	b1c0      	cbz	r0, 3dfe <sdc_enable+0x42>
    3dcc:	4628      	mov	r0, r5
    3dce:	f7ff fe3b 	bl	3a48 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3dd2:	4d0c      	ldr	r5, [pc, #48]	; (3e04 <sdc_enable+0x48>)
    3dd4:	2200      	movs	r2, #0
    3dd6:	490c      	ldr	r1, [pc, #48]	; (3e08 <sdc_enable+0x4c>)
    3dd8:	7028      	strb	r0, [r5, #0]
    3dda:	4620      	mov	r0, r4
    3ddc:	f7ff ff50 	bl	3c80 <mpsl_fem_device_config_254_apply_get+0x74>
    3de0:	f00c f83a 	bl	fe58 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3de4:	2100      	movs	r1, #0
    3de6:	7828      	ldrb	r0, [r5, #0]
    3de8:	f007 f912 	bl	b010 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3dec:	f7ff ff14 	bl	3c18 <mpsl_fem_device_config_254_apply_get+0xc>
    3df0:	2001      	movs	r0, #1
    3df2:	7068      	strb	r0, [r5, #1]
    3df4:	2000      	movs	r0, #0
    3df6:	bd70      	pop	{r4, r5, r6, pc}
    3df8:	f06f 0015 	mvn.w	r0, #21
    3dfc:	bd70      	pop	{r4, r5, r6, pc}
    3dfe:	f04f 30ff 	mov.w	r0, #4294967295
    3e02:	bd70      	pop	{r4, r5, r6, pc}
    3e04:	2000005c 	.word	0x2000005c
    3e08:	20000dc8 	.word	0x20000dc8

00003e0c <sdc_init>:
    3e0c:	b530      	push	{r4, r5, lr}
    3e0e:	b087      	sub	sp, #28
    3e10:	0005      	movs	r5, r0
    3e12:	d00c      	beq.n	3e2e <sdc_init+0x22>
    3e14:	f7ff fdbe 	bl	3994 <mpsl_is_initialized>
    3e18:	f04f 34ff 	mov.w	r4, #4294967295
    3e1c:	b120      	cbz	r0, 3e28 <sdc_init+0x1c>
    3e1e:	f7ff fc87 	bl	3730 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3e22:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3e26:	d905      	bls.n	3e34 <sdc_init+0x28>
    3e28:	4620      	mov	r0, r4
    3e2a:	b007      	add	sp, #28
    3e2c:	bd30      	pop	{r4, r5, pc}
    3e2e:	f06f 0015 	mvn.w	r0, #21
    3e32:	e7fa      	b.n	3e2a <sdc_init+0x1e>
    3e34:	4c15      	ldr	r4, [pc, #84]	; (3e8c <sdc_init+0x80>)
    3e36:	4816      	ldr	r0, [pc, #88]	; (3e90 <sdc_init+0x84>)
    3e38:	6065      	str	r5, [r4, #4]
    3e3a:	f000 f9e5 	bl	4208 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3e3e:	2000      	movs	r0, #0
    3e40:	7060      	strb	r0, [r4, #1]
    3e42:	70a0      	strb	r0, [r4, #2]
    3e44:	70e0      	strb	r0, [r4, #3]
    3e46:	4601      	mov	r1, r0
    3e48:	2218      	movs	r2, #24
    3e4a:	4668      	mov	r0, sp
    3e4c:	f008 fec3 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3e50:	2218      	movs	r2, #24
    3e52:	4910      	ldr	r1, [pc, #64]	; (3e94 <sdc_init+0x88>)
    3e54:	4668      	mov	r0, sp
    3e56:	f008 fe44 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e5a:	2218      	movs	r2, #24
    3e5c:	4669      	mov	r1, sp
    3e5e:	480e      	ldr	r0, [pc, #56]	; (3e98 <sdc_init+0x8c>)
    3e60:	f008 fe3f 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e64:	f3ef 8410 	mrs	r4, PRIMASK
    3e68:	b672      	cpsid	i
    3e6a:	480c      	ldr	r0, [pc, #48]	; (3e9c <sdc_init+0x90>)
    3e6c:	f06f 010c 	mvn.w	r1, #12
    3e70:	f000 fcf2 	bl	4858 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3e74:	480a      	ldr	r0, [pc, #40]	; (3ea0 <sdc_init+0x94>)
    3e76:	f000 fdbf 	bl	49f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3e7a:	b118      	cbz	r0, 3e84 <sdc_init+0x78>
    3e7c:	219a      	movs	r1, #154	; 0x9a
    3e7e:	2003      	movs	r0, #3
    3e80:	f000 f810 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e84:	b904      	cbnz	r4, 3e88 <sdc_init+0x7c>
    3e86:	b662      	cpsie	i
    3e88:	2000      	movs	r0, #0
    3e8a:	e7ce      	b.n	3e2a <sdc_init+0x1e>
    3e8c:	2000005c 	.word	0x2000005c
    3e90:	00003c19 	.word	0x00003c19
    3e94:	00003f94 	.word	0x00003f94
    3e98:	20000dc8 	.word	0x20000dc8
    3e9c:	4000c000 	.word	0x4000c000
    3ea0:	00004041 	.word	0x00004041

00003ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3ea4:	b50e      	push	{r1, r2, r3, lr}
    3ea6:	b672      	cpsid	i
    3ea8:	4a15      	ldr	r2, [pc, #84]	; (3f00 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3eaa:	6855      	ldr	r5, [r2, #4]
    3eac:	b1d5      	cbz	r5, 3ee4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3eae:	2200      	movs	r2, #0
    3eb0:	4603      	mov	r3, r0
    3eb2:	466e      	mov	r6, sp
    3eb4:	240a      	movs	r4, #10
    3eb6:	e003      	b.n	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3eb8:	fbb0 f0f4 	udiv	r0, r0, r4
    3ebc:	1c52      	adds	r2, r2, #1
    3ebe:	b2d2      	uxtb	r2, r2
    3ec0:	2800      	cmp	r0, #0
    3ec2:	d1f9      	bne.n	3eb8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ec4:	54b0      	strb	r0, [r6, r2]
    3ec6:	e009      	b.n	3edc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3ec8:	fbb3 f0f4 	udiv	r0, r3, r4
    3ecc:	fb04 3010 	mls	r0, r4, r0, r3
    3ed0:	fbb3 f3f4 	udiv	r3, r3, r4
    3ed4:	1e52      	subs	r2, r2, #1
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	3030      	adds	r0, #48	; 0x30
    3eda:	54b0      	strb	r0, [r6, r2]
    3edc:	2a00      	cmp	r2, #0
    3ede:	d1f3      	bne.n	3ec8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3ee0:	4630      	mov	r0, r6
    3ee2:	47a8      	blx	r5
    3ee4:	f3bf 8f4f 	dsb	sy
    3ee8:	4806      	ldr	r0, [pc, #24]	; (3f04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3eea:	6801      	ldr	r1, [r0, #0]
    3eec:	4a06      	ldr	r2, [pc, #24]	; (3f08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3eee:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3ef2:	4311      	orrs	r1, r2
    3ef4:	6001      	str	r1, [r0, #0]
    3ef6:	f3bf 8f4f 	dsb	sy
    3efa:	bf00      	nop
    3efc:	e7fd      	b.n	3efa <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3efe:	0000      	.short	0x0000
    3f00:	2000005c 	.word	0x2000005c
    3f04:	e000ed0c 	.word	0xe000ed0c
    3f08:	05fa0004 	.word	0x05fa0004

00003f0c <sdc_support_dle>:
    3f0c:	4806      	ldr	r0, [pc, #24]	; (3f28 <sdc_support_dle+0x1c>)
    3f0e:	b510      	push	{r4, lr}
    3f10:	7881      	ldrb	r1, [r0, #2]
    3f12:	7840      	ldrb	r0, [r0, #1]
    3f14:	4301      	orrs	r1, r0
    3f16:	d002      	beq.n	3f1e <sdc_support_dle+0x12>
    3f18:	f04f 30ff 	mov.w	r0, #4294967295
    3f1c:	bd10      	pop	{r4, pc}
    3f1e:	f006 fee9 	bl	acf4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3f22:	2000      	movs	r0, #0
    3f24:	bd10      	pop	{r4, pc}
    3f26:	0000      	.short	0x0000
    3f28:	2000005c 	.word	0x2000005c

00003f2c <sdc_support_le_2m_phy>:
    3f2c:	4806      	ldr	r0, [pc, #24]	; (3f48 <sdc_support_le_2m_phy+0x1c>)
    3f2e:	b510      	push	{r4, lr}
    3f30:	7881      	ldrb	r1, [r0, #2]
    3f32:	7840      	ldrb	r0, [r0, #1]
    3f34:	4301      	orrs	r1, r0
    3f36:	d002      	beq.n	3f3e <sdc_support_le_2m_phy+0x12>
    3f38:	f04f 30ff 	mov.w	r0, #4294967295
    3f3c:	bd10      	pop	{r4, pc}
    3f3e:	f00b fc37 	bl	f7b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3f42:	2000      	movs	r0, #0
    3f44:	bd10      	pop	{r4, pc}
    3f46:	0000      	.short	0x0000
    3f48:	2000005c 	.word	0x2000005c

00003f4c <sdc_support_master>:
    3f4c:	4806      	ldr	r0, [pc, #24]	; (3f68 <sdc_support_master+0x1c>)
    3f4e:	b510      	push	{r4, lr}
    3f50:	7881      	ldrb	r1, [r0, #2]
    3f52:	7840      	ldrb	r0, [r0, #1]
    3f54:	4301      	orrs	r1, r0
    3f56:	d002      	beq.n	3f5e <sdc_support_master+0x12>
    3f58:	f04f 30ff 	mov.w	r0, #4294967295
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	f007 f88d 	bl	b07c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3f62:	2000      	movs	r0, #0
    3f64:	bd10      	pop	{r4, pc}
    3f66:	0000      	.short	0x0000
    3f68:	2000005c 	.word	0x2000005c

00003f6c <sdc_support_scan>:
    3f6c:	4807      	ldr	r0, [pc, #28]	; (3f8c <sdc_support_scan+0x20>)
    3f6e:	b510      	push	{r4, lr}
    3f70:	7881      	ldrb	r1, [r0, #2]
    3f72:	7842      	ldrb	r2, [r0, #1]
    3f74:	4311      	orrs	r1, r2
    3f76:	d002      	beq.n	3f7e <sdc_support_scan+0x12>
    3f78:	f04f 30ff 	mov.w	r0, #4294967295
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	2101      	movs	r1, #1
    3f80:	70c1      	strb	r1, [r0, #3]
    3f82:	f007 f869 	bl	b058 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3f86:	2000      	movs	r0, #0
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	0000      	.short	0x0000
    3f8c:	2000005c 	.word	0x2000005c
    3f90:	00000001 	.word	0x00000001
    3f94:	00010101 	.word	0x00010101
    3f98:	031b1b00 	.word	0x031b1b00
    3f9c:	00000002 	.word	0x00000002
    3fa0:	00001d4c 	.word	0x00001d4c
    3fa4:	001f0003 	.word	0x001f0003
    3fa8:	00000000 	.word	0x00000000
    3fac:	66c5e70e 	.word	0x66c5e70e
    3fb0:	ac3c1867 	.word	0xac3c1867
    3fb4:	81ccd2b3 	.word	0x81ccd2b3
    3fb8:	c0f1dca3 	.word	0xc0f1dca3
    3fbc:	220236c0 	.word	0x220236c0

00003fc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3fc0:	4a05      	ldr	r2, [pc, #20]	; (3fd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3fc2:	b510      	push	{r4, lr}
    3fc4:	6852      	ldr	r2, [r2, #4]
    3fc6:	b112      	cbz	r2, 3fce <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fcc:	4710      	bx	r2
    3fce:	2183      	movs	r1, #131	; 0x83
    3fd0:	2004      	movs	r0, #4
    3fd2:	f7ff ff67 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fd6:	0000      	.short	0x0000
    3fd8:	20000de0 	.word	0x20000de0

00003fdc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3fdc:	4a05      	ldr	r2, [pc, #20]	; (3ff4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3fde:	b510      	push	{r4, lr}
    3fe0:	6812      	ldr	r2, [r2, #0]
    3fe2:	b112      	cbz	r2, 3fea <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fe8:	4710      	bx	r2
    3fea:	217d      	movs	r1, #125	; 0x7d
    3fec:	2004      	movs	r0, #4
    3fee:	f7ff ff59 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ff2:	0000      	.short	0x0000
    3ff4:	20000de0 	.word	0x20000de0

00003ff8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3ff8:	4a05      	ldr	r2, [pc, #20]	; (4010 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3ffa:	b510      	push	{r4, lr}
    3ffc:	6892      	ldr	r2, [r2, #8]
    3ffe:	b112      	cbz	r2, 4006 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4004:	4710      	bx	r2
    4006:	2189      	movs	r1, #137	; 0x89
    4008:	2004      	movs	r0, #4
    400a:	f7ff ff4b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    400e:	0000      	.short	0x0000
    4010:	20000de0 	.word	0x20000de0

00004014 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4014:	4805      	ldr	r0, [pc, #20]	; (402c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4016:	6801      	ldr	r1, [r0, #0]
    4018:	b129      	cbz	r1, 4026 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    401a:	6841      	ldr	r1, [r0, #4]
    401c:	b119      	cbz	r1, 4026 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    401e:	6880      	ldr	r0, [r0, #8]
    4020:	b108      	cbz	r0, 4026 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4022:	2001      	movs	r0, #1
    4024:	4770      	bx	lr
    4026:	2000      	movs	r0, #0
    4028:	4770      	bx	lr
    402a:	0000      	.short	0x0000
    402c:	20000de0 	.word	0x20000de0

00004030 <sdc_rand_source_register>:
    4030:	4902      	ldr	r1, [pc, #8]	; (403c <sdc_rand_source_register+0xc>)
    4032:	c80d      	ldmia	r0, {r0, r2, r3}
    4034:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4038:	2000      	movs	r0, #0
    403a:	4770      	bx	lr
    403c:	20000de0 	.word	0x20000de0

00004040 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4042:	4c12      	ldr	r4, [pc, #72]	; (408c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4044:	2600      	movs	r6, #0
    4046:	6825      	ldr	r5, [r4, #0]
    4048:	e011      	b.n	406e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    404a:	9800      	ldr	r0, [sp, #0]
    404c:	2802      	cmp	r0, #2
    404e:	d002      	beq.n	4056 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4050:	2803      	cmp	r0, #3
    4052:	d10c      	bne.n	406e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4054:	e006      	b.n	4064 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4056:	6820      	ldr	r0, [r4, #0]
    4058:	b110      	cbz	r0, 4060 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    405a:	2000      	movs	r0, #0
    405c:	6026      	str	r6, [r4, #0]
    405e:	e005      	b.n	406c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4060:	2128      	movs	r1, #40	; 0x28
    4062:	e00c      	b.n	407e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4064:	6820      	ldr	r0, [r4, #0]
    4066:	b168      	cbz	r0, 4084 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4068:	2001      	movs	r0, #1
    406a:	6026      	str	r6, [r4, #0]
    406c:	47a8      	blx	r5
    406e:	4668      	mov	r0, sp
    4070:	f000 fc94 	bl	499c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4074:	2800      	cmp	r0, #0
    4076:	d0e8      	beq.n	404a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4078:	2805      	cmp	r0, #5
    407a:	d005      	beq.n	4088 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    407c:	2135      	movs	r1, #53	; 0x35
    407e:	2004      	movs	r0, #4
    4080:	f7ff ff10 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4084:	212d      	movs	r1, #45	; 0x2d
    4086:	e7fa      	b.n	407e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    408a:	0000      	.short	0x0000
    408c:	20000064 	.word	0x20000064
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	4c14      	ldr	r4, [pc, #80]	; (40e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    4094:	4605      	mov	r5, r0
    4096:	7820      	ldrb	r0, [r4, #0]
    4098:	b140      	cbz	r0, 40ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    409a:	78a2      	ldrb	r2, [r4, #2]
    409c:	1c61      	adds	r1, r4, #1
    409e:	4628      	mov	r0, r5
    40a0:	1c92      	adds	r2, r2, #2
    40a2:	f008 fd1e 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    40a6:	2000      	movs	r0, #0
    40a8:	7020      	strb	r0, [r4, #0]
    40aa:	e013      	b.n	40d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    40ac:	480e      	ldr	r0, [pc, #56]	; (40e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40ae:	f001 ffc9 	bl	6044 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    40b2:	2800      	cmp	r0, #0
    40b4:	d00f      	beq.n	40d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    40b6:	480c      	ldr	r0, [pc, #48]	; (40e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40b8:	7800      	ldrb	r0, [r0, #0]
    40ba:	2814      	cmp	r0, #20
    40bc:	d104      	bne.n	40c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    40be:	210a      	movs	r1, #10
    40c0:	203e      	movs	r0, #62	; 0x3e
    40c2:	f008 fe7c 	bl	cdbe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    40c6:	b138      	cbz	r0, 40d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    40c8:	4907      	ldr	r1, [pc, #28]	; (40e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40ca:	4628      	mov	r0, r5
    40cc:	f008 fed5 	bl	ce7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    40d0:	2800      	cmp	r0, #0
    40d2:	d000      	beq.n	40d6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    40d4:	2001      	movs	r0, #1
    40d6:	bd70      	pop	{r4, r5, r6, pc}
    40d8:	4903      	ldr	r1, [pc, #12]	; (40e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40da:	4628      	mov	r0, r5
    40dc:	f009 f90a 	bl	d2f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    40e0:	e7f8      	b.n	40d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    40e2:	0000      	.short	0x0000
    40e4:	20000ef4 	.word	0x20000ef4
    40e8:	20000dec 	.word	0x20000dec
    40ec:	b570      	push	{r4, r5, r6, lr}
    40ee:	780a      	ldrb	r2, [r1, #0]
    40f0:	7082      	strb	r2, [r0, #2]
    40f2:	b33a      	cbz	r2, 4144 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    40f4:	2a01      	cmp	r2, #1
    40f6:	d825      	bhi.n	4144 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    40f8:	2313      	movs	r3, #19
    40fa:	7003      	strb	r3, [r0, #0]
    40fc:	2300      	movs	r3, #0
    40fe:	e00a      	b.n	4116 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4100:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4104:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4108:	78a6      	ldrb	r6, [r4, #2]
    410a:	70ee      	strb	r6, [r5, #3]
    410c:	8864      	ldrh	r4, [r4, #2]
    410e:	0a24      	lsrs	r4, r4, #8
    4110:	1c5b      	adds	r3, r3, #1
    4112:	712c      	strb	r4, [r5, #4]
    4114:	b2db      	uxtb	r3, r3
    4116:	4293      	cmp	r3, r2
    4118:	d3f2      	bcc.n	4100 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    411a:	2300      	movs	r3, #0
    411c:	e00b      	b.n	4136 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    411e:	bf00      	nop
    4120:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4124:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4128:	792e      	ldrb	r6, [r5, #4]
    412a:	7166      	strb	r6, [r4, #5]
    412c:	88ad      	ldrh	r5, [r5, #4]
    412e:	0a2d      	lsrs	r5, r5, #8
    4130:	1c5b      	adds	r3, r3, #1
    4132:	71a5      	strb	r5, [r4, #6]
    4134:	b2db      	uxtb	r3, r3
    4136:	4293      	cmp	r3, r2
    4138:	d3f2      	bcc.n	4120 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    413a:	2101      	movs	r1, #1
    413c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4140:	b2c0      	uxtb	r0, r0
    4142:	bd70      	pop	{r4, r5, r6, pc}
    4144:	2000      	movs	r0, #0
    4146:	bd70      	pop	{r4, r5, r6, pc}

00004148 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4148:	2101      	movs	r1, #1
    414a:	4a0c      	ldr	r2, [pc, #48]	; (417c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    414c:	2840      	cmp	r0, #64	; 0x40
    414e:	d20c      	bcs.n	416a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4150:	2820      	cmp	r0, #32
    4152:	d803      	bhi.n	415c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4154:	1e40      	subs	r0, r0, #1
    4156:	4081      	lsls	r1, r0
    4158:	6810      	ldr	r0, [r2, #0]
    415a:	e002      	b.n	4162 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    415c:	3821      	subs	r0, #33	; 0x21
    415e:	4081      	lsls	r1, r0
    4160:	6850      	ldr	r0, [r2, #4]
    4162:	4201      	tst	r1, r0
    4164:	d107      	bne.n	4176 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4166:	2000      	movs	r0, #0
    4168:	4770      	bx	lr
    416a:	28ff      	cmp	r0, #255	; 0xff
    416c:	d003      	beq.n	4176 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    416e:	3840      	subs	r0, #64	; 0x40
    4170:	4081      	lsls	r1, r0
    4172:	6890      	ldr	r0, [r2, #8]
    4174:	e7f5      	b.n	4162 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4176:	2001      	movs	r0, #1
    4178:	4770      	bx	lr
    417a:	0000      	.short	0x0000
    417c:	20000068 	.word	0x20000068

00004180 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4180:	2101      	movs	r1, #1
    4182:	1e40      	subs	r0, r0, #1
    4184:	4081      	lsls	r1, r0
    4186:	4804      	ldr	r0, [pc, #16]	; (4198 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4188:	68c0      	ldr	r0, [r0, #12]
    418a:	4201      	tst	r1, r0
    418c:	d001      	beq.n	4192 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    418e:	2001      	movs	r0, #1
    4190:	4770      	bx	lr
    4192:	2000      	movs	r0, #0
    4194:	4770      	bx	lr
    4196:	0000      	.short	0x0000
    4198:	20000068 	.word	0x20000068

0000419c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    419c:	4901      	ldr	r1, [pc, #4]	; (41a4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    419e:	6800      	ldr	r0, [r0, #0]
    41a0:	60c8      	str	r0, [r1, #12]
    41a2:	4770      	bx	lr
    41a4:	20000068 	.word	0x20000068

000041a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    41a8:	4904      	ldr	r1, [pc, #16]	; (41bc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    41aa:	6802      	ldr	r2, [r0, #0]
    41ac:	6840      	ldr	r0, [r0, #4]
    41ae:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    41b2:	600a      	str	r2, [r1, #0]
    41b4:	4a02      	ldr	r2, [pc, #8]	; (41c0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    41b6:	4310      	orrs	r0, r2
    41b8:	6048      	str	r0, [r1, #4]
    41ba:	4770      	bx	lr
    41bc:	20000068 	.word	0x20000068
    41c0:	024007f8 	.word	0x024007f8

000041c4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    41c4:	4901      	ldr	r1, [pc, #4]	; (41cc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    41c6:	6800      	ldr	r0, [r0, #0]
    41c8:	6088      	str	r0, [r1, #8]
    41ca:	4770      	bx	lr
    41cc:	20000068 	.word	0x20000068

000041d0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    41d0:	4805      	ldr	r0, [pc, #20]	; (41e8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    41d2:	f04f 31ff 	mov.w	r1, #4294967295
    41d6:	6001      	str	r1, [r0, #0]
    41d8:	0cc9      	lsrs	r1, r1, #19
    41da:	6041      	str	r1, [r0, #4]
    41dc:	2100      	movs	r1, #0
    41de:	6081      	str	r1, [r0, #8]
    41e0:	211f      	movs	r1, #31
    41e2:	60c1      	str	r1, [r0, #12]
    41e4:	4770      	bx	lr
    41e6:	0000      	.short	0x0000
    41e8:	20000068 	.word	0x20000068

000041ec <sdc_hci_cmd_cb_reset>:
    41ec:	b510      	push	{r4, lr}
    41ee:	f7ff ffef 	bl	41d0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    41f2:	f00b fab6 	bl	f762 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    41f6:	4604      	mov	r4, r0
    41f8:	4802      	ldr	r0, [pc, #8]	; (4204 <sdc_hci_cmd_cb_reset+0x18>)
    41fa:	6800      	ldr	r0, [r0, #0]
    41fc:	b100      	cbz	r0, 4200 <sdc_hci_cmd_cb_reset+0x14>
    41fe:	4780      	blx	r0
    4200:	4620      	mov	r0, r4
    4202:	bd10      	pop	{r4, pc}
    4204:	20000078 	.word	0x20000078

00004208 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4208:	4901      	ldr	r1, [pc, #4]	; (4210 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    420a:	6008      	str	r0, [r1, #0]
    420c:	4770      	bx	lr
    420e:	0000      	.short	0x0000
    4210:	20000078 	.word	0x20000078

00004214 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4214:	2102      	movs	r1, #2
    4216:	8001      	strh	r1, [r0, #0]
    4218:	8041      	strh	r1, [r0, #2]
    421a:	2100      	movs	r1, #0
    421c:	7101      	strb	r1, [r0, #4]
    421e:	210e      	movs	r1, #14
    4220:	7141      	strb	r1, [r0, #5]
    4222:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4226:	80c1      	strh	r1, [r0, #6]
    4228:	4901      	ldr	r1, [pc, #4]	; (4230 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    422a:	6081      	str	r1, [r0, #8]
    422c:	2000      	movs	r0, #0
    422e:	4770      	bx	lr
    4230:	3c186766 	.word	0x3c186766

00004234 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4234:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4236:	4604      	mov	r4, r0
    4238:	4669      	mov	r1, sp
    423a:	f009 fd19 	bl	dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    423e:	b170      	cbz	r0, 425e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4240:	f240 215a 	movw	r1, #602	; 0x25a
    4244:	e008      	b.n	4258 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4246:	bf00      	nop
    4248:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    424c:	4621      	mov	r1, r4
    424e:	f000 f8a7 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4252:	b120      	cbz	r0, 425e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4254:	f240 215f 	movw	r1, #607	; 0x25f
    4258:	2017      	movs	r0, #23
    425a:	f7ff fe23 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    425e:	4668      	mov	r0, sp
    4260:	f000 f850 	bl	4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4264:	2800      	cmp	r0, #0
    4266:	d0ef      	beq.n	4248 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4268:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000426c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    426c:	b510      	push	{r4, lr}
    426e:	b120      	cbz	r0, 427a <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    4270:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4274:	2017      	movs	r0, #23
    4276:	f7ff fe15 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    427a:	4801      	ldr	r0, [pc, #4]	; (4280 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    427c:	7800      	ldrb	r0, [r0, #0]
    427e:	bd10      	pop	{r4, pc}
    4280:	20000ff8 	.word	0x20000ff8

00004284 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4286:	4605      	mov	r5, r0
    4288:	7808      	ldrb	r0, [r1, #0]
    428a:	784a      	ldrb	r2, [r1, #1]
    428c:	4290      	cmp	r0, r2
    428e:	d902      	bls.n	4296 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4290:	f240 1163 	movw	r1, #355	; 0x163
    4294:	e00a      	b.n	42ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4296:	9500      	str	r5, [sp, #0]
    4298:	b15d      	cbz	r5, 42b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    429a:	2600      	movs	r6, #0
    429c:	1ce8      	adds	r0, r5, #3
    429e:	784c      	ldrb	r4, [r1, #1]
    42a0:	f020 0003 	bic.w	r0, r0, #3
    42a4:	42a8      	cmp	r0, r5
    42a6:	d006      	beq.n	42b6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    42a8:	f240 1179 	movw	r1, #377	; 0x179
    42ac:	2017      	movs	r0, #23
    42ae:	f7ff fdf9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42b2:	2601      	movs	r6, #1
    42b4:	e7f2      	b.n	429c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    42b6:	4f12      	ldr	r7, [pc, #72]	; (4300 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    42b8:	4631      	mov	r1, r6
    42ba:	4668      	mov	r0, sp
    42bc:	703c      	strb	r4, [r7, #0]
    42be:	f000 f8e1 	bl	4484 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    42c2:	2000      	movs	r0, #0
    42c4:	4603      	mov	r3, r0
    42c6:	9900      	ldr	r1, [sp, #0]
    42c8:	1cc9      	adds	r1, r1, #3
    42ca:	f021 0103 	bic.w	r1, r1, #3
    42ce:	9100      	str	r1, [sp, #0]
    42d0:	b966      	cbnz	r6, 42ec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    42d2:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    42d6:	6091      	str	r1, [r2, #8]
    42d8:	2100      	movs	r1, #0
    42da:	e005      	b.n	42e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    42dc:	f8d2 c008 	ldr.w	ip, [r2, #8]
    42e0:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    42e4:	1c49      	adds	r1, r1, #1
    42e6:	b2c9      	uxtb	r1, r1
    42e8:	42a1      	cmp	r1, r4
    42ea:	d3f7      	bcc.n	42dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    42ec:	9900      	ldr	r1, [sp, #0]
    42ee:	1c40      	adds	r0, r0, #1
    42f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    42f4:	9100      	str	r1, [sp, #0]
    42f6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    42fa:	d0e4      	beq.n	42c6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    42fc:	1b48      	subs	r0, r1, r5
    42fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4300:	20000ff8 	.word	0x20000ff8

00004304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4304:	b570      	push	{r4, r5, r6, lr}
    4306:	4604      	mov	r4, r0
    4308:	f009 fd0c 	bl	dd24 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    430c:	b108      	cbz	r0, 4312 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    430e:	2010      	movs	r0, #16
    4310:	bd70      	pop	{r4, r5, r6, pc}
    4312:	7825      	ldrb	r5, [r4, #0]
    4314:	f000 f8f2 	bl	44fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4318:	4602      	mov	r2, r0
    431a:	480c      	ldr	r0, [pc, #48]	; (434c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    431c:	8861      	ldrh	r1, [r4, #2]
    431e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4322:	e00e      	b.n	4342 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4324:	6883      	ldr	r3, [r0, #8]
    4326:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    432a:	b143      	cbz	r3, 433e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    432c:	1c4a      	adds	r2, r1, #1
    432e:	8062      	strh	r2, [r4, #2]
    4330:	80a1      	strh	r1, [r4, #4]
    4332:	6880      	ldr	r0, [r0, #8]
    4334:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4338:	60a0      	str	r0, [r4, #8]
    433a:	2000      	movs	r0, #0
    433c:	bd70      	pop	{r4, r5, r6, pc}
    433e:	1c49      	adds	r1, r1, #1
    4340:	b289      	uxth	r1, r1
    4342:	4291      	cmp	r1, r2
    4344:	d3ee      	bcc.n	4324 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4346:	8061      	strh	r1, [r4, #2]
    4348:	2005      	movs	r0, #5
    434a:	bd70      	pop	{r4, r5, r6, pc}
    434c:	20000ff8 	.word	0x20000ff8

00004350 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4354:	b949      	cbnz	r1, 436a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4356:	4c11      	ldr	r4, [pc, #68]	; (439c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4358:	2700      	movs	r7, #0
    435a:	463b      	mov	r3, r7
    435c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4360:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4364:	f814 c001 	ldrb.w	ip, [r4, r1]
    4368:	e00d      	b.n	4386 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    436a:	2000      	movs	r0, #0
    436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4370:	19dc      	adds	r4, r3, r7
    4372:	f8d5 e008 	ldr.w	lr, [r5, #8]
    4376:	b2a4      	uxth	r4, r4
    4378:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    437c:	f1be 0f00 	cmp.w	lr, #0
    4380:	d004      	beq.n	438c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4382:	1c5b      	adds	r3, r3, #1
    4384:	b29b      	uxth	r3, r3
    4386:	459c      	cmp	ip, r3
    4388:	d8f2      	bhi.n	4370 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    438a:	4634      	mov	r4, r6
    438c:	8004      	strh	r4, [r0, #0]
    438e:	4620      	mov	r0, r4
    4390:	42b4      	cmp	r4, r6
    4392:	d0ea      	beq.n	436a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4398:	f000 b82c 	b.w	43f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    439c:	20000ff8 	.word	0x20000ff8

000043a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    43a0:	b570      	push	{r4, r5, r6, lr}
    43a2:	4606      	mov	r6, r0
    43a4:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    43a8:	f243 0502 	movw	r5, #12290	; 0x3002
    43ac:	38ff      	subs	r0, #255	; 0xff
    43ae:	d01a      	beq.n	43e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    43b0:	b109      	cbz	r1, 43b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    43b2:	2007      	movs	r0, #7
    43b4:	bd70      	pop	{r4, r5, r6, pc}
    43b6:	4630      	mov	r0, r6
    43b8:	f000 f854 	bl	4464 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    43bc:	0004      	movs	r4, r0
    43be:	d012      	beq.n	43e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    43c0:	480a      	ldr	r0, [pc, #40]	; (43ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    43c2:	4621      	mov	r1, r4
    43c4:	6802      	ldr	r2, [r0, #0]
    43c6:	4630      	mov	r0, r6
    43c8:	4790      	blx	r2
    43ca:	4d09      	ldr	r5, [pc, #36]	; (43f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    43cc:	2000      	movs	r0, #0
    43ce:	68a9      	ldr	r1, [r5, #8]
    43d0:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    43d4:	f000 f888 	bl	44e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    43d8:	4602      	mov	r2, r0
    43da:	4621      	mov	r1, r4
    43dc:	6868      	ldr	r0, [r5, #4]
    43de:	f009 fc31 	bl	dc44 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    43e2:	2000      	movs	r0, #0
    43e4:	bd70      	pop	{r4, r5, r6, pc}
    43e6:	4628      	mov	r0, r5
    43e8:	bd70      	pop	{r4, r5, r6, pc}
    43ea:	0000      	.short	0x0000
    43ec:	00004510 	.word	0x00004510
    43f0:	20000ff8 	.word	0x20000ff8
    43f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43f8:	4690      	mov	r8, r2
    43fa:	460e      	mov	r6, r1
    43fc:	4607      	mov	r7, r0
    43fe:	f009 fc47 	bl	dc90 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4402:	b148      	cbz	r0, 4418 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4404:	4815      	ldr	r0, [pc, #84]	; (445c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    4406:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    440a:	68a8      	ldr	r0, [r5, #8]
    440c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4410:	b128      	cbz	r0, 441e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4412:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4416:	e014      	b.n	4442 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4418:	f240 1139 	movw	r1, #313	; 0x139
    441c:	e011      	b.n	4442 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    441e:	6868      	ldr	r0, [r5, #4]
    4420:	2800      	cmp	r0, #0
    4422:	d018      	beq.n	4456 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4424:	4630      	mov	r0, r6
    4426:	f000 f85f 	bl	44e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    442a:	4601      	mov	r1, r0
    442c:	6868      	ldr	r0, [r5, #4]
    442e:	f009 fbbb 	bl	dba8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4432:	0004      	movs	r4, r0
    4434:	d00e      	beq.n	4454 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4436:	68a8      	ldr	r0, [r5, #8]
    4438:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    443c:	b126      	cbz	r6, 4448 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    443e:	f240 1145 	movw	r1, #325	; 0x145
    4442:	2017      	movs	r0, #23
    4444:	f7ff fd2e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4448:	4805      	ldr	r0, [pc, #20]	; (4460 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    444a:	4642      	mov	r2, r8
    444c:	4621      	mov	r1, r4
    444e:	6803      	ldr	r3, [r0, #0]
    4450:	4638      	mov	r0, r7
    4452:	4798      	blx	r3
    4454:	4620      	mov	r0, r4
    4456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    445a:	0000      	.short	0x0000
    445c:	20000ff8 	.word	0x20000ff8
    4460:	0000450c 	.word	0x0000450c
    4464:	b570      	push	{r4, r5, r6, lr}
    4466:	460c      	mov	r4, r1
    4468:	4605      	mov	r5, r0
    446a:	f009 fc11 	bl	dc90 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    446e:	2800      	cmp	r0, #0
    4470:	d005      	beq.n	447e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    4472:	4803      	ldr	r0, [pc, #12]	; (4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4474:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4478:	6880      	ldr	r0, [r0, #8]
    447a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    447e:	bd70      	pop	{r4, r5, r6, pc}
    4480:	20000ff8 	.word	0x20000ff8
    4484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4488:	4e16      	ldr	r6, [pc, #88]	; (44e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    448a:	4688      	mov	r8, r1
    448c:	4605      	mov	r5, r0
    448e:	2400      	movs	r4, #0
    4490:	6828      	ldr	r0, [r5, #0]
    4492:	1cc0      	adds	r0, r0, #3
    4494:	f020 0003 	bic.w	r0, r0, #3
    4498:	6028      	str	r0, [r5, #0]
    449a:	4620      	mov	r0, r4
    449c:	f000 f824 	bl	44e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    44a0:	5d31      	ldrb	r1, [r6, r4]
    44a2:	4348      	muls	r0, r1
    44a4:	f1b8 0f00 	cmp.w	r8, #0
    44a8:	d001      	beq.n	44ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    44aa:	2200      	movs	r2, #0
    44ac:	e000      	b.n	44b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    44ae:	682a      	ldr	r2, [r5, #0]
    44b0:	4601      	mov	r1, r0
    44b2:	9200      	str	r2, [sp, #0]
    44b4:	b132      	cbz	r2, 44c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    44b6:	2700      	movs	r7, #0
    44b8:	ea4f 000d 	mov.w	r0, sp
    44bc:	f009 fba1 	bl	dc02 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44c0:	b11f      	cbz	r7, 44ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    44c2:	e006      	b.n	44d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    44c4:	2701      	movs	r7, #1
    44c6:	2000      	movs	r0, #0
    44c8:	e7f8      	b.n	44bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    44ca:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    44ce:	9a00      	ldr	r2, [sp, #0]
    44d0:	604a      	str	r2, [r1, #4]
    44d2:	6829      	ldr	r1, [r5, #0]
    44d4:	1c64      	adds	r4, r4, #1
    44d6:	4408      	add	r0, r1
    44d8:	6028      	str	r0, [r5, #0]
    44da:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    44de:	d0d7      	beq.n	4490 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    44e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44e4:	20000ff8 	.word	0x20000ff8
    44e8:	4903      	ldr	r1, [pc, #12]	; (44f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    44ea:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    44ee:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    44f2:	1cc0      	adds	r0, r0, #3
    44f4:	4008      	ands	r0, r1
    44f6:	4770      	bx	lr
    44f8:	00004508 	.word	0x00004508
    44fc:	4801      	ldr	r0, [pc, #4]	; (4504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    44fe:	7800      	ldrb	r0, [r0, #0]
    4500:	4770      	bx	lr
    4502:	0000      	.short	0x0000
    4504:	20000ff8 	.word	0x20000ff8
    4508:	000001e0 	.word	0x000001e0
    450c:	0000dca5 	.word	0x0000dca5
    4510:	0000ee3d 	.word	0x0000ee3d

00004514 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4514:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4518:	4c26      	ldr	r4, [pc, #152]	; (45b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    451a:	4680      	mov	r8, r0
    451c:	b081      	sub	sp, #4
    451e:	6820      	ldr	r0, [r4, #0]
    4520:	469a      	mov	sl, r3
    4522:	4693      	mov	fp, r2
    4524:	b158      	cbz	r0, 453e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4526:	7a02      	ldrb	r2, [r0, #8]
    4528:	4542      	cmp	r2, r8
    452a:	d903      	bls.n	4534 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    452c:	6841      	ldr	r1, [r0, #4]
    452e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4532:	b140      	cbz	r0, 4546 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4534:	f243 0002 	movw	r0, #12290	; 0x3002
    4538:	b005      	add	sp, #20
    453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    453e:	21a5      	movs	r1, #165	; 0xa5
    4540:	2018      	movs	r0, #24
    4542:	f7ff fcaf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4546:	4619      	mov	r1, r3
    4548:	9802      	ldr	r0, [sp, #8]
    454a:	f009 fbc3 	bl	dcd4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    454e:	b286      	uxth	r6, r0
    4550:	4658      	mov	r0, fp
    4552:	990e      	ldr	r1, [sp, #56]	; 0x38
    4554:	f009 fbb5 	bl	dcc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4558:	b285      	uxth	r5, r0
    455a:	1970      	adds	r0, r6, r5
    455c:	1d00      	adds	r0, r0, #4
    455e:	b287      	uxth	r7, r0
    4560:	6820      	ldr	r0, [r4, #0]
    4562:	46a1      	mov	r9, r4
    4564:	4639      	mov	r1, r7
    4566:	6800      	ldr	r0, [r0, #0]
    4568:	f009 fb1e 	bl	dba8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    456c:	0004      	movs	r4, r0
    456e:	d01f      	beq.n	45b0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4570:	8067      	strh	r7, [r4, #2]
    4572:	8025      	strh	r5, [r4, #0]
    4574:	4629      	mov	r1, r5
    4576:	1d20      	adds	r0, r4, #4
    4578:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    457a:	4607      	mov	r7, r0
    457c:	465a      	mov	r2, fp
    457e:	2301      	movs	r3, #1
    4580:	9500      	str	r5, [sp, #0]
    4582:	f009 fa71 	bl	da68 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4586:	8820      	ldrh	r0, [r4, #0]
    4588:	4631      	mov	r1, r6
    458a:	4438      	add	r0, r7
    458c:	2301      	movs	r3, #1
    458e:	9a02      	ldr	r2, [sp, #8]
    4590:	f8cd a000 	str.w	sl, [sp]
    4594:	f009 fa68 	bl	da68 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4598:	8820      	ldrh	r0, [r4, #0]
    459a:	19c1      	adds	r1, r0, r7
    459c:	4638      	mov	r0, r7
    459e:	f009 fa94 	bl	daca <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    45a2:	f8d9 0000 	ldr.w	r0, [r9]
    45a6:	6841      	ldr	r1, [r0, #4]
    45a8:	2000      	movs	r0, #0
    45aa:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    45ae:	e7c3      	b.n	4538 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    45b0:	2004      	movs	r0, #4
    45b2:	e7c1      	b.n	4538 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    45b4:	2000007c 	.word	0x2000007c

000045b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    45b8:	b570      	push	{r4, r5, r6, lr}
    45ba:	4c14      	ldr	r4, [pc, #80]	; (460c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    45bc:	6823      	ldr	r3, [r4, #0]
    45be:	b18b      	cbz	r3, 45e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    45c0:	7a19      	ldrb	r1, [r3, #8]
    45c2:	4281      	cmp	r1, r0
    45c4:	d912      	bls.n	45ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45c6:	685a      	ldr	r2, [r3, #4]
    45c8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    45cc:	b171      	cbz	r1, 45ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45ce:	2500      	movs	r5, #0
    45d0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    45d4:	884a      	ldrh	r2, [r1, #2]
    45d6:	6818      	ldr	r0, [r3, #0]
    45d8:	f009 fb34 	bl	dc44 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    45dc:	6821      	ldr	r1, [r4, #0]
    45de:	2000      	movs	r0, #0
    45e0:	7a0a      	ldrb	r2, [r1, #8]
    45e2:	e00c      	b.n	45fe <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    45e4:	21c8      	movs	r1, #200	; 0xc8
    45e6:	2018      	movs	r0, #24
    45e8:	f7ff fc5c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45ec:	f243 0002 	movw	r0, #12290	; 0x3002
    45f0:	bd70      	pop	{r4, r5, r6, pc}
    45f2:	684b      	ldr	r3, [r1, #4]
    45f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    45f8:	b933      	cbnz	r3, 4608 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    45fa:	1c40      	adds	r0, r0, #1
    45fc:	b2c0      	uxtb	r0, r0
    45fe:	4282      	cmp	r2, r0
    4600:	d8f7      	bhi.n	45f2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4602:	6808      	ldr	r0, [r1, #0]
    4604:	f009 fb13 	bl	dc2e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4608:	2000      	movs	r0, #0
    460a:	bd70      	pop	{r4, r5, r6, pc}
    460c:	2000007c 	.word	0x2000007c

00004610 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4614:	460d      	mov	r5, r1
    4616:	0004      	movs	r4, r0
    4618:	4690      	mov	r8, r2
    461a:	f04f 0600 	mov.w	r6, #0
    461e:	d009      	beq.n	4634 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4620:	2700      	movs	r7, #0
    4622:	1ce0      	adds	r0, r4, #3
    4624:	f020 0003 	bic.w	r0, r0, #3
    4628:	42a0      	cmp	r0, r4
    462a:	d005      	beq.n	4638 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    462c:	2186      	movs	r1, #134	; 0x86
    462e:	2018      	movs	r0, #24
    4630:	f7ff fc38 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4634:	2701      	movs	r7, #1
    4636:	e7f4      	b.n	4622 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4638:	b1cd      	cbz	r5, 466e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    463a:	4611      	mov	r1, r2
    463c:	2000      	movs	r0, #0
    463e:	f009 fae0 	bl	dc02 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4642:	300c      	adds	r0, #12
    4644:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4648:	b98f      	cbnz	r7, 466e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    464a:	4f0a      	ldr	r7, [pc, #40]	; (4674 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    464c:	f104 000c 	add.w	r0, r4, #12
    4650:	00aa      	lsls	r2, r5, #2
    4652:	603c      	str	r4, [r7, #0]
    4654:	7225      	strb	r5, [r4, #8]
    4656:	6060      	str	r0, [r4, #4]
    4658:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    465c:	6020      	str	r0, [r4, #0]
    465e:	2100      	movs	r1, #0
    4660:	6860      	ldr	r0, [r4, #4]
    4662:	f008 fab8 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4666:	4641      	mov	r1, r8
    4668:	6838      	ldr	r0, [r7, #0]
    466a:	f009 faca 	bl	dc02 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    466e:	4630      	mov	r0, r6
    4670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4674:	2000007c 	.word	0x2000007c

00004678 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4678:	b570      	push	{r4, r5, r6, lr}
    467a:	4d08      	ldr	r5, [pc, #32]	; (469c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    467c:	6828      	ldr	r0, [r5, #0]
    467e:	2800      	cmp	r0, #0
    4680:	d00a      	beq.n	4698 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4682:	2400      	movs	r4, #0
    4684:	e004      	b.n	4690 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4686:	4620      	mov	r0, r4
    4688:	f7ff ff96 	bl	45b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    468c:	1c64      	adds	r4, r4, #1
    468e:	b2e4      	uxtb	r4, r4
    4690:	6828      	ldr	r0, [r5, #0]
    4692:	7a00      	ldrb	r0, [r0, #8]
    4694:	42a0      	cmp	r0, r4
    4696:	d8f6      	bhi.n	4686 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4698:	bd70      	pop	{r4, r5, r6, pc}
    469a:	0000      	.short	0x0000
    469c:	2000007c 	.word	0x2000007c

000046a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    46a0:	4909      	ldr	r1, [pc, #36]	; (46c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    46a2:	b510      	push	{r4, lr}
    46a4:	4602      	mov	r2, r0
    46a6:	6809      	ldr	r1, [r1, #0]
    46a8:	2000      	movs	r0, #0
    46aa:	b149      	cbz	r1, 46c0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    46ac:	7a0b      	ldrb	r3, [r1, #8]
    46ae:	4293      	cmp	r3, r2
    46b0:	d905      	bls.n	46be <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    46b2:	6849      	ldr	r1, [r1, #4]
    46b4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    46b8:	2900      	cmp	r1, #0
    46ba:	d000      	beq.n	46be <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    46bc:	1d08      	adds	r0, r1, #4
    46be:	bd10      	pop	{r4, pc}
    46c0:	21ee      	movs	r1, #238	; 0xee
    46c2:	2018      	movs	r0, #24
    46c4:	f7ff fbee 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c8:	2000007c 	.word	0x2000007c

000046cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    46cc:	490a      	ldr	r1, [pc, #40]	; (46f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    46ce:	b510      	push	{r4, lr}
    46d0:	4602      	mov	r2, r0
    46d2:	6809      	ldr	r1, [r1, #0]
    46d4:	2000      	movs	r0, #0
    46d6:	b159      	cbz	r1, 46f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    46d8:	7a0b      	ldrb	r3, [r1, #8]
    46da:	4293      	cmp	r3, r2
    46dc:	d907      	bls.n	46ee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46de:	6849      	ldr	r1, [r1, #4]
    46e0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    46e4:	2900      	cmp	r1, #0
    46e6:	d002      	beq.n	46ee <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46e8:	f831 0b04 	ldrh.w	r0, [r1], #4
    46ec:	4408      	add	r0, r1
    46ee:	bd10      	pop	{r4, pc}
    46f0:	21fc      	movs	r1, #252	; 0xfc
    46f2:	2018      	movs	r0, #24
    46f4:	f7ff fbd6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f8:	2000007c 	.word	0x2000007c

000046fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    46fc:	4801      	ldr	r0, [pc, #4]	; (4704 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    46fe:	7840      	ldrb	r0, [r0, #1]
    4700:	4770      	bx	lr
    4702:	0000      	.short	0x0000
    4704:	20000080 	.word	0x20000080

00004708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4708:	4801      	ldr	r0, [pc, #4]	; (4710 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    470a:	6840      	ldr	r0, [r0, #4]
    470c:	4770      	bx	lr
    470e:	0000      	.short	0x0000
    4710:	20000080 	.word	0x20000080

00004714 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4718:	460c      	mov	r4, r1
    471a:	4607      	mov	r7, r0
    471c:	4616      	mov	r6, r2
    471e:	211c      	movs	r1, #28
    4720:	4610      	mov	r0, r2
    4722:	460d      	mov	r5, r1
    4724:	4622      	mov	r2, r4
    4726:	f009 f9fa 	bl	db1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    472a:	4680      	mov	r8, r0
    472c:	b157      	cbz	r7, 4744 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    472e:	4638      	mov	r0, r7
    4730:	4641      	mov	r1, r8
    4732:	4632      	mov	r2, r6
    4734:	462b      	mov	r3, r5
    4736:	9400      	str	r4, [sp, #0]
    4738:	f009 f996 	bl	da68 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    473c:	4803      	ldr	r0, [pc, #12]	; (474c <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    473e:	6047      	str	r7, [r0, #4]
    4740:	7004      	strb	r4, [r0, #0]
    4742:	7046      	strb	r6, [r0, #1]
    4744:	4640      	mov	r0, r8
    4746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    474a:	0000      	.short	0x0000
    474c:	20000080 	.word	0x20000080

00004750 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    4750:	4802      	ldr	r0, [pc, #8]	; (475c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    4752:	7842      	ldrb	r2, [r0, #1]
    4754:	7801      	ldrb	r1, [r0, #0]
    4756:	6840      	ldr	r0, [r0, #4]
    4758:	f7ff bfdc 	b.w	4714 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    475c:	20000080 	.word	0x20000080
    4760:	4909      	ldr	r1, [pc, #36]	; (4788 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    4762:	b510      	push	{r4, lr}
    4764:	4807      	ldr	r0, [pc, #28]	; (4784 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4766:	6008      	str	r0, [r1, #0]
    4768:	4b08      	ldr	r3, [pc, #32]	; (478c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    476a:	2011      	movs	r0, #17
    476c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4770:	2200      	movs	r2, #0
    4772:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4776:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    477a:	1c40      	adds	r0, r0, #1
    477c:	b2c0      	uxtb	r0, r0
    477e:	2814      	cmp	r0, #20
    4780:	d3f4      	bcc.n	476c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    4782:	bd10      	pop	{r4, pc}
    4784:	fffe0000 	.word	0xfffe0000
    4788:	4001f508 	.word	0x4001f508
    478c:	4001f000 	.word	0x4001f000
    4790:	b570      	push	{r4, r5, r6, lr}
    4792:	2420      	movs	r4, #32
    4794:	2100      	movs	r1, #0
    4796:	2301      	movs	r3, #1
    4798:	fa20 f201 	lsr.w	r2, r0, r1
    479c:	07d2      	lsls	r2, r2, #31
    479e:	d020      	beq.n	47e2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    47a0:	b24a      	sxtb	r2, r1
    47a2:	2a00      	cmp	r2, #0
    47a4:	db10      	blt.n	47c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    47a6:	bf00      	nop
    47a8:	ea4f 1652 	mov.w	r6, r2, lsr #5
    47ac:	ea4f 0686 	mov.w	r6, r6, lsl #2
    47b0:	f002 051f 	and.w	r5, r2, #31
    47b4:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    47b8:	fa03 f505 	lsl.w	r5, r3, r5
    47bc:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    47c0:	f3bf 8f4f 	dsb	sy
    47c4:	f3bf 8f6f 	isb	sy
    47c8:	db0b      	blt.n	47e2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    47ca:	f002 051f 	and.w	r5, r2, #31
    47ce:	ea4f 1252 	mov.w	r2, r2, lsr #5
    47d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    47d6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47da:	fa03 f505 	lsl.w	r5, r3, r5
    47de:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    47e2:	f101 0101 	add.w	r1, r1, #1
    47e6:	42a1      	cmp	r1, r4
    47e8:	d3d6      	bcc.n	4798 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    47ea:	bd70      	pop	{r4, r5, r6, pc}
    47ec:	b570      	push	{r4, r5, r6, lr}
    47ee:	0042      	lsls	r2, r0, #1
    47f0:	f04f 0100 	mov.w	r1, #0
    47f4:	d501      	bpl.n	47fa <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    47f6:	4a14      	ldr	r2, [pc, #80]	; (4848 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    47f8:	6011      	str	r1, [r2, #0]
    47fa:	f3c0 3280 	ubfx	r2, r0, #14, #1
    47fe:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4802:	429a      	cmp	r2, r3
    4804:	d003      	beq.n	480e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4806:	2169      	movs	r1, #105	; 0x69
    4808:	201b      	movs	r0, #27
    480a:	f7ff fb4b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    480e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4812:	d014      	beq.n	483e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4814:	4a0d      	ldr	r2, [pc, #52]	; (484c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4816:	2001      	movs	r0, #1
    4818:	6050      	str	r0, [r2, #4]
    481a:	1e83      	subs	r3, r0, #2
    481c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4820:	4a0b      	ldr	r2, [pc, #44]	; (4850 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4822:	6090      	str	r0, [r2, #8]
    4824:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4828:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    482c:	4c09      	ldr	r4, [pc, #36]	; (4854 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    482e:	6021      	str	r1, [r4, #0]
    4830:	1d25      	adds	r5, r4, #4
    4832:	6028      	str	r0, [r5, #0]
    4834:	6090      	str	r0, [r2, #8]
    4836:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    483a:	6021      	str	r1, [r4, #0]
    483c:	6028      	str	r0, [r5, #0]
    483e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4842:	f7ff bf8d 	b.w	4760 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4846:	0000      	.short	0x0000
    4848:	4001e504 	.word	0x4001e504
    484c:	4000e000 	.word	0x4000e000
    4850:	4000f000 	.word	0x4000f000
    4854:	4000f500 	.word	0x4000f500

00004858 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4858:	b570      	push	{r4, r5, r6, lr}
    485a:	4c0a      	ldr	r4, [pc, #40]	; (4884 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    485c:	460d      	mov	r5, r1
    485e:	6020      	str	r0, [r4, #0]
    4860:	f7ff ffc4 	bl	47ec <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4864:	6820      	ldr	r0, [r4, #0]
    4866:	f7ff ff93 	bl	4790 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    486a:	f000 f883 	bl	4974 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    486e:	f7ff ff77 	bl	4760 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4872:	f009 fa4c 	bl	dd0e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4876:	4628      	mov	r0, r5
    4878:	f000 f8b6 	bl	49e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    487c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4880:	f000 b8ce 	b.w	4a20 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4884:	20000088 	.word	0x20000088

00004888 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4888:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    488c:	4c36      	ldr	r4, [pc, #216]	; (4968 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    488e:	b082      	sub	sp, #8
    4890:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4894:	2601      	movs	r6, #1
    4896:	4835      	ldr	r0, [pc, #212]	; (496c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4898:	f008 f87a 	bl	c990 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    489c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 496c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    48a0:	b920      	cbnz	r0, 48ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    48a2:	2600      	movs	r6, #0
    48a4:	f109 0001 	add.w	r0, r9, #1
    48a8:	f008 f889 	bl	c9be <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    48ac:	f44f 7580 	mov.w	r5, #256	; 0x100
    48b0:	f04f 0800 	mov.w	r8, #0
    48b4:	1d2f      	adds	r7, r5, #4
    48b6:	2101      	movs	r1, #1
    48b8:	6061      	str	r1, [r4, #4]
    48ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48be:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    48c2:	9802      	ldr	r0, [sp, #8]
    48c4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    48c8:	6021      	str	r1, [r4, #0]
    48ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4970 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    48ce:	e01c      	b.n	490a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    48d0:	f8da 0000 	ldr.w	r0, [sl]
    48d4:	06c0      	lsls	r0, r0, #27
    48d6:	d518      	bpl.n	490a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    48d8:	200e      	movs	r0, #14
    48da:	f009 fa04 	bl	dce6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    48de:	f3ef 8010 	mrs	r0, PRIMASK
    48e2:	9000      	str	r0, [sp, #0]
    48e4:	b672      	cpsid	i
    48e6:	2103      	movs	r1, #3
    48e8:	4620      	mov	r0, r4
    48ea:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    48ee:	4629      	mov	r1, r5
    48f0:	f009 fa06 	bl	dd00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    48f4:	b930      	cbnz	r0, 4904 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    48f6:	4639      	mov	r1, r7
    48f8:	4620      	mov	r0, r4
    48fa:	f009 fa01 	bl	dd00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    48fe:	b908      	cbnz	r0, 4904 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4900:	f7ff f916 	bl	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4904:	9800      	ldr	r0, [sp, #0]
    4906:	b900      	cbnz	r0, 490a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4908:	b662      	cpsie	i
    490a:	4629      	mov	r1, r5
    490c:	4620      	mov	r0, r4
    490e:	f009 f9f7 	bl	dd00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4912:	b928      	cbnz	r0, 4920 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4914:	4639      	mov	r1, r7
    4916:	4620      	mov	r0, r4
    4918:	f009 f9f2 	bl	dd00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    491c:	2800      	cmp	r0, #0
    491e:	d0d7      	beq.n	48d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4920:	4639      	mov	r1, r7
    4922:	4620      	mov	r0, r4
    4924:	f009 f9ec 	bl	dd00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4928:	2800      	cmp	r0, #0
    492a:	d1c4      	bne.n	48b6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    492c:	b136      	cbz	r6, 493c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    492e:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4932:	f109 0001 	add.w	r0, r9, #1
    4936:	f008 f82b 	bl	c990 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    493a:	e012      	b.n	4962 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    493c:	f109 0001 	add.w	r0, r9, #1
    4940:	f008 f826 	bl	c990 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4944:	2800      	cmp	r0, #0
    4946:	d1ad      	bne.n	48a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4948:	2003      	movs	r0, #3
    494a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    494e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4952:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4956:	200e      	movs	r0, #14
    4958:	f009 f9c5 	bl	dce6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    495c:	4803      	ldr	r0, [pc, #12]	; (496c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    495e:	f008 f82e 	bl	c9be <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4962:	2000      	movs	r0, #0
    4964:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4968:	4000e000 	.word	0x4000e000
    496c:	2000028b 	.word	0x2000028b
    4970:	e000ed10 	.word	0xe000ed10

00004974 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4974:	b510      	push	{r4, lr}
    4976:	4808      	ldr	r0, [pc, #32]	; (4998 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4978:	f008 f81d 	bl	c9b6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    497c:	b108      	cbz	r0, 4982 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    497e:	2125      	movs	r1, #37	; 0x25
    4980:	e006      	b.n	4990 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4982:	4805      	ldr	r0, [pc, #20]	; (4998 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4984:	1c40      	adds	r0, r0, #1
    4986:	f008 f816 	bl	c9b6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    498a:	2800      	cmp	r0, #0
    498c:	d003      	beq.n	4996 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    498e:	2129      	movs	r1, #41	; 0x29
    4990:	201d      	movs	r0, #29
    4992:	f7ff fa87 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4996:	bd10      	pop	{r4, pc}
    4998:	2000028b 	.word	0x2000028b

0000499c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    499c:	b570      	push	{r4, r5, r6, lr}
    499e:	4911      	ldr	r1, [pc, #68]	; (49e4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    49a0:	680a      	ldr	r2, [r1, #0]
    49a2:	b1ea      	cbz	r2, 49e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    49a4:	2300      	movs	r3, #0
    49a6:	461d      	mov	r5, r3
    49a8:	2401      	movs	r4, #1
    49aa:	684a      	ldr	r2, [r1, #4]
    49ac:	1c52      	adds	r2, r2, #1
    49ae:	604a      	str	r2, [r1, #4]
    49b0:	2a0c      	cmp	r2, #12
    49b2:	d300      	bcc.n	49b6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    49b4:	604d      	str	r5, [r1, #4]
    49b6:	790e      	ldrb	r6, [r1, #4]
    49b8:	fa04 f206 	lsl.w	r2, r4, r6
    49bc:	680e      	ldr	r6, [r1, #0]
    49be:	4216      	tst	r6, r2
    49c0:	d00b      	beq.n	49da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    49c2:	f3ef 8310 	mrs	r3, PRIMASK
    49c6:	b672      	cpsid	i
    49c8:	680c      	ldr	r4, [r1, #0]
    49ca:	4394      	bics	r4, r2
    49cc:	600c      	str	r4, [r1, #0]
    49ce:	b903      	cbnz	r3, 49d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    49d0:	b662      	cpsie	i
    49d2:	6849      	ldr	r1, [r1, #4]
    49d4:	6001      	str	r1, [r0, #0]
    49d6:	2000      	movs	r0, #0
    49d8:	bd70      	pop	{r4, r5, r6, pc}
    49da:	1c5b      	adds	r3, r3, #1
    49dc:	2b0c      	cmp	r3, #12
    49de:	d3e4      	bcc.n	49aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    49e0:	2005      	movs	r0, #5
    49e2:	bd70      	pop	{r4, r5, r6, pc}
    49e4:	2000008c 	.word	0x2000008c

000049e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    49e8:	4802      	ldr	r0, [pc, #8]	; (49f4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    49ea:	2100      	movs	r1, #0
    49ec:	6001      	str	r1, [r0, #0]
    49ee:	6041      	str	r1, [r0, #4]
    49f0:	4770      	bx	lr
    49f2:	0000      	.short	0x0000
    49f4:	2000008c 	.word	0x2000008c

000049f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    49f8:	b510      	push	{r4, lr}
    49fa:	4c08      	ldr	r4, [pc, #32]	; (4a1c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    49fc:	7861      	ldrb	r1, [r4, #1]
    49fe:	b109      	cbz	r1, 4a04 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4a00:	200f      	movs	r0, #15
    4a02:	bd10      	pop	{r4, pc}
    4a04:	f7ff f820 	bl	3a48 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4a08:	7020      	strb	r0, [r4, #0]
    4a0a:	28ff      	cmp	r0, #255	; 0xff
    4a0c:	d001      	beq.n	4a12 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4a0e:	2000      	movs	r0, #0
    4a10:	bd10      	pop	{r4, pc}
    4a12:	2176      	movs	r1, #118	; 0x76
    4a14:	201f      	movs	r0, #31
    4a16:	f7ff fa45 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a1a:	0000      	.short	0x0000
    4a1c:	20000094 	.word	0x20000094

00004a20 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4a20:	4901      	ldr	r1, [pc, #4]	; (4a28 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4a22:	2000      	movs	r0, #0
    4a24:	7048      	strb	r0, [r1, #1]
    4a26:	4770      	bx	lr
    4a28:	20000094 	.word	0x20000094

00004a2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4a2c:	4806      	ldr	r0, [pc, #24]	; (4a48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4a2e:	4a07      	ldr	r2, [pc, #28]	; (4a4c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4a30:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4a32:	8852      	ldrh	r2, [r2, #2]
    4a34:	4291      	cmp	r1, r2
    4a36:	d104      	bne.n	4a42 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4a38:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4a3c:	b108      	cbz	r0, 4a42 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4a3e:	2000      	movs	r0, #0
    4a40:	4770      	bx	lr
    4a42:	2001      	movs	r0, #1
    4a44:	4770      	bx	lr
    4a46:	0000      	.short	0x0000
    4a48:	2000117c 	.word	0x2000117c
    4a4c:	20000270 	.word	0x20000270

00004a50 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4a50:	4901      	ldr	r1, [pc, #4]	; (4a58 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4a52:	8048      	strh	r0, [r1, #2]
    4a54:	4770      	bx	lr
    4a56:	0000      	.short	0x0000
    4a58:	20000270 	.word	0x20000270

00004a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4a5c:	4808      	ldr	r0, [pc, #32]	; (4a80 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4a5e:	4a09      	ldr	r2, [pc, #36]	; (4a84 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4a60:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4a62:	8852      	ldrh	r2, [r2, #2]
    4a64:	4291      	cmp	r1, r2
    4a66:	d109      	bne.n	4a7c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a6c:	8481      	strh	r1, [r0, #36]	; 0x24
    4a6e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a72:	b119      	cbz	r1, 4a7c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a74:	2100      	movs	r1, #0
    4a76:	7001      	strb	r1, [r0, #0]
    4a78:	2001      	movs	r0, #1
    4a7a:	4770      	bx	lr
    4a7c:	2000      	movs	r0, #0
    4a7e:	4770      	bx	lr
    4a80:	2000117c 	.word	0x2000117c
    4a84:	20000270 	.word	0x20000270

00004a88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4a88:	4807      	ldr	r0, [pc, #28]	; (4aa8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4a8a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a8e:	2901      	cmp	r1, #1
    4a90:	d007      	beq.n	4aa2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4a92:	2101      	movs	r1, #1
    4a94:	7001      	strb	r1, [r0, #0]
    4a96:	4805      	ldr	r0, [pc, #20]	; (4aac <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4a98:	4903      	ldr	r1, [pc, #12]	; (4aa8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4a9a:	8800      	ldrh	r0, [r0, #0]
    4a9c:	8488      	strh	r0, [r1, #36]	; 0x24
    4a9e:	2001      	movs	r0, #1
    4aa0:	4770      	bx	lr
    4aa2:	2000      	movs	r0, #0
    4aa4:	4770      	bx	lr
    4aa6:	0000      	.short	0x0000
    4aa8:	2000117c 	.word	0x2000117c
    4aac:	20000270 	.word	0x20000270

00004ab0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4ab0:	4906      	ldr	r1, [pc, #24]	; (4acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4ab2:	4b07      	ldr	r3, [pc, #28]	; (4ad0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4ab4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4ab6:	885b      	ldrh	r3, [r3, #2]
    4ab8:	429a      	cmp	r2, r3
    4aba:	d105      	bne.n	4ac8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4abc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4ac0:	b112      	cbz	r2, 4ac8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4ac2:	6001      	str	r1, [r0, #0]
    4ac4:	2001      	movs	r0, #1
    4ac6:	4770      	bx	lr
    4ac8:	2000      	movs	r0, #0
    4aca:	4770      	bx	lr
    4acc:	2000117c 	.word	0x2000117c
    4ad0:	20000270 	.word	0x20000270

00004ad4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4ad4:	4909      	ldr	r1, [pc, #36]	; (4afc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4ad6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4ad8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4adc:	3bff      	subs	r3, #255	; 0xff
    4ade:	d002      	beq.n	4ae6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4ae0:	2100      	movs	r1, #0
    4ae2:	6001      	str	r1, [r0, #0]
    4ae4:	e007      	b.n	4af6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4ae6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4aea:	4904      	ldr	r1, [pc, #16]	; (4afc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4aec:	2a01      	cmp	r2, #1
    4aee:	d002      	beq.n	4af6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4af0:	6001      	str	r1, [r0, #0]
    4af2:	2001      	movs	r0, #1
    4af4:	4770      	bx	lr
    4af6:	2000      	movs	r0, #0
    4af8:	4770      	bx	lr
    4afa:	0000      	.short	0x0000
    4afc:	2000117c 	.word	0x2000117c

00004b00 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4b00:	4901      	ldr	r1, [pc, #4]	; (4b08 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4b02:	8008      	strh	r0, [r1, #0]
    4b04:	4770      	bx	lr
    4b06:	0000      	.short	0x0000
    4b08:	20000270 	.word	0x20000270

00004b0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4b0c:	4905      	ldr	r1, [pc, #20]	; (4b24 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4b0e:	2000      	movs	r0, #0
    4b10:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4b14:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4b18:	8488      	strh	r0, [r1, #36]	; 0x24
    4b1a:	4903      	ldr	r1, [pc, #12]	; (4b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4b1c:	8008      	strh	r0, [r1, #0]
    4b1e:	8048      	strh	r0, [r1, #2]
    4b20:	4770      	bx	lr
    4b22:	0000      	.short	0x0000
    4b24:	2000117c 	.word	0x2000117c
    4b28:	20000270 	.word	0x20000270
    4b2c:	4905      	ldr	r1, [pc, #20]	; (4b44 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4b2e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4b30:	4282      	cmp	r2, r0
    4b32:	d105      	bne.n	4b40 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4b34:	2000      	movs	r0, #0
    4b36:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4b3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4b3e:	8488      	strh	r0, [r1, #36]	; 0x24
    4b40:	4770      	bx	lr
    4b42:	0000      	.short	0x0000
    4b44:	2000117c 	.word	0x2000117c

00004b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4b48:	4a0a      	ldr	r2, [pc, #40]	; (4b74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4b4a:	b110      	cbz	r0, 4b52 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4b4c:	2801      	cmp	r0, #1
    4b4e:	d007      	beq.n	4b60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4b50:	e00e      	b.n	4b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b52:	7850      	ldrb	r0, [r2, #1]
    4b54:	b160      	cbz	r0, 4b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b56:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4b5a:	6008      	str	r0, [r1, #0]
    4b5c:	88d0      	ldrh	r0, [r2, #6]
    4b5e:	e004      	b.n	4b6a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4b60:	7810      	ldrb	r0, [r2, #0]
    4b62:	b128      	cbz	r0, 4b70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b64:	6890      	ldr	r0, [r2, #8]
    4b66:	6008      	str	r0, [r1, #0]
    4b68:	8990      	ldrh	r0, [r2, #12]
    4b6a:	8088      	strh	r0, [r1, #4]
    4b6c:	2001      	movs	r0, #1
    4b6e:	4770      	bx	lr
    4b70:	2000      	movs	r0, #0
    4b72:	4770      	bx	lr
    4b74:	2000028d 	.word	0x2000028d

00004b78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4b78:	4a08      	ldr	r2, [pc, #32]	; (4b9c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4b7a:	2301      	movs	r3, #1
    4b7c:	b138      	cbz	r0, 4b8e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4b7e:	2801      	cmp	r0, #1
    4b80:	d104      	bne.n	4b8c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4b82:	7013      	strb	r3, [r2, #0]
    4b84:	6808      	ldr	r0, [r1, #0]
    4b86:	6090      	str	r0, [r2, #8]
    4b88:	8888      	ldrh	r0, [r1, #4]
    4b8a:	8190      	strh	r0, [r2, #12]
    4b8c:	4770      	bx	lr
    4b8e:	7053      	strb	r3, [r2, #1]
    4b90:	6808      	ldr	r0, [r1, #0]
    4b92:	f8c2 0002 	str.w	r0, [r2, #2]
    4b96:	8888      	ldrh	r0, [r1, #4]
    4b98:	80d0      	strh	r0, [r2, #6]
    4b9a:	4770      	bx	lr
    4b9c:	2000028d 	.word	0x2000028d

00004ba0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ba0:	4906      	ldr	r1, [pc, #24]	; (4bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ba2:	b110      	cbz	r0, 4baa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4ba4:	2801      	cmp	r0, #1
    4ba6:	d002      	beq.n	4bae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4ba8:	e005      	b.n	4bb6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4baa:	7848      	ldrb	r0, [r1, #1]
    4bac:	e000      	b.n	4bb0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4bae:	7808      	ldrb	r0, [r1, #0]
    4bb0:	b108      	cbz	r0, 4bb6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4bb2:	2001      	movs	r0, #1
    4bb4:	4770      	bx	lr
    4bb6:	2000      	movs	r0, #0
    4bb8:	4770      	bx	lr
    4bba:	0000      	.short	0x0000
    4bbc:	2000028d 	.word	0x2000028d

00004bc0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4bc0:	4901      	ldr	r1, [pc, #4]	; (4bc8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4bc2:	7448      	strb	r0, [r1, #17]
    4bc4:	4770      	bx	lr
    4bc6:	0000      	.short	0x0000
    4bc8:	200009da 	.word	0x200009da

00004bcc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4bcc:	b578      	push	{r3, r4, r5, r6, lr}
    4bce:	4913      	ldr	r1, [pc, #76]	; (4c1c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4bd0:	7c4a      	ldrb	r2, [r1, #17]
    4bd2:	b30a      	cbz	r2, 4c18 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4bd4:	7c0a      	ldrb	r2, [r1, #16]
    4bd6:	f88d 2000 	strb.w	r2, [sp]
    4bda:	9a00      	ldr	r2, [sp, #0]
    4bdc:	9200      	str	r2, [sp, #0]
    4bde:	f89d 2000 	ldrb.w	r2, [sp]
    4be2:	b1ca      	cbz	r2, 4c18 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4be4:	2300      	movs	r3, #0
    4be6:	f101 0210 	add.w	r2, r1, #16
    4bea:	241f      	movs	r4, #31
    4bec:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4bf0:	7c0e      	ldrb	r6, [r1, #16]
    4bf2:	f88d 6000 	strb.w	r6, [sp]
    4bf6:	9e00      	ldr	r6, [sp, #0]
    4bf8:	9600      	str	r6, [sp, #0]
    4bfa:	f89d 6000 	ldrb.w	r6, [sp]
    4bfe:	b14e      	cbz	r6, 4c14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4c00:	7013      	strb	r3, [r2, #0]
    4c02:	7043      	strb	r3, [r0, #1]
    4c04:	7004      	strb	r4, [r0, #0]
    4c06:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4c0a:	6046      	str	r6, [r0, #4]
    4c0c:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4c10:	6086      	str	r6, [r0, #8]
    4c12:	e7ed      	b.n	4bf0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4c14:	2001      	movs	r0, #1
    4c16:	bd78      	pop	{r3, r4, r5, r6, pc}
    4c18:	2000      	movs	r0, #0
    4c1a:	bd78      	pop	{r3, r4, r5, r6, pc}
    4c1c:	200009da 	.word	0x200009da

00004c20 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4c20:	b510      	push	{r4, lr}
    4c22:	4604      	mov	r4, r0
    4c24:	f000 f95c 	bl	4ee0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4c28:	b118      	cbz	r0, 4c32 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4c2a:	21bd      	movs	r1, #189	; 0xbd
    4c2c:	2027      	movs	r0, #39	; 0x27
    4c2e:	f7ff f939 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c32:	4803      	ldr	r0, [pc, #12]	; (4c40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4c34:	2101      	movs	r1, #1
    4c36:	f009 fc5c 	bl	e4f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4c3a:	4802      	ldr	r0, [pc, #8]	; (4c44 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4c3c:	62c4      	str	r4, [r0, #44]	; 0x2c
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	200009b8 	.word	0x200009b8
    4c44:	200000b0 	.word	0x200000b0

00004c48 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4c48:	4901      	ldr	r1, [pc, #4]	; (4c50 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4c4a:	2001      	movs	r0, #1
    4c4c:	7188      	strb	r0, [r1, #6]
    4c4e:	4770      	bx	lr
    4c50:	200000b0 	.word	0x200000b0

00004c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c58:	4d66      	ldr	r5, [pc, #408]	; (4df4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    4c5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4c5c:	782e      	ldrb	r6, [r5, #0]
    4c5e:	bbee      	cbnz	r6, 4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c60:	b3e2      	cbz	r2, 4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c62:	b3db      	cbz	r3, 4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c64:	b3d4      	cbz	r4, 4cdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c66:	f105 0614 	add.w	r6, r5, #20
    4c6a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4c6e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4c72:	2700      	movs	r7, #0
    4c74:	71af      	strb	r7, [r5, #6]
    4c76:	716f      	strb	r7, [r5, #5]
    4c78:	70ef      	strb	r7, [r5, #3]
    4c7a:	70af      	strb	r7, [r5, #2]
    4c7c:	712f      	strb	r7, [r5, #4]
    4c7e:	81af      	strh	r7, [r5, #12]
    4c80:	81ef      	strh	r7, [r5, #14]
    4c82:	f000 f971 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4c86:	4606      	mov	r6, r0
    4c88:	f000 f968 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4c8c:	4604      	mov	r4, r0
    4c8e:	f006 fe91 	bl	b9b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4c92:	f006 fb75 	bl	b380 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4c96:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4c9a:	f006 ff11 	bl	bac0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4c9e:	f104 0018 	add.w	r0, r4, #24
    4ca2:	f006 ffeb 	bl	bc7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4ca6:	6920      	ldr	r0, [r4, #16]
    4ca8:	f006 ffde 	bl	bc68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4cac:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4cb0:	f007 f802 	bl	bcb8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4cb4:	f04f 0b01 	mov.w	fp, #1
    4cb8:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4cbc:	2000      	movs	r0, #0
    4cbe:	f006 fd3d 	bl	b73c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4cc2:	2800      	cmp	r0, #0
    4cc4:	d07e      	beq.n	4dc4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4cc6:	484c      	ldr	r0, [pc, #304]	; (4df8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    4cc8:	f006 fdac 	bl	b824 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ccc:	8820      	ldrh	r0, [r4, #0]
    4cce:	f7ff fcfd 	bl	46cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4cd2:	6328      	str	r0, [r5, #48]	; 0x30
    4cd4:	8820      	ldrh	r0, [r4, #0]
    4cd6:	f7ff fce3 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4cda:	e000      	b.n	4cde <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4cdc:	e00a      	b.n	4cf4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4cde:	6368      	str	r0, [r5, #52]	; 0x34
    4ce0:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4ce4:	f88d 0000 	strb.w	r0, [sp]
    4ce8:	9800      	ldr	r0, [sp, #0]
    4cea:	9000      	str	r0, [sp, #0]
    4cec:	f89d 0000 	ldrb.w	r0, [sp]
    4cf0:	b118      	cbz	r0, 4cfa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4cf2:	e012      	b.n	4d1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4cf4:	f44f 718a 	mov.w	r1, #276	; 0x114
    4cf8:	e079      	b.n	4dee <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    4cfa:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4cfc:	b168      	cbz	r0, 4d1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4cfe:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4d00:	88b1      	ldrh	r1, [r6, #4]
    4d02:	4288      	cmp	r0, r1
    4d04:	d109      	bne.n	4d1a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4d06:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4d0a:	2201      	movs	r2, #1
    4d0c:	4408      	add	r0, r1
    4d0e:	8670      	strh	r0, [r6, #50]	; 0x32
    4d10:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4d14:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4d16:	f7fd fd4d 	bl	27b4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4d1a:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4d1e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4dfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4d22:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4d26:	f109 0808 	add.w	r8, r9, #8
    4d2a:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4d2e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4d30:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4d34:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4d36:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4d3a:	f000 f983 	bl	5044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4d3e:	4601      	mov	r1, r0
    4d40:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4d42:	46ba      	mov	sl, r7
    4d44:	f009 f9c0 	bl	e0c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d48:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4d4a:	4281      	cmp	r1, r0
    4d4c:	d200      	bcs.n	4d50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4d4e:	4608      	mov	r0, r1
    4d50:	7228      	strb	r0, [r5, #8]
    4d52:	46a8      	mov	r8, r5
    4d54:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4d58:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4d5a:	7cf7      	ldrb	r7, [r6, #19]
    4d5c:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4d5e:	2908      	cmp	r1, #8
    4d60:	d100      	bne.n	4d64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4d62:	2104      	movs	r1, #4
    4d64:	f009 f9b0 	bl	e0c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d68:	b90f      	cbnz	r7, 4d6e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4d6a:	1d00      	adds	r0, r0, #4
    4d6c:	b280      	uxth	r0, r0
    4d6e:	4285      	cmp	r5, r0
    4d70:	d200      	bcs.n	4d74 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4d72:	4628      	mov	r0, r5
    4d74:	b2c0      	uxtb	r0, r0
    4d76:	f888 0009 	strb.w	r0, [r8, #9]
    4d7a:	7cf2      	ldrb	r2, [r6, #19]
    4d7c:	b102      	cbz	r2, 4d80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4d7e:	2204      	movs	r2, #4
    4d80:	4410      	add	r0, r2
    4d82:	f888 0007 	strb.w	r0, [r8, #7]
    4d86:	7cb1      	ldrb	r1, [r6, #18]
    4d88:	b1a1      	cbz	r1, 4db4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    4d8a:	491c      	ldr	r1, [pc, #112]	; (4dfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4d8c:	3108      	adds	r1, #8
    4d8e:	f881 b018 	strb.w	fp, [r1, #24]
    4d92:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    4d96:	e9c1 0204 	strd	r0, r2, [r1, #16]
    4d9a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4d9e:	f009 f840 	bl	de22 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4da2:	4916      	ldr	r1, [pc, #88]	; (4dfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4da4:	4603      	mov	r3, r0
    4da6:	22fb      	movs	r2, #251	; 0xfb
    4da8:	3108      	adds	r1, #8
    4daa:	2000      	movs	r0, #0
    4dac:	f006 fb32 	bl	b414 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4db0:	f006 fb66 	bl	b480 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4db4:	2001      	movs	r0, #1
    4db6:	f000 fb95 	bl	54e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4dba:	4811      	ldr	r0, [pc, #68]	; (4e00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    4dbc:	6800      	ldr	r0, [r0, #0]
    4dbe:	2803      	cmp	r0, #3
    4dc0:	d013      	beq.n	4dea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4dc2:	e000      	b.n	4dc6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4dc4:	e00f      	b.n	4de6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    4dc6:	280b      	cmp	r0, #11
    4dc8:	d00f      	beq.n	4dea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4dca:	4648      	mov	r0, r9
    4dcc:	f840 af52 	str.w	sl, [r0, #82]!
    4dd0:	f8c0 a004 	str.w	sl, [r0, #4]
    4dd4:	4809      	ldr	r0, [pc, #36]	; (4dfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4dd6:	88b1      	ldrh	r1, [r6, #4]
    4dd8:	3052      	adds	r0, #82	; 0x52
    4dda:	8041      	strh	r1, [r0, #2]
    4ddc:	8821      	ldrh	r1, [r4, #0]
    4dde:	8001      	strh	r1, [r0, #0]
    4de0:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4de4:	7101      	strb	r1, [r0, #4]
    4de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dea:	f240 11c1 	movw	r1, #449	; 0x1c1
    4dee:	2027      	movs	r0, #39	; 0x27
    4df0:	f7ff f858 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4df4:	200000b0 	.word	0x200000b0
    4df8:	00005668 	.word	0x00005668
    4dfc:	20000988 	.word	0x20000988
    4e00:	40001550 	.word	0x40001550

00004e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e08:	4605      	mov	r5, r0
    4e0a:	f000 f8ad 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e0e:	4e33      	ldr	r6, [pc, #204]	; (4edc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4e10:	4604      	mov	r4, r0
    4e12:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4e14:	7847      	ldrb	r7, [r0, #1]
    4e16:	b10d      	cbz	r5, 4e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4e18:	2d01      	cmp	r5, #1
    4e1a:	d103      	bne.n	4e24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4e1c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4e1e:	f007 ffa6 	bl	cd6e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4e22:	7070      	strb	r0, [r6, #1]
    4e24:	7870      	ldrb	r0, [r6, #1]
    4e26:	f04f 0800 	mov.w	r8, #0
    4e2a:	f04f 0901 	mov.w	r9, #1
    4e2e:	b150      	cbz	r0, 4e46 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4e30:	2801      	cmp	r0, #1
    4e32:	d01a      	beq.n	4e6a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4e34:	2802      	cmp	r0, #2
    4e36:	d034      	beq.n	4ea2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4e38:	2803      	cmp	r0, #3
    4e3a:	d048      	beq.n	4ece <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4e3c:	f240 4115 	movw	r1, #1045	; 0x415
    4e40:	2027      	movs	r0, #39	; 0x27
    4e42:	f7ff f82f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e46:	2d01      	cmp	r5, #1
    4e48:	d032      	beq.n	4eb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4e4a:	f000 f8e7 	bl	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e4e:	4639      	mov	r1, r7
    4e50:	2201      	movs	r2, #1
    4e52:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e54:	f008 fc69 	bl	d72a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e58:	e028      	b.n	4eac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4e5a:	bf00      	nop
    4e5c:	f884 8008 	strb.w	r8, [r4, #8]
    4e60:	e031      	b.n	4ec6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e62:	bf00      	nop
    4e64:	f884 9008 	strb.w	r9, [r4, #8]
    4e68:	e02d      	b.n	4ec6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e6a:	2d01      	cmp	r5, #1
    4e6c:	d008      	beq.n	4e80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4e6e:	f000 f8d5 	bl	501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e72:	4639      	mov	r1, r7
    4e74:	2200      	movs	r2, #0
    4e76:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e78:	f008 fc57 	bl	d72a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e7c:	2d02      	cmp	r5, #2
    4e7e:	d00b      	beq.n	4e98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e80:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4e84:	1c40      	adds	r0, r0, #1
    4e86:	f141 0100 	adc.w	r1, r1, #0
    4e8a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4e8e:	7a20      	ldrb	r0, [r4, #8]
    4e90:	2801      	cmp	r0, #1
    4e92:	d003      	beq.n	4e9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4e94:	f884 9008 	strb.w	r9, [r4, #8]
    4e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e9c:	f884 8008 	strb.w	r8, [r4, #8]
    4ea0:	e7fa      	b.n	4e98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ea2:	2d01      	cmp	r5, #1
    4ea4:	d004      	beq.n	4eb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4ea6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ea8:	f008 fe79 	bl	db9e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4eac:	2d02      	cmp	r5, #2
    4eae:	d0f3      	beq.n	4e98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4eb0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4eb4:	1c40      	adds	r0, r0, #1
    4eb6:	f141 0100 	adc.w	r1, r1, #0
    4eba:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4ebe:	7a20      	ldrb	r0, [r4, #8]
    4ec0:	2801      	cmp	r0, #1
    4ec2:	d1cf      	bne.n	4e64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4ec4:	e7ca      	b.n	4e5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4ec6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4eca:	f001 b92b 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4ece:	2d01      	cmp	r5, #1
    4ed0:	d0e2      	beq.n	4e98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ed2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ed4:	f008 fe63 	bl	db9e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4ed8:	e7f5      	b.n	4ec6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4eda:	0000      	.short	0x0000
    4edc:	200000b0 	.word	0x200000b0

00004ee0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4ee0:	4804      	ldr	r0, [pc, #16]	; (4ef4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4ee2:	7800      	ldrb	r0, [r0, #0]
    4ee4:	b108      	cbz	r0, 4eea <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4ee6:	200c      	movs	r0, #12
    4ee8:	4770      	bx	lr
    4eea:	4903      	ldr	r1, [pc, #12]	; (4ef8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4eec:	2000      	movs	r0, #0
    4eee:	7448      	strb	r0, [r1, #17]
    4ef0:	4770      	bx	lr
    4ef2:	0000      	.short	0x0000
    4ef4:	200000b0 	.word	0x200000b0
    4ef8:	200009da 	.word	0x200009da

00004efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4efc:	4812      	ldr	r0, [pc, #72]	; (4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4efe:	b508      	push	{r3, lr}
    4f00:	7801      	ldrb	r1, [r0, #0]
    4f02:	b139      	cbz	r1, 4f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4f04:	7800      	ldrb	r0, [r0, #0]
    4f06:	2801      	cmp	r0, #1
    4f08:	d006      	beq.n	4f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4f0a:	f240 11d9 	movw	r1, #473	; 0x1d9
    4f0e:	2027      	movs	r0, #39	; 0x27
    4f10:	f7fe ffc8 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f14:	f000 f9ce 	bl	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4f18:	f000 f820 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f1c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4f20:	f88d 1000 	strb.w	r1, [sp]
    4f24:	9900      	ldr	r1, [sp, #0]
    4f26:	9100      	str	r1, [sp, #0]
    4f28:	f89d 1000 	ldrb.w	r1, [sp]
    4f2c:	2900      	cmp	r1, #0
    4f2e:	d10a      	bne.n	4f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4f30:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4f32:	2900      	cmp	r1, #0
    4f34:	d007      	beq.n	4f46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4f36:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4f3a:	2200      	movs	r2, #0
    4f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4f40:	4611      	mov	r1, r2
    4f42:	f7fd bc37 	b.w	27b4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4f46:	bd08      	pop	{r3, pc}
    4f48:	200000b0 	.word	0x200000b0
    4f4c:	4a02      	ldr	r2, [pc, #8]	; (4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4f4e:	8993      	ldrh	r3, [r2, #12]
    4f50:	4303      	orrs	r3, r0
    4f52:	8193      	strh	r3, [r2, #12]
    4f54:	6952      	ldr	r2, [r2, #20]
    4f56:	4710      	bx	r2
    4f58:	200000b0 	.word	0x200000b0
    4f5c:	4801      	ldr	r0, [pc, #4]	; (4f64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4f5e:	6840      	ldr	r0, [r0, #4]
    4f60:	4770      	bx	lr
    4f62:	0000      	.short	0x0000
    4f64:	200000e8 	.word	0x200000e8
    4f68:	4801      	ldr	r0, [pc, #4]	; (4f70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4f6a:	6840      	ldr	r0, [r0, #4]
    4f6c:	3078      	adds	r0, #120	; 0x78
    4f6e:	4770      	bx	lr
    4f70:	200000e8 	.word	0x200000e8
    4f74:	4a01      	ldr	r2, [pc, #4]	; (4f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4f76:	2100      	movs	r1, #0
    4f78:	6952      	ldr	r2, [r2, #20]
    4f7a:	4710      	bx	r2
    4f7c:	200000b0 	.word	0x200000b0
    4f80:	b570      	push	{r4, r5, r6, lr}
    4f82:	f7ff fff1 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f86:	4604      	mov	r4, r0
    4f88:	f7ff ffe8 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f8c:	4605      	mov	r5, r0
    4f8e:	4621      	mov	r1, r4
    4f90:	f009 f962 	bl	e258 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4f94:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4f98:	2901      	cmp	r1, #1
    4f9a:	d114      	bne.n	4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4f9c:	2800      	cmp	r0, #0
    4f9e:	d012      	beq.n	4fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4fa0:	4909      	ldr	r1, [pc, #36]	; (4fc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4fa2:	2001      	movs	r0, #1
    4fa4:	684a      	ldr	r2, [r1, #4]
    4fa6:	8829      	ldrh	r1, [r5, #0]
    4fa8:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4fac:	7a61      	ldrb	r1, [r4, #9]
    4fae:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4fb2:	7aa1      	ldrb	r1, [r4, #10]
    4fb4:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4fb8:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4fbc:	7010      	strb	r0, [r2, #0]
    4fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4fc2:	f001 b8af 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4fc6:	bd70      	pop	{r4, r5, r6, pc}
    4fc8:	200000e8 	.word	0x200000e8
    4fcc:	b570      	push	{r4, r5, r6, lr}
    4fce:	4605      	mov	r5, r0
    4fd0:	2901      	cmp	r1, #1
    4fd2:	d81c      	bhi.n	500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4fd4:	4c10      	ldr	r4, [pc, #64]	; (5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4fd6:	69a1      	ldr	r1, [r4, #24]
    4fd8:	4788      	blx	r1
    4fda:	b1c0      	cbz	r0, 500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4fdc:	7960      	ldrb	r0, [r4, #5]
    4fde:	b9b0      	cbnz	r0, 500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4fe0:	2d01      	cmp	r5, #1
    4fe2:	d116      	bne.n	5012 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4fe4:	f104 0010 	add.w	r0, r4, #16
    4fe8:	7800      	ldrb	r0, [r0, #0]
    4fea:	06c1      	lsls	r1, r0, #27
    4fec:	d405      	bmi.n	4ffa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4fee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4ff0:	7809      	ldrb	r1, [r1, #0]
    4ff2:	06c9      	lsls	r1, r1, #27
    4ff4:	d401      	bmi.n	4ffa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4ff6:	2101      	movs	r1, #1
    4ff8:	e000      	b.n	4ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4ffa:	2100      	movs	r1, #0
    4ffc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4ffe:	b91a      	cbnz	r2, 5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5000:	8962      	ldrh	r2, [r4, #10]
    5002:	b10a      	cbz	r2, 5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5004:	06c0      	lsls	r0, r0, #27
    5006:	d502      	bpl.n	500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5008:	89a0      	ldrh	r0, [r4, #12]
    500a:	4301      	orrs	r1, r0
    500c:	d001      	beq.n	5012 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    500e:	2001      	movs	r0, #1
    5010:	bd70      	pop	{r4, r5, r6, pc}
    5012:	2000      	movs	r0, #0
    5014:	bd70      	pop	{r4, r5, r6, pc}
    5016:	0000      	.short	0x0000
    5018:	200000b0 	.word	0x200000b0
    501c:	b510      	push	{r4, lr}
    501e:	4c08      	ldr	r4, [pc, #32]	; (5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    5020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5022:	b138      	cbz	r0, 5034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5024:	8962      	ldrh	r2, [r4, #10]
    5026:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5028:	1cd2      	adds	r2, r2, #3
    502a:	f007 fd5a 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    502e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5030:	6260      	str	r0, [r4, #36]	; 0x24
    5032:	bd10      	pop	{r4, pc}
    5034:	f240 415b 	movw	r1, #1115	; 0x45b
    5038:	2027      	movs	r0, #39	; 0x27
    503a:	f7fe ff33 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    503e:	0000      	.short	0x0000
    5040:	200000b0 	.word	0x200000b0
    5044:	b510      	push	{r4, lr}
    5046:	f7ff ff89 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    504a:	4604      	mov	r4, r0
    504c:	f7ff ff8c 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5050:	7b41      	ldrb	r1, [r0, #13]
    5052:	4a0a      	ldr	r2, [pc, #40]	; (507c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5054:	2924      	cmp	r1, #36	; 0x24
    5056:	d008      	beq.n	506a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5058:	7b80      	ldrb	r0, [r0, #14]
    505a:	2824      	cmp	r0, #36	; 0x24
    505c:	d005      	beq.n	506a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    505e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5062:	2804      	cmp	r0, #4
    5064:	d100      	bne.n	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5066:	2008      	movs	r0, #8
    5068:	bd10      	pop	{r4, pc}
    506a:	6850      	ldr	r0, [r2, #4]
    506c:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5070:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5078:	f008 bee1 	b.w	de3e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    507c:	200000e8 	.word	0x200000e8
    5080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5084:	4689      	mov	r9, r1
    5086:	4606      	mov	r6, r0
    5088:	f7ff ff6e 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    508c:	4c58      	ldr	r4, [pc, #352]	; (51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    508e:	2700      	movs	r7, #0
    5090:	4605      	mov	r5, r0
    5092:	f88d 7000 	strb.w	r7, [sp]
    5096:	7820      	ldrb	r0, [r4, #0]
    5098:	2802      	cmp	r0, #2
    509a:	d004      	beq.n	50a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    509c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    50a0:	2027      	movs	r0, #39	; 0x27
    50a2:	f7fe feff 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a6:	7ba0      	ldrb	r0, [r4, #14]
    50a8:	0640      	lsls	r0, r0, #25
    50aa:	d406      	bmi.n	50ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    50ac:	2040      	movs	r0, #64	; 0x40
    50ae:	f7ff ff61 	bl	4f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    50b2:	89e0      	ldrh	r0, [r4, #14]
    50b4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    50b8:	81e0      	strh	r0, [r4, #14]
    50ba:	7ce8      	ldrb	r0, [r5, #19]
    50bc:	f04f 0801 	mov.w	r8, #1
    50c0:	b3c6      	cbz	r6, 5134 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    50c2:	f006 fa0d 	bl	b4e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    50c6:	f006 f9f1 	bl	b4ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    50ca:	b968      	cbnz	r0, 50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50cc:	7ce8      	ldrb	r0, [r5, #19]
    50ce:	b158      	cbz	r0, 50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50d2:	7841      	ldrb	r1, [r0, #1]
    50d4:	b141      	cbz	r1, 50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50d6:	7800      	ldrb	r0, [r0, #0]
    50d8:	7a29      	ldrb	r1, [r5, #8]
    50da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    50de:	4288      	cmp	r0, r1
    50e0:	d102      	bne.n	50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50e2:	f884 8002 	strb.w	r8, [r4, #2]
    50e6:	e064      	b.n	51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    50e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50ea:	7841      	ldrb	r1, [r0, #1]
    50ec:	8161      	strh	r1, [r4, #10]
    50ee:	b121      	cbz	r1, 50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    50f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    50f2:	f008 fd21 	bl	db38 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    50f6:	62a0      	str	r0, [r4, #40]	; 0x28
    50f8:	e000      	b.n	50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    50fa:	62a7      	str	r7, [r4, #40]	; 0x28
    50fc:	89e0      	ldrh	r0, [r4, #14]
    50fe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5102:	81e0      	strh	r0, [r4, #14]
    5104:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5106:	79e9      	ldrb	r1, [r5, #7]
    5108:	7800      	ldrb	r0, [r0, #0]
    510a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    510e:	4288      	cmp	r0, r1
    5110:	d005      	beq.n	511e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5112:	f000 f963 	bl	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5116:	89e0      	ldrh	r0, [r4, #14]
    5118:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    511c:	81e0      	strh	r0, [r4, #14]
    511e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5120:	7a29      	ldrb	r1, [r5, #8]
    5122:	7800      	ldrb	r0, [r0, #0]
    5124:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5128:	4288      	cmp	r0, r1
    512a:	d10e      	bne.n	514a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    512c:	4668      	mov	r0, sp
    512e:	f000 f917 	bl	5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5132:	e00a      	b.n	514a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5134:	e7ff      	b.n	5136 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5136:	b108      	cbz	r0, 513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5138:	f006 f9cc 	bl	b4d4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    513c:	78e0      	ldrb	r0, [r4, #3]
    513e:	1c40      	adds	r0, r0, #1
    5140:	70e0      	strb	r0, [r4, #3]
    5142:	89e0      	ldrh	r0, [r4, #14]
    5144:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5148:	81e0      	strh	r0, [r4, #14]
    514a:	7ca8      	ldrb	r0, [r5, #18]
    514c:	b1a0      	cbz	r0, 5178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    514e:	f7ff ff05 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5152:	4928      	ldr	r1, [pc, #160]	; (51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5154:	f881 8018 	strb.w	r8, [r1, #24]
    5158:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    515c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5160:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5164:	f008 fe5d 	bl	de22 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5168:	4603      	mov	r3, r0
    516a:	22fb      	movs	r2, #251	; 0xfb
    516c:	4921      	ldr	r1, [pc, #132]	; (51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    516e:	2000      	movs	r0, #0
    5170:	f006 f950 	bl	b414 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5174:	f006 f984 	bl	b480 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5178:	4d1e      	ldr	r5, [pc, #120]	; (51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    517a:	354a      	adds	r5, #74	; 0x4a
    517c:	f1b9 0f00 	cmp.w	r9, #0
    5180:	d104      	bne.n	518c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5182:	78e1      	ldrb	r1, [r4, #3]
    5184:	2001      	movs	r0, #1
    5186:	f7ff ff21 	bl	4fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    518a:	b1b0      	cbz	r0, 51ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    518c:	f006 fd48 	bl	bc20 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5190:	f89d 0000 	ldrb.w	r0, [sp]
    5194:	b110      	cbz	r0, 519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    5196:	2000      	movs	r0, #0
    5198:	f7ff fe34 	bl	4e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    519c:	b136      	cbz	r6, 51ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    519e:	70e7      	strb	r7, [r4, #3]
    51a0:	7968      	ldrb	r0, [r5, #5]
    51a2:	1c40      	adds	r0, r0, #1
    51a4:	7168      	strb	r0, [r5, #5]
    51a6:	f7ff feeb 	bl	4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    51aa:	e002      	b.n	51b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    51ac:	79a8      	ldrb	r0, [r5, #6]
    51ae:	1c40      	adds	r0, r0, #1
    51b0:	71a8      	strb	r0, [r5, #6]
    51b2:	f000 f87f 	bl	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    51b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51ba:	f89d 0000 	ldrb.w	r0, [sp]
    51be:	b110      	cbz	r0, 51c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    51c0:	2001      	movs	r0, #1
    51c2:	f7ff fe1f 	bl	4e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    51c6:	2000      	movs	r0, #0
    51c8:	f000 f98c 	bl	54e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    51cc:	f89d 0000 	ldrb.w	r0, [sp]
    51d0:	b110      	cbz	r0, 51d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    51d2:	2002      	movs	r0, #2
    51d4:	f7ff fe16 	bl	4e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    51d8:	b136      	cbz	r6, 51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    51da:	70e7      	strb	r7, [r4, #3]
    51dc:	7968      	ldrb	r0, [r5, #5]
    51de:	1c40      	adds	r0, r0, #1
    51e0:	7168      	strb	r0, [r5, #5]
    51e2:	f7ff fecd 	bl	4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    51e6:	e7e6      	b.n	51b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    51e8:	79a8      	ldrb	r0, [r5, #6]
    51ea:	1c40      	adds	r0, r0, #1
    51ec:	71a8      	strb	r0, [r5, #6]
    51ee:	e7e2      	b.n	51b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    51f0:	200000b0 	.word	0x200000b0
    51f4:	20000990 	.word	0x20000990
    51f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51fc:	4688      	mov	r8, r1
    51fe:	4681      	mov	r9, r0
    5200:	f7ff feb2 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5204:	4d29      	ldr	r5, [pc, #164]	; (52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5206:	4604      	mov	r4, r0
    5208:	7828      	ldrb	r0, [r5, #0]
    520a:	2801      	cmp	r0, #1
    520c:	d004      	beq.n	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    520e:	f240 416a 	movw	r1, #1130	; 0x46a
    5212:	2027      	movs	r0, #39	; 0x27
    5214:	f7fe fe46 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5218:	7860      	ldrb	r0, [r4, #1]
    521a:	2600      	movs	r6, #0
    521c:	2701      	movs	r7, #1
    521e:	b120      	cbz	r0, 522a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    5220:	7066      	strb	r6, [r4, #1]
    5222:	2100      	movs	r1, #0
    5224:	2004      	movs	r0, #4
    5226:	f7ff fe91 	bl	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    522a:	6a29      	ldr	r1, [r5, #32]
    522c:	7808      	ldrb	r0, [r1, #0]
    522e:	43c0      	mvns	r0, r0
    5230:	0780      	lsls	r0, r0, #30
    5232:	d109      	bne.n	5248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5234:	79a0      	ldrb	r0, [r4, #6]
    5236:	bb88      	cbnz	r0, 529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5238:	2002      	movs	r0, #2
    523a:	f7ff fe87 	bl	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    523e:	6a28      	ldr	r0, [r5, #32]
    5240:	7800      	ldrb	r0, [r0, #0]
    5242:	43c0      	mvns	r0, r0
    5244:	0780      	lsls	r0, r0, #30
    5246:	d029      	beq.n	529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5248:	6a28      	ldr	r0, [r5, #32]
    524a:	7840      	ldrb	r0, [r0, #1]
    524c:	b110      	cbz	r0, 5254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    524e:	2002      	movs	r0, #2
    5250:	71a0      	strb	r0, [r4, #6]
    5252:	e000      	b.n	5256 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5254:	71a7      	strb	r7, [r4, #6]
    5256:	7ce0      	ldrb	r0, [r4, #19]
    5258:	b1a0      	cbz	r0, 5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    525a:	f7ff fe7f 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    525e:	4914      	ldr	r1, [pc, #80]	; (52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5260:	7a6d      	ldrb	r5, [r5, #9]
    5262:	760e      	strb	r6, [r1, #24]
    5264:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5268:	e9c1 2304 	strd	r2, r3, [r1, #16]
    526c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5270:	f008 fdd7 	bl	de22 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5274:	4603      	mov	r3, r0
    5276:	462a      	mov	r2, r5
    5278:	490d      	ldr	r1, [pc, #52]	; (52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    527a:	2001      	movs	r0, #1
    527c:	f006 f8ca 	bl	b414 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5280:	f006 f8fe 	bl	b480 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5284:	ea38 0009 	bics.w	r0, r8, r9
    5288:	d004      	beq.n	5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    528a:	2100      	movs	r1, #0
    528c:	4608      	mov	r0, r1
    528e:	f7ff fe9d 	bl	4fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5292:	b128      	cbz	r0, 52a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5294:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5298:	f000 b80c 	b.w	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    529c:	2003      	movs	r0, #3
    529e:	e7d7      	b.n	5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    52a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52a4:	2000      	movs	r0, #0
    52a6:	f000 b8df 	b.w	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    52aa:	0000      	.short	0x0000
    52ac:	200000b0 	.word	0x200000b0
    52b0:	20000990 	.word	0x20000990
    52b4:	b510      	push	{r4, lr}
    52b6:	f006 f9a5 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    52ba:	f006 f861 	bl	b380 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    52be:	4c0d      	ldr	r4, [pc, #52]	; (52f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    52c0:	89e0      	ldrh	r0, [r4, #14]
    52c2:	f7ff fe57 	bl	4f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    52c6:	69e2      	ldr	r2, [r4, #28]
    52c8:	7961      	ldrb	r1, [r4, #5]
    52ca:	78a0      	ldrb	r0, [r4, #2]
    52cc:	4790      	blx	r2
    52ce:	480a      	ldr	r0, [pc, #40]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    52d0:	7c40      	ldrb	r0, [r0, #17]
    52d2:	b158      	cbz	r0, 52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    52d4:	4808      	ldr	r0, [pc, #32]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    52d6:	3852      	subs	r0, #82	; 0x52
    52d8:	f850 1f52 	ldr.w	r1, [r0, #82]!
    52dc:	6081      	str	r1, [r0, #8]
    52de:	6841      	ldr	r1, [r0, #4]
    52e0:	60c1      	str	r1, [r0, #12]
    52e2:	4805      	ldr	r0, [pc, #20]	; (52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    52e4:	2101      	movs	r1, #1
    52e6:	7401      	strb	r1, [r0, #16]
    52e8:	f000 ff1c 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52ec:	2000      	movs	r0, #0
    52ee:	7020      	strb	r0, [r4, #0]
    52f0:	bd10      	pop	{r4, pc}
    52f2:	0000      	.short	0x0000
    52f4:	200000b0 	.word	0x200000b0
    52f8:	200009da 	.word	0x200009da
    52fc:	4808      	ldr	r0, [pc, #32]	; (5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    52fe:	b510      	push	{r4, lr}
    5300:	7800      	ldrb	r0, [r0, #0]
    5302:	2802      	cmp	r0, #2
    5304:	d004      	beq.n	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5306:	f240 2111 	movw	r1, #529	; 0x211
    530a:	2027      	movs	r0, #39	; 0x27
    530c:	f7fe fdca 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5310:	4904      	ldr	r1, [pc, #16]	; (5324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    5312:	2001      	movs	r0, #1
    5314:	71c8      	strb	r0, [r1, #7]
    5316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    531a:	f7ff bfcb 	b.w	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    531e:	0000      	.short	0x0000
    5320:	200000b0 	.word	0x200000b0
    5324:	200009da 	.word	0x200009da
    5328:	b430      	push	{r4, r5}
    532a:	4b0c      	ldr	r3, [pc, #48]	; (535c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    532c:	b942      	cbnz	r2, 5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    532e:	79da      	ldrb	r2, [r3, #7]
    5330:	2aff      	cmp	r2, #255	; 0xff
    5332:	d105      	bne.n	5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5334:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5338:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    533c:	42a2      	cmp	r2, r4
    533e:	d00b      	beq.n	5358 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5340:	b131      	cbz	r1, 5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    5342:	79da      	ldrb	r2, [r3, #7]
    5344:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5348:	bc30      	pop	{r4, r5}
    534a:	4610      	mov	r0, r2
    534c:	f006 bca0 	b.w	bc90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5350:	22ff      	movs	r2, #255	; 0xff
    5352:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5356:	e7f7      	b.n	5348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5358:	bc30      	pop	{r4, r5}
    535a:	4770      	bx	lr
    535c:	200000b0 	.word	0x200000b0
    5360:	b570      	push	{r4, r5, r6, lr}
    5362:	4606      	mov	r6, r0
    5364:	f7ff fe00 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5368:	4a1b      	ldr	r2, [pc, #108]	; (53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    536a:	4604      	mov	r4, r0
    536c:	2501      	movs	r5, #1
    536e:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5370:	7808      	ldrb	r0, [r1, #0]
    5372:	f000 0003 	and.w	r0, r0, #3
    5376:	2801      	cmp	r0, #1
    5378:	d00c      	beq.n	5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    537a:	2802      	cmp	r0, #2
    537c:	d00a      	beq.n	5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    537e:	2803      	cmp	r0, #3
    5380:	d121      	bne.n	53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5382:	7065      	strb	r5, [r4, #1]
    5384:	89d0      	ldrh	r0, [r2, #14]
    5386:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    538a:	81d0      	strh	r0, [r2, #14]
    538c:	2001      	movs	r0, #1
    538e:	f7ff fddd 	bl	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5392:	e018      	b.n	53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5394:	7848      	ldrb	r0, [r1, #1]
    5396:	b1b0      	cbz	r0, 53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5398:	89d1      	ldrh	r1, [r2, #14]
    539a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    539e:	81d1      	strh	r1, [r2, #14]
    53a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    53a2:	2900      	cmp	r1, #0
    53a4:	d009      	beq.n	53ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    53a6:	28fb      	cmp	r0, #251	; 0xfb
    53a8:	d808      	bhi.n	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    53aa:	7990      	ldrb	r0, [r2, #6]
    53ac:	b120      	cbz	r0, 53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    53ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53b2:	2020      	movs	r0, #32
    53b4:	f7ff bdde 	b.w	4f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    53b8:	7035      	strb	r5, [r6, #0]
    53ba:	bd70      	pop	{r4, r5, r6, pc}
    53bc:	7950      	ldrb	r0, [r2, #5]
    53be:	f040 0010 	orr.w	r0, r0, #16
    53c2:	7150      	strb	r0, [r2, #5]
    53c4:	bd70      	pop	{r4, r5, r6, pc}
    53c6:	7a20      	ldrb	r0, [r4, #8]
    53c8:	2801      	cmp	r0, #1
    53ca:	d001      	beq.n	53d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    53cc:	7225      	strb	r5, [r4, #8]
    53ce:	bd70      	pop	{r4, r5, r6, pc}
    53d0:	2000      	movs	r0, #0
    53d2:	7220      	strb	r0, [r4, #8]
    53d4:	bd70      	pop	{r4, r5, r6, pc}
    53d6:	0000      	.short	0x0000
    53d8:	200000b0 	.word	0x200000b0
    53dc:	b570      	push	{r4, r5, r6, lr}
    53de:	f7ff fdc3 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53e2:	4604      	mov	r4, r0
    53e4:	7980      	ldrb	r0, [r0, #6]
    53e6:	2800      	cmp	r0, #0
    53e8:	d027      	beq.n	543a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    53ea:	2802      	cmp	r0, #2
    53ec:	d10d      	bne.n	540a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    53ee:	4818      	ldr	r0, [pc, #96]	; (5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    53f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    53f2:	f008 f973 	bl	d6dc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    53f6:	b308      	cbz	r0, 543c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    53f8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    53fc:	1c40      	adds	r0, r0, #1
    53fe:	f141 0100 	adc.w	r1, r1, #0
    5402:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5406:	f000 fe8d 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    540a:	2500      	movs	r5, #0
    540c:	71a5      	strb	r5, [r4, #6]
    540e:	78a0      	ldrb	r0, [r4, #2]
    5410:	2601      	movs	r6, #1
    5412:	b170      	cbz	r0, 5432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5414:	70a5      	strb	r5, [r4, #2]
    5416:	f7ff fb21 	bl	4a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    541a:	b190      	cbz	r0, 5442 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    541c:	2100      	movs	r1, #0
    541e:	2008      	movs	r0, #8
    5420:	f7ff fd94 	bl	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5424:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5428:	1c40      	adds	r0, r0, #1
    542a:	f141 0100 	adc.w	r1, r1, #0
    542e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5432:	79e0      	ldrb	r0, [r4, #7]
    5434:	2801      	cmp	r0, #1
    5436:	d009      	beq.n	544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5438:	71e6      	strb	r6, [r4, #7]
    543a:	bd70      	pop	{r4, r5, r6, pc}
    543c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5440:	e001      	b.n	5446 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    5442:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5446:	2027      	movs	r0, #39	; 0x27
    5448:	f7fe fd2c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    544c:	71e5      	strb	r5, [r4, #7]
    544e:	bd70      	pop	{r4, r5, r6, pc}
    5450:	200000b0 	.word	0x200000b0
    5454:	4803      	ldr	r0, [pc, #12]	; (5464 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    5456:	7800      	ldrb	r0, [r0, #0]
    5458:	2800      	cmp	r0, #0
    545a:	d001      	beq.n	5460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    545c:	f7ff bf2a 	b.w	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5460:	4770      	bx	lr
    5462:	0000      	.short	0x0000
    5464:	200000b0 	.word	0x200000b0
    5468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    546c:	4607      	mov	r7, r0
    546e:	f7ff fd75 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5472:	4680      	mov	r8, r0
    5474:	f7ff fd78 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5478:	4c17      	ldr	r4, [pc, #92]	; (54d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    547a:	4605      	mov	r5, r0
    547c:	463a      	mov	r2, r7
    547e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5480:	6260      	str	r0, [r4, #36]	; 0x24
    5482:	2101      	movs	r1, #1
    5484:	4640      	mov	r0, r8
    5486:	f7ff ff4f 	bl	5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    548a:	7ce8      	ldrb	r0, [r5, #19]
    548c:	2600      	movs	r6, #0
    548e:	b178      	cbz	r0, 54b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5490:	4812      	ldr	r0, [pc, #72]	; (54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5492:	f006 fb1b 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5496:	4812      	ldr	r0, [pc, #72]	; (54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5498:	7606      	strb	r6, [r0, #24]
    549a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    549e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    54a2:	490e      	ldr	r1, [pc, #56]	; (54dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    54a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54a6:	f005 ff3d 	bl	b324 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    54aa:	f005 ff4f 	bl	b34c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    54ae:	e004      	b.n	54ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    54b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54b2:	f006 fb0b 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54b6:	f005 ff63 	bl	b380 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54ba:	b917      	cbnz	r7, 54c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    54bc:	4630      	mov	r0, r6
    54be:	f006 f9b9 	bl	b834 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    54c2:	2100      	movs	r1, #0
    54c4:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    54c8:	4608      	mov	r0, r1
    54ca:	f006 fb8b 	bl	bbe4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    54ce:	2002      	movs	r0, #2
    54d0:	7020      	strb	r0, [r4, #0]
    54d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54d6:	0000      	.short	0x0000
    54d8:	200000b0 	.word	0x200000b0
    54dc:	20000888 	.word	0x20000888
    54e0:	20000990 	.word	0x20000990
    54e4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    54e8:	4604      	mov	r4, r0
    54ea:	f7ff fd3d 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    54ee:	4605      	mov	r5, r0
    54f0:	f7ff fd34 	bl	4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    54f4:	4606      	mov	r6, r0
    54f6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 565c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    54fa:	4622      	mov	r2, r4
    54fc:	2100      	movs	r1, #0
    54fe:	f7ff ff13 	bl	5328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5502:	79a8      	ldrb	r0, [r5, #6]
    5504:	f04f 0800 	mov.w	r8, #0
    5508:	2701      	movs	r7, #1
    550a:	f1a9 0420 	sub.w	r4, r9, #32
    550e:	b140      	cbz	r0, 5522 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    5510:	2801      	cmp	r0, #1
    5512:	d01f      	beq.n	5554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5514:	2802      	cmp	r0, #2
    5516:	d030      	beq.n	557a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5518:	2803      	cmp	r0, #3
    551a:	d03c      	beq.n	5596 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    551c:	f240 21ae 	movw	r1, #686	; 0x2ae
    5520:	e058      	b.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5522:	7a20      	ldrb	r0, [r4, #8]
    5524:	2150      	movs	r1, #80	; 0x50
    5526:	f8ad 0004 	strh.w	r0, [sp, #4]
    552a:	5388      	strh	r0, [r1, r6]
    552c:	4648      	mov	r0, r9
    552e:	f7ff fabf 	bl	4ab0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5532:	b128      	cbz	r0, 5540 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5534:	2080      	movs	r0, #128	; 0x80
    5536:	6a21      	ldr	r1, [r4, #32]
    5538:	f7ff fd08 	bl	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    553c:	70af      	strb	r7, [r5, #2]
    553e:	e02e      	b.n	559e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5540:	466a      	mov	r2, sp
    5542:	a901      	add	r1, sp, #4
    5544:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5546:	f008 fc84 	bl	de52 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    554a:	6220      	str	r0, [r4, #32]
    554c:	b110      	cbz	r0, 5554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    554e:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    5552:	b111      	cbz	r1, 555a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5554:	4842      	ldr	r0, [pc, #264]	; (5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5556:	6220      	str	r0, [r4, #32]
    5558:	e021      	b.n	559e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    555a:	f89d 1000 	ldrb.w	r1, [sp]
    555e:	b931      	cbnz	r1, 556e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    5560:	f8a0 8000 	strh.w	r8, [r0]
    5564:	f880 8002 	strb.w	r8, [r0, #2]
    5568:	2101      	movs	r1, #1
    556a:	f008 ffc2 	bl	e4f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    556e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5572:	6a20      	ldr	r0, [r4, #32]
    5574:	f008 ff77 	bl	e466 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5578:	e011      	b.n	559e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    557a:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    557e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5582:	466a      	mov	r2, sp
    5584:	a901      	add	r1, sp, #4
    5586:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5588:	f008 fc63 	bl	de52 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    558c:	6220      	str	r0, [r4, #32]
    558e:	b930      	cbnz	r0, 559e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5590:	f240 219f 	movw	r1, #671	; 0x29f
    5594:	e01e      	b.n	55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5596:	4648      	mov	r0, r9
    5598:	f7ff fa8a 	bl	4ab0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    559c:	b1c0      	cbz	r0, 55d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    559e:	6a20      	ldr	r0, [r4, #32]
    55a0:	2308      	movs	r3, #8
    55a2:	7801      	ldrb	r1, [r0, #0]
    55a4:	f021 0108 	bic.w	r1, r1, #8
    55a8:	7001      	strb	r1, [r0, #0]
    55aa:	79ea      	ldrb	r2, [r5, #7]
    55ac:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    55b0:	4311      	orrs	r1, r2
    55b2:	f021 0104 	bic.w	r1, r1, #4
    55b6:	7001      	strb	r1, [r0, #0]
    55b8:	7a2a      	ldrb	r2, [r5, #8]
    55ba:	2304      	movs	r3, #4
    55bc:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    55c0:	4311      	orrs	r1, r2
    55c2:	f021 0110 	bic.w	r1, r1, #16
    55c6:	7001      	strb	r1, [r0, #0]
    55c8:	43c9      	mvns	r1, r1
    55ca:	0789      	lsls	r1, r1, #30
    55cc:	d005      	beq.n	55da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    55ce:	e007      	b.n	55e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    55d0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    55d4:	2027      	movs	r0, #39	; 0x27
    55d6:	f7fe fc65 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55da:	78c0      	ldrb	r0, [r0, #3]
    55dc:	2802      	cmp	r0, #2
    55de:	d00f      	beq.n	5600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    55e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55e2:	f008 f9cc 	bl	d97e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    55e6:	b108      	cbz	r0, 55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    55e8:	2101      	movs	r1, #1
    55ea:	e00a      	b.n	5602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    55ec:	6a20      	ldr	r0, [r4, #32]
    55ee:	7800      	ldrb	r0, [r0, #0]
    55f0:	43c0      	mvns	r0, r0
    55f2:	0780      	lsls	r0, r0, #30
    55f4:	d004      	beq.n	5600 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    55f6:	f7ff fa19 	bl	4a2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    55fa:	f080 0101 	eor.w	r1, r0, #1
    55fe:	e000      	b.n	5602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5600:	2100      	movs	r1, #0
    5602:	6a20      	ldr	r0, [r4, #32]
    5604:	7802      	ldrb	r2, [r0, #0]
    5606:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    560a:	7001      	strb	r1, [r0, #0]
    560c:	7ca9      	ldrb	r1, [r5, #18]
    560e:	b191      	cbz	r1, 5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5610:	7841      	ldrb	r1, [r0, #1]
    5612:	b181      	cbz	r1, 5636 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5614:	4813      	ldr	r0, [pc, #76]	; (5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5616:	f006 fa59 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    561a:	4811      	ldr	r0, [pc, #68]	; (5660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    561c:	3828      	subs	r0, #40	; 0x28
    561e:	7607      	strb	r7, [r0, #24]
    5620:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5624:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5628:	480e      	ldr	r0, [pc, #56]	; (5664 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    562a:	6a21      	ldr	r1, [r4, #32]
    562c:	f005 fe7a 	bl	b324 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5630:	f005 fec4 	bl	b3bc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5634:	e003      	b.n	563e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5636:	f006 fa49 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    563a:	f005 fea1 	bl	b380 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    563e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    5642:	2101      	movs	r1, #1
    5644:	2000      	movs	r0, #0
    5646:	f006 facd 	bl	bbe4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    564a:	7127      	strb	r7, [r4, #4]
    564c:	6a20      	ldr	r0, [r4, #32]
    564e:	8801      	ldrh	r1, [r0, #0]
    5650:	8221      	strh	r1, [r4, #16]
    5652:	7880      	ldrb	r0, [r0, #2]
    5654:	74a0      	strb	r0, [r4, #18]
    5656:	7027      	strb	r7, [r4, #0]
    5658:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    565c:	200000d0 	.word	0x200000d0
    5660:	200009b8 	.word	0x200009b8
    5664:	20000888 	.word	0x20000888
    5668:	000052fd 	.word	0x000052fd
    566c:	00005081 	.word	0x00005081
    5670:	000051f9 	.word	0x000051f9
    5674:	00005455 	.word	0x00005455

00005678 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5678:	4800      	ldr	r0, [pc, #0]	; (567c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    567a:	4770      	bx	lr
    567c:	20001375 	.word	0x20001375

00005680 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    5680:	b570      	push	{r4, r5, r6, lr}
    5682:	2600      	movs	r6, #0
    5684:	4635      	mov	r5, r6
    5686:	4c0f      	ldr	r4, [pc, #60]	; (56c4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    5688:	e018      	b.n	56bc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    568a:	1960      	adds	r0, r4, r5
    568c:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5690:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5694:	2a01      	cmp	r2, #1
    5696:	d002      	beq.n	569e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5698:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    569c:	b160      	cbz	r0, 56b8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    569e:	480a      	ldr	r0, [pc, #40]	; (56c8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    56a0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    56a4:	1c73      	adds	r3, r6, #1
    56a6:	5585      	strb	r5, [r0, r6]
    56a8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    56ac:	4630      	mov	r0, r6
    56ae:	b2de      	uxtb	r6, r3
    56b0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    56b4:	f006 fbbe 	bl	be34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    56b8:	1c6d      	adds	r5, r5, #1
    56ba:	b2ed      	uxtb	r5, r5
    56bc:	78a0      	ldrb	r0, [r4, #2]
    56be:	42a8      	cmp	r0, r5
    56c0:	d8e3      	bhi.n	568a <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    56c2:	bd70      	pop	{r4, r5, r6, pc}
    56c4:	200011a2 	.word	0x200011a2
    56c8:	20000278 	.word	0x20000278

000056cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    56cc:	4904      	ldr	r1, [pc, #16]	; (56e0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    56ce:	788a      	ldrb	r2, [r1, #2]
    56d0:	4282      	cmp	r2, r0
    56d2:	d903      	bls.n	56dc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    56d4:	4408      	add	r0, r1
    56d6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    56da:	4770      	bx	lr
    56dc:	2000      	movs	r0, #0
    56de:	4770      	bx	lr
    56e0:	200011a2 	.word	0x200011a2

000056e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    56e4:	4904      	ldr	r1, [pc, #16]	; (56f8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    56e6:	788a      	ldrb	r2, [r1, #2]
    56e8:	4282      	cmp	r2, r0
    56ea:	d903      	bls.n	56f4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    56ec:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    56f0:	3083      	adds	r0, #131	; 0x83
    56f2:	4770      	bx	lr
    56f4:	2000      	movs	r0, #0
    56f6:	4770      	bx	lr
    56f8:	200011a2 	.word	0x200011a2

000056fc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    56fc:	4a05      	ldr	r2, [pc, #20]	; (5714 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    56fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5702:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5706:	6802      	ldr	r2, [r0, #0]
    5708:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    570c:	8880      	ldrh	r0, [r0, #4]
    570e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5712:	4770      	bx	lr
    5714:	200011a2 	.word	0x200011a2

00005718 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    571c:	4607      	mov	r7, r0
    571e:	2400      	movs	r4, #0
    5720:	4d10      	ldr	r5, [pc, #64]	; (5764 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5722:	e019      	b.n	5758 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5724:	4620      	mov	r0, r4
    5726:	f7ff ffdd 	bl	56e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    572a:	0003      	movs	r3, r0
    572c:	d012      	beq.n	5754 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    572e:	1928      	adds	r0, r5, r4
    5730:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5734:	b970      	cbnz	r0, 5754 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5736:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    573a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    573e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    5742:	463a      	mov	r2, r7
    5744:	4631      	mov	r1, r6
    5746:	4618      	mov	r0, r3
    5748:	f008 fb06 	bl	dd58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    574c:	4630      	mov	r0, r6
    574e:	4621      	mov	r1, r4
    5750:	f7ff ffd4 	bl	56fc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5754:	1c64      	adds	r4, r4, #1
    5756:	b2e4      	uxtb	r4, r4
    5758:	78a8      	ldrb	r0, [r5, #2]
    575a:	42a0      	cmp	r0, r4
    575c:	d8e2      	bhi.n	5724 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    575e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5762:	0000      	.short	0x0000
    5764:	200011a2 	.word	0x200011a2

00005768 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    576c:	460e      	mov	r6, r1
    576e:	4607      	mov	r7, r0
    5770:	4615      	mov	r5, r2
    5772:	2106      	movs	r1, #6
    5774:	4630      	mov	r0, r6
    5776:	f008 fdbf 	bl	e2f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    577a:	4c0d      	ldr	r4, [pc, #52]	; (57b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    577c:	b160      	cbz	r0, 5798 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    577e:	2000      	movs	r0, #0
    5780:	e004      	b.n	578c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5782:	1821      	adds	r1, r4, r0
    5784:	1c40      	adds	r0, r0, #1
    5786:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    578a:	b2c0      	uxtb	r0, r0
    578c:	78a1      	ldrb	r1, [r4, #2]
    578e:	4281      	cmp	r1, r0
    5790:	d8f7      	bhi.n	5782 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5792:	2001      	movs	r0, #1
    5794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5798:	4631      	mov	r1, r6
    579a:	4638      	mov	r0, r7
    579c:	f008 fb68 	bl	de70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    57a0:	2808      	cmp	r0, #8
    57a2:	d003      	beq.n	57ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    57a4:	4420      	add	r0, r4
    57a6:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    57aa:	e7f2      	b.n	5792 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    57ac:	2000      	movs	r0, #0
    57ae:	e7f1      	b.n	5794 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    57b0:	200011a2 	.word	0x200011a2

000057b4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    57b4:	4904      	ldr	r1, [pc, #16]	; (57c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    57b6:	788a      	ldrb	r2, [r1, #2]
    57b8:	4282      	cmp	r2, r0
    57ba:	d903      	bls.n	57c4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    57bc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    57c0:	1cc0      	adds	r0, r0, #3
    57c2:	4770      	bx	lr
    57c4:	2000      	movs	r0, #0
    57c6:	4770      	bx	lr
    57c8:	200011a2 	.word	0x200011a2

000057cc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    57cc:	4908      	ldr	r1, [pc, #32]	; (57f0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    57ce:	788a      	ldrb	r2, [r1, #2]
    57d0:	4282      	cmp	r2, r0
    57d2:	d903      	bls.n	57dc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    57d4:	180a      	adds	r2, r1, r0
    57d6:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    57da:	b10a      	cbz	r2, 57e0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    57dc:	2000      	movs	r0, #0
    57de:	4770      	bx	lr
    57e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    57e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    57e8:	f200 100b 	addw	r0, r0, #267	; 0x10b
    57ec:	4770      	bx	lr
    57ee:	0000      	.short	0x0000
    57f0:	200011a2 	.word	0x200011a2

000057f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    57f4:	b510      	push	{r4, lr}
    57f6:	f240 12d3 	movw	r2, #467	; 0x1d3
    57fa:	2100      	movs	r1, #0
    57fc:	4808      	ldr	r0, [pc, #32]	; (5820 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    57fe:	f007 f9ea 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5802:	2208      	movs	r2, #8
    5804:	21ff      	movs	r1, #255	; 0xff
    5806:	4807      	ldr	r0, [pc, #28]	; (5824 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5808:	f007 f9e5 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    580c:	4805      	ldr	r0, [pc, #20]	; (5824 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    580e:	2100      	movs	r1, #0
    5810:	1f00      	subs	r0, r0, #4
    5812:	7001      	strb	r1, [r0, #0]
    5814:	7041      	strb	r1, [r0, #1]
    5816:	f44f 7161 	mov.w	r1, #900	; 0x384
    581a:	8041      	strh	r1, [r0, #2]
    581c:	bd10      	pop	{r4, pc}
    581e:	0000      	.short	0x0000
    5820:	200011a2 	.word	0x200011a2
    5824:	20000278 	.word	0x20000278

00005828 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5828:	4901      	ldr	r1, [pc, #4]	; (5830 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    582a:	7008      	strb	r0, [r1, #0]
    582c:	4770      	bx	lr
    582e:	0000      	.short	0x0000
    5830:	20000274 	.word	0x20000274

00005834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5834:	4801      	ldr	r0, [pc, #4]	; (583c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5836:	7800      	ldrb	r0, [r0, #0]
    5838:	4770      	bx	lr
    583a:	0000      	.short	0x0000
    583c:	20000274 	.word	0x20000274

00005840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5840:	4b0b      	ldr	r3, [pc, #44]	; (5870 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    5842:	b510      	push	{r4, lr}
    5844:	789c      	ldrb	r4, [r3, #2]
    5846:	4284      	cmp	r4, r0
    5848:	d90f      	bls.n	586a <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    584a:	4418      	add	r0, r3
    584c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5850:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5854:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5858:	700b      	strb	r3, [r1, #0]
    585a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    585e:	6011      	str	r1, [r2, #0]
    5860:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5864:	8090      	strh	r0, [r2, #4]
    5866:	2001      	movs	r0, #1
    5868:	bd10      	pop	{r4, pc}
    586a:	2000      	movs	r0, #0
    586c:	bd10      	pop	{r4, pc}
    586e:	0000      	.short	0x0000
    5870:	200011a2 	.word	0x200011a2

00005874 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5874:	4907      	ldr	r1, [pc, #28]	; (5894 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5876:	788a      	ldrb	r2, [r1, #2]
    5878:	4282      	cmp	r2, r0
    587a:	d909      	bls.n	5890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    587c:	4408      	add	r0, r1
    587e:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5882:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5886:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    588a:	f000 0001 	and.w	r0, r0, #1
    588e:	4770      	bx	lr
    5890:	2000      	movs	r0, #0
    5892:	4770      	bx	lr
    5894:	200011a2 	.word	0x200011a2

00005898 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    589c:	4698      	mov	r8, r3
    589e:	4691      	mov	r9, r2
    58a0:	460c      	mov	r4, r1
    58a2:	4605      	mov	r5, r0
    58a4:	f000 f962 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58a8:	4606      	mov	r6, r0
    58aa:	2810      	cmp	r0, #16
    58ac:	d006      	beq.n	58bc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58ae:	f000 f92d 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58b2:	2810      	cmp	r0, #16
    58b4:	d002      	beq.n	58bc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58b6:	2012      	movs	r0, #18
    58b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58bc:	4f18      	ldr	r7, [pc, #96]	; (5920 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    58be:	78b8      	ldrb	r0, [r7, #2]
    58c0:	2808      	cmp	r0, #8
    58c2:	d22a      	bcs.n	591a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    58c4:	2e10      	cmp	r6, #16
    58c6:	d105      	bne.n	58d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    58c8:	2200      	movs	r2, #0
    58ca:	4621      	mov	r1, r4
    58cc:	4628      	mov	r0, r5
    58ce:	f000 f931 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    58d2:	4606      	mov	r6, r0
    58d4:	78bc      	ldrb	r4, [r7, #2]
    58d6:	2210      	movs	r2, #16
    58d8:	1c60      	adds	r0, r4, #1
    58da:	70b8      	strb	r0, [r7, #2]
    58dc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    58e0:	1ce8      	adds	r0, r5, #3
    58e2:	4649      	mov	r1, r9
    58e4:	f008 fcab 	bl	e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    58e8:	f105 0083 	add.w	r0, r5, #131	; 0x83
    58ec:	2210      	movs	r2, #16
    58ee:	4641      	mov	r1, r8
    58f0:	f008 fca5 	bl	e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    58f4:	2110      	movs	r1, #16
    58f6:	4640      	mov	r0, r8
    58f8:	f008 fcfe 	bl	e2f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    58fc:	443c      	add	r4, r7
    58fe:	2110      	movs	r1, #16
    5900:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5904:	4648      	mov	r0, r9
    5906:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    590a:	f008 fcf5 	bl	e2f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    590e:	77e0      	strb	r0, [r4, #31]
    5910:	f804 6c29 	strb.w	r6, [r4, #-41]
    5914:	2000      	movs	r0, #0
    5916:	73e0      	strb	r0, [r4, #15]
    5918:	e7ce      	b.n	58b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    591a:	2007      	movs	r0, #7
    591c:	e7cc      	b.n	58b8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    591e:	0000      	.short	0x0000
    5920:	200011a2 	.word	0x200011a2

00005924 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5924:	4806      	ldr	r0, [pc, #24]	; (5940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5926:	b510      	push	{r4, lr}
    5928:	7880      	ldrb	r0, [r0, #2]
    592a:	1e40      	subs	r0, r0, #1
    592c:	b244      	sxtb	r4, r0
    592e:	e004      	b.n	593a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5930:	b2e0      	uxtb	r0, r4
    5932:	f000 f963 	bl	5bfc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5936:	1e64      	subs	r4, r4, #1
    5938:	b264      	sxtb	r4, r4
    593a:	2c00      	cmp	r4, #0
    593c:	daf8      	bge.n	5930 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    593e:	bd10      	pop	{r4, pc}
    5940:	200011a2 	.word	0x200011a2

00005944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5944:	4801      	ldr	r0, [pc, #4]	; (594c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5946:	8840      	ldrh	r0, [r0, #2]
    5948:	4770      	bx	lr
    594a:	0000      	.short	0x0000
    594c:	20000274 	.word	0x20000274

00005950 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5950:	b138      	cbz	r0, 5962 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5952:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5956:	4288      	cmp	r0, r1
    5958:	d803      	bhi.n	5962 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    595a:	4903      	ldr	r1, [pc, #12]	; (5968 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    595c:	8048      	strh	r0, [r1, #2]
    595e:	2001      	movs	r0, #1
    5960:	4770      	bx	lr
    5962:	2000      	movs	r0, #0
    5964:	4770      	bx	lr
    5966:	0000      	.short	0x0000
    5968:	20000274 	.word	0x20000274

0000596c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5970:	4614      	mov	r4, r2
    5972:	2501      	movs	r5, #1
    5974:	2200      	movs	r2, #0
    5976:	461f      	mov	r7, r3
    5978:	462e      	mov	r6, r5
    597a:	7022      	strb	r2, [r4, #0]
    597c:	f000 f8f6 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5980:	2810      	cmp	r0, #16
    5982:	d024      	beq.n	59ce <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    5984:	f8df 8054 	ldr.w	r8, [pc, #84]	; 59dc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    5988:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    598c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5990:	f001 0101 	and.w	r1, r1, #1
    5994:	7021      	strb	r1, [r4, #0]
    5996:	f000 f8b9 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    599a:	4604      	mov	r4, r0
    599c:	2810      	cmp	r0, #16
    599e:	d016      	beq.n	59ce <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59a0:	b107      	cbz	r7, 59a4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    59a2:	703c      	strb	r4, [r7, #0]
    59a4:	4620      	mov	r0, r4
    59a6:	f7ff ff05 	bl	57b4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    59aa:	b180      	cbz	r0, 59ce <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59ac:	f898 1002 	ldrb.w	r1, [r8, #2]
    59b0:	4640      	mov	r0, r8
    59b2:	42a1      	cmp	r1, r4
    59b4:	d903      	bls.n	59be <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    59b6:	1901      	adds	r1, r0, r4
    59b8:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    59bc:	e000      	b.n	59c0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    59be:	2600      	movs	r6, #0
    59c0:	eb08 0004 	add.w	r0, r8, r4
    59c4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    59c8:	2801      	cmp	r0, #1
    59ca:	d004      	beq.n	59d6 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    59cc:	2500      	movs	r5, #0
    59ce:	ea45 0006 	orr.w	r0, r5, r6
    59d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59d6:	2501      	movs	r5, #1
    59d8:	e7f9      	b.n	59ce <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59da:	0000      	.short	0x0000
    59dc:	200011a2 	.word	0x200011a2

000059e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    59e0:	b570      	push	{r4, r5, r6, lr}
    59e2:	460d      	mov	r5, r1
    59e4:	4606      	mov	r6, r0
    59e6:	f000 f8c1 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    59ea:	4c10      	ldr	r4, [pc, #64]	; (5a2c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    59ec:	2810      	cmp	r0, #16
    59ee:	d007      	beq.n	5a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59f0:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    59f4:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    59f8:	07c9      	lsls	r1, r1, #31
    59fa:	d001      	beq.n	5a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    59fc:	2001      	movs	r0, #1
    59fe:	bd70      	pop	{r4, r5, r6, pc}
    5a00:	7861      	ldrb	r1, [r4, #1]
    5a02:	2908      	cmp	r1, #8
    5a04:	d210      	bcs.n	5a28 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5a06:	2810      	cmp	r0, #16
    5a08:	d008      	beq.n	5a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5a0a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5a0e:	2101      	movs	r1, #1
    5a10:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a14:	7860      	ldrb	r0, [r4, #1]
    5a16:	1c40      	adds	r0, r0, #1
    5a18:	7060      	strb	r0, [r4, #1]
    5a1a:	e7ef      	b.n	59fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5a1c:	2201      	movs	r2, #1
    5a1e:	4629      	mov	r1, r5
    5a20:	4630      	mov	r0, r6
    5a22:	f000 f887 	bl	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5a26:	e7f5      	b.n	5a14 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5a28:	2000      	movs	r0, #0
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
    5a2c:	200011a2 	.word	0x200011a2

00005a30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5a30:	b570      	push	{r4, r5, r6, lr}
    5a32:	4d0b      	ldr	r5, [pc, #44]	; (5a60 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5a34:	7828      	ldrb	r0, [r5, #0]
    5a36:	1e40      	subs	r0, r0, #1
    5a38:	b244      	sxtb	r4, r0
    5a3a:	e00a      	b.n	5a52 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5a3c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a40:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a44:	07c0      	lsls	r0, r0, #31
    5a46:	d002      	beq.n	5a4e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5a48:	b2e0      	uxtb	r0, r4
    5a4a:	f000 f91f 	bl	5c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5a4e:	1e64      	subs	r4, r4, #1
    5a50:	b264      	sxtb	r4, r4
    5a52:	2c00      	cmp	r4, #0
    5a54:	daf2      	bge.n	5a3c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5a56:	4903      	ldr	r1, [pc, #12]	; (5a64 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a58:	2000      	movs	r0, #0
    5a5a:	7048      	strb	r0, [r1, #1]
    5a5c:	bd70      	pop	{r4, r5, r6, pc}
    5a5e:	0000      	.short	0x0000
    5a60:	200011a2 	.word	0x200011a2
    5a64:	20000274 	.word	0x20000274

00005a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a6c:	2400      	movs	r4, #0
    5a6e:	4625      	mov	r5, r4
    5a70:	4e18      	ldr	r6, [pc, #96]	; (5ad4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a72:	e029      	b.n	5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a74:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a78:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a7c:	07c0      	lsls	r0, r0, #31
    5a7e:	d021      	beq.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a80:	4628      	mov	r0, r5
    5a82:	f000 f843 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a86:	4603      	mov	r3, r0
    5a88:	f7ff fe94 	bl	57b4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5a8c:	4601      	mov	r1, r0
    5a8e:	2000      	movs	r0, #0
    5a90:	2b10      	cmp	r3, #16
    5a92:	d009      	beq.n	5aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5a94:	18f2      	adds	r2, r6, r3
    5a96:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5a9a:	f1bc 0f01 	cmp.w	ip, #1
    5a9e:	d002      	beq.n	5aa6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5aa0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5aa4:	b102      	cbz	r2, 5aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5aa6:	2001      	movs	r0, #1
    5aa8:	1e40      	subs	r0, r0, #1
    5aaa:	4201      	tst	r1, r0
    5aac:	d10a      	bne.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5aae:	480a      	ldr	r0, [pc, #40]	; (5ad8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5ab0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5ab4:	5503      	strb	r3, [r0, r4]
    5ab6:	4620      	mov	r0, r4
    5ab8:	1c64      	adds	r4, r4, #1
    5aba:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5abe:	b2e4      	uxtb	r4, r4
    5ac0:	f006 f9b8 	bl	be34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5ac4:	1c6d      	adds	r5, r5, #1
    5ac6:	b2ed      	uxtb	r5, r5
    5ac8:	7830      	ldrb	r0, [r6, #0]
    5aca:	42a8      	cmp	r0, r5
    5acc:	d8d2      	bhi.n	5a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ad2:	0000      	.short	0x0000
    5ad4:	200011a2 	.word	0x200011a2
    5ad8:	20000278 	.word	0x20000278
    5adc:	4602      	mov	r2, r0
    5ade:	4809      	ldr	r0, [pc, #36]	; (5b04 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5ae0:	b510      	push	{r4, lr}
    5ae2:	7800      	ldrb	r0, [r0, #0]
    5ae4:	460b      	mov	r3, r1
    5ae6:	b158      	cbz	r0, 5b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5ae8:	4807      	ldr	r0, [pc, #28]	; (5b08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5aea:	7881      	ldrb	r1, [r0, #2]
    5aec:	b141      	cbz	r1, 5b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5aee:	b10b      	cbz	r3, 5af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5af0:	1cc0      	adds	r0, r0, #3
    5af2:	e001      	b.n	5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5af4:	4804      	ldr	r0, [pc, #16]	; (5b08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5af6:	3083      	adds	r0, #131	; 0x83
    5af8:	f005 fb36 	bl	b168 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5afc:	2001      	movs	r0, #1
    5afe:	bd10      	pop	{r4, pc}
    5b00:	2000      	movs	r0, #0
    5b02:	bd10      	pop	{r4, pc}
    5b04:	20000274 	.word	0x20000274
    5b08:	200011a2 	.word	0x200011a2
    5b0c:	4908      	ldr	r1, [pc, #32]	; (5b30 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5b0e:	b510      	push	{r4, lr}
    5b10:	4603      	mov	r3, r0
    5b12:	2000      	movs	r0, #0
    5b14:	788a      	ldrb	r2, [r1, #2]
    5b16:	e006      	b.n	5b26 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5b18:	180c      	adds	r4, r1, r0
    5b1a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5b1e:	429c      	cmp	r4, r3
    5b20:	d004      	beq.n	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5b22:	1c40      	adds	r0, r0, #1
    5b24:	b2c0      	uxtb	r0, r0
    5b26:	4282      	cmp	r2, r0
    5b28:	d8f6      	bhi.n	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5b2a:	2010      	movs	r0, #16
    5b2c:	bd10      	pop	{r4, pc}
    5b2e:	0000      	.short	0x0000
    5b30:	200011a2 	.word	0x200011a2
    5b34:	b570      	push	{r4, r5, r6, lr}
    5b36:	4b0c      	ldr	r3, [pc, #48]	; (5b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5b38:	4604      	mov	r4, r0
    5b3a:	7818      	ldrb	r0, [r3, #0]
    5b3c:	1c45      	adds	r5, r0, #1
    5b3e:	701d      	strb	r5, [r3, #0]
    5b40:	2810      	cmp	r0, #16
    5b42:	d303      	bcc.n	5b4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5b44:	2146      	movs	r1, #70	; 0x46
    5b46:	2028      	movs	r0, #40	; 0x28
    5b48:	f7fe f9ac 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b4c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5b50:	680d      	ldr	r5, [r1, #0]
    5b52:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b56:	8889      	ldrh	r1, [r1, #4]
    5b58:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b5c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b60:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b64:	bd70      	pop	{r4, r5, r6, pc}
    5b66:	0000      	.short	0x0000
    5b68:	200011a2 	.word	0x200011a2
    5b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b70:	460f      	mov	r7, r1
    5b72:	4606      	mov	r6, r0
    5b74:	2400      	movs	r4, #0
    5b76:	4d0d      	ldr	r5, [pc, #52]	; (5bac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5b78:	e00f      	b.n	5b9a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b7a:	bf00      	nop
    5b7c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5b80:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5b84:	42b1      	cmp	r1, r6
    5b86:	d106      	bne.n	5b96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5b88:	2206      	movs	r2, #6
    5b8a:	4639      	mov	r1, r7
    5b8c:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5b90:	f006 ff95 	bl	cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5b94:	b138      	cbz	r0, 5ba6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5b96:	1c64      	adds	r4, r4, #1
    5b98:	b2e4      	uxtb	r4, r4
    5b9a:	7828      	ldrb	r0, [r5, #0]
    5b9c:	42a0      	cmp	r0, r4
    5b9e:	d8ed      	bhi.n	5b7c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5ba0:	2010      	movs	r0, #16
    5ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ba6:	4620      	mov	r0, r4
    5ba8:	e7fb      	b.n	5ba2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5baa:	0000      	.short	0x0000
    5bac:	200011a2 	.word	0x200011a2
    5bb0:	b570      	push	{r4, r5, r6, lr}
    5bb2:	4605      	mov	r5, r0
    5bb4:	f7ff ffaa 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bb8:	2810      	cmp	r0, #16
    5bba:	d11c      	bne.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bbc:	4c0e      	ldr	r4, [pc, #56]	; (5bf8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5bbe:	7820      	ldrb	r0, [r4, #0]
    5bc0:	1e40      	subs	r0, r0, #1
    5bc2:	b2c0      	uxtb	r0, r0
    5bc4:	7020      	strb	r0, [r4, #0]
    5bc6:	42a8      	cmp	r0, r5
    5bc8:	d015      	beq.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bca:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5bce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5bd2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5bd6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5bda:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5bde:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5be2:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5be6:	7820      	ldrb	r0, [r4, #0]
    5be8:	f7ff ff90 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bec:	2810      	cmp	r0, #16
    5bee:	d002      	beq.n	5bf6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bf0:	4420      	add	r0, r4
    5bf2:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5bf6:	bd70      	pop	{r4, r5, r6, pc}
    5bf8:	200011a2 	.word	0x200011a2
    5bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c00:	4c21      	ldr	r4, [pc, #132]	; (5c88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5c02:	4606      	mov	r6, r0
    5c04:	19a7      	adds	r7, r4, r6
    5c06:	78a0      	ldrb	r0, [r4, #2]
    5c08:	1e40      	subs	r0, r0, #1
    5c0a:	b2c5      	uxtb	r5, r0
    5c0c:	70a5      	strb	r5, [r4, #2]
    5c0e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5c12:	42ae      	cmp	r6, r5
    5c14:	d02a      	beq.n	5c6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5c16:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5c1a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5c1e:	f10a 0103 	add.w	r1, sl, #3
    5c22:	f109 0003 	add.w	r0, r9, #3
    5c26:	2210      	movs	r2, #16
    5c28:	f006 ff5b 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c2c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5c30:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5c34:	2210      	movs	r2, #16
    5c36:	f006 ff54 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c3a:	1960      	adds	r0, r4, r5
    5c3c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5c40:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5c44:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5c48:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5c4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5c50:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c54:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c58:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c5c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c60:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c64:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c68:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c6c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c70:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c74:	07c0      	lsls	r0, r0, #31
    5c76:	d104      	bne.n	5c82 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5c78:	4640      	mov	r0, r8
    5c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c7e:	f7ff bf97 	b.w	5bb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c86:	0000      	.short	0x0000
    5c88:	200011a2 	.word	0x200011a2
    5c8c:	4905      	ldr	r1, [pc, #20]	; (5ca4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5c8e:	784a      	ldrb	r2, [r1, #1]
    5c90:	1e52      	subs	r2, r2, #1
    5c92:	704a      	strb	r2, [r1, #1]
    5c94:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5c98:	2200      	movs	r2, #0
    5c9a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5c9e:	f7ff bf87 	b.w	5bb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5ca2:	0000      	.short	0x0000
    5ca4:	200011a2 	.word	0x200011a2

00005ca8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cac:	4604      	mov	r4, r0
    5cae:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5cb2:	b171      	cbz	r1, 5cd2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5cb4:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5cb8:	1e75      	subs	r5, r6, #1
    5cba:	2901      	cmp	r1, #1
    5cbc:	d016      	beq.n	5cec <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5cbe:	2902      	cmp	r1, #2
    5cc0:	d025      	beq.n	5d0e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5cc2:	2903      	cmp	r1, #3
    5cc4:	d110      	bne.n	5ce8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5cc6:	4631      	mov	r1, r6
    5cc8:	4628      	mov	r0, r5
    5cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cce:	f008 bb65 	b.w	e39c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5cd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5cd6:	2100      	movs	r1, #0
    5cd8:	f006 ff7d 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5cdc:	4638      	mov	r0, r7
    5cde:	f008 fb1a 	bl	e316 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5ce2:	2020      	movs	r0, #32
    5ce4:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cec:	68e1      	ldr	r1, [r4, #12]
    5cee:	480d      	ldr	r0, [pc, #52]	; (5d24 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5cf0:	460a      	mov	r2, r1
    5cf2:	4408      	add	r0, r1
    5cf4:	fbb0 f0f1 	udiv	r0, r0, r1
    5cf8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5cfc:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5d00:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5d04:	8ae3      	ldrh	r3, [r4, #22]
    5d06:	4638      	mov	r0, r7
    5d08:	f000 f80e 	bl	5d28 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5d0c:	e7db      	b.n	5cc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5d0e:	68c1      	ldr	r1, [r0, #12]
    5d10:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5d14:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5d18:	4638      	mov	r0, r7
    5d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d1e:	f000 b803 	b.w	5d28 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5d22:	0000      	.short	0x0000
    5d24:	01c9c37f 	.word	0x01c9c37f
    5d28:	b530      	push	{r4, r5, lr}
    5d2a:	2400      	movs	r4, #0
    5d2c:	86c4      	strh	r4, [r0, #54]	; 0x36
    5d2e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5d30:	4d13      	ldr	r5, [pc, #76]	; (5d80 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5d32:	434c      	muls	r4, r1
    5d34:	fbb4 f4f2 	udiv	r4, r4, r2
    5d38:	8744      	strh	r4, [r0, #58]	; 0x3a
    5d3a:	f242 7410 	movw	r4, #10000	; 0x2710
    5d3e:	4363      	muls	r3, r4
    5d40:	fbb3 f3f2 	udiv	r3, r3, r2
    5d44:	1c5b      	adds	r3, r3, #1
    5d46:	b29b      	uxth	r3, r3
    5d48:	fb03 f402 	mul.w	r4, r3, r2
    5d4c:	8703      	strh	r3, [r0, #56]	; 0x38
    5d4e:	42ac      	cmp	r4, r5
    5d50:	d901      	bls.n	5d56 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5d52:	1e5b      	subs	r3, r3, #1
    5d54:	8703      	strh	r3, [r0, #56]	; 0x38
    5d56:	4b0b      	ldr	r3, [pc, #44]	; (5d84 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5d58:	f240 2471 	movw	r4, #625	; 0x271
    5d5c:	fbb3 f3f2 	udiv	r3, r3, r2
    5d60:	1c5b      	adds	r3, r3, #1
    5d62:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5d64:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5d66:	4363      	muls	r3, r4
    5d68:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5d6c:	1e5b      	subs	r3, r3, #1
    5d6e:	fbb3 f3f2 	udiv	r3, r3, r2
    5d72:	62c3      	str	r3, [r0, #44]	; 0x2c
    5d74:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5d76:	434b      	muls	r3, r1
    5d78:	fbb3 f1f2 	udiv	r1, r3, r2
    5d7c:	6281      	str	r1, [r0, #40]	; 0x28
    5d7e:	bd30      	pop	{r4, r5, pc}
    5d80:	01e84800 	.word	0x01e84800
    5d84:	02625a00 	.word	0x02625a00

00005d88 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5d88:	4909      	ldr	r1, [pc, #36]	; (5db0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5d8a:	b508      	push	{r3, lr}
    5d8c:	7809      	ldrb	r1, [r1, #0]
    5d8e:	f88d 1000 	strb.w	r1, [sp]
    5d92:	9900      	ldr	r1, [sp, #0]
    5d94:	9100      	str	r1, [sp, #0]
    5d96:	f89d 1000 	ldrb.w	r1, [sp]
    5d9a:	b109      	cbz	r1, 5da0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5d9c:	2000      	movs	r0, #0
    5d9e:	bd08      	pop	{r3, pc}
    5da0:	4903      	ldr	r1, [pc, #12]	; (5db0 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5da2:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5da6:	6002      	str	r2, [r0, #0]
    5da8:	7949      	ldrb	r1, [r1, #5]
    5daa:	7101      	strb	r1, [r0, #4]
    5dac:	2001      	movs	r0, #1
    5dae:	bd08      	pop	{r3, pc}
    5db0:	2000029b 	.word	0x2000029b

00005db4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5db4:	4905      	ldr	r1, [pc, #20]	; (5dcc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5db6:	2201      	movs	r2, #1
    5db8:	700a      	strb	r2, [r1, #0]
    5dba:	460a      	mov	r2, r1
    5dbc:	6803      	ldr	r3, [r0, #0]
    5dbe:	f8c2 3001 	str.w	r3, [r2, #1]
    5dc2:	7900      	ldrb	r0, [r0, #4]
    5dc4:	7150      	strb	r0, [r2, #5]
    5dc6:	2000      	movs	r0, #0
    5dc8:	7008      	strb	r0, [r1, #0]
    5dca:	4770      	bx	lr
    5dcc:	2000029b 	.word	0x2000029b

00005dd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5dd0:	b570      	push	{r4, r5, r6, lr}
    5dd2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5dd6:	b28b      	uxth	r3, r1
    5dd8:	7ac5      	ldrb	r5, [r0, #11]
    5dda:	ea83 0102 	eor.w	r1, r3, r2
    5dde:	2200      	movs	r2, #0
    5de0:	b2cc      	uxtb	r4, r1
    5de2:	0a09      	lsrs	r1, r1, #8
    5de4:	fa94 f4a4 	rbit	r4, r4
    5de8:	fa91 f1a1 	rbit	r1, r1
    5dec:	0e24      	lsrs	r4, r4, #24
    5dee:	0e09      	lsrs	r1, r1, #24
    5df0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5df4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5df8:	1c52      	adds	r2, r2, #1
    5dfa:	4419      	add	r1, r3
    5dfc:	b2d2      	uxtb	r2, r2
    5dfe:	b289      	uxth	r1, r1
    5e00:	2a03      	cmp	r2, #3
    5e02:	d3ed      	bcc.n	5de0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5e04:	4059      	eors	r1, r3
    5e06:	2225      	movs	r2, #37	; 0x25
    5e08:	fbb1 f3f2 	udiv	r3, r1, r2
    5e0c:	fb02 1213 	mls	r2, r2, r3, r1
    5e10:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5e14:	f002 0607 	and.w	r6, r2, #7
    5e18:	785b      	ldrb	r3, [r3, #1]
    5e1a:	2401      	movs	r4, #1
    5e1c:	fa04 f606 	lsl.w	r6, r4, r6
    5e20:	4233      	tst	r3, r6
    5e22:	d001      	beq.n	5e28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5e24:	4610      	mov	r0, r2
    5e26:	bd70      	pop	{r4, r5, r6, pc}
    5e28:	434d      	muls	r5, r1
    5e2a:	0c29      	lsrs	r1, r5, #16
    5e2c:	1c49      	adds	r1, r1, #1
    5e2e:	b2c9      	uxtb	r1, r1
    5e30:	2200      	movs	r2, #0
    5e32:	1885      	adds	r5, r0, r2
    5e34:	79ab      	ldrb	r3, [r5, #6]
    5e36:	428b      	cmp	r3, r1
    5e38:	d312      	bcc.n	5e60 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5e3a:	f895 5001 	ldrb.w	r5, [r5, #1]
    5e3e:	2300      	movs	r3, #0
    5e40:	fa04 f603 	lsl.w	r6, r4, r3
    5e44:	4235      	tst	r5, r6
    5e46:	d001      	beq.n	5e4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5e48:	1e49      	subs	r1, r1, #1
    5e4a:	b2c9      	uxtb	r1, r1
    5e4c:	b121      	cbz	r1, 5e58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5e4e:	1c5b      	adds	r3, r3, #1
    5e50:	b2db      	uxtb	r3, r3
    5e52:	2b08      	cmp	r3, #8
    5e54:	d3f4      	bcc.n	5e40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5e56:	e005      	b.n	5e64 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5e58:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5e5c:	b2c0      	uxtb	r0, r0
    5e5e:	bd70      	pop	{r4, r5, r6, pc}
    5e60:	1ac9      	subs	r1, r1, r3
    5e62:	b2c9      	uxtb	r1, r1
    5e64:	1c52      	adds	r2, r2, #1
    5e66:	b2d2      	uxtb	r2, r2
    5e68:	2a05      	cmp	r2, #5
    5e6a:	d3e2      	bcc.n	5e32 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5e6c:	f240 110d 	movw	r1, #269	; 0x10d
    5e70:	2046      	movs	r0, #70	; 0x46
    5e72:	f7fe f817 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e76:	0000      	movs	r0, r0
    5e78:	b570      	push	{r4, r5, r6, lr}
    5e7a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5e7e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5e82:	2401      	movs	r4, #1
    5e84:	fb03 2101 	mla	r1, r3, r1, r2
    5e88:	2225      	movs	r2, #37	; 0x25
    5e8a:	fbb1 f3f2 	udiv	r3, r1, r2
    5e8e:	fb02 1113 	mls	r1, r2, r3, r1
    5e92:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5e96:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5e9a:	f001 0307 	and.w	r3, r1, #7
    5e9e:	7d92      	ldrb	r2, [r2, #22]
    5ea0:	fa04 f303 	lsl.w	r3, r4, r3
    5ea4:	421a      	tst	r2, r3
    5ea6:	d003      	beq.n	5eb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5ea8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5eac:	2000      	movs	r0, #0
    5eae:	bd70      	pop	{r4, r5, r6, pc}
    5eb0:	f890 2020 	ldrb.w	r2, [r0, #32]
    5eb4:	fbb1 f3f2 	udiv	r3, r1, r2
    5eb8:	fb02 1113 	mls	r1, r2, r3, r1
    5ebc:	1c49      	adds	r1, r1, #1
    5ebe:	b2c9      	uxtb	r1, r1
    5ec0:	2300      	movs	r3, #0
    5ec2:	18c5      	adds	r5, r0, r3
    5ec4:	7eea      	ldrb	r2, [r5, #27]
    5ec6:	428a      	cmp	r2, r1
    5ec8:	d311      	bcc.n	5eee <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5eca:	f895 5016 	ldrb.w	r5, [r5, #22]
    5ece:	2200      	movs	r2, #0
    5ed0:	fa04 f602 	lsl.w	r6, r4, r2
    5ed4:	4235      	tst	r5, r6
    5ed6:	d001      	beq.n	5edc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5ed8:	1e49      	subs	r1, r1, #1
    5eda:	b2c9      	uxtb	r1, r1
    5edc:	b121      	cbz	r1, 5ee8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5ede:	1c52      	adds	r2, r2, #1
    5ee0:	b2d2      	uxtb	r2, r2
    5ee2:	2a08      	cmp	r2, #8
    5ee4:	d3f4      	bcc.n	5ed0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5ee6:	e004      	b.n	5ef2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5ee8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5eec:	e7dc      	b.n	5ea8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5eee:	1a89      	subs	r1, r1, r2
    5ef0:	b2c9      	uxtb	r1, r1
    5ef2:	1c5b      	adds	r3, r3, #1
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	2b05      	cmp	r3, #5
    5ef8:	d3e3      	bcc.n	5ec2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5efa:	201f      	movs	r0, #31
    5efc:	bd70      	pop	{r4, r5, r6, pc}
	...

00005f00 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5f00:	7841      	ldrb	r1, [r0, #1]
    5f02:	b141      	cbz	r1, 5f16 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f04:	78c0      	ldrb	r0, [r0, #3]
    5f06:	2819      	cmp	r0, #25
    5f08:	d203      	bcs.n	5f12 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5f0a:	4a04      	ldr	r2, [pc, #16]	; (5f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5f0c:	5c10      	ldrb	r0, [r2, r0]
    5f0e:	4288      	cmp	r0, r1
    5f10:	d101      	bne.n	5f16 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f12:	2001      	movs	r0, #1
    5f14:	4770      	bx	lr
    5f16:	2000      	movs	r0, #0
    5f18:	4770      	bx	lr
    5f1a:	0000      	.short	0x0000
    5f1c:	000100c6 	.word	0x000100c6

00005f20 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f20:	b510      	push	{r4, lr}
    5f22:	2201      	movs	r2, #1
    5f24:	70c1      	strb	r1, [r0, #3]
    5f26:	2919      	cmp	r1, #25
    5f28:	d202      	bcs.n	5f30 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f2a:	4a06      	ldr	r2, [pc, #24]	; (5f44 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f2c:	5c52      	ldrb	r2, [r2, r1]
    5f2e:	e006      	b.n	5f3e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f30:	29ff      	cmp	r1, #255	; 0xff
    5f32:	d004      	beq.n	5f3e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f34:	f240 31d5 	movw	r1, #981	; 0x3d5
    5f38:	202a      	movs	r0, #42	; 0x2a
    5f3a:	f7fd ffb3 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f3e:	7042      	strb	r2, [r0, #1]
    5f40:	bd10      	pop	{r4, pc}
    5f42:	0000      	.short	0x0000
    5f44:	000100c6 	.word	0x000100c6

00005f48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f4c:	4c12      	ldr	r4, [pc, #72]	; (5f98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f4e:	4607      	mov	r7, r0
    5f50:	460e      	mov	r6, r1
    5f52:	7da0      	ldrb	r0, [r4, #22]
    5f54:	b110      	cbz	r0, 5f5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5f56:	8b20      	ldrh	r0, [r4, #24]
    5f58:	2800      	cmp	r0, #0
    5f5a:	d012      	beq.n	5f82 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5f5c:	480e      	ldr	r0, [pc, #56]	; (5f98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f5e:	3014      	adds	r0, #20
    5f60:	4680      	mov	r8, r0
    5f62:	f008 fb4c 	bl	e5fe <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5f66:	b9a8      	cbnz	r0, 5f94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5f68:	8aa5      	ldrh	r5, [r4, #20]
    5f6a:	8aa0      	ldrh	r0, [r4, #20]
    5f6c:	4632      	mov	r2, r6
    5f6e:	4639      	mov	r1, r7
    5f70:	f008 fb7d 	bl	e66e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5f74:	b138      	cbz	r0, 5f86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5f76:	7da0      	ldrb	r0, [r4, #22]
    5f78:	b110      	cbz	r0, 5f80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5f7a:	8b20      	ldrh	r0, [r4, #24]
    5f7c:	1e40      	subs	r0, r0, #1
    5f7e:	8320      	strh	r0, [r4, #24]
    5f80:	2001      	movs	r0, #1
    5f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f86:	4640      	mov	r0, r8
    5f88:	f008 fb39 	bl	e5fe <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5f8c:	b910      	cbnz	r0, 5f94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5f8e:	8aa0      	ldrh	r0, [r4, #20]
    5f90:	42a8      	cmp	r0, r5
    5f92:	d1ea      	bne.n	5f6a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5f94:	2000      	movs	r0, #0
    5f96:	e7f4      	b.n	5f82 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5f98:	20001004 	.word	0x20001004
    5f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5fa0:	468a      	mov	sl, r1
    5fa2:	4699      	mov	r9, r3
    5fa4:	4615      	mov	r5, r2
    5fa6:	4604      	mov	r4, r0
    5fa8:	a901      	add	r1, sp, #4
    5faa:	f007 ffc2 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5fae:	bbd8      	cbnz	r0, 6028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5fb0:	9f02      	ldr	r7, [sp, #8]
    5fb2:	2001      	movs	r0, #1
    5fb4:	3778      	adds	r7, #120	; 0x78
    5fb6:	b18d      	cbz	r5, 5fdc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    5fb8:	4620      	mov	r0, r4
    5fba:	f7fe fb87 	bl	46cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5fbe:	0004      	movs	r4, r0
    5fc0:	d00e      	beq.n	5fe0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    5fc2:	4629      	mov	r1, r5
    5fc4:	f007 fcad 	bl	d922 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5fc8:	0006      	movs	r6, r0
    5fca:	d003      	beq.n	5fd4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    5fcc:	4819      	ldr	r0, [pc, #100]	; (6034 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    5fce:	8840      	ldrh	r0, [r0, #2]
    5fd0:	42a8      	cmp	r0, r5
    5fd2:	d207      	bcs.n	5fe4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5fd4:	2000      	movs	r0, #0
    5fd6:	b004      	add	sp, #16
    5fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5fdc:	7538      	strb	r0, [r7, #20]
    5fde:	e023      	b.n	6028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5fe0:	216e      	movs	r1, #110	; 0x6e
    5fe2:	e024      	b.n	602e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    5fe4:	4620      	mov	r0, r4
    5fe6:	4631      	mov	r1, r6
    5fe8:	aa03      	add	r2, sp, #12
    5fea:	f007 fc93 	bl	d914 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5fee:	9803      	ldr	r0, [sp, #12]
    5ff0:	f04f 0800 	mov.w	r8, #0
    5ff4:	f8a0 8000 	strh.w	r8, [r0]
    5ff8:	f880 8002 	strb.w	r8, [r0, #2]
    5ffc:	7d39      	ldrb	r1, [r7, #20]
    5ffe:	b109      	cbz	r1, 6004 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6000:	f04f 0a02 	mov.w	sl, #2
    6004:	4651      	mov	r1, sl
    6006:	f008 fa74 	bl	e4f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    600a:	4631      	mov	r1, r6
    600c:	2603      	movs	r6, #3
    600e:	4620      	mov	r0, r4
    6010:	464a      	mov	r2, r9
    6012:	462b      	mov	r3, r5
    6014:	9600      	str	r6, [sp, #0]
    6016:	f007 fb3a 	bl	d68e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    601a:	4620      	mov	r0, r4
    601c:	4629      	mov	r1, r5
    601e:	f007 fc0f 	bl	d840 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6022:	b118      	cbz	r0, 602c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6024:	f887 8014 	strb.w	r8, [r7, #20]
    6028:	2001      	movs	r0, #1
    602a:	e7d4      	b.n	5fd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    602c:	2184      	movs	r1, #132	; 0x84
    602e:	202b      	movs	r0, #43	; 0x2b
    6030:	f7fd ff38 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6034:	20001004 	.word	0x20001004

00006038 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6038:	4901      	ldr	r1, [pc, #4]	; (6040 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    603a:	2001      	movs	r0, #1
    603c:	7008      	strb	r0, [r1, #0]
    603e:	4770      	bx	lr
    6040:	20000281 	.word	0x20000281

00006044 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6048:	0006      	movs	r6, r0
    604a:	d00a      	beq.n	6062 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    604c:	4926      	ldr	r1, [pc, #152]	; (60e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    604e:	2201      	movs	r2, #1
    6050:	7808      	ldrb	r0, [r1, #0]
    6052:	b148      	cbz	r0, 6068 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6054:	2000      	movs	r0, #0
    6056:	7070      	strb	r0, [r6, #1]
    6058:	2303      	movs	r3, #3
    605a:	7033      	strb	r3, [r6, #0]
    605c:	7132      	strb	r2, [r6, #4]
    605e:	7008      	strb	r0, [r1, #0]
    6060:	e03c      	b.n	60dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    6062:	f240 21da 	movw	r1, #730	; 0x2da
    6066:	e009      	b.n	607c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6068:	4c1f      	ldr	r4, [pc, #124]	; (60e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    606a:	1ce4      	adds	r4, r4, #3
    606c:	7820      	ldrb	r0, [r4, #0]
    606e:	b940      	cbnz	r0, 6082 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6070:	1ca0      	adds	r0, r4, #2
    6072:	f008 fb45 	bl	e700 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6076:	b120      	cbz	r0, 6082 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6078:	f240 21e9 	movw	r1, #745	; 0x2e9
    607c:	2010      	movs	r0, #16
    607e:	f7fd ff11 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6082:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6086:	2000      	movs	r0, #0
    6088:	f7fe f8f0 	bl	426c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    608c:	4f17      	ldr	r7, [pc, #92]	; (60ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    608e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 60f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    6092:	4605      	mov	r5, r0
    6094:	6838      	ldr	r0, [r7, #0]
    6096:	b130      	cbz	r0, 60a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    6098:	8860      	ldrh	r0, [r4, #2]
    609a:	42a8      	cmp	r0, r5
    609c:	d103      	bne.n	60a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    609e:	4630      	mov	r0, r6
    60a0:	f000 f9d2 	bl	6448 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    60a4:	e006      	b.n	60b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    60a6:	f8d9 0000 	ldr.w	r0, [r9]
    60aa:	b120      	cbz	r0, 60b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    60ac:	8860      	ldrh	r0, [r4, #2]
    60ae:	4631      	mov	r1, r6
    60b0:	f000 f920 	bl	62f4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    60b4:	b990      	cbnz	r0, 60dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    60b6:	1ca0      	adds	r0, r4, #2
    60b8:	f008 fb22 	bl	e700 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    60bc:	b910      	cbnz	r0, 60c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    60be:	8861      	ldrh	r1, [r4, #2]
    60c0:	4541      	cmp	r1, r8
    60c2:	d1e7      	bne.n	6094 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    60c4:	480b      	ldr	r0, [pc, #44]	; (60f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    60c6:	6801      	ldr	r1, [r0, #0]
    60c8:	b111      	cbz	r1, 60d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    60ca:	4630      	mov	r0, r6
    60cc:	4788      	blx	r1
    60ce:	b928      	cbnz	r0, 60dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    60d0:	4809      	ldr	r0, [pc, #36]	; (60f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    60d2:	6801      	ldr	r1, [r0, #0]
    60d4:	b129      	cbz	r1, 60e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    60d6:	4630      	mov	r0, r6
    60d8:	4788      	blx	r1
    60da:	b110      	cbz	r0, 60e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    60dc:	2001      	movs	r0, #1
    60de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60e2:	2000      	movs	r0, #0
    60e4:	e7fb      	b.n	60de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    60e6:	0000      	.short	0x0000
    60e8:	20000281 	.word	0x20000281
    60ec:	200000f8 	.word	0x200000f8
    60f0:	200000f4 	.word	0x200000f4
    60f4:	200000fc 	.word	0x200000fc
    60f8:	200000f0 	.word	0x200000f0

000060fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    60fc:	4901      	ldr	r1, [pc, #4]	; (6104 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    60fe:	7008      	strb	r0, [r1, #0]
    6100:	f000 b996 	b.w	6430 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    6104:	20000280 	.word	0x20000280

00006108 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    6108:	4902      	ldr	r1, [pc, #8]	; (6114 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    610a:	2001      	movs	r0, #1
    610c:	7048      	strb	r0, [r1, #1]
    610e:	f000 b809 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6112:	0000      	.short	0x0000
    6114:	20000281 	.word	0x20000281

00006118 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    6118:	4801      	ldr	r0, [pc, #4]	; (6120 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    611a:	7840      	ldrb	r0, [r0, #1]
    611c:	4770      	bx	lr
    611e:	0000      	.short	0x0000
    6120:	20000281 	.word	0x20000281

00006124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6124:	4801      	ldr	r0, [pc, #4]	; (612c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6126:	7800      	ldrb	r0, [r0, #0]
    6128:	f7fd bcac 	b.w	3a84 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    612c:	20000280 	.word	0x20000280

00006130 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    6130:	4904      	ldr	r1, [pc, #16]	; (6144 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    6132:	4803      	ldr	r0, [pc, #12]	; (6140 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    6134:	6008      	str	r0, [r1, #0]
    6136:	4905      	ldr	r1, [pc, #20]	; (614c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    6138:	4803      	ldr	r0, [pc, #12]	; (6148 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    613a:	6008      	str	r0, [r1, #0]
    613c:	4770      	bx	lr
    613e:	0000      	.short	0x0000
    6140:	000089c1 	.word	0x000089c1
    6144:	200000f4 	.word	0x200000f4
    6148:	00004bcd 	.word	0x00004bcd
    614c:	200000fc 	.word	0x200000fc

00006150 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    6150:	4902      	ldr	r1, [pc, #8]	; (615c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    6152:	4801      	ldr	r0, [pc, #4]	; (6158 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    6154:	6008      	str	r0, [r1, #0]
    6156:	4770      	bx	lr
    6158:	000066b5 	.word	0x000066b5
    615c:	200000f8 	.word	0x200000f8
    6160:	b570      	push	{r4, r5, r6, lr}
    6162:	4604      	mov	r4, r0
    6164:	7800      	ldrb	r0, [r0, #0]
    6166:	2805      	cmp	r0, #5
    6168:	d001      	beq.n	616e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    616a:	216d      	movs	r1, #109	; 0x6d
    616c:	e056      	b.n	621c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    616e:	7ba0      	ldrb	r0, [r4, #14]
    6170:	06c0      	lsls	r0, r0, #27
    6172:	d401      	bmi.n	6178 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    6174:	216e      	movs	r1, #110	; 0x6e
    6176:	e051      	b.n	621c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6178:	221c      	movs	r2, #28
    617a:	1d21      	adds	r1, r4, #4
    617c:	482d      	ldr	r0, [pc, #180]	; (6234 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    617e:	f006 fcb0 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6182:	482c      	ldr	r0, [pc, #176]	; (6234 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6184:	7b22      	ldrb	r2, [r4, #12]
    6186:	f104 0120 	add.w	r1, r4, #32
    618a:	301c      	adds	r0, #28
    618c:	f006 fca9 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6190:	4828      	ldr	r0, [pc, #160]	; (6234 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6192:	f04f 0201 	mov.w	r2, #1
    6196:	7a81      	ldrb	r1, [r0, #10]
    6198:	0749      	lsls	r1, r1, #29
    619a:	d502      	bpl.n	61a2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    619c:	7cc1      	ldrb	r1, [r0, #19]
    619e:	29fe      	cmp	r1, #254	; 0xfe
    61a0:	d00c      	beq.n	61bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    61a2:	2304      	movs	r3, #4
    61a4:	7023      	strb	r3, [r4, #0]
    61a6:	6801      	ldr	r1, [r0, #0]
    61a8:	6061      	str	r1, [r4, #4]
    61aa:	6841      	ldr	r1, [r0, #4]
    61ac:	60a1      	str	r1, [r4, #8]
    61ae:	8901      	ldrh	r1, [r0, #8]
    61b0:	81a1      	strh	r1, [r4, #12]
    61b2:	7a81      	ldrb	r1, [r0, #10]
    61b4:	070d      	lsls	r5, r1, #28
    61b6:	d519      	bpl.n	61ec <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    61b8:	73a3      	strb	r3, [r4, #14]
    61ba:	e02b      	b.n	6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    61bc:	2113      	movs	r1, #19
    61be:	7021      	strb	r1, [r4, #0]
    61c0:	7801      	ldrb	r1, [r0, #0]
    61c2:	7121      	strb	r1, [r4, #4]
    61c4:	7162      	strb	r2, [r4, #5]
    61c6:	7841      	ldrb	r1, [r0, #1]
    61c8:	71a1      	strb	r1, [r4, #6]
    61ca:	f8d0 1002 	ldr.w	r1, [r0, #2]
    61ce:	f8c4 1007 	str.w	r1, [r4, #7]
    61d2:	88c1      	ldrh	r1, [r0, #6]
    61d4:	f8a4 100b 	strh.w	r1, [r4, #11]
    61d8:	21fe      	movs	r1, #254	; 0xfe
    61da:	7361      	strb	r1, [r4, #13]
    61dc:	6941      	ldr	r1, [r0, #20]
    61de:	f8c4 100e 	str.w	r1, [r4, #14]
    61e2:	8b01      	ldrh	r1, [r0, #24]
    61e4:	8261      	strh	r1, [r4, #18]
    61e6:	7a40      	ldrb	r0, [r0, #9]
    61e8:	7520      	strb	r0, [r4, #20]
    61ea:	bd70      	pop	{r4, r5, r6, pc}
    61ec:	07cb      	lsls	r3, r1, #31
    61ee:	d003      	beq.n	61f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    61f0:	078b      	lsls	r3, r1, #30
    61f2:	d501      	bpl.n	61f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    61f4:	2100      	movs	r1, #0
    61f6:	e00c      	b.n	6212 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    61f8:	074b      	lsls	r3, r1, #29
    61fa:	d501      	bpl.n	6200 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    61fc:	73a2      	strb	r2, [r4, #14]
    61fe:	e009      	b.n	6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    6200:	07ca      	lsls	r2, r1, #31
    6202:	d001      	beq.n	6208 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    6204:	21b5      	movs	r1, #181	; 0xb5
    6206:	e009      	b.n	621c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6208:	0789      	lsls	r1, r1, #30
    620a:	d501      	bpl.n	6210 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    620c:	2102      	movs	r1, #2
    620e:	e000      	b.n	6212 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    6210:	2103      	movs	r1, #3
    6212:	73a1      	strb	r1, [r4, #14]
    6214:	7a02      	ldrb	r2, [r0, #8]
    6216:	2a1f      	cmp	r2, #31
    6218:	d903      	bls.n	6222 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    621a:	21b8      	movs	r1, #184	; 0xb8
    621c:	2010      	movs	r0, #16
    621e:	f7fd fe41 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6222:	f104 000f 	add.w	r0, r4, #15
    6226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    622a:	4902      	ldr	r1, [pc, #8]	; (6234 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    622c:	311c      	adds	r1, #28
    622e:	f006 bc58 	b.w	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6232:	0000      	.short	0x0000
    6234:	20001020 	.word	0x20001020
    6238:	b510      	push	{r4, lr}
    623a:	492d      	ldr	r1, [pc, #180]	; (62f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    623c:	b086      	sub	sp, #24
    623e:	7c8a      	ldrb	r2, [r1, #18]
    6240:	7801      	ldrb	r1, [r0, #0]
    6242:	07d3      	lsls	r3, r2, #31
    6244:	d101      	bne.n	624a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    6246:	291d      	cmp	r1, #29
    6248:	d004      	beq.n	6254 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    624a:	291c      	cmp	r1, #28
    624c:	d01f      	beq.n	628e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    624e:	2915      	cmp	r1, #21
    6250:	d046      	beq.n	62e0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    6252:	e04a      	b.n	62ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6254:	8880      	ldrh	r0, [r0, #4]
    6256:	f8ad 0000 	strh.w	r0, [sp]
    625a:	a902      	add	r1, sp, #8
    625c:	f007 fe69 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6260:	b110      	cbz	r0, 6268 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    6262:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6266:	e035      	b.n	62d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6268:	9803      	ldr	r0, [sp, #12]
    626a:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    626e:	f88d 1002 	strb.w	r1, [sp, #2]
    6272:	7841      	ldrb	r1, [r0, #1]
    6274:	f88d 1003 	strb.w	r1, [sp, #3]
    6278:	8840      	ldrh	r0, [r0, #2]
    627a:	f8ad 0004 	strh.w	r0, [sp, #4]
    627e:	2102      	movs	r1, #2
    6280:	4668      	mov	r0, sp
    6282:	f004 fd45 	bl	ad10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6286:	b340      	cbz	r0, 62da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6288:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    628c:	e022      	b.n	62d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    628e:	0791      	lsls	r1, r2, #30
    6290:	d42b      	bmi.n	62ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6292:	8884      	ldrh	r4, [r0, #4]
    6294:	a903      	add	r1, sp, #12
    6296:	4620      	mov	r0, r4
    6298:	f009 f9ba 	bl	f610 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    629c:	b110      	cbz	r0, 62a4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    629e:	f240 11a5 	movw	r1, #421	; 0x1a5
    62a2:	e017      	b.n	62d4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    62a4:	f8ad 4000 	strh.w	r4, [sp]
    62a8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    62ac:	f8ad 0002 	strh.w	r0, [sp, #2]
    62b0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    62b4:	f8ad 0004 	strh.w	r0, [sp, #4]
    62b8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    62bc:	f8ad 0006 	strh.w	r0, [sp, #6]
    62c0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    62c4:	f8ad 0008 	strh.w	r0, [sp, #8]
    62c8:	4668      	mov	r0, sp
    62ca:	f009 f9cc 	bl	f666 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    62ce:	b120      	cbz	r0, 62da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    62d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    62d4:	2010      	movs	r0, #16
    62d6:	f7fd fde5 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62da:	2001      	movs	r0, #1
    62dc:	b006      	add	sp, #24
    62de:	bd10      	pop	{r4, pc}
    62e0:	0751      	lsls	r1, r2, #29
    62e2:	d402      	bmi.n	62ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    62e4:	7b80      	ldrb	r0, [r0, #14]
    62e6:	07c0      	lsls	r0, r0, #31
    62e8:	d0f7      	beq.n	62da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    62ea:	2000      	movs	r0, #0
    62ec:	e7f6      	b.n	62dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    62ee:	0000      	.short	0x0000
    62f0:	20001004 	.word	0x20001004
    62f4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62f8:	b087      	sub	sp, #28
    62fa:	460c      	mov	r4, r1
    62fc:	a902      	add	r1, sp, #8
    62fe:	9807      	ldr	r0, [sp, #28]
    6300:	f007 fe17 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6304:	2800      	cmp	r0, #0
    6306:	d17d      	bne.n	6404 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6308:	f8df 9120 	ldr.w	r9, [pc, #288]	; 642c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    630c:	f04f 0801 	mov.w	r8, #1
    6310:	4682      	mov	sl, r0
    6312:	9803      	ldr	r0, [sp, #12]
    6314:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6318:	2800      	cmp	r0, #0
    631a:	d00c      	beq.n	6336 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    631c:	f8d9 2000 	ldr.w	r2, [r9]
    6320:	b162      	cbz	r2, 633c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    6322:	4621      	mov	r1, r4
    6324:	9807      	ldr	r0, [sp, #28]
    6326:	4790      	blx	r2
    6328:	b140      	cbz	r0, 633c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    632a:	4620      	mov	r0, r4
    632c:	f7ff ff84 	bl	6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    6330:	2800      	cmp	r0, #0
    6332:	d1ee      	bne.n	6312 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    6334:	2001      	movs	r0, #1
    6336:	b009      	add	sp, #36	; 0x24
    6338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    633c:	9d03      	ldr	r5, [sp, #12]
    633e:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    6342:	3578      	adds	r5, #120	; 0x78
    6344:	b950      	cbnz	r0, 635c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6346:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    634a:	f88d 0004 	strb.w	r0, [sp, #4]
    634e:	9801      	ldr	r0, [sp, #4]
    6350:	9001      	str	r0, [sp, #4]
    6352:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6356:	b108      	cbz	r0, 635c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6358:	2001      	movs	r0, #1
    635a:	e000      	b.n	635e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    635c:	2000      	movs	r0, #0
    635e:	4683      	mov	fp, r0
    6360:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6364:	b1c0      	cbz	r0, 6398 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6366:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    636a:	0780      	lsls	r0, r0, #30
    636c:	d514      	bpl.n	6398 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    636e:	f884 a001 	strb.w	sl, [r4, #1]
    6372:	f884 8000 	strb.w	r8, [r4]
    6376:	f884 a004 	strb.w	sl, [r4, #4]
    637a:	9907      	ldr	r1, [sp, #28]
    637c:	f8a4 1005 	strh.w	r1, [r4, #5]
    6380:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6384:	71e1      	strb	r1, [r4, #7]
    6386:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    638a:	8121      	strh	r1, [r4, #8]
    638c:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6390:	8161      	strh	r1, [r4, #10]
    6392:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6396:	e7c8      	b.n	632a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6398:	9807      	ldr	r0, [sp, #28]
    639a:	f7fe f997 	bl	46cc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    639e:	0007      	movs	r7, r0
    63a0:	d00d      	beq.n	63be <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    63a2:	f007 fa71 	bl	d888 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    63a6:	0006      	movs	r6, r0
    63a8:	d015      	beq.n	63d6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    63aa:	f884 a001 	strb.w	sl, [r4, #1]
    63ae:	200f      	movs	r0, #15
    63b0:	7020      	strb	r0, [r4, #0]
    63b2:	9807      	ldr	r0, [sp, #28]
    63b4:	80e0      	strh	r0, [r4, #6]
    63b6:	8126      	strh	r6, [r4, #8]
    63b8:	f884 8004 	strb.w	r8, [r4, #4]
    63bc:	e007      	b.n	63ce <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    63be:	f240 2133 	movw	r1, #563	; 0x233
    63c2:	e02d      	b.n	6420 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    63c4:	2100      	movs	r1, #0
    63c6:	4638      	mov	r0, r7
    63c8:	460a      	mov	r2, r1
    63ca:	f007 fb81 	bl	dad0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    63ce:	1e76      	subs	r6, r6, #1
    63d0:	b2b6      	uxth	r6, r6
    63d2:	d2f7      	bcs.n	63c4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    63d4:	e7a9      	b.n	632a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    63d6:	9807      	ldr	r0, [sp, #28]
    63d8:	f7fe f962 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    63dc:	b1f0      	cbz	r0, 641c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    63de:	f1bb 0f00 	cmp.w	fp, #0
    63e2:	d020      	beq.n	6426 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    63e4:	f007 f96a 	bl	d6bc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    63e8:	b160      	cbz	r0, 6404 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    63ea:	9807      	ldr	r0, [sp, #28]
    63ec:	f007 fc9f 	bl	dd2e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    63f0:	2100      	movs	r1, #0
    63f2:	9807      	ldr	r0, [sp, #28]
    63f4:	f7fd ffd4 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    63f8:	f884 a001 	strb.w	sl, [r4, #1]
    63fc:	210c      	movs	r1, #12
    63fe:	4650      	mov	r0, sl
    6400:	7021      	strb	r1, [r4, #0]
    6402:	e000      	b.n	6406 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    6404:	e00f      	b.n	6426 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6406:	f884 a004 	strb.w	sl, [r4, #4]
    640a:	9907      	ldr	r1, [sp, #28]
    640c:	f8a4 1005 	strh.w	r1, [r4, #5]
    6410:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6414:	71e1      	strb	r1, [r4, #7]
    6416:	3524      	adds	r5, #36	; 0x24
    6418:	7028      	strb	r0, [r5, #0]
    641a:	e786      	b.n	632a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    641c:	f240 2151 	movw	r1, #593	; 0x251
    6420:	2010      	movs	r0, #16
    6422:	f7fd fd3f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6426:	2000      	movs	r0, #0
    6428:	e785      	b.n	6336 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    642a:	0000      	.short	0x0000
    642c:	200000f4 	.word	0x200000f4
    6430:	4804      	ldr	r0, [pc, #16]	; (6444 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    6432:	2100      	movs	r1, #0
    6434:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6438:	7001      	strb	r1, [r0, #0]
    643a:	8042      	strh	r2, [r0, #2]
    643c:	1f00      	subs	r0, r0, #4
    643e:	f8a0 1001 	strh.w	r1, [r0, #1]
    6442:	4770      	bx	lr
    6444:	20000284 	.word	0x20000284
    6448:	b570      	push	{r4, r5, r6, lr}
    644a:	4604      	mov	r4, r0
    644c:	481b      	ldr	r0, [pc, #108]	; (64bc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    644e:	6801      	ldr	r1, [r0, #0]
    6450:	b319      	cbz	r1, 649a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6452:	4620      	mov	r0, r4
    6454:	4788      	blx	r1
    6456:	b300      	cbz	r0, 649a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6458:	7820      	ldrb	r0, [r4, #0]
    645a:	2818      	cmp	r0, #24
    645c:	d002      	beq.n	6464 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    645e:	2805      	cmp	r0, #5
    6460:	d016      	beq.n	6490 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    6462:	e018      	b.n	6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6464:	7920      	ldrb	r0, [r4, #4]
    6466:	2801      	cmp	r0, #1
    6468:	d115      	bne.n	6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    646a:	88e0      	ldrh	r0, [r4, #6]
    646c:	2100      	movs	r1, #0
    646e:	f007 fbf6 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6472:	0004      	movs	r4, r0
    6474:	d00f      	beq.n	6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6476:	8820      	ldrh	r0, [r4, #0]
    6478:	f007 fc59 	bl	dd2e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    647c:	8820      	ldrh	r0, [r4, #0]
    647e:	2100      	movs	r1, #0
    6480:	f7fd ff8e 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6484:	b138      	cbz	r0, 6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6486:	f44f 7185 	mov.w	r1, #266	; 0x10a
    648a:	2010      	movs	r0, #16
    648c:	f7fd fd0a 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6490:	4620      	mov	r0, r4
    6492:	f7ff fe65 	bl	6160 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    6496:	2001      	movs	r0, #1
    6498:	bd70      	pop	{r4, r5, r6, pc}
    649a:	4d09      	ldr	r5, [pc, #36]	; (64c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    649c:	7868      	ldrb	r0, [r5, #1]
    649e:	2800      	cmp	r0, #0
    64a0:	d0fa      	beq.n	6498 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    64a2:	2600      	movs	r6, #0
    64a4:	7066      	strb	r6, [r4, #1]
    64a6:	2014      	movs	r0, #20
    64a8:	7020      	strb	r0, [r4, #0]
    64aa:	2220      	movs	r2, #32
    64ac:	4631      	mov	r1, r6
    64ae:	1d20      	adds	r0, r4, #4
    64b0:	f006 fb91 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    64b4:	2002      	movs	r0, #2
    64b6:	7120      	strb	r0, [r4, #4]
    64b8:	706e      	strb	r6, [r5, #1]
    64ba:	e7ec      	b.n	6496 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    64bc:	200000f8 	.word	0x200000f8
    64c0:	20000281 	.word	0x20000281

000064c4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    64c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64c6:	f06f 021f 	mvn.w	r2, #31
    64ca:	0c01      	lsrs	r1, r0, #16
    64cc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    64d0:	251f      	movs	r5, #31
    64d2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    64d6:	3854      	subs	r0, #84	; 0x54
    64d8:	d00d      	beq.n	64f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64da:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    64de:	3855      	subs	r0, #85	; 0x55
    64e0:	d009      	beq.n	64f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64e2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    64e6:	38aa      	subs	r0, #170	; 0xaa
    64e8:	d005      	beq.n	64f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64ea:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    64ee:	38aa      	subs	r0, #170	; 0xaa
    64f0:	d001      	beq.n	64f6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64f2:	2001      	movs	r0, #1
    64f4:	e000      	b.n	64f8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    64f6:	2000      	movs	r0, #0
    64f8:	2200      	movs	r2, #0
    64fa:	4613      	mov	r3, r2
    64fc:	ea4f 0402 	mov.w	r4, r2
    6500:	ea82 0701 	eor.w	r7, r2, r1
    6504:	43ff      	mvns	r7, r7
    6506:	431f      	orrs	r7, r3
    6508:	1c7f      	adds	r7, r7, #1
    650a:	d00f      	beq.n	652c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    650c:	f006 0701 	and.w	r7, r6, #1
    6510:	0852      	lsrs	r2, r2, #1
    6512:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6516:	f005 0701 	and.w	r7, r5, #1
    651a:	085b      	lsrs	r3, r3, #1
    651c:	0876      	lsrs	r6, r6, #1
    651e:	086d      	lsrs	r5, r5, #1
    6520:	1c64      	adds	r4, r4, #1
    6522:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6526:	2c16      	cmp	r4, #22
    6528:	d3ea      	bcc.n	6500 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    652c:	2000      	movs	r0, #0
    652e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006530 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    6530:	4801      	ldr	r0, [pc, #4]	; (6538 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    6532:	f008 ba72 	b.w	ea1a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6536:	0000      	.short	0x0000
    6538:	20000100 	.word	0x20000100

0000653c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    653c:	b510      	push	{r4, lr}
    653e:	4604      	mov	r4, r0
    6540:	f008 fa5a 	bl	e9f8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6544:	b310      	cbz	r0, 658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6546:	43e0      	mvns	r0, r4
    6548:	f008 fa56 	bl	e9f8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    654c:	b1f0      	cbz	r0, 658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    654e:	16a0      	asrs	r0, r4, #26
    6550:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    6554:	1e41      	subs	r1, r0, #1
    6556:	4208      	tst	r0, r1
    6558:	d018      	beq.n	658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    655a:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    655e:	f007 fd11 	bl	df84 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    6562:	2818      	cmp	r0, #24
    6564:	d812      	bhi.n	658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6566:	b2a0      	uxth	r0, r4
    6568:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    656c:	d107      	bne.n	657e <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    656e:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    6572:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    6576:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    657a:	4281      	cmp	r1, r0
    657c:	d006      	beq.n	658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    657e:	4804      	ldr	r0, [pc, #16]	; (6590 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    6580:	4044      	eors	r4, r0
    6582:	1e60      	subs	r0, r4, #1
    6584:	4204      	tst	r4, r0
    6586:	d001      	beq.n	658c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6588:	2001      	movs	r0, #1
    658a:	bd10      	pop	{r4, pc}
    658c:	2000      	movs	r0, #0
    658e:	bd10      	pop	{r4, pc}
    6590:	8e89bed6 	.word	0x8e89bed6
    6594:	4801      	ldr	r0, [pc, #4]	; (659c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    6596:	f000 b803 	b.w	65a0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    659a:	0000      	.short	0x0000
    659c:	20000100 	.word	0x20000100

000065a0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    65a0:	b510      	push	{r4, lr}
    65a2:	e9d0 2100 	ldrd	r2, r1, [r0]
    65a6:	4b09      	ldr	r3, [pc, #36]	; (65cc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    65a8:	4c09      	ldr	r4, [pc, #36]	; (65d0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    65aa:	4353      	muls	r3, r2
    65ac:	4354      	muls	r4, r2
    65ae:	4051      	eors	r1, r2
    65b0:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    65b4:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    65b8:	ea4f 41f1 	mov.w	r1, r1, ror #19
    65bc:	e9c0 2100 	strd	r2, r1, [r0]
    65c0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    65c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    65c8:	4618      	mov	r0, r3
    65ca:	bd10      	pop	{r4, pc}
    65cc:	c6ef3760 	.word	0xc6ef3760
    65d0:	9e3779bb 	.word	0x9e3779bb

000065d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    65d4:	4801      	ldr	r0, [pc, #4]	; (65dc <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    65d6:	6840      	ldr	r0, [r0, #4]
    65d8:	3080      	adds	r0, #128	; 0x80
    65da:	4770      	bx	lr
    65dc:	20000108 	.word	0x20000108

000065e0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    65e0:	b510      	push	{r4, lr}
    65e2:	4c1f      	ldr	r4, [pc, #124]	; (6660 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    65e4:	6860      	ldr	r0, [r4, #4]
    65e6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    65ea:	f008 fa37 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    65ee:	6861      	ldr	r1, [r4, #4]
    65f0:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    65f4:	3132      	adds	r1, #50	; 0x32
    65f6:	f7fe faa7 	bl	4b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    65fa:	6860      	ldr	r0, [r4, #4]
    65fc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6600:	f008 fa33 	bl	ea6a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6604:	6861      	ldr	r1, [r4, #4]
    6606:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    660a:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    660e:	3132      	adds	r1, #50	; 0x32
    6610:	f008 fa10 	bl	ea34 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6614:	b930      	cbnz	r0, 6624 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6616:	6861      	ldr	r1, [r4, #4]
    6618:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    661c:	3132      	adds	r1, #50	; 0x32
    661e:	f008 fa12 	bl	ea46 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6622:	b108      	cbz	r0, 6628 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6624:	2101      	movs	r1, #1
    6626:	e000      	b.n	662a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6628:	2100      	movs	r1, #0
    662a:	6860      	ldr	r0, [r4, #4]
    662c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    6630:	b919      	cbnz	r1, 663a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    6632:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6636:	2900      	cmp	r1, #0
    6638:	d010      	beq.n	665c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    663a:	2100      	movs	r1, #0
    663c:	6781      	str	r1, [r0, #120]	; 0x78
    663e:	f006 f8db 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6642:	6861      	ldr	r1, [r4, #4]
    6644:	6448      	str	r0, [r1, #68]	; 0x44
    6646:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    664a:	b110      	cbz	r0, 6652 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    664c:	2000      	movs	r0, #0
    664e:	f7ff f863 	bl	5718 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6656:	2000      	movs	r0, #0
    6658:	f000 bdfa 	b.w	7250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    665c:	bd10      	pop	{r4, pc}
    665e:	0000      	.short	0x0000
    6660:	20000108 	.word	0x20000108

00006664 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6664:	b510      	push	{r4, lr}
    6666:	4c09      	ldr	r4, [pc, #36]	; (668c <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6668:	2803      	cmp	r0, #3
    666a:	6864      	ldr	r4, [r4, #4]
    666c:	d109      	bne.n	6682 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    666e:	63e1      	str	r1, [r4, #60]	; 0x3c
    6670:	b13b      	cbz	r3, 6682 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    6672:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6676:	6819      	ldr	r1, [r3, #0]
    6678:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    667c:	8899      	ldrh	r1, [r3, #4]
    667e:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    6682:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6686:	2000      	movs	r0, #0
    6688:	bd10      	pop	{r4, pc}
    668a:	0000      	.short	0x0000
    668c:	20000108 	.word	0x20000108

00006690 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    6690:	4807      	ldr	r0, [pc, #28]	; (66b0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    6692:	b508      	push	{r3, lr}
    6694:	6840      	ldr	r0, [r0, #4]
    6696:	7801      	ldrb	r1, [r0, #0]
    6698:	f88d 1000 	strb.w	r1, [sp]
    669c:	9900      	ldr	r1, [sp, #0]
    669e:	9100      	str	r1, [sp, #0]
    66a0:	f89d 1000 	ldrb.w	r1, [sp]
    66a4:	b109      	cbz	r1, 66aa <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    66a6:	8880      	ldrh	r0, [r0, #4]
    66a8:	bd08      	pop	{r3, pc}
    66aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    66ae:	bd08      	pop	{r3, pc}
    66b0:	20000108 	.word	0x20000108

000066b4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66b6:	4604      	mov	r4, r0
    66b8:	f008 fa1f 	bl	eafa <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    66bc:	bb48      	cbnz	r0, 6712 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    66be:	4e17      	ldr	r6, [pc, #92]	; (671c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    66c0:	6870      	ldr	r0, [r6, #4]
    66c2:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    66c6:	f88d 1000 	strb.w	r1, [sp]
    66ca:	9900      	ldr	r1, [sp, #0]
    66cc:	9100      	str	r1, [sp, #0]
    66ce:	f89d 1000 	ldrb.w	r1, [sp]
    66d2:	2500      	movs	r5, #0
    66d4:	b139      	cbz	r1, 66e6 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    66d6:	7065      	strb	r5, [r4, #1]
    66d8:	2107      	movs	r1, #7
    66da:	7021      	strb	r1, [r4, #0]
    66dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    66de:	6061      	str	r1, [r4, #4]
    66e0:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    66e4:	e015      	b.n	6712 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    66e6:	4620      	mov	r0, r4
    66e8:	f000 f9d0 	bl	6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    66ec:	b988      	cbnz	r0, 6712 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    66ee:	6870      	ldr	r0, [r6, #4]
    66f0:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    66f4:	f88d 1000 	strb.w	r1, [sp]
    66f8:	9900      	ldr	r1, [sp, #0]
    66fa:	9100      	str	r1, [sp, #0]
    66fc:	f89d 1000 	ldrb.w	r1, [sp]
    6700:	b149      	cbz	r1, 6716 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    6702:	7065      	strb	r5, [r4, #1]
    6704:	2118      	movs	r1, #24
    6706:	7021      	strb	r1, [r4, #0]
    6708:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    670c:	6061      	str	r1, [r4, #4]
    670e:	300a      	adds	r0, #10
    6710:	7785      	strb	r5, [r0, #30]
    6712:	2001      	movs	r0, #1
    6714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6716:	2000      	movs	r0, #0
    6718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    671a:	0000      	.short	0x0000
    671c:	20000108 	.word	0x20000108

00006720 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    6720:	4902      	ldr	r1, [pc, #8]	; (672c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    6722:	6849      	ldr	r1, [r1, #4]
    6724:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6728:	2000      	movs	r0, #0
    672a:	4770      	bx	lr
    672c:	20000108 	.word	0x20000108

00006730 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6730:	4809      	ldr	r0, [pc, #36]	; (6758 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    6732:	6841      	ldr	r1, [r0, #4]
    6734:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6736:	b168      	cbz	r0, 6754 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6738:	f101 0059 	add.w	r0, r1, #89	; 0x59
    673c:	2201      	movs	r2, #1
    673e:	7002      	strb	r2, [r0, #0]
    6740:	2300      	movs	r3, #0
    6742:	654b      	str	r3, [r1, #84]	; 0x54
    6744:	7003      	strb	r3, [r0, #0]
    6746:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    674a:	4082      	lsls	r2, r0
    674c:	4803      	ldr	r0, [pc, #12]	; (675c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    674e:	6002      	str	r2, [r0, #0]
    6750:	2000      	movs	r0, #0
    6752:	4770      	bx	lr
    6754:	200c      	movs	r0, #12
    6756:	4770      	bx	lr
    6758:	20000108 	.word	0x20000108
    675c:	4001f508 	.word	0x4001f508

00006760 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6760:	4909      	ldr	r1, [pc, #36]	; (6788 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    6762:	b510      	push	{r4, lr}
    6764:	6088      	str	r0, [r1, #8]
    6766:	68c8      	ldr	r0, [r1, #12]
    6768:	b150      	cbz	r0, 6780 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    676a:	f000 ff73 	bl	7654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x654>
    676e:	f000 f885 	bl	687c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    6772:	2800      	cmp	r0, #0
    6774:	d007      	beq.n	6786 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6776:	f640 01f9 	movw	r1, #2297	; 0x8f9
    677a:	2032      	movs	r0, #50	; 0x32
    677c:	f7fd fb92 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6780:	f640 01f5 	movw	r1, #2293	; 0x8f5
    6784:	e7f9      	b.n	677a <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    6786:	bd10      	pop	{r4, pc}
    6788:	20000108 	.word	0x20000108

0000678c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6790:	4c0f      	ldr	r4, [pc, #60]	; (67d0 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    6792:	4605      	mov	r5, r0
    6794:	4616      	mov	r6, r2
    6796:	6860      	ldr	r0, [r4, #4]
    6798:	460f      	mov	r7, r1
    679a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    679e:	f008 f964 	bl	ea6a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    67a2:	b158      	cbz	r0, 67bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67a4:	b955      	cbnz	r5, 67bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67a6:	4638      	mov	r0, r7
    67a8:	f008 f958 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67ac:	4631      	mov	r1, r6
    67ae:	f007 fb5f 	bl	de70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    67b2:	2808      	cmp	r0, #8
    67b4:	d002      	beq.n	67bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67b6:	2001      	movs	r0, #1
    67b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67bc:	6860      	ldr	r0, [r4, #4]
    67be:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67c2:	f008 f94b 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67ca:	f7fe b9e9 	b.w	4ba0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    67ce:	0000      	.short	0x0000
    67d0:	20000108 	.word	0x20000108

000067d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    67d4:	b570      	push	{r4, r5, r6, lr}
    67d6:	4c13      	ldr	r4, [pc, #76]	; (6824 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    67d8:	4615      	mov	r5, r2
    67da:	460e      	mov	r6, r1
    67dc:	2800      	cmp	r0, #0
    67de:	d016      	beq.n	680e <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    67e0:	f04f 0200 	mov.w	r2, #0
    67e4:	6861      	ldr	r1, [r4, #4]
    67e6:	f801 2f39 	strb.w	r2, [r1, #57]!
    67ea:	7248      	strb	r0, [r1, #9]
    67ec:	f04f 0008 	mov.w	r0, #8
    67f0:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    67f4:	d114      	bne.n	6820 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    67f6:	4630      	mov	r0, r6
    67f8:	f008 f930 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67fc:	4629      	mov	r1, r5
    67fe:	f007 fb37 	bl	de70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6802:	6861      	ldr	r1, [r4, #4]
    6804:	2808      	cmp	r0, #8
    6806:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    680a:	d003      	beq.n	6814 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    680c:	e008      	b.n	6820 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    680e:	f04f 0201 	mov.w	r2, #1
    6812:	e7e7      	b.n	67e4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6814:	4630      	mov	r0, r6
    6816:	f008 f928 	bl	ea6a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    681a:	b108      	cbz	r0, 6820 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    681c:	2012      	movs	r0, #18
    681e:	bd70      	pop	{r4, r5, r6, pc}
    6820:	2000      	movs	r0, #0
    6822:	bd70      	pop	{r4, r5, r6, pc}
    6824:	20000108 	.word	0x20000108

00006828 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6828:	4902      	ldr	r1, [pc, #8]	; (6834 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    682a:	4801      	ldr	r0, [pc, #4]	; (6830 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    682c:	60c8      	str	r0, [r1, #12]
    682e:	4770      	bx	lr
    6830:	0000789c 	.word	0x0000789c
    6834:	20000108 	.word	0x20000108

00006838 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6838:	4902      	ldr	r1, [pc, #8]	; (6844 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    683a:	6849      	ldr	r1, [r1, #4]
    683c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6840:	4770      	bx	lr
    6842:	0000      	.short	0x0000
    6844:	20000108 	.word	0x20000108

00006848 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6848:	b570      	push	{r4, r5, r6, lr}
    684a:	4605      	mov	r5, r0
    684c:	f7fd ff56 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6850:	4604      	mov	r4, r0
    6852:	f7fd ff59 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6856:	4621      	mov	r1, r4
    6858:	f008 f94d 	bl	eaf6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    685c:	0001      	movs	r1, r0
    685e:	d006      	beq.n	686e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    6860:	4805      	ldr	r0, [pc, #20]	; (6878 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    6862:	68c0      	ldr	r0, [r0, #12]
    6864:	6802      	ldr	r2, [r0, #0]
    6866:	4628      	mov	r0, r5
    6868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    686c:	4710      	bx	r2
    686e:	f640 11f2 	movw	r1, #2546	; 0x9f2
    6872:	2032      	movs	r0, #50	; 0x32
    6874:	f7fd fb16 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6878:	20000108 	.word	0x20000108

0000687c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    687c:	b570      	push	{r4, r5, r6, lr}
    687e:	4d19      	ldr	r5, [pc, #100]	; (68e4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    6880:	6868      	ldr	r0, [r5, #4]
    6882:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    6886:	2901      	cmp	r1, #1
    6888:	d004      	beq.n	6894 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    688a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    688e:	b108      	cbz	r0, 6894 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    6890:	200c      	movs	r0, #12
    6892:	bd70      	pop	{r4, r5, r6, pc}
    6894:	f7fd ff5c 	bl	4750 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    6898:	f008 f993 	bl	ebc2 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    689c:	6868      	ldr	r0, [r5, #4]
    689e:	2400      	movs	r4, #0
    68a0:	7004      	strb	r4, [r0, #0]
    68a2:	f100 0122 	add.w	r1, r0, #34	; 0x22
    68a6:	700c      	strb	r4, [r1, #0]
    68a8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    68ac:	f000 f8b4 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    68b0:	6868      	ldr	r0, [r5, #4]
    68b2:	2201      	movs	r2, #1
    68b4:	2107      	movs	r1, #7
    68b6:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    68ba:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    68be:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    68c2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    68c6:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    68ca:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    68ce:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    68d2:	f100 0159 	add.w	r1, r0, #89	; 0x59
    68d6:	700a      	strb	r2, [r1, #0]
    68d8:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    68dc:	6544      	str	r4, [r0, #84]	; 0x54
    68de:	700c      	strb	r4, [r1, #0]
    68e0:	2000      	movs	r0, #0
    68e2:	bd70      	pop	{r4, r5, r6, pc}
    68e4:	20000108 	.word	0x20000108

000068e8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    68e8:	4805      	ldr	r0, [pc, #20]	; (6900 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    68ea:	b510      	push	{r4, lr}
    68ec:	6840      	ldr	r0, [r0, #4]
    68ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    68f2:	f008 f8b3 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    68f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68fa:	f7fe b951 	b.w	4ba0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    68fe:	0000      	.short	0x0000
    6900:	20000108 	.word	0x20000108

00006904 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6904:	b140      	cbz	r0, 6918 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6906:	2802      	cmp	r0, #2
    6908:	d006      	beq.n	6918 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    690a:	2200      	movs	r2, #0
    690c:	4903      	ldr	r1, [pc, #12]	; (691c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    690e:	6849      	ldr	r1, [r1, #4]
    6910:	f801 2f39 	strb.w	r2, [r1, #57]!
    6914:	7208      	strb	r0, [r1, #8]
    6916:	4770      	bx	lr
    6918:	2201      	movs	r2, #1
    691a:	e7f7      	b.n	690c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    691c:	20000108 	.word	0x20000108

00006920 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    6920:	4902      	ldr	r1, [pc, #8]	; (692c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    6922:	6849      	ldr	r1, [r1, #4]
    6924:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6928:	4770      	bx	lr
    692a:	0000      	.short	0x0000
    692c:	20000108 	.word	0x20000108

00006930 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    6930:	b510      	push	{r4, lr}
    6932:	4604      	mov	r4, r0
    6934:	7800      	ldrb	r0, [r0, #0]
    6936:	07c0      	lsls	r0, r0, #31
    6938:	d007      	beq.n	694a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    693a:	2300      	movs	r3, #0
    693c:	7860      	ldrb	r0, [r4, #1]
    693e:	461a      	mov	r2, r3
    6940:	4619      	mov	r1, r3
    6942:	f7ff fe8f 	bl	6664 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    6946:	2800      	cmp	r0, #0
    6948:	d10c      	bne.n	6964 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    694a:	4b07      	ldr	r3, [pc, #28]	; (6968 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    694c:	78a0      	ldrb	r0, [r4, #2]
    694e:	6859      	ldr	r1, [r3, #4]
    6950:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6954:	78e0      	ldrb	r0, [r4, #3]
    6956:	f7ff ffd5 	bl	6904 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    695a:	6859      	ldr	r1, [r3, #4]
    695c:	7920      	ldrb	r0, [r4, #4]
    695e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6962:	2000      	movs	r0, #0
    6964:	bd10      	pop	{r4, pc}
    6966:	0000      	.short	0x0000
    6968:	20000108 	.word	0x20000108

0000696c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    696c:	4801      	ldr	r0, [pc, #4]	; (6974 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    696e:	68c0      	ldr	r0, [r0, #12]
    6970:	6840      	ldr	r0, [r0, #4]
    6972:	4700      	bx	r0
    6974:	20000108 	.word	0x20000108

00006978 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6978:	b510      	push	{r4, lr}
    697a:	2000      	movs	r0, #0
    697c:	f000 fc8e 	bl	729c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>
    6980:	f000 f84a 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    6984:	f000 fe66 	bl	7654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x654>
    6988:	4803      	ldr	r0, [pc, #12]	; (6998 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    698a:	6840      	ldr	r0, [r0, #4]
    698c:	2100      	movs	r1, #0
    698e:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    6992:	4608      	mov	r0, r1
    6994:	bd10      	pop	{r4, pc}
    6996:	0000      	.short	0x0000
    6998:	20000108 	.word	0x20000108

0000699c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    699c:	b510      	push	{r4, lr}
    699e:	f000 f941 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    69a2:	4909      	ldr	r1, [pc, #36]	; (69c8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    69a4:	2201      	movs	r2, #1
    69a6:	b130      	cbz	r0, 69b6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    69a8:	6848      	ldr	r0, [r1, #4]
    69aa:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    69ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    69b0:	881b      	ldrh	r3, [r3, #0]
    69b2:	8583      	strh	r3, [r0, #44]	; 0x2c
    69b4:	e004      	b.n	69c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    69b6:	684b      	ldr	r3, [r1, #4]
    69b8:	2000      	movs	r0, #0
    69ba:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    69be:	8598      	strh	r0, [r3, #44]	; 0x2c
    69c0:	6848      	ldr	r0, [r1, #4]
    69c2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    69c6:	bd10      	pop	{r4, pc}
    69c8:	20000108 	.word	0x20000108

000069cc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    69cc:	4802      	ldr	r0, [pc, #8]	; (69d8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    69ce:	6840      	ldr	r0, [r0, #4]
    69d0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    69d4:	4770      	bx	lr
    69d6:	0000      	.short	0x0000
    69d8:	20000108 	.word	0x20000108

000069dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    69dc:	b510      	push	{r4, lr}
    69de:	f000 f921 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    69e2:	490c      	ldr	r1, [pc, #48]	; (6a14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    69e4:	b128      	cbz	r0, 69f2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    69e6:	6848      	ldr	r0, [r1, #4]
    69e8:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    69ec:	2801      	cmp	r0, #1
    69ee:	d00e      	beq.n	6a0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    69f0:	e00c      	b.n	6a0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    69f2:	6849      	ldr	r1, [r1, #4]
    69f4:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    69f8:	2801      	cmp	r0, #1
    69fa:	d001      	beq.n	6a00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    69fc:	2802      	cmp	r0, #2
    69fe:	d105      	bne.n	6a0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a00:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6a04:	2801      	cmp	r0, #1
    6a06:	d003      	beq.n	6a10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a08:	2803      	cmp	r0, #3
    6a0a:	d001      	beq.n	6a10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a0c:	2000      	movs	r0, #0
    6a0e:	bd10      	pop	{r4, pc}
    6a10:	2001      	movs	r0, #1
    6a12:	bd10      	pop	{r4, pc}
    6a14:	20000108 	.word	0x20000108
    6a18:	b510      	push	{r4, lr}
    6a1a:	4c07      	ldr	r4, [pc, #28]	; (6a38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    6a1c:	6860      	ldr	r0, [r4, #4]
    6a1e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6a22:	2800      	cmp	r0, #0
    6a24:	d007      	beq.n	6a36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6a26:	f004 fdd3 	bl	b5d0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a2a:	f004 fbb5 	bl	b198 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a2e:	6861      	ldr	r1, [r4, #4]
    6a30:	2000      	movs	r0, #0
    6a32:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6a36:	bd10      	pop	{r4, pc}
    6a38:	20000108 	.word	0x20000108
    6a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a40:	4d10      	ldr	r5, [pc, #64]	; (6a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    6a42:	4606      	mov	r6, r0
    6a44:	460f      	mov	r7, r1
    6a46:	6868      	ldr	r0, [r5, #4]
    6a48:	490f      	ldr	r1, [pc, #60]	; (6a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6a4a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    6a4e:	5c0c      	ldrb	r4, [r1, r0]
    6a50:	4620      	mov	r0, r4
    6a52:	f005 f931 	bl	bcb8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6a56:	6868      	ldr	r0, [r5, #4]
    6a58:	2101      	movs	r1, #1
    6a5a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    6a5e:	2025      	movs	r0, #37	; 0x25
    6a60:	f009 fa97 	bl	ff92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6a64:	4638      	mov	r0, r7
    6a66:	f005 f831 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6a6a:	f04f 0101 	mov.w	r1, #1
    6a6e:	4608      	mov	r0, r1
    6a70:	b126      	cbz	r6, 6a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    6a72:	f004 fe63 	bl	b73c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6a76:	b918      	cbnz	r0, 6a80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a7c:	f004 fe12 	bl	b6a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a80:	2001      	movs	r0, #1
    6a82:	e7f9      	b.n	6a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6a84:	20000108 	.word	0x20000108
    6a88:	000100e2 	.word	0x000100e2
    6a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a8e:	4e20      	ldr	r6, [pc, #128]	; (6b10 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6a90:	4604      	mov	r4, r0
    6a92:	6870      	ldr	r0, [r6, #4]
    6a94:	7801      	ldrb	r1, [r0, #0]
    6a96:	f88d 1000 	strb.w	r1, [sp]
    6a9a:	9900      	ldr	r1, [sp, #0]
    6a9c:	9100      	str	r1, [sp, #0]
    6a9e:	f89d 1000 	ldrb.w	r1, [sp]
    6aa2:	b389      	cbz	r1, 6b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6aa4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6aa6:	6882      	ldr	r2, [r0, #8]
    6aa8:	f841 2f03 	str.w	r2, [r1, #3]!
    6aac:	8982      	ldrh	r2, [r0, #12]
    6aae:	808a      	strh	r2, [r1, #4]
    6ab0:	79c0      	ldrb	r0, [r0, #7]
    6ab2:	f007 ffd3 	bl	ea5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6ab6:	6871      	ldr	r1, [r6, #4]
    6ab8:	2500      	movs	r5, #0
    6aba:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6abc:	1c89      	adds	r1, r1, #2
    6abe:	7090      	strb	r0, [r2, #2]
    6ac0:	7065      	strb	r5, [r4, #1]
    6ac2:	2014      	movs	r0, #20
    6ac4:	7020      	strb	r0, [r4, #0]
    6ac6:	2220      	movs	r2, #32
    6ac8:	1d20      	adds	r0, r4, #4
    6aca:	f006 f80a 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6ace:	4a11      	ldr	r2, [pc, #68]	; (6b14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6ad0:	7225      	strb	r5, [r4, #8]
    6ad2:	2301      	movs	r3, #1
    6ad4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6ad6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    6ada:	6871      	ldr	r1, [r6, #4]
    6adc:	700d      	strb	r5, [r1, #0]
    6ade:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6ae2:	7005      	strb	r5, [r0, #0]
    6ae4:	88e0      	ldrh	r0, [r4, #6]
    6ae6:	8490      	strh	r0, [r2, #36]	; 0x24
    6ae8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6aea:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    6aee:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    6af2:	4610      	mov	r0, r2
    6af4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6af8:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6afa:	8800      	ldrh	r0, [r0, #0]
    6afc:	f7fd fdd0 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b00:	f006 ff98 	bl	da34 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6b04:	2001      	movs	r0, #1
    6b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b08:	e7ff      	b.n	6b0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    6b0a:	2000      	movs	r0, #0
    6b0c:	e7fb      	b.n	6b06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    6b0e:	0000      	.short	0x0000
    6b10:	20000108 	.word	0x20000108
    6b14:	2000105c 	.word	0x2000105c
    6b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b1a:	2600      	movs	r6, #0
    6b1c:	460f      	mov	r7, r1
    6b1e:	4605      	mov	r5, r0
    6b20:	f88d 6000 	strb.w	r6, [sp]
    6b24:	466b      	mov	r3, sp
    6b26:	f000 f89d 	bl	6c64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    6b2a:	0001      	movs	r1, r0
    6b2c:	4810      	ldr	r0, [pc, #64]	; (6b70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    6b2e:	d003      	beq.n	6b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    6b30:	6840      	ldr	r0, [r0, #4]
    6b32:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    6b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b38:	6840      	ldr	r0, [r0, #4]
    6b3a:	f89d 1000 	ldrb.w	r1, [sp]
    6b3e:	2f07      	cmp	r7, #7
    6b40:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    6b44:	d301      	bcc.n	6b4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    6b46:	4634      	mov	r4, r6
    6b48:	e002      	b.n	6b50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6b4a:	0022      	movs	r2, r4
    6b4c:	d100      	bne.n	6b50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6b4e:	460c      	mov	r4, r1
    6b50:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6b54:	6869      	ldr	r1, [r5, #4]
    6b56:	2900      	cmp	r1, #0
    6b58:	d0ed      	beq.n	6b36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6b5a:	7c69      	ldrb	r1, [r5, #17]
    6b5c:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6b60:	6869      	ldr	r1, [r5, #4]
    6b62:	680a      	ldr	r2, [r1, #0]
    6b64:	f840 2f6e 	str.w	r2, [r0, #110]!
    6b68:	8889      	ldrh	r1, [r1, #4]
    6b6a:	8081      	strh	r1, [r0, #4]
    6b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b6e:	0000      	.short	0x0000
    6b70:	20000108 	.word	0x20000108
    6b74:	b510      	push	{r4, lr}
    6b76:	4915      	ldr	r1, [pc, #84]	; (6bcc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6b78:	6842      	ldr	r2, [r0, #4]
    6b7a:	6849      	ldr	r1, [r1, #4]
    6b7c:	7813      	ldrb	r3, [r2, #0]
    6b7e:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6b82:	42a3      	cmp	r3, r4
    6b84:	d11f      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6b86:	7853      	ldrb	r3, [r2, #1]
    6b88:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6b8c:	42a3      	cmp	r3, r4
    6b8e:	d11a      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6b90:	7893      	ldrb	r3, [r2, #2]
    6b92:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6b96:	42a3      	cmp	r3, r4
    6b98:	d115      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6b9a:	78d3      	ldrb	r3, [r2, #3]
    6b9c:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6ba0:	42a3      	cmp	r3, r4
    6ba2:	d110      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6ba4:	7913      	ldrb	r3, [r2, #4]
    6ba6:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6baa:	42a3      	cmp	r3, r4
    6bac:	d10b      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bae:	7952      	ldrb	r2, [r2, #5]
    6bb0:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6bb4:	429a      	cmp	r2, r3
    6bb6:	d106      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bb8:	7c40      	ldrb	r0, [r0, #17]
    6bba:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6bbe:	4288      	cmp	r0, r1
    6bc0:	d101      	bne.n	6bc6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bc2:	2001      	movs	r0, #1
    6bc4:	bd10      	pop	{r4, pc}
    6bc6:	2000      	movs	r0, #0
    6bc8:	bd10      	pop	{r4, pc}
    6bca:	0000      	.short	0x0000
    6bcc:	20000108 	.word	0x20000108
    6bd0:	b530      	push	{r4, r5, lr}
    6bd2:	7801      	ldrb	r1, [r0, #0]
    6bd4:	b08b      	sub	sp, #44	; 0x2c
    6bd6:	f001 040f 	and.w	r4, r1, #15
    6bda:	4622      	mov	r2, r4
    6bdc:	a901      	add	r1, sp, #4
    6bde:	f000 fee9 	bl	79b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6be2:	a801      	add	r0, sp, #4
    6be4:	f7ff ffc6 	bl	6b74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6be8:	4605      	mov	r5, r0
    6bea:	f004 fd0b 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6bee:	f000 fb6f 	bl	72d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    6bf2:	2c04      	cmp	r4, #4
    6bf4:	d111      	bne.n	6c1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6bf6:	b185      	cbz	r5, 6c1a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6bf8:	a80a      	add	r0, sp, #40	; 0x28
    6bfa:	f000 fb75 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    6bfe:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6c02:	9000      	str	r0, [sp, #0]
    6c04:	4806      	ldr	r0, [pc, #24]	; (6c20 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6c06:	6840      	ldr	r0, [r0, #4]
    6c08:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6c0c:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6c10:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6c14:	a801      	add	r0, sp, #4
    6c16:	f007 ffd6 	bl	ebc6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6c1a:	b00b      	add	sp, #44	; 0x2c
    6c1c:	2005      	movs	r0, #5
    6c1e:	bd30      	pop	{r4, r5, pc}
    6c20:	20000108 	.word	0x20000108
    6c24:	4804      	ldr	r0, [pc, #16]	; (6c38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6c26:	6840      	ldr	r0, [r0, #4]
    6c28:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6c2c:	2803      	cmp	r0, #3
    6c2e:	d001      	beq.n	6c34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6c30:	2000      	movs	r0, #0
    6c32:	4770      	bx	lr
    6c34:	2001      	movs	r0, #1
    6c36:	4770      	bx	lr
    6c38:	20000108 	.word	0x20000108
    6c3c:	4908      	ldr	r1, [pc, #32]	; (6c60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6c3e:	b510      	push	{r4, lr}
    6c40:	6849      	ldr	r1, [r1, #4]
    6c42:	7c83      	ldrb	r3, [r0, #18]
    6c44:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6c48:	429a      	cmp	r2, r3
    6c4a:	d105      	bne.n	6c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6c4c:	6880      	ldr	r0, [r0, #8]
    6c4e:	2206      	movs	r2, #6
    6c50:	3132      	adds	r1, #50	; 0x32
    6c52:	f005 ff34 	bl	cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6c56:	b108      	cbz	r0, 6c5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6c58:	2000      	movs	r0, #0
    6c5a:	bd10      	pop	{r4, pc}
    6c5c:	2001      	movs	r0, #1
    6c5e:	bd10      	pop	{r4, pc}
    6c60:	20000108 	.word	0x20000108
    6c64:	b570      	push	{r4, r5, r6, lr}
    6c66:	6841      	ldr	r1, [r0, #4]
    6c68:	461e      	mov	r6, r3
    6c6a:	4604      	mov	r4, r0
    6c6c:	b1c1      	cbz	r1, 6ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6c6e:	7c60      	ldrb	r0, [r4, #17]
    6c70:	f007 fee9 	bl	ea46 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6c74:	4d10      	ldr	r5, [pc, #64]	; (6cb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6c76:	6869      	ldr	r1, [r5, #4]
    6c78:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6c7c:	b141      	cbz	r1, 6c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6c7e:	b138      	cbz	r0, 6c90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6c80:	f007 f8ec 	bl	de5c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6c84:	6869      	ldr	r1, [r5, #4]
    6c86:	f801 0f64 	strb.w	r0, [r1, #100]!
    6c8a:	7048      	strb	r0, [r1, #1]
    6c8c:	2001      	movs	r0, #1
    6c8e:	71c8      	strb	r0, [r1, #7]
    6c90:	686b      	ldr	r3, [r5, #4]
    6c92:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6c96:	28ff      	cmp	r0, #255	; 0xff
    6c98:	d004      	beq.n	6ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6c9a:	f7fe fdeb 	bl	5874 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6c9e:	7030      	strb	r0, [r6, #0]
    6ca0:	2000      	movs	r0, #0
    6ca2:	bd70      	pop	{r4, r5, r6, pc}
    6ca4:	7c60      	ldrb	r0, [r4, #17]
    6ca6:	4632      	mov	r2, r6
    6ca8:	3364      	adds	r3, #100	; 0x64
    6caa:	6861      	ldr	r1, [r4, #4]
    6cac:	f7fe fe5e 	bl	596c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6cb0:	f080 0001 	eor.w	r0, r0, #1
    6cb4:	bd70      	pop	{r4, r5, r6, pc}
    6cb6:	0000      	.short	0x0000
    6cb8:	20000108 	.word	0x20000108
    6cbc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6cbe:	4c3d      	ldr	r4, [pc, #244]	; (6db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6cc0:	466f      	mov	r7, sp
    6cc2:	6860      	ldr	r0, [r4, #4]
    6cc4:	7801      	ldrb	r1, [r0, #0]
    6cc6:	f88d 1008 	strb.w	r1, [sp, #8]
    6cca:	9902      	ldr	r1, [sp, #8]
    6ccc:	9102      	str	r1, [sp, #8]
    6cce:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6cd2:	b111      	cbz	r1, 6cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6cd4:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6cd8:	e04f      	b.n	6d7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6cda:	2500      	movs	r5, #0
    6cdc:	7085      	strb	r5, [r0, #2]
    6cde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ce0:	880a      	ldrh	r2, [r1, #0]
    6ce2:	8082      	strh	r2, [r0, #4]
    6ce4:	68c8      	ldr	r0, [r1, #12]
    6ce6:	f007 f934 	bl	df52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6cea:	6861      	ldr	r1, [r4, #4]
    6cec:	8348      	strh	r0, [r1, #26]
    6cee:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6cf0:	8a82      	ldrh	r2, [r0, #20]
    6cf2:	838a      	strh	r2, [r1, #28]
    6cf4:	8ac0      	ldrh	r0, [r0, #22]
    6cf6:	83c8      	strh	r0, [r1, #30]
    6cf8:	f881 5020 	strb.w	r5, [r1, #32]
    6cfc:	4669      	mov	r1, sp
    6cfe:	68a0      	ldr	r0, [r4, #8]
    6d00:	f007 fc2f 	bl	e562 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6d04:	68a0      	ldr	r0, [r4, #8]
    6d06:	7800      	ldrb	r0, [r0, #0]
    6d08:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6d0c:	6860      	ldr	r0, [r4, #4]
    6d0e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d12:	b120      	cbz	r0, 6d1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6d14:	4639      	mov	r1, r7
    6d16:	4630      	mov	r0, r6
    6d18:	f007 fe95 	bl	ea46 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6d1c:	b940      	cbnz	r0, 6d30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6d1e:	6860      	ldr	r0, [r4, #4]
    6d20:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6d24:	b160      	cbz	r0, 6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d26:	4639      	mov	r1, r7
    6d28:	4630      	mov	r0, r6
    6d2a:	f007 fe83 	bl	ea34 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6d2e:	b138      	cbz	r0, 6d40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d30:	6860      	ldr	r0, [r4, #4]
    6d32:	9900      	ldr	r1, [sp, #0]
    6d34:	f8c0 100e 	str.w	r1, [r0, #14]
    6d38:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d3c:	8241      	strh	r1, [r0, #18]
    6d3e:	e003      	b.n	6d48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6d40:	6860      	ldr	r0, [r4, #4]
    6d42:	f8c0 500e 	str.w	r5, [r0, #14]
    6d46:	8245      	strh	r5, [r0, #18]
    6d48:	6861      	ldr	r1, [r4, #4]
    6d4a:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6d4e:	28ff      	cmp	r0, #255	; 0xff
    6d50:	d016      	beq.n	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6d52:	f101 0208 	add.w	r2, r1, #8
    6d56:	1dc9      	adds	r1, r1, #7
    6d58:	f7fe fd72 	bl	5840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6d5c:	b158      	cbz	r0, 6d76 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6d5e:	6860      	ldr	r0, [r4, #4]
    6d60:	79c1      	ldrb	r1, [r0, #7]
    6d62:	f041 0102 	orr.w	r1, r1, #2
    6d66:	71c1      	strb	r1, [r0, #7]
    6d68:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6d6c:	6141      	str	r1, [r0, #20]
    6d6e:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6d72:	8301      	strh	r1, [r0, #24]
    6d74:	e00f      	b.n	6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6d76:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6d7a:	2032      	movs	r0, #50	; 0x32
    6d7c:	f7fd f892 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d80:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6d84:	71c8      	strb	r0, [r1, #7]
    6d86:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6d8a:	6088      	str	r0, [r1, #8]
    6d8c:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6d90:	8188      	strh	r0, [r1, #12]
    6d92:	614d      	str	r5, [r1, #20]
    6d94:	830d      	strh	r5, [r1, #24]
    6d96:	6860      	ldr	r0, [r4, #4]
    6d98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6d9a:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6d9e:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6da2:	2101      	movs	r1, #1
    6da4:	7001      	strb	r1, [r0, #0]
    6da6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6da8:	8800      	ldrh	r0, [r0, #0]
    6daa:	f7fd fc79 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6dae:	f006 fe47 	bl	da40 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6db4:	20000108 	.word	0x20000108
    6db8:	b570      	push	{r4, r5, r6, lr}
    6dba:	4d39      	ldr	r5, [pc, #228]	; (6ea0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6dbc:	4601      	mov	r1, r0
    6dbe:	2200      	movs	r2, #0
    6dc0:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6dc4:	365c      	adds	r6, #92	; 0x5c
    6dc6:	8002      	strh	r2, [r0, #0]
    6dc8:	2903      	cmp	r1, #3
    6dca:	d002      	beq.n	6dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6dcc:	2905      	cmp	r1, #5
    6dce:	d004      	beq.n	6dda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6dd0:	e056      	b.n	6e80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6dd2:	2103      	movs	r1, #3
    6dd4:	f007 fbdc 	bl	e590 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6dd8:	e052      	b.n	6e80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6dda:	2105      	movs	r1, #5
    6ddc:	f007 fbd8 	bl	e590 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6de0:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6de4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6de6:	6909      	ldr	r1, [r1, #16]
    6de8:	f844 1f0f 	str.w	r1, [r4, #15]!
    6dec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6dee:	8b0a      	ldrh	r2, [r1, #24]
    6df0:	80a2      	strh	r2, [r4, #4]
    6df2:	7e89      	ldrb	r1, [r1, #26]
    6df4:	71a1      	strb	r1, [r4, #6]
    6df6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6df8:	68c1      	ldr	r1, [r0, #12]
    6dfa:	8b80      	ldrh	r0, [r0, #28]
    6dfc:	f007 fa76 	bl	e2ec <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6e00:	71e0      	strb	r0, [r4, #7]
    6e02:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e08:	68c1      	ldr	r1, [r0, #12]
    6e0a:	6a00      	ldr	r0, [r0, #32]
    6e0c:	f007 fa63 	bl	e2d6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6e10:	75e0      	strb	r0, [r4, #23]
    6e12:	0a00      	lsrs	r0, r0, #8
    6e14:	7620      	strb	r0, [r4, #24]
    6e16:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e1a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e1c:	68c0      	ldr	r0, [r0, #12]
    6e1e:	f007 f898 	bl	df52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6e22:	7660      	strb	r0, [r4, #25]
    6e24:	0a00      	lsrs	r0, r0, #8
    6e26:	76a0      	strb	r0, [r4, #26]
    6e28:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e2c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e2e:	8a89      	ldrh	r1, [r1, #20]
    6e30:	76e1      	strb	r1, [r4, #27]
    6e32:	0a09      	lsrs	r1, r1, #8
    6e34:	7721      	strb	r1, [r4, #28]
    6e36:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e38:	8ac9      	ldrh	r1, [r1, #22]
    6e3a:	7761      	strb	r1, [r4, #29]
    6e3c:	0a09      	lsrs	r1, r1, #8
    6e3e:	77a1      	strb	r1, [r4, #30]
    6e40:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e42:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6e46:	f8c4 201f 	str.w	r2, [r4, #31]
    6e4a:	7909      	ldrb	r1, [r1, #4]
    6e4c:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6e50:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e52:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6e56:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6e5a:	f001 011f 	and.w	r1, r1, #31
    6e5e:	f020 001f 	bic.w	r0, r0, #31
    6e62:	4308      	orrs	r0, r1
    6e64:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6e68:	f004 f978 	bl	b15c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6e6c:	2807      	cmp	r0, #7
    6e6e:	d900      	bls.n	6e72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6e70:	2007      	movs	r0, #7
    6e72:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6e76:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6e7a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6e7e:	7021      	strb	r1, [r4, #0]
    6e80:	f106 0112 	add.w	r1, r6, #18
    6e84:	68a8      	ldr	r0, [r5, #8]
    6e86:	f007 fb9e 	bl	e5c6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6e8a:	7e71      	ldrb	r1, [r6, #25]
    6e8c:	68a8      	ldr	r0, [r5, #8]
    6e8e:	f007 fba0 	bl	e5d2 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6e92:	f000 fba7 	bl	75e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e4>
    6e96:	68a8      	ldr	r0, [r5, #8]
    6e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e9c:	f004 be16 	b.w	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ea0:	20000108 	.word	0x20000108
    6ea4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6ea8:	4f65      	ldr	r7, [pc, #404]	; (7040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    6eaa:	4604      	mov	r4, r0
    6eac:	6878      	ldr	r0, [r7, #4]
    6eae:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6eb2:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6eb6:	b180      	cbz	r0, 6eda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6eb8:	2600      	movs	r6, #0
    6eba:	2500      	movs	r5, #0
    6ebc:	7ca0      	ldrb	r0, [r4, #18]
    6ebe:	68a1      	ldr	r1, [r4, #8]
    6ec0:	f007 fdc1 	bl	ea46 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6ec4:	4682      	mov	sl, r0
    6ec6:	f7ff fead 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6eca:	b140      	cbz	r0, 6ede <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6ecc:	6878      	ldr	r0, [r7, #4]
    6ece:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6ed2:	b121      	cbz	r1, 6ede <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6ed4:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6ed8:	e004      	b.n	6ee4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6eda:	2601      	movs	r6, #1
    6edc:	e7ed      	b.n	6eba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6ede:	6878      	ldr	r0, [r7, #4]
    6ee0:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6ee4:	4683      	mov	fp, r0
    6ee6:	f7fe fbfd 	bl	56e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6eea:	ea5f 0900 	movs.w	r9, r0
    6eee:	d00c      	beq.n	6f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6ef0:	4658      	mov	r0, fp
    6ef2:	f7fe fbeb 	bl	56cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6ef6:	b100      	cbz	r0, 6efa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6ef8:	2601      	movs	r6, #1
    6efa:	f1ba 0f00 	cmp.w	sl, #0
    6efe:	d004      	beq.n	6f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f00:	4648      	mov	r0, r9
    6f02:	68a1      	ldr	r1, [r4, #8]
    6f04:	f006 ff5d 	bl	ddc2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6f08:	4605      	mov	r5, r0
    6f0a:	6878      	ldr	r0, [r7, #4]
    6f0c:	46b9      	mov	r9, r7
    6f0e:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6f12:	b10d      	cbz	r5, 6f18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6f14:	f047 0702 	orr.w	r7, r7, #2
    6f18:	f7ff fe84 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f1c:	b3a0      	cbz	r0, 6f88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6f1e:	6860      	ldr	r0, [r4, #4]
    6f20:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6f24:	7802      	ldrb	r2, [r0, #0]
    6f26:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6f2a:	429a      	cmp	r2, r3
    6f2c:	d11f      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f2e:	7842      	ldrb	r2, [r0, #1]
    6f30:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6f34:	429a      	cmp	r2, r3
    6f36:	d11a      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f38:	7882      	ldrb	r2, [r0, #2]
    6f3a:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6f3e:	429a      	cmp	r2, r3
    6f40:	d115      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f42:	78c2      	ldrb	r2, [r0, #3]
    6f44:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6f48:	429a      	cmp	r2, r3
    6f4a:	d110      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f4c:	7902      	ldrb	r2, [r0, #4]
    6f4e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6f52:	429a      	cmp	r2, r3
    6f54:	d10b      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f56:	7940      	ldrb	r0, [r0, #5]
    6f58:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6f5c:	4290      	cmp	r0, r2
    6f5e:	d106      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f60:	7c60      	ldrb	r0, [r4, #17]
    6f62:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6f66:	4288      	cmp	r0, r1
    6f68:	d101      	bne.n	6f6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f6a:	2001      	movs	r0, #1
    6f6c:	e000      	b.n	6f70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6f6e:	2000      	movs	r0, #0
    6f70:	4f34      	ldr	r7, [pc, #208]	; (7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    6f72:	4682      	mov	sl, r0
    6f74:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6f78:	2808      	cmp	r0, #8
    6f7a:	d006      	beq.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6f7c:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6f80:	4288      	cmp	r0, r1
    6f82:	d102      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6f84:	2001      	movs	r0, #1
    6f86:	e001      	b.n	6f8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    6f88:	e021      	b.n	6fce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    6f8a:	2000      	movs	r0, #0
    6f8c:	4681      	mov	r9, r0
    6f8e:	b925      	cbnz	r5, 6f9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    6f90:	b12e      	cbz	r6, 6f9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6f92:	4620      	mov	r0, r4
    6f94:	f7ff fe52 	bl	6c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6f98:	b108      	cbz	r0, 6f9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6f9a:	2001      	movs	r0, #1
    6f9c:	e000      	b.n	6fa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    6f9e:	2000      	movs	r0, #0
    6fa0:	f1b8 0f00 	cmp.w	r8, #0
    6fa4:	d009      	beq.n	6fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fa6:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6faa:	2901      	cmp	r1, #1
    6fac:	d003      	beq.n	6fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    6fae:	b921      	cbnz	r1, 6fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fb0:	ea5a 0109 	orrs.w	r1, sl, r9
    6fb4:	d001      	beq.n	6fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fb6:	2101      	movs	r1, #1
    6fb8:	e000      	b.n	6fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    6fba:	2100      	movs	r1, #0
    6fbc:	4208      	tst	r0, r1
    6fbe:	d003      	beq.n	6fc8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    6fc0:	200c      	movs	r0, #12
    6fc2:	b004      	add	sp, #16
    6fc4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6fc8:	f004 fb1c 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fcc:	e036      	b.n	703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    6fce:	f004 fb19 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fd2:	f1b8 0f00 	cmp.w	r8, #0
    6fd6:	d031      	beq.n	703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    6fd8:	4620      	mov	r0, r4
    6fda:	f7ff fe2f 	bl	6c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6fde:	b900      	cbnz	r0, 6fe2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    6fe0:	b175      	cbz	r5, 7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    6fe2:	a803      	add	r0, sp, #12
    6fe4:	f000 f980 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    6fe8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6fec:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6ff0:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ff4:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ff8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ffc:	463b      	mov	r3, r7
    6ffe:	e018      	b.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7000:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7004:	464d      	mov	r5, r9
    7006:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    700a:	2803      	cmp	r0, #3
    700c:	d001      	beq.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    700e:	2802      	cmp	r0, #2
    7010:	d114      	bne.n	703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7012:	f1ba 0f00 	cmp.w	sl, #0
    7016:	d011      	beq.n	703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7018:	a803      	add	r0, sp, #12
    701a:	f000 f965 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    701e:	686a      	ldr	r2, [r5, #4]
    7020:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7024:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7028:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    702c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7030:	23fe      	movs	r3, #254	; 0xfe
    7032:	2101      	movs	r1, #1
    7034:	4620      	mov	r0, r4
    7036:	3232      	adds	r2, #50	; 0x32
    7038:	f000 fc46 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    703c:	2005      	movs	r0, #5
    703e:	e7c0      	b.n	6fc2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    7040:	20000108 	.word	0x20000108
    7044:	2000105c 	.word	0x2000105c
    7048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    704a:	4c3f      	ldr	r4, [pc, #252]	; (7148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>)
    704c:	4605      	mov	r5, r0
    704e:	6860      	ldr	r0, [r4, #4]
    7050:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7054:	2900      	cmp	r1, #0
    7056:	d06c      	beq.n	7132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    7058:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    705c:	2802      	cmp	r0, #2
    705e:	d02c      	beq.n	70ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    7060:	2801      	cmp	r0, #1
    7062:	d043      	beq.n	70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    7064:	f7ff fdde 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7068:	2800      	cmp	r0, #0
    706a:	d067      	beq.n	713c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    706c:	686a      	ldr	r2, [r5, #4]
    706e:	6861      	ldr	r1, [r4, #4]
    7070:	7810      	ldrb	r0, [r2, #0]
    7072:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7076:	4298      	cmp	r0, r3
    7078:	d14c      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    707a:	7850      	ldrb	r0, [r2, #1]
    707c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7080:	4298      	cmp	r0, r3
    7082:	d147      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    7084:	7890      	ldrb	r0, [r2, #2]
    7086:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    708a:	4298      	cmp	r0, r3
    708c:	d142      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    708e:	78d0      	ldrb	r0, [r2, #3]
    7090:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7094:	4298      	cmp	r0, r3
    7096:	d13d      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    7098:	7910      	ldrb	r0, [r2, #4]
    709a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    709e:	4298      	cmp	r0, r3
    70a0:	d138      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    70a2:	7950      	ldrb	r0, [r2, #5]
    70a4:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    70a8:	4290      	cmp	r0, r2
    70aa:	d133      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    70ac:	7c68      	ldrb	r0, [r5, #17]
    70ae:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    70b2:	4290      	cmp	r0, r2
    70b4:	d12e      	bne.n	7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>
    70b6:	2001      	movs	r0, #1
    70b8:	e02d      	b.n	7116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    70ba:	a803      	add	r0, sp, #12
    70bc:	f000 f914 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    70c0:	6862      	ldr	r2, [r4, #4]
    70c2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70c6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70ca:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    70ce:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    70d2:	23ff      	movs	r3, #255	; 0xff
    70d4:	2100      	movs	r1, #0
    70d6:	4628      	mov	r0, r5
    70d8:	3232      	adds	r2, #50	; 0x32
    70da:	f000 fbf5 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    70de:	6861      	ldr	r1, [r4, #4]
    70e0:	2001      	movs	r0, #1
    70e2:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    70e6:	200b      	movs	r0, #11
    70e8:	b004      	add	sp, #16
    70ea:	bd70      	pop	{r4, r5, r6, pc}
    70ec:	a803      	add	r0, sp, #12
    70ee:	f000 f8fb 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    70f2:	6862      	ldr	r2, [r4, #4]
    70f4:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70f8:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70fc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7100:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7104:	23ff      	movs	r3, #255	; 0xff
    7106:	2100      	movs	r1, #0
    7108:	4628      	mov	r0, r5
    710a:	3232      	adds	r2, #50	; 0x32
    710c:	f000 fbdc 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7110:	2005      	movs	r0, #5
    7112:	e7e9      	b.n	70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    7114:	2000      	movs	r0, #0
    7116:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    711a:	2901      	cmp	r1, #1
    711c:	d00c      	beq.n	7138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    711e:	b958      	cbnz	r0, 7138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    7120:	490a      	ldr	r1, [pc, #40]	; (714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>)
    7122:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7126:	2808      	cmp	r0, #8
    7128:	d003      	beq.n	7132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    712a:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    712e:	4281      	cmp	r1, r0
    7130:	d002      	beq.n	7138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    7132:	f004 fa67 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7136:	e7eb      	b.n	7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    7138:	200c      	movs	r0, #12
    713a:	e7d5      	b.n	70e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    713c:	f640 6158 	movw	r1, #3672	; 0xe58
    7140:	2032      	movs	r0, #50	; 0x32
    7142:	f7fc feaf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7146:	0000      	.short	0x0000
    7148:	20000108 	.word	0x20000108
    714c:	2000105c 	.word	0x2000105c
    7150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7152:	4c1e      	ldr	r4, [pc, #120]	; (71cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cc>)
    7154:	4605      	mov	r5, r0
    7156:	6860      	ldr	r0, [r4, #4]
    7158:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    715c:	b129      	cbz	r1, 716a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    715e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7162:	2802      	cmp	r0, #2
    7164:	d004      	beq.n	7170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
    7166:	2801      	cmp	r0, #1
    7168:	d01b      	beq.n	71a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    716a:	f004 fa4b 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    716e:	e02a      	b.n	71c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c6>
    7170:	a803      	add	r0, sp, #12
    7172:	f000 f8b9 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    7176:	6862      	ldr	r2, [r4, #4]
    7178:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    717c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7180:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7184:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7188:	23ff      	movs	r3, #255	; 0xff
    718a:	2106      	movs	r1, #6
    718c:	4628      	mov	r0, r5
    718e:	3232      	adds	r2, #50	; 0x32
    7190:	f000 fb9a 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7194:	6862      	ldr	r2, [r4, #4]
    7196:	200b      	movs	r0, #11
    7198:	2100      	movs	r1, #0
    719a:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    719e:	b004      	add	sp, #16
    71a0:	bd70      	pop	{r4, r5, r6, pc}
    71a2:	a803      	add	r0, sp, #12
    71a4:	f000 f8a0 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    71a8:	6862      	ldr	r2, [r4, #4]
    71aa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    71ae:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    71b2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    71b6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    71ba:	23ff      	movs	r3, #255	; 0xff
    71bc:	2106      	movs	r1, #6
    71be:	4628      	mov	r0, r5
    71c0:	3232      	adds	r2, #50	; 0x32
    71c2:	f000 fb81 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    71c6:	2005      	movs	r0, #5
    71c8:	e7e9      	b.n	719e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e>
    71ca:	0000      	.short	0x0000
    71cc:	20000108 	.word	0x20000108
    71d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    71d2:	b389      	cbz	r1, 7238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x238>
    71d4:	2901      	cmp	r1, #1
    71d6:	d034      	beq.n	7242 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x242>
    71d8:	2505      	movs	r5, #5
    71da:	2902      	cmp	r1, #2
    71dc:	d004      	beq.n	71e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    71de:	2906      	cmp	r1, #6
    71e0:	d025      	beq.n	722e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22e>
    71e2:	f004 fa0f 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    71e6:	e01f      	b.n	7228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    71e8:	4606      	mov	r6, r0
    71ea:	f004 fa0b 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    71ee:	4c17      	ldr	r4, [pc, #92]	; (724c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>)
    71f0:	6860      	ldr	r0, [r4, #4]
    71f2:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    71f6:	b1b9      	cbz	r1, 7228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    71f8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    71fc:	2801      	cmp	r0, #1
    71fe:	d001      	beq.n	7204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    7200:	2802      	cmp	r0, #2
    7202:	d111      	bne.n	7228 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x228>
    7204:	a803      	add	r0, sp, #12
    7206:	f000 f86f 	bl	72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>
    720a:	6862      	ldr	r2, [r4, #4]
    720c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7210:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7214:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7218:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    721c:	23ff      	movs	r3, #255	; 0xff
    721e:	2102      	movs	r1, #2
    7220:	4630      	mov	r0, r6
    7222:	3232      	adds	r2, #50	; 0x32
    7224:	f000 fb50 	bl	78c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7228:	b004      	add	sp, #16
    722a:	4628      	mov	r0, r5
    722c:	bd70      	pop	{r4, r5, r6, pc}
    722e:	b004      	add	sp, #16
    7230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7234:	f7ff bf8c 	b.w	7150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>
    7238:	b004      	add	sp, #16
    723a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    723e:	f7ff bf03 	b.w	7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    7242:	b004      	add	sp, #16
    7244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7248:	f7ff be2c 	b.w	6ea4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    724c:	20000108 	.word	0x20000108
    7250:	b570      	push	{r4, r5, r6, lr}
    7252:	4c11      	ldr	r4, [pc, #68]	; (7298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>)
    7254:	4605      	mov	r5, r0
    7256:	6861      	ldr	r1, [r4, #4]
    7258:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    725c:	2800      	cmp	r0, #0
    725e:	d019      	beq.n	7294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>
    7260:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7264:	2800      	cmp	r0, #0
    7266:	d015      	beq.n	7294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>
    7268:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    726c:	3132      	adds	r1, #50	; 0x32
    726e:	f007 fbea 	bl	ea46 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7272:	b140      	cbz	r0, 7286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    7274:	f7fe fa00 	bl	5678 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7278:	6861      	ldr	r1, [r4, #4]
    727a:	462a      	mov	r2, r5
    727c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7280:	3132      	adds	r1, #50	; 0x32
    7282:	f006 bd69 	b.w	dd58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7286:	6860      	ldr	r0, [r4, #4]
    7288:	4629      	mov	r1, r5
    728a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    728e:	3032      	adds	r0, #50	; 0x32
    7290:	f006 bd51 	b.w	dd36 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7294:	bd70      	pop	{r4, r5, r6, pc}
    7296:	0000      	.short	0x0000
    7298:	20000108 	.word	0x20000108
    729c:	4602      	mov	r2, r0
    729e:	480b      	ldr	r0, [pc, #44]	; (72cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2cc>)
    72a0:	b082      	sub	sp, #8
    72a2:	6840      	ldr	r0, [r0, #4]
    72a4:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    72a8:	f88d 1000 	strb.w	r1, [sp]
    72ac:	9900      	ldr	r1, [sp, #0]
    72ae:	9100      	str	r1, [sp, #0]
    72b0:	f89d 1000 	ldrb.w	r1, [sp]
    72b4:	2900      	cmp	r1, #0
    72b6:	d107      	bne.n	72c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>
    72b8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    72ba:	2900      	cmp	r1, #0
    72bc:	d004      	beq.n	72c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>
    72be:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    72c2:	b002      	add	sp, #8
    72c4:	f7fb ba76 	b.w	27b4 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    72c8:	b002      	add	sp, #8
    72ca:	4770      	bx	lr
    72cc:	20000108 	.word	0x20000108
    72d0:	b510      	push	{r4, lr}
    72d2:	4804      	ldr	r0, [pc, #16]	; (72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>)
    72d4:	f004 fcac 	bl	bc30 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    72d8:	2800      	cmp	r0, #0
    72da:	d102      	bne.n	72e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e2>
    72dc:	4901      	ldr	r1, [pc, #4]	; (72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>)
    72de:	207f      	movs	r0, #127	; 0x7f
    72e0:	7008      	strb	r0, [r1, #0]
    72e2:	bd10      	pop	{r4, pc}
    72e4:	20000108 	.word	0x20000108
    72e8:	4a07      	ldr	r2, [pc, #28]	; (7308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>)
    72ea:	b510      	push	{r4, lr}
    72ec:	f992 1000 	ldrsb.w	r1, [r2]
    72f0:	297f      	cmp	r1, #127	; 0x7f
    72f2:	d003      	beq.n	72fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fc>
    72f4:	7001      	strb	r1, [r0, #0]
    72f6:	207f      	movs	r0, #127	; 0x7f
    72f8:	7010      	strb	r0, [r2, #0]
    72fa:	bd10      	pop	{r4, pc}
    72fc:	f240 319f 	movw	r1, #927	; 0x39f
    7300:	2032      	movs	r0, #50	; 0x32
    7302:	f7fc fdcf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7306:	0000      	.short	0x0000
    7308:	20000108 	.word	0x20000108
    730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7310:	4607      	mov	r7, r0
    7312:	f7fd f9f3 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7316:	4604      	mov	r4, r0
    7318:	f7fd f9f6 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    731c:	4621      	mov	r1, r4
    731e:	f007 fbea 	bl	eaf6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7322:	0005      	movs	r5, r0
    7324:	d012      	beq.n	734c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34c>
    7326:	4c2d      	ldr	r4, [pc, #180]	; (73dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>)
    7328:	6860      	ldr	r0, [r4, #4]
    732a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    732e:	2801      	cmp	r0, #1
    7330:	d004      	beq.n	733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    7332:	2802      	cmp	r0, #2
    7334:	d002      	beq.n	733c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x33c>
    7336:	f7ff fc75 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    733a:	b150      	cbz	r0, 7352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    733c:	f06f 0613 	mvn.w	r6, #19
    7340:	b33f      	cbz	r7, 7392 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x392>
    7342:	4628      	mov	r0, r5
    7344:	f007 f8f5 	bl	e532 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7348:	b950      	cbnz	r0, 7360 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x360>
    734a:	e005      	b.n	7358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    734c:	f241 4181 	movw	r1, #5249	; 0x1481
    7350:	e03a      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7352:	f241 4187 	movw	r1, #5255	; 0x1487
    7356:	e037      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7358:	4628      	mov	r0, r5
    735a:	f007 f90c 	bl	e576 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    735e:	b1c0      	cbz	r0, 7392 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x392>
    7360:	6861      	ldr	r1, [r4, #4]
    7362:	4628      	mov	r0, r5
    7364:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7368:	2a05      	cmp	r2, #5
    736a:	d202      	bcs.n	7372 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x372>
    736c:	f241 410b 	movw	r1, #5131	; 0x140b
    7370:	e02a      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7372:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7376:	2a0b      	cmp	r2, #11
    7378:	d302      	bcc.n	7380 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x380>
    737a:	f241 410c 	movw	r1, #5132	; 0x140c
    737e:	e023      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    7380:	68e2      	ldr	r2, [r4, #12]
    7382:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7386:	6952      	ldr	r2, [r2, #20]
    7388:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    738c:	5851      	ldr	r1, [r2, r1]
    738e:	4788      	blx	r1
    7390:	e016      	b.n	73c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c0>
    7392:	6860      	ldr	r0, [r4, #4]
    7394:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    7398:	2905      	cmp	r1, #5
    739a:	d202      	bcs.n	73a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    739c:	f241 4177 	movw	r1, #5239	; 0x1477
    73a0:	e012      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    73a2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    73a6:	290b      	cmp	r1, #11
    73a8:	d302      	bcc.n	73b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    73aa:	f241 4178 	movw	r1, #5240	; 0x1478
    73ae:	e00b      	b.n	73c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c8>
    73b0:	68e1      	ldr	r1, [r4, #12]
    73b2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    73b6:	6989      	ldr	r1, [r1, #24]
    73b8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    73bc:	5808      	ldr	r0, [r1, r0]
    73be:	4780      	blx	r0
    73c0:	280f      	cmp	r0, #15
    73c2:	d304      	bcc.n	73ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ce>
    73c4:	f241 419c 	movw	r1, #5276	; 0x149c
    73c8:	2032      	movs	r0, #50	; 0x32
    73ca:	f7fc fd6b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73ce:	68e1      	ldr	r1, [r4, #12]
    73d0:	6909      	ldr	r1, [r1, #16]
    73d2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    73d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73da:	4700      	bx	r0
    73dc:	20000108 	.word	0x20000108
    73e0:	b510      	push	{r4, lr}
    73e2:	b118      	cbz	r0, 73ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ec>
    73e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73e8:	f000 b924 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    73ec:	2900      	cmp	r1, #0
    73ee:	d01d      	beq.n	742c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42c>
    73f0:	480f      	ldr	r0, [pc, #60]	; (7430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>)
    73f2:	6841      	ldr	r1, [r0, #4]
    73f4:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    73f8:	2a0b      	cmp	r2, #11
    73fa:	d202      	bcs.n	7402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    73fc:	f241 5143 	movw	r1, #5443	; 0x1543
    7400:	e005      	b.n	740e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40e>
    7402:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7406:	2a0f      	cmp	r2, #15
    7408:	d304      	bcc.n	7414 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x414>
    740a:	f241 5144 	movw	r1, #5444	; 0x1544
    740e:	2032      	movs	r0, #50	; 0x32
    7410:	f7fc fd48 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7414:	68c0      	ldr	r0, [r0, #12]
    7416:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    741a:	6880      	ldr	r0, [r0, #8]
    741c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7420:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7424:	5840      	ldr	r0, [r0, r1]
    7426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    742a:	4700      	bx	r0
    742c:	bd10      	pop	{r4, pc}
    742e:	0000      	.short	0x0000
    7430:	20000108 	.word	0x20000108
    7434:	b510      	push	{r4, lr}
    7436:	f7ff faef 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    743a:	f000 f90b 	bl	7654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x654>
    743e:	4805      	ldr	r0, [pc, #20]	; (7454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    7440:	6881      	ldr	r1, [r0, #8]
    7442:	2000      	movs	r0, #0
    7444:	f7ff fc3a 	bl	6cbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    7448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    744c:	2003      	movs	r0, #3
    744e:	f000 bb79 	b.w	7b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7452:	0000      	.short	0x0000
    7454:	20000108 	.word	0x20000108
    7458:	b510      	push	{r4, lr}
    745a:	f7fd f94f 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    745e:	4604      	mov	r4, r0
    7460:	f7fd f952 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7464:	4621      	mov	r1, r4
    7466:	f007 fb46 	bl	eaf6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    746a:	b150      	cbz	r0, 7482 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x482>
    746c:	f004 fb2e 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7470:	2000      	movs	r0, #0
    7472:	f004 f9df 	bl	b834 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7476:	4905      	ldr	r1, [pc, #20]	; (748c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48c>)
    7478:	2006      	movs	r0, #6
    747a:	6849      	ldr	r1, [r1, #4]
    747c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7480:	bd10      	pop	{r4, pc}
    7482:	f240 5184 	movw	r1, #1412	; 0x584
    7486:	2032      	movs	r0, #50	; 0x32
    7488:	f7fc fd0c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    748c:	20000108 	.word	0x20000108
    7490:	490f      	ldr	r1, [pc, #60]	; (74d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d0>)
    7492:	b510      	push	{r4, lr}
    7494:	6848      	ldr	r0, [r1, #4]
    7496:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    749a:	2a06      	cmp	r2, #6
    749c:	d202      	bcs.n	74a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a4>
    749e:	f241 5171 	movw	r1, #5489	; 0x1571
    74a2:	e005      	b.n	74b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    74a4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    74a8:	2a0b      	cmp	r2, #11
    74aa:	d304      	bcc.n	74b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b6>
    74ac:	f241 5172 	movw	r1, #5490	; 0x1572
    74b0:	2032      	movs	r0, #50	; 0x32
    74b2:	f7fc fcf7 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74b6:	68c9      	ldr	r1, [r1, #12]
    74b8:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    74bc:	68c9      	ldr	r1, [r1, #12]
    74be:	f06f 0213 	mvn.w	r2, #19
    74c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    74c6:	5808      	ldr	r0, [r1, r0]
    74c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74cc:	4700      	bx	r0
    74ce:	0000      	.short	0x0000
    74d0:	20000108 	.word	0x20000108
    74d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74d8:	4c31      	ldr	r4, [pc, #196]	; (75a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>)
    74da:	4605      	mov	r5, r0
    74dc:	460e      	mov	r6, r1
    74de:	6860      	ldr	r0, [r4, #4]
    74e0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    74e4:	b120      	cbz	r0, 74f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>
    74e6:	2801      	cmp	r0, #1
    74e8:	d002      	beq.n	74f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>
    74ea:	200c      	movs	r0, #12
    74ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74f0:	f004 fa60 	bl	b9b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    74f4:	f004 f86c 	bl	b5d0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    74f8:	f003 fe4e 	bl	b198 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    74fc:	f004 fcc8 	bl	be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7500:	4828      	ldr	r0, [pc, #160]	; (75a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>)
    7502:	f004 f98f 	bl	b824 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7506:	4828      	ldr	r0, [pc, #160]	; (75a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>)
    7508:	f004 fbb8 	bl	bc7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    750c:	4827      	ldr	r0, [pc, #156]	; (75ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>)
    750e:	f004 fbab 	bl	bc68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7512:	4630      	mov	r0, r6
    7514:	f004 fada 	bl	bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7518:	7968      	ldrb	r0, [r5, #5]
    751a:	b110      	cbz	r0, 7522 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x522>
    751c:	2001      	movs	r0, #1
    751e:	f7ff febd 	bl	729c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>
    7522:	7928      	ldrb	r0, [r5, #4]
    7524:	2803      	cmp	r0, #3
    7526:	d001      	beq.n	752c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52c>
    7528:	b118      	cbz	r0, 7532 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x532>
    752a:	e018      	b.n	755e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    752c:	f640 1188 	movw	r1, #2440	; 0x988
    7530:	e033      	b.n	759a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59a>
    7532:	6861      	ldr	r1, [r4, #4]
    7534:	2000      	movs	r0, #0
    7536:	2503      	movs	r5, #3
    7538:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    753c:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    7540:	1c52      	adds	r2, r2, #1
    7542:	fbb2 f7f5 	udiv	r7, r2, r5
    7546:	fb05 2217 	mls	r2, r5, r7, r2
    754a:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    754e:	fa23 f202 	lsr.w	r2, r3, r2
    7552:	07d2      	lsls	r2, r2, #31
    7554:	d103      	bne.n	755e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    7556:	1c40      	adds	r0, r0, #1
    7558:	b2c0      	uxtb	r0, r0
    755a:	2803      	cmp	r0, #3
    755c:	d3ee      	bcc.n	753c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53c>
    755e:	6860      	ldr	r0, [r4, #4]
    7560:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7564:	f004 faac 	bl	bac0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7568:	4631      	mov	r1, r6
    756a:	2001      	movs	r0, #1
    756c:	f7ff fa66 	bl	6a3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7570:	2800      	cmp	r0, #0
    7572:	d0bb      	beq.n	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    7574:	f000 f922 	bl	77bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7bc>
    7578:	6860      	ldr	r0, [r4, #4]
    757a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    757e:	b138      	cbz	r0, 7590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x590>
    7580:	f7fe f87e 	bl	5680 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7584:	480a      	ldr	r0, [pc, #40]	; (75b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>)
    7586:	6800      	ldr	r0, [r0, #0]
    7588:	2803      	cmp	r0, #3
    758a:	d004      	beq.n	7596 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x596>
    758c:	2000      	movs	r0, #0
    758e:	e7ad      	b.n	74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    7590:	f7fe fa6a 	bl	5a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7594:	e7f6      	b.n	7584 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x584>
    7596:	f640 119a 	movw	r1, #2458	; 0x99a
    759a:	2032      	movs	r0, #50	; 0x32
    759c:	f7fc fc82 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75a0:	20000108 	.word	0x20000108
    75a4:	000078b8 	.word	0x000078b8
    75a8:	000100df 	.word	0x000100df
    75ac:	8e89bed6 	.word	0x8e89bed6
    75b0:	40001550 	.word	0x40001550
    75b4:	b510      	push	{r4, lr}
    75b6:	2000      	movs	r0, #0
    75b8:	f7ff fe70 	bl	729c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29c>
    75bc:	4808      	ldr	r0, [pc, #32]	; (75e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e0>)
    75be:	6840      	ldr	r0, [r0, #4]
    75c0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    75c4:	b128      	cbz	r0, 75d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d2>
    75c6:	2801      	cmp	r0, #1
    75c8:	d003      	beq.n	75d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d2>
    75ca:	2802      	cmp	r0, #2
    75cc:	d004      	beq.n	75d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d8>
    75ce:	200c      	movs	r0, #12
    75d0:	bd10      	pop	{r4, pc}
    75d2:	f000 f82f 	bl	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    75d6:	e001      	b.n	75dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5dc>
    75d8:	f000 f844 	bl	7664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    75dc:	2000      	movs	r0, #0
    75de:	bd10      	pop	{r4, pc}
    75e0:	20000108 	.word	0x20000108
    75e4:	b570      	push	{r4, r5, r6, lr}
    75e6:	4c12      	ldr	r4, [pc, #72]	; (7630 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x630>)
    75e8:	6860      	ldr	r0, [r4, #4]
    75ea:	f100 0532 	add.w	r5, r0, #50	; 0x32
    75ee:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    75f2:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    75f6:	b188      	cbz	r0, 761c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    75f8:	f7ff fb14 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    75fc:	b130      	cbz	r0, 760c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    75fe:	6860      	ldr	r0, [r4, #4]
    7600:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7604:	b111      	cbz	r1, 760c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60c>
    7606:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    760a:	e002      	b.n	7612 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x612>
    760c:	6860      	ldr	r0, [r4, #4]
    760e:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7612:	f7fe f8db 	bl	57cc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    7616:	b108      	cbz	r0, 761c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    7618:	2601      	movs	r6, #1
    761a:	4605      	mov	r5, r0
    761c:	4629      	mov	r1, r5
    761e:	68a0      	ldr	r0, [r4, #8]
    7620:	f006 ffde 	bl	e5e0 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7624:	4631      	mov	r1, r6
    7626:	68a0      	ldr	r0, [r4, #8]
    7628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    762c:	f006 bfde 	b.w	e5ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7630:	20000108 	.word	0x20000108
    7634:	b510      	push	{r4, lr}
    7636:	f7ff f9ef 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    763a:	4905      	ldr	r1, [pc, #20]	; (7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>)
    763c:	2001      	movs	r0, #1
    763e:	6849      	ldr	r1, [r1, #4]
    7640:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7648:	2000      	movs	r0, #0
    764a:	f000 ba7b 	b.w	7b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    764e:	0000      	.short	0x0000
    7650:	20000108 	.word	0x20000108
    7654:	4902      	ldr	r1, [pc, #8]	; (7660 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x660>)
    7656:	2000      	movs	r0, #0
    7658:	6849      	ldr	r1, [r1, #4]
    765a:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    765e:	4770      	bx	lr
    7660:	20000108 	.word	0x20000108
    7664:	b570      	push	{r4, r5, r6, lr}
    7666:	f7fd f849 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    766a:	4604      	mov	r4, r0
    766c:	f7fd f84c 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7670:	4621      	mov	r1, r4
    7672:	f007 fa40 	bl	eaf6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7676:	0004      	movs	r4, r0
    7678:	d020      	beq.n	76bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6bc>
    767a:	f007 fa8c 	bl	eb96 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    767e:	2000      	movs	r0, #0
    7680:	f000 fa2a 	bl	7ad8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7684:	b1f8      	cbz	r0, 76c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c6>
    7686:	4d1e      	ldr	r5, [pc, #120]	; (7700 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x700>)
    7688:	6868      	ldr	r0, [r5, #4]
    768a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    768e:	2802      	cmp	r0, #2
    7690:	d003      	beq.n	769a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x69a>
    7692:	4621      	mov	r1, r4
    7694:	2000      	movs	r0, #0
    7696:	f7ff f9d1 	bl	6a3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    769a:	1ce0      	adds	r0, r4, #3
    769c:	f006 fbdb 	bl	de56 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    76a0:	6869      	ldr	r1, [r5, #4]
    76a2:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    76a6:	b128      	cbz	r0, 76b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b4>
    76a8:	2440      	movs	r4, #64	; 0x40
    76aa:	f003 fd95 	bl	b1d8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    76ae:	4620      	mov	r0, r4
    76b0:	f003 ff9c 	bl	b5ec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    76b4:	f7ff fab6 	bl	6c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    76b8:	b970      	cbnz	r0, 76d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d8>
    76ba:	e008      	b.n	76ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ce>
    76bc:	f240 4177 	movw	r1, #1143	; 0x477
    76c0:	2032      	movs	r0, #50	; 0x32
    76c2:	f7fc fbef 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76ca:	f7ff bfb3 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    76ce:	6868      	ldr	r0, [r5, #4]
    76d0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    76d4:	2802      	cmp	r0, #2
    76d6:	d104      	bne.n	76e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e2>
    76d8:	2100      	movs	r1, #0
    76da:	2201      	movs	r2, #1
    76dc:	4608      	mov	r0, r1
    76de:	f004 fa81 	bl	bbe4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    76e2:	6868      	ldr	r0, [r5, #4]
    76e4:	21ff      	movs	r1, #255	; 0xff
    76e6:	f800 1f64 	strb.w	r1, [r0, #100]!
    76ea:	7041      	strb	r1, [r0, #1]
    76ec:	2100      	movs	r1, #0
    76ee:	7201      	strb	r1, [r0, #8]
    76f0:	71c1      	strb	r1, [r0, #7]
    76f2:	7241      	strb	r1, [r0, #9]
    76f4:	7601      	strb	r1, [r0, #24]
    76f6:	2105      	movs	r1, #5
    76f8:	f800 1c08 	strb.w	r1, [r0, #-8]
    76fc:	bd70      	pop	{r4, r5, r6, pc}
    76fe:	0000      	.short	0x0000
    7700:	20000108 	.word	0x20000108
    7704:	b570      	push	{r4, r5, r6, lr}
    7706:	f7fc fff9 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    770a:	4604      	mov	r4, r0
    770c:	f7fc fffc 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7710:	4621      	mov	r1, r4
    7712:	f007 f9f0 	bl	eaf6 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7716:	0005      	movs	r5, r0
    7718:	d028      	beq.n	776c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76c>
    771a:	4e19      	ldr	r6, [pc, #100]	; (7780 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x780>)
    771c:	2004      	movs	r0, #4
    771e:	6874      	ldr	r4, [r6, #4]
    7720:	345c      	adds	r4, #92	; 0x5c
    7722:	f000 f9d9 	bl	7ad8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7726:	b330      	cbz	r0, 7776 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x776>
    7728:	200c      	movs	r0, #12
    772a:	7020      	strb	r0, [r4, #0]
    772c:	2001      	movs	r0, #1
    772e:	f000 fa09 	bl	7b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7732:	7828      	ldrb	r0, [r5, #0]
    7734:	6871      	ldr	r1, [r6, #4]
    7736:	f3c0 1040 	ubfx	r0, r0, #5, #1
    773a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    773e:	2005      	movs	r0, #5
    7740:	f7ff fb3a 	bl	6db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7744:	4a0f      	ldr	r2, [pc, #60]	; (7784 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x784>)
    7746:	68b1      	ldr	r1, [r6, #8]
    7748:	2520      	movs	r5, #32
    774a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    774c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    7750:	7808      	ldrb	r0, [r1, #0]
    7752:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7756:	f020 0020 	bic.w	r0, r0, #32
    775a:	4318      	orrs	r0, r3
    775c:	7008      	strb	r0, [r1, #0]
    775e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7760:	7ea2      	ldrb	r2, [r4, #26]
    7762:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7766:	4011      	ands	r1, r2
    7768:	7001      	strb	r1, [r0, #0]
    776a:	bd70      	pop	{r4, r5, r6, pc}
    776c:	f240 51ef 	movw	r1, #1519	; 0x5ef
    7770:	2032      	movs	r0, #50	; 0x32
    7772:	f7fc fb97 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    777a:	f7ff bf5b 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    777e:	0000      	.short	0x0000
    7780:	20000108 	.word	0x20000108
    7784:	2000105c 	.word	0x2000105c
    7788:	b510      	push	{r4, lr}
    778a:	2003      	movs	r0, #3
    778c:	f000 f9a4 	bl	7ad8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7790:	b168      	cbz	r0, 77ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ae>
    7792:	2003      	movs	r0, #3
    7794:	f7ff fb10 	bl	6db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7798:	2201      	movs	r2, #1
    779a:	4611      	mov	r1, r2
    779c:	2000      	movs	r0, #0
    779e:	f004 fa21 	bl	bbe4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    77a2:	4905      	ldr	r1, [pc, #20]	; (77b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b8>)
    77a4:	200b      	movs	r0, #11
    77a6:	6849      	ldr	r1, [r1, #4]
    77a8:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    77ac:	bd10      	pop	{r4, pc}
    77ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77b2:	f7ff bf3f 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    77b6:	0000      	.short	0x0000
    77b8:	20000108 	.word	0x20000108
    77bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77c0:	4c1d      	ldr	r4, [pc, #116]	; (7838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x838>)
    77c2:	2600      	movs	r6, #0
    77c4:	6860      	ldr	r0, [r4, #4]
    77c6:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    77ca:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    77ce:	b911      	cbnz	r1, 77d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d6>
    77d0:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    77d4:	b350      	cbz	r0, 782c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82c>
    77d6:	f005 f80f 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    77da:	4680      	mov	r8, r0
    77dc:	6860      	ldr	r0, [r4, #4]
    77de:	4641      	mov	r1, r8
    77e0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    77e2:	f7f9 ff6f 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    77e6:	4f15      	ldr	r7, [pc, #84]	; (783c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x83c>)
    77e8:	4605      	mov	r5, r0
    77ea:	fb90 f0f7 	sdiv	r0, r0, r7
    77ee:	fb07 5010 	mls	r0, r7, r0, r5
    77f2:	4241      	negs	r1, r0
    77f4:	4640      	mov	r0, r8
    77f6:	f7f9 ff33 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    77fa:	6861      	ldr	r1, [r4, #4]
    77fc:	6448      	str	r0, [r1, #68]	; 0x44
    77fe:	fb95 f0f7 	sdiv	r0, r5, r7
    7802:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7804:	4410      	add	r0, r2
    7806:	6788      	str	r0, [r1, #120]	; 0x78
    7808:	f7fe f89c 	bl	5944 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    780c:	6861      	ldr	r1, [r4, #4]
    780e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7810:	4290      	cmp	r0, r2
    7812:	d80b      	bhi.n	782c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82c>
    7814:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7818:	678e      	str	r6, [r1, #120]	; 0x78
    781a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    781e:	b110      	cbz	r0, 7826 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x826>
    7820:	2001      	movs	r0, #1
    7822:	f7fd ff79 	bl	5718 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7826:	2001      	movs	r0, #1
    7828:	f7ff fd12 	bl	7250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x250>
    782c:	6861      	ldr	r1, [r4, #4]
    782e:	2002      	movs	r0, #2
    7830:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7838:	20000108 	.word	0x20000108
    783c:	000f4240 	.word	0x000f4240
    7840:	00007655 	.word	0x00007655
    7844:	00007635 	.word	0x00007635
    7848:	0000ead7 	.word	0x0000ead7
    784c:	0000ead7 	.word	0x0000ead7
    7850:	0000ead7 	.word	0x0000ead7
    7854:	00007665 	.word	0x00007665
    7858:	0000ead7 	.word	0x0000ead7
    785c:	0000ead7 	.word	0x0000ead7
    7860:	0000ead7 	.word	0x0000ead7
    7864:	0000ead7 	.word	0x0000ead7
    7868:	0000ead7 	.word	0x0000ead7
    786c:	00007789 	.word	0x00007789
    7870:	00007705 	.word	0x00007705
    7874:	0000ead7 	.word	0x0000ead7
    7878:	0000ead7 	.word	0x0000ead7
    787c:	00007459 	.word	0x00007459
    7880:	00007435 	.word	0x00007435
    7884:	00000000 	.word	0x00000000
    7888:	0000eae1 	.word	0x0000eae1
    788c:	0000ea7f 	.word	0x0000ea7f
    7890:	0000ea91 	.word	0x0000ea91
    7894:	0000ea9f 	.word	0x0000ea9f
    7898:	00006bd1 	.word	0x00006bd1
    789c:	000074d5 	.word	0x000074d5
    78a0:	000075b5 	.word	0x000075b5
    78a4:	0000787c 	.word	0x0000787c
    78a8:	00007884 	.word	0x00007884
    78ac:	00007840 	.word	0x00007840
    78b0:	00007894 	.word	0x00007894
    78b4:	0000788c 	.word	0x0000788c
    78b8:	00007491 	.word	0x00007491
    78bc:	0000730d 	.word	0x0000730d
    78c0:	000073e1 	.word	0x000073e1
    78c4:	0000eaf3 	.word	0x0000eaf3

000078c8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    78c8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    78cc:	461d      	mov	r5, r3
    78ce:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    78d2:	4616      	mov	r6, r2
    78d4:	4688      	mov	r8, r1
    78d6:	4681      	mov	r9, r0
    78d8:	f7fc ff16 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    78dc:	4604      	mov	r4, r0
    78de:	f005 ff7e 	bl	d7de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    78e2:	2801      	cmp	r0, #1
    78e4:	d063      	beq.n	79ae <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    78e6:	4620      	mov	r0, r4
    78e8:	f007 f9ce 	bl	ec88 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    78ec:	4604      	mov	r4, r0
    78ee:	221c      	movs	r2, #28
    78f0:	2100      	movs	r1, #0
    78f2:	f005 f970 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    78f6:	2701      	movs	r7, #1
    78f8:	7027      	strb	r7, [r4, #0]
    78fa:	ea5f 0008 	movs.w	r0, r8
    78fe:	d009      	beq.n	7914 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    7900:	2801      	cmp	r0, #1
    7902:	d00b      	beq.n	791c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    7904:	2802      	cmp	r0, #2
    7906:	d02d      	beq.n	7964 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    7908:	f1b8 0f06 	cmp.w	r8, #6
    790c:	d02c      	beq.n	7968 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    790e:	f240 217d 	movw	r1, #637	; 0x27d
    7912:	e049      	b.n	79a8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    7914:	7aa0      	ldrb	r0, [r4, #10]
    7916:	f040 0001 	orr.w	r0, r0, #1
    791a:	e026      	b.n	796a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    791c:	7aa0      	ldrb	r0, [r4, #10]
    791e:	f040 0005 	orr.w	r0, r0, #5
    7922:	bf00      	nop
    7924:	f040 0010 	orr.w	r0, r0, #16
    7928:	72a0      	strb	r0, [r4, #10]
    792a:	1c63      	adds	r3, r4, #1
    792c:	1ca2      	adds	r2, r4, #2
    792e:	4648      	mov	r0, r9
    7930:	990a      	ldr	r1, [sp, #40]	; 0x28
    7932:	f007 f98e 	bl	ec52 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7936:	f884 a009 	strb.w	sl, [r4, #9]
    793a:	7327      	strb	r7, [r4, #12]
    793c:	2000      	movs	r0, #0
    793e:	7360      	strb	r0, [r4, #13]
    7940:	20ff      	movs	r0, #255	; 0xff
    7942:	73a0      	strb	r0, [r4, #14]
    7944:	7aa1      	ldrb	r1, [r4, #10]
    7946:	0749      	lsls	r1, r1, #29
    7948:	d518      	bpl.n	797c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    794a:	f104 0014 	add.w	r0, r4, #20
    794e:	1e41      	subs	r1, r0, #1
    7950:	2d02      	cmp	r5, #2
    7952:	d00d      	beq.n	7970 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7954:	2d03      	cmp	r5, #3
    7956:	d00b      	beq.n	7970 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7958:	f8d9 2008 	ldr.w	r2, [r9, #8]
    795c:	6813      	ldr	r3, [r2, #0]
    795e:	6003      	str	r3, [r0, #0]
    7960:	8892      	ldrh	r2, [r2, #4]
    7962:	e008      	b.n	7976 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    7964:	7aa0      	ldrb	r0, [r4, #10]
    7966:	e7dd      	b.n	7924 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7968:	7aa0      	ldrb	r0, [r4, #10]
    796a:	f040 0002 	orr.w	r0, r0, #2
    796e:	e7d9      	b.n	7924 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7970:	6832      	ldr	r2, [r6, #0]
    7972:	6002      	str	r2, [r0, #0]
    7974:	88b2      	ldrh	r2, [r6, #4]
    7976:	8082      	strh	r2, [r0, #4]
    7978:	700d      	strb	r5, [r1, #0]
    797a:	e000      	b.n	797e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    797c:	74e0      	strb	r0, [r4, #19]
    797e:	207f      	movs	r0, #127	; 0x7f
    7980:	76a0      	strb	r0, [r4, #26]
    7982:	f884 b01b 	strb.w	fp, [r4, #27]
    7986:	f7fc feb9 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    798a:	4604      	mov	r4, r0
    798c:	f7fc febc 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7990:	2201      	movs	r2, #1
    7992:	4621      	mov	r1, r4
    7994:	f007 f981 	bl	ec9a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7998:	b120      	cbz	r0, 79a4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    799a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    799e:	2005      	movs	r0, #5
    79a0:	f000 b8d0 	b.w	7b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    79a4:	f240 219d 	movw	r1, #669	; 0x29d
    79a8:	2033      	movs	r0, #51	; 0x33
    79aa:	f7fc fa7b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79ae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000079b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    79b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79b8:	4616      	mov	r6, r2
    79ba:	460c      	mov	r4, r1
    79bc:	4605      	mov	r5, r0
    79be:	f006 fdd6 	bl	e56e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    79c2:	7460      	strb	r0, [r4, #17]
    79c4:	4628      	mov	r0, r5
    79c6:	f006 fdc9 	bl	e55c <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    79ca:	74a0      	strb	r0, [r4, #18]
    79cc:	1cea      	adds	r2, r5, #3
    79ce:	4b14      	ldr	r3, [pc, #80]	; (7a20 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    79d0:	1d90      	adds	r0, r2, #6
    79d2:	2100      	movs	r1, #0
    79d4:	2e07      	cmp	r6, #7
    79d6:	d21f      	bcs.n	7a18 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    79d8:	e8df f006 	tbb	[pc, r6]
    79dc:	1e110b04 	.word	0x1e110b04
    79e0:	00041e13 	.word	0x00041e13
    79e4:	781b      	ldrb	r3, [r3, #0]
    79e6:	e00d      	b.n	7a04 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    79e8:	60e0      	str	r0, [r4, #12]
    79ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79ee:	60e1      	str	r1, [r4, #12]
    79f0:	e7fb      	b.n	79ea <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    79f2:	785b      	ldrb	r3, [r3, #1]
    79f4:	7063      	strb	r3, [r4, #1]
    79f6:	e9c4 2001 	strd	r2, r0, [r4, #4]
    79fa:	7421      	strb	r1, [r4, #16]
    79fc:	e7f7      	b.n	79ee <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    79fe:	789b      	ldrb	r3, [r3, #2]
    7a00:	e000      	b.n	7a04 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a02:	78db      	ldrb	r3, [r3, #3]
    7a04:	7063      	strb	r3, [r4, #1]
    7a06:	e9c4 2101 	strd	r2, r1, [r4, #4]
    7a0a:	786a      	ldrb	r2, [r5, #1]
    7a0c:	1f92      	subs	r2, r2, #6
    7a0e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7a12:	7422      	strb	r2, [r4, #16]
    7a14:	d0eb      	beq.n	79ee <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a16:	e7e7      	b.n	79e8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7a18:	7061      	strb	r1, [r4, #1]
    7a1a:	6061      	str	r1, [r4, #4]
    7a1c:	60a1      	str	r1, [r4, #8]
    7a1e:	e7ec      	b.n	79fa <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7a20:	000100e5 	.word	0x000100e5

00007a24 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7a24:	b570      	push	{r4, r5, r6, lr}
    7a26:	f003 ff5d 	bl	b8e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a2a:	4c0e      	ldr	r4, [pc, #56]	; (7a64 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7a2c:	4606      	mov	r6, r0
    7a2e:	7860      	ldrb	r0, [r4, #1]
    7a30:	b170      	cbz	r0, 7a50 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a32:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7a36:	4632      	mov	r2, r6
    7a38:	4628      	mov	r0, r5
    7a3a:	f006 fa90 	bl	df5e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a3e:	6060      	str	r0, [r4, #4]
    7a40:	42a8      	cmp	r0, r5
    7a42:	d005      	beq.n	7a50 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a44:	68e1      	ldr	r1, [r4, #12]
    7a46:	1b40      	subs	r0, r0, r5
    7a48:	4408      	add	r0, r1
    7a4a:	60e0      	str	r0, [r4, #12]
    7a4c:	f7fa fdfc 	bl	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a50:	6860      	ldr	r0, [r4, #4]
    7a52:	42b0      	cmp	r0, r6
    7a54:	d301      	bcc.n	7a5a <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7a56:	7820      	ldrb	r0, [r4, #0]
    7a58:	b108      	cbz	r0, 7a5e <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7a5a:	2000      	movs	r0, #0
    7a5c:	bd70      	pop	{r4, r5, r6, pc}
    7a5e:	2001      	movs	r0, #1
    7a60:	bd70      	pop	{r4, r5, r6, pc}
    7a62:	0000      	.short	0x0000
    7a64:	200010e0 	.word	0x200010e0

00007a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7a68:	b510      	push	{r4, lr}
    7a6a:	2905      	cmp	r1, #5
    7a6c:	d22d      	bcs.n	7aca <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7a6e:	e8df f001 	tbb	[pc, r1]
    7a72:	0a05      	.short	0x0a05
    7a74:	00280e03 	.word	0x00280e03
    7a78:	2100      	movs	r1, #0
    7a7a:	e000      	b.n	7a7e <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7a7c:	2101      	movs	r1, #1
    7a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a82:	f000 babb 	b.w	7ffc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    7a86:	2103      	movs	r1, #3
    7a88:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7a8c:	bd10      	pop	{r4, pc}
    7a8e:	4911      	ldr	r1, [pc, #68]	; (7ad4 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7a90:	4604      	mov	r4, r0
    7a92:	68c0      	ldr	r0, [r0, #12]
    7a94:	6008      	str	r0, [r1, #0]
    7a96:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7a9a:	6220      	str	r0, [r4, #32]
    7a9c:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7aa0:	83a0      	strh	r0, [r4, #28]
    7aa2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7aa6:	60e0      	str	r0, [r4, #12]
    7aa8:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7aac:	82a0      	strh	r0, [r4, #20]
    7aae:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7ab2:	82e0      	strh	r0, [r4, #22]
    7ab4:	4620      	mov	r0, r4
    7ab6:	f007 f92a 	bl	ed0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7aba:	2002      	movs	r0, #2
    7abc:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7ac0:	bd10      	pop	{r4, pc}
    7ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ac6:	f007 b922 	b.w	ed0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7aca:	f640 3158 	movw	r1, #2904	; 0xb58
    7ace:	2035      	movs	r0, #53	; 0x35
    7ad0:	f7fc f9e8 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ad4:	20000118 	.word	0x20000118

00007ad8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7ad8:	b570      	push	{r4, r5, r6, lr}
    7ada:	4606      	mov	r6, r0
    7adc:	f004 fe8c 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7ae0:	4c17      	ldr	r4, [pc, #92]	; (7b40 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    7ae2:	4601      	mov	r1, r0
    7ae4:	6920      	ldr	r0, [r4, #16]
    7ae6:	f7f9 fded 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7aea:	4605      	mov	r5, r0
    7aec:	b156      	cbz	r6, 7b04 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7aee:	2e03      	cmp	r6, #3
    7af0:	d00d      	beq.n	7b0e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7af2:	2e04      	cmp	r6, #4
    7af4:	d00e      	beq.n	7b14 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    7af6:	2e06      	cmp	r6, #6
    7af8:	d01d      	beq.n	7b36 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    7afa:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    7afe:	2035      	movs	r0, #53	; 0x35
    7b00:	f7fc f9d0 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b04:	2001      	movs	r0, #1
    7b06:	f007 f8e6 	bl	ecd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    7b0a:	3098      	adds	r0, #152	; 0x98
    7b0c:	e004      	b.n	7b18 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b0e:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b12:	e001      	b.n	7b18 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b14:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b1a:	4405      	add	r5, r0
    7b1c:	39f1      	subs	r1, #241	; 0xf1
    7b1e:	428d      	cmp	r5, r1
    7b20:	d307      	bcc.n	7b32 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b22:	2600      	movs	r6, #0
    7b24:	f000 fd36 	bl	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
    7b28:	b140      	cbz	r0, 7b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b2c:	38f1      	subs	r0, #241	; 0xf1
    7b2e:	4285      	cmp	r5, r0
    7b30:	d203      	bcs.n	7b3a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    7b32:	2601      	movs	r6, #1
    7b34:	e002      	b.n	7b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b36:	2001      	movs	r0, #1
    7b38:	bd70      	pop	{r4, r5, r6, pc}
    7b3a:	2600      	movs	r6, #0
    7b3c:	4630      	mov	r0, r6
    7b3e:	bd70      	pop	{r4, r5, r6, pc}
    7b40:	200010f0 	.word	0x200010f0

00007b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b46:	2501      	movs	r5, #1
    7b48:	4c24      	ldr	r4, [pc, #144]	; (7bdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7b4a:	2806      	cmp	r0, #6
    7b4c:	d243      	bcs.n	7bd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7b4e:	e8df f000 	tbb	[pc, r0]
    7b52:	1903      	.short	0x1903
    7b54:	3e232319 	.word	0x3e232319
    7b58:	f7fe fae4 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b5c:	7860      	ldrb	r0, [r4, #1]
    7b5e:	bb88      	cbnz	r0, 7bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b60:	2200      	movs	r2, #0
    7b62:	4611      	mov	r1, r2
    7b64:	4668      	mov	r0, sp
    7b66:	f000 fd5f 	bl	8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>
    7b6a:	b148      	cbz	r0, 7b80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7b6c:	f7fe fd32 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7b70:	7800      	ldrb	r0, [r0, #0]
    7b72:	4669      	mov	r1, sp
    7b74:	f007 f8dd 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7b78:	bb20      	cbnz	r0, 7bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b7a:	f640 2163 	movw	r1, #2659	; 0xa63
    7b7e:	e01c      	b.n	7bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7b80:	70e5      	strb	r5, [r4, #3]
    7b82:	e020      	b.n	7bc6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7b84:	2802      	cmp	r0, #2
    7b86:	d005      	beq.n	7b94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7b88:	2000      	movs	r0, #0
    7b8a:	b004      	add	sp, #16
    7b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b90:	f000 ba50 	b.w	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    7b94:	2001      	movs	r0, #1
    7b96:	e7f8      	b.n	7b8a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7b98:	2804      	cmp	r0, #4
    7b9a:	d011      	beq.n	7bc0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7b9c:	f05f 0600 	movs.w	r6, #0
    7ba0:	f7fe fac0 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ba4:	7725      	strb	r5, [r4, #28]
    7ba6:	7766      	strb	r6, [r4, #29]
    7ba8:	69a1      	ldr	r1, [r4, #24]
    7baa:	2000      	movs	r0, #0
    7bac:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7bb0:	f000 faca 	bl	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
    7bb4:	b130      	cbz	r0, 7bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bb6:	f640 3118 	movw	r1, #2840	; 0xb18
    7bba:	2035      	movs	r0, #53	; 0x35
    7bbc:	f7fc f972 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc0:	2601      	movs	r6, #1
    7bc2:	e7ed      	b.n	7ba0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7bc4:	e7ff      	b.n	7bc6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7bc6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bca:	f000 baad 	b.w	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    7bce:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bd2:	f7fe baa7 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bd6:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7bda:	e7ee      	b.n	7bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7bdc:	200010f0 	.word	0x200010f0

00007be0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7be0:	b508      	push	{r3, lr}
    7be2:	2244      	movs	r2, #68	; 0x44
    7be4:	2100      	movs	r1, #0
    7be6:	480c      	ldr	r0, [pc, #48]	; (7c18 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7be8:	f004 fff5 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7bec:	f7fe fcf2 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7bf0:	2120      	movs	r1, #32
    7bf2:	7001      	strb	r1, [r0, #0]
    7bf4:	4808      	ldr	r0, [pc, #32]	; (7c18 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7bf6:	3810      	subs	r0, #16
    7bf8:	2100      	movs	r1, #0
    7bfa:	6001      	str	r1, [r0, #0]
    7bfc:	6041      	str	r1, [r0, #4]
    7bfe:	6081      	str	r1, [r0, #8]
    7c00:	60c1      	str	r1, [r0, #12]
    7c02:	f000 f80b 	bl	7c1c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7c06:	f242 7010 	movw	r0, #10000	; 0x2710
    7c0a:	9000      	str	r0, [sp, #0]
    7c0c:	2201      	movs	r2, #1
    7c0e:	4669      	mov	r1, sp
    7c10:	1080      	asrs	r0, r0, #2
    7c12:	f000 fad7 	bl	81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>
    7c16:	bd08      	pop	{r3, pc}
    7c18:	200010f0 	.word	0x200010f0

00007c1c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7c1c:	4804      	ldr	r0, [pc, #16]	; (7c30 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7c1e:	b510      	push	{r4, lr}
    7c20:	7800      	ldrb	r0, [r0, #0]
    7c22:	b108      	cbz	r0, 7c28 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7c24:	f000 f8a8 	bl	7d78 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7c28:	f000 f8fe 	bl	7e28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7c2c:	2000      	movs	r0, #0
    7c2e:	bd10      	pop	{r4, pc}
    7c30:	200010f0 	.word	0x200010f0

00007c34 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    7c34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7c38:	4c1e      	ldr	r4, [pc, #120]	; (7cb4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    7c3a:	4607      	mov	r7, r0
    7c3c:	460e      	mov	r6, r1
    7c3e:	7820      	ldrb	r0, [r4, #0]
    7c40:	b118      	cbz	r0, 7c4a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    7c42:	200c      	movs	r0, #12
    7c44:	b004      	add	sp, #16
    7c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c4a:	f7fe fcc3 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c4e:	4605      	mov	r5, r0
    7c50:	61a7      	str	r7, [r4, #24]
    7c52:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    7c56:	b110      	cbz	r0, 7c5e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    7c58:	f44f 6184 	mov.w	r1, #1056	; 0x420
    7c5c:	e026      	b.n	7cac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7c5e:	2005      	movs	r0, #5
    7c60:	7020      	strb	r0, [r4, #0]
    7c62:	2000      	movs	r0, #0
    7c64:	7060      	strb	r0, [r4, #1]
    7c66:	7720      	strb	r0, [r4, #28]
    7c68:	4630      	mov	r0, r6
    7c6a:	f000 f911 	bl	7e90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7c6e:	f000 fc41 	bl	84f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f4>
    7c72:	6320      	str	r0, [r4, #48]	; 0x30
    7c74:	2100      	movs	r1, #0
    7c76:	4810      	ldr	r0, [pc, #64]	; (7cb8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    7c78:	f7fa fbdc 	bl	2434 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7c7c:	7028      	strb	r0, [r5, #0]
    7c7e:	2820      	cmp	r0, #32
    7c80:	d00c      	beq.n	7c9c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    7c82:	2200      	movs	r2, #0
    7c84:	2101      	movs	r1, #1
    7c86:	4668      	mov	r0, sp
    7c88:	f000 fcce 	bl	8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>
    7c8c:	b148      	cbz	r0, 7ca2 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    7c8e:	7828      	ldrb	r0, [r5, #0]
    7c90:	4669      	mov	r1, sp
    7c92:	f007 f84e 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7c96:	b138      	cbz	r0, 7ca8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    7c98:	2000      	movs	r0, #0
    7c9a:	e7d3      	b.n	7c44 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    7c9c:	f240 412f 	movw	r1, #1071	; 0x42f
    7ca0:	e004      	b.n	7cac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7ca2:	f240 4132 	movw	r1, #1074	; 0x432
    7ca6:	e001      	b.n	7cac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7ca8:	f240 4133 	movw	r1, #1075	; 0x433
    7cac:	2035      	movs	r0, #53	; 0x35
    7cae:	f7fc f8f9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cb2:	0000      	.short	0x0000
    7cb4:	200010f0 	.word	0x200010f0
    7cb8:	00007eb1 	.word	0x00007eb1

00007cbc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    7cbc:	4902      	ldr	r1, [pc, #8]	; (7cc8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    7cbe:	6989      	ldr	r1, [r1, #24]
    7cc0:	6001      	str	r1, [r0, #0]
    7cc2:	f000 b859 	b.w	7d78 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7cc6:	0000      	.short	0x0000
    7cc8:	200010f0 	.word	0x200010f0

00007ccc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7ccc:	4901      	ldr	r1, [pc, #4]	; (7cd4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7cce:	7048      	strb	r0, [r1, #1]
    7cd0:	4770      	bx	lr
    7cd2:	0000      	.short	0x0000
    7cd4:	200010e0 	.word	0x200010e0

00007cd8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7cd8:	b570      	push	{r4, r5, r6, lr}
    7cda:	4605      	mov	r5, r0
    7cdc:	4907      	ldr	r1, [pc, #28]	; (7cfc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7ce2:	fbb1 f4f0 	udiv	r4, r1, r0
    7ce6:	f007 f874 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    7cea:	1901      	adds	r1, r0, r4
    7cec:	4628      	mov	r0, r5
    7cee:	f201 1137 	addw	r1, r1, #311	; 0x137
    7cf2:	f006 fdf2 	bl	e8da <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7cf6:	b280      	uxth	r0, r0
    7cf8:	bd70      	pop	{r4, r5, r6, pc}
    7cfa:	0000      	.short	0x0000
    7cfc:	00012105 	.word	0x00012105

00007d00 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d02:	4606      	mov	r6, r0
    7d04:	b111      	cbz	r1, 7d0c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7d06:	2011      	movs	r0, #17
    7d08:	b004      	add	sp, #16
    7d0a:	bd70      	pop	{r4, r5, r6, pc}
    7d0c:	4c18      	ldr	r4, [pc, #96]	; (7d70 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7d0e:	7820      	ldrb	r0, [r4, #0]
    7d10:	b108      	cbz	r0, 7d16 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7d12:	200c      	movs	r0, #12
    7d14:	e7f8      	b.n	7d08 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d16:	f7fe fc5d 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d1a:	4605      	mov	r5, r0
    7d1c:	2000      	movs	r0, #0
    7d1e:	7060      	strb	r0, [r4, #1]
    7d20:	2004      	movs	r0, #4
    7d22:	7020      	strb	r0, [r4, #0]
    7d24:	4630      	mov	r0, r6
    7d26:	f000 f8b3 	bl	7e90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7d2a:	f000 fbe3 	bl	84f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f4>
    7d2e:	6320      	str	r0, [r4, #48]	; 0x30
    7d30:	2100      	movs	r1, #0
    7d32:	4810      	ldr	r0, [pc, #64]	; (7d74 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7d34:	f7fa fb7e 	bl	2434 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7d38:	7028      	strb	r0, [r5, #0]
    7d3a:	2820      	cmp	r0, #32
    7d3c:	d00c      	beq.n	7d58 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7d3e:	2200      	movs	r2, #0
    7d40:	2101      	movs	r1, #1
    7d42:	4668      	mov	r0, sp
    7d44:	f000 fc70 	bl	8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>
    7d48:	b148      	cbz	r0, 7d5e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7d4a:	7828      	ldrb	r0, [r5, #0]
    7d4c:	4669      	mov	r1, sp
    7d4e:	f006 fff0 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7d52:	b138      	cbz	r0, 7d64 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7d54:	2000      	movs	r0, #0
    7d56:	e7d7      	b.n	7d08 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d58:	f240 4196 	movw	r1, #1174	; 0x496
    7d5c:	e004      	b.n	7d68 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d5e:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7d62:	e001      	b.n	7d68 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d64:	f240 4199 	movw	r1, #1177	; 0x499
    7d68:	2035      	movs	r0, #53	; 0x35
    7d6a:	f7fc f89b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d6e:	0000      	.short	0x0000
    7d70:	200010f0 	.word	0x200010f0
    7d74:	00007eb1 	.word	0x00007eb1

00007d78 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d7c:	2700      	movs	r7, #0
    7d7e:	f7fe fc29 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d82:	4c17      	ldr	r4, [pc, #92]	; (7de0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7d84:	4605      	mov	r5, r0
    7d86:	7820      	ldrb	r0, [r4, #0]
    7d88:	2804      	cmp	r0, #4
    7d8a:	d005      	beq.n	7d98 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d8c:	7820      	ldrb	r0, [r4, #0]
    7d8e:	2805      	cmp	r0, #5
    7d90:	d002      	beq.n	7d98 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7d92:	200c      	movs	r0, #12
    7d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d98:	2001      	movs	r0, #1
    7d9a:	7060      	strb	r0, [r4, #1]
    7d9c:	7b20      	ldrb	r0, [r4, #12]
    7d9e:	b160      	cbz	r0, 7dba <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7da0:	f3ef 8610 	mrs	r6, PRIMASK
    7da4:	b672      	cpsid	i
    7da6:	7b20      	ldrb	r0, [r4, #12]
    7da8:	b128      	cbz	r0, 7db6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7daa:	7b60      	ldrb	r0, [r4, #13]
    7dac:	b118      	cbz	r0, 7db6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7dae:	f7fe fde3 	bl	6978 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7db2:	f000 f9b9 	bl	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    7db6:	b126      	cbz	r6, 7dc2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7db8:	e004      	b.n	7dc4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7dba:	7828      	ldrb	r0, [r5, #0]
    7dbc:	f7fa f8f0 	bl	1fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7dc0:	e000      	b.n	7dc4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7dc2:	b662      	cpsie	i
    7dc4:	7828      	ldrb	r0, [r5, #0]
    7dc6:	f7fa fa29 	bl	221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7dca:	f000 fd5d 	bl	8888 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x888>
    7dce:	2000      	movs	r0, #0
    7dd0:	7060      	strb	r0, [r4, #1]
    7dd2:	7f20      	ldrb	r0, [r4, #28]
    7dd4:	b100      	cbz	r0, 7dd8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7dd6:	270c      	movs	r7, #12
    7dd8:	f000 fd80 	bl	88dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8dc>
    7ddc:	4638      	mov	r0, r7
    7dde:	e7d9      	b.n	7d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7de0:	200010f0 	.word	0x200010f0

00007de4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7de4:	4801      	ldr	r0, [pc, #4]	; (7dec <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7de6:	7800      	ldrb	r0, [r0, #0]
    7de8:	4770      	bx	lr
    7dea:	0000      	.short	0x0000
    7dec:	200010f0 	.word	0x200010f0

00007df0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7df0:	490c      	ldr	r1, [pc, #48]	; (7e24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7df2:	b508      	push	{r3, lr}
    7df4:	7809      	ldrb	r1, [r1, #0]
    7df6:	b121      	cbz	r1, 7e02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7df8:	f240 414f 	movw	r1, #1103	; 0x44f
    7dfc:	2035      	movs	r0, #53	; 0x35
    7dfe:	f7fc f851 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e02:	2300      	movs	r3, #0
    7e04:	9300      	str	r3, [sp, #0]
    7e06:	7801      	ldrb	r1, [r0, #0]
    7e08:	461a      	mov	r2, r3
    7e0a:	07c9      	lsls	r1, r1, #31
    7e0c:	d003      	beq.n	7e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7e0e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7e12:	2201      	movs	r2, #1
    7e14:	9000      	str	r0, [sp, #0]
    7e16:	4669      	mov	r1, sp
    7e18:	4618      	mov	r0, r3
    7e1a:	f000 f9d3 	bl	81c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c4>
    7e1e:	2000      	movs	r0, #0
    7e20:	bd08      	pop	{r3, pc}
    7e22:	0000      	.short	0x0000
    7e24:	200010f0 	.word	0x200010f0
    7e28:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7e2a:	4c18      	ldr	r4, [pc, #96]	; (7e8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7e2c:	2001      	movs	r0, #1
    7e2e:	7020      	strb	r0, [r4, #0]
    7e30:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7e34:	e00b      	b.n	7e4e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7e36:	2100      	movs	r1, #0
    7e38:	f005 ff11 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7e3c:	0006      	movs	r6, r0
    7e3e:	d010      	beq.n	7e62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7e40:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7e44:	f7fa f9ea 	bl	221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7e48:	4630      	mov	r0, r6
    7e4a:	f006 ff8a 	bl	ed62 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    7e4e:	4669      	mov	r1, sp
    7e50:	2000      	movs	r0, #0
    7e52:	f005 ff0d 	bl	dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7e56:	b180      	cbz	r0, 7e7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e58:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7e5c:	2035      	movs	r0, #53	; 0x35
    7e5e:	f7fc f821 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e62:	f240 5141 	movw	r1, #1345	; 0x541
    7e66:	e7f9      	b.n	7e5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7e68:	9802      	ldr	r0, [sp, #8]
    7e6a:	b130      	cbz	r0, 7e7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e6c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7e70:	b119      	cbz	r1, 7e7a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e72:	8800      	ldrh	r0, [r0, #0]
    7e74:	42a8      	cmp	r0, r5
    7e76:	d1de      	bne.n	7e36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7e78:	e004      	b.n	7e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7e7a:	4668      	mov	r0, sp
    7e7c:	f7fc fa42 	bl	4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7e80:	2800      	cmp	r0, #0
    7e82:	d0f1      	beq.n	7e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7e84:	2000      	movs	r0, #0
    7e86:	7020      	strb	r0, [r4, #0]
    7e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e8a:	0000      	.short	0x0000
    7e8c:	200010e0 	.word	0x200010e0
    7e90:	4906      	ldr	r1, [pc, #24]	; (7eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7e92:	b140      	cbz	r0, 7ea6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7e94:	2201      	movs	r2, #1
    7e96:	708a      	strb	r2, [r1, #2]
    7e98:	f242 7210 	movw	r2, #10000	; 0x2710
    7e9c:	4350      	muls	r0, r2
    7e9e:	684a      	ldr	r2, [r1, #4]
    7ea0:	4410      	add	r0, r2
    7ea2:	6208      	str	r0, [r1, #32]
    7ea4:	4770      	bx	lr
    7ea6:	2000      	movs	r0, #0
    7ea8:	7088      	strb	r0, [r1, #2]
    7eaa:	4770      	bx	lr
    7eac:	200010f0 	.word	0x200010f0
    7eb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7eb2:	460d      	mov	r5, r1
    7eb4:	2001      	movs	r0, #1
    7eb6:	f006 fef7 	bl	eca8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7eba:	b2c4      	uxtb	r4, r0
    7ebc:	200b      	movs	r0, #11
    7ebe:	f006 fef3 	bl	eca8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7ec2:	b2c0      	uxtb	r0, r0
    7ec4:	4284      	cmp	r4, r0
    7ec6:	d002      	beq.n	7ece <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7ec8:	f240 21c5 	movw	r1, #709	; 0x2c5
    7ecc:	e073      	b.n	7fb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7ece:	f7fe fb81 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7ed2:	2601      	movs	r6, #1
    7ed4:	4c3b      	ldr	r4, [pc, #236]	; (7fc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7ed6:	2d09      	cmp	r5, #9
    7ed8:	d270      	bcs.n	7fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7eda:	e8df f005 	tbb	[pc, r5]
    7ede:	3605      	.short	0x3605
    7ee0:	6f464a4a 	.word	0x6f464a4a
    7ee4:	006a665e 	.word	0x006a665e
    7ee8:	7326      	strb	r6, [r4, #12]
    7eea:	7861      	ldrb	r1, [r4, #1]
    7eec:	2900      	cmp	r1, #0
    7eee:	d12b      	bne.n	7f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7ef0:	7800      	ldrb	r0, [r0, #0]
    7ef2:	f7f9 fc0b 	bl	170c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7ef6:	4605      	mov	r5, r0
    7ef8:	6120      	str	r0, [r4, #16]
    7efa:	f000 fd09 	bl	8910 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x910>
    7efe:	b118      	cbz	r0, 7f08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7f00:	2000      	movs	r0, #0
    7f02:	f88d 0004 	strb.w	r0, [sp, #4]
    7f06:	e001      	b.n	7f0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7f08:	f88d 6004 	strb.w	r6, [sp, #4]
    7f0c:	4629      	mov	r1, r5
    7f0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7f10:	f7f9 fbd8 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7f14:	6861      	ldr	r1, [r4, #4]
    7f16:	fbb0 f2f1 	udiv	r2, r0, r1
    7f1a:	fb01 0012 	mls	r0, r1, r2, r0
    7f1e:	b150      	cbz	r0, 7f36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7f20:	f05f 0000 	movs.w	r0, #0
    7f24:	f88d 0005 	strb.w	r0, [sp, #5]
    7f28:	4668      	mov	r0, sp
    7f2a:	f7fe fc8d 	bl	6848 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7f2e:	b120      	cbz	r0, 7f3a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7f30:	f240 21ff 	movw	r1, #767	; 0x2ff
    7f34:	e03f      	b.n	7fb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f36:	2001      	movs	r0, #1
    7f38:	e7f4      	b.n	7f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7f3a:	4922      	ldr	r1, [pc, #136]	; (7fc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7f3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f3e:	3910      	subs	r1, #16
    7f40:	38e0      	subs	r0, #224	; 0xe0
    7f42:	60c8      	str	r0, [r1, #12]
    7f44:	f7fa fb80 	bl	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7f48:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f4a:	7860      	ldrb	r0, [r4, #1]
    7f4c:	b128      	cbz	r0, 7f5a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7f4e:	f7fe fd13 	bl	6978 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7f52:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f56:	f000 b8e7 	b.w	8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>
    7f5a:	7366      	strb	r6, [r4, #13]
    7f5c:	f7fe fd06 	bl	696c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7f60:	2800      	cmp	r0, #0
    7f62:	d0f1      	beq.n	7f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f64:	f240 3112 	movw	r1, #786	; 0x312
    7f68:	e025      	b.n	7fb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f6a:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f6e:	f003 bea9 	b.w	bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7f72:	7805      	ldrb	r5, [r0, #0]
    7f74:	2201      	movs	r2, #1
    7f76:	2100      	movs	r1, #0
    7f78:	4668      	mov	r0, sp
    7f7a:	f000 fb55 	bl	8628 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x628>
    7f7e:	b140      	cbz	r0, 7f92 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7f80:	4669      	mov	r1, sp
    7f82:	4628      	mov	r0, r5
    7f84:	f006 fed5 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7f88:	2800      	cmp	r0, #0
    7f8a:	d1dd      	bne.n	7f48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f8c:	f640 217f 	movw	r1, #2687	; 0xa7f
    7f90:	e011      	b.n	7fb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f92:	70e6      	strb	r6, [r4, #3]
    7f94:	f000 f818 	bl	7fc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7f98:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f9a:	f000 fafb 	bl	8594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x594>
    7f9e:	2800      	cmp	r0, #0
    7fa0:	d1fa      	bne.n	7f98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7fa2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7fa6:	f006 bd68 	b.w	ea7a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7faa:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7fae:	f000 b80b 	b.w	7fc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7fb2:	f240 3136 	movw	r1, #822	; 0x336
    7fb6:	2035      	movs	r0, #53	; 0x35
    7fb8:	f7fb ff74 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fbc:	f240 313a 	movw	r1, #826	; 0x33a
    7fc0:	e7f9      	b.n	7fb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7fc2:	0000      	.short	0x0000
    7fc4:	200010f0 	.word	0x200010f0
    7fc8:	b510      	push	{r4, lr}
    7fca:	4c0b      	ldr	r4, [pc, #44]	; (7ff8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    7fcc:	7820      	ldrb	r0, [r4, #0]
    7fce:	b130      	cbz	r0, 7fde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7fd0:	f000 fc5a 	bl	8888 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x888>
    7fd4:	78e0      	ldrb	r0, [r4, #3]
    7fd6:	b158      	cbz	r0, 7ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7fd8:	7f20      	ldrb	r0, [r4, #28]
    7fda:	b128      	cbz	r0, 7fe8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    7fdc:	e008      	b.n	7ff0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    7fde:	f240 21b1 	movw	r1, #689	; 0x2b1
    7fe2:	2035      	movs	r0, #53	; 0x35
    7fe4:	f7fb ff5e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fe8:	f7fe fcd8 	bl	699c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7fec:	f7fe f89a 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ff4:	f000 bc72 	b.w	88dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8dc>
    7ff8:	200010f0 	.word	0x200010f0
    7ffc:	b510      	push	{r4, lr}
    7ffe:	4604      	mov	r4, r0
    8000:	2901      	cmp	r1, #1
    8002:	d102      	bne.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
    8004:	480a      	ldr	r0, [pc, #40]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    8006:	7800      	ldrb	r0, [r0, #0]
    8008:	b140      	cbz	r0, 801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
    800a:	2004      	movs	r0, #4
    800c:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8010:	f003 fca4 	bl	b95c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8018:	f7fa ba34 	b.w	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    801c:	2200      	movs	r2, #0
    801e:	2101      	movs	r1, #1
    8020:	4620      	mov	r0, r4
    8022:	f006 feb6 	bl	ed92 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    8026:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    802a:	1c40      	adds	r0, r0, #1
    802c:	8020      	strh	r0, [r4, #0]
    802e:	e7ef      	b.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    8030:	200010e0 	.word	0x200010e0
    8034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8038:	4c39      	ldr	r4, [pc, #228]	; (8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>)
    803a:	4682      	mov	sl, r0
    803c:	6926      	ldr	r6, [r4, #16]
    803e:	f003 fc51 	bl	b8e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8042:	4605      	mov	r5, r0
    8044:	69a0      	ldr	r0, [r4, #24]
    8046:	2201      	movs	r2, #1
    8048:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    804c:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8050:	3062      	adds	r0, #98	; 0x62
    8052:	2101      	movs	r1, #1
    8054:	7281      	strb	r1, [r0, #10]
    8056:	69a0      	ldr	r0, [r4, #24]
    8058:	2100      	movs	r1, #0
    805a:	302c      	adds	r0, #44	; 0x2c
    805c:	f006 fc24 	bl	e8a8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8060:	2101      	movs	r1, #1
    8062:	2000      	movs	r0, #0
    8064:	f006 fec1 	bl	edea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    8068:	69a7      	ldr	r7, [r4, #24]
    806a:	1971      	adds	r1, r6, r5
    806c:	4408      	add	r0, r1
    806e:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8072:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8076:	f002 fb67 	bl	a748 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    807a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    807e:	4288      	cmp	r0, r1
    8080:	d00a      	beq.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
    8082:	464a      	mov	r2, r9
    8084:	4641      	mov	r1, r8
    8086:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    808a:	f006 ffdc 	bl	f046 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    808e:	4540      	cmp	r0, r8
    8090:	d903      	bls.n	809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
    8092:	f240 51f6 	movw	r1, #1526	; 0x5f6
    8096:	e022      	b.n	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
    8098:	2000      	movs	r0, #0
    809a:	4922      	ldr	r1, [pc, #136]	; (8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>)
    809c:	4607      	mov	r7, r0
    809e:	6849      	ldr	r1, [r1, #4]
    80a0:	4288      	cmp	r0, r1
    80a2:	69a0      	ldr	r0, [r4, #24]
    80a4:	68c1      	ldr	r1, [r0, #12]
    80a6:	d202      	bcs.n	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
    80a8:	440f      	add	r7, r1
    80aa:	6201      	str	r1, [r0, #32]
    80ac:	e008      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    80ae:	4638      	mov	r0, r7
    80b0:	f006 f911 	bl	e2d6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    80b4:	69a1      	ldr	r1, [r4, #24]
    80b6:	68c9      	ldr	r1, [r1, #12]
    80b8:	f006 f909 	bl	e2ce <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    80bc:	69a1      	ldr	r1, [r4, #24]
    80be:	6208      	str	r0, [r1, #32]
    80c0:	69a0      	ldr	r0, [r4, #24]
    80c2:	68c1      	ldr	r1, [r0, #12]
    80c4:	2005      	movs	r0, #5
    80c6:	f006 f90c 	bl	e2e2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    80ca:	69a1      	ldr	r1, [r4, #24]
    80cc:	b280      	uxth	r0, r0
    80ce:	8388      	strh	r0, [r1, #28]
    80d0:	69a1      	ldr	r1, [r4, #24]
    80d2:	6a09      	ldr	r1, [r1, #32]
    80d4:	1a79      	subs	r1, r7, r1
    80d6:	4288      	cmp	r0, r1
    80d8:	d804      	bhi.n	80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>
    80da:	f640 21ee 	movw	r1, #2798	; 0xaee
    80de:	2035      	movs	r0, #53	; 0x35
    80e0:	f7fb fee0 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80e4:	2101      	movs	r1, #1
    80e6:	4650      	mov	r0, sl
    80e8:	f006 fe7f 	bl	edea <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    80ec:	4428      	add	r0, r5
    80ee:	19c5      	adds	r5, r0, r7
    80f0:	2101      	movs	r1, #1
    80f2:	4650      	mov	r0, sl
    80f4:	f006 f821 	bl	e13a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    80f8:	4405      	add	r5, r0
    80fa:	2001      	movs	r0, #1
    80fc:	f007 ff39 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8100:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8104:	4408      	add	r0, r1
    8106:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    810a:	fbb0 f0f1 	udiv	r0, r0, r1
    810e:	1a29      	subs	r1, r5, r0
    8110:	4630      	mov	r0, r6
    8112:	f7f9 faa5 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8116:	69a1      	ldr	r1, [r4, #24]
    8118:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8120:	200010f0 	.word	0x200010f0
    8124:	20000118 	.word	0x20000118
    8128:	b510      	push	{r4, lr}
    812a:	4c06      	ldr	r4, [pc, #24]	; (8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>)
    812c:	7b20      	ldrb	r0, [r4, #12]
    812e:	2800      	cmp	r0, #0
    8130:	d006      	beq.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    8132:	f003 fc13 	bl	b95c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8136:	f7fa f9a5 	bl	2484 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    813a:	2000      	movs	r0, #0
    813c:	7320      	strb	r0, [r4, #12]
    813e:	7360      	strb	r0, [r4, #13]
    8140:	bd10      	pop	{r4, pc}
    8142:	0000      	.short	0x0000
    8144:	200010f0 	.word	0x200010f0
    8148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    814a:	4c1c      	ldr	r4, [pc, #112]	; (81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>)
    814c:	7820      	ldrb	r0, [r4, #0]
    814e:	2805      	cmp	r0, #5
    8150:	d002      	beq.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
    8152:	200c      	movs	r0, #12
    8154:	b004      	add	sp, #16
    8156:	bd10      	pop	{r4, pc}
    8158:	69a1      	ldr	r1, [r4, #24]
    815a:	b129      	cbz	r1, 8168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168>
    815c:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8160:	b128      	cbz	r0, 816e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e>
    8162:	f240 41fa 	movw	r1, #1274	; 0x4fa
    8166:	e025      	b.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    8168:	f240 41f9 	movw	r1, #1273	; 0x4f9
    816c:	e022      	b.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    816e:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8172:	2820      	cmp	r0, #32
    8174:	d002      	beq.n	817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>
    8176:	f240 41fc 	movw	r1, #1276	; 0x4fc
    817a:	e01b      	b.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    817c:	4810      	ldr	r0, [pc, #64]	; (81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>)
    817e:	f7fa f959 	bl	2434 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8182:	69a1      	ldr	r1, [r4, #24]
    8184:	2820      	cmp	r0, #32
    8186:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    818a:	d00e      	beq.n	81aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa>
    818c:	2300      	movs	r3, #0
    818e:	2201      	movs	r2, #1
    8190:	4668      	mov	r0, sp
    8192:	f000 f8bd 	bl	8310 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x310>
    8196:	69a0      	ldr	r0, [r4, #24]
    8198:	4669      	mov	r1, sp
    819a:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    819e:	f006 fdc8 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    81a2:	b128      	cbz	r0, 81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    81a4:	2000      	movs	r0, #0
    81a6:	61a0      	str	r0, [r4, #24]
    81a8:	e7d4      	b.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
    81aa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    81ae:	e001      	b.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    81b0:	f240 5103 	movw	r1, #1283	; 0x503
    81b4:	2035      	movs	r0, #53	; 0x35
    81b6:	f7fb fe75 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81ba:	0000      	.short	0x0000
    81bc:	200010f0 	.word	0x200010f0
    81c0:	00008219 	.word	0x00008219
    81c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81c8:	4d11      	ldr	r5, [pc, #68]	; (8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>)
    81ca:	4616      	mov	r6, r2
    81cc:	460f      	mov	r7, r1
    81ce:	2400      	movs	r4, #0
    81d0:	6068      	str	r0, [r5, #4]
    81d2:	f006 fdfe 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    81d6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>
    81da:	2100      	movs	r1, #0
    81dc:	f81c 2001 	ldrb.w	r2, [ip, r1]
    81e0:	4232      	tst	r2, r6
    81e2:	d007      	beq.n	81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>
    81e4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    81e8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    81ec:	1a1b      	subs	r3, r3, r0
    81ee:	1c64      	adds	r4, r4, #1
    81f0:	b2e4      	uxtb	r4, r4
    81f2:	6093      	str	r3, [r2, #8]
    81f4:	1c49      	adds	r1, r1, #1
    81f6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    81fa:	d0ef      	beq.n	81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>
    81fc:	f016 0f0e 	tst.w	r6, #14
    8200:	d004      	beq.n	820c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20c>
    8202:	f640 11b6 	movw	r1, #2486	; 0x9b6
    8206:	2035      	movs	r0, #53	; 0x35
    8208:	f7fb fe4c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8210:	200010f0 	.word	0x200010f0
    8214:	000100e9 	.word	0x000100e9
    8218:	b570      	push	{r4, r5, r6, lr}
    821a:	460d      	mov	r5, r1
    821c:	0004      	movs	r4, r0
    821e:	d00c      	beq.n	823a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23a>
    8220:	2001      	movs	r0, #1
    8222:	f006 fd41 	bl	eca8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8226:	b2c6      	uxtb	r6, r0
    8228:	200b      	movs	r0, #11
    822a:	f006 fd3d 	bl	eca8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    822e:	b2c0      	uxtb	r0, r0
    8230:	4286      	cmp	r6, r0
    8232:	d005      	beq.n	8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
    8234:	f240 215f 	movw	r1, #607	; 0x25f
    8238:	e061      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
    823a:	f44f 7117 	mov.w	r1, #604	; 0x25c
    823e:	e05e      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
    8240:	2d09      	cmp	r5, #9
    8242:	d25f      	bcs.n	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
    8244:	e8df f005 	tbb	[pc, r5]
    8248:	3d3d3505 	.word	0x3d3d3505
    824c:	4b445e39 	.word	0x4b445e39
    8250:	0059      	.short	0x0059
    8252:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8256:	b348      	cbz	r0, 82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
    8258:	4620      	mov	r0, r4
    825a:	f000 fd69 	bl	8d30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    825e:	f006 fdb8 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8262:	f500 709c 	add.w	r0, r0, #312	; 0x138
    8266:	b285      	uxth	r5, r0
    8268:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    826c:	2128      	movs	r1, #40	; 0x28
    826e:	f006 fd4c 	bl	ed0a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    8272:	182e      	adds	r6, r5, r0
    8274:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8276:	68e0      	ldr	r0, [r4, #12]
    8278:	4288      	cmp	r0, r1
    827a:	d200      	bcs.n	827e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27e>
    827c:	4601      	mov	r1, r0
    827e:	4632      	mov	r2, r6
    8280:	4620      	mov	r0, r4
    8282:	f006 fa9a 	bl	e7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8286:	4d21      	ldr	r5, [pc, #132]	; (830c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30c>)
    8288:	4632      	mov	r2, r6
    828a:	6068      	str	r0, [r5, #4]
    828c:	4620      	mov	r0, r4
    828e:	68e1      	ldr	r1, [r4, #12]
    8290:	f006 fa93 	bl	e7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8294:	60a8      	str	r0, [r5, #8]
    8296:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    829a:	f006 faef 	bl	e87c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    829e:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    82a2:	60e8      	str	r0, [r5, #12]
    82a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82a8:	f7fa b9ce 	b.w	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    82ac:	f240 2165 	movw	r1, #613	; 0x265
    82b0:	e025      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
    82b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82b6:	f006 be1e 	b.w	eef6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    82ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82be:	f003 bd01 	b.w	bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    82c2:	4620      	mov	r0, r4
    82c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82c8:	2201      	movs	r2, #1
    82ca:	2100      	movs	r1, #0
    82cc:	f006 bd61 	b.w	ed92 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    82d0:	2001      	movs	r0, #1
    82d2:	f7f9 f899 	bl	1408 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    82d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82da:	f005 bda0 	b.w	de1e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    82de:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    82e2:	2804      	cmp	r0, #4
    82e4:	d002      	beq.n	82ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ec>
    82e6:	f240 2199 	movw	r1, #665	; 0x299
    82ea:	e008      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
    82ec:	4620      	mov	r0, r4
    82ee:	f006 fd38 	bl	ed62 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    82f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82f6:	f7fd bf15 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82fa:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    82fe:	2035      	movs	r0, #53	; 0x35
    8300:	f7fb fdd0 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8304:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    8308:	e7f9      	b.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
    830a:	0000      	.short	0x0000
    830c:	200010e0 	.word	0x200010e0
    8310:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8314:	4605      	mov	r5, r0
    8316:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    831a:	2600      	movs	r6, #0
    831c:	f8d1 b020 	ldr.w	fp, [r1, #32]
    8320:	469a      	mov	sl, r3
    8322:	460c      	mov	r4, r1
    8324:	280d      	cmp	r0, #13
    8326:	d020      	beq.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8328:	280c      	cmp	r0, #12
    832a:	d01e      	beq.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    832c:	2824      	cmp	r0, #36	; 0x24
    832e:	d01c      	beq.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8330:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8334:	2824      	cmp	r0, #36	; 0x24
    8336:	d018      	beq.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8338:	2000      	movs	r0, #0
    833a:	4680      	mov	r8, r0
    833c:	f006 fd3e 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8340:	4681      	mov	r9, r0
    8342:	f1ba 0f00 	cmp.w	sl, #0
    8346:	d003      	beq.n	8350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x350>
    8348:	2101      	movs	r1, #1
    834a:	4620      	mov	r0, r4
    834c:	f006 fd7a 	bl	ee44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8350:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8354:	2701      	movs	r7, #1
    8356:	b150      	cbz	r0, 836e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36e>
    8358:	2801      	cmp	r0, #1
    835a:	d01b      	beq.n	8394 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x394>
    835c:	2802      	cmp	r0, #2
    835e:	d011      	beq.n	8384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x384>
    8360:	2803      	cmp	r0, #3
    8362:	d017      	beq.n	8394 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x394>
    8364:	f640 1139 	movw	r1, #2361	; 0x939
    8368:	e07b      	b.n	8462 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x462>
    836a:	2001      	movs	r0, #1
    836c:	e7e5      	b.n	833a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33a>
    836e:	9802      	ldr	r0, [sp, #8]
    8370:	b128      	cbz	r0, 837e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37e>
    8372:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    8376:	4620      	mov	r0, r4
    8378:	f006 fcc9 	bl	ed0e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    837c:	e00b      	b.n	8396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x396>
    837e:	f640 01ff 	movw	r1, #2303	; 0x8ff
    8382:	e06e      	b.n	8462 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x462>
    8384:	4838      	ldr	r0, [pc, #224]	; (8468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x468>)
    8386:	6801      	ldr	r1, [r0, #0]
    8388:	2003      	movs	r0, #3
    838a:	eb01 060b 	add.w	r6, r1, fp
    838e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8392:	e000      	b.n	8396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x396>
    8394:	68e6      	ldr	r6, [r4, #12]
    8396:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    839a:	4631      	mov	r1, r6
    839c:	f7f9 f960 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83a0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    83a4:	60e8      	str	r0, [r5, #12]
    83a6:	2000      	movs	r0, #0
    83a8:	7028      	strb	r0, [r5, #0]
    83aa:	f8a5 9008 	strh.w	r9, [r5, #8]
    83ae:	4620      	mov	r0, r4
    83b0:	f000 fc0c 	bl	8bcc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    83b4:	f1a8 0101 	sub.w	r1, r8, #1
    83b8:	4208      	tst	r0, r1
    83ba:	d101      	bne.n	83c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c0>
    83bc:	72af      	strb	r7, [r5, #10]
    83be:	e005      	b.n	83cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cc>
    83c0:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    83c4:	2801      	cmp	r0, #1
    83c6:	d017      	beq.n	83f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f8>
    83c8:	2003      	movs	r0, #3
    83ca:	72a8      	strb	r0, [r5, #10]
    83cc:	46b9      	mov	r9, r7
    83ce:	72ef      	strb	r7, [r5, #11]
    83d0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    83d4:	f006 fa52 	bl	e87c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    83d8:	6068      	str	r0, [r5, #4]
    83da:	f1ba 0f00 	cmp.w	sl, #0
    83de:	d03c      	beq.n	845a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45a>
    83e0:	4631      	mov	r1, r6
    83e2:	4628      	mov	r0, r5
    83e4:	f005 ff08 	bl	e1f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    83e8:	b287      	uxth	r7, r0
    83ea:	4620      	mov	r0, r4
    83ec:	f000 fbee 	bl	8bcc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    83f0:	f1b8 0f00 	cmp.w	r8, #0
    83f4:	d002      	beq.n	83fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3fc>
    83f6:	e014      	b.n	8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
    83f8:	2002      	movs	r0, #2
    83fa:	e7e6      	b.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    83fc:	42b8      	cmp	r0, r7
    83fe:	d810      	bhi.n	8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
    8400:	4607      	mov	r7, r0
    8402:	f885 900a 	strb.w	r9, [r5, #10]
    8406:	fb06 f107 	mul.w	r1, r6, r7
    840a:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    840e:	f7f9 f927 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8412:	60e8      	str	r0, [r5, #12]
    8414:	b31e      	cbz	r6, 845e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45e>
    8416:	4631      	mov	r1, r6
    8418:	4628      	mov	r0, r5
    841a:	f005 feed 	bl	e1f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    841e:	4438      	add	r0, r7
    8420:	b287      	uxth	r7, r0
    8422:	4639      	mov	r1, r7
    8424:	4620      	mov	r0, r4
    8426:	f006 fd0d 	bl	ee44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    842a:	68e8      	ldr	r0, [r5, #12]
    842c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8430:	6f20      	ldr	r0, [r4, #112]	; 0x70
    8432:	2800      	cmp	r0, #0
    8434:	d011      	beq.n	845a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45a>
    8436:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    843a:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    843e:	1a40      	subs	r0, r0, r1
    8440:	b202      	sxth	r2, r0
    8442:	2a00      	cmp	r2, #0
    8444:	dd09      	ble.n	845a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45a>
    8446:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    844a:	4402      	add	r2, r0
    844c:	1e52      	subs	r2, r2, #1
    844e:	fb92 f2f0 	sdiv	r2, r2, r0
    8452:	b292      	uxth	r2, r2
    8454:	fb02 1000 	mla	r0, r2, r0, r1
    8458:	86e0      	strh	r0, [r4, #54]	; 0x36
    845a:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    845e:	f640 1174 	movw	r1, #2420	; 0x974
    8462:	2035      	movs	r0, #53	; 0x35
    8464:	f7fb fd1e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8468:	20000118 	.word	0x20000118
    846c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8470:	460d      	mov	r5, r1
    8472:	4607      	mov	r7, r0
    8474:	f000 fa58 	bl	8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>
    8478:	4c1d      	ldr	r4, [pc, #116]	; (84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>)
    847a:	6861      	ldr	r1, [r4, #4]
    847c:	f7f9 f8f0 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8480:	4606      	mov	r6, r0
    8482:	4601      	mov	r1, r0
    8484:	4638      	mov	r0, r7
    8486:	f7f9 f91d 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    848a:	4607      	mov	r7, r0
    848c:	f006 fca7 	bl	edde <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8490:	4287      	cmp	r7, r0
    8492:	da10      	bge.n	84b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b6>
    8494:	6960      	ldr	r0, [r4, #20]
    8496:	f000 fa47 	bl	8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>
    849a:	4631      	mov	r1, r6
    849c:	f7f9 f912 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    84a0:	6861      	ldr	r1, [r4, #4]
    84a2:	fbb0 f0f1 	udiv	r0, r0, r1
    84a6:	6028      	str	r0, [r5, #0]
    84a8:	6861      	ldr	r1, [r4, #4]
    84aa:	b004      	add	sp, #16
    84ac:	4630      	mov	r0, r6
    84ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    84b2:	f7f9 b8d5 	b.w	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84b6:	2000      	movs	r0, #0
    84b8:	f88d 0000 	strb.w	r0, [sp]
    84bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84be:	9001      	str	r0, [sp, #4]
    84c0:	f006 fc7c 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    84c4:	f8ad 0008 	strh.w	r0, [sp, #8]
    84c8:	2001      	movs	r0, #1
    84ca:	f88d 000b 	strb.w	r0, [sp, #11]
    84ce:	6960      	ldr	r0, [r4, #20]
    84d0:	f000 fa2a 	bl	8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>
    84d4:	9003      	str	r0, [sp, #12]
    84d6:	f000 f9c1 	bl	885c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85c>
    84da:	f88d 000a 	strb.w	r0, [sp, #10]
    84de:	4668      	mov	r0, sp
    84e0:	6861      	ldr	r1, [r4, #4]
    84e2:	f005 fe89 	bl	e1f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    84e6:	6028      	str	r0, [r5, #0]
    84e8:	9803      	ldr	r0, [sp, #12]
    84ea:	b004      	add	sp, #16
    84ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84f0:	200010f0 	.word	0x200010f0
    84f4:	b510      	push	{r4, lr}
    84f6:	2400      	movs	r4, #0
    84f8:	f006 fc6b 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    84fc:	4a06      	ldr	r2, [pc, #24]	; (8518 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x518>)
    84fe:	2100      	movs	r1, #0
    8500:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    8504:	4404      	add	r4, r0
    8506:	689b      	ldr	r3, [r3, #8]
    8508:	1c49      	adds	r1, r1, #1
    850a:	441c      	add	r4, r3
    850c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8510:	d0f6      	beq.n	8500 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x500>
    8512:	4620      	mov	r0, r4
    8514:	bd10      	pop	{r4, pc}
    8516:	0000      	.short	0x0000
    8518:	200010f0 	.word	0x200010f0
    851c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    851e:	4c1b      	ldr	r4, [pc, #108]	; (858c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58c>)
    8520:	4606      	mov	r6, r0
    8522:	460d      	mov	r5, r1
    8524:	78a0      	ldrb	r0, [r4, #2]
    8526:	b360      	cbz	r0, 8582 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582>
    8528:	4919      	ldr	r1, [pc, #100]	; (8590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x590>)
    852a:	6a20      	ldr	r0, [r4, #32]
    852c:	4288      	cmp	r0, r1
    852e:	d828      	bhi.n	8582 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582>
    8530:	2000      	movs	r0, #0
    8532:	f88d 0000 	strb.w	r0, [sp]
    8536:	9501      	str	r5, [sp, #4]
    8538:	f006 fc40 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    853c:	f8ad 0008 	strh.w	r0, [sp, #8]
    8540:	2001      	movs	r0, #1
    8542:	f88d 000b 	strb.w	r0, [sp, #11]
    8546:	f006 fc4a 	bl	edde <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    854a:	4601      	mov	r1, r0
    854c:	4630      	mov	r0, r6
    854e:	f7f9 f887 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8552:	9003      	str	r0, [sp, #12]
    8554:	2003      	movs	r0, #3
    8556:	f88d 000a 	strb.w	r0, [sp, #10]
    855a:	4668      	mov	r0, sp
    855c:	f7f9 fbbe 	bl	1cdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8560:	4606      	mov	r6, r0
    8562:	4629      	mov	r1, r5
    8564:	9803      	ldr	r0, [sp, #12]
    8566:	f7f9 f87b 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    856a:	4605      	mov	r5, r0
    856c:	6a21      	ldr	r1, [r4, #32]
    856e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8570:	f7f9 f876 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8574:	4601      	mov	r1, r0
    8576:	b13e      	cbz	r6, 8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8578:	4628      	mov	r0, r5
    857a:	f7f9 f8a3 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    857e:	2800      	cmp	r0, #0
    8580:	db02      	blt.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8582:	2001      	movs	r0, #1
    8584:	b004      	add	sp, #16
    8586:	bd70      	pop	{r4, r5, r6, pc}
    8588:	2000      	movs	r0, #0
    858a:	e7fb      	b.n	8584 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x584>
    858c:	200010f0 	.word	0x200010f0
    8590:	07a12000 	.word	0x07a12000
    8594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8598:	f004 f92e 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    859c:	4c21      	ldr	r4, [pc, #132]	; (8624 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x624>)
    859e:	4607      	mov	r7, r0
    85a0:	6920      	ldr	r0, [r4, #16]
    85a2:	f000 f95b 	bl	885c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85c>
    85a6:	4606      	mov	r6, r0
    85a8:	f7f9 f800 	bl	15ac <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    85ac:	4605      	mov	r5, r0
    85ae:	2865      	cmp	r0, #101	; 0x65
    85b0:	d326      	bcc.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
    85b2:	1c68      	adds	r0, r5, #1
    85b4:	d027      	beq.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
    85b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    85ba:	1948      	adds	r0, r1, r5
    85bc:	4282      	cmp	r2, r0
    85be:	d800      	bhi.n	85c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c2>
    85c0:	1a55      	subs	r5, r2, r1
    85c2:	f06f 0139 	mvn.w	r1, #57	; 0x39
    85c6:	4638      	mov	r0, r7
    85c8:	f7f9 f84a 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85cc:	4629      	mov	r1, r5
    85ce:	f000 f9bd 	bl	894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>
    85d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85d4:	4408      	add	r0, r1
    85d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85d8:	1a45      	subs	r5, r0, r1
    85da:	f241 3088 	movw	r0, #5000	; 0x1388
    85de:	4285      	cmp	r5, r0
    85e0:	d900      	bls.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
    85e2:	4605      	mov	r5, r0
    85e4:	f004 f908 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85e8:	4601      	mov	r1, r0
    85ea:	4638      	mov	r0, r7
    85ec:	f7f9 f86a 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85f0:	309d      	adds	r0, #157	; 0x9d
    85f2:	4285      	cmp	r5, r0
    85f4:	d304      	bcc.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
    85f6:	4631      	mov	r1, r6
    85f8:	4628      	mov	r0, r5
    85fa:	f7f8 ff15 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    85fe:	b120      	cbz	r0, 860a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60a>
    8600:	2000      	movs	r0, #0
    8602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8606:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8608:	e7e5      	b.n	85d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d6>
    860a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    860c:	4905      	ldr	r1, [pc, #20]	; (8624 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x624>)
    860e:	4428      	add	r0, r5
    8610:	3910      	subs	r1, #16
    8612:	6260      	str	r0, [r4, #36]	; 0x24
    8614:	68c8      	ldr	r0, [r1, #12]
    8616:	4428      	add	r0, r5
    8618:	60c8      	str	r0, [r1, #12]
    861a:	f7fa f815 	bl	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    861e:	2001      	movs	r0, #1
    8620:	e7ef      	b.n	8602 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x602>
    8622:	0000      	.short	0x0000
    8624:	200010f0 	.word	0x200010f0
    8628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    862c:	b08c      	sub	sp, #48	; 0x30
    862e:	4616      	mov	r6, r2
    8630:	4607      	mov	r7, r0
    8632:	f004 f8e1 	bl	c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8636:	4c87      	ldr	r4, [pc, #540]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    8638:	9002      	str	r0, [sp, #8]
    863a:	2500      	movs	r5, #0
    863c:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8640:	f006 fbc7 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8644:	68a1      	ldr	r1, [r4, #8]
    8646:	4408      	add	r0, r1
    8648:	6861      	ldr	r1, [r4, #4]
    864a:	4288      	cmp	r0, r1
    864c:	d101      	bne.n	8652 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x652>
    864e:	2001      	movs	r0, #1
    8650:	e000      	b.n	8654 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x654>
    8652:	2000      	movs	r0, #0
    8654:	4683      	mov	fp, r0
    8656:	980d      	ldr	r0, [sp, #52]	; 0x34
    8658:	ea06 090b 	and.w	r9, r6, fp
    865c:	2800      	cmp	r0, #0
    865e:	d065      	beq.n	872c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72c>
    8660:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8664:	9802      	ldr	r0, [sp, #8]
    8666:	f7f8 fffb 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    866a:	9000      	str	r0, [sp, #0]
    866c:	f002 f872 	bl	a754 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8670:	4680      	mov	r8, r0
    8672:	4878      	ldr	r0, [pc, #480]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    8674:	7800      	ldrb	r0, [r0, #0]
    8676:	4e77      	ldr	r6, [pc, #476]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    8678:	362c      	adds	r6, #44	; 0x2c
    867a:	2805      	cmp	r0, #5
    867c:	d12e      	bne.n	86dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6dc>
    867e:	4875      	ldr	r0, [pc, #468]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    8680:	6980      	ldr	r0, [r0, #24]
    8682:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    8686:	f002 f845 	bl	a714 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    868a:	4604      	mov	r4, r0
    868c:	4540      	cmp	r0, r8
    868e:	d009      	beq.n	86a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a4>
    8690:	4870      	ldr	r0, [pc, #448]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    8692:	4621      	mov	r1, r4
    8694:	6980      	ldr	r0, [r0, #24]
    8696:	f500 7084 	add.w	r0, r0, #264	; 0x108
    869a:	f001 ffff 	bl	a69c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    869e:	2000      	movs	r0, #0
    86a0:	6170      	str	r0, [r6, #20]
    86a2:	e00c      	b.n	86be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6be>
    86a4:	496b      	ldr	r1, [pc, #428]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    86a6:	6988      	ldr	r0, [r1, #24]
    86a8:	f500 7084 	add.w	r0, r0, #264	; 0x108
    86ac:	6170      	str	r0, [r6, #20]
    86ae:	698a      	ldr	r2, [r1, #24]
    86b0:	6b08      	ldr	r0, [r1, #48]	; 0x30
    86b2:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    86b6:	4290      	cmp	r0, r2
    86b8:	d200      	bcs.n	86bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6bc>
    86ba:	4610      	mov	r0, r2
    86bc:	6308      	str	r0, [r1, #48]	; 0x30
    86be:	4865      	ldr	r0, [pc, #404]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    86c0:	6980      	ldr	r0, [r0, #24]
    86c2:	b130      	cbz	r0, 86d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d2>
    86c4:	b144      	cbz	r4, 86d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d8>
    86c6:	e9d4 1200 	ldrd	r1, r2, [r4]
    86ca:	4411      	add	r1, r2
    86cc:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    86d0:	e004      	b.n	86dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6dc>
    86d2:	f240 51c5 	movw	r1, #1477	; 0x5c5
    86d6:	e017      	b.n	8708 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x708>
    86d8:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    86dc:	4641      	mov	r1, r8
    86de:	4630      	mov	r0, r6
    86e0:	f001 ffdc 	bl	a69c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    86e4:	ea5f 0008 	movs.w	r0, r8
    86e8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
    86ec:	9a00      	ldr	r2, [sp, #0]
    86ee:	f8d8 4004 	ldr.w	r4, [r8, #4]
    86f2:	d00c      	beq.n	870e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70e>
    86f4:	e9d0 1000 	ldrd	r1, r0, [r0]
    86f8:	4408      	add	r0, r1
    86fa:	4621      	mov	r1, r4
    86fc:	f006 fca3 	bl	f046 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8700:	42a0      	cmp	r0, r4
    8702:	d904      	bls.n	870e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70e>
    8704:	f240 51e3 	movw	r1, #1507	; 0x5e3
    8708:	2035      	movs	r0, #53	; 0x35
    870a:	f7fb fbcb 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    870e:	4601      	mov	r1, r0
    8710:	9800      	ldr	r0, [sp, #0]
    8712:	f7f8 ffa5 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8716:	4606      	mov	r6, r0
    8718:	f8d8 0004 	ldr.w	r0, [r8, #4]
    871c:	4644      	mov	r4, r8
    871e:	4241      	negs	r1, r0
    8720:	4630      	mov	r0, r6
    8722:	f7f8 ff9d 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8726:	62e0      	str	r0, [r4, #44]	; 0x2c
    8728:	2001      	movs	r0, #1
    872a:	e042      	b.n	87b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b2>
    872c:	f1b9 0f00 	cmp.w	r9, #0
    8730:	d018      	beq.n	8764 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x764>
    8732:	2001      	movs	r0, #1
    8734:	f006 facf 	bl	ecd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8738:	4604      	mov	r4, r0
    873a:	2001      	movs	r0, #1
    873c:	f007 fc19 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8740:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8744:	4401      	add	r1, r0
    8746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    874a:	fbb1 f0f0 	udiv	r0, r1, r0
    874e:	1821      	adds	r1, r4, r0
    8750:	31f1      	adds	r1, #241	; 0xf1
    8752:	9802      	ldr	r0, [sp, #8]
    8754:	f7ff fee2 	bl	851c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x51c>
    8758:	b908      	cbnz	r0, 875e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75e>
    875a:	f04f 0a00 	mov.w	sl, #0
    875e:	9e02      	ldr	r6, [sp, #8]
    8760:	9508      	str	r5, [sp, #32]
    8762:	e027      	b.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    8764:	b12e      	cbz	r6, 8772 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x772>
    8766:	a908      	add	r1, sp, #32
    8768:	9802      	ldr	r0, [sp, #8]
    876a:	f7ff fe7f 	bl	846c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46c>
    876e:	4606      	mov	r6, r0
    8770:	e020      	b.n	87b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7b4>
    8772:	9802      	ldr	r0, [sp, #8]
    8774:	f000 f8d8 	bl	8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>
    8778:	4c36      	ldr	r4, [pc, #216]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    877a:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    877e:	f7f8 ff6f 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8782:	4606      	mov	r6, r0
    8784:	6920      	ldr	r0, [r4, #16]
    8786:	f000 f8c3 	bl	8910 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x910>
    878a:	6861      	ldr	r1, [r4, #4]
    878c:	4348      	muls	r0, r1
    878e:	78a1      	ldrb	r1, [r4, #2]
    8790:	b131      	cbz	r1, 87a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a0>
    8792:	6a21      	ldr	r1, [r4, #32]
    8794:	4281      	cmp	r1, r0
    8796:	d302      	bcc.n	879e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79e>
    8798:	1a09      	subs	r1, r1, r0
    879a:	6221      	str	r1, [r4, #32]
    879c:	e000      	b.n	87a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a0>
    879e:	6225      	str	r5, [r4, #32]
    87a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    87a2:	4601      	mov	r1, r0
    87a4:	4610      	mov	r0, r2
    87a6:	f7f8 ff5b 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87aa:	62e0      	str	r0, [r4, #44]	; 0x2c
    87ac:	4630      	mov	r0, r6
    87ae:	f000 f8af 	bl	8910 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x910>
    87b2:	9008      	str	r0, [sp, #32]
    87b4:	2001      	movs	r0, #1
    87b6:	f006 fa8e 	bl	ecd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    87ba:	4604      	mov	r4, r0
    87bc:	2001      	movs	r0, #1
    87be:	f007 fbd8 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87c2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    87c6:	4401      	add	r1, r0
    87c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87cc:	fbb1 f0f0 	udiv	r0, r1, r0
    87d0:	4404      	add	r4, r0
    87d2:	4651      	mov	r1, sl
    87d4:	4630      	mov	r0, r6
    87d6:	34f1      	adds	r4, #241	; 0xf1
    87d8:	f000 f8b8 	bl	894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>
    87dc:	491d      	ldr	r1, [pc, #116]	; (8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>)
    87de:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    87e2:	6892      	ldr	r2, [r2, #8]
    87e4:	4282      	cmp	r2, r0
    87e6:	d800      	bhi.n	87ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ea>
    87e8:	4610      	mov	r0, r2
    87ea:	6288      	str	r0, [r1, #40]	; 0x28
    87ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87ee:	b102      	cbz	r2, 87f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f2>
    87f0:	610e      	str	r6, [r1, #16]
    87f2:	4688      	mov	r8, r1
    87f4:	614e      	str	r6, [r1, #20]
    87f6:	f1bb 0f00 	cmp.w	fp, #0
    87fa:	d002      	beq.n	8802 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x802>
    87fc:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    8800:	e001      	b.n	8806 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x806>
    8802:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    8806:	f04f 0a01 	mov.w	sl, #1
    880a:	f887 a00b 	strb.w	sl, [r7, #11]
    880e:	f006 fad5 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8812:	8138      	strh	r0, [r7, #8]
    8814:	4630      	mov	r0, r6
    8816:	f000 f821 	bl	885c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85c>
    881a:	72b8      	strb	r0, [r7, #10]
    881c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    8820:	6078      	str	r0, [r7, #4]
    8822:	f1b9 0f00 	cmp.w	r9, #0
    8826:	d008      	beq.n	883a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83a>
    8828:	f887 a000 	strb.w	sl, [r7]
    882c:	490a      	ldr	r1, [pc, #40]	; (8858 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x858>)
    882e:	9802      	ldr	r0, [sp, #8]
    8830:	f000 f88c 	bl	894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>
    8834:	1b00      	subs	r0, r0, r4
    8836:	60f8      	str	r0, [r7, #12]
    8838:	e001      	b.n	883e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83e>
    883a:	703d      	strb	r5, [r7, #0]
    883c:	60fe      	str	r6, [r7, #12]
    883e:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    8842:	42a0      	cmp	r0, r4
    8844:	d303      	bcc.n	884e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84e>
    8846:	2001      	movs	r0, #1
    8848:	b00f      	add	sp, #60	; 0x3c
    884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    884e:	2000      	movs	r0, #0
    8850:	e7fa      	b.n	8848 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x848>
    8852:	0000      	.short	0x0000
    8854:	200010f0 	.word	0x200010f0
    8858:	07a12000 	.word	0x07a12000
    885c:	4a09      	ldr	r2, [pc, #36]	; (8884 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x884>)
    885e:	b510      	push	{r4, lr}
    8860:	7811      	ldrb	r1, [r2, #0]
    8862:	2904      	cmp	r1, #4
    8864:	d10c      	bne.n	8880 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x880>
    8866:	6851      	ldr	r1, [r2, #4]
    8868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    886a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    886e:	004c      	lsls	r4, r1, #1
    8870:	4601      	mov	r1, r0
    8872:	4610      	mov	r0, r2
    8874:	f7f8 ff26 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8878:	42a0      	cmp	r0, r4
    887a:	d201      	bcs.n	8880 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x880>
    887c:	2003      	movs	r0, #3
    887e:	bd10      	pop	{r4, pc}
    8880:	2002      	movs	r0, #2
    8882:	bd10      	pop	{r4, pc}
    8884:	200010f0 	.word	0x200010f0
    8888:	b570      	push	{r4, r5, r6, lr}
    888a:	4d13      	ldr	r5, [pc, #76]	; (88d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d8>)
    888c:	7f28      	ldrb	r0, [r5, #28]
    888e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    8892:	2800      	cmp	r0, #0
    8894:	7828      	ldrb	r0, [r5, #0]
    8896:	d00f      	beq.n	88b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b8>
    8898:	2805      	cmp	r0, #5
    889a:	d004      	beq.n	88a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a6>
    889c:	f240 318f 	movw	r1, #911	; 0x38f
    88a0:	2035      	movs	r0, #53	; 0x35
    88a2:	f7fb faff 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88a6:	4620      	mov	r0, r4
    88a8:	f006 fa0d 	bl	ecc6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    88ac:	b178      	cbz	r0, 88ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ce>
    88ae:	4620      	mov	r0, r4
    88b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88b4:	f001 bed0 	b.w	a658 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    88b8:	2805      	cmp	r0, #5
    88ba:	d108      	bne.n	88ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ce>
    88bc:	4620      	mov	r0, r4
    88be:	f006 fa02 	bl	ecc6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    88c2:	b920      	cbnz	r0, 88ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ce>
    88c4:	69a8      	ldr	r0, [r5, #24]
    88c6:	f500 7084 	add.w	r0, r0, #264	; 0x108
    88ca:	f001 ff07 	bl	a6dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88ce:	4620      	mov	r0, r4
    88d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88d4:	f001 bf02 	b.w	a6dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88d8:	200010f0 	.word	0x200010f0
    88dc:	b510      	push	{r4, lr}
    88de:	f7fd ff27 	bl	6730 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    88e2:	490a      	ldr	r1, [pc, #40]	; (890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>)
    88e4:	2000      	movs	r0, #0
    88e6:	70c8      	strb	r0, [r1, #3]
    88e8:	7708      	strb	r0, [r1, #28]
    88ea:	6188      	str	r0, [r1, #24]
    88ec:	7008      	strb	r0, [r1, #0]
    88ee:	f7fd fe71 	bl	65d4 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    88f2:	4604      	mov	r4, r0
    88f4:	7800      	ldrb	r0, [r0, #0]
    88f6:	f7f9 fc6f 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    88fa:	b110      	cbz	r0, 8902 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x902>
    88fc:	2020      	movs	r0, #32
    88fe:	7020      	strb	r0, [r4, #0]
    8900:	bd10      	pop	{r4, pc}
    8902:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    8906:	2035      	movs	r0, #53	; 0x35
    8908:	f7fb facc 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    890c:	200010f0 	.word	0x200010f0
    8910:	b510      	push	{r4, lr}
    8912:	4c04      	ldr	r4, [pc, #16]	; (8924 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x924>)
    8914:	4601      	mov	r1, r0
    8916:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8918:	f7f8 fed4 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    891c:	6861      	ldr	r1, [r4, #4]
    891e:	fbb0 f0f1 	udiv	r0, r0, r1
    8922:	bd10      	pop	{r4, pc}
    8924:	200010f0 	.word	0x200010f0
    8928:	b510      	push	{r4, lr}
    892a:	4c07      	ldr	r4, [pc, #28]	; (8948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x948>)
    892c:	4601      	mov	r1, r0
    892e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8930:	f7f8 fec8 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8934:	6861      	ldr	r1, [r4, #4]
    8936:	fbb0 f2f1 	udiv	r2, r0, r1
    893a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    893c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8940:	4351      	muls	r1, r2
    8942:	f7f8 be8d 	b.w	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8946:	0000      	.short	0x0000
    8948:	200010f0 	.word	0x200010f0
    894c:	b570      	push	{r4, r5, r6, lr}
    894e:	4605      	mov	r5, r0
    8950:	480d      	ldr	r0, [pc, #52]	; (8988 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x988>)
    8952:	460c      	mov	r4, r1
    8954:	7881      	ldrb	r1, [r0, #2]
    8956:	b1a9      	cbz	r1, 8984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x984>
    8958:	4a0c      	ldr	r2, [pc, #48]	; (898c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98c>)
    895a:	6a01      	ldr	r1, [r0, #32]
    895c:	4291      	cmp	r1, r2
    895e:	d211      	bcs.n	8984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x984>
    8960:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8962:	f7f8 fe7d 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8966:	4606      	mov	r6, r0
    8968:	4621      	mov	r1, r4
    896a:	4628      	mov	r0, r5
    896c:	f7f8 fe78 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8970:	4601      	mov	r1, r0
    8972:	4630      	mov	r0, r6
    8974:	f7f8 fea6 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8978:	2800      	cmp	r0, #0
    897a:	dd03      	ble.n	8984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x984>
    897c:	1a20      	subs	r0, r4, r0
    897e:	d500      	bpl.n	8982 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x982>
    8980:	2000      	movs	r0, #0
    8982:	bd70      	pop	{r4, r5, r6, pc}
    8984:	4620      	mov	r0, r4
    8986:	bd70      	pop	{r4, r5, r6, pc}
    8988:	200010f0 	.word	0x200010f0
    898c:	07a12000 	.word	0x07a12000

00008990 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    8990:	4806      	ldr	r0, [pc, #24]	; (89ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    8992:	4905      	ldr	r1, [pc, #20]	; (89a8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    8994:	6501      	str	r1, [r0, #80]	; 0x50
    8996:	4906      	ldr	r1, [pc, #24]	; (89b0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    8998:	6541      	str	r1, [r0, #84]	; 0x54
    899a:	4807      	ldr	r0, [pc, #28]	; (89b8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    899c:	4905      	ldr	r1, [pc, #20]	; (89b4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    899e:	6501      	str	r1, [r0, #80]	; 0x50
    89a0:	4906      	ldr	r1, [pc, #24]	; (89bc <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    89a2:	6541      	str	r1, [r0, #84]	; 0x54
    89a4:	4770      	bx	lr
    89a6:	0000      	.short	0x0000
    89a8:	00009aed 	.word	0x00009aed
    89ac:	20000130 	.word	0x20000130
    89b0:	00009bb9 	.word	0x00009bb9
    89b4:	0000a1e9 	.word	0x0000a1e9
    89b8:	20000194 	.word	0x20000194
    89bc:	0000a219 	.word	0x0000a219

000089c0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    89c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89c2:	460d      	mov	r5, r1
    89c4:	4607      	mov	r7, r0
    89c6:	2100      	movs	r1, #0
    89c8:	f005 f949 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    89cc:	1e04      	subs	r4, r0, #0
    89ce:	d051      	beq.n	8a74 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    89d0:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    89d4:	2800      	cmp	r0, #0
    89d6:	d04d      	beq.n	8a74 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    89d8:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    89dc:	f88d 0000 	strb.w	r0, [sp]
    89e0:	9800      	ldr	r0, [sp, #0]
    89e2:	9000      	str	r0, [sp, #0]
    89e4:	f89d 0000 	ldrb.w	r0, [sp]
    89e8:	2600      	movs	r6, #0
    89ea:	b158      	cbz	r0, 8a04 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    89ec:	706e      	strb	r6, [r5, #1]
    89ee:	2009      	movs	r0, #9
    89f0:	7028      	strb	r0, [r5, #0]
    89f2:	220a      	movs	r2, #10
    89f4:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    89f8:	1d28      	adds	r0, r5, #4
    89fa:	f004 f872 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    89fe:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    8a02:	e0e1      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a04:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8a08:	280e      	cmp	r0, #14
    8a0a:	d01d      	beq.n	8a48 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    8a0c:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8a10:	280d      	cmp	r0, #13
    8a12:	d027      	beq.n	8a64 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    8a14:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8a18:	f88d 0000 	strb.w	r0, [sp]
    8a1c:	9800      	ldr	r0, [sp, #0]
    8a1e:	9000      	str	r0, [sp, #0]
    8a20:	f89d 0000 	ldrb.w	r0, [sp]
    8a24:	b3b0      	cbz	r0, 8a94 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    8a26:	706e      	strb	r6, [r5, #1]
    8a28:	2008      	movs	r0, #8
    8a2a:	7028      	strb	r0, [r5, #0]
    8a2c:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8a30:	6068      	str	r0, [r5, #4]
    8a32:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8a36:	60a8      	str	r0, [r5, #8]
    8a38:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    8a3c:	60e8      	str	r0, [r5, #12]
    8a3e:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    8a42:	f804 6c02 	strb.w	r6, [r4, #-2]
    8a46:	e0bf      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a48:	8820      	ldrh	r0, [r4, #0]
    8a4a:	f7fb fe29 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8a4e:	4607      	mov	r7, r0
    8a50:	f004 ffd5 	bl	d9fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8a54:	b968      	cbnz	r0, 8a72 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    8a56:	706e      	strb	r6, [r5, #1]
    8a58:	200e      	movs	r0, #14
    8a5a:	7028      	strb	r0, [r5, #0]
    8a5c:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8a60:	6068      	str	r0, [r5, #4]
    8a62:	e011      	b.n	8a88 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    8a64:	8820      	ldrh	r0, [r4, #0]
    8a66:	f7fb fe1b 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8a6a:	4607      	mov	r7, r0
    8a6c:	f004 ffc7 	bl	d9fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8a70:	b108      	cbz	r0, 8a76 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    8a72:	2000      	movs	r0, #0
    8a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a76:	706e      	strb	r6, [r5, #1]
    8a78:	200d      	movs	r0, #13
    8a7a:	7028      	strb	r0, [r5, #0]
    8a7c:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8a80:	6068      	str	r0, [r5, #4]
    8a82:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    8a86:	8128      	strh	r0, [r5, #8]
    8a88:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8a8c:	4638      	mov	r0, r7
    8a8e:	f004 ffd1 	bl	da34 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8a92:	e099      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a94:	e7ff      	b.n	8a96 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    8a96:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8a9a:	f88d 0000 	strb.w	r0, [sp]
    8a9e:	9800      	ldr	r0, [sp, #0]
    8aa0:	9000      	str	r0, [sp, #0]
    8aa2:	f89d 0000 	ldrb.w	r0, [sp]
    8aa6:	b130      	cbz	r0, 8ab6 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8aa8:	706e      	strb	r6, [r5, #1]
    8aaa:	2010      	movs	r0, #16
    8aac:	7028      	strb	r0, [r5, #0]
    8aae:	80af      	strh	r7, [r5, #4]
    8ab0:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    8ab4:	e088      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8ab6:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8aba:	f88d 0000 	strb.w	r0, [sp]
    8abe:	9800      	ldr	r0, [sp, #0]
    8ac0:	9000      	str	r0, [sp, #0]
    8ac2:	f89d 0000 	ldrb.w	r0, [sp]
    8ac6:	b1c8      	cbz	r0, 8afc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    8ac8:	706e      	strb	r6, [r5, #1]
    8aca:	2015      	movs	r0, #21
    8acc:	7028      	strb	r0, [r5, #0]
    8ace:	e00a      	b.n	8ae6 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    8ad0:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    8ad4:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    8ad8:	6068      	str	r0, [r5, #4]
    8ada:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    8ade:	60a8      	str	r0, [r5, #8]
    8ae0:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    8ae4:	60e8      	str	r0, [r5, #12]
    8ae6:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8aea:	f88d 0000 	strb.w	r0, [sp]
    8aee:	9800      	ldr	r0, [sp, #0]
    8af0:	9000      	str	r0, [sp, #0]
    8af2:	f89d 0000 	ldrb.w	r0, [sp]
    8af6:	2800      	cmp	r0, #0
    8af8:	d1ea      	bne.n	8ad0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    8afa:	e065      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8afc:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    8b00:	f88d 0000 	strb.w	r0, [sp]
    8b04:	9800      	ldr	r0, [sp, #0]
    8b06:	9000      	str	r0, [sp, #0]
    8b08:	f89d 0000 	ldrb.w	r0, [sp]
    8b0c:	b158      	cbz	r0, 8b26 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    8b0e:	706e      	strb	r6, [r5, #1]
    8b10:	201c      	movs	r0, #28
    8b12:	7028      	strb	r0, [r5, #0]
    8b14:	220a      	movs	r2, #10
    8b16:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    8b1a:	1d28      	adds	r0, r5, #4
    8b1c:	f003 ffe1 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8b20:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    8b24:	e050      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b26:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    8b2a:	f88d 0000 	strb.w	r0, [sp]
    8b2e:	9800      	ldr	r0, [sp, #0]
    8b30:	9000      	str	r0, [sp, #0]
    8b32:	f89d 0000 	ldrb.w	r0, [sp]
    8b36:	b140      	cbz	r0, 8b4a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    8b38:	706e      	strb	r6, [r5, #1]
    8b3a:	201d      	movs	r0, #29
    8b3c:	7028      	strb	r0, [r5, #0]
    8b3e:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8b42:	6068      	str	r0, [r5, #4]
    8b44:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    8b48:	e03e      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b4a:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8b4e:	f88d 0000 	strb.w	r0, [sp]
    8b52:	9800      	ldr	r0, [sp, #0]
    8b54:	9000      	str	r0, [sp, #0]
    8b56:	f89d 0000 	ldrb.w	r0, [sp]
    8b5a:	b198      	cbz	r0, 8b84 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8b5c:	706e      	strb	r6, [r5, #1]
    8b5e:	201a      	movs	r0, #26
    8b60:	7028      	strb	r0, [r5, #0]
    8b62:	e004      	b.n	8b6e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    8b64:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    8b68:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8b6c:	6068      	str	r0, [r5, #4]
    8b6e:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8b72:	f88d 0000 	strb.w	r0, [sp]
    8b76:	9800      	ldr	r0, [sp, #0]
    8b78:	9000      	str	r0, [sp, #0]
    8b7a:	f89d 0000 	ldrb.w	r0, [sp]
    8b7e:	2800      	cmp	r0, #0
    8b80:	d1f0      	bne.n	8b64 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    8b82:	e021      	b.n	8bc8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b84:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8b88:	f88d 0000 	strb.w	r0, [sp]
    8b8c:	9800      	ldr	r0, [sp, #0]
    8b8e:	9000      	str	r0, [sp, #0]
    8b90:	f89d 0000 	ldrb.w	r0, [sp]
    8b94:	2800      	cmp	r0, #0
    8b96:	f43f af6d 	beq.w	8a74 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8b9a:	706e      	strb	r6, [r5, #1]
    8b9c:	2016      	movs	r0, #22
    8b9e:	7028      	strb	r0, [r5, #0]
    8ba0:	e008      	b.n	8bb4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8ba2:	bf00      	nop
    8ba4:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8ba8:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8bac:	6068      	str	r0, [r5, #4]
    8bae:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8bb2:	8128      	strh	r0, [r5, #8]
    8bb4:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8bb8:	f88d 0000 	strb.w	r0, [sp]
    8bbc:	9800      	ldr	r0, [sp, #0]
    8bbe:	9000      	str	r0, [sp, #0]
    8bc0:	f89d 0000 	ldrb.w	r0, [sp]
    8bc4:	2800      	cmp	r0, #0
    8bc6:	d1ed      	bne.n	8ba4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    8bc8:	2001      	movs	r0, #1
    8bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008bcc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8bcc:	b570      	push	{r4, r5, r6, lr}
    8bce:	4605      	mov	r5, r0
    8bd0:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8bd4:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8bd8:	b1c9      	cbz	r1, 8c0e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8bda:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8bde:	1a0c      	subs	r4, r1, r0
    8be0:	f1b4 0404 	subs.w	r4, r4, #4
    8be4:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8be8:	b140      	cbz	r0, 8bfc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8bea:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8bee:	2300      	movs	r3, #0
    8bf0:	2109      	movs	r1, #9
    8bf2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8bf6:	f005 f9f6 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bfa:	b160      	cbz	r0, 8c16 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8bfc:	4628      	mov	r0, r5
    8bfe:	f006 fa13 	bl	f028 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8c02:	b138      	cbz	r0, 8c14 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8c04:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    8c08:	1a40      	subs	r0, r0, r1
    8c0a:	1f00      	subs	r0, r0, #4
    8c0c:	e003      	b.n	8c16 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8c0e:	f1c0 0402 	rsb	r4, r0, #2
    8c12:	e7e7      	b.n	8be4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8c14:	4620      	mov	r0, r4
    8c16:	42a0      	cmp	r0, r4
    8c18:	da00      	bge.n	8c1c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8c1a:	4604      	mov	r4, r0
    8c1c:	2c00      	cmp	r4, #0
    8c1e:	dc01      	bgt.n	8c24 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8c20:	2000      	movs	r0, #0
    8c22:	bd70      	pop	{r4, r5, r6, pc}
    8c24:	b2a0      	uxth	r0, r4
    8c26:	bd70      	pop	{r4, r5, r6, pc}

00008c28 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8c28:	481b      	ldr	r0, [pc, #108]	; (8c98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8c2a:	491a      	ldr	r1, [pc, #104]	; (8c94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8c2c:	6081      	str	r1, [r0, #8]
    8c2e:	491b      	ldr	r1, [pc, #108]	; (8c9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8c30:	61c1      	str	r1, [r0, #28]
    8c32:	491b      	ldr	r1, [pc, #108]	; (8ca0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8c34:	62c1      	str	r1, [r0, #44]	; 0x2c
    8c36:	491b      	ldr	r1, [pc, #108]	; (8ca4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8c38:	6101      	str	r1, [r0, #16]
    8c3a:	491b      	ldr	r1, [pc, #108]	; (8ca8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8c3c:	6141      	str	r1, [r0, #20]
    8c3e:	491b      	ldr	r1, [pc, #108]	; (8cac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8c40:	6441      	str	r1, [r0, #68]	; 0x44
    8c42:	491b      	ldr	r1, [pc, #108]	; (8cb0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8c44:	6181      	str	r1, [r0, #24]
    8c46:	491b      	ldr	r1, [pc, #108]	; (8cb4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8c48:	6301      	str	r1, [r0, #48]	; 0x30
    8c4a:	491b      	ldr	r1, [pc, #108]	; (8cb8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8c4c:	6241      	str	r1, [r0, #36]	; 0x24
    8c4e:	491b      	ldr	r1, [pc, #108]	; (8cbc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8c50:	64c1      	str	r1, [r0, #76]	; 0x4c
    8c52:	491b      	ldr	r1, [pc, #108]	; (8cc0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8c54:	6481      	str	r1, [r0, #72]	; 0x48
    8c56:	491b      	ldr	r1, [pc, #108]	; (8cc4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8c58:	6341      	str	r1, [r0, #52]	; 0x34
    8c5a:	481c      	ldr	r0, [pc, #112]	; (8ccc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8c5c:	491a      	ldr	r1, [pc, #104]	; (8cc8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8c5e:	6081      	str	r1, [r0, #8]
    8c60:	491b      	ldr	r1, [pc, #108]	; (8cd0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8c62:	61c1      	str	r1, [r0, #28]
    8c64:	491b      	ldr	r1, [pc, #108]	; (8cd4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8c66:	6201      	str	r1, [r0, #32]
    8c68:	491b      	ldr	r1, [pc, #108]	; (8cd8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8c6a:	6041      	str	r1, [r0, #4]
    8c6c:	491b      	ldr	r1, [pc, #108]	; (8cdc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8c6e:	6001      	str	r1, [r0, #0]
    8c70:	491b      	ldr	r1, [pc, #108]	; (8ce0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8c72:	6281      	str	r1, [r0, #40]	; 0x28
    8c74:	491b      	ldr	r1, [pc, #108]	; (8ce4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8c76:	62c1      	str	r1, [r0, #44]	; 0x2c
    8c78:	491b      	ldr	r1, [pc, #108]	; (8ce8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8c7a:	60c1      	str	r1, [r0, #12]
    8c7c:	491b      	ldr	r1, [pc, #108]	; (8cec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8c7e:	6181      	str	r1, [r0, #24]
    8c80:	491b      	ldr	r1, [pc, #108]	; (8cf0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8c82:	6301      	str	r1, [r0, #48]	; 0x30
    8c84:	491b      	ldr	r1, [pc, #108]	; (8cf4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8c86:	6481      	str	r1, [r0, #72]	; 0x48
    8c88:	491b      	ldr	r1, [pc, #108]	; (8cf8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8c8a:	64c1      	str	r1, [r0, #76]	; 0x4c
    8c8c:	491b      	ldr	r1, [pc, #108]	; (8cfc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8c8e:	6441      	str	r1, [r0, #68]	; 0x44
    8c90:	4770      	bx	lr
    8c92:	0000      	.short	0x0000
    8c94:	00009f75 	.word	0x00009f75
    8c98:	20000130 	.word	0x20000130
    8c9c:	00009fb1 	.word	0x00009fb1
    8ca0:	00009c89 	.word	0x00009c89
    8ca4:	000099c9 	.word	0x000099c9
    8ca8:	00009ec1 	.word	0x00009ec1
    8cac:	00009e25 	.word	0x00009e25
    8cb0:	00009f01 	.word	0x00009f01
    8cb4:	0000a04d 	.word	0x0000a04d
    8cb8:	00009a01 	.word	0x00009a01
    8cbc:	00009c5d 	.word	0x00009c5d
    8cc0:	00009c29 	.word	0x00009c29
    8cc4:	00009eb1 	.word	0x00009eb1
    8cc8:	0000a3cd 	.word	0x0000a3cd
    8ccc:	20000194 	.word	0x20000194
    8cd0:	0000a3fd 	.word	0x0000a3fd
    8cd4:	0000a1b9 	.word	0x0000a1b9
    8cd8:	0000a11d 	.word	0x0000a11d
    8cdc:	0000a14d 	.word	0x0000a14d
    8ce0:	0000a289 	.word	0x0000a289
    8ce4:	0000a2bd 	.word	0x0000a2bd
    8ce8:	0000a17d 	.word	0x0000a17d
    8cec:	0000a3a9 	.word	0x0000a3a9
    8cf0:	0000a43d 	.word	0x0000a43d
    8cf4:	0000a249 	.word	0x0000a249
    8cf8:	0000a279 	.word	0x0000a279
    8cfc:	0000a395 	.word	0x0000a395

00008d00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8d00:	4806      	ldr	r0, [pc, #24]	; (8d1c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8d02:	4905      	ldr	r1, [pc, #20]	; (8d18 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8d04:	6581      	str	r1, [r0, #88]	; 0x58
    8d06:	4906      	ldr	r1, [pc, #24]	; (8d20 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8d08:	65c1      	str	r1, [r0, #92]	; 0x5c
    8d0a:	4807      	ldr	r0, [pc, #28]	; (8d28 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8d0c:	4905      	ldr	r1, [pc, #20]	; (8d24 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8d0e:	6581      	str	r1, [r0, #88]	; 0x58
    8d10:	4906      	ldr	r1, [pc, #24]	; (8d2c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8d12:	6601      	str	r1, [r0, #96]	; 0x60
    8d14:	4770      	bx	lr
    8d16:	0000      	.short	0x0000
    8d18:	00009cad 	.word	0x00009cad
    8d1c:	20000130 	.word	0x20000130
    8d20:	00009dbd 	.word	0x00009dbd
    8d24:	0000a2e9 	.word	0x0000a2e9
    8d28:	20000194 	.word	0x20000194
    8d2c:	0000a319 	.word	0x0000a319

00008d30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d32:	4d36      	ldr	r5, [pc, #216]	; (8e0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8d34:	2600      	movs	r6, #0
    8d36:	4604      	mov	r4, r0
    8d38:	6068      	str	r0, [r5, #4]
    8d3a:	806e      	strh	r6, [r5, #2]
    8d3c:	706e      	strb	r6, [r5, #1]
    8d3e:	702e      	strb	r6, [r5, #0]
    8d40:	8800      	ldrh	r0, [r0, #0]
    8d42:	f7fb fedd 	bl	4b00 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8d46:	6868      	ldr	r0, [r5, #4]
    8d48:	8800      	ldrh	r0, [r0, #0]
    8d4a:	f7fb fe81 	bl	4a50 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8d4e:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8d52:	6869      	ldr	r1, [r5, #4]
    8d54:	1c40      	adds	r0, r0, #1
    8d56:	b282      	uxth	r2, r0
    8d58:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8d5c:	f005 fafd 	bl	e35a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8d60:	b120      	cbz	r0, 8d6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8d62:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8d66:	2036      	movs	r0, #54	; 0x36
    8d68:	f7fb f89c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d6c:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8d70:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8d74:	4630      	mov	r0, r6
    8d76:	2924      	cmp	r1, #36	; 0x24
    8d78:	d10a      	bne.n	8d90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8d7a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8d7e:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8d82:	1a51      	subs	r1, r2, r1
    8d84:	b209      	sxth	r1, r1
    8d86:	2900      	cmp	r1, #0
    8d88:	db02      	blt.n	8d90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8d8a:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8d8e:	e00f      	b.n	8db0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8d90:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8d94:	2924      	cmp	r1, #36	; 0x24
    8d96:	d001      	beq.n	8d9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8d98:	2925      	cmp	r1, #37	; 0x25
    8d9a:	d10c      	bne.n	8db6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8d9c:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8da0:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8da4:	1a51      	subs	r1, r2, r1
    8da6:	b209      	sxth	r1, r1
    8da8:	2900      	cmp	r1, #0
    8daa:	db04      	blt.n	8db6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8dac:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8db0:	f000 fd5a 	bl	9868 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8db4:	b318      	cbz	r0, 8dfe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8db6:	f000 fbfd 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8dba:	2800      	cmp	r0, #0
    8dbc:	d125      	bne.n	8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8dbe:	6868      	ldr	r0, [r5, #4]
    8dc0:	3078      	adds	r0, #120	; 0x78
    8dc2:	f006 f8a6 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8dc6:	b120      	cbz	r0, 8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8dc8:	6868      	ldr	r0, [r5, #4]
    8dca:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8dce:	f000 faad 	bl	932c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8dd2:	480f      	ldr	r0, [pc, #60]	; (8e10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8dd4:	9000      	str	r0, [sp, #0]
    8dd6:	4b0f      	ldr	r3, [pc, #60]	; (8e14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8dd8:	4a0f      	ldr	r2, [pc, #60]	; (8e18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8dda:	4621      	mov	r1, r4
    8ddc:	4630      	mov	r0, r6
    8dde:	f7fb ff39 	bl	4c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8de2:	6868      	ldr	r0, [r5, #4]
    8de4:	2300      	movs	r3, #0
    8de6:	2105      	movs	r1, #5
    8de8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8dec:	3078      	adds	r0, #120	; 0x78
    8dee:	f005 f8fa 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8df2:	2800      	cmp	r0, #0
    8df4:	d009      	beq.n	8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8dfa:	f7fb bf25 	b.w	4c48 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e02:	2100      	movs	r1, #0
    8e04:	4608      	mov	r0, r1
    8e06:	f000 bb81 	b.w	950c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e0c:	20000120 	.word	0x20000120
    8e10:	0000950d 	.word	0x0000950d
    8e14:	00008f3d 	.word	0x00008f3d
    8e18:	000097e1 	.word	0x000097e1
    8e1c:	4411      	add	r1, r2
    8e1e:	78c2      	ldrb	r2, [r0, #3]
    8e20:	480c      	ldr	r0, [pc, #48]	; (8e54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8e22:	1d89      	adds	r1, r1, #6
    8e24:	b289      	uxth	r1, r1
    8e26:	6840      	ldr	r0, [r0, #4]
    8e28:	2a01      	cmp	r2, #1
    8e2a:	d006      	beq.n	8e3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8e2c:	b142      	cbz	r2, 8e40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8e2e:	2a18      	cmp	r2, #24
    8e30:	d105      	bne.n	8e3e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8e32:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8e36:	b132      	cbz	r2, 8e46 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8e38:	e009      	b.n	8e4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8e3a:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8e3e:	4770      	bx	lr
    8e40:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8e44:	4770      	bx	lr
    8e46:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8e4a:	b902      	cbnz	r2, 8e4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8e4c:	2100      	movs	r1, #0
    8e4e:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8e52:	4770      	bx	lr
    8e54:	20000120 	.word	0x20000120
    8e58:	490b      	ldr	r1, [pc, #44]	; (8e88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8e5a:	78c2      	ldrb	r2, [r0, #3]
    8e5c:	6849      	ldr	r1, [r1, #4]
    8e5e:	2a01      	cmp	r2, #1
    8e60:	d006      	beq.n	8e70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8e62:	b15a      	cbz	r2, 8e7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8e64:	2a18      	cmp	r2, #24
    8e66:	d108      	bne.n	8e7a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8e68:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8e6c:	f005 bb5b 	b.w	e526 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8e70:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8e74:	7241      	strb	r1, [r0, #9]
    8e76:	0a09      	lsrs	r1, r1, #8
    8e78:	7281      	strb	r1, [r0, #10]
    8e7a:	4770      	bx	lr
    8e7c:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8e80:	7341      	strb	r1, [r0, #13]
    8e82:	0a09      	lsrs	r1, r1, #8
    8e84:	7381      	strb	r1, [r0, #14]
    8e86:	4770      	bx	lr
    8e88:	20000120 	.word	0x20000120
    8e8c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8e8e:	4c2a      	ldr	r4, [pc, #168]	; (8f38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8e90:	2300      	movs	r3, #0
    8e92:	4619      	mov	r1, r3
    8e94:	6860      	ldr	r0, [r4, #4]
    8e96:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e9a:	3078      	adds	r0, #120	; 0x78
    8e9c:	f005 f8a3 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ea0:	2800      	cmp	r0, #0
    8ea2:	d048      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ea4:	6860      	ldr	r0, [r4, #4]
    8ea6:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8eaa:	f88d 1000 	strb.w	r1, [sp]
    8eae:	9900      	ldr	r1, [sp, #0]
    8eb0:	9100      	str	r1, [sp, #0]
    8eb2:	f89d 1000 	ldrb.w	r1, [sp]
    8eb6:	2900      	cmp	r1, #0
    8eb8:	d03d      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8eba:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8ebe:	f005 f8eb 	bl	e098 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8ec2:	2800      	cmp	r0, #0
    8ec4:	d137      	bne.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ec6:	6860      	ldr	r0, [r4, #4]
    8ec8:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8ecc:	280a      	cmp	r0, #10
    8ece:	d932      	bls.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ed0:	4668      	mov	r0, sp
    8ed2:	f7fc ff59 	bl	5d88 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8ed6:	2800      	cmp	r0, #0
    8ed8:	d02d      	beq.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8eda:	6861      	ldr	r1, [r4, #4]
    8edc:	2205      	movs	r2, #5
    8ede:	4668      	mov	r0, sp
    8ee0:	318e      	adds	r1, #142	; 0x8e
    8ee2:	f003 fdec 	bl	cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8ee6:	2500      	movs	r5, #0
    8ee8:	b310      	cbz	r0, 8f30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8eea:	6860      	ldr	r0, [r4, #4]
    8eec:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8ef0:	7808      	ldrb	r0, [r1, #0]
    8ef2:	b158      	cbz	r0, 8f0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8ef4:	2205      	movs	r2, #5
    8ef6:	4668      	mov	r0, sp
    8ef8:	1c49      	adds	r1, r1, #1
    8efa:	f003 fde0 	bl	cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8efe:	2800      	cmp	r0, #0
    8f00:	d119      	bne.n	8f36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8f02:	6860      	ldr	r0, [r4, #4]
    8f04:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8f08:	7800      	ldrb	r0, [r0, #0]
    8f0a:	b940      	cbnz	r0, 8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8f0c:	6860      	ldr	r0, [r4, #4]
    8f0e:	9900      	ldr	r1, [sp, #0]
    8f10:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8f14:	f8c0 1001 	str.w	r1, [r0, #1]
    8f18:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f1c:	7141      	strb	r1, [r0, #5]
    8f1e:	6860      	ldr	r0, [r4, #4]
    8f20:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8f24:	7808      	ldrb	r0, [r1, #0]
    8f26:	1c40      	adds	r0, r0, #1
    8f28:	7008      	strb	r0, [r1, #0]
    8f2a:	2001      	movs	r0, #1
    8f2c:	f000 fd04 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f30:	6860      	ldr	r0, [r4, #4]
    8f32:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8f36:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8f38:	20000120 	.word	0x20000120
    8f3c:	4a0c      	ldr	r2, [pc, #48]	; (8f70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8f3e:	7851      	ldrb	r1, [r2, #1]
    8f40:	b999      	cbnz	r1, 8f6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f42:	4611      	mov	r1, r2
    8f44:	2801      	cmp	r0, #1
    8f46:	6849      	ldr	r1, [r1, #4]
    8f48:	d008      	beq.n	8f5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8f4a:	7890      	ldrb	r0, [r2, #2]
    8f4c:	0740      	lsls	r0, r0, #29
    8f4e:	d503      	bpl.n	8f58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8f50:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8f54:	2807      	cmp	r0, #7
    8f56:	d008      	beq.n	8f6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f58:	2001      	movs	r0, #1
    8f5a:	4770      	bx	lr
    8f5c:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8f60:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8f62:	4288      	cmp	r0, r1
    8f64:	d801      	bhi.n	8f6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f66:	f7fe bd5d 	b.w	7a24 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8f6a:	2000      	movs	r0, #0
    8f6c:	4770      	bx	lr
    8f6e:	0000      	.short	0x0000
    8f70:	20000120 	.word	0x20000120
    8f74:	b538      	push	{r3, r4, r5, lr}
    8f76:	4c87      	ldr	r4, [pc, #540]	; (9194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8f78:	6860      	ldr	r0, [r4, #4]
    8f7a:	3078      	adds	r0, #120	; 0x78
    8f7c:	f005 ffc9 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f80:	2800      	cmp	r0, #0
    8f82:	d15b      	bne.n	903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8f84:	6860      	ldr	r0, [r4, #4]
    8f86:	2300      	movs	r3, #0
    8f88:	2101      	movs	r1, #1
    8f8a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8f8e:	3078      	adds	r0, #120	; 0x78
    8f90:	f005 f829 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f94:	2800      	cmp	r0, #0
    8f96:	d151      	bne.n	903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8f98:	6860      	ldr	r0, [r4, #4]
    8f9a:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8f9e:	f88d 1000 	strb.w	r1, [sp]
    8fa2:	9900      	ldr	r1, [sp, #0]
    8fa4:	9100      	str	r1, [sp, #0]
    8fa6:	f89d 1000 	ldrb.w	r1, [sp]
    8faa:	b109      	cbz	r1, 8fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8fac:	2002      	movs	r0, #2
    8fae:	e038      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8fb0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fb4:	2300      	movs	r3, #0
    8fb6:	4619      	mov	r1, r3
    8fb8:	3078      	adds	r0, #120	; 0x78
    8fba:	f005 f814 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fbe:	b128      	cbz	r0, 8fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8fc0:	6860      	ldr	r0, [r4, #4]
    8fc2:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8fc6:	b108      	cbz	r0, 8fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8fc8:	2012      	movs	r0, #18
    8fca:	e02a      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8fcc:	6860      	ldr	r0, [r4, #4]
    8fce:	2500      	movs	r5, #0
    8fd0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fd4:	2a12      	cmp	r2, #18
    8fd6:	d01d      	beq.n	9014 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8fd8:	dc04      	bgt.n	8fe4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8fda:	2a03      	cmp	r2, #3
    8fdc:	d025      	beq.n	902a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8fde:	2a11      	cmp	r2, #17
    8fe0:	d104      	bne.n	8fec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8fe2:	e019      	b.n	9018 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8fe4:	2a18      	cmp	r2, #24
    8fe6:	d01b      	beq.n	9020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8fe8:	2a23      	cmp	r2, #35	; 0x23
    8fea:	d028      	beq.n	903e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8fec:	2300      	movs	r3, #0
    8fee:	2104      	movs	r1, #4
    8ff0:	3078      	adds	r0, #120	; 0x78
    8ff2:	f004 fff8 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d120      	bne.n	903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8ffa:	6860      	ldr	r0, [r4, #4]
    8ffc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9000:	2919      	cmp	r1, #25
    9002:	d07c      	beq.n	90fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    9004:	dc22      	bgt.n	904c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    9006:	2901      	cmp	r1, #1
    9008:	d02c      	beq.n	9064 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    900a:	2902      	cmp	r1, #2
    900c:	d037      	beq.n	907e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    900e:	2903      	cmp	r1, #3
    9010:	d134      	bne.n	907c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    9012:	e022      	b.n	905a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    9014:	200b      	movs	r0, #11
    9016:	e004      	b.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    901c:	f000 bba0 	b.w	9760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9020:	2006      	movs	r0, #6
    9022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9026:	f000 bc87 	b.w	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    902a:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    902e:	7101      	strb	r1, [r0, #4]
    9030:	2007      	movs	r0, #7
    9032:	f000 fc81 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9036:	6860      	ldr	r0, [r4, #4]
    9038:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    903c:	bd38      	pop	{r3, r4, r5, pc}
    903e:	2018      	movs	r0, #24
    9040:	f000 fc7a 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9044:	6860      	ldr	r0, [r4, #4]
    9046:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    904a:	bd38      	pop	{r3, r4, r5, pc}
    904c:	291d      	cmp	r1, #29
    904e:	d018      	beq.n	9082 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9050:	291e      	cmp	r1, #30
    9052:	d016      	beq.n	9082 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9054:	2921      	cmp	r1, #33	; 0x21
    9056:	d176      	bne.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9058:	e056      	b.n	9108 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    905a:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    905e:	7141      	strb	r1, [r0, #5]
    9060:	2007      	movs	r0, #7
    9062:	e07e      	b.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    9064:	200c      	movs	r0, #12
    9066:	f000 fc67 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    906a:	6860      	ldr	r0, [r4, #4]
    906c:	f820 5fba 	strh.w	r5, [r0, #186]!
    9070:	7981      	ldrb	r1, [r0, #6]
    9072:	f041 0101 	orr.w	r1, r1, #1
    9076:	7181      	strb	r1, [r0, #6]
    9078:	f800 5c34 	strb.w	r5, [r0, #-52]
    907c:	e063      	b.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    907e:	2013      	movs	r0, #19
    9080:	e037      	b.n	90f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    9082:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    9086:	f88d 2000 	strb.w	r2, [sp]
    908a:	9a00      	ldr	r2, [sp, #0]
    908c:	9200      	str	r2, [sp, #0]
    908e:	f89d 2000 	ldrb.w	r2, [sp]
    9092:	bbaa      	cbnz	r2, 9100 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    9094:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    9098:	f88d 2000 	strb.w	r2, [sp]
    909c:	9a00      	ldr	r2, [sp, #0]
    909e:	9200      	str	r2, [sp, #0]
    90a0:	f89d 2000 	ldrb.w	r2, [sp]
    90a4:	b1aa      	cbz	r2, 90d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    90a6:	2924      	cmp	r1, #36	; 0x24
    90a8:	d011      	beq.n	90ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    90aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    90ae:	2924      	cmp	r1, #36	; 0x24
    90b0:	d00d      	beq.n	90ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    90b2:	2300      	movs	r3, #0
    90b4:	f500 7293 	add.w	r2, r0, #294	; 0x126
    90b8:	f500 7199 	add.w	r1, r0, #306	; 0x132
    90bc:	f005 fb6f 	bl	e79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    90c0:	6860      	ldr	r0, [r4, #4]
    90c2:	211e      	movs	r1, #30
    90c4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    90c8:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    90cc:	e003      	b.n	90d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    90ce:	2301      	movs	r3, #1
    90d0:	e7f0      	b.n	90b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    90d2:	291e      	cmp	r1, #30
    90d4:	d137      	bne.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    90d6:	6860      	ldr	r0, [r4, #4]
    90d8:	f005 fb7c 	bl	e7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    90dc:	f000 f85c 	bl	9198 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    90e0:	6861      	ldr	r1, [r4, #4]
    90e2:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    90e6:	8bc2      	ldrh	r2, [r0, #30]
    90e8:	f821 2ffe 	strh.w	r2, [r1, #254]!
    90ec:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    90ee:	8048      	strh	r0, [r1, #2]
    90f0:	2015      	movs	r0, #21
    90f2:	f000 fc21 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    90f6:	6860      	ldr	r0, [r4, #4]
    90f8:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    90fc:	e001      	b.n	9102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    90fe:	e02f      	b.n	9160 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    9100:	e021      	b.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9102:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9106:	e01e      	b.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9108:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    910c:	2901      	cmp	r1, #1
    910e:	d108      	bne.n	9122 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    9110:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9114:	f88d 1000 	strb.w	r1, [sp]
    9118:	9900      	ldr	r1, [sp, #0]
    911a:	9100      	str	r1, [sp, #0]
    911c:	f89d 1000 	ldrb.w	r1, [sp]
    9120:	b121      	cbz	r1, 912c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    9122:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9126:	2902      	cmp	r1, #2
    9128:	d005      	beq.n	9136 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    912a:	e00c      	b.n	9146 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    912c:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    9130:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9134:	e002      	b.n	913c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9136:	f850 1f62 	ldr.w	r1, [r0, #98]!
    913a:	6840      	ldr	r0, [r0, #4]
    913c:	f000 fc1e 	bl	997c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9140:	2018      	movs	r0, #24
    9142:	f000 fbf9 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9146:	6860      	ldr	r0, [r4, #4]
    9148:	3078      	adds	r0, #120	; 0x78
    914a:	f005 fee2 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    914e:	2800      	cmp	r0, #0
    9150:	f47f af7b 	bne.w	904a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9154:	6860      	ldr	r0, [r4, #4]
    9156:	3078      	adds	r0, #120	; 0x78
    9158:	f005 fedb 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    915c:	b128      	cbz	r0, 916a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    915e:	e00f      	b.n	9180 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9160:	2011      	movs	r0, #17
    9162:	f000 fbe9 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9166:	6860      	ldr	r0, [r4, #4]
    9168:	e7c8      	b.n	90fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    916a:	6860      	ldr	r0, [r4, #4]
    916c:	2300      	movs	r3, #0
    916e:	4619      	mov	r1, r3
    9170:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9174:	3078      	adds	r0, #120	; 0x78
    9176:	f004 ff36 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    917a:	b108      	cbz	r0, 9180 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    917c:	f000 fa44 	bl	9608 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9180:	6860      	ldr	r0, [r4, #4]
    9182:	3078      	adds	r0, #120	; 0x78
    9184:	f005 fec5 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9188:	2800      	cmp	r0, #0
    918a:	d1e1      	bne.n	9150 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    918c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9190:	f7ff be7c 	b.w	8e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    9194:	20000120 	.word	0x20000120
    9198:	480a      	ldr	r0, [pc, #40]	; (91c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    919a:	b510      	push	{r4, lr}
    919c:	6841      	ldr	r1, [r0, #4]
    919e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    91a2:	2801      	cmp	r0, #1
    91a4:	d009      	beq.n	91ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    91a6:	8808      	ldrh	r0, [r1, #0]
    91a8:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    91ac:	312c      	adds	r1, #44	; 0x2c
    91ae:	f005 fad2 	bl	e756 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    91b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91b6:	f7fc bfb5 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    91ba:	2002      	movs	r0, #2
    91bc:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    91c0:	bd10      	pop	{r4, pc}
    91c2:	0000      	.short	0x0000
    91c4:	20000120 	.word	0x20000120
    91c8:	b570      	push	{r4, r5, r6, lr}
    91ca:	4c22      	ldr	r4, [pc, #136]	; (9254 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    91cc:	f04f 0500 	mov.w	r5, #0
    91d0:	8861      	ldrh	r1, [r4, #2]
    91d2:	0748      	lsls	r0, r1, #29
    91d4:	d510      	bpl.n	91f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    91d6:	6860      	ldr	r0, [r4, #4]
    91d8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    91dc:	2a03      	cmp	r2, #3
    91de:	d004      	beq.n	91ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    91e0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    91e4:	2a07      	cmp	r2, #7
    91e6:	d107      	bne.n	91f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    91e8:	e002      	b.n	91f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    91ea:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    91ee:	e026      	b.n	923e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    91f0:	2201      	movs	r2, #1
    91f2:	7022      	strb	r2, [r4, #0]
    91f4:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    91f8:	0788      	lsls	r0, r1, #30
    91fa:	d508      	bpl.n	920e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    91fc:	68a0      	ldr	r0, [r4, #8]
    91fe:	78c0      	ldrb	r0, [r0, #3]
    9200:	2819      	cmp	r0, #25
    9202:	d21a      	bcs.n	923a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9204:	4914      	ldr	r1, [pc, #80]	; (9258 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    9206:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    920a:	b1b0      	cbz	r0, 923a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    920c:	4780      	blx	r0
    920e:	f000 f867 	bl	92e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    9212:	f000 f823 	bl	925c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    9216:	4606      	mov	r6, r0
    9218:	7860      	ldrb	r0, [r4, #1]
    921a:	0700      	lsls	r0, r0, #28
    921c:	d515      	bpl.n	924a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    921e:	6860      	ldr	r0, [r4, #4]
    9220:	2300      	movs	r3, #0
    9222:	2105      	movs	r1, #5
    9224:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9228:	3078      	adds	r0, #120	; 0x78
    922a:	f004 fedc 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    922e:	b148      	cbz	r0, 9244 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    9230:	6860      	ldr	r0, [r4, #4]
    9232:	2608      	movs	r6, #8
    9234:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9238:	e007      	b.n	924a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    923a:	f240 61b1 	movw	r1, #1713	; 0x6b1
    923e:	2036      	movs	r0, #54	; 0x36
    9240:	f7fa fe30 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9244:	2000      	movs	r0, #0
    9246:	f7fb fddd 	bl	4e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    924a:	6860      	ldr	r0, [r4, #4]
    924c:	f005 fe91 	bl	ef72 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9250:	4630      	mov	r0, r6
    9252:	bd70      	pop	{r4, r5, r6, pc}
    9254:	20000120 	.word	0x20000120
    9258:	20000194 	.word	0x20000194
    925c:	b570      	push	{r4, r5, r6, lr}
    925e:	4c1e      	ldr	r4, [pc, #120]	; (92d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    9260:	2000      	movs	r0, #0
    9262:	78a1      	ldrb	r1, [r4, #2]
    9264:	07c9      	lsls	r1, r1, #31
    9266:	d01b      	beq.n	92a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9268:	68e0      	ldr	r0, [r4, #12]
    926a:	2300      	movs	r3, #0
    926c:	2105      	movs	r1, #5
    926e:	78c5      	ldrb	r5, [r0, #3]
    9270:	6860      	ldr	r0, [r4, #4]
    9272:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9276:	3078      	adds	r0, #120	; 0x78
    9278:	f004 feb5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    927c:	b188      	cbz	r0, 92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    927e:	2d06      	cmp	r5, #6
    9280:	d00f      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9282:	dc06      	bgt.n	9292 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    9284:	2d02      	cmp	r5, #2
    9286:	d00c      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9288:	2d04      	cmp	r5, #4
    928a:	d00a      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    928c:	2d05      	cmp	r5, #5
    928e:	d106      	bne.n	929e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    9290:	e007      	b.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9292:	2d0b      	cmp	r5, #11
    9294:	d005      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9296:	2d0d      	cmp	r5, #13
    9298:	d003      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    929a:	2d11      	cmp	r5, #17
    929c:	d001      	beq.n	92a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    929e:	2008      	movs	r0, #8
    92a0:	bd70      	pop	{r4, r5, r6, pc}
    92a2:	68e0      	ldr	r0, [r4, #12]
    92a4:	f7fc fe2c 	bl	5f00 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    92a8:	b148      	cbz	r0, 92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92aa:	68e0      	ldr	r0, [r4, #12]
    92ac:	78c0      	ldrb	r0, [r0, #3]
    92ae:	2819      	cmp	r0, #25
    92b0:	d205      	bcs.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92b2:	490a      	ldr	r1, [pc, #40]	; (92dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    92b4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    92b8:	b108      	cbz	r0, 92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92ba:	4780      	blx	r0
    92bc:	e002      	b.n	92c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    92be:	2000      	movs	r0, #0
    92c0:	f000 fbdc 	bl	9a7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    92c4:	6861      	ldr	r1, [r4, #4]
    92c6:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    92ca:	1c52      	adds	r2, r2, #1
    92cc:	f143 0300 	adc.w	r3, r3, #0
    92d0:	e9c1 2300 	strd	r2, r3, [r1]
    92d4:	bd70      	pop	{r4, r5, r6, pc}
    92d6:	0000      	.short	0x0000
    92d8:	20000120 	.word	0x20000120
    92dc:	20000130 	.word	0x20000130
    92e0:	b510      	push	{r4, lr}
    92e2:	4c11      	ldr	r4, [pc, #68]	; (9328 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    92e4:	78a0      	ldrb	r0, [r4, #2]
    92e6:	0700      	lsls	r0, r0, #28
    92e8:	d517      	bpl.n	931a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    92ea:	6860      	ldr	r0, [r4, #4]
    92ec:	2100      	movs	r1, #0
    92ee:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    92f2:	f001 f97b 	bl	a5ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    92f6:	6860      	ldr	r0, [r4, #4]
    92f8:	3078      	adds	r0, #120	; 0x78
    92fa:	f005 fe0a 	bl	ef12 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    92fe:	b168      	cbz	r0, 931c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    9300:	6860      	ldr	r0, [r4, #4]
    9302:	21fe      	movs	r1, #254	; 0xfe
    9304:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9308:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    930c:	2908      	cmp	r1, #8
    930e:	d104      	bne.n	931a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    9310:	2102      	movs	r1, #2
    9312:	7021      	strb	r1, [r4, #0]
    9314:	2100      	movs	r1, #0
    9316:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    931a:	bd10      	pop	{r4, pc}
    931c:	f240 61bd 	movw	r1, #1725	; 0x6bd
    9320:	2036      	movs	r0, #54	; 0x36
    9322:	f7fa fdbf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9326:	0000      	.short	0x0000
    9328:	20000120 	.word	0x20000120
    932c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    932e:	4605      	mov	r5, r0
    9330:	4668      	mov	r0, sp
    9332:	f7fb fbcf 	bl	4ad4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9336:	b318      	cbz	r0, 9380 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    9338:	2222      	movs	r2, #34	; 0x22
    933a:	2100      	movs	r1, #0
    933c:	9800      	ldr	r0, [sp, #0]
    933e:	f003 fc4a 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9342:	2103      	movs	r1, #3
    9344:	9800      	ldr	r0, [sp, #0]
    9346:	f005 f8d4 	bl	e4f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    934a:	9800      	ldr	r0, [sp, #0]
    934c:	7801      	ldrb	r1, [r0, #0]
    934e:	f021 0110 	bic.w	r1, r1, #16
    9352:	7001      	strb	r1, [r0, #0]
    9354:	4629      	mov	r1, r5
    9356:	f7fc fde3 	bl	5f20 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    935a:	2100      	movs	r1, #0
    935c:	4c6a      	ldr	r4, [pc, #424]	; (9508 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    935e:	2d19      	cmp	r5, #25
    9360:	d270      	bcs.n	9444 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    9362:	e8df f005 	tbb	[pc, r5]
    9366:	1c24      	.short	0x1c24
    9368:	c9c94c10 	.word	0xc9c94c10
    936c:	c97016c2 	.word	0xc97016c2
    9370:	c964c2c2 	.word	0xc964c2c2
    9374:	b6c9c9c9 	.word	0xb6c9c9c9
    9378:	8181c2c2 	.word	0x8181c2c2
    937c:	00a3c99a 	.word	0x00a3c99a
    9380:	f640 014f 	movw	r1, #2127	; 0x84f
    9384:	e0bd      	b.n	9502 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    9386:	6860      	ldr	r0, [r4, #4]
    9388:	9900      	ldr	r1, [sp, #0]
    938a:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    938e:	7108      	strb	r0, [r1, #4]
    9390:	e0ab      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9392:	6861      	ldr	r1, [r4, #4]
    9394:	9800      	ldr	r0, [sp, #0]
    9396:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    939a:	7101      	strb	r1, [r0, #4]
    939c:	e0a5      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    939e:	6860      	ldr	r0, [r4, #4]
    93a0:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	1c49      	adds	r1, r1, #1
    93a8:	f005 f883 	bl	e4b2 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    93ac:	e09d      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93ae:	6860      	ldr	r0, [r4, #4]
    93b0:	9d00      	ldr	r5, [sp, #0]
    93b2:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    93b6:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    93ba:	f004 ff97 	bl	e2ec <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    93be:	7128      	strb	r0, [r5, #4]
    93c0:	6860      	ldr	r0, [r4, #4]
    93c2:	9d00      	ldr	r5, [sp, #0]
    93c4:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    93c8:	c803      	ldmia	r0, {r0, r1}
    93ca:	f004 ff84 	bl	e2d6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    93ce:	7168      	strb	r0, [r5, #5]
    93d0:	0a00      	lsrs	r0, r0, #8
    93d2:	71a8      	strb	r0, [r5, #6]
    93d4:	6860      	ldr	r0, [r4, #4]
    93d6:	9d00      	ldr	r5, [sp, #0]
    93d8:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    93dc:	f004 fdb9 	bl	df52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    93e0:	71e8      	strb	r0, [r5, #7]
    93e2:	0a00      	lsrs	r0, r0, #8
    93e4:	7228      	strb	r0, [r5, #8]
    93e6:	6862      	ldr	r2, [r4, #4]
    93e8:	9800      	ldr	r0, [sp, #0]
    93ea:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    93ee:	7241      	strb	r1, [r0, #9]
    93f0:	0a09      	lsrs	r1, r1, #8
    93f2:	7281      	strb	r1, [r0, #10]
    93f4:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    93f8:	f005 f860 	bl	e4bc <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    93fc:	e075      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93fe:	6861      	ldr	r1, [r4, #4]
    9400:	9800      	ldr	r0, [sp, #0]
    9402:	f201 115b 	addw	r1, r1, #347	; 0x15b
    9406:	f005 f864 	bl	e4d2 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    940a:	6861      	ldr	r1, [r4, #4]
    940c:	9800      	ldr	r0, [sp, #0]
    940e:	f201 1163 	addw	r1, r1, #355	; 0x163
    9412:	f005 f857 	bl	e4c4 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    9416:	6861      	ldr	r1, [r4, #4]
    9418:	9800      	ldr	r0, [sp, #0]
    941a:	f201 1175 	addw	r1, r1, #373	; 0x175
    941e:	f005 f85d 	bl	e4dc <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    9422:	6861      	ldr	r1, [r4, #4]
    9424:	9800      	ldr	r0, [sp, #0]
    9426:	31f0      	adds	r1, #240	; 0xf0
    9428:	f005 f84f 	bl	e4ca <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    942c:	e05d      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    942e:	9800      	ldr	r0, [sp, #0]
    9430:	220b      	movs	r2, #11
    9432:	7102      	strb	r2, [r0, #4]
    9434:	2259      	movs	r2, #89	; 0x59
    9436:	7142      	strb	r2, [r0, #5]
    9438:	7181      	strb	r1, [r0, #6]
    943a:	21fe      	movs	r1, #254	; 0xfe
    943c:	71c1      	strb	r1, [r0, #7]
    943e:	2112      	movs	r1, #18
    9440:	7201      	strb	r1, [r0, #8]
    9442:	e052      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9444:	e058      	b.n	94f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    9446:	9101      	str	r1, [sp, #4]
    9448:	9102      	str	r1, [sp, #8]
    944a:	f001 fe5d 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    944e:	f644 112f 	movw	r1, #18735	; 0x492f
    9452:	4008      	ands	r0, r1
    9454:	f88d 0004 	strb.w	r0, [sp, #4]
    9458:	0a00      	lsrs	r0, r0, #8
    945a:	f88d 0005 	strb.w	r0, [sp, #5]
    945e:	a901      	add	r1, sp, #4
    9460:	9800      	ldr	r0, [sp, #0]
    9462:	f005 f841 	bl	e4e8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9466:	e040      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9468:	6860      	ldr	r0, [r4, #4]
    946a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    946e:	9800      	ldr	r0, [sp, #0]
    9470:	f005 f851 	bl	e516 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9474:	6860      	ldr	r0, [r4, #4]
    9476:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    947a:	9800      	ldr	r0, [sp, #0]
    947c:	f005 f84f 	bl	e51e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9480:	6860      	ldr	r0, [r4, #4]
    9482:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9486:	9800      	ldr	r0, [sp, #0]
    9488:	f005 f83d 	bl	e506 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    948c:	6860      	ldr	r0, [r4, #4]
    948e:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9492:	9800      	ldr	r0, [sp, #0]
    9494:	f005 f83b 	bl	e50e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9498:	e027      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    949a:	6861      	ldr	r1, [r4, #4]
    949c:	9800      	ldr	r0, [sp, #0]
    949e:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    94a2:	7102      	strb	r2, [r0, #4]
    94a4:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    94a8:	7141      	strb	r1, [r0, #5]
    94aa:	e01e      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    94ac:	6860      	ldr	r0, [r4, #4]
    94ae:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    94b2:	f004 fe3c 	bl	e12e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    94b6:	4601      	mov	r1, r0
    94b8:	9800      	ldr	r0, [sp, #0]
    94ba:	f005 f838 	bl	e52e <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    94be:	6860      	ldr	r0, [r4, #4]
    94c0:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    94c4:	f004 fe33 	bl	e12e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    94c8:	4601      	mov	r1, r0
    94ca:	9800      	ldr	r0, [sp, #0]
    94cc:	f005 f819 	bl	e502 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    94d0:	e00b      	b.n	94ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    94d2:	6860      	ldr	r0, [r4, #4]
    94d4:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    94d8:	9800      	ldr	r0, [sp, #0]
    94da:	f004 ffe6 	bl	e4aa <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    94de:	6860      	ldr	r0, [r4, #4]
    94e0:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    94e4:	9800      	ldr	r0, [sp, #0]
    94e6:	f004 ffe2 	bl	e4ae <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    94ea:	f7fb facd 	bl	4a88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    94ee:	b130      	cbz	r0, 94fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    94f0:	9800      	ldr	r0, [sp, #0]
    94f2:	f7ff fcb1 	bl	8e58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    94f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    94f8:	f640 01db 	movw	r1, #2267	; 0x8db
    94fc:	e001      	b.n	9502 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    94fe:	f640 01e1 	movw	r1, #2273	; 0x8e1
    9502:	2036      	movs	r0, #54	; 0x36
    9504:	f7fa fcce 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9508:	20000120 	.word	0x20000120
    950c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9510:	4c27      	ldr	r4, [pc, #156]	; (95b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    9512:	4680      	mov	r8, r0
    9514:	460d      	mov	r5, r1
    9516:	8860      	ldrh	r0, [r4, #2]
    9518:	f04f 0600 	mov.w	r6, #0
    951c:	05c1      	lsls	r1, r0, #23
    951e:	4620      	mov	r0, r4
    9520:	6840      	ldr	r0, [r0, #4]
    9522:	d502      	bpl.n	952a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    9524:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9528:	e004      	b.n	9534 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    952a:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    952e:	1c49      	adds	r1, r1, #1
    9530:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    9534:	f005 fd78 	bl	f028 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9538:	2701      	movs	r7, #1
    953a:	b1e0      	cbz	r0, 9576 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    953c:	8860      	ldrh	r0, [r4, #2]
    953e:	0500      	lsls	r0, r0, #20
    9540:	d506      	bpl.n	9550 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9542:	6860      	ldr	r0, [r4, #4]
    9544:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9548:	b111      	cbz	r1, 9550 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    954a:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    954e:	e012      	b.n	9576 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9550:	6860      	ldr	r0, [r4, #4]
    9552:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9556:	1c49      	adds	r1, r1, #1
    9558:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    955c:	f005 fcfa 	bl	ef54 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9560:	6860      	ldr	r0, [r4, #4]
    9562:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    9566:	4291      	cmp	r1, r2
    9568:	d305      	bcc.n	9576 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    956a:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    956e:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    9572:	f7fc fdd7 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9576:	8860      	ldrh	r0, [r4, #2]
    9578:	f410 7f40 	tst.w	r0, #768	; 0x300
    957c:	d008      	beq.n	9590 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    957e:	6860      	ldr	r0, [r4, #4]
    9580:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9584:	b921      	cbnz	r1, 9590 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9586:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    958a:	2101      	movs	r1, #1
    958c:	f7fe fa6c 	bl	7a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9590:	ea58 0005 	orrs.w	r0, r8, r5
    9594:	d104      	bne.n	95a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    9596:	f7ff fe17 	bl	91c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    959a:	4605      	mov	r5, r0
    959c:	f7ff fcea 	bl	8f74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    95a0:	4629      	mov	r1, r5
    95a2:	4640      	mov	r0, r8
    95a4:	f000 ff7a 	bl	a49c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    95a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    95ac:	f7fb ba56 	b.w	4a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    95b0:	20000120 	.word	0x20000120
    95b4:	4813      	ldr	r0, [pc, #76]	; (9604 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    95b6:	6840      	ldr	r0, [r0, #4]
    95b8:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    95bc:	b129      	cbz	r1, 95ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    95be:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    95c2:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    95c6:	4291      	cmp	r1, r2
    95c8:	d215      	bcs.n	95f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95ca:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    95ce:	b129      	cbz	r1, 95dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    95d0:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    95d4:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    95d8:	4291      	cmp	r1, r2
    95da:	d20c      	bcs.n	95f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95dc:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    95e0:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    95e4:	428a      	cmp	r2, r1
    95e6:	d206      	bcs.n	95f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95e8:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    95ec:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    95f0:	b11a      	cbz	r2, 95fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    95f2:	4288      	cmp	r0, r1
    95f4:	d303      	bcc.n	95fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    95f6:	2001      	movs	r0, #1
    95f8:	4770      	bx	lr
    95fa:	2806      	cmp	r0, #6
    95fc:	d2fb      	bcs.n	95f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95fe:	2000      	movs	r0, #0
    9600:	4770      	bx	lr
    9602:	0000      	.short	0x0000
    9604:	20000120 	.word	0x20000120
    9608:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    960a:	4c54      	ldr	r4, [pc, #336]	; (975c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    960c:	6860      	ldr	r0, [r4, #4]
    960e:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    9612:	f88d 1000 	strb.w	r1, [sp]
    9616:	9900      	ldr	r1, [sp, #0]
    9618:	9100      	str	r1, [sp, #0]
    961a:	f89d 1000 	ldrb.w	r1, [sp]
    961e:	b129      	cbz	r1, 962c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    9620:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9624:	f004 fd38 	bl	e098 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9628:	2800      	cmp	r0, #0
    962a:	d00a      	beq.n	9642 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    962c:	6860      	ldr	r0, [r4, #4]
    962e:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    9632:	b181      	cbz	r1, 9656 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    9634:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9638:	b149      	cbz	r1, 964e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    963a:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    963e:	b108      	cbz	r0, 9644 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    9640:	200a      	movs	r0, #10
    9642:	e087      	b.n	9754 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9644:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9648:	2036      	movs	r0, #54	; 0x36
    964a:	f7fa fc2b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    964e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9652:	f000 b885 	b.w	9760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9656:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    965a:	b109      	cbz	r1, 9660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    965c:	2008      	movs	r0, #8
    965e:	e079      	b.n	9754 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9660:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9664:	2500      	movs	r5, #0
    9666:	b181      	cbz	r1, 968a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9668:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    966c:	0780      	lsls	r0, r0, #30
    966e:	d10b      	bne.n	9688 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9670:	200c      	movs	r0, #12
    9672:	f000 f961 	bl	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9676:	6860      	ldr	r0, [r4, #4]
    9678:	2101      	movs	r1, #1
    967a:	f820 5fb4 	strh.w	r5, [r0, #180]!
    967e:	7101      	strb	r1, [r0, #4]
    9680:	7b01      	ldrb	r1, [r0, #12]
    9682:	f041 0101 	orr.w	r1, r1, #1
    9686:	7301      	strb	r1, [r0, #12]
    9688:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    968a:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    968e:	f88d 1004 	strb.w	r1, [sp, #4]
    9692:	9901      	ldr	r1, [sp, #4]
    9694:	9101      	str	r1, [sp, #4]
    9696:	f89d 1004 	ldrb.w	r1, [sp, #4]
    969a:	b141      	cbz	r1, 96ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    969c:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    96a0:	f88d 1000 	strb.w	r1, [sp]
    96a4:	9900      	ldr	r1, [sp, #0]
    96a6:	9100      	str	r1, [sp, #0]
    96a8:	f89d 1000 	ldrb.w	r1, [sp]
    96ac:	b391      	cbz	r1, 9714 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    96ae:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    96b2:	2901      	cmp	r1, #1
    96b4:	d1e8      	bne.n	9688 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96b6:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    96ba:	f88d 1000 	strb.w	r1, [sp]
    96be:	9900      	ldr	r1, [sp, #0]
    96c0:	9100      	str	r1, [sp, #0]
    96c2:	f89d 1000 	ldrb.w	r1, [sp]
    96c6:	2900      	cmp	r1, #0
    96c8:	d1de      	bne.n	9688 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96ca:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    96ce:	f004 fce3 	bl	e098 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    96d2:	2800      	cmp	r0, #0
    96d4:	d1d8      	bne.n	9688 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96d6:	6860      	ldr	r0, [r4, #4]
    96d8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    96dc:	f005 fc21 	bl	ef22 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96e0:	4605      	mov	r5, r0
    96e2:	6860      	ldr	r0, [r4, #4]
    96e4:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    96e8:	f005 fc1b 	bl	ef22 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96ec:	4606      	mov	r6, r0
    96ee:	6860      	ldr	r0, [r4, #4]
    96f0:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    96f4:	4628      	mov	r0, r5
    96f6:	f005 fc1f 	bl	ef38 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    96fa:	b350      	cbz	r0, 9752 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    96fc:	6860      	ldr	r0, [r4, #4]
    96fe:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    9702:	4630      	mov	r0, r6
    9704:	f005 fc18 	bl	ef38 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9708:	b318      	cbz	r0, 9752 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    970a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    970e:	2000      	movs	r0, #0
    9710:	f000 b8ee 	b.w	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9714:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9718:	2924      	cmp	r1, #36	; 0x24
    971a:	d018      	beq.n	974e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    971c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9720:	2924      	cmp	r1, #36	; 0x24
    9722:	d014      	beq.n	974e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9724:	f05f 0300 	movs.w	r3, #0
    9728:	f500 7293 	add.w	r2, r0, #294	; 0x126
    972c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9730:	f005 f835 	bl	e79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9734:	6860      	ldr	r0, [r4, #4]
    9736:	4602      	mov	r2, r0
    9738:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    973c:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    9740:	8bc8      	ldrh	r0, [r1, #30]
    9742:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9746:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9748:	8050      	strh	r0, [r2, #2]
    974a:	2014      	movs	r0, #20
    974c:	e002      	b.n	9754 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    974e:	2301      	movs	r3, #1
    9750:	e7ea      	b.n	9728 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    9752:	2016      	movs	r0, #22
    9754:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9758:	f000 b8ee 	b.w	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    975c:	20000120 	.word	0x20000120
    9760:	b510      	push	{r4, lr}
    9762:	4c1e      	ldr	r4, [pc, #120]	; (97dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9764:	6862      	ldr	r2, [r4, #4]
    9766:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    976a:	2808      	cmp	r0, #8
    976c:	d20d      	bcs.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    976e:	f1c0 0108 	rsb	r1, r0, #8
    9772:	4410      	add	r0, r2
    9774:	b2c9      	uxtb	r1, r1
    9776:	f200 1075 	addw	r0, r0, #373	; 0x175
    977a:	f7fa fc21 	bl	3fc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    977e:	6861      	ldr	r1, [r4, #4]
    9780:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9784:	4410      	add	r0, r2
    9786:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    978a:	6862      	ldr	r2, [r4, #4]
    978c:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9790:	3808      	subs	r0, #8
    9792:	2804      	cmp	r0, #4
    9794:	d20c      	bcs.n	97b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    9796:	f1c0 0104 	rsb	r1, r0, #4
    979a:	4410      	add	r0, r2
    979c:	b2c9      	uxtb	r1, r1
    979e:	30f0      	adds	r0, #240	; 0xf0
    97a0:	f7fa fc0e 	bl	3fc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97a4:	6861      	ldr	r1, [r4, #4]
    97a6:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    97aa:	4410      	add	r0, r2
    97ac:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    97b0:	6860      	ldr	r0, [r4, #4]
    97b2:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    97b6:	290c      	cmp	r1, #12
    97b8:	d30e      	bcc.n	97d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    97ba:	d005      	beq.n	97c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    97bc:	f640 1131 	movw	r1, #2353	; 0x931
    97c0:	f04f 0036 	mov.w	r0, #54	; 0x36
    97c4:	f7fa fb6e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97c8:	2100      	movs	r1, #0
    97ca:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    97ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97d2:	2003      	movs	r0, #3
    97d4:	f000 b8b0 	b.w	9938 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    97d8:	bd10      	pop	{r4, pc}
    97da:	0000      	.short	0x0000
    97dc:	20000120 	.word	0x20000120
    97e0:	b570      	push	{r4, r5, r6, lr}
    97e2:	4b20      	ldr	r3, [pc, #128]	; (9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    97e4:	4602      	mov	r2, r0
    97e6:	460c      	mov	r4, r1
    97e8:	8858      	ldrh	r0, [r3, #2]
    97ea:	4310      	orrs	r0, r2
    97ec:	8058      	strh	r0, [r3, #2]
    97ee:	4618      	mov	r0, r3
    97f0:	0791      	lsls	r1, r2, #30
    97f2:	6840      	ldr	r0, [r0, #4]
    97f4:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    97f8:	d507      	bpl.n	980a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    97fa:	b121      	cbz	r1, 9806 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    97fc:	f640 21c5 	movw	r1, #2757	; 0xac5
    9800:	2036      	movs	r0, #54	; 0x36
    9802:	f7fa fb4f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9806:	609c      	str	r4, [r3, #8]
    9808:	e003      	b.n	9812 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    980a:	b101      	cbz	r1, 980e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    980c:	60dc      	str	r4, [r3, #12]
    980e:	0791      	lsls	r1, r2, #30
    9810:	d515      	bpl.n	983e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9812:	78e1      	ldrb	r1, [r4, #3]
    9814:	2906      	cmp	r1, #6
    9816:	d002      	beq.n	981e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9818:	290b      	cmp	r1, #11
    981a:	d110      	bne.n	983e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    981c:	e008      	b.n	9830 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    981e:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9822:	2918      	cmp	r1, #24
    9824:	d10b      	bne.n	983e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9826:	2100      	movs	r1, #0
    9828:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    982c:	2101      	movs	r1, #1
    982e:	e004      	b.n	983a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    9830:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9834:	2912      	cmp	r1, #18
    9836:	d102      	bne.n	983e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9838:	2100      	movs	r1, #0
    983a:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    983e:	0691      	lsls	r1, r2, #26
    9840:	d501      	bpl.n	9846 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    9842:	2108      	movs	r1, #8
    9844:	7059      	strb	r1, [r3, #1]
    9846:	0611      	lsls	r1, r2, #24
    9848:	d50a      	bpl.n	9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    984a:	8a82      	ldrh	r2, [r0, #20]
    984c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9850:	4620      	mov	r0, r4
    9852:	f7ff fae3 	bl	8e1c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    9856:	4620      	mov	r0, r4
    9858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    985c:	f7ff bafc 	b.w	8e58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9860:	bd70      	pop	{r4, r5, r6, pc}
    9862:	0000      	.short	0x0000
    9864:	20000120 	.word	0x20000120
    9868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    986c:	4c1f      	ldr	r4, [pc, #124]	; (98ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    986e:	2501      	movs	r5, #1
    9870:	6862      	ldr	r2, [r4, #4]
    9872:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    9876:	b908      	cbnz	r0, 987c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9878:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    987c:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9880:	b909      	cbnz	r1, 9886 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    9882:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9886:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    988a:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    988e:	3262      	adds	r2, #98	; 0x62
    9890:	2001      	movs	r0, #1
    9892:	7290      	strb	r0, [r2, #10]
    9894:	2000      	movs	r0, #0
    9896:	f000 f82b 	bl	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    989a:	6860      	ldr	r0, [r4, #4]
    989c:	302c      	adds	r0, #44	; 0x2c
    989e:	f004 ffed 	bl	e87c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    98a2:	4606      	mov	r6, r0
    98a4:	6860      	ldr	r0, [r4, #4]
    98a6:	f004 ff95 	bl	e7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    98aa:	b1c0      	cbz	r0, 98de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98ac:	6860      	ldr	r0, [r4, #4]
    98ae:	302c      	adds	r0, #44	; 0x2c
    98b0:	f004 ffe4 	bl	e87c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    98b4:	6861      	ldr	r1, [r4, #4]
    98b6:	4607      	mov	r7, r0
    98b8:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    98bc:	8808      	ldrh	r0, [r1, #0]
    98be:	312c      	adds	r1, #44	; 0x2c
    98c0:	f004 ff49 	bl	e756 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    98c4:	42be      	cmp	r6, r7
    98c6:	d20a      	bcs.n	98de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98c8:	f7f7 feba 	bl	1640 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    98cc:	4601      	mov	r1, r0
    98ce:	1bb8      	subs	r0, r7, r6
    98d0:	2865      	cmp	r0, #101	; 0x65
    98d2:	d200      	bcs.n	98d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    98d4:	2065      	movs	r0, #101	; 0x65
    98d6:	f7f7 fda7 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    98da:	b100      	cbz	r0, 98de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98dc:	2500      	movs	r5, #0
    98de:	2104      	movs	r1, #4
    98e0:	6860      	ldr	r0, [r4, #4]
    98e2:	f7fe f8c1 	bl	7a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    98e6:	4628      	mov	r0, r5
    98e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ec:	20000120 	.word	0x20000120
    98f0:	b510      	push	{r4, lr}
    98f2:	4c10      	ldr	r4, [pc, #64]	; (9934 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    98f4:	6861      	ldr	r1, [r4, #4]
    98f6:	880a      	ldrh	r2, [r1, #0]
    98f8:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    98fc:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    9900:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9904:	f005 fb0d 	bl	ef22 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9908:	6861      	ldr	r1, [r4, #4]
    990a:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    990e:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9912:	f005 fb06 	bl	ef22 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9916:	6862      	ldr	r2, [r4, #4]
    9918:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    991c:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    9920:	2001      	movs	r0, #1
    9922:	7008      	strb	r0, [r1, #0]
    9924:	2000      	movs	r0, #0
    9926:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    992a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    992e:	f7fc bbf9 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9932:	0000      	.short	0x0000
    9934:	20000120 	.word	0x20000120
    9938:	490f      	ldr	r1, [pc, #60]	; (9978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    993a:	280c      	cmp	r0, #12
    993c:	6849      	ldr	r1, [r1, #4]
    993e:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    9942:	d014      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9944:	2813      	cmp	r0, #19
    9946:	d012      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9948:	2818      	cmp	r0, #24
    994a:	d010      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    994c:	2200      	movs	r2, #0
    994e:	2811      	cmp	r0, #17
    9950:	d00e      	beq.n	9970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9952:	2807      	cmp	r0, #7
    9954:	d00b      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9956:	2815      	cmp	r0, #21
    9958:	d00a      	beq.n	9970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    995a:	2801      	cmp	r0, #1
    995c:	d007      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    995e:	2800      	cmp	r0, #0
    9960:	d005      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9962:	2802      	cmp	r0, #2
    9964:	d003      	beq.n	996e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9966:	f821 2fb4 	strh.w	r2, [r1, #180]!
    996a:	2001      	movs	r0, #1
    996c:	7108      	strb	r0, [r1, #4]
    996e:	4770      	bx	lr
    9970:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    9974:	4770      	bx	lr
    9976:	0000      	.short	0x0000
    9978:	20000120 	.word	0x20000120
    997c:	b538      	push	{r3, r4, r5, lr}
    997e:	4c11      	ldr	r4, [pc, #68]	; (99c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    9980:	6862      	ldr	r2, [r4, #4]
    9982:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    9986:	f8ad 2000 	strh.w	r2, [sp]
    998a:	f004 fc05 	bl	e198 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    998e:	f89d 3000 	ldrb.w	r3, [sp]
    9992:	b2c2      	uxtb	r2, r0
    9994:	2100      	movs	r1, #0
    9996:	4293      	cmp	r3, r2
    9998:	d003      	beq.n	99a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    999a:	6863      	ldr	r3, [r4, #4]
    999c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    99a0:	e002      	b.n	99a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    99a2:	6862      	ldr	r2, [r4, #4]
    99a4:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    99a8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    99ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
    99b0:	4282      	cmp	r2, r0
    99b2:	d003      	beq.n	99bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    99b4:	6861      	ldr	r1, [r4, #4]
    99b6:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    99ba:	bd38      	pop	{r3, r4, r5, pc}
    99bc:	6860      	ldr	r0, [r4, #4]
    99be:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    99c2:	bd38      	pop	{r3, r4, r5, pc}
    99c4:	20000120 	.word	0x20000120
    99c8:	b510      	push	{r4, lr}
    99ca:	4c0c      	ldr	r4, [pc, #48]	; (99fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    99cc:	6861      	ldr	r1, [r4, #4]
    99ce:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    99d2:	2813      	cmp	r0, #19
    99d4:	d001      	beq.n	99da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    99d6:	2002      	movs	r0, #2
    99d8:	bd10      	pop	{r4, pc}
    99da:	f201 117d 	addw	r1, r1, #381	; 0x17d
    99de:	68e0      	ldr	r0, [r4, #12]
    99e0:	f004 fd15 	bl	e40e <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    99e4:	6861      	ldr	r1, [r4, #4]
    99e6:	68e0      	ldr	r0, [r4, #12]
    99e8:	31f4      	adds	r1, #244	; 0xf4
    99ea:	f004 fd0d 	bl	e408 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    99ee:	6861      	ldr	r1, [r4, #4]
    99f0:	2016      	movs	r0, #22
    99f2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99f6:	2000      	movs	r0, #0
    99f8:	bd10      	pop	{r4, pc}
    99fa:	0000      	.short	0x0000
    99fc:	20000120 	.word	0x20000120
    9a00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9a02:	4c1d      	ldr	r4, [pc, #116]	; (9a78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    9a04:	2300      	movs	r3, #0
    9a06:	2107      	movs	r1, #7
    9a08:	6860      	ldr	r0, [r4, #4]
    9a0a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a0e:	3078      	adds	r0, #120	; 0x78
    9a10:	f004 fae9 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a14:	b370      	cbz	r0, 9a74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    9a16:	4669      	mov	r1, sp
    9a18:	68e0      	ldr	r0, [r4, #12]
    9a1a:	f004 fcfd 	bl	e418 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9a1e:	f001 fb73 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9a22:	f644 112f 	movw	r1, #18735	; 0x492f
    9a26:	4008      	ands	r0, r1
    9a28:	f89d 2000 	ldrb.w	r2, [sp]
    9a2c:	6861      	ldr	r1, [r4, #4]
    9a2e:	4002      	ands	r2, r0
    9a30:	2500      	movs	r5, #0
    9a32:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    9a36:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9a3a:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9a3e:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    9a42:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    9a46:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    9a4a:	8808      	ldrh	r0, [r1, #0]
    9a4c:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    9a50:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    9a54:	9a00      	ldr	r2, [sp, #0]
    9a56:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    9a5a:	9a01      	ldr	r2, [sp, #4]
    9a5c:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    9a60:	2001      	movs	r0, #1
    9a62:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    9a66:	f7fc fb5d 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a6a:	6860      	ldr	r0, [r4, #4]
    9a6c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9a70:	2000      	movs	r0, #0
    9a72:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a74:	2001      	movs	r0, #1
    9a76:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a78:	20000120 	.word	0x20000120
    9a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a80:	4c19      	ldr	r4, [pc, #100]	; (9ae8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    9a82:	2600      	movs	r6, #0
    9a84:	2703      	movs	r7, #3
    9a86:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9a8a:	2501      	movs	r5, #1
    9a8c:	b1a0      	cbz	r0, 9ab8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    9a8e:	68e0      	ldr	r0, [r4, #12]
    9a90:	78c0      	ldrb	r0, [r0, #3]
    9a92:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    9a96:	fa05 f000 	lsl.w	r0, r5, r0
    9a9a:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9a9e:	b130      	cbz	r0, 9aae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9aa0:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    9aa4:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9aa8:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9aac:	e017      	b.n	9ade <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9aae:	f240 5143 	movw	r1, #1347	; 0x543
    9ab2:	2036      	movs	r0, #54	; 0x36
    9ab4:	f7fa f9f6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ab8:	2300      	movs	r3, #0
    9aba:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9abe:	4619      	mov	r1, r3
    9ac0:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    9ac4:	f004 fa8f 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ac8:	b160      	cbz	r0, 9ae4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    9aca:	68e0      	ldr	r0, [r4, #12]
    9acc:	78c1      	ldrb	r1, [r0, #3]
    9ace:	6860      	ldr	r0, [r4, #4]
    9ad0:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    9ad4:	f800 7f86 	strb.w	r7, [r0, #134]!
    9ad8:	8686      	strh	r6, [r0, #52]	; 0x34
    9ada:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9ade:	2000      	movs	r0, #0
    9ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ae4:	2001      	movs	r0, #1
    9ae6:	e7fb      	b.n	9ae0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    9ae8:	20000120 	.word	0x20000120
    9aec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9af0:	4c30      	ldr	r4, [pc, #192]	; (9bb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    9af2:	2300      	movs	r3, #0
    9af4:	4619      	mov	r1, r3
    9af6:	6860      	ldr	r0, [r4, #4]
    9af8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9afc:	3078      	adds	r0, #120	; 0x78
    9afe:	f004 fa72 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b02:	b308      	cbz	r0, 9b48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    9b04:	68e0      	ldr	r0, [r4, #12]
    9b06:	f004 fc9c 	bl	e442 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9b0a:	b300      	cbz	r0, 9b4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    9b0c:	68e0      	ldr	r0, [r4, #12]
    9b0e:	f004 fc8e 	bl	e42e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9b12:	4607      	mov	r7, r0
    9b14:	68e0      	ldr	r0, [r4, #12]
    9b16:	f004 fc8e 	bl	e436 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9b1a:	4606      	mov	r6, r0
    9b1c:	68e0      	ldr	r0, [r4, #12]
    9b1e:	f004 fc84 	bl	e42a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9b22:	4605      	mov	r5, r0
    9b24:	68e0      	ldr	r0, [r4, #12]
    9b26:	f004 fc84 	bl	e432 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9b2a:	4601      	mov	r1, r0
    9b2c:	9700      	str	r7, [sp, #0]
    9b2e:	6860      	ldr	r0, [r4, #4]
    9b30:	4633      	mov	r3, r6
    9b32:	462a      	mov	r2, r5
    9b34:	302c      	adds	r0, #44	; 0x2c
    9b36:	f004 fedb 	bl	e8f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9b3a:	6861      	ldr	r1, [r4, #4]
    9b3c:	2501      	movs	r5, #1
    9b3e:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9b42:	281c      	cmp	r0, #28
    9b44:	d008      	beq.n	9b58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    9b46:	e009      	b.n	9b5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    9b48:	2001      	movs	r0, #1
    9b4a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9b4e:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9b52:	2000      	movs	r0, #0
    9b54:	f7ff bf92 	b.w	9a7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9b58:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9b5c:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9b60:	2801      	cmp	r0, #1
    9b62:	d011      	beq.n	9b88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9b64:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    9b68:	f88d 0004 	strb.w	r0, [sp, #4]
    9b6c:	9801      	ldr	r0, [sp, #4]
    9b6e:	9001      	str	r0, [sp, #4]
    9b70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b74:	b940      	cbnz	r0, 9b88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9b76:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    9b7a:	f88d 0000 	strb.w	r0, [sp]
    9b7e:	9800      	ldr	r0, [sp, #0]
    9b80:	9000      	str	r0, [sp, #0]
    9b82:	f89d 0000 	ldrb.w	r0, [sp]
    9b86:	b118      	cbz	r0, 9b90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    9b88:	201e      	movs	r0, #30
    9b8a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9b8e:	e00a      	b.n	9ba6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9b90:	201d      	movs	r0, #29
    9b92:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9b96:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9b9a:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9b9e:	f004 feae 	bl	e8fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9ba2:	f7fc fabf 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ba6:	6860      	ldr	r0, [r4, #4]
    9ba8:	2100      	movs	r1, #0
    9baa:	f820 1fba 	strh.w	r1, [r0, #186]!
    9bae:	7085      	strb	r5, [r0, #2]
    9bb0:	4608      	mov	r0, r1
    9bb2:	e7ca      	b.n	9b4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9bb4:	20000120 	.word	0x20000120
    9bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bba:	4c1a      	ldr	r4, [pc, #104]	; (9c24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9bbc:	2300      	movs	r3, #0
    9bbe:	210a      	movs	r1, #10
    9bc0:	6860      	ldr	r0, [r4, #4]
    9bc2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9bc6:	3078      	adds	r0, #120	; 0x78
    9bc8:	f004 fa0d 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bcc:	b338      	cbz	r0, 9c1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9bce:	68e0      	ldr	r0, [r4, #12]
    9bd0:	f004 fc37 	bl	e442 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9bd4:	b1c8      	cbz	r0, 9c0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    9bd6:	68e0      	ldr	r0, [r4, #12]
    9bd8:	f004 fc29 	bl	e42e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9bdc:	4607      	mov	r7, r0
    9bde:	68e0      	ldr	r0, [r4, #12]
    9be0:	f004 fc29 	bl	e436 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9be4:	4606      	mov	r6, r0
    9be6:	68e0      	ldr	r0, [r4, #12]
    9be8:	f004 fc1f 	bl	e42a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9bec:	4605      	mov	r5, r0
    9bee:	68e0      	ldr	r0, [r4, #12]
    9bf0:	f004 fc1f 	bl	e432 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9bf4:	4601      	mov	r1, r0
    9bf6:	9700      	str	r7, [sp, #0]
    9bf8:	6860      	ldr	r0, [r4, #4]
    9bfa:	4633      	mov	r3, r6
    9bfc:	462a      	mov	r2, r5
    9bfe:	302c      	adds	r0, #44	; 0x2c
    9c00:	f004 fe76 	bl	e8f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c04:	6860      	ldr	r0, [r4, #4]
    9c06:	f004 fde5 	bl	e7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9c0a:	6861      	ldr	r1, [r4, #4]
    9c0c:	2000      	movs	r0, #0
    9c0e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9c12:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9c16:	f7ff fabf 	bl	9198 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9c1a:	2000      	movs	r0, #0
    9c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c1e:	2001      	movs	r0, #1
    9c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c22:	0000      	.short	0x0000
    9c24:	20000120 	.word	0x20000120
    9c28:	b510      	push	{r4, lr}
    9c2a:	4c0b      	ldr	r4, [pc, #44]	; (9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9c2c:	2300      	movs	r3, #0
    9c2e:	4619      	mov	r1, r3
    9c30:	6860      	ldr	r0, [r4, #4]
    9c32:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c36:	3078      	adds	r0, #120	; 0x78
    9c38:	f004 f9d5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c3c:	b150      	cbz	r0, 9c54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9c3e:	6860      	ldr	r0, [r4, #4]
    9c40:	2100      	movs	r1, #0
    9c42:	f820 1fba 	strh.w	r1, [r0, #186]!
    9c46:	2101      	movs	r1, #1
    9c48:	7081      	strb	r1, [r0, #2]
    9c4a:	2102      	movs	r1, #2
    9c4c:	f800 1c34 	strb.w	r1, [r0, #-52]
    9c50:	2000      	movs	r0, #0
    9c52:	bd10      	pop	{r4, pc}
    9c54:	2001      	movs	r0, #1
    9c56:	bd10      	pop	{r4, pc}
    9c58:	20000120 	.word	0x20000120
    9c5c:	b510      	push	{r4, lr}
    9c5e:	4c09      	ldr	r4, [pc, #36]	; (9c84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9c60:	2300      	movs	r3, #0
    9c62:	2109      	movs	r1, #9
    9c64:	6860      	ldr	r0, [r4, #4]
    9c66:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c6a:	3078      	adds	r0, #120	; 0x78
    9c6c:	f004 f9bb 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c70:	2800      	cmp	r0, #0
    9c72:	d006      	beq.n	9c82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9c74:	6861      	ldr	r1, [r4, #4]
    9c76:	2000      	movs	r0, #0
    9c78:	f801 0fac 	strb.w	r0, [r1, #172]!
    9c7c:	7308      	strb	r0, [r1, #12]
    9c7e:	f801 0c27 	strb.w	r0, [r1, #-39]
    9c82:	bd10      	pop	{r4, pc}
    9c84:	20000120 	.word	0x20000120
    9c88:	4807      	ldr	r0, [pc, #28]	; (9ca8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9c8a:	6840      	ldr	r0, [r0, #4]
    9c8c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9c90:	290f      	cmp	r1, #15
    9c92:	d001      	beq.n	9c98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9c94:	2002      	movs	r0, #2
    9c96:	4770      	bx	lr
    9c98:	2100      	movs	r1, #0
    9c9a:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9c9e:	2112      	movs	r1, #18
    9ca0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9ca4:	2000      	movs	r0, #0
    9ca6:	4770      	bx	lr
    9ca8:	20000120 	.word	0x20000120
    9cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cae:	4c42      	ldr	r4, [pc, #264]	; (9db8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9cb0:	2600      	movs	r6, #0
    9cb2:	b087      	sub	sp, #28
    9cb4:	6860      	ldr	r0, [r4, #4]
    9cb6:	4633      	mov	r3, r6
    9cb8:	4631      	mov	r1, r6
    9cba:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9cbe:	3078      	adds	r0, #120	; 0x78
    9cc0:	f004 f991 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cc4:	b180      	cbz	r0, 9ce8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9cc6:	6860      	ldr	r0, [r4, #4]
    9cc8:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ccc:	2823      	cmp	r0, #35	; 0x23
    9cce:	d00e      	beq.n	9cee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9cd0:	2824      	cmp	r0, #36	; 0x24
    9cd2:	d00c      	beq.n	9cee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9cd4:	4668      	mov	r0, sp
    9cd6:	f7fa feeb 	bl	4ab0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9cda:	b150      	cbz	r0, 9cf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9cdc:	9800      	ldr	r0, [sp, #0]
    9cde:	a901      	add	r1, sp, #4
    9ce0:	78c0      	ldrb	r0, [r0, #3]
    9ce2:	f88d 0004 	strb.w	r0, [sp, #4]
    9ce6:	e005      	b.n	9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9ce8:	2001      	movs	r0, #1
    9cea:	b007      	add	sp, #28
    9cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cee:	2020      	movs	r0, #32
    9cf0:	e7fb      	b.n	9cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9cf2:	2100      	movs	r1, #0
    9cf4:	6860      	ldr	r0, [r4, #4]
    9cf6:	ab04      	add	r3, sp, #16
    9cf8:	2216      	movs	r2, #22
    9cfa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9cfe:	f004 fa2e 	bl	e15e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9d02:	2700      	movs	r7, #0
    9d04:	2501      	movs	r5, #1
    9d06:	b178      	cbz	r0, 9d28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9d08:	6860      	ldr	r0, [r4, #4]
    9d0a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9d0e:	2216      	movs	r2, #22
    9d10:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9d14:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9d18:	2119      	movs	r1, #25
    9d1a:	f800 1f86 	strb.w	r1, [r0, #134]!
    9d1e:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9d22:	8687      	strh	r7, [r0, #52]	; 0x34
    9d24:	2000      	movs	r0, #0
    9d26:	e7e0      	b.n	9cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9d28:	68e0      	ldr	r0, [r4, #12]
    9d2a:	f004 fba6 	bl	e47a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9d2e:	b1a8      	cbz	r0, 9d5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9d30:	68e1      	ldr	r1, [r4, #12]
    9d32:	7908      	ldrb	r0, [r1, #4]
    9d34:	f000 0207 	and.w	r2, r0, #7
    9d38:	6860      	ldr	r0, [r4, #4]
    9d3a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9d3e:	7949      	ldrb	r1, [r1, #5]
    9d40:	f001 0107 	and.w	r1, r1, #7
    9d44:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9d48:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9d4c:	f88d 3018 	strb.w	r3, [sp, #24]
    9d50:	9b06      	ldr	r3, [sp, #24]
    9d52:	9301      	str	r3, [sp, #4]
    9d54:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9d58:	bb23      	cbnz	r3, 9da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9d5a:	e004      	b.n	9d66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9d5c:	2000      	movs	r0, #0
    9d5e:	f7ff fe8d 	bl	9a7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9d62:	4606      	mov	r6, r0
    9d64:	e025      	b.n	9db2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9d66:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9d6a:	2b01      	cmp	r3, #1
    9d6c:	d01a      	beq.n	9da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9d6e:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9d72:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9d76:	4594      	cmp	ip, r2
    9d78:	d106      	bne.n	9d88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9d7a:	781a      	ldrb	r2, [r3, #0]
    9d7c:	428a      	cmp	r2, r1
    9d7e:	d103      	bne.n	9d88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9d80:	2102      	movs	r1, #2
    9d82:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9d86:	e00d      	b.n	9da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9d88:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9d8c:	8802      	ldrh	r2, [r0, #0]
    9d8e:	f821 2902 	strh.w	r2, [r1], #-2
    9d92:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9d96:	710a      	strb	r2, [r1, #4]
    9d98:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9d9c:	7148      	strb	r0, [r1, #5]
    9d9e:	700d      	strb	r5, [r1, #0]
    9da0:	f7fc f9c0 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9da4:	6860      	ldr	r0, [r4, #4]
    9da6:	2121      	movs	r1, #33	; 0x21
    9da8:	f800 1f86 	strb.w	r1, [r0, #134]!
    9dac:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9db0:	8687      	strh	r7, [r0, #52]	; 0x34
    9db2:	4630      	mov	r0, r6
    9db4:	e799      	b.n	9cea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9db6:	0000      	.short	0x0000
    9db8:	20000120 	.word	0x20000120
    9dbc:	b570      	push	{r4, r5, r6, lr}
    9dbe:	4c18      	ldr	r4, [pc, #96]	; (9e20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9dc0:	6860      	ldr	r0, [r4, #4]
    9dc2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9dc6:	281f      	cmp	r0, #31
    9dc8:	d001      	beq.n	9dce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9dca:	2001      	movs	r0, #1
    9dcc:	bd70      	pop	{r4, r5, r6, pc}
    9dce:	68e0      	ldr	r0, [r4, #12]
    9dd0:	f004 fb5d 	bl	e48e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9dd4:	b1d8      	cbz	r0, 9e0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9dd6:	68e0      	ldr	r0, [r4, #12]
    9dd8:	2201      	movs	r2, #1
    9dda:	7901      	ldrb	r1, [r0, #4]
    9ddc:	7940      	ldrb	r0, [r0, #5]
    9dde:	f001 0107 	and.w	r1, r1, #7
    9de2:	f361 0507 	bfi	r5, r1, #0, #8
    9de6:	4629      	mov	r1, r5
    9de8:	f000 0007 	and.w	r0, r0, #7
    9dec:	f360 210f 	bfi	r1, r0, #8, #8
    9df0:	6860      	ldr	r0, [r4, #4]
    9df2:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9df6:	2200      	movs	r2, #0
    9df8:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9dfc:	2223      	movs	r2, #35	; 0x23
    9dfe:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9e02:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9e06:	f7ff fdb9 	bl	997c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9e0a:	2000      	movs	r0, #0
    9e0c:	bd70      	pop	{r4, r5, r6, pc}
    9e0e:	2001      	movs	r0, #1
    9e10:	f7ff fe34 	bl	9a7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9e14:	4604      	mov	r4, r0
    9e16:	201e      	movs	r0, #30
    9e18:	f7ff fd6a 	bl	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9e1c:	4620      	mov	r0, r4
    9e1e:	bd70      	pop	{r4, r5, r6, pc}
    9e20:	20000120 	.word	0x20000120
    9e24:	b570      	push	{r4, r5, r6, lr}
    9e26:	4d07      	ldr	r5, [pc, #28]	; (9e44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9e28:	2400      	movs	r4, #0
    9e2a:	68e8      	ldr	r0, [r5, #12]
    9e2c:	f004 fb39 	bl	e4a2 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9e30:	2803      	cmp	r0, #3
    9e32:	d105      	bne.n	9e40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9e34:	68e8      	ldr	r0, [r5, #12]
    9e36:	f004 fb36 	bl	e4a6 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9e3a:	f000 f805 	bl	9e48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9e3e:	4604      	mov	r4, r0
    9e40:	4620      	mov	r0, r4
    9e42:	bd70      	pop	{r4, r5, r6, pc}
    9e44:	20000120 	.word	0x20000120
    9e48:	b570      	push	{r4, r5, r6, lr}
    9e4a:	4d18      	ldr	r5, [pc, #96]	; (9eac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9e4c:	6869      	ldr	r1, [r5, #4]
    9e4e:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9e52:	2a16      	cmp	r2, #22
    9e54:	d001      	beq.n	9e5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9e56:	2a13      	cmp	r2, #19
    9e58:	d102      	bne.n	9e60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9e5a:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9e5e:	b10a      	cbz	r2, 9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9e60:	2002      	movs	r0, #2
    9e62:	bd70      	pop	{r4, r5, r6, pc}
    9e64:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9e68:	2400      	movs	r4, #0
    9e6a:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9e6e:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9e72:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9e76:	b122      	cbz	r2, 9e82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9e78:	f240 21eb 	movw	r1, #747	; 0x2eb
    9e7c:	2036      	movs	r0, #54	; 0x36
    9e7e:	f7fa f811 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e82:	880a      	ldrh	r2, [r1, #0]
    9e84:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9e88:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9e8c:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9e90:	200d      	movs	r0, #13
    9e92:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9e96:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9e9a:	f000 fb9b 	bl	a5d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9e9e:	f7fc f941 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ea2:	6868      	ldr	r0, [r5, #4]
    9ea4:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9ea8:	2000      	movs	r0, #0
    9eaa:	bd70      	pop	{r4, r5, r6, pc}
    9eac:	20000120 	.word	0x20000120
    9eb0:	4802      	ldr	r0, [pc, #8]	; (9ebc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9eb2:	68c0      	ldr	r0, [r0, #12]
    9eb4:	7900      	ldrb	r0, [r0, #4]
    9eb6:	f7ff bfc7 	b.w	9e48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9eba:	0000      	.short	0x0000
    9ebc:	20000120 	.word	0x20000120
    9ec0:	b510      	push	{r4, lr}
    9ec2:	4c0e      	ldr	r4, [pc, #56]	; (9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9ec4:	6860      	ldr	r0, [r4, #4]
    9ec6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9eca:	2916      	cmp	r1, #22
    9ecc:	d001      	beq.n	9ed2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9ece:	2002      	movs	r0, #2
    9ed0:	bd10      	pop	{r4, pc}
    9ed2:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9ed6:	f200 1175 	addw	r1, r0, #373	; 0x175
    9eda:	2200      	movs	r2, #0
    9edc:	f200 1065 	addw	r0, r0, #357	; 0x165
    9ee0:	f003 ffeb 	bl	deba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9ee4:	6860      	ldr	r0, [r4, #4]
    9ee6:	2100      	movs	r1, #0
    9ee8:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9eec:	2101      	movs	r1, #1
    9eee:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9ef2:	2118      	movs	r1, #24
    9ef4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9ef8:	2000      	movs	r0, #0
    9efa:	bd10      	pop	{r4, pc}
    9efc:	20000120 	.word	0x20000120
    9f00:	b570      	push	{r4, r5, r6, lr}
    9f02:	4d1b      	ldr	r5, [pc, #108]	; (9f70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9f04:	6868      	ldr	r0, [r5, #4]
    9f06:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f0a:	291a      	cmp	r1, #26
    9f0c:	d001      	beq.n	9f12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9f0e:	2002      	movs	r0, #2
    9f10:	bd70      	pop	{r4, r5, r6, pc}
    9f12:	2400      	movs	r4, #0
    9f14:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9f18:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9f1c:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9f20:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9f24:	b121      	cbz	r1, 9f30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9f26:	f240 3113 	movw	r1, #787	; 0x313
    9f2a:	2036      	movs	r0, #54	; 0x36
    9f2c:	f7f9 ffba 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f30:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9f34:	b141      	cbz	r1, 9f48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9f36:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9f3a:	8801      	ldrh	r1, [r0, #0]
    9f3c:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9f40:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9f44:	210e      	movs	r1, #14
    9f46:	e008      	b.n	9f5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9f48:	8801      	ldrh	r1, [r0, #0]
    9f4a:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9f4e:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9f52:	2101      	movs	r1, #1
    9f54:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9f58:	210d      	movs	r1, #13
    9f5a:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9f5e:	f000 fb39 	bl	a5d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9f62:	f7fc f8df 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f66:	6868      	ldr	r0, [r5, #4]
    9f68:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9f6c:	2000      	movs	r0, #0
    9f6e:	bd70      	pop	{r4, r5, r6, pc}
    9f70:	20000120 	.word	0x20000120
    9f74:	b510      	push	{r4, lr}
    9f76:	4c0d      	ldr	r4, [pc, #52]	; (9fac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9f78:	2300      	movs	r3, #0
    9f7a:	2101      	movs	r1, #1
    9f7c:	6860      	ldr	r0, [r4, #4]
    9f7e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9f82:	3078      	adds	r0, #120	; 0x78
    9f84:	f004 f82f 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f88:	b108      	cbz	r0, 9f8e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9f8a:	2000      	movs	r0, #0
    9f8c:	bd10      	pop	{r4, pc}
    9f8e:	68e0      	ldr	r0, [r4, #12]
    9f90:	f004 fa53 	bl	e43a <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9f94:	6861      	ldr	r1, [r4, #4]
    9f96:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9f9a:	2007      	movs	r0, #7
    9f9c:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9fa0:	2000      	movs	r0, #0
    9fa2:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9fa6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9faa:	e7ee      	b.n	9f8a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9fac:	20000120 	.word	0x20000120
    9fb0:	b570      	push	{r4, r5, r6, lr}
    9fb2:	4c25      	ldr	r4, [pc, #148]	; (a048 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9fb4:	2600      	movs	r6, #0
    9fb6:	2109      	movs	r1, #9
    9fb8:	6860      	ldr	r0, [r4, #4]
    9fba:	4633      	mov	r3, r6
    9fbc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fc0:	3078      	adds	r0, #120	; 0x78
    9fc2:	f004 f810 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fc6:	2500      	movs	r5, #0
    9fc8:	b118      	cbz	r0, 9fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9fca:	68e0      	ldr	r0, [r4, #12]
    9fcc:	7900      	ldrb	r0, [r0, #4]
    9fce:	2812      	cmp	r0, #18
    9fd0:	d011      	beq.n	9ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9fd2:	6860      	ldr	r0, [r4, #4]
    9fd4:	210a      	movs	r1, #10
    9fd6:	2300      	movs	r3, #0
    9fd8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fdc:	3078      	adds	r0, #120	; 0x78
    9fde:	f004 f802 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe2:	b118      	cbz	r0, 9fec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9fe4:	68e0      	ldr	r0, [r4, #12]
    9fe6:	7900      	ldrb	r0, [r0, #4]
    9fe8:	2814      	cmp	r0, #20
    9fea:	d008      	beq.n	9ffe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9fec:	68e0      	ldr	r0, [r4, #12]
    9fee:	7900      	ldrb	r0, [r0, #4]
    9ff0:	2816      	cmp	r0, #22
    9ff2:	d012      	beq.n	a01a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9ff4:	e026      	b.n	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9ff6:	f7ff fe31 	bl	9c5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9ffa:	4606      	mov	r6, r0
    9ffc:	e022      	b.n	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9ffe:	6860      	ldr	r0, [r4, #4]
    a000:	2105      	movs	r1, #5
    a002:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a006:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    a00a:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a00e:	30c6      	adds	r0, #198	; 0xc6
    a010:	f004 ff0a 	bl	ee28 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a014:	f7ff f8c0 	bl	9198 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    a018:	e014      	b.n	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a01a:	6860      	ldr	r0, [r4, #4]
    a01c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a020:	291f      	cmp	r1, #31
    a022:	d10f      	bne.n	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a024:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a028:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a02c:	2108      	movs	r1, #8
    a02e:	30c6      	adds	r0, #198	; 0xc6
    a030:	f004 fefa 	bl	ee28 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a034:	6860      	ldr	r0, [r4, #4]
    a036:	210b      	movs	r1, #11
    a038:	30c6      	adds	r0, #198	; 0xc6
    a03a:	f004 fef5 	bl	ee28 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a03e:	201a      	movs	r0, #26
    a040:	f7ff fc56 	bl	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a044:	4630      	mov	r0, r6
    a046:	bd70      	pop	{r4, r5, r6, pc}
    a048:	20000120 	.word	0x20000120
    a04c:	b570      	push	{r4, r5, r6, lr}
    a04e:	4c32      	ldr	r4, [pc, #200]	; (a118 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    a050:	2300      	movs	r3, #0
    a052:	4619      	mov	r1, r3
    a054:	6860      	ldr	r0, [r4, #4]
    a056:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a05a:	3078      	adds	r0, #120	; 0x78
    a05c:	f003 ffc3 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a060:	b940      	cbnz	r0, a074 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    a062:	6860      	ldr	r0, [r4, #4]
    a064:	2300      	movs	r3, #0
    a066:	2108      	movs	r1, #8
    a068:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a06c:	3078      	adds	r0, #120	; 0x78
    a06e:	f003 ffba 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a072:	b1f8      	cbz	r0, a0b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    a074:	6860      	ldr	r0, [r4, #4]
    a076:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a07a:	0780      	lsls	r0, r0, #30
    a07c:	d412      	bmi.n	a0a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    a07e:	68e0      	ldr	r0, [r4, #12]
    a080:	f004 f9dd 	bl	e43e <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a084:	6861      	ldr	r1, [r4, #4]
    a086:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    a08a:	68e0      	ldr	r0, [r4, #12]
    a08c:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a090:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    a094:	8840      	ldrh	r0, [r0, #2]
    a096:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    a09a:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    a09e:	f040 0002 	orr.w	r0, r0, #2
    a0a2:	7008      	strb	r0, [r1, #0]
    a0a4:	6860      	ldr	r0, [r4, #4]
    a0a6:	f04f 0500 	mov.w	r5, #0
    a0aa:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a0ae:	07c9      	lsls	r1, r1, #31
    a0b0:	d002      	beq.n	a0b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    a0b2:	e010      	b.n	a0d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    a0b4:	2001      	movs	r0, #1
    a0b6:	bd70      	pop	{r4, r5, r6, pc}
    a0b8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a0bc:	2300      	movs	r3, #0
    a0be:	4619      	mov	r1, r3
    a0c0:	3078      	adds	r0, #120	; 0x78
    a0c2:	f003 ff90 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0c6:	b160      	cbz	r0, a0e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    a0c8:	6860      	ldr	r0, [r4, #4]
    a0ca:	2101      	movs	r1, #1
    a0cc:	f800 1f86 	strb.w	r1, [r0, #134]!
    a0d0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    a0d4:	8685      	strh	r5, [r0, #52]	; 0x34
    a0d6:	6860      	ldr	r0, [r4, #4]
    a0d8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a0dc:	2901      	cmp	r1, #1
    a0de:	d005      	beq.n	a0ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    a0e0:	e00a      	b.n	a0f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    a0e2:	f240 314e 	movw	r1, #846	; 0x34e
    a0e6:	2036      	movs	r0, #54	; 0x36
    a0e8:	f7f9 fedc 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0ec:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a0f0:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a0f4:	f7fc f816 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0f8:	6860      	ldr	r0, [r4, #4]
    a0fa:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a0fe:	b149      	cbz	r1, a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a100:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    a104:	f7fc f80e 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a108:	6860      	ldr	r0, [r4, #4]
    a10a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a10e:	b909      	cbnz	r1, a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a110:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a114:	2000      	movs	r0, #0
    a116:	bd70      	pop	{r4, r5, r6, pc}
    a118:	20000120 	.word	0x20000120
    a11c:	b510      	push	{r4, lr}
    a11e:	4c0a      	ldr	r4, [pc, #40]	; (a148 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    a120:	2300      	movs	r3, #0
    a122:	4619      	mov	r1, r3
    a124:	6860      	ldr	r0, [r4, #4]
    a126:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a12a:	3078      	adds	r0, #120	; 0x78
    a12c:	f003 ff5b 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a130:	b120      	cbz	r0, a13c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    a132:	6861      	ldr	r1, [r4, #4]
    a134:	200c      	movs	r0, #12
    a136:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a13a:	bd10      	pop	{r4, pc}
    a13c:	f240 51fa 	movw	r1, #1530	; 0x5fa
    a140:	2036      	movs	r0, #54	; 0x36
    a142:	f7f9 feaf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a146:	0000      	.short	0x0000
    a148:	20000120 	.word	0x20000120
    a14c:	b510      	push	{r4, lr}
    a14e:	4c0a      	ldr	r4, [pc, #40]	; (a178 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    a150:	2300      	movs	r3, #0
    a152:	4619      	mov	r1, r3
    a154:	6860      	ldr	r0, [r4, #4]
    a156:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a15a:	3078      	adds	r0, #120	; 0x78
    a15c:	f003 ff43 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a160:	b120      	cbz	r0, a16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    a162:	6861      	ldr	r1, [r4, #4]
    a164:	200d      	movs	r0, #13
    a166:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a16a:	bd10      	pop	{r4, pc}
    a16c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    a170:	2036      	movs	r0, #54	; 0x36
    a172:	f7f9 fe97 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a176:	0000      	.short	0x0000
    a178:	20000120 	.word	0x20000120
    a17c:	b510      	push	{r4, lr}
    a17e:	4c0d      	ldr	r4, [pc, #52]	; (a1b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    a180:	2300      	movs	r3, #0
    a182:	4619      	mov	r1, r3
    a184:	6860      	ldr	r0, [r4, #4]
    a186:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a18a:	3078      	adds	r0, #120	; 0x78
    a18c:	f003 ff2b 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a190:	b918      	cbnz	r0, a19a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    a192:	6860      	ldr	r0, [r4, #4]
    a194:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a198:	b138      	cbz	r0, a1aa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a19a:	6860      	ldr	r0, [r4, #4]
    a19c:	2101      	movs	r1, #1
    a19e:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a1a2:	2113      	movs	r1, #19
    a1a4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a1a8:	bd10      	pop	{r4, pc}
    a1aa:	f240 6115 	movw	r1, #1557	; 0x615
    a1ae:	2036      	movs	r0, #54	; 0x36
    a1b0:	f7f9 fe78 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1b4:	20000120 	.word	0x20000120
    a1b8:	b510      	push	{r4, lr}
    a1ba:	4c0a      	ldr	r4, [pc, #40]	; (a1e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a1bc:	2300      	movs	r3, #0
    a1be:	4619      	mov	r1, r3
    a1c0:	6860      	ldr	r0, [r4, #4]
    a1c2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1c6:	3078      	adds	r0, #120	; 0x78
    a1c8:	f003 ff0d 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1cc:	b120      	cbz	r0, a1d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a1ce:	6861      	ldr	r1, [r4, #4]
    a1d0:	2004      	movs	r0, #4
    a1d2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a1d6:	bd10      	pop	{r4, pc}
    a1d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a1dc:	2036      	movs	r0, #54	; 0x36
    a1de:	f7f9 fe61 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1e2:	0000      	.short	0x0000
    a1e4:	20000120 	.word	0x20000120
    a1e8:	b510      	push	{r4, lr}
    a1ea:	4c0a      	ldr	r4, [pc, #40]	; (a214 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a1ec:	2300      	movs	r3, #0
    a1ee:	4619      	mov	r1, r3
    a1f0:	6860      	ldr	r0, [r4, #4]
    a1f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1f6:	3078      	adds	r0, #120	; 0x78
    a1f8:	f003 fef5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1fc:	b120      	cbz	r0, a208 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a1fe:	6861      	ldr	r1, [r4, #4]
    a200:	201c      	movs	r0, #28
    a202:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a206:	bd10      	pop	{r4, pc}
    a208:	f240 614c 	movw	r1, #1612	; 0x64c
    a20c:	2036      	movs	r0, #54	; 0x36
    a20e:	f7f9 fe49 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a212:	0000      	.short	0x0000
    a214:	20000120 	.word	0x20000120
    a218:	b510      	push	{r4, lr}
    a21a:	4c0a      	ldr	r4, [pc, #40]	; (a244 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a21c:	2300      	movs	r3, #0
    a21e:	4619      	mov	r1, r3
    a220:	6860      	ldr	r0, [r4, #4]
    a222:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a226:	3078      	adds	r0, #120	; 0x78
    a228:	f003 fedd 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a22c:	b120      	cbz	r0, a238 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a22e:	6861      	ldr	r1, [r4, #4]
    a230:	2000      	movs	r0, #0
    a232:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a236:	bd10      	pop	{r4, pc}
    a238:	f240 6153 	movw	r1, #1619	; 0x653
    a23c:	2036      	movs	r0, #54	; 0x36
    a23e:	f7f9 fe31 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a242:	0000      	.short	0x0000
    a244:	20000120 	.word	0x20000120
    a248:	b510      	push	{r4, lr}
    a24a:	4c0a      	ldr	r4, [pc, #40]	; (a274 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a24c:	2300      	movs	r3, #0
    a24e:	4619      	mov	r1, r3
    a250:	6860      	ldr	r0, [r4, #4]
    a252:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a256:	3078      	adds	r0, #120	; 0x78
    a258:	f003 fec5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a25c:	b120      	cbz	r0, a268 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a25e:	6861      	ldr	r1, [r4, #4]
    a260:	2005      	movs	r0, #5
    a262:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a266:	bd10      	pop	{r4, pc}
    a268:	f240 613f 	movw	r1, #1599	; 0x63f
    a26c:	2036      	movs	r0, #54	; 0x36
    a26e:	f7f9 fe19 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a272:	0000      	.short	0x0000
    a274:	20000120 	.word	0x20000120
    a278:	4902      	ldr	r1, [pc, #8]	; (a284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a27a:	2000      	movs	r0, #0
    a27c:	6849      	ldr	r1, [r1, #4]
    a27e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a282:	4770      	bx	lr
    a284:	20000120 	.word	0x20000120
    a288:	b510      	push	{r4, lr}
    a28a:	4c0b      	ldr	r4, [pc, #44]	; (a2b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a28c:	2300      	movs	r3, #0
    a28e:	4619      	mov	r1, r3
    a290:	6860      	ldr	r0, [r4, #4]
    a292:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a296:	3078      	adds	r0, #120	; 0x78
    a298:	f003 fea5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a29c:	b138      	cbz	r0, a2ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a29e:	6860      	ldr	r0, [r4, #4]
    a2a0:	2101      	movs	r1, #1
    a2a2:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a2a6:	210f      	movs	r1, #15
    a2a8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a2ac:	bd10      	pop	{r4, pc}
    a2ae:	f240 6106 	movw	r1, #1542	; 0x606
    a2b2:	2036      	movs	r0, #54	; 0x36
    a2b4:	f7f9 fdf6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2b8:	20000120 	.word	0x20000120
    a2bc:	4809      	ldr	r0, [pc, #36]	; (a2e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a2be:	b510      	push	{r4, lr}
    a2c0:	6840      	ldr	r0, [r0, #4]
    a2c2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a2c6:	2912      	cmp	r1, #18
    a2c8:	d004      	beq.n	a2d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a2ca:	f240 610e 	movw	r1, #1550	; 0x60e
    a2ce:	2036      	movs	r0, #54	; 0x36
    a2d0:	f7f9 fde8 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2d4:	2101      	movs	r1, #1
    a2d6:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a2da:	2111      	movs	r1, #17
    a2dc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a2e0:	bd10      	pop	{r4, pc}
    a2e2:	0000      	.short	0x0000
    a2e4:	20000120 	.word	0x20000120
    a2e8:	b510      	push	{r4, lr}
    a2ea:	4c0a      	ldr	r4, [pc, #40]	; (a314 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a2ec:	2300      	movs	r3, #0
    a2ee:	4619      	mov	r1, r3
    a2f0:	6860      	ldr	r0, [r4, #4]
    a2f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2f6:	3078      	adds	r0, #120	; 0x78
    a2f8:	f003 fe75 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2fc:	b120      	cbz	r0, a308 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a2fe:	6861      	ldr	r1, [r4, #4]
    a300:	201f      	movs	r0, #31
    a302:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a306:	bd10      	pop	{r4, pc}
    a308:	f240 615c 	movw	r1, #1628	; 0x65c
    a30c:	2036      	movs	r0, #54	; 0x36
    a30e:	f7f9 fdc9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a312:	0000      	.short	0x0000
    a314:	20000120 	.word	0x20000120
    a318:	b570      	push	{r4, r5, r6, lr}
    a31a:	4c1d      	ldr	r4, [pc, #116]	; (a390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a31c:	6860      	ldr	r0, [r4, #4]
    a31e:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a322:	b911      	cbnz	r1, a32a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a324:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a328:	b179      	cbz	r1, a34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a32a:	2100      	movs	r1, #0
    a32c:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a330:	2224      	movs	r2, #36	; 0x24
    a332:	2500      	movs	r5, #0
    a334:	2b21      	cmp	r3, #33	; 0x21
    a336:	d00a      	beq.n	a34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a338:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a33c:	2b23      	cmp	r3, #35	; 0x23
    a33e:	d01a      	beq.n	a376 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a340:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a344:	2036      	movs	r0, #54	; 0x36
    a346:	f7f9 fdad 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a34a:	2101      	movs	r1, #1
    a34c:	e7ee      	b.n	a32c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a34e:	b161      	cbz	r1, a36a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a350:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a354:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a358:	2801      	cmp	r0, #1
    a35a:	d102      	bne.n	a362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a35c:	2000      	movs	r0, #0
    a35e:	f7ff fac7 	bl	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a362:	6860      	ldr	r0, [r4, #4]
    a364:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a368:	e001      	b.n	a36e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a36a:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a36e:	6860      	ldr	r0, [r4, #4]
    a370:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a374:	bd70      	pop	{r4, r5, r6, pc}
    a376:	b129      	cbz	r1, a384 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a378:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a37c:	2000      	movs	r0, #0
    a37e:	f7ff fab7 	bl	98f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a382:	e001      	b.n	a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a384:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a388:	6860      	ldr	r0, [r4, #4]
    a38a:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a38e:	bd70      	pop	{r4, r5, r6, pc}
    a390:	20000120 	.word	0x20000120
    a394:	4903      	ldr	r1, [pc, #12]	; (a3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a396:	2000      	movs	r0, #0
    a398:	6849      	ldr	r1, [r1, #4]
    a39a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a39e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a3a2:	4770      	bx	lr
    a3a4:	20000120 	.word	0x20000120
    a3a8:	4807      	ldr	r0, [pc, #28]	; (a3c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a3aa:	b510      	push	{r4, lr}
    a3ac:	6840      	ldr	r0, [r0, #4]
    a3ae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a3b2:	2918      	cmp	r1, #24
    a3b4:	d004      	beq.n	a3c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a3b6:	f240 611e 	movw	r1, #1566	; 0x61e
    a3ba:	2036      	movs	r0, #54	; 0x36
    a3bc:	f7f9 fd72 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3c0:	211a      	movs	r1, #26
    a3c2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a3c6:	bd10      	pop	{r4, pc}
    a3c8:	20000120 	.word	0x20000120
    a3cc:	b510      	push	{r4, lr}
    a3ce:	4c0a      	ldr	r4, [pc, #40]	; (a3f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a3d0:	2300      	movs	r3, #0
    a3d2:	2101      	movs	r1, #1
    a3d4:	6860      	ldr	r0, [r4, #4]
    a3d6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a3da:	3078      	adds	r0, #120	; 0x78
    a3dc:	f003 fe03 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3e0:	2800      	cmp	r0, #0
    a3e2:	d108      	bne.n	a3f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a3e4:	6860      	ldr	r0, [r4, #4]
    a3e6:	2108      	movs	r1, #8
    a3e8:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a3ec:	2100      	movs	r1, #0
    a3ee:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a3f2:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a3f6:	bd10      	pop	{r4, pc}
    a3f8:	20000120 	.word	0x20000120
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	4c0e      	ldr	r4, [pc, #56]	; (a438 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a400:	2300      	movs	r3, #0
    a402:	4619      	mov	r1, r3
    a404:	6860      	ldr	r0, [r4, #4]
    a406:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a40a:	3078      	adds	r0, #120	; 0x78
    a40c:	f003 fdeb 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a410:	2500      	movs	r5, #0
    a412:	b110      	cbz	r0, a41a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a414:	6860      	ldr	r0, [r4, #4]
    a416:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a41a:	6860      	ldr	r0, [r4, #4]
    a41c:	2300      	movs	r3, #0
    a41e:	4619      	mov	r1, r3
    a420:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a424:	3078      	adds	r0, #120	; 0x78
    a426:	f003 fdde 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a42a:	2800      	cmp	r0, #0
    a42c:	d002      	beq.n	a434 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a42e:	6860      	ldr	r0, [r4, #4]
    a430:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a434:	bd70      	pop	{r4, r5, r6, pc}
    a436:	0000      	.short	0x0000
    a438:	20000120 	.word	0x20000120
    a43c:	b570      	push	{r4, r5, r6, lr}
    a43e:	4d16      	ldr	r5, [pc, #88]	; (a498 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a440:	f04f 0400 	mov.w	r4, #0
    a444:	6868      	ldr	r0, [r5, #4]
    a446:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a44a:	0789      	lsls	r1, r1, #30
    a44c:	d411      	bmi.n	a472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a44e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a452:	2300      	movs	r3, #0
    a454:	4619      	mov	r1, r3
    a456:	3078      	adds	r0, #120	; 0x78
    a458:	f003 fdc5 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a45c:	b120      	cbz	r0, a468 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a45e:	6869      	ldr	r1, [r5, #4]
    a460:	2001      	movs	r0, #1
    a462:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a466:	e008      	b.n	a47a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a468:	f240 612b 	movw	r1, #1579	; 0x62b
    a46c:	2036      	movs	r0, #54	; 0x36
    a46e:	f7f9 fd19 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a472:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a476:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a47a:	6868      	ldr	r0, [r5, #4]
    a47c:	2300      	movs	r3, #0
    a47e:	4619      	mov	r1, r3
    a480:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a484:	3078      	adds	r0, #120	; 0x78
    a486:	f003 fdae 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a48a:	2800      	cmp	r0, #0
    a48c:	d002      	beq.n	a494 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a48e:	6868      	ldr	r0, [r5, #4]
    a490:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a494:	bd70      	pop	{r4, r5, r6, pc}
    a496:	0000      	.short	0x0000
    a498:	20000120 	.word	0x20000120
    a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a49e:	4d4c      	ldr	r5, [pc, #304]	; (a5d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a4a0:	4607      	mov	r7, r0
    a4a2:	460e      	mov	r6, r1
    a4a4:	6868      	ldr	r0, [r5, #4]
    a4a6:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a4aa:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a4ae:	f88d 0000 	strb.w	r0, [sp]
    a4b2:	9800      	ldr	r0, [sp, #0]
    a4b4:	9000      	str	r0, [sp, #0]
    a4b6:	f89d 0000 	ldrb.w	r0, [sp]
    a4ba:	b930      	cbnz	r0, a4ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a4bc:	7c22      	ldrb	r2, [r4, #16]
    a4be:	2300      	movs	r3, #0
    a4c0:	2101      	movs	r1, #1
    a4c2:	4620      	mov	r0, r4
    a4c4:	f003 fd8f 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4c8:	b110      	cbz	r0, a4d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a4ca:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a4cc:	1c40      	adds	r0, r0, #1
    a4ce:	8760      	strh	r0, [r4, #58]	; 0x3a
    a4d0:	2001      	movs	r0, #1
    a4d2:	213d      	movs	r1, #61	; 0x3d
    a4d4:	bbf7      	cbnz	r7, a554 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a4d6:	782a      	ldrb	r2, [r5, #0]
    a4d8:	2a02      	cmp	r2, #2
    a4da:	d006      	beq.n	a4ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a4dc:	2a01      	cmp	r2, #1
    a4de:	d006      	beq.n	a4ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a4e0:	b1c6      	cbz	r6, a514 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a4e2:	06f2      	lsls	r2, r6, #27
    a4e4:	d507      	bpl.n	a4f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a4e6:	211e      	movs	r1, #30
    a4e8:	e043      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a4ea:	2116      	movs	r1, #22
    a4ec:	e041      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a4ee:	6869      	ldr	r1, [r5, #4]
    a4f0:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a4f4:	e03d      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a4f6:	0732      	lsls	r2, r6, #28
    a4f8:	d43b      	bmi.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a4fa:	07b1      	lsls	r1, r6, #30
    a4fc:	d001      	beq.n	a502 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a4fe:	212a      	movs	r1, #42	; 0x2a
    a500:	e037      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a502:	06b1      	lsls	r1, r6, #26
    a504:	d404      	bmi.n	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a506:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a50a:	2036      	movs	r0, #54	; 0x36
    a50c:	f7f9 fcca 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a510:	2123      	movs	r1, #35	; 0x23
    a512:	e02e      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a514:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a518:	b129      	cbz	r1, a526 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a51a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a51c:	1c4a      	adds	r2, r1, #1
    a51e:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a520:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a522:	4291      	cmp	r1, r2
    a524:	d21d      	bcs.n	a562 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a526:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a52a:	b139      	cbz	r1, a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a52c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a530:	1c4a      	adds	r2, r1, #1
    a532:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a536:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a538:	4291      	cmp	r1, r2
    a53a:	d212      	bcs.n	a562 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a53c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a53e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a540:	428a      	cmp	r2, r1
    a542:	d30b      	bcc.n	a55c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a544:	686b      	ldr	r3, [r5, #4]
    a546:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a54a:	f88d 3000 	strb.w	r3, [sp]
    a54e:	9b00      	ldr	r3, [sp, #0]
    a550:	9300      	str	r3, [sp, #0]
    a552:	e000      	b.n	a556 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a554:	e00d      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a556:	f89d 3000 	ldrb.w	r3, [sp]
    a55a:	b913      	cbnz	r3, a562 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a55c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a55e:	429a      	cmp	r2, r3
    a560:	d301      	bcc.n	a566 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a562:	2122      	movs	r1, #34	; 0x22
    a564:	e005      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a566:	7c62      	ldrb	r2, [r4, #17]
    a568:	b1f2      	cbz	r2, a5a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a56a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a56c:	428a      	cmp	r2, r1
    a56e:	d304      	bcc.n	a57a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a570:	2108      	movs	r1, #8
    a572:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a576:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a57a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a57e:	f88d 0000 	strb.w	r0, [sp]
    a582:	9800      	ldr	r0, [sp, #0]
    a584:	9000      	str	r0, [sp, #0]
    a586:	f89d 0000 	ldrb.w	r0, [sp]
    a58a:	b1d8      	cbz	r0, a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a58c:	2000      	movs	r0, #0
    a58e:	7360      	strb	r0, [r4, #13]
    a590:	73a0      	strb	r0, [r4, #14]
    a592:	7460      	strb	r0, [r4, #17]
    a594:	2102      	movs	r1, #2
    a596:	6868      	ldr	r0, [r5, #4]
    a598:	f7fd fa66 	bl	7a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a59c:	6868      	ldr	r0, [r5, #4]
    a59e:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a5a2:	2901      	cmp	r1, #1
    a5a4:	d005      	beq.n	a5b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a5a6:	e009      	b.n	a5bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a5a8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a5aa:	2906      	cmp	r1, #6
    a5ac:	d3e5      	bcc.n	a57a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a5ae:	213e      	movs	r1, #62	; 0x3e
    a5b0:	e7df      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a5b2:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a5b6:	7801      	ldrb	r1, [r0, #0]
    a5b8:	1e49      	subs	r1, r1, #1
    a5ba:	7001      	strb	r1, [r0, #0]
    a5bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a5c0:	f7fb bdb0 	b.w	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a5c4:	6868      	ldr	r0, [r5, #4]
    a5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a5ca:	2100      	movs	r1, #0
    a5cc:	f7fd ba4c 	b.w	7a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a5d0:	20000120 	.word	0x20000120
    a5d4:	4804      	ldr	r0, [pc, #16]	; (a5e8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a5d6:	b510      	push	{r4, lr}
    a5d8:	6840      	ldr	r0, [r0, #4]
    a5da:	8800      	ldrh	r0, [r0, #0]
    a5dc:	f7fa f860 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5e4:	f003 ba2c 	b.w	da40 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a5e8:	20000120 	.word	0x20000120
    a5ec:	4a19      	ldr	r2, [pc, #100]	; (a654 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a5ee:	2901      	cmp	r1, #1
    a5f0:	6852      	ldr	r2, [r2, #4]
    a5f2:	d010      	beq.n	a616 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a5f4:	2100      	movs	r1, #0
    a5f6:	b1c8      	cbz	r0, a62c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a5f8:	2801      	cmp	r0, #1
    a5fa:	d022      	beq.n	a642 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a5fc:	2803      	cmp	r0, #3
    a5fe:	d109      	bne.n	a614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a600:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a604:	2813      	cmp	r0, #19
    a606:	d005      	beq.n	a614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a608:	2816      	cmp	r0, #22
    a60a:	d003      	beq.n	a614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a60c:	2818      	cmp	r0, #24
    a60e:	d001      	beq.n	a614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a610:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a614:	4770      	bx	lr
    a616:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a61a:	2801      	cmp	r0, #1
    a61c:	d0fa      	beq.n	a614 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a61e:	bf00      	nop
    a620:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a624:	7801      	ldrb	r1, [r0, #0]
    a626:	1e49      	subs	r1, r1, #1
    a628:	7001      	strb	r1, [r0, #0]
    a62a:	4770      	bx	lr
    a62c:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a630:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a634:	1ac0      	subs	r0, r0, r3
    a636:	b200      	sxth	r0, r0
    a638:	2800      	cmp	r0, #0
    a63a:	dbf6      	blt.n	a62a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a63c:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a640:	4770      	bx	lr
    a642:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a646:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a64a:	1a40      	subs	r0, r0, r1
    a64c:	b200      	sxth	r0, r0
    a64e:	2800      	cmp	r0, #0
    a650:	dae6      	bge.n	a620 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a652:	4770      	bx	lr
    a654:	20000120 	.word	0x20000120

0000a658 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a658:	b510      	push	{r4, lr}
    a65a:	6941      	ldr	r1, [r0, #20]
    a65c:	b119      	cbz	r1, a666 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a65e:	6842      	ldr	r2, [r0, #4]
    a660:	684b      	ldr	r3, [r1, #4]
    a662:	429a      	cmp	r2, r3
    a664:	d203      	bcs.n	a66e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a666:	21c1      	movs	r1, #193	; 0xc1
    a668:	2037      	movs	r0, #55	; 0x37
    a66a:	f7f9 fc1b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a66e:	6902      	ldr	r2, [r0, #16]
    a670:	610a      	str	r2, [r1, #16]
    a672:	68c3      	ldr	r3, [r0, #12]
    a674:	60cb      	str	r3, [r1, #12]
    a676:	b10a      	cbz	r2, a67c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a678:	60d1      	str	r1, [r2, #12]
    a67a:	e001      	b.n	a680 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a67c:	4a06      	ldr	r2, [pc, #24]	; (a698 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a67e:	6011      	str	r1, [r2, #0]
    a680:	68ca      	ldr	r2, [r1, #12]
    a682:	b132      	cbz	r2, a692 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a684:	6111      	str	r1, [r2, #16]
    a686:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a68a:	4410      	add	r0, r2
    a68c:	684a      	ldr	r2, [r1, #4]
    a68e:	1a80      	subs	r0, r0, r2
    a690:	e000      	b.n	a694 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a692:	2000      	movs	r0, #0
    a694:	6088      	str	r0, [r1, #8]
    a696:	bd10      	pop	{r4, pc}
    a698:	200001f8 	.word	0x200001f8

0000a69c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a69c:	b510      	push	{r4, lr}
    a69e:	2200      	movs	r2, #0
    a6a0:	6101      	str	r1, [r0, #16]
    a6a2:	b189      	cbz	r1, a6c8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a6a4:	68cb      	ldr	r3, [r1, #12]
    a6a6:	60c8      	str	r0, [r1, #12]
    a6a8:	60c3      	str	r3, [r0, #12]
    a6aa:	b103      	cbz	r3, a6ae <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a6ac:	6118      	str	r0, [r3, #16]
    a6ae:	6901      	ldr	r1, [r0, #16]
    a6b0:	6082      	str	r2, [r0, #8]
    a6b2:	2900      	cmp	r1, #0
    a6b4:	d00f      	beq.n	a6d6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a6b6:	688b      	ldr	r3, [r1, #8]
    a6b8:	b163      	cbz	r3, a6d4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a6ba:	6844      	ldr	r4, [r0, #4]
    a6bc:	42a3      	cmp	r3, r4
    a6be:	d207      	bcs.n	a6d0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a6c0:	212a      	movs	r1, #42	; 0x2a
    a6c2:	2037      	movs	r0, #55	; 0x37
    a6c4:	f7f9 fbee 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6c8:	4903      	ldr	r1, [pc, #12]	; (a6d8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a6ca:	60c2      	str	r2, [r0, #12]
    a6cc:	6008      	str	r0, [r1, #0]
    a6ce:	e7ee      	b.n	a6ae <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a6d0:	1b1b      	subs	r3, r3, r4
    a6d2:	6083      	str	r3, [r0, #8]
    a6d4:	608a      	str	r2, [r1, #8]
    a6d6:	bd10      	pop	{r4, pc}
    a6d8:	200001f8 	.word	0x200001f8

0000a6dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a6dc:	6901      	ldr	r1, [r0, #16]
    a6de:	b149      	cbz	r1, a6f4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a6e0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a6e4:	441a      	add	r2, r3
    a6e6:	688b      	ldr	r3, [r1, #8]
    a6e8:	441a      	add	r2, r3
    a6ea:	608a      	str	r2, [r1, #8]
    a6ec:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a6f0:	60d1      	str	r1, [r2, #12]
    a6f2:	e002      	b.n	a6fa <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a6f4:	4a06      	ldr	r2, [pc, #24]	; (a710 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a6f6:	68c1      	ldr	r1, [r0, #12]
    a6f8:	6011      	str	r1, [r2, #0]
    a6fa:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a6fe:	b109      	cbz	r1, a704 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a700:	6108      	str	r0, [r1, #16]
    a702:	4770      	bx	lr
    a704:	2800      	cmp	r0, #0
    a706:	d0fc      	beq.n	a702 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a708:	2100      	movs	r1, #0
    a70a:	6081      	str	r1, [r0, #8]
    a70c:	4770      	bx	lr
    a70e:	0000      	.short	0x0000
    a710:	200001f8 	.word	0x200001f8

0000a714 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a714:	b510      	push	{r4, lr}
    a716:	4604      	mov	r4, r0
    a718:	490a      	ldr	r1, [pc, #40]	; (a744 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a71a:	2000      	movs	r0, #0
    a71c:	4602      	mov	r2, r0
    a71e:	6809      	ldr	r1, [r1, #0]
    a720:	1e43      	subs	r3, r0, #1
    a722:	e008      	b.n	a736 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a724:	688a      	ldr	r2, [r1, #8]
    a726:	42a2      	cmp	r2, r4
    a728:	d303      	bcc.n	a732 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a72a:	429a      	cmp	r2, r3
    a72c:	d201      	bcs.n	a732 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a72e:	4613      	mov	r3, r2
    a730:	4608      	mov	r0, r1
    a732:	460a      	mov	r2, r1
    a734:	68c9      	ldr	r1, [r1, #12]
    a736:	2900      	cmp	r1, #0
    a738:	d1f4      	bne.n	a724 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a73a:	2800      	cmp	r0, #0
    a73c:	d100      	bne.n	a740 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a73e:	4610      	mov	r0, r2
    a740:	bd10      	pop	{r4, pc}
    a742:	0000      	.short	0x0000
    a744:	200001f8 	.word	0x200001f8

0000a748 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a748:	4801      	ldr	r0, [pc, #4]	; (a750 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a74a:	6800      	ldr	r0, [r0, #0]
    a74c:	4770      	bx	lr
    a74e:	0000      	.short	0x0000
    a750:	200001f8 	.word	0x200001f8

0000a754 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a754:	4804      	ldr	r0, [pc, #16]	; (a768 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a756:	6801      	ldr	r1, [r0, #0]
    a758:	2000      	movs	r0, #0
    a75a:	e001      	b.n	a760 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a75c:	4608      	mov	r0, r1
    a75e:	68c9      	ldr	r1, [r1, #12]
    a760:	2900      	cmp	r1, #0
    a762:	d1fb      	bne.n	a75c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a764:	4770      	bx	lr
    a766:	0000      	.short	0x0000
    a768:	200001f8 	.word	0x200001f8

0000a76c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a76c:	4801      	ldr	r0, [pc, #4]	; (a774 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a76e:	2100      	movs	r1, #0
    a770:	6001      	str	r1, [r0, #0]
    a772:	4770      	bx	lr
    a774:	200001f8 	.word	0x200001f8

0000a778 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a778:	4903      	ldr	r1, [pc, #12]	; (a788 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a77a:	2000      	movs	r0, #0
    a77c:	6809      	ldr	r1, [r1, #0]
    a77e:	2900      	cmp	r1, #0
    a780:	d000      	beq.n	a784 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a782:	200c      	movs	r0, #12
    a784:	4770      	bx	lr
    a786:	0000      	.short	0x0000
    a788:	200001f8 	.word	0x200001f8

0000a78c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a78c:	b500      	push	{lr}
    a78e:	7941      	ldrb	r1, [r0, #5]
    a790:	b095      	sub	sp, #84	; 0x54
    a792:	b141      	cbz	r1, a7a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a794:	2901      	cmp	r1, #1
    a796:	d006      	beq.n	a7a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a798:	2902      	cmp	r1, #2
    a79a:	d004      	beq.n	a7a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a79c:	2903      	cmp	r1, #3
    a79e:	d002      	beq.n	a7a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a7a0:	2012      	movs	r0, #18
    a7a2:	b015      	add	sp, #84	; 0x54
    a7a4:	bd00      	pop	{pc}
    a7a6:	7901      	ldrb	r1, [r0, #4]
    a7a8:	f88d 1000 	strb.w	r1, [sp]
    a7ac:	7b01      	ldrb	r1, [r0, #12]
    a7ae:	f88d 1001 	strb.w	r1, [sp, #1]
    a7b2:	7942      	ldrb	r2, [r0, #5]
    a7b4:	2100      	movs	r1, #0
    a7b6:	2301      	movs	r3, #1
    a7b8:	b3e2      	cbz	r2, a834 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a7ba:	2a02      	cmp	r2, #2
    a7bc:	d03b      	beq.n	a836 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a7be:	f88d 3002 	strb.w	r3, [sp, #2]
    a7c2:	bf00      	nop
    a7c4:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a7c8:	f8cd 2003 	str.w	r2, [sp, #3]
    a7cc:	8942      	ldrh	r2, [r0, #10]
    a7ce:	f8ad 2007 	strh.w	r2, [sp, #7]
    a7d2:	f88d 3009 	strb.w	r3, [sp, #9]
    a7d6:	f830 2b01 	ldrh.w	r2, [r0], #1
    a7da:	f240 2371 	movw	r3, #625	; 0x271
    a7de:	435a      	muls	r2, r3
    a7e0:	9203      	str	r2, [sp, #12]
    a7e2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a7e6:	435a      	muls	r2, r3
    a7e8:	9206      	str	r2, [sp, #24]
    a7ea:	8982      	ldrh	r2, [r0, #12]
    a7ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a7f0:	89c2      	ldrh	r2, [r0, #14]
    a7f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a7f6:	8a02      	ldrh	r2, [r0, #16]
    a7f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a7fc:	8a42      	ldrh	r2, [r0, #18]
    a7fe:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a802:	8a82      	ldrh	r2, [r0, #20]
    a804:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a808:	8ac0      	ldrh	r0, [r0, #22]
    a80a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a80e:	2007      	movs	r0, #7
    a810:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a814:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a818:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a81c:	9806      	ldr	r0, [sp, #24]
    a81e:	f000 fb95 	bl	af4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    a822:	b158      	cbz	r0, a83c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a824:	9803      	ldr	r0, [sp, #12]
    a826:	f000 fb85 	bl	af34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a82a:	b138      	cbz	r0, a83c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a82c:	4668      	mov	r0, sp
    a82e:	f000 f89f 	bl	a970 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a832:	e7b6      	b.n	a7a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a834:	e7ff      	b.n	a836 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a836:	f88d 1002 	strb.w	r1, [sp, #2]
    a83a:	e7c3      	b.n	a7c4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a83c:	2030      	movs	r0, #48	; 0x30
    a83e:	e7b0      	b.n	a7a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a840 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a840:	4903      	ldr	r1, [pc, #12]	; (a850 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a842:	884a      	ldrh	r2, [r1, #2]
    a844:	8002      	strh	r2, [r0, #0]
    a846:	7809      	ldrb	r1, [r1, #0]
    a848:	7081      	strb	r1, [r0, #2]
    a84a:	2000      	movs	r0, #0
    a84c:	4770      	bx	lr
    a84e:	0000      	.short	0x0000
    a850:	20001004 	.word	0x20001004

0000a854 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a854:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a856:	460c      	mov	r4, r1
    a858:	4605      	mov	r5, r0
    a85a:	8800      	ldrh	r0, [r0, #0]
    a85c:	4669      	mov	r1, sp
    a85e:	f003 fb68 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a862:	0001      	movs	r1, r0
    a864:	f04f 0000 	mov.w	r0, #0
    a868:	d005      	beq.n	a876 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a86a:	f8c4 0002 	str.w	r0, [r4, #2]
    a86e:	71a0      	strb	r0, [r4, #6]
    a870:	8020      	strh	r0, [r4, #0]
    a872:	2002      	movs	r0, #2
    a874:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a876:	9901      	ldr	r1, [sp, #4]
    a878:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a87c:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a880:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a884:	f8c4 2002 	str.w	r2, [r4, #2]
    a888:	7e8a      	ldrb	r2, [r1, #26]
    a88a:	71a2      	strb	r2, [r4, #6]
    a88c:	882a      	ldrh	r2, [r5, #0]
    a88e:	8022      	strh	r2, [r4, #0]
    a890:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a894:	f88d 2008 	strb.w	r2, [sp, #8]
    a898:	9a02      	ldr	r2, [sp, #8]
    a89a:	9202      	str	r2, [sp, #8]
    a89c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a8a0:	2a00      	cmp	r2, #0
    a8a2:	d1eb      	bne.n	a87c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a8a4:	2000      	movs	r0, #0
    a8a6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a8a8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a8a8:	b51c      	push	{r2, r3, r4, lr}
    a8aa:	8800      	ldrh	r0, [r0, #0]
    a8ac:	4669      	mov	r1, sp
    a8ae:	f003 fb40 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d106      	bne.n	a8c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a8b6:	f89d 0000 	ldrb.w	r0, [sp]
    a8ba:	b120      	cbz	r0, a8c6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a8bc:	480b      	ldr	r0, [pc, #44]	; (a8ec <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a8be:	7800      	ldrb	r0, [r0, #0]
    a8c0:	b190      	cbz	r0, a8e8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a8c2:	2002      	movs	r0, #2
    a8c4:	bd1c      	pop	{r2, r3, r4, pc}
    a8c6:	9801      	ldr	r0, [sp, #4]
    a8c8:	f005 f9a5 	bl	fc16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    a8cc:	2800      	cmp	r0, #0
    a8ce:	d0f8      	beq.n	a8c2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a8d0:	9801      	ldr	r0, [sp, #4]
    a8d2:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a8d6:	b108      	cbz	r0, a8dc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a8d8:	203a      	movs	r0, #58	; 0x3a
    a8da:	bd1c      	pop	{r2, r3, r4, pc}
    a8dc:	9901      	ldr	r1, [sp, #4]
    a8de:	2001      	movs	r0, #1
    a8e0:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a8e4:	2000      	movs	r0, #0
    a8e6:	bd1c      	pop	{r2, r3, r4, pc}
    a8e8:	2011      	movs	r0, #17
    a8ea:	bd1c      	pop	{r2, r3, r4, pc}
    a8ec:	200001fc 	.word	0x200001fc

0000a8f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a8f0:	b510      	push	{r4, lr}
    a8f2:	4604      	mov	r4, r0
    a8f4:	f005 f986 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a8f8:	b130      	cbz	r0, a908 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a8fa:	4804      	ldr	r0, [pc, #16]	; (a90c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a8fc:	8881      	ldrh	r1, [r0, #4]
    a8fe:	8021      	strh	r1, [r4, #0]
    a900:	88c0      	ldrh	r0, [r0, #6]
    a902:	8060      	strh	r0, [r4, #2]
    a904:	2000      	movs	r0, #0
    a906:	bd10      	pop	{r4, pc}
    a908:	2001      	movs	r0, #1
    a90a:	bd10      	pop	{r4, pc}
    a90c:	2000020a 	.word	0x2000020a

0000a910 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a910:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a912:	4605      	mov	r5, r0
    a914:	f000 fbf8 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a918:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a91c:	b310      	cbz	r0, a964 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a91e:	2400      	movs	r4, #0
    a920:	a802      	add	r0, sp, #8
    a922:	f88d 4004 	strb.w	r4, [sp, #4]
    a926:	f88d 4008 	strb.w	r4, [sp, #8]
    a92a:	9000      	str	r0, [sp, #0]
    a92c:	78aa      	ldrb	r2, [r5, #2]
    a92e:	7869      	ldrb	r1, [r5, #1]
    a930:	7828      	ldrb	r0, [r5, #0]
    a932:	ab01      	add	r3, sp, #4
    a934:	f005 fa13 	bl	fd5e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a938:	2800      	cmp	r0, #0
    a93a:	d112      	bne.n	a962 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a93c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a940:	f004 ff8a 	bl	f858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a944:	b180      	cbz	r0, a968 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a946:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a94a:	f004 ff85 	bl	f858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a94e:	b158      	cbz	r0, a968 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a950:	4806      	ldr	r0, [pc, #24]	; (a96c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a952:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a956:	7381      	strb	r1, [r0, #14]
    a958:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a95c:	73c1      	strb	r1, [r0, #15]
    a95e:	8204      	strh	r4, [r0, #16]
    a960:	2000      	movs	r0, #0
    a962:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a964:	2001      	movs	r0, #1
    a966:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a968:	2011      	movs	r0, #17
    a96a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a96c:	20001004 	.word	0x20001004

0000a970 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a974:	a1a4      	add	r1, pc, #656	; (adr r1, ac08 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a976:	4605      	mov	r5, r0
    a978:	e9d1 8700 	ldrd	r8, r7, [r1]
    a97c:	7a40      	ldrb	r0, [r0, #9]
    a97e:	b08d      	sub	sp, #52	; 0x34
    a980:	0781      	lsls	r1, r0, #30
    a982:	d502      	bpl.n	a98a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a984:	f040 0001 	orr.w	r0, r0, #1
    a988:	7268      	strb	r0, [r5, #9]
    a98a:	4628      	mov	r0, r5
    a98c:	f004 ffc3 	bl	f916 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a990:	2800      	cmp	r0, #0
    a992:	d10c      	bne.n	a9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a994:	f005 f95a 	bl	fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a998:	b940      	cbnz	r0, a9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a99a:	f7fb fbbd 	bl	6118 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    a99e:	b928      	cbnz	r0, a9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a9a0:	f7fb fe76 	bl	6690 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a9a4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a9a8:	39ff      	subs	r1, #255	; 0xff
    a9aa:	d003      	beq.n	a9b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a9ac:	200c      	movs	r0, #12
    a9ae:	b00d      	add	sp, #52	; 0x34
    a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9b4:	7828      	ldrb	r0, [r5, #0]
    a9b6:	f04f 0b00 	mov.w	fp, #0
    a9ba:	f04f 0a01 	mov.w	sl, #1
    a9be:	b9e0      	cbnz	r0, a9fa <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    a9c0:	f895 9002 	ldrb.w	r9, [r5, #2]
    a9c4:	1cee      	adds	r6, r5, #3
    a9c6:	a909      	add	r1, sp, #36	; 0x24
    a9c8:	2000      	movs	r0, #0
    a9ca:	f003 f951 	bl	dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a9ce:	b178      	cbz	r0, a9f0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a9d0:	f240 2109 	movw	r1, #521	; 0x209
    a9d4:	e112      	b.n	abfc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a9d6:	4648      	mov	r0, r9
    a9d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a9da:	f004 fb52 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a9de:	78a1      	ldrb	r1, [r4, #2]
    a9e0:	4288      	cmp	r0, r1
    a9e2:	d105      	bne.n	a9f0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a9e4:	2206      	movs	r2, #6
    a9e6:	4631      	mov	r1, r6
    a9e8:	1ce0      	adds	r0, r4, #3
    a9ea:	f002 f868 	bl	cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a9ee:	b328      	cbz	r0, aa3c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a9f0:	a809      	add	r0, sp, #36	; 0x24
    a9f2:	f7f9 fc87 	bl	4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a9f6:	2800      	cmp	r0, #0
    a9f8:	d0ed      	beq.n	a9d6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    a9fa:	2103      	movs	r1, #3
    a9fc:	f105 0018 	add.w	r0, r5, #24
    aa00:	f000 fab0 	bl	af64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    aa04:	2200      	movs	r2, #0
    aa06:	4611      	mov	r1, r2
    aa08:	a802      	add	r0, sp, #8
    aa0a:	f7f9 fca1 	bl	4350 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    aa0e:	0004      	movs	r4, r0
    aa10:	d016      	beq.n	aa40 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    aa12:	2100      	movs	r1, #0
    aa14:	f7fb f948 	bl	5ca8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    aa18:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    aa1c:	8020      	strh	r0, [r4, #0]
    aa1e:	487c      	ldr	r0, [pc, #496]	; (ac10 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    aa20:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    aa24:	f005 f8ee 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    aa28:	497a      	ldr	r1, [pc, #488]	; (ac14 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    aa2a:	2800      	cmp	r0, #0
    aa2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aa30:	d008      	beq.n	aa44 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    aa32:	884b      	ldrh	r3, [r1, #2]
    aa34:	888a      	ldrh	r2, [r1, #4]
    aa36:	84c3      	strh	r3, [r0, #38]	; 0x26
    aa38:	8502      	strh	r2, [r0, #40]	; 0x28
    aa3a:	e006      	b.n	aa4a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    aa3c:	200b      	movs	r0, #11
    aa3e:	e7b6      	b.n	a9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa40:	2009      	movs	r0, #9
    aa42:	e7b4      	b.n	a9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa44:	221b      	movs	r2, #27
    aa46:	84c2      	strh	r2, [r0, #38]	; 0x26
    aa48:	8502      	strh	r2, [r0, #40]	; 0x28
    aa4a:	4689      	mov	r9, r1
    aa4c:	4608      	mov	r0, r1
    aa4e:	7849      	ldrb	r1, [r1, #1]
    aa50:	9100      	str	r1, [sp, #0]
    aa52:	7803      	ldrb	r3, [r0, #0]
    aa54:	8882      	ldrh	r2, [r0, #4]
    aa56:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    aa5a:	8820      	ldrh	r0, [r4, #0]
    aa5c:	f7f9 fd5a 	bl	4514 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    aa60:	b110      	cbz	r0, aa68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    aa62:	f640 6199 	movw	r1, #3737	; 0xe99
    aa66:	e0c9      	b.n	abfc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa68:	f003 ff9d 	bl	e9a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    aa6c:	6120      	str	r0, [r4, #16]
    aa6e:	a06a      	add	r0, pc, #424	; (adr r0, ac18 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    aa70:	f104 0618 	add.w	r6, r4, #24
    aa74:	6800      	ldr	r0, [r0, #0]
    aa76:	9000      	str	r0, [sp, #0]
    aa78:	2103      	movs	r1, #3
    aa7a:	4668      	mov	r0, sp
    aa7c:	f7f9 faae 	bl	3fdc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    aa80:	2000      	movs	r0, #0
    aa82:	4669      	mov	r1, sp
    aa84:	5c0a      	ldrb	r2, [r1, r0]
    aa86:	5432      	strb	r2, [r6, r0]
    aa88:	1c40      	adds	r0, r0, #1
    aa8a:	b2c0      	uxtb	r0, r0
    aa8c:	2803      	cmp	r0, #3
    aa8e:	d3f9      	bcc.n	aa84 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    aa90:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    aa92:	f003 fa5a 	bl	df4a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    aa96:	60e0      	str	r0, [r4, #12]
    aa98:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    aa9a:	82a0      	strh	r0, [r4, #20]
    aa9c:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    aa9e:	82e0      	strh	r0, [r4, #22]
    aaa0:	7a68      	ldrb	r0, [r5, #9]
    aaa2:	f004 feb8 	bl	f816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    aaa6:	f8d9 1008 	ldr.w	r1, [r9, #8]
    aaaa:	464e      	mov	r6, r9
    aaac:	4620      	mov	r0, r4
    aaae:	62e1      	str	r1, [r4, #44]	; 0x2c
    aab0:	f004 f90e 	bl	ecd0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    aab4:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    aab8:	46d1      	mov	r9, sl
    aaba:	4650      	mov	r0, sl
    aabc:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    aac0:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    aac4:	4852      	ldr	r0, [pc, #328]	; (ac10 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    aac6:	3808      	subs	r0, #8
    aac8:	6843      	ldr	r3, [r0, #4]
    aaca:	b123      	cbz	r3, aad6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    aacc:	2201      	movs	r2, #1
    aace:	f504 7199 	add.w	r1, r4, #306	; 0x132
    aad2:	4620      	mov	r0, r4
    aad4:	4798      	blx	r3
    aad6:	8821      	ldrh	r1, [r4, #0]
    aad8:	f8ad 1014 	strh.w	r1, [sp, #20]
    aadc:	7bb1      	ldrb	r1, [r6, #14]
    aade:	f88d 1016 	strb.w	r1, [sp, #22]
    aae2:	7bf1      	ldrb	r1, [r6, #15]
    aae4:	f88d 1017 	strb.w	r1, [sp, #23]
    aae8:	8a31      	ldrh	r1, [r6, #16]
    aaea:	f8ad 1018 	strh.w	r1, [sp, #24]
    aaee:	a908      	add	r1, sp, #32
    aaf0:	9100      	str	r1, [sp, #0]
    aaf2:	2000      	movs	r0, #0
    aaf4:	ab07      	add	r3, sp, #28
    aaf6:	aa05      	add	r2, sp, #20
    aaf8:	4621      	mov	r1, r4
    aafa:	f005 f844 	bl	fb86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    aafe:	0006      	movs	r6, r0
    ab00:	d10f      	bne.n	ab22 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    ab02:	f89d 001c 	ldrb.w	r0, [sp, #28]
    ab06:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ab0a:	f89d 0020 	ldrb.w	r0, [sp, #32]
    ab0e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    ab12:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    ab16:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ab1a:	a909      	add	r1, sp, #36	; 0x24
    ab1c:	4620      	mov	r0, r4
    ab1e:	f003 fb02 	bl	e126 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ab22:	46d8      	mov	r8, fp
    ab24:	f88d b00c 	strb.w	fp, [sp, #12]
    ab28:	2101      	movs	r1, #1
    ab2a:	a803      	add	r0, sp, #12
    ab2c:	f7f9 fa56 	bl	3fdc <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    ab30:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ab34:	f000 0107 	and.w	r1, r0, #7
    ab38:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    ab3c:	4411      	add	r1, r2
    ab3e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ab42:	4408      	add	r0, r1
    ab44:	f88d 000c 	strb.w	r0, [sp, #12]
    ab48:	1d40      	adds	r0, r0, #5
    ab4a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    ab4e:	2809      	cmp	r0, #9
    ab50:	d202      	bcs.n	ab58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    ab52:	3008      	adds	r0, #8
    ab54:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    ab58:	2101      	movs	r1, #1
    ab5a:	4620      	mov	r0, r4
    ab5c:	f7fb f8a4 	bl	5ca8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ab60:	7868      	ldrb	r0, [r5, #1]
    ab62:	f7fb fe69 	bl	6838 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    ab66:	bbee      	cbnz	r6, abe4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    ab68:	78a9      	ldrb	r1, [r5, #2]
    ab6a:	7828      	ldrb	r0, [r5, #0]
    ab6c:	1cea      	adds	r2, r5, #3
    ab6e:	f7fb fe0d 	bl	678c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    ab72:	b148      	cbz	r0, ab88 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    ab74:	f7fb fd34 	bl	65e0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    ab78:	78a9      	ldrb	r1, [r5, #2]
    ab7a:	7828      	ldrb	r0, [r5, #0]
    ab7c:	1cea      	adds	r2, r5, #3
    ab7e:	f7fb fe29 	bl	67d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    ab82:	0006      	movs	r6, r0
    ab84:	d002      	beq.n	ab8c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    ab86:	e02f      	b.n	abe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    ab88:	2612      	movs	r6, #18
    ab8a:	e02d      	b.n	abe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    ab8c:	78a8      	ldrb	r0, [r5, #2]
    ab8e:	f004 fa78 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ab92:	4602      	mov	r2, r0
    ab94:	1ceb      	adds	r3, r5, #3
    ab96:	4621      	mov	r1, r4
    ab98:	2003      	movs	r0, #3
    ab9a:	f7fb fd63 	bl	6664 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    ab9e:	0006      	movs	r6, r0
    aba0:	d122      	bne.n	abe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aba2:	464f      	mov	r7, r9
    aba4:	4648      	mov	r0, r9
    aba6:	f7fb fdbb 	bl	6720 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    abaa:	0006      	movs	r6, r0
    abac:	d11c      	bne.n	abe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    abae:	f88d 800c 	strb.w	r8, [sp, #12]
    abb2:	7a68      	ldrb	r0, [r5, #9]
    abb4:	07c0      	lsls	r0, r0, #31
    abb6:	d005      	beq.n	abc4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    abb8:	68e8      	ldr	r0, [r5, #12]
    abba:	9004      	str	r0, [sp, #16]
    abbc:	69a8      	ldr	r0, [r5, #24]
    abbe:	9005      	str	r0, [sp, #20]
    abc0:	f88d 700c 	strb.w	r7, [sp, #12]
    abc4:	a803      	add	r0, sp, #12
    abc6:	f7fd f913 	bl	7df0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    abca:	4606      	mov	r6, r0
    abcc:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    abd0:	f7fb fea6 	bl	6920 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    abd4:	b936      	cbnz	r6, abe4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    abd6:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    abda:	4620      	mov	r0, r4
    abdc:	f7fd f82a 	bl	7c34 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    abe0:	0006      	movs	r6, r0
    abe2:	e000      	b.n	abe6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    abe4:	e000      	b.n	abe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    abe6:	d00c      	beq.n	ac02 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    abe8:	8820      	ldrh	r0, [r4, #0]
    abea:	f003 f8a0 	bl	dd2e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    abee:	8820      	ldrh	r0, [r4, #0]
    abf0:	2100      	movs	r1, #0
    abf2:	f7f9 fbd5 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    abf6:	b120      	cbz	r0, ac02 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    abf8:	f640 715f 	movw	r1, #3935	; 0xf5f
    abfc:	2039      	movs	r0, #57	; 0x39
    abfe:	f7f9 f951 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac02:	4630      	mov	r0, r6
    ac04:	e6d3      	b.n	a9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ac06:	0000      	.short	0x0000
    ac08:	ffffffff 	.word	0xffffffff
    ac0c:	0000001f 	.word	0x0000001f
    ac10:	20000204 	.word	0x20000204
    ac14:	20001004 	.word	0x20001004
    ac18:	00332211 	.word	0x00332211

0000ac1c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ac1c:	7801      	ldrb	r1, [r0, #0]
    ac1e:	b171      	cbz	r1, ac3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac20:	7841      	ldrb	r1, [r0, #1]
    ac22:	b161      	cbz	r1, ac3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac24:	8841      	ldrh	r1, [r0, #2]
    ac26:	291b      	cmp	r1, #27
    ac28:	d309      	bcc.n	ac3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac2a:	8881      	ldrh	r1, [r0, #4]
    ac2c:	291b      	cmp	r1, #27
    ac2e:	d306      	bcc.n	ac3e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac30:	4904      	ldr	r1, [pc, #16]	; (ac44 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ac32:	6802      	ldr	r2, [r0, #0]
    ac34:	600a      	str	r2, [r1, #0]
    ac36:	8880      	ldrh	r0, [r0, #4]
    ac38:	8088      	strh	r0, [r1, #4]
    ac3a:	2000      	movs	r0, #0
    ac3c:	4770      	bx	lr
    ac3e:	2012      	movs	r0, #18
    ac40:	4770      	bx	lr
    ac42:	0000      	.short	0x0000
    ac44:	20001004 	.word	0x20001004

0000ac48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ac48:	6800      	ldr	r0, [r0, #0]
    ac4a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ac4e:	4288      	cmp	r0, r1
    ac50:	d303      	bcc.n	ac5a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ac52:	4903      	ldr	r1, [pc, #12]	; (ac60 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ac54:	6088      	str	r0, [r1, #8]
    ac56:	2000      	movs	r0, #0
    ac58:	4770      	bx	lr
    ac5a:	2012      	movs	r0, #18
    ac5c:	4770      	bx	lr
    ac5e:	0000      	.short	0x0000
    ac60:	20001004 	.word	0x20001004

0000ac64 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    ac64:	b510      	push	{r4, lr}
    ac66:	b086      	sub	sp, #24
    ac68:	4604      	mov	r4, r0
    ac6a:	f004 fecb 	bl	fa04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    ac6e:	2800      	cmp	r0, #0
    ac70:	d103      	bne.n	ac7a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ac72:	f004 ffeb 	bl	fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    ac76:	b110      	cbz	r0, ac7e <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    ac78:	200c      	movs	r0, #12
    ac7a:	b006      	add	sp, #24
    ac7c:	bd10      	pop	{r4, pc}
    ac7e:	2102      	movs	r1, #2
    ac80:	f104 0010 	add.w	r0, r4, #16
    ac84:	f000 f96e 	bl	af64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    ac88:	78a0      	ldrb	r0, [r4, #2]
    ac8a:	f88d 0008 	strb.w	r0, [sp, #8]
    ac8e:	78a0      	ldrb	r0, [r4, #2]
    ac90:	f88d 0000 	strb.w	r0, [sp]
    ac94:	7860      	ldrb	r0, [r4, #1]
    ac96:	f88d 0003 	strb.w	r0, [sp, #3]
    ac9a:	7820      	ldrb	r0, [r4, #0]
    ac9c:	f88d 0002 	strb.w	r0, [sp, #2]
    aca0:	7e20      	ldrb	r0, [r4, #24]
    aca2:	f88d 0004 	strb.w	r0, [sp, #4]
    aca6:	78a0      	ldrb	r0, [r4, #2]
    aca8:	07c0      	lsls	r0, r0, #31
    acaa:	d00b      	beq.n	acc4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    acac:	78e0      	ldrb	r0, [r4, #3]
    acae:	2801      	cmp	r0, #1
    acb0:	d011      	beq.n	acd6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    acb2:	b190      	cbz	r0, acda <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    acb4:	f05f 0000 	movs.w	r0, #0
    acb8:	f88d 0001 	strb.w	r0, [sp, #1]
    acbc:	68a0      	ldr	r0, [r4, #8]
    acbe:	9003      	str	r0, [sp, #12]
    acc0:	6920      	ldr	r0, [r4, #16]
    acc2:	9004      	str	r0, [sp, #16]
    acc4:	a802      	add	r0, sp, #8
    acc6:	f7fd f893 	bl	7df0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    acca:	2800      	cmp	r0, #0
    accc:	d1d5      	bne.n	ac7a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    acce:	4668      	mov	r0, sp
    acd0:	f7fb fe2e 	bl	6930 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    acd4:	e7d1      	b.n	ac7a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    acd6:	2002      	movs	r0, #2
    acd8:	e7ee      	b.n	acb8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    acda:	2001      	movs	r0, #1
    acdc:	e7ec      	b.n	acb8 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000ace0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ace0:	4a03      	ldr	r2, [pc, #12]	; (acf0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ace2:	e9d2 1200 	ldrd	r1, r2, [r2]
    ace6:	6001      	str	r1, [r0, #0]
    ace8:	6042      	str	r2, [r0, #4]
    acea:	2000      	movs	r0, #0
    acec:	4770      	bx	lr
    acee:	0000      	.short	0x0000
    acf0:	0000aff0 	.word	0x0000aff0

0000acf4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    acf4:	b510      	push	{r4, lr}
    acf6:	2005      	movs	r0, #5
    acf8:	f000 f9fc 	bl	b0f4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    acfc:	f7fd fe48 	bl	8990 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    ad00:	4902      	ldr	r1, [pc, #8]	; (ad0c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ad02:	4801      	ldr	r0, [pc, #4]	; (ad08 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    ad04:	6048      	str	r0, [r1, #4]
    ad06:	bd10      	pop	{r4, pc}
    ad08:	0000ae39 	.word	0x0000ae39
    ad0c:	200001fc 	.word	0x200001fc

0000ad10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ad10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad14:	b086      	sub	sp, #24
    ad16:	468a      	mov	sl, r1
    ad18:	4606      	mov	r6, r0
    ad1a:	8800      	ldrh	r0, [r0, #0]
    ad1c:	a901      	add	r1, sp, #4
    ad1e:	f003 f908 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ad22:	2800      	cmp	r0, #0
    ad24:	d139      	bne.n	ad9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ad26:	9802      	ldr	r0, [sp, #8]
    ad28:	f04f 0801 	mov.w	r8, #1
    ad2c:	4601      	mov	r1, r0
    ad2e:	4689      	mov	r9, r1
    ad30:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ad34:	f88d 1000 	strb.w	r1, [sp]
    ad38:	9900      	ldr	r1, [sp, #0]
    ad3a:	9100      	str	r1, [sp, #0]
    ad3c:	f89d 5000 	ldrb.w	r5, [sp]
    ad40:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad44:	3078      	adds	r0, #120	; 0x78
    ad46:	2921      	cmp	r1, #33	; 0x21
    ad48:	d100      	bne.n	ad4c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ad4a:	b13d      	cbz	r5, ad5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ad4c:	2400      	movs	r4, #0
    ad4e:	304e      	adds	r0, #78	; 0x4e
    ad50:	2108      	movs	r1, #8
    ad52:	4607      	mov	r7, r0
    ad54:	f004 f98b 	bl	f06e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ad58:	b110      	cbz	r0, ad60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ad5a:	e007      	b.n	ad6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ad5c:	2401      	movs	r4, #1
    ad5e:	e7f6      	b.n	ad4e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ad60:	210b      	movs	r1, #11
    ad62:	4638      	mov	r0, r7
    ad64:	f004 f983 	bl	f06e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ad68:	b900      	cbnz	r0, ad6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ad6a:	b1ac      	cbz	r4, ad98 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ad6c:	a804      	add	r0, sp, #16
    ad6e:	9000      	str	r0, [sp, #0]
    ad70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad74:	ab03      	add	r3, sp, #12
    ad76:	4632      	mov	r2, r6
    ad78:	4649      	mov	r1, r9
    ad7a:	f004 ff04 	bl	fb86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ad7e:	0007      	movs	r7, r0
    ad80:	d10b      	bne.n	ad9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ad82:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad86:	9c02      	ldr	r4, [sp, #8]
    ad88:	b150      	cbz	r0, ada0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    ad8a:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    ad8e:	bf00      	nop
    ad90:	f884 8001 	strb.w	r8, [r4, #1]
    ad94:	b94d      	cbnz	r5, adaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    ad96:	e006      	b.n	ada6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    ad98:	201a      	movs	r0, #26
    ad9a:	b006      	add	sp, #24
    ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ada0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    ada4:	e7f4      	b.n	ad90 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    ada6:	7820      	ldrb	r0, [r4, #0]
    ada8:	b108      	cbz	r0, adae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    adaa:	273a      	movs	r7, #58	; 0x3a
    adac:	e012      	b.n	add4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    adae:	f884 a000 	strb.w	sl, [r4]
    adb2:	f89d 000c 	ldrb.w	r0, [sp, #12]
    adb6:	70a0      	strb	r0, [r4, #2]
    adb8:	f89d 1010 	ldrb.w	r1, [sp, #16]
    adbc:	70e1      	strb	r1, [r4, #3]
    adbe:	f88d 0000 	strb.w	r0, [sp]
    adc2:	f88d 1001 	strb.w	r1, [sp, #1]
    adc6:	88b0      	ldrh	r0, [r6, #4]
    adc8:	f8ad 0002 	strh.w	r0, [sp, #2]
    adcc:	4669      	mov	r1, sp
    adce:	4648      	mov	r0, r9
    add0:	f003 f9a9 	bl	e126 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    add4:	2000      	movs	r0, #0
    add6:	7060      	strb	r0, [r4, #1]
    add8:	4638      	mov	r0, r7
    adda:	e7de      	b.n	ad9a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000addc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    addc:	b510      	push	{r4, lr}
    adde:	f002 ffba 	bl	dd56 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ade2:	f7fa fd07 	bl	57f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ade6:	f000 f99f 	bl	b128 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    adea:	f003 fc87 	bl	e6fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    adee:	4810      	ldr	r0, [pc, #64]	; (ae30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    adf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    adf4:	4b0f      	ldr	r3, [pc, #60]	; (ae34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    adf6:	8281      	strh	r1, [r0, #20]
    adf8:	2100      	movs	r1, #0
    adfa:	7581      	strb	r1, [r0, #22]
    adfc:	8301      	strh	r1, [r0, #24]
    adfe:	221b      	movs	r2, #27
    ae00:	801a      	strh	r2, [r3, #0]
    ae02:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ae06:	805c      	strh	r4, [r3, #2]
    ae08:	809a      	strh	r2, [r3, #4]
    ae0a:	80dc      	strh	r4, [r3, #6]
    ae0c:	7381      	strb	r1, [r0, #14]
    ae0e:	73c1      	strb	r1, [r0, #15]
    ae10:	2303      	movs	r3, #3
    ae12:	7003      	strb	r3, [r0, #0]
    ae14:	2302      	movs	r3, #2
    ae16:	7043      	strb	r3, [r0, #1]
    ae18:	8042      	strh	r2, [r0, #2]
    ae1a:	8082      	strh	r2, [r0, #4]
    ae1c:	f640 62a6 	movw	r2, #3750	; 0xea6
    ae20:	6082      	str	r2, [r0, #8]
    ae22:	4a04      	ldr	r2, [pc, #16]	; (ae34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ae24:	1f92      	subs	r2, r2, #6
    ae26:	7011      	strb	r1, [r2, #0]
    ae28:	7481      	strb	r1, [r0, #18]
    ae2a:	7301      	strb	r1, [r0, #12]
    ae2c:	bd10      	pop	{r4, pc}
    ae2e:	0000      	.short	0x0000
    ae30:	20001004 	.word	0x20001004
    ae34:	2000020a 	.word	0x2000020a
    ae38:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae3c:	4692      	mov	sl, r2
    ae3e:	460f      	mov	r7, r1
    ae40:	4681      	mov	r9, r0
    ae42:	f004 fedf 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ae46:	2800      	cmp	r0, #0
    ae48:	d063      	beq.n	af12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ae4a:	4933      	ldr	r1, [pc, #204]	; (af18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    ae4c:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ae50:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ae54:	8808      	ldrh	r0, [r1, #0]
    ae56:	4290      	cmp	r0, r2
    ae58:	d300      	bcc.n	ae5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    ae5a:	4610      	mov	r0, r2
    ae5c:	4680      	mov	r8, r0
    ae5e:	8888      	ldrh	r0, [r1, #4]
    ae60:	42b0      	cmp	r0, r6
    ae62:	d200      	bcs.n	ae66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    ae64:	4606      	mov	r6, r0
    ae66:	884c      	ldrh	r4, [r1, #2]
    ae68:	f640 0048 	movw	r0, #2120	; 0x848
    ae6c:	4284      	cmp	r4, r0
    ae6e:	d300      	bcc.n	ae72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ae70:	4604      	mov	r4, r0
    ae72:	88cd      	ldrh	r5, [r1, #6]
    ae74:	4285      	cmp	r5, r0
    ae76:	d300      	bcc.n	ae7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    ae78:	4605      	mov	r5, r0
    ae7a:	4284      	cmp	r4, r0
    ae7c:	d300      	bcc.n	ae80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    ae7e:	4604      	mov	r4, r0
    ae80:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ae84:	2e1b      	cmp	r6, #27
    ae86:	d001      	beq.n	ae8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    ae88:	428d      	cmp	r5, r1
    ae8a:	d104      	bne.n	ae96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    ae8c:	f1b8 0f1b 	cmp.w	r8, #27
    ae90:	d03f      	beq.n	af12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ae92:	428c      	cmp	r4, r1
    ae94:	d03d      	beq.n	af12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ae96:	466a      	mov	r2, sp
    ae98:	4651      	mov	r1, sl
    ae9a:	4648      	mov	r0, r9
    ae9c:	f004 fe3d 	bl	fb1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    aea0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    aea4:	4641      	mov	r1, r8
    aea6:	4540      	cmp	r0, r8
    aea8:	d900      	bls.n	aeac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    aeaa:	4608      	mov	r0, r1
    aeac:	80f8      	strh	r0, [r7, #6]
    aeae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    aeb2:	42a1      	cmp	r1, r4
    aeb4:	d800      	bhi.n	aeb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    aeb6:	460c      	mov	r4, r1
    aeb8:	813c      	strh	r4, [r7, #8]
    aeba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aebe:	42b1      	cmp	r1, r6
    aec0:	d800      	bhi.n	aec4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    aec2:	460e      	mov	r6, r1
    aec4:	807e      	strh	r6, [r7, #2]
    aec6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aeca:	42a9      	cmp	r1, r5
    aecc:	d900      	bls.n	aed0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aece:	4629      	mov	r1, r5
    aed0:	80b9      	strh	r1, [r7, #4]
    aed2:	2201      	movs	r2, #1
    aed4:	703a      	strb	r2, [r7, #0]
    aed6:	381b      	subs	r0, #27
    aed8:	28e0      	cmp	r0, #224	; 0xe0
    aeda:	d902      	bls.n	aee2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    aedc:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    aee0:	e014      	b.n	af0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    aee2:	3e1b      	subs	r6, #27
    aee4:	2ee0      	cmp	r6, #224	; 0xe0
    aee6:	d902      	bls.n	aeee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    aee8:	f640 4182 	movw	r1, #3202	; 0xc82
    aeec:	e00e      	b.n	af0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    aeee:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    aef2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    aef6:	4284      	cmp	r4, r0
    aef8:	d902      	bls.n	af00 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    aefa:	f640 4184 	movw	r1, #3204	; 0xc84
    aefe:	e005      	b.n	af0c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    af00:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    af04:	4281      	cmp	r1, r0
    af06:	d904      	bls.n	af12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    af08:	f640 4186 	movw	r1, #3206	; 0xc86
    af0c:	2039      	movs	r0, #57	; 0x39
    af0e:	f7f8 ffc9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af12:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af16:	0000      	.short	0x0000
    af18:	2000020a 	.word	0x2000020a
    af1c:	4904      	ldr	r1, [pc, #16]	; (af30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    af1e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af22:	4288      	cmp	r0, r1
    af24:	d301      	bcc.n	af2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    af26:	2000      	movs	r0, #0
    af28:	4770      	bx	lr
    af2a:	2001      	movs	r0, #1
    af2c:	4770      	bx	lr
    af2e:	0000      	.short	0x0000
    af30:	0270f3cc 	.word	0x0270f3cc
    af34:	4904      	ldr	r1, [pc, #16]	; (af48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    af36:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af3a:	4288      	cmp	r0, r1
    af3c:	d301      	bcc.n	af42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    af3e:	2000      	movs	r0, #0
    af40:	4770      	bx	lr
    af42:	2001      	movs	r0, #1
    af44:	4770      	bx	lr
    af46:	0000      	.short	0x0000
    af48:	009c363d 	.word	0x009c363d
    af4c:	4904      	ldr	r1, [pc, #16]	; (af60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    af4e:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af52:	4288      	cmp	r0, r1
    af54:	d301      	bcc.n	af5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    af56:	2000      	movs	r0, #0
    af58:	4770      	bx	lr
    af5a:	2001      	movs	r0, #1
    af5c:	4770      	bx	lr
    af5e:	0000      	.short	0x0000
    af60:	009c363d 	.word	0x009c363d
    af64:	b530      	push	{r4, r5, lr}
    af66:	2200      	movs	r2, #0
    af68:	4d07      	ldr	r5, [pc, #28]	; (af88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    af6a:	e009      	b.n	af80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    af6c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    af70:	462b      	mov	r3, r5
    af72:	429c      	cmp	r4, r3
    af74:	d800      	bhi.n	af78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    af76:	4623      	mov	r3, r4
    af78:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    af7c:	1c52      	adds	r2, r2, #1
    af7e:	b2d2      	uxtb	r2, r2
    af80:	428a      	cmp	r2, r1
    af82:	d3f3      	bcc.n	af6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    af84:	bd30      	pop	{r4, r5, pc}
    af86:	0000      	.short	0x0000
    af88:	00f42400 	.word	0x00f42400
    af8c:	4a09      	ldr	r2, [pc, #36]	; (afb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    af8e:	4290      	cmp	r0, r2
    af90:	d80b      	bhi.n	afaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    af92:	2901      	cmp	r1, #1
    af94:	d002      	beq.n	af9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    af96:	2904      	cmp	r1, #4
    af98:	d003      	beq.n	afa2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    af9a:	e008      	b.n	afae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    af9c:	f240 7153 	movw	r1, #1875	; 0x753
    afa0:	e001      	b.n	afa6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    afa2:	f640 11c4 	movw	r1, #2500	; 0x9c4
    afa6:	4288      	cmp	r0, r1
    afa8:	d201      	bcs.n	afae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    afaa:	2000      	movs	r0, #0
    afac:	4770      	bx	lr
    afae:	2001      	movs	r0, #1
    afb0:	4770      	bx	lr
    afb2:	0000      	.short	0x0000
    afb4:	0270fd8f 	.word	0x0270fd8f
    afb8:	b510      	push	{r4, lr}
    afba:	4604      	mov	r4, r0
    afbc:	88c1      	ldrh	r1, [r0, #6]
    afbe:	8880      	ldrh	r0, [r0, #4]
    afc0:	f004 fc5f 	bl	f882 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    afc4:	2800      	cmp	r0, #0
    afc6:	d10f      	bne.n	afe8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    afc8:	8861      	ldrh	r1, [r4, #2]
    afca:	8820      	ldrh	r0, [r4, #0]
    afcc:	f004 fc59 	bl	f882 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    afd0:	2800      	cmp	r0, #0
    afd2:	d109      	bne.n	afe8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    afd4:	4805      	ldr	r0, [pc, #20]	; (afec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    afd6:	88a1      	ldrh	r1, [r4, #4]
    afd8:	8081      	strh	r1, [r0, #4]
    afda:	8821      	ldrh	r1, [r4, #0]
    afdc:	8001      	strh	r1, [r0, #0]
    afde:	88e1      	ldrh	r1, [r4, #6]
    afe0:	80c1      	strh	r1, [r0, #6]
    afe2:	8861      	ldrh	r1, [r4, #2]
    afe4:	8041      	strh	r1, [r0, #2]
    afe6:	2000      	movs	r0, #0
    afe8:	bd10      	pop	{r4, pc}
    afea:	0000      	.short	0x0000
    afec:	2000020a 	.word	0x2000020a
    aff0:	0b12fe0b 	.word	0x0b12fe0b
    aff4:	12fe0059 	.word	0x12fe0059
    aff8:	05060708 	.word	0x05060708
    affc:	00020304 	.word	0x00020304
    b000:	f0f4f8fc 	.word	0xf0f4f8fc
    b004:	0304d8ec 	.word	0x0304d8ec
    b008:	f4f8fc00 	.word	0xf4f8fc00
    b00c:	00d8ecf0 	.word	0x00d8ecf0

0000b010 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b010:	b510      	push	{r4, lr}
    b012:	460c      	mov	r4, r1
    b014:	f7fb f872 	bl	60fc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b018:	4805      	ldr	r0, [pc, #20]	; (b030 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    b01a:	6004      	str	r4, [r0, #0]
    b01c:	6840      	ldr	r0, [r0, #4]
    b01e:	f004 fecd 	bl	fdbc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b022:	f004 fbc3 	bl	f7ac <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b02a:	f7fb ba81 	b.w	6530 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    b02e:	0000      	.short	0x0000
    b030:	20000214 	.word	0x20000214

0000b034 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b034:	b510      	push	{r4, lr}
    b036:	4c07      	ldr	r4, [pc, #28]	; (b054 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    b038:	68a0      	ldr	r0, [r4, #8]
    b03a:	f004 febf 	bl	fdbc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b03e:	68e0      	ldr	r0, [r4, #12]
    b040:	f004 febc 	bl	fdbc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b044:	f002 fe87 	bl	dd56 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b048:	f7fa fbd4 	bl	57f4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b050:	f7ff bec4 	b.w	addc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b054:	20000214 	.word	0x20000214

0000b058 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    b058:	b500      	push	{lr}
    b05a:	4905      	ldr	r1, [pc, #20]	; (b070 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    b05c:	4805      	ldr	r0, [pc, #20]	; (b074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b05e:	f004 fea0 	bl	fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b062:	4804      	ldr	r0, [pc, #16]	; (b074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b064:	4904      	ldr	r1, [pc, #16]	; (b078 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    b066:	1d00      	adds	r0, r0, #4
    b068:	f85d eb04 	ldr.w	lr, [sp], #4
    b06c:	f004 be99 	b.w	fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b070:	2000023c 	.word	0x2000023c
    b074:	20000218 	.word	0x20000218
    b078:	20000244 	.word	0x20000244

0000b07c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    b07c:	b500      	push	{lr}
    b07e:	4908      	ldr	r1, [pc, #32]	; (b0a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    b080:	4808      	ldr	r0, [pc, #32]	; (b0a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b082:	f004 fe8e 	bl	fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b086:	4807      	ldr	r0, [pc, #28]	; (b0a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b088:	4907      	ldr	r1, [pc, #28]	; (b0a8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    b08a:	1d00      	adds	r0, r0, #4
    b08c:	f004 fe89 	bl	fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b090:	4804      	ldr	r0, [pc, #16]	; (b0a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b092:	4906      	ldr	r1, [pc, #24]	; (b0ac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    b094:	3008      	adds	r0, #8
    b096:	f85d eb04 	ldr.w	lr, [sp], #4
    b09a:	f004 be82 	b.w	fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b09e:	0000      	.short	0x0000
    b0a0:	2000022c 	.word	0x2000022c
    b0a4:	20000218 	.word	0x20000218
    b0a8:	20000234 	.word	0x20000234
    b0ac:	20000224 	.word	0x20000224
    b0b0:	b510      	push	{r4, lr}
    b0b2:	f002 fe3e 	bl	dd32 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b0b6:	4806      	ldr	r0, [pc, #24]	; (b0d0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    b0b8:	f7f9 fdb2 	bl	4c20 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b0bc:	2000      	movs	r0, #0
    b0be:	f7f9 f8b9 	bl	4234 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b0c2:	f7fd fdb1 	bl	8c28 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    b0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0ca:	f7fb b831 	b.w	6130 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    b0ce:	0000      	.short	0x0000
    b0d0:	20001385 	.word	0x20001385
    b0d4:	b510      	push	{r4, lr}
    b0d6:	f7fb fba7 	bl	6828 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    b0da:	f7ff fb47 	bl	a76c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    b0de:	f7fc fd7f 	bl	7be0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    b0e2:	4803      	ldr	r0, [pc, #12]	; (b0f0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    b0e4:	f7fb fb3c 	bl	6760 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    b0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0ec:	f7fb b830 	b.w	6150 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    b0f0:	20001385 	.word	0x20001385

0000b0f4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b0f4:	2101      	movs	r1, #1
    b0f6:	4081      	lsls	r1, r0
    b0f8:	4802      	ldr	r0, [pc, #8]	; (b104 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b0fa:	6802      	ldr	r2, [r0, #0]
    b0fc:	4311      	orrs	r1, r2
    b0fe:	6001      	str	r1, [r0, #0]
    b100:	4770      	bx	lr
    b102:	0000      	.short	0x0000
    b104:	2000024c 	.word	0x2000024c

0000b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b108:	4801      	ldr	r0, [pc, #4]	; (b110 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b10a:	6800      	ldr	r0, [r0, #0]
    b10c:	4770      	bx	lr
    b10e:	0000      	.short	0x0000
    b110:	2000024c 	.word	0x2000024c

0000b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b114:	4803      	ldr	r0, [pc, #12]	; (b124 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b116:	8800      	ldrh	r0, [r0, #0]
    b118:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b11c:	0040      	lsls	r0, r0, #1
    b11e:	1c40      	adds	r0, r0, #1
    b120:	4770      	bx	lr
    b122:	0000      	.short	0x0000
    b124:	2000024c 	.word	0x2000024c

0000b128 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b128:	b510      	push	{r4, lr}
    b12a:	f7f8 fb01 	bl	3730 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b12e:	2200      	movs	r2, #0
    b130:	4b08      	ldr	r3, [pc, #32]	; (b154 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b132:	4611      	mov	r1, r2
    b134:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b138:	4284      	cmp	r4, r0
    b13a:	d303      	bcc.n	b144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b13c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b140:	7882      	ldrb	r2, [r0, #2]
    b142:	e003      	b.n	b14c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b144:	1c49      	adds	r1, r1, #1
    b146:	b2c9      	uxtb	r1, r1
    b148:	290c      	cmp	r1, #12
    b14a:	d3f3      	bcc.n	b134 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b14c:	4802      	ldr	r0, [pc, #8]	; (b158 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b14e:	7002      	strb	r2, [r0, #0]
    b150:	bd10      	pop	{r4, pc}
    b152:	0000      	.short	0x0000
    b154:	0000fe28 	.word	0x0000fe28
    b158:	200002a1 	.word	0x200002a1

0000b15c <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b15c:	4801      	ldr	r0, [pc, #4]	; (b164 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b15e:	7800      	ldrb	r0, [r0, #0]
    b160:	4770      	bx	lr
    b162:	0000      	.short	0x0000
    b164:	200002a1 	.word	0x200002a1

0000b168 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b168:	b570      	push	{r4, r5, r6, lr}
    b16a:	4605      	mov	r5, r0
    b16c:	4616      	mov	r6, r2
    b16e:	460c      	mov	r4, r1
    b170:	2002      	movs	r0, #2
    b172:	f000 f9f9 	bl	b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b176:	4906      	ldr	r1, [pc, #24]	; (b190 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b178:	2001      	movs	r0, #1
    b17a:	1ef6      	subs	r6, r6, #3
    b17c:	7008      	strb	r0, [r1, #0]
    b17e:	4805      	ldr	r0, [pc, #20]	; (b194 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b180:	6006      	str	r6, [r0, #0]
    b182:	4804      	ldr	r0, [pc, #16]	; (b194 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b184:	3808      	subs	r0, #8
    b186:	6005      	str	r5, [r0, #0]
    b188:	1f00      	subs	r0, r0, #4
    b18a:	6004      	str	r4, [r0, #0]
    b18c:	bd70      	pop	{r4, r5, r6, pc}
    b18e:	0000      	.short	0x0000
    b190:	200002a2 	.word	0x200002a2
    b194:	4000f510 	.word	0x4000f510

0000b198 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b198:	b510      	push	{r4, lr}
    b19a:	4c0c      	ldr	r4, [pc, #48]	; (b1cc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b19c:	7820      	ldrb	r0, [r4, #0]
    b19e:	b180      	cbz	r0, b1c2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b1a0:	490b      	ldr	r1, [pc, #44]	; (b1d0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b1a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b1a6:	6008      	str	r0, [r1, #0]
    b1a8:	f000 f86a 	bl	b280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b1ac:	2100      	movs	r1, #0
    b1ae:	b120      	cbz	r0, b1ba <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b1b0:	2001      	movs	r0, #1
    b1b2:	7060      	strb	r0, [r4, #1]
    b1b4:	4807      	ldr	r0, [pc, #28]	; (b1d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b1b6:	6800      	ldr	r0, [r0, #0]
    b1b8:	e001      	b.n	b1be <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b1ba:	7061      	strb	r1, [r4, #1]
    b1bc:	2010      	movs	r0, #16
    b1be:	70a0      	strb	r0, [r4, #2]
    b1c0:	7021      	strb	r1, [r4, #0]
    b1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1c6:	2000      	movs	r0, #0
    b1c8:	f000 b9ce 	b.w	b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1cc:	200002a2 	.word	0x200002a2
    b1d0:	4001f508 	.word	0x4001f508
    b1d4:	4000f400 	.word	0x4000f400

0000b1d8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b1d8:	b510      	push	{r4, lr}
    b1da:	2002      	movs	r0, #2
    b1dc:	f000 f9c4 	bl	b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1e0:	4904      	ldr	r1, [pc, #16]	; (b1f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b1e2:	2001      	movs	r0, #1
    b1e4:	7008      	strb	r0, [r1, #0]
    b1e6:	f000 f859 	bl	b29c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b1ea:	4903      	ldr	r1, [pc, #12]	; (b1f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b1ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b1f0:	6008      	str	r0, [r1, #0]
    b1f2:	bd10      	pop	{r4, pc}
    b1f4:	200002a2 	.word	0x200002a2
    b1f8:	4001f504 	.word	0x4001f504

0000b1fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b1fc:	4803      	ldr	r0, [pc, #12]	; (b20c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b1fe:	2100      	movs	r1, #0
    b200:	7001      	strb	r1, [r0, #0]
    b202:	7041      	strb	r1, [r0, #1]
    b204:	2110      	movs	r1, #16
    b206:	7081      	strb	r1, [r0, #2]
    b208:	4770      	bx	lr
    b20a:	0000      	.short	0x0000
    b20c:	200002a2 	.word	0x200002a2

0000b210 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b210:	4807      	ldr	r0, [pc, #28]	; (b230 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b212:	b510      	push	{r4, lr}
    b214:	7801      	ldrb	r1, [r0, #0]
    b216:	b141      	cbz	r1, b22a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b218:	f000 f832 	bl	b280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b21c:	b118      	cbz	r0, b226 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b21e:	4805      	ldr	r0, [pc, #20]	; (b234 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b220:	6800      	ldr	r0, [r0, #0]
    b222:	b2c0      	uxtb	r0, r0
    b224:	bd10      	pop	{r4, pc}
    b226:	2010      	movs	r0, #16
    b228:	bd10      	pop	{r4, pc}
    b22a:	7880      	ldrb	r0, [r0, #2]
    b22c:	bd10      	pop	{r4, pc}
    b22e:	0000      	.short	0x0000
    b230:	200002a2 	.word	0x200002a2
    b234:	4000f400 	.word	0x4000f400

0000b238 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b238:	4808      	ldr	r0, [pc, #32]	; (b25c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b23a:	b510      	push	{r4, lr}
    b23c:	7801      	ldrb	r1, [r0, #0]
    b23e:	b159      	cbz	r1, b258 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b240:	4807      	ldr	r0, [pc, #28]	; (b260 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b242:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b246:	b128      	cbz	r0, b254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b248:	f000 f80c 	bl	b264 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b24c:	2800      	cmp	r0, #0
    b24e:	d000      	beq.n	b252 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b250:	2001      	movs	r0, #1
    b252:	bd10      	pop	{r4, pc}
    b254:	2002      	movs	r0, #2
    b256:	bd10      	pop	{r4, pc}
    b258:	7840      	ldrb	r0, [r0, #1]
    b25a:	bd10      	pop	{r4, pc}
    b25c:	200002a2 	.word	0x200002a2
    b260:	4000f000 	.word	0x4000f000
    b264:	4805      	ldr	r0, [pc, #20]	; (b27c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b266:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b26a:	b111      	cbz	r1, b272 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b26c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b270:	b108      	cbz	r0, b276 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b272:	2000      	movs	r0, #0
    b274:	4770      	bx	lr
    b276:	2001      	movs	r0, #1
    b278:	4770      	bx	lr
    b27a:	0000      	.short	0x0000
    b27c:	4000f000 	.word	0x4000f000
    b280:	4805      	ldr	r0, [pc, #20]	; (b298 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b282:	b510      	push	{r4, lr}
    b284:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b288:	b120      	cbz	r0, b294 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b28a:	f7ff ffeb 	bl	b264 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b28e:	b108      	cbz	r0, b294 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b290:	2001      	movs	r0, #1
    b292:	bd10      	pop	{r4, pc}
    b294:	2000      	movs	r0, #0
    b296:	bd10      	pop	{r4, pc}
    b298:	4000f000 	.word	0x4000f000
    b29c:	4804      	ldr	r0, [pc, #16]	; (b2b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b29e:	2100      	movs	r1, #0
    b2a0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b2a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b2a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b2ac:	4770      	bx	lr
    b2ae:	0000      	.short	0x0000
    b2b0:	4000f000 	.word	0x4000f000

0000b2b4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b2b4:	4a08      	ldr	r2, [pc, #32]	; (b2d8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b2b6:	b510      	push	{r4, lr}
    b2b8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b2bc:	4907      	ldr	r1, [pc, #28]	; (b2dc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b2be:	4610      	mov	r0, r2
    b2c0:	f7f8 fc8c 	bl	3bdc <mpsl_fem_lna_configuration_set>
    b2c4:	2800      	cmp	r0, #0
    b2c6:	d005      	beq.n	b2d4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b2c8:	1c40      	adds	r0, r0, #1
    b2ca:	d003      	beq.n	b2d4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b2cc:	217d      	movs	r1, #125	; 0x7d
    b2ce:	2040      	movs	r0, #64	; 0x40
    b2d0:	f7f8 fde8 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2d4:	bd10      	pop	{r4, pc}
    b2d6:	0000      	.short	0x0000
    b2d8:	20000250 	.word	0x20000250
    b2dc:	0000b30c 	.word	0x0000b30c

0000b2e0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b2e0:	4a08      	ldr	r2, [pc, #32]	; (b304 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b2e2:	b510      	push	{r4, lr}
    b2e4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b2e8:	4907      	ldr	r1, [pc, #28]	; (b308 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b2ea:	4610      	mov	r0, r2
    b2ec:	f7f8 fc82 	bl	3bf4 <mpsl_fem_pa_configuration_set>
    b2f0:	2800      	cmp	r0, #0
    b2f2:	d005      	beq.n	b300 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b2f4:	1c40      	adds	r0, r0, #1
    b2f6:	d003      	beq.n	b300 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b2f8:	2172      	movs	r1, #114	; 0x72
    b2fa:	2040      	movs	r0, #64	; 0x40
    b2fc:	f7f8 fdd2 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b300:	bd10      	pop	{r4, pc}
    b302:	0000      	.short	0x0000
    b304:	20000250 	.word	0x20000250
    b308:	0000b30c 	.word	0x0000b30c
    b30c:	00000001 	.word	0x00000001
    b310:	40001110 	.word	0x40001110
	...

0000b324 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b324:	4a07      	ldr	r2, [pc, #28]	; (b344 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b326:	b510      	push	{r4, lr}
    b328:	7853      	ldrb	r3, [r2, #1]
    b32a:	b133      	cbz	r3, b33a <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b32c:	4b06      	ldr	r3, [pc, #24]	; (b348 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b32e:	6019      	str	r1, [r3, #0]
    b330:	1d19      	adds	r1, r3, #4
    b332:	6008      	str	r0, [r1, #0]
    b334:	2001      	movs	r0, #1
    b336:	7090      	strb	r0, [r2, #2]
    b338:	bd10      	pop	{r4, pc}
    b33a:	21ba      	movs	r1, #186	; 0xba
    b33c:	203c      	movs	r0, #60	; 0x3c
    b33e:	f7f8 fdb1 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b342:	0000      	.short	0x0000
    b344:	200002a5 	.word	0x200002a5
    b348:	4000f50c 	.word	0x4000f50c

0000b34c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b34c:	4809      	ldr	r0, [pc, #36]	; (b374 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b34e:	b510      	push	{r4, lr}
    b350:	7801      	ldrb	r1, [r0, #0]
    b352:	b151      	cbz	r1, b36a <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b354:	7880      	ldrb	r0, [r0, #2]
    b356:	b140      	cbz	r0, b36a <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b358:	4907      	ldr	r1, [pc, #28]	; (b378 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b35a:	2000      	movs	r0, #0
    b35c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b360:	4906      	ldr	r1, [pc, #24]	; (b37c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b362:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b366:	6008      	str	r0, [r1, #0]
    b368:	bd10      	pop	{r4, pc}
    b36a:	21e1      	movs	r1, #225	; 0xe1
    b36c:	203c      	movs	r0, #60	; 0x3c
    b36e:	f7f8 fd99 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b372:	0000      	.short	0x0000
    b374:	200002a5 	.word	0x200002a5
    b378:	4000f000 	.word	0x4000f000
    b37c:	4001f504 	.word	0x4001f504

0000b380 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b380:	b570      	push	{r4, r5, r6, lr}
    b382:	4c0b      	ldr	r4, [pc, #44]	; (b3b0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b384:	2500      	movs	r5, #0
    b386:	7820      	ldrb	r0, [r4, #0]
    b388:	b158      	cbz	r0, b3a2 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b38a:	f000 f8e5 	bl	b558 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b38e:	4809      	ldr	r0, [pc, #36]	; (b3b4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b390:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b394:	b118      	cbz	r0, b39e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b396:	4808      	ldr	r0, [pc, #32]	; (b3b8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b398:	6800      	ldr	r0, [r0, #0]
    b39a:	70e0      	strb	r0, [r4, #3]
    b39c:	e000      	b.n	b3a0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b39e:	70e5      	strb	r5, [r4, #3]
    b3a0:	7025      	strb	r5, [r4, #0]
    b3a2:	2000      	movs	r0, #0
    b3a4:	f000 f8e0 	bl	b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3a8:	7065      	strb	r5, [r4, #1]
    b3aa:	70a5      	strb	r5, [r4, #2]
    b3ac:	bd70      	pop	{r4, r5, r6, pc}
    b3ae:	0000      	.short	0x0000
    b3b0:	200002a5 	.word	0x200002a5
    b3b4:	4000f000 	.word	0x4000f000
    b3b8:	4000f400 	.word	0x4000f400

0000b3bc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b3bc:	480d      	ldr	r0, [pc, #52]	; (b3f4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b3be:	b510      	push	{r4, lr}
    b3c0:	7801      	ldrb	r1, [r0, #0]
    b3c2:	b191      	cbz	r1, b3ea <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b3c4:	7880      	ldrb	r0, [r0, #2]
    b3c6:	b180      	cbz	r0, b3ea <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b3c8:	490b      	ldr	r1, [pc, #44]	; (b3f8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b3ca:	2000      	movs	r0, #0
    b3cc:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b3d0:	4a0a      	ldr	r2, [pc, #40]	; (b3fc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b3d2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b3d6:	6010      	str	r0, [r2, #0]
    b3d8:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b3dc:	2a01      	cmp	r2, #1
    b3de:	d103      	bne.n	b3e8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b3e0:	604a      	str	r2, [r1, #4]
    b3e2:	4906      	ldr	r1, [pc, #24]	; (b3fc <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b3e4:	1d09      	adds	r1, r1, #4
    b3e6:	6008      	str	r0, [r1, #0]
    b3e8:	bd10      	pop	{r4, pc}
    b3ea:	21d1      	movs	r1, #209	; 0xd1
    b3ec:	203c      	movs	r0, #60	; 0x3c
    b3ee:	f7f8 fd59 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3f2:	0000      	.short	0x0000
    b3f4:	200002a5 	.word	0x200002a5
    b3f8:	4000f000 	.word	0x4000f000
    b3fc:	4001f504 	.word	0x4001f504

0000b400 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b400:	4803      	ldr	r0, [pc, #12]	; (b410 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b402:	2100      	movs	r1, #0
    b404:	7001      	strb	r1, [r0, #0]
    b406:	7041      	strb	r1, [r0, #1]
    b408:	7081      	strb	r1, [r0, #2]
    b40a:	70c1      	strb	r1, [r0, #3]
    b40c:	4770      	bx	lr
    b40e:	0000      	.short	0x0000
    b410:	200002a5 	.word	0x200002a5

0000b414 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b418:	4605      	mov	r5, r0
    b41a:	461c      	mov	r4, r3
    b41c:	4690      	mov	r8, r2
    b41e:	460f      	mov	r7, r1
    b420:	2001      	movs	r0, #1
    b422:	f000 f8a1 	bl	b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b426:	4e12      	ldr	r6, [pc, #72]	; (b470 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b428:	4812      	ldr	r0, [pc, #72]	; (b474 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b42a:	7134      	strb	r4, [r6, #4]
    b42c:	6007      	str	r7, [r0, #0]
    b42e:	4911      	ldr	r1, [pc, #68]	; (b474 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b430:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b434:	1f09      	subs	r1, r1, #4
    b436:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b43a:	6008      	str	r0, [r1, #0]
    b43c:	f001 faff 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b440:	b938      	cbnz	r0, b452 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b442:	480c      	ldr	r0, [pc, #48]	; (b474 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b444:	3010      	adds	r0, #16
    b446:	6801      	ldr	r1, [r0, #0]
    b448:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b44c:	ea41 0108 	orr.w	r1, r1, r8
    b450:	6001      	str	r1, [r0, #0]
    b452:	f000 f881 	bl	b558 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b456:	b93d      	cbnz	r5, b468 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b458:	4808      	ldr	r0, [pc, #32]	; (b47c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b45a:	4a07      	ldr	r2, [pc, #28]	; (b478 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b45c:	4906      	ldr	r1, [pc, #24]	; (b478 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b45e:	3afc      	subs	r2, #252	; 0xfc
    b460:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b464:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b468:	2001      	movs	r0, #1
    b46a:	7070      	strb	r0, [r6, #1]
    b46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b470:	200002a5 	.word	0x200002a5
    b474:	4000f508 	.word	0x4000f508
    b478:	4000f100 	.word	0x4000f100
    b47c:	4001f088 	.word	0x4001f088

0000b480 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b480:	4808      	ldr	r0, [pc, #32]	; (b4a4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b482:	b510      	push	{r4, lr}
    b484:	7841      	ldrb	r1, [r0, #1]
    b486:	b149      	cbz	r1, b49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b488:	2101      	movs	r1, #1
    b48a:	7001      	strb	r1, [r0, #0]
    b48c:	4806      	ldr	r0, [pc, #24]	; (b4a8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b48e:	2200      	movs	r2, #0
    b490:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b494:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b498:	6001      	str	r1, [r0, #0]
    b49a:	bd10      	pop	{r4, pc}
    b49c:	21c5      	movs	r1, #197	; 0xc5
    b49e:	203c      	movs	r0, #60	; 0x3c
    b4a0:	f7f8 fd00 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4a4:	200002a5 	.word	0x200002a5
    b4a8:	4000f000 	.word	0x4000f000

0000b4ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b4ac:	4806      	ldr	r0, [pc, #24]	; (b4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b4ae:	7801      	ldrb	r1, [r0, #0]
    b4b0:	b141      	cbz	r1, b4c4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b4b2:	4806      	ldr	r0, [pc, #24]	; (b4cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b4b4:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b4b8:	2800      	cmp	r0, #0
    b4ba:	d002      	beq.n	b4c2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b4bc:	4804      	ldr	r0, [pc, #16]	; (b4d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b4be:	6800      	ldr	r0, [r0, #0]
    b4c0:	b2c0      	uxtb	r0, r0
    b4c2:	4770      	bx	lr
    b4c4:	78c0      	ldrb	r0, [r0, #3]
    b4c6:	4770      	bx	lr
    b4c8:	200002a5 	.word	0x200002a5
    b4cc:	4000f000 	.word	0x4000f000
    b4d0:	4000f400 	.word	0x4000f400

0000b4d4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b4d4:	4901      	ldr	r1, [pc, #4]	; (b4dc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b4d6:	2001      	movs	r0, #1
    b4d8:	6088      	str	r0, [r1, #8]
    b4da:	4770      	bx	lr
    b4dc:	4000f000 	.word	0x4000f000

0000b4e0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4e4:	2800      	cmp	r0, #0
    b4e6:	d02e      	beq.n	b546 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b4e8:	4818      	ldr	r0, [pc, #96]	; (b54c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b4ea:	7800      	ldrb	r0, [r0, #0]
    b4ec:	b1b0      	cbz	r0, b51c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b4ee:	4d18      	ldr	r5, [pc, #96]	; (b550 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b4f0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b4f4:	2800      	cmp	r0, #0
    b4f6:	d126      	bne.n	b546 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b4f8:	2702      	movs	r7, #2
    b4fa:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b4fe:	4c15      	ldr	r4, [pc, #84]	; (b554 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b500:	6820      	ldr	r0, [r4, #0]
    b502:	43c0      	mvns	r0, r0
    b504:	f340 1600 	sbfx	r6, r0, #4, #1
    b508:	6820      	ldr	r0, [r4, #0]
    b50a:	f040 0010 	orr.w	r0, r0, #16
    b50e:	6020      	str	r0, [r4, #0]
    b510:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b514:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b518:	1c76      	adds	r6, r6, #1
    b51a:	e009      	b.n	b530 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b51c:	f240 1153 	movw	r1, #339	; 0x153
    b520:	203c      	movs	r0, #60	; 0x3c
    b522:	f7f8 fcbf 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b526:	bf00      	nop
    b528:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b52c:	f7f8 fb00 	bl	3b30 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b530:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b534:	2800      	cmp	r0, #0
    b536:	d0f7      	beq.n	b528 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b538:	b91e      	cbnz	r6, b542 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b53a:	6820      	ldr	r0, [r4, #0]
    b53c:	f020 0010 	bic.w	r0, r0, #16
    b540:	6020      	str	r0, [r4, #0]
    b542:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b54a:	0000      	.short	0x0000
    b54c:	200002a5 	.word	0x200002a5
    b550:	4000f000 	.word	0x4000f000
    b554:	e000ed10 	.word	0xe000ed10
    b558:	4902      	ldr	r1, [pc, #8]	; (b564 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b55a:	4801      	ldr	r0, [pc, #4]	; (b560 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b55c:	6008      	str	r0, [r1, #0]
    b55e:	4770      	bx	lr
    b560:	02020000 	.word	0x02020000
    b564:	4001f508 	.word	0x4001f508

0000b568 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b568:	b510      	push	{r4, lr}
    b56a:	4604      	mov	r4, r0
    b56c:	f000 f822 	bl	b5b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b570:	2c00      	cmp	r4, #0
    b572:	d017      	beq.n	b5a4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b574:	4a0c      	ldr	r2, [pc, #48]	; (b5a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b576:	480c      	ldr	r0, [pc, #48]	; (b5a8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b578:	490c      	ldr	r1, [pc, #48]	; (b5ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b57a:	3214      	adds	r2, #20
    b57c:	4b0c      	ldr	r3, [pc, #48]	; (b5b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b57e:	2c01      	cmp	r4, #1
    b580:	d005      	beq.n	b58e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b582:	2c02      	cmp	r4, #2
    b584:	d008      	beq.n	b598 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b586:	2183      	movs	r1, #131	; 0x83
    b588:	203d      	movs	r0, #61	; 0x3d
    b58a:	f7f8 fc8b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b58e:	2402      	movs	r4, #2
    b590:	6004      	str	r4, [r0, #0]
    b592:	6011      	str	r1, [r2, #0]
    b594:	0620      	lsls	r0, r4, #24
    b596:	e004      	b.n	b5a2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b598:	2403      	movs	r4, #3
    b59a:	6004      	str	r4, [r0, #0]
    b59c:	6011      	str	r1, [r2, #0]
    b59e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b5a2:	6018      	str	r0, [r3, #0]
    b5a4:	bd10      	pop	{r4, pc}
    b5a6:	0000      	.short	0x0000
    b5a8:	4000f500 	.word	0x4000f500
    b5ac:	20001487 	.word	0x20001487
    b5b0:	4001f504 	.word	0x4001f504
    b5b4:	4804      	ldr	r0, [pc, #16]	; (b5c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b5b6:	2100      	movs	r1, #0
    b5b8:	6001      	str	r1, [r0, #0]
    b5ba:	6001      	str	r1, [r0, #0]
    b5bc:	4903      	ldr	r1, [pc, #12]	; (b5cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b5be:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b5c2:	6008      	str	r0, [r1, #0]
    b5c4:	4770      	bx	lr
    b5c6:	0000      	.short	0x0000
    b5c8:	4000f500 	.word	0x4000f500
    b5cc:	4001f508 	.word	0x4001f508

0000b5d0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b5d0:	4805      	ldr	r0, [pc, #20]	; (b5e8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b5d2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b5d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b5da:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b5de:	2100      	movs	r1, #0
    b5e0:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b5e4:	4770      	bx	lr
    b5e6:	0000      	.short	0x0000
    b5e8:	40001000 	.word	0x40001000

0000b5ec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b5ec:	4904      	ldr	r1, [pc, #16]	; (b600 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b5ee:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b5f2:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b5f6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b5fa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b5fe:	4770      	bx	lr
    b600:	40001000 	.word	0x40001000

0000b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b606:	4c23      	ldr	r4, [pc, #140]	; (b694 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b608:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b60c:	f010 0f10 	tst.w	r0, #16
    b610:	d001      	beq.n	b616 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b612:	2701      	movs	r7, #1
    b614:	e000      	b.n	b618 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b616:	2700      	movs	r7, #0
    b618:	2010      	movs	r0, #16
    b61a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b61e:	2002      	movs	r0, #2
    b620:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b624:	481c      	ldr	r0, [pc, #112]	; (b698 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b626:	2500      	movs	r5, #0
    b628:	491d      	ldr	r1, [pc, #116]	; (b6a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b62a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b62e:	481b      	ldr	r0, [pc, #108]	; (b69c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b630:	6008      	str	r0, [r1, #0]
    b632:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b636:	f44f 7688 	mov.w	r6, #272	; 0x110
    b63a:	f010 0fff 	tst.w	r0, #255	; 0xff
    b63e:	d018      	beq.n	b672 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b640:	20ff      	movs	r0, #255	; 0xff
    b642:	f88d 0000 	strb.w	r0, [sp]
    b646:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b64a:	2001      	movs	r0, #1
    b64c:	6120      	str	r0, [r4, #16]
    b64e:	e004      	b.n	b65a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b650:	f89d 0000 	ldrb.w	r0, [sp]
    b654:	1e40      	subs	r0, r0, #1
    b656:	f88d 0000 	strb.w	r0, [sp]
    b65a:	f89d 0000 	ldrb.w	r0, [sp]
    b65e:	b128      	cbz	r0, b66c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b660:	4631      	mov	r1, r6
    b662:	4620      	mov	r0, r4
    b664:	f004 fcaf 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b668:	2800      	cmp	r0, #0
    b66a:	d0f1      	beq.n	b650 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b66c:	f89d 0000 	ldrb.w	r0, [sp]
    b670:	b158      	cbz	r0, b68a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b672:	f000 fc91 	bl	bf98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b676:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b67a:	f000 fe0d 	bl	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b67e:	2f00      	cmp	r7, #0
    b680:	d002      	beq.n	b688 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b682:	2010      	movs	r0, #16
    b684:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b68a:	f240 718f 	movw	r1, #1935	; 0x78f
    b68e:	203e      	movs	r0, #62	; 0x3e
    b690:	f7f8 fc08 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b694:	40001000 	.word	0x40001000
    b698:	20001144 	.word	0x20001144
    b69c:	0c0e0000 	.word	0x0c0e0000
    b6a0:	4001f508 	.word	0x4001f508

0000b6a4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6a8:	4d20      	ldr	r5, [pc, #128]	; (b72c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b6aa:	4607      	mov	r7, r0
    b6ac:	4688      	mov	r8, r1
    b6ae:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b6b2:	07c1      	lsls	r1, r0, #31
    b6b4:	d018      	beq.n	b6e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b6b6:	4a1e      	ldr	r2, [pc, #120]	; (b730 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b6b8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b6bc:	6011      	str	r1, [r2, #0]
    b6be:	4c1d      	ldr	r4, [pc, #116]	; (b734 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b6c0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b6c4:	f041 0101 	orr.w	r1, r1, #1
    b6c8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b6cc:	f040 0002 	orr.w	r0, r0, #2
    b6d0:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b6d4:	4640      	mov	r0, r8
    b6d6:	f000 fe43 	bl	c360 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b6da:	f000 fbfb 	bl	bed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b6de:	2601      	movs	r6, #1
    b6e0:	b13f      	cbz	r7, b6f2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b6e2:	2f01      	cmp	r7, #1
    b6e4:	d00e      	beq.n	b704 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b6e6:	e016      	b.n	b716 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b6e8:	f240 611a 	movw	r1, #1562	; 0x61a
    b6ec:	203e      	movs	r0, #62	; 0x3e
    b6ee:	f7f8 fbd9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6f2:	4640      	mov	r0, r8
    b6f4:	f000 fc1e 	bl	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b6f8:	4640      	mov	r0, r8
    b6fa:	f000 fbcf 	bl	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b6fe:	726e      	strb	r6, [r5, #9]
    b700:	6026      	str	r6, [r4, #0]
    b702:	e008      	b.n	b716 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b704:	f000 fc3e 	bl	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b708:	f000 fd8c 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b70c:	2002      	movs	r0, #2
    b70e:	7268      	strb	r0, [r5, #9]
    b710:	f000 fcb0 	bl	c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b714:	6066      	str	r6, [r4, #4]
    b716:	4808      	ldr	r0, [pc, #32]	; (b738 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b718:	64c6      	str	r6, [r0, #76]	; 0x4c
    b71a:	4807      	ldr	r0, [pc, #28]	; (b738 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b71c:	300c      	adds	r0, #12
    b71e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b722:	4638      	mov	r0, r7
    b724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b728:	f004 bc35 	b.w	ff96 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b72c:	20001144 	.word	0x20001144
    b730:	4001f504 	.word	0x4001f504
    b734:	40001000 	.word	0x40001000
    b738:	40008000 	.word	0x40008000

0000b73c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b740:	4d35      	ldr	r5, [pc, #212]	; (b818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b742:	4606      	mov	r6, r0
    b744:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b748:	4689      	mov	r9, r1
    b74a:	6028      	str	r0, [r5, #0]
    b74c:	4c33      	ldr	r4, [pc, #204]	; (b81c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b74e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b752:	f040 0002 	orr.w	r0, r0, #2
    b756:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b75a:	4608      	mov	r0, r1
    b75c:	f000 fe00 	bl	c360 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b760:	f000 fbb8 	bl	bed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b764:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b820 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b768:	2700      	movs	r7, #0
    b76a:	b116      	cbz	r6, b772 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b76c:	2e01      	cmp	r6, #1
    b76e:	d027      	beq.n	b7c0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b770:	e03f      	b.n	b7f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b772:	4648      	mov	r0, r9
    b774:	f000 fbde 	bl	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b778:	79e0      	ldrb	r0, [r4, #7]
    b77a:	2801      	cmp	r0, #1
    b77c:	d105      	bne.n	b78a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b77e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b782:	f041 0108 	orr.w	r1, r1, #8
    b786:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b78a:	4648      	mov	r0, r9
    b78c:	f000 fb86 	bl	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b790:	2001      	movs	r0, #1
    b792:	7260      	strb	r0, [r4, #9]
    b794:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b796:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b79a:	62a0      	str	r0, [r4, #40]	; 0x28
    b79c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b7a0:	6028      	str	r0, [r5, #0]
    b7a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b7a6:	f1b9 0f02 	cmp.w	r9, #2
    b7aa:	d007      	beq.n	b7bc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b7ac:	f640 0034 	movw	r0, #2100	; 0x834
    b7b0:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b7b4:	4410      	add	r0, r2
    b7b6:	fbb0 f7f1 	udiv	r7, r0, r1
    b7ba:	e01a      	b.n	b7f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b7bc:	4608      	mov	r0, r1
    b7be:	e7f7      	b.n	b7b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b7c0:	f000 fbe0 	bl	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b7c4:	f000 fd2e 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b7c8:	79e0      	ldrb	r0, [r4, #7]
    b7ca:	2801      	cmp	r0, #1
    b7cc:	d105      	bne.n	b7da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b7ce:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b7d2:	f041 0104 	orr.w	r1, r1, #4
    b7d6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b7da:	2002      	movs	r0, #2
    b7dc:	7260      	strb	r0, [r4, #9]
    b7de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b7e0:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b7e4:	62a0      	str	r0, [r4, #40]	; 0x28
    b7e6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b7ea:	6028      	str	r0, [r5, #0]
    b7ec:	2729      	movs	r7, #41	; 0x29
    b7ee:	f000 fc41 	bl	c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b7f2:	f000 fc2b 	bl	c04c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b7f6:	f000 fff9 	bl	c7ec <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b7fa:	6800      	ldr	r0, [r0, #0]
    b7fc:	2801      	cmp	r0, #1
    b7fe:	d006      	beq.n	b80e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b800:	2100      	movs	r1, #0
    b802:	4630      	mov	r0, r6
    b804:	f004 fbc7 	bl	ff96 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b808:	4638      	mov	r0, r7
    b80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b80e:	f7ff fef9 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b812:	2000      	movs	r0, #0
    b814:	e7f9      	b.n	b80a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b816:	0000      	.short	0x0000
    b818:	4001f504 	.word	0x4001f504
    b81c:	20001144 	.word	0x20001144
    b820:	40001000 	.word	0x40001000

0000b824 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b824:	b510      	push	{r4, lr}
    b826:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b828:	4901      	ldr	r1, [pc, #4]	; (b830 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b82a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b82e:	bd10      	pop	{r4, pc}
    b830:	20001134 	.word	0x20001134

0000b834 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b834:	b570      	push	{r4, r5, r6, lr}
    b836:	4c11      	ldr	r4, [pc, #68]	; (b87c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b838:	4606      	mov	r6, r0
    b83a:	2002      	movs	r0, #2
    b83c:	7320      	strb	r0, [r4, #12]
    b83e:	2596      	movs	r5, #150	; 0x96
    b840:	f000 f85e 	bl	b900 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b844:	4602      	mov	r2, r0
    b846:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b84a:	f894 1020 	ldrb.w	r1, [r4, #32]
    b84e:	2801      	cmp	r0, #1
    b850:	d00f      	beq.n	b872 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b852:	4628      	mov	r0, r5
    b854:	f004 fbc1 	bl	ffda <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b858:	6120      	str	r0, [r4, #16]
    b85a:	4809      	ldr	r0, [pc, #36]	; (b880 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b85c:	2100      	movs	r1, #0
    b85e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b862:	6921      	ldr	r1, [r4, #16]
    b864:	69e0      	ldr	r0, [r4, #28]
    b866:	4408      	add	r0, r1
    b868:	4905      	ldr	r1, [pc, #20]	; (b880 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b86a:	1d09      	adds	r1, r1, #4
    b86c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b870:	bd70      	pop	{r4, r5, r6, pc}
    b872:	4633      	mov	r3, r6
    b874:	4628      	mov	r0, r5
    b876:	f004 fbcc 	bl	10012 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b87a:	e7ed      	b.n	b858 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b87c:	20001144 	.word	0x20001144
    b880:	40008000 	.word	0x40008000

0000b884 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b888:	2238      	movs	r2, #56	; 0x38
    b88a:	2100      	movs	r1, #0
    b88c:	4813      	ldr	r0, [pc, #76]	; (b8dc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b88e:	f001 f9a2 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b892:	f000 fd01 	bl	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b896:	f001 f8a7 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b89a:	4d11      	ldr	r5, [pc, #68]	; (b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b89c:	4e10      	ldr	r6, [pc, #64]	; (b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b89e:	2400      	movs	r4, #0
    b8a0:	4f0f      	ldr	r7, [pc, #60]	; (b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8a2:	3508      	adds	r5, #8
    b8a4:	3610      	adds	r6, #16
    b8a6:	b928      	cbnz	r0, b8b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8a8:	f001 f8b5 	bl	ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b8ac:	b910      	cbnz	r0, b8b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8ae:	f001 f8bc 	bl	ca2a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b8b2:	b108      	cbz	r0, b8b8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b8b4:	2224      	movs	r2, #36	; 0x24
    b8b6:	e006      	b.n	b8c6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b8b8:	f001 f8f7 	bl	caaa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b8bc:	b910      	cbnz	r0, b8c4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b8be:	f001 f8ea 	bl	ca96 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b8c2:	b140      	cbz	r0, b8d6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b8c4:	2240      	movs	r2, #64	; 0x40
    b8c6:	21ff      	movs	r1, #255	; 0xff
    b8c8:	4638      	mov	r0, r7
    b8ca:	f001 f984 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b8ce:	602c      	str	r4, [r5, #0]
    b8d0:	6034      	str	r4, [r6, #0]
    b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8d6:	2238      	movs	r2, #56	; 0x38
    b8d8:	e7f5      	b.n	b8c6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b8da:	0000      	.short	0x0000
    b8dc:	20001144 	.word	0x20001144
    b8e0:	40000e00 	.word	0x40000e00

0000b8e4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b8e4:	4805      	ldr	r0, [pc, #20]	; (b8fc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b8e6:	b510      	push	{r4, lr}
    b8e8:	69c0      	ldr	r0, [r0, #28]
    b8ea:	2800      	cmp	r0, #0
    b8ec:	d104      	bne.n	b8f8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b8ee:	f240 11fb 	movw	r1, #507	; 0x1fb
    b8f2:	203e      	movs	r0, #62	; 0x3e
    b8f4:	f7f8 fad6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8f8:	bd10      	pop	{r4, pc}
    b8fa:	0000      	.short	0x0000
    b8fc:	20001144 	.word	0x20001144

0000b900 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b900:	4814      	ldr	r0, [pc, #80]	; (b954 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b902:	b510      	push	{r4, lr}
    b904:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b908:	7a40      	ldrb	r0, [r0, #9]
    b90a:	b141      	cbz	r1, b91e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b90c:	2902      	cmp	r1, #2
    b90e:	d00b      	beq.n	b928 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b910:	2802      	cmp	r0, #2
    b912:	d009      	beq.n	b928 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b914:	2901      	cmp	r1, #1
    b916:	d00b      	beq.n	b930 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b918:	2801      	cmp	r0, #1
    b91a:	d009      	beq.n	b930 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b91c:	e016      	b.n	b94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b91e:	2800      	cmp	r0, #0
    b920:	d1f6      	bne.n	b910 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b922:	f240 117d 	movw	r1, #381	; 0x17d
    b926:	e00e      	b.n	b946 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b92c:	f000 bc2a 	b.w	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b930:	4809      	ldr	r0, [pc, #36]	; (b958 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b932:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b936:	f000 000f 	and.w	r0, r0, #15
    b93a:	2803      	cmp	r0, #3
    b93c:	d006      	beq.n	b94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b93e:	2804      	cmp	r0, #4
    b940:	d006      	beq.n	b950 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b942:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b946:	203e      	movs	r0, #62	; 0x3e
    b948:	f7f8 faac 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b94c:	2001      	movs	r0, #1
    b94e:	bd10      	pop	{r4, pc}
    b950:	2002      	movs	r0, #2
    b952:	bd10      	pop	{r4, pc}
    b954:	20001144 	.word	0x20001144
    b958:	40001000 	.word	0x40001000

0000b95c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b95c:	b510      	push	{r4, lr}
    b95e:	f000 fc7d 	bl	c25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b962:	f7ff fe4f 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b966:	f004 faac 	bl	fec2 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b96a:	480f      	ldr	r0, [pc, #60]	; (b9a8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b96c:	4a0f      	ldr	r2, [pc, #60]	; (b9ac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b96e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b970:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b974:	6011      	str	r1, [r2, #0]
    b976:	2400      	movs	r4, #0
    b978:	6284      	str	r4, [r0, #40]	; 0x28
    b97a:	7304      	strb	r4, [r0, #12]
    b97c:	61c4      	str	r4, [r0, #28]
    b97e:	6184      	str	r4, [r0, #24]
    b980:	f000 fc6c 	bl	c25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b984:	480a      	ldr	r0, [pc, #40]	; (b9b0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b986:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b98a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b98e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b992:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b996:	2001      	movs	r0, #1
    b998:	f004 facc 	bl	ff34 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9a0:	2001      	movs	r0, #1
    b9a2:	f004 baba 	b.w	ff1a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b9a6:	0000      	.short	0x0000
    b9a8:	20001144 	.word	0x20001144
    b9ac:	4001f508 	.word	0x4001f508
    b9b0:	40008000 	.word	0x40008000

0000b9b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b9b4:	b570      	push	{r4, r5, r6, lr}
    b9b6:	2001      	movs	r0, #1
    b9b8:	f004 fabc 	bl	ff34 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b9bc:	4c37      	ldr	r4, [pc, #220]	; (ba9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b9be:	2000      	movs	r0, #0
    b9c0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b9c4:	2001      	movs	r0, #1
    b9c6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b9ca:	f001 f844 	bl	ca56 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b9ce:	4d34      	ldr	r5, [pc, #208]	; (baa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b9d0:	b118      	cbz	r0, b9da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b9d2:	6828      	ldr	r0, [r5, #0]
    b9d4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b9d8:	6028      	str	r0, [r5, #0]
    b9da:	f001 f830 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b9de:	b128      	cbz	r0, b9ec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b9e0:	6828      	ldr	r0, [r5, #0]
    b9e2:	4930      	ldr	r1, [pc, #192]	; (baa4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b9e4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b9e8:	4308      	orrs	r0, r1
    b9ea:	6028      	str	r0, [r5, #0]
    b9ec:	f001 f843 	bl	ca76 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b9f0:	b138      	cbz	r0, ba02 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b9f2:	482b      	ldr	r0, [pc, #172]	; (baa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b9f4:	1d00      	adds	r0, r0, #4
    b9f6:	6801      	ldr	r1, [r0, #0]
    b9f8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b9fc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ba00:	6001      	str	r1, [r0, #0]
    ba02:	4927      	ldr	r1, [pc, #156]	; (baa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba04:	4828      	ldr	r0, [pc, #160]	; (baa8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ba06:	313c      	adds	r1, #60	; 0x3c
    ba08:	6008      	str	r0, [r1, #0]
    ba0a:	f7f8 f8ff 	bl	3c0c <mpsl_fem_device_config_254_apply_get>
    ba0e:	b140      	cbz	r0, ba22 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba10:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba14:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ba18:	1c41      	adds	r1, r0, #1
    ba1a:	d002      	beq.n	ba22 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba1c:	4920      	ldr	r1, [pc, #128]	; (baa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba1e:	3110      	adds	r1, #16
    ba20:	6008      	str	r0, [r1, #0]
    ba22:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ba26:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ba28:	1c41      	adds	r1, r0, #1
    ba2a:	d004      	beq.n	ba36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ba2c:	491f      	ldr	r1, [pc, #124]	; (baac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ba2e:	680a      	ldr	r2, [r1, #0]
    ba30:	f360 4217 	bfi	r2, r0, #16, #8
    ba34:	600a      	str	r2, [r1, #0]
    ba36:	f240 1103 	movw	r1, #259	; 0x103
    ba3a:	f240 605b 	movw	r0, #1627	; 0x65b
    ba3e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ba42:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ba46:	2001      	movs	r0, #1
    ba48:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ba4c:	f000 fc88 	bl	c360 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ba50:	f240 1001 	movw	r0, #257	; 0x101
    ba54:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ba58:	2002      	movs	r0, #2
    ba5a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ba5e:	4915      	ldr	r1, [pc, #84]	; (bab4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ba60:	4813      	ldr	r0, [pc, #76]	; (bab0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ba62:	6008      	str	r0, [r1, #0]
    ba64:	4914      	ldr	r1, [pc, #80]	; (bab8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ba66:	2000      	movs	r0, #0
    ba68:	4d14      	ldr	r5, [pc, #80]	; (babc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ba6a:	8608      	strh	r0, [r1, #48]	; 0x30
    ba6c:	3110      	adds	r1, #16
    ba6e:	61c8      	str	r0, [r1, #28]
    ba70:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    ba74:	7028      	strb	r0, [r5, #0]
    ba76:	2001      	movs	r0, #1
    ba78:	f004 fa4f 	bl	ff1a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ba7c:	2010      	movs	r0, #16
    ba7e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ba82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ba86:	2002      	movs	r0, #2
    ba88:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ba8c:	6868      	ldr	r0, [r5, #4]
    ba8e:	2800      	cmp	r0, #0
    ba90:	d002      	beq.n	ba98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ba92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ba96:	4700      	bx	r0
    ba98:	bd70      	pop	{r4, r5, r6, pc}
    ba9a:	0000      	.short	0x0000
    ba9c:	40001000 	.word	0x40001000
    baa0:	4000173c 	.word	0x4000173c
    baa4:	80000096 	.word	0x80000096
    baa8:	8900002c 	.word	0x8900002c
    baac:	4000158c 	.word	0x4000158c
    bab0:	0c0e0000 	.word	0x0c0e0000
    bab4:	4001f508 	.word	0x4001f508
    bab8:	20001134 	.word	0x20001134
    babc:	20000268 	.word	0x20000268

0000bac0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bac0:	4901      	ldr	r1, [pc, #4]	; (bac8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bac2:	7508      	strb	r0, [r1, #20]
    bac4:	4770      	bx	lr
    bac6:	0000      	.short	0x0000
    bac8:	20001144 	.word	0x20001144

0000bacc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bacc:	4905      	ldr	r1, [pc, #20]	; (bae4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bace:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bad2:	4805      	ldr	r0, [pc, #20]	; (bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bad4:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bad8:	f041 0101 	orr.w	r1, r1, #1
    badc:	7001      	strb	r1, [r0, #0]
    bade:	f000 ba7b 	b.w	bfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bae2:	0000      	.short	0x0000
    bae4:	40001000 	.word	0x40001000
    bae8:	20001144 	.word	0x20001144

0000baec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    baec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    baf0:	4e36      	ldr	r6, [pc, #216]	; (bbcc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    baf2:	4607      	mov	r7, r0
    baf4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    baf8:	4689      	mov	r9, r1
    bafa:	4614      	mov	r4, r2
    bafc:	6030      	str	r0, [r6, #0]
    bafe:	4610      	mov	r0, r2
    bb00:	f000 fc2e 	bl	c360 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bb04:	f000 f9e6 	bl	bed4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bb08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; bbd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    bb0c:	4d31      	ldr	r5, [pc, #196]	; (bbd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    bb0e:	f04f 0801 	mov.w	r8, #1
    bb12:	b127      	cbz	r7, bb1e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bb14:	2f01      	cmp	r7, #1
    bb16:	d01d      	beq.n	bb54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    bb18:	f240 710f 	movw	r1, #1807	; 0x70f
    bb1c:	e04c      	b.n	bbb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    bb1e:	4620      	mov	r0, r4
    bb20:	f000 fa08 	bl	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bb24:	4620      	mov	r0, r4
    bb26:	f000 f9b9 	bl	be9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bb2a:	2c02      	cmp	r4, #2
    bb2c:	d00f      	beq.n	bb4e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    bb2e:	f640 0034 	movw	r0, #2100	; 0x834
    bb32:	bf00      	nop
    bb34:	f649 51f8 	movw	r1, #40440	; 0x9df8
    bb38:	4401      	add	r1, r0
    bb3a:	4648      	mov	r0, r9
    bb3c:	f000 fbb4 	bl	c2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bb40:	4604      	mov	r4, r0
    bb42:	4650      	mov	r0, sl
    bb44:	f000 fb9c 	bl	c280 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bb48:	f885 8009 	strb.w	r8, [r5, #9]
    bb4c:	e014      	b.n	bb78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    bb4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bb52:	e7ef      	b.n	bb34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    bb54:	f000 fa16 	bl	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bb58:	f000 fb64 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bb5c:	f000 fa8a 	bl	c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    bb60:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bb64:	4648      	mov	r0, r9
    bb66:	f000 fb9f 	bl	c2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bb6a:	4604      	mov	r4, r0
    bb6c:	4818      	ldr	r0, [pc, #96]	; (bbd0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    bb6e:	1d00      	adds	r0, r0, #4
    bb70:	f000 fb86 	bl	c280 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bb74:	2002      	movs	r0, #2
    bb76:	7268      	strb	r0, [r5, #9]
    bb78:	f8df 905c 	ldr.w	r9, [pc, #92]	; bbd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    bb7c:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    bb80:	4917      	ldr	r1, [pc, #92]	; (bbe0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    bb82:	4816      	ldr	r0, [pc, #88]	; (bbdc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    bb84:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    bb88:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bb8a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bb8e:	62a8      	str	r0, [r5, #40]	; 0x28
    bb90:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bb94:	6030      	str	r0, [r6, #0]
    bb96:	2010      	movs	r0, #16
    bb98:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    bb9c:	03c0      	lsls	r0, r0, #15
    bb9e:	6030      	str	r0, [r6, #0]
    bba0:	f000 fa54 	bl	c04c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bba4:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    bba8:	480b      	ldr	r0, [pc, #44]	; (bbd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    bbaa:	300c      	adds	r0, #12
    bbac:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbb0:	42a0      	cmp	r0, r4
    bbb2:	d304      	bcc.n	bbbe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    bbb4:	f240 7136 	movw	r1, #1846	; 0x736
    bbb8:	203e      	movs	r0, #62	; 0x3e
    bbba:	f7f8 f973 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbbe:	4621      	mov	r1, r4
    bbc0:	4638      	mov	r0, r7
    bbc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbc6:	f004 b9e6 	b.w	ff96 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    bbca:	0000      	.short	0x0000
    bbcc:	4001f504 	.word	0x4001f504
    bbd0:	40001000 	.word	0x40001000
    bbd4:	20001144 	.word	0x20001144
    bbd8:	40008000 	.word	0x40008000
    bbdc:	40008140 	.word	0x40008140
    bbe0:	4001f098 	.word	0x4001f098

0000bbe4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bbe4:	4b0d      	ldr	r3, [pc, #52]	; (bc1c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bbe6:	b510      	push	{r4, lr}
    bbe8:	71d8      	strb	r0, [r3, #7]
    bbea:	729a      	strb	r2, [r3, #10]
    bbec:	b151      	cbz	r1, bc04 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bbee:	2002      	movs	r0, #2
    bbf0:	7218      	strb	r0, [r3, #8]
    bbf2:	2801      	cmp	r0, #1
    bbf4:	d008      	beq.n	bc08 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bbf6:	2802      	cmp	r0, #2
    bbf8:	d00f      	beq.n	bc1a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bbfa:	f640 1112 	movw	r1, #2322	; 0x912
    bbfe:	203e      	movs	r0, #62	; 0x3e
    bc00:	f7f8 f950 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc04:	2001      	movs	r0, #1
    bc06:	e7f3      	b.n	bbf0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bc08:	7a58      	ldrb	r0, [r3, #9]
    bc0a:	2802      	cmp	r0, #2
    bc0c:	d105      	bne.n	bc1a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc0e:	f000 f9b9 	bl	bf84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc16:	f000 bb05 	b.w	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bc1a:	bd10      	pop	{r4, pc}
    bc1c:	20001144 	.word	0x20001144

0000bc20 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bc20:	4902      	ldr	r1, [pc, #8]	; (bc2c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bc22:	2000      	movs	r0, #0
    bc24:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bc28:	4770      	bx	lr
    bc2a:	0000      	.short	0x0000
    bc2c:	40008000 	.word	0x40008000

0000bc30 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bc30:	b538      	push	{r3, r4, r5, lr}
    bc32:	4c0b      	ldr	r4, [pc, #44]	; (bc60 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bc34:	4605      	mov	r5, r0
    bc36:	f44f 718e 	mov.w	r1, #284	; 0x11c
    bc3a:	4620      	mov	r0, r4
    bc3c:	f004 f9c3 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bc40:	2800      	cmp	r0, #0
    bc42:	d00c      	beq.n	bc5e <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bc44:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bc48:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bc4c:	4240      	negs	r0, r0
    bc4e:	7028      	strb	r0, [r5, #0]
    bc50:	2000      	movs	r0, #0
    bc52:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bc56:	4803      	ldr	r0, [pc, #12]	; (bc64 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bc58:	6800      	ldr	r0, [r0, #0]
    bc5a:	9000      	str	r0, [sp, #0]
    bc5c:	2001      	movs	r0, #1
    bc5e:	bd38      	pop	{r3, r4, r5, pc}
    bc60:	40001000 	.word	0x40001000
    bc64:	4000111c 	.word	0x4000111c

0000bc68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bc68:	4903      	ldr	r1, [pc, #12]	; (bc78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bc6a:	0e02      	lsrs	r2, r0, #24
    bc6c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bc70:	0200      	lsls	r0, r0, #8
    bc72:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bc76:	4770      	bx	lr
    bc78:	40001000 	.word	0x40001000

0000bc7c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bc7c:	6800      	ldr	r0, [r0, #0]
    bc7e:	4903      	ldr	r1, [pc, #12]	; (bc8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bc80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bc84:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bc88:	4770      	bx	lr
    bc8a:	0000      	.short	0x0000
    bc8c:	40001000 	.word	0x40001000

0000bc90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bc90:	b510      	push	{r4, lr}
    bc92:	f000 fb41 	bl	c318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bc96:	4807      	ldr	r0, [pc, #28]	; (bcb4 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bc98:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bc9c:	b2c0      	uxtb	r0, r0
    bc9e:	2803      	cmp	r0, #3
    bca0:	d001      	beq.n	bca6 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bca2:	280b      	cmp	r0, #11
    bca4:	d104      	bne.n	bcb0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bca6:	f44f 7121 	mov.w	r1, #644	; 0x284
    bcaa:	203e      	movs	r0, #62	; 0x3e
    bcac:	f7f8 f8fa 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcb0:	bd10      	pop	{r4, pc}
    bcb2:	0000      	.short	0x0000
    bcb4:	40001000 	.word	0x40001000

0000bcb8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bcb8:	4901      	ldr	r1, [pc, #4]	; (bcc0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bcba:	7548      	strb	r0, [r1, #21]
    bcbc:	4770      	bx	lr
    bcbe:	0000      	.short	0x0000
    bcc0:	20001144 	.word	0x20001144

0000bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bcc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcc8:	4853      	ldr	r0, [pc, #332]	; (be18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bcca:	f04f 0a01 	mov.w	sl, #1
    bcce:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bcd2:	4851      	ldr	r0, [pc, #324]	; (be18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bcd4:	300c      	adds	r0, #12
    bcd6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bcda:	4850      	ldr	r0, [pc, #320]	; (be1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bcdc:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bce0:	4c4f      	ldr	r4, [pc, #316]	; (be20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bce2:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bce6:	f000 f957 	bl	bf98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bcea:	494e      	ldr	r1, [pc, #312]	; (be24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bcec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bcee:	6008      	str	r0, [r1, #0]
    bcf0:	f8df 9134 	ldr.w	r9, [pc, #308]	; be28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bcf4:	2600      	movs	r6, #0
    bcf6:	62a6      	str	r6, [r4, #40]	; 0x28
    bcf8:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bcfc:	f240 121d 	movw	r2, #285	; 0x11d
    bd00:	4391      	bics	r1, r2
    bd02:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bd06:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bd0a:	f000 f9c5 	bl	c098 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bd0e:	4605      	mov	r5, r0
    bd10:	4841      	ldr	r0, [pc, #260]	; (be18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd12:	3008      	adds	r0, #8
    bd14:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd18:	61e0      	str	r0, [r4, #28]
    bd1a:	f7ff fdf1 	bl	b900 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bd1e:	f884 0020 	strb.w	r0, [r4, #32]
    bd22:	7a60      	ldrb	r0, [r4, #9]
    bd24:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bd28:	61a6      	str	r6, [r4, #24]
    bd2a:	4e40      	ldr	r6, [pc, #256]	; (be2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bd2c:	07a8      	lsls	r0, r5, #30
    bd2e:	d502      	bpl.n	bd36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bd30:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd34:	61a0      	str	r0, [r4, #24]
    bd36:	0728      	lsls	r0, r5, #28
    bd38:	d502      	bpl.n	bd40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bd3a:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd3e:	61a0      	str	r0, [r4, #24]
    bd40:	f04f 0800 	mov.w	r8, #0
    bd44:	4639      	mov	r1, r7
    bd46:	4628      	mov	r0, r5
    bd48:	f000 fa32 	bl	c1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bd4c:	b918      	cbnz	r0, bd56 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bd4e:	f8c9 a010 	str.w	sl, [r9, #16]
    bd52:	f04f 0801 	mov.w	r8, #1
    bd56:	4f32      	ldr	r7, [pc, #200]	; (be20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bd58:	07e8      	lsls	r0, r5, #31
    bd5a:	f1a7 0710 	sub.w	r7, r7, #16
    bd5e:	d002      	beq.n	bd66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bd60:	6838      	ldr	r0, [r7, #0]
    bd62:	4780      	blx	r0
    bd64:	e031      	b.n	bdca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bd66:	07a8      	lsls	r0, r5, #30
    bd68:	d526      	bpl.n	bdb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bd6a:	0768      	lsls	r0, r5, #29
    bd6c:	d41e      	bmi.n	bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd6e:	f000 fe82 	bl	ca76 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd72:	b9d8      	cbnz	r0, bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd74:	f000 fe6f 	bl	ca56 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bd78:	b9c0      	cbnz	r0, bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd7a:	482d      	ldr	r0, [pc, #180]	; (be30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bd7c:	6800      	ldr	r0, [r0, #0]
    bd7e:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bd82:	f3c0 6100 	ubfx	r1, r0, #24, #1
    bd86:	f000 030f 	and.w	r3, r0, #15
    bd8a:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bd8e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bd92:	b159      	cbz	r1, bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd94:	b10b      	cbz	r3, bd9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bd96:	b102      	cbz	r2, bd9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bd98:	b940      	cbnz	r0, bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd9a:	4825      	ldr	r0, [pc, #148]	; (be30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bd9c:	1d00      	adds	r0, r0, #4
    bd9e:	6800      	ldr	r0, [r0, #0]
    bda0:	b120      	cbz	r0, bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bda2:	f1bc 0f03 	cmp.w	ip, #3
    bda6:	d201      	bcs.n	bdac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bda8:	f045 0504 	orr.w	r5, r5, #4
    bdac:	f345 0080 	sbfx	r0, r5, #2, #1
    bdb0:	4641      	mov	r1, r8
    bdb2:	1c40      	adds	r0, r0, #1
    bdb4:	687a      	ldr	r2, [r7, #4]
    bdb6:	e007      	b.n	bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    bdb8:	f015 0f28 	tst.w	r5, #40	; 0x28
    bdbc:	d005      	beq.n	bdca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bdbe:	f345 1140 	sbfx	r1, r5, #5, #1
    bdc2:	68ba      	ldr	r2, [r7, #8]
    bdc4:	4640      	mov	r0, r8
    bdc6:	1c49      	adds	r1, r1, #1
    bdc8:	4790      	blx	r2
    bdca:	06e8      	lsls	r0, r5, #27
    bdcc:	d501      	bpl.n	bdd2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    bdce:	68f8      	ldr	r0, [r7, #12]
    bdd0:	4780      	blx	r0
    bdd2:	7a60      	ldrb	r0, [r4, #9]
    bdd4:	2802      	cmp	r0, #2
    bdd6:	d11c      	bne.n	be12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bdd8:	7b20      	ldrb	r0, [r4, #12]
    bdda:	2800      	cmp	r0, #0
    bddc:	d019      	beq.n	be12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bdde:	2802      	cmp	r0, #2
    bde0:	d004      	beq.n	bdec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    bde2:	2801      	cmp	r0, #1
    bde4:	d006      	beq.n	bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    bde6:	f640 21e1 	movw	r1, #2785	; 0xae1
    bdea:	e009      	b.n	be00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bdec:	6921      	ldr	r1, [r4, #16]
    bdee:	69e0      	ldr	r0, [r4, #28]
    bdf0:	4408      	add	r0, r1
    bdf2:	e008      	b.n	be06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bdf4:	69e1      	ldr	r1, [r4, #28]
    bdf6:	6920      	ldr	r0, [r4, #16]
    bdf8:	4288      	cmp	r0, r1
    bdfa:	d804      	bhi.n	be06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    bdfc:	f640 21e2 	movw	r1, #2786	; 0xae2
    be00:	203e      	movs	r0, #62	; 0x3e
    be02:	f7f8 f84f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be06:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    be0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be0e:	f000 ba17 	b.w	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be16:	0000      	.short	0x0000
    be18:	40008000 	.word	0x40008000
    be1c:	4000b000 	.word	0x4000b000
    be20:	20001144 	.word	0x20001144
    be24:	4001f508 	.word	0x4001f508
    be28:	40001000 	.word	0x40001000
    be2c:	40008004 	.word	0x40008004
    be30:	40001450 	.word	0x40001450

0000be34 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    be34:	b570      	push	{r4, r5, r6, lr}
    be36:	4b15      	ldr	r3, [pc, #84]	; (be8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    be38:	888c      	ldrh	r4, [r1, #4]
    be3a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    be3e:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    be42:	780c      	ldrb	r4, [r1, #0]
    be44:	f8d1 1001 	ldr.w	r1, [r1, #1]
    be48:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    be4c:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    be50:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    be54:	2101      	movs	r1, #1
    be56:	4081      	lsls	r1, r0
    be58:	430c      	orrs	r4, r1
    be5a:	b2e4      	uxtb	r4, r4
    be5c:	b132      	cbz	r2, be6c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    be5e:	2a01      	cmp	r2, #1
    be60:	d00a      	beq.n	be78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    be62:	f240 41ac 	movw	r1, #1196	; 0x4ac
    be66:	203e      	movs	r0, #62	; 0x3e
    be68:	f7f8 f81c 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be6c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    be70:	f3c0 2007 	ubfx	r0, r0, #8, #8
    be74:	4388      	bics	r0, r1
    be76:	e004      	b.n	be82 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    be78:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    be7c:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    be80:	b2c0      	uxtb	r0, r0
    be82:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    be86:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    be8a:	bd70      	pop	{r4, r5, r6, pc}
    be8c:	40001000 	.word	0x40001000

0000be90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    be90:	4901      	ldr	r1, [pc, #4]	; (be98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    be92:	2001      	movs	r0, #1
    be94:	7008      	strb	r0, [r1, #0]
    be96:	4770      	bx	lr
    be98:	20000268 	.word	0x20000268
    be9c:	b510      	push	{r4, lr}
    be9e:	4604      	mov	r4, r0
    bea0:	f000 fde9 	bl	ca76 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bea4:	2800      	cmp	r0, #0
    bea6:	d00e      	beq.n	bec6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bea8:	4a09      	ldr	r2, [pc, #36]	; (bed0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    beaa:	6811      	ldr	r1, [r2, #0]
    beac:	0650      	lsls	r0, r2, #25
    beae:	2c02      	cmp	r4, #2
    beb0:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    beb4:	d008      	beq.n	bec8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    beb6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    beba:	bf00      	nop
    bebc:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bec0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bec4:	6010      	str	r0, [r2, #0]
    bec6:	bd10      	pop	{r4, pc}
    bec8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    becc:	e7f6      	b.n	bebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bece:	0000      	.short	0x0000
    bed0:	40001588 	.word	0x40001588
    bed4:	4815      	ldr	r0, [pc, #84]	; (bf2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bed6:	7d41      	ldrb	r1, [r0, #21]
    bed8:	2925      	cmp	r1, #37	; 0x25
    beda:	d00a      	beq.n	bef2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bedc:	2926      	cmp	r1, #38	; 0x26
    bede:	d00b      	beq.n	bef8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bee0:	2927      	cmp	r1, #39	; 0x27
    bee2:	d00c      	beq.n	befe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bee4:	7d40      	ldrb	r0, [r0, #21]
    bee6:	0040      	lsls	r0, r0, #1
    bee8:	290a      	cmp	r1, #10
    beea:	d80b      	bhi.n	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    beec:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bef0:	e00a      	b.n	bf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bef2:	f640 1062 	movw	r0, #2402	; 0x962
    bef6:	e00f      	b.n	bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bef8:	f640 107a 	movw	r0, #2426	; 0x97a
    befc:	e00c      	b.n	bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    befe:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bf02:	e009      	b.n	bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf04:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bf08:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bf0c:	d204      	bcs.n	bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf0e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bf12:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bf16:	e001      	b.n	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bf18:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bf1c:	4a04      	ldr	r2, [pc, #16]	; (bf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bf1e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bf22:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bf26:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bf2a:	4770      	bx	lr
    bf2c:	20001144 	.word	0x20001144
    bf30:	40001000 	.word	0x40001000
    bf34:	4912      	ldr	r1, [pc, #72]	; (bf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bf36:	b508      	push	{r3, lr}
    bf38:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bf3c:	7d49      	ldrb	r1, [r1, #21]
    bf3e:	2801      	cmp	r0, #1
    bf40:	d00a      	beq.n	bf58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    bf42:	2802      	cmp	r0, #2
    bf44:	d00a      	beq.n	bf5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bf46:	2804      	cmp	r0, #4
    bf48:	d00a      	beq.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    bf4a:	2808      	cmp	r0, #8
    bf4c:	d00a      	beq.n	bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    bf4e:	f240 31ed 	movw	r1, #1005	; 0x3ed
    bf52:	2006      	movs	r0, #6
    bf54:	f7f7 ffa6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf58:	2000      	movs	r0, #0
    bf5a:	e004      	b.n	bf66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf5c:	2001      	movs	r0, #1
    bf5e:	e002      	b.n	bf66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf60:	2003      	movs	r0, #3
    bf62:	e000      	b.n	bf66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf64:	2002      	movs	r0, #2
    bf66:	466b      	mov	r3, sp
    bf68:	f7f4 fa34 	bl	3d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bf6c:	b118      	cbz	r0, bf76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    bf6e:	f240 41de 	movw	r1, #1246	; 0x4de
    bf72:	203e      	movs	r0, #62	; 0x3e
    bf74:	e7ee      	b.n	bf54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    bf76:	f99d 0000 	ldrsb.w	r0, [sp]
    bf7a:	f000 f9eb 	bl	c354 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bf7e:	bd08      	pop	{r3, pc}
    bf80:	20001144 	.word	0x20001144
    bf84:	4803      	ldr	r0, [pc, #12]	; (bf94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    bf86:	7a01      	ldrb	r1, [r0, #8]
    bf88:	2901      	cmp	r1, #1
    bf8a:	d102      	bne.n	bf92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    bf8c:	7a80      	ldrb	r0, [r0, #10]
    bf8e:	f7ff bfd1 	b.w	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bf92:	4770      	bx	lr
    bf94:	20001144 	.word	0x20001144
    bf98:	4805      	ldr	r0, [pc, #20]	; (bfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    bf9a:	7a40      	ldrb	r0, [r0, #9]
    bf9c:	2801      	cmp	r0, #1
    bf9e:	d003      	beq.n	bfa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    bfa0:	2802      	cmp	r0, #2
    bfa2:	d103      	bne.n	bfac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    bfa4:	f003 bf75 	b.w	fe92 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bfa8:	f003 bf7f 	b.w	feaa <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bfac:	4770      	bx	lr
    bfae:	0000      	.short	0x0000
    bfb0:	20001144 	.word	0x20001144
    bfb4:	4807      	ldr	r0, [pc, #28]	; (bfd4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    bfb6:	2100      	movs	r1, #0
    bfb8:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bfbc:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bfc0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bfc4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bfc8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bfcc:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bfd0:	4770      	bx	lr
    bfd2:	0000      	.short	0x0000
    bfd4:	40001000 	.word	0x40001000
    bfd8:	4818      	ldr	r0, [pc, #96]	; (c03c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    bfda:	b510      	push	{r4, lr}
    bfdc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bfe0:	07c1      	lsls	r1, r0, #31
    bfe2:	d029      	beq.n	c038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    bfe4:	0781      	lsls	r1, r0, #30
    bfe6:	d514      	bpl.n	c012 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    bfe8:	4815      	ldr	r0, [pc, #84]	; (c040 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    bfea:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bfee:	f041 0101 	orr.w	r1, r1, #1
    bff2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bff6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bffa:	b2c0      	uxtb	r0, r0
    bffc:	280b      	cmp	r0, #11
    bffe:	d005      	beq.n	c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c000:	280a      	cmp	r0, #10
    c002:	d003      	beq.n	c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c004:	2803      	cmp	r0, #3
    c006:	d001      	beq.n	c00c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c008:	2802      	cmp	r0, #2
    c00a:	d115      	bne.n	c038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c00c:	f240 510f 	movw	r1, #1295	; 0x50f
    c010:	e00f      	b.n	c032 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    c012:	0740      	lsls	r0, r0, #29
    c014:	d510      	bpl.n	c038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c016:	480a      	ldr	r0, [pc, #40]	; (c040 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c018:	490a      	ldr	r1, [pc, #40]	; (c044 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    c01a:	3008      	adds	r0, #8
    c01c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c020:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c024:	4808      	ldr	r0, [pc, #32]	; (c048 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    c026:	f003 ffd3 	bl	ffd0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c02a:	2800      	cmp	r0, #0
    c02c:	d004      	beq.n	c038 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c02e:	f240 5117 	movw	r1, #1303	; 0x517
    c032:	203e      	movs	r0, #62	; 0x3e
    c034:	f7f7 ff36 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c038:	bd10      	pop	{r4, pc}
    c03a:	0000      	.short	0x0000
    c03c:	20001144 	.word	0x20001144
    c040:	40001000 	.word	0x40001000
    c044:	4001f098 	.word	0x4001f098
    c048:	40008000 	.word	0x40008000
    c04c:	4808      	ldr	r0, [pc, #32]	; (c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    c04e:	4601      	mov	r1, r0
    c050:	79c2      	ldrb	r2, [r0, #7]
    c052:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c056:	b112      	cbz	r2, c05e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    c058:	2a01      	cmp	r2, #1
    c05a:	d003      	beq.n	c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    c05c:	e006      	b.n	c06c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    c05e:	f041 0102 	orr.w	r1, r1, #2
    c062:	e001      	b.n	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    c064:	f041 0104 	orr.w	r1, r1, #4
    c068:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c06c:	f7ff bfb4 	b.w	bfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c070:	20001144 	.word	0x20001144
    c074:	b510      	push	{r4, lr}
    c076:	f000 fcfe 	bl	ca76 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c07a:	2800      	cmp	r0, #0
    c07c:	d108      	bne.n	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c07e:	f000 fcea 	bl	ca56 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c082:	2800      	cmp	r0, #0
    c084:	d104      	bne.n	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c086:	4803      	ldr	r0, [pc, #12]	; (c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    c088:	6801      	ldr	r1, [r0, #0]
    c08a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c08e:	6001      	str	r1, [r0, #0]
    c090:	bd10      	pop	{r4, pc}
    c092:	0000      	.short	0x0000
    c094:	40001568 	.word	0x40001568
    c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c09c:	4d35      	ldr	r5, [pc, #212]	; (c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    c09e:	2400      	movs	r4, #0
    c0a0:	7b28      	ldrb	r0, [r5, #12]
    c0a2:	b138      	cbz	r0, c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0a4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c0a8:	4833      	ldr	r0, [pc, #204]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    c0aa:	f003 ff91 	bl	ffd0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c0ae:	b108      	cbz	r0, c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0b0:	2601      	movs	r6, #1
    c0b2:	e000      	b.n	c0b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c0b4:	2600      	movs	r6, #0
    c0b6:	7a68      	ldrb	r0, [r5, #9]
    c0b8:	4f30      	ldr	r7, [pc, #192]	; (c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    c0ba:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c0be:	2801      	cmp	r0, #1
    c0c0:	d002      	beq.n	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    c0c2:	2802      	cmp	r0, #2
    c0c4:	d008      	beq.n	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c0c6:	e018      	b.n	c0fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0c8:	4638      	mov	r0, r7
    c0ca:	f003 ff7c 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c0ce:	b108      	cbz	r0, c0d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c0d0:	2408      	movs	r4, #8
    c0d2:	e012      	b.n	c0fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0d4:	2400      	movs	r4, #0
    c0d6:	e010      	b.n	c0fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0d8:	4638      	mov	r0, r7
    c0da:	f003 ff74 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c0de:	b100      	cbz	r0, c0e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    c0e0:	2002      	movs	r0, #2
    c0e2:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c0e6:	43c9      	mvns	r1, r1
    c0e8:	f341 0100 	sbfx	r1, r1, #0, #1
    c0ec:	1c49      	adds	r1, r1, #1
    c0ee:	d001      	beq.n	c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    c0f0:	2400      	movs	r4, #0
    c0f2:	e000      	b.n	c0f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    c0f4:	2404      	movs	r4, #4
    c0f6:	4304      	orrs	r4, r0
    c0f8:	4334      	orrs	r4, r6
    c0fa:	f014 0f0b 	tst.w	r4, #11
    c0fe:	d107      	bne.n	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    c100:	f44f 7188 	mov.w	r1, #272	; 0x110
    c104:	4638      	mov	r0, r7
    c106:	f003 ff5e 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c10a:	b100      	cbz	r0, c10e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    c10c:	2010      	movs	r0, #16
    c10e:	4304      	orrs	r4, r0
    c110:	481b      	ldr	r0, [pc, #108]	; (c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c112:	7800      	ldrb	r0, [r0, #0]
    c114:	b1f8      	cbz	r0, c156 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c116:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c11a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c11e:	d007      	beq.n	c130 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c120:	f44f 718a 	mov.w	r1, #276	; 0x114
    c124:	4638      	mov	r0, r7
    c126:	f003 ff4e 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c12a:	b108      	cbz	r0, c130 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c12c:	2001      	movs	r0, #1
    c12e:	e000      	b.n	c132 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c130:	2000      	movs	r0, #0
    c132:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c136:	b13e      	cbz	r6, c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c138:	f44f 718c 	mov.w	r1, #280	; 0x118
    c13c:	4638      	mov	r0, r7
    c13e:	f003 ff42 	bl	ffc6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c142:	b108      	cbz	r0, c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c144:	2001      	movs	r0, #1
    c146:	e000      	b.n	c14a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c148:	2000      	movs	r0, #0
    c14a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c14e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c152:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c156:	f7ff ff2d 	bl	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c15a:	06e0      	lsls	r0, r4, #27
    c15c:	d506      	bpl.n	c16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c15e:	0720      	lsls	r0, r4, #28
    c160:	d404      	bmi.n	c16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c162:	7a68      	ldrb	r0, [r5, #9]
    c164:	2801      	cmp	r0, #1
    c166:	d101      	bne.n	c16c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c168:	f044 0420 	orr.w	r4, r4, #32
    c16c:	4620      	mov	r0, r4
    c16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c172:	0000      	.short	0x0000
    c174:	20001144 	.word	0x20001144
    c178:	40008000 	.word	0x40008000
    c17c:	40001000 	.word	0x40001000
    c180:	20000268 	.word	0x20000268
    c184:	4809      	ldr	r0, [pc, #36]	; (c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c186:	b510      	push	{r4, lr}
    c188:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c18c:	f000 000f 	and.w	r0, r0, #15
    c190:	2803      	cmp	r0, #3
    c192:	d006      	beq.n	c1a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c194:	2804      	cmp	r0, #4
    c196:	d006      	beq.n	c1a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c198:	f240 11dd 	movw	r1, #477	; 0x1dd
    c19c:	203e      	movs	r0, #62	; 0x3e
    c19e:	f7f7 fe81 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1a2:	2001      	movs	r0, #1
    c1a4:	bd10      	pop	{r4, pc}
    c1a6:	2002      	movs	r0, #2
    c1a8:	bd10      	pop	{r4, pc}
    c1aa:	0000      	.short	0x0000
    c1ac:	40001000 	.word	0x40001000
    c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1b4:	4c19      	ldr	r4, [pc, #100]	; (c21c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c1b6:	460d      	mov	r5, r1
    c1b8:	7a21      	ldrb	r1, [r4, #8]
    c1ba:	b129      	cbz	r1, c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c1bc:	f010 0f11 	tst.w	r0, #17
    c1c0:	d00b      	beq.n	c1da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c1c2:	f7ff fa1f 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c1c6:	e027      	b.n	c218 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c1c8:	4915      	ldr	r1, [pc, #84]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c1ca:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c1ce:	6008      	str	r0, [r1, #0]
    c1d0:	f000 f862 	bl	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c1d4:	2000      	movs	r0, #0
    c1d6:	7320      	strb	r0, [r4, #12]
    c1d8:	e01e      	b.n	c218 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c1da:	2901      	cmp	r1, #1
    c1dc:	d001      	beq.n	c1e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c1de:	2601      	movs	r6, #1
    c1e0:	e000      	b.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c1e2:	2600      	movs	r6, #0
    c1e4:	79e0      	ldrb	r0, [r4, #7]
    c1e6:	2801      	cmp	r0, #1
    c1e8:	d00e      	beq.n	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c1ea:	2700      	movs	r7, #0
    c1ec:	f000 f854 	bl	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c1f0:	2196      	movs	r1, #150	; 0x96
    c1f2:	4630      	mov	r0, r6
    c1f4:	f000 f866 	bl	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c1f8:	4601      	mov	r1, r0
    c1fa:	b14f      	cbz	r7, c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c1fc:	353b      	adds	r5, #59	; 0x3b
    c1fe:	428d      	cmp	r5, r1
    c200:	d904      	bls.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c202:	2000      	movs	r0, #0
    c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c208:	2701      	movs	r7, #1
    c20a:	e7ef      	b.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c20c:	2001      	movs	r0, #1
    c20e:	71e0      	strb	r0, [r4, #7]
    c210:	7aa2      	ldrb	r2, [r4, #10]
    c212:	4630      	mov	r0, r6
    c214:	f7ff fc6a 	bl	baec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c218:	2001      	movs	r0, #1
    c21a:	e7f3      	b.n	c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c21c:	20001144 	.word	0x20001144
    c220:	4001f508 	.word	0x4001f508
    c224:	4805      	ldr	r0, [pc, #20]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c226:	2100      	movs	r1, #0
    c228:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c22c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c230:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c234:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c238:	4770      	bx	lr
    c23a:	0000      	.short	0x0000
    c23c:	40001000 	.word	0x40001000
    c240:	4804      	ldr	r0, [pc, #16]	; (c254 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c242:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c244:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c248:	6281      	str	r1, [r0, #40]	; 0x28
    c24a:	4903      	ldr	r1, [pc, #12]	; (c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c24c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c250:	6008      	str	r0, [r1, #0]
    c252:	4770      	bx	lr
    c254:	20001144 	.word	0x20001144
    c258:	4001f504 	.word	0x4001f504
    c25c:	4a07      	ldr	r2, [pc, #28]	; (c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c25e:	2000      	movs	r0, #0
    c260:	3208      	adds	r2, #8
    c262:	4906      	ldr	r1, [pc, #24]	; (c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c264:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c268:	1d0a      	adds	r2, r1, #4
    c26a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c26e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c272:	4902      	ldr	r1, [pc, #8]	; (c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c274:	310c      	adds	r1, #12
    c276:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c27a:	4770      	bx	lr
    c27c:	40008000 	.word	0x40008000
    c280:	4903      	ldr	r1, [pc, #12]	; (c290 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c282:	79c9      	ldrb	r1, [r1, #7]
    c284:	2900      	cmp	r1, #0
    c286:	d102      	bne.n	c28e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c288:	4902      	ldr	r1, [pc, #8]	; (c294 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c28a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c28e:	4770      	bx	lr
    c290:	20001144 	.word	0x20001144
    c294:	4001f098 	.word	0x4001f098
    c298:	4802      	ldr	r0, [pc, #8]	; (c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c29a:	2100      	movs	r1, #0
    c29c:	71c1      	strb	r1, [r0, #7]
    c29e:	7201      	strb	r1, [r0, #8]
    c2a0:	7241      	strb	r1, [r0, #9]
    c2a2:	4770      	bx	lr
    c2a4:	20001144 	.word	0x20001144
    c2a8:	4a05      	ldr	r2, [pc, #20]	; (c2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c2aa:	79d2      	ldrb	r2, [r2, #7]
    c2ac:	2a01      	cmp	r2, #1
    c2ae:	d006      	beq.n	c2be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c2b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2b4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c2b8:	fbb1 f1f2 	udiv	r1, r1, r2
    c2bc:	1a40      	subs	r0, r0, r1
    c2be:	4770      	bx	lr
    c2c0:	20001144 	.word	0x20001144
    c2c4:	b570      	push	{r4, r5, r6, lr}
    c2c6:	4c13      	ldr	r4, [pc, #76]	; (c314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c2c8:	4603      	mov	r3, r0
    c2ca:	460d      	mov	r5, r1
    c2cc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c2d0:	2000      	movs	r0, #0
    c2d2:	b15a      	cbz	r2, c2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c2d4:	4621      	mov	r1, r4
    c2d6:	f891 1020 	ldrb.w	r1, [r1, #32]
    c2da:	b163      	cbz	r3, c2f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c2dc:	2b01      	cmp	r3, #1
    c2de:	d111      	bne.n	c304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c2e0:	2a01      	cmp	r2, #1
    c2e2:	4628      	mov	r0, r5
    c2e4:	d012      	beq.n	c30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c2e6:	f003 feb8 	bl	1005a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c2ea:	e009      	b.n	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c2ec:	f240 7152 	movw	r1, #1874	; 0x752
    c2f0:	203e      	movs	r0, #62	; 0x3e
    c2f2:	f7f7 fdd7 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2f6:	2a01      	cmp	r2, #1
    c2f8:	4628      	mov	r0, r5
    c2fa:	d004      	beq.n	c306 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c2fc:	f003 febb 	bl	10076 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c300:	69e1      	ldr	r1, [r4, #28]
    c302:	4408      	add	r0, r1
    c304:	bd70      	pop	{r4, r5, r6, pc}
    c306:	f003 fed0 	bl	100aa <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c30a:	e7f9      	b.n	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c30c:	f003 febe 	bl	1008c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c310:	e7f6      	b.n	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c312:	0000      	.short	0x0000
    c314:	20001144 	.word	0x20001144
    c318:	b510      	push	{r4, lr}
    c31a:	2200      	movs	r2, #0
    c31c:	2901      	cmp	r1, #1
    c31e:	d008      	beq.n	c332 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c320:	2902      	cmp	r1, #2
    c322:	d004      	beq.n	c32e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c324:	f240 2163 	movw	r1, #611	; 0x263
    c328:	203e      	movs	r0, #62	; 0x3e
    c32a:	f7f7 fdbb 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c32e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c332:	4905      	ldr	r1, [pc, #20]	; (c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c334:	430a      	orrs	r2, r1
    c336:	4905      	ldr	r1, [pc, #20]	; (c34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c338:	600a      	str	r2, [r1, #0]
    c33a:	4905      	ldr	r1, [pc, #20]	; (c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c33c:	4308      	orrs	r0, r1
    c33e:	4903      	ldr	r1, [pc, #12]	; (c34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c340:	1d09      	adds	r1, r1, #4
    c342:	6008      	str	r0, [r1, #0]
    c344:	bd10      	pop	{r4, pc}
    c346:	0000      	.short	0x0000
    c348:	00100108 	.word	0x00100108
    c34c:	40001514 	.word	0x40001514
    c350:	02030000 	.word	0x02030000

0000c354 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c354:	4901      	ldr	r1, [pc, #4]	; (c35c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c356:	b2c0      	uxtb	r0, r0
    c358:	6008      	str	r0, [r1, #0]
    c35a:	4770      	bx	lr
    c35c:	4000150c 	.word	0x4000150c

0000c360 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c360:	b510      	push	{r4, lr}
    c362:	4907      	ldr	r1, [pc, #28]	; (c380 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c364:	2801      	cmp	r0, #1
    c366:	d005      	beq.n	c374 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c368:	2802      	cmp	r0, #2
    c36a:	d005      	beq.n	c378 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c36c:	218b      	movs	r1, #139	; 0x8b
    c36e:	203f      	movs	r0, #63	; 0x3f
    c370:	f7f7 fd98 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c374:	2003      	movs	r0, #3
    c376:	e000      	b.n	c37a <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c378:	2004      	movs	r0, #4
    c37a:	6008      	str	r0, [r1, #0]
    c37c:	bd10      	pop	{r4, pc}
    c37e:	0000      	.short	0x0000
    c380:	40001510 	.word	0x40001510

0000c384 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c384:	4770      	bx	lr
    c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c38a:	000d      	movs	r5, r1
    c38c:	4604      	mov	r4, r0
    c38e:	f04f 0602 	mov.w	r6, #2
    c392:	f04f 0701 	mov.w	r7, #1
    c396:	d008      	beq.n	c3aa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    c398:	7828      	ldrb	r0, [r5, #0]
    c39a:	b1d0      	cbz	r0, c3d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    c39c:	2801      	cmp	r0, #1
    c39e:	d007      	beq.n	c3b0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    c3a0:	2802      	cmp	r0, #2
    c3a2:	d014      	beq.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c3a4:	2803      	cmp	r0, #3
    c3a6:	d13b      	bne.n	c420 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    c3a8:	e016      	b.n	c3d8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    c3aa:	f880 7020 	strb.w	r7, [r0, #32]
    c3ae:	e00e      	b.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c3b0:	6868      	ldr	r0, [r5, #4]
    c3b2:	28c8      	cmp	r0, #200	; 0xc8
    c3b4:	d303      	bcc.n	c3be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    c3b6:	2104      	movs	r1, #4
    c3b8:	f7f5 f836 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    c3bc:	b108      	cbz	r0, c3c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    c3be:	2600      	movs	r6, #0
    c3c0:	e007      	b.n	c3d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    c3c2:	4620      	mov	r0, r4
    c3c4:	6869      	ldr	r1, [r5, #4]
    c3c6:	f000 f92a 	bl	c61e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    c3ca:	2601      	movs	r6, #1
    c3cc:	e001      	b.n	c3d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    c3ce:	f7f4 f849 	bl	464 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x64>
    c3d2:	4630      	mov	r0, r6
    c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3d8:	7820      	ldrb	r0, [r4, #0]
    c3da:	2800      	cmp	r0, #0
    c3dc:	d1f7      	bne.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c3de:	6868      	ldr	r0, [r5, #4]
    c3e0:	f7f4 f812 	bl	408 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8>
    c3e4:	b1e0      	cbz	r0, c420 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    c3e6:	6869      	ldr	r1, [r5, #4]
    c3e8:	7808      	ldrb	r0, [r1, #0]
    c3ea:	b128      	cbz	r0, c3f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    c3ec:	78a0      	ldrb	r0, [r4, #2]
    c3ee:	2805      	cmp	r0, #5
    c3f0:	d007      	beq.n	c402 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    c3f2:	f240 1179 	movw	r1, #377	; 0x179
    c3f6:	e010      	b.n	c41a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    c3f8:	4620      	mov	r0, r4
    c3fa:	f000 f918 	bl	c62e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    c3fe:	7067      	strb	r7, [r4, #1]
    c400:	e7e5      	b.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c402:	4620      	mov	r0, r4
    c404:	f000 f92b 	bl	c65e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    c408:	78e0      	ldrb	r0, [r4, #3]
    c40a:	f104 010c 	add.w	r1, r4, #12
    c40e:	f000 f80a 	bl	c426 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    c412:	2800      	cmp	r0, #0
    c414:	d1db      	bne.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c416:	f240 117b 	movw	r1, #379	; 0x17b
    c41a:	206a      	movs	r0, #106	; 0x6a
    c41c:	f7f7 fa62 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c420:	f884 7020 	strb.w	r7, [r4, #32]
    c424:	e7d3      	b.n	c3ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    c426:	f7f5 ba8b 	b.w	1940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    c42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c42e:	460d      	mov	r5, r1
    c430:	0004      	movs	r4, r0
    c432:	d00b      	beq.n	c44c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    c434:	7926      	ldrb	r6, [r4, #4]
    c436:	2700      	movs	r7, #0
    c438:	2002      	movs	r0, #2
    c43a:	2d09      	cmp	r5, #9
    c43c:	d27b      	bcs.n	c536 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    c43e:	e8df f005 	tbb	[pc, r5]
    c442:	1008      	.short	0x1008
    c444:	645b2e2e 	.word	0x645b2e2e
    c448:	0086977c 	.word	0x0086977c
    c44c:	f240 1193 	movw	r1, #403	; 0x193
    c450:	e0e2      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c452:	78a0      	ldrb	r0, [r4, #2]
    c454:	2804      	cmp	r0, #4
    c456:	d06f      	beq.n	c538 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    c458:	2803      	cmp	r0, #3
    c45a:	d0fc      	beq.n	c456 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    c45c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    c460:	e0da      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c462:	78a0      	ldrb	r0, [r4, #2]
    c464:	2804      	cmp	r0, #4
    c466:	d004      	beq.n	c472 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    c468:	2803      	cmp	r0, #3
    c46a:	d002      	beq.n	c472 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    c46c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    c470:	e0d2      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c472:	2005      	movs	r0, #5
    c474:	70a0      	strb	r0, [r4, #2]
    c476:	f884 7020 	strb.w	r7, [r4, #32]
    c47a:	7820      	ldrb	r0, [r4, #0]
    c47c:	bb80      	cbnz	r0, c4e0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    c47e:	2100      	movs	r1, #0
    c480:	4620      	mov	r0, r4
    c482:	f000 f8cc 	bl	c61e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    c486:	7b20      	ldrb	r0, [r4, #12]
    c488:	2801      	cmp	r0, #1
    c48a:	d004      	beq.n	c496 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    c48c:	69a0      	ldr	r0, [r4, #24]
    c48e:	61e0      	str	r0, [r4, #28]
    c490:	2100      	movs	r1, #0
    c492:	68a2      	ldr	r2, [r4, #8]
    c494:	e041      	b.n	c51a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    c496:	78e0      	ldrb	r0, [r4, #3]
    c498:	f7f5 f938 	bl	170c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    c49c:	e7f7      	b.n	c48e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    c49e:	78a1      	ldrb	r1, [r4, #2]
    c4a0:	2904      	cmp	r1, #4
    c4a2:	d004      	beq.n	c4ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    c4a4:	2903      	cmp	r1, #3
    c4a6:	d002      	beq.n	c4ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    c4a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    c4ac:	e0b4      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c4ae:	7822      	ldrb	r2, [r4, #0]
    c4b0:	b122      	cbz	r2, c4bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    c4b2:	4621      	mov	r1, r4
    c4b4:	4630      	mov	r0, r6
    c4b6:	f000 f8ee 	bl	c696 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    c4ba:	e0a4      	b.n	c606 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    c4bc:	2904      	cmp	r1, #4
    c4be:	d000      	beq.n	c4c2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    c4c0:	2001      	movs	r0, #1
    c4c2:	70a0      	strb	r0, [r4, #2]
    c4c4:	68a2      	ldr	r2, [r4, #8]
    c4c6:	2d02      	cmp	r5, #2
    c4c8:	d00b      	beq.n	c4e2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    c4ca:	2106      	movs	r1, #6
    c4cc:	4630      	mov	r0, r6
    c4ce:	4790      	blx	r2
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d06b      	beq.n	c5ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    c4d4:	7800      	ldrb	r0, [r0, #0]
    c4d6:	2800      	cmp	r0, #0
    c4d8:	d068      	beq.n	c5ac <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    c4da:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    c4de:	e09b      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c4e0:	e031      	b.n	c546 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    c4e2:	2105      	movs	r1, #5
    c4e4:	4630      	mov	r0, r6
    c4e6:	4790      	blx	r2
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d071      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c4ec:	7800      	ldrb	r0, [r0, #0]
    c4ee:	2800      	cmp	r0, #0
    c4f0:	d06e      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c4f2:	f240 11d5 	movw	r1, #469	; 0x1d5
    c4f6:	e08f      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c4f8:	78a0      	ldrb	r0, [r4, #2]
    c4fa:	2805      	cmp	r0, #5
    c4fc:	d002      	beq.n	c504 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    c4fe:	f240 11e1 	movw	r1, #481	; 0x1e1
    c502:	e089      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c504:	2102      	movs	r1, #2
    c506:	68a2      	ldr	r2, [r4, #8]
    c508:	e007      	b.n	c51a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    c50a:	78a0      	ldrb	r0, [r4, #2]
    c50c:	2805      	cmp	r0, #5
    c50e:	d002      	beq.n	c516 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    c510:	f240 11e7 	movw	r1, #487	; 0x1e7
    c514:	e080      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c516:	68a2      	ldr	r2, [r4, #8]
    c518:	2101      	movs	r1, #1
    c51a:	4630      	mov	r0, r6
    c51c:	4790      	blx	r2
    c51e:	4601      	mov	r1, r0
    c520:	4620      	mov	r0, r4
    c522:	f7ff ff30 	bl	c386 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c526:	2802      	cmp	r0, #2
    c528:	d06d      	beq.n	c606 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    c52a:	b3f0      	cbz	r0, c5aa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    c52c:	2801      	cmp	r0, #1
    c52e:	d064      	beq.n	c5fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    c530:	f240 2127 	movw	r1, #551	; 0x227
    c534:	e070      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c536:	e05d      	b.n	c5f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    c538:	e067      	b.n	c60a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    c53a:	78a0      	ldrb	r0, [r4, #2]
    c53c:	2805      	cmp	r0, #5
    c53e:	d002      	beq.n	c546 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    c540:	f240 11ed 	movw	r1, #493	; 0x1ed
    c544:	e068      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c54a:	f7f3 bf8b 	b.w	464 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x64>
    c54e:	78a0      	ldrb	r0, [r4, #2]
    c550:	2805      	cmp	r0, #5
    c552:	d002      	beq.n	c55a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    c554:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    c558:	e05e      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c55a:	68a2      	ldr	r2, [r4, #8]
    c55c:	210a      	movs	r1, #10
    c55e:	4630      	mov	r0, r6
    c560:	4790      	blx	r2
    c562:	4601      	mov	r1, r0
    c564:	4620      	mov	r0, r4
    c566:	f7ff ff0e 	bl	c386 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c56a:	f240 11f5 	movw	r1, #501	; 0x1f5
    c56e:	e053      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c570:	78a1      	ldrb	r1, [r4, #2]
    c572:	2905      	cmp	r1, #5
    c574:	d006      	beq.n	c584 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    c576:	7862      	ldrb	r2, [r4, #1]
    c578:	b10a      	cbz	r2, c57e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    c57a:	2903      	cmp	r1, #3
    c57c:	d002      	beq.n	c584 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    c57e:	f240 11f9 	movw	r1, #505	; 0x1f9
    c582:	e049      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c584:	7821      	ldrb	r1, [r4, #0]
    c586:	b129      	cbz	r1, c594 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    c588:	4621      	mov	r1, r4
    c58a:	4630      	mov	r0, r6
    c58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c590:	f000 b881 	b.w	c696 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    c594:	f894 1020 	ldrb.w	r1, [r4, #32]
    c598:	b189      	cbz	r1, c5be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    c59a:	f884 7020 	strb.w	r7, [r4, #32]
    c59e:	70a0      	strb	r0, [r4, #2]
    c5a0:	68a2      	ldr	r2, [r4, #8]
    c5a2:	2108      	movs	r1, #8
    c5a4:	4630      	mov	r0, r6
    c5a6:	4790      	blx	r2
    c5a8:	e001      	b.n	c5ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    c5aa:	e029      	b.n	c600 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    c5ac:	e02b      	b.n	c606 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    c5ae:	2800      	cmp	r0, #0
    c5b0:	d00e      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c5b2:	7800      	ldrb	r0, [r0, #0]
    c5b4:	2800      	cmp	r0, #0
    c5b6:	d00b      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c5b8:	f240 2105 	movw	r1, #517	; 0x205
    c5bc:	e02c      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c5be:	7861      	ldrb	r1, [r4, #1]
    c5c0:	b159      	cbz	r1, c5da <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    c5c2:	78e0      	ldrb	r0, [r4, #3]
    c5c4:	f104 010c 	add.w	r1, r4, #12
    c5c8:	f7ff ff2d 	bl	c426 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    c5cc:	b110      	cbz	r0, c5d4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    c5ce:	7067      	strb	r7, [r4, #1]
    c5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5d4:	f240 2109 	movw	r1, #521	; 0x209
    c5d8:	e01e      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c5da:	70a0      	strb	r0, [r4, #2]
    c5dc:	68a2      	ldr	r2, [r4, #8]
    c5de:	2107      	movs	r1, #7
    c5e0:	4630      	mov	r0, r6
    c5e2:	4790      	blx	r2
    c5e4:	2800      	cmp	r0, #0
    c5e6:	d0f3      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c5e8:	7800      	ldrb	r0, [r0, #0]
    c5ea:	2800      	cmp	r0, #0
    c5ec:	d0f0      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c5ee:	f240 2111 	movw	r1, #529	; 0x211
    c5f2:	e011      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c5f4:	f240 2116 	movw	r1, #534	; 0x216
    c5f8:	e00e      	b.n	c618 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    c5fa:	2104      	movs	r1, #4
    c5fc:	68a2      	ldr	r2, [r4, #8]
    c5fe:	e78c      	b.n	c51a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    c600:	2103      	movs	r1, #3
    c602:	68a2      	ldr	r2, [r4, #8]
    c604:	e789      	b.n	c51a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    c606:	2d00      	cmp	r5, #0
    c608:	d1e2      	bne.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c60a:	f000 f8f2 	bl	c7f2 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    c60e:	6800      	ldr	r0, [r0, #0]
    c610:	2800      	cmp	r0, #0
    c612:	d0dd      	beq.n	c5d0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    c614:	f240 2131 	movw	r1, #561	; 0x231
    c618:	206a      	movs	r0, #106	; 0x6a
    c61a:	f7f7 f963 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c61e:	4602      	mov	r2, r0
    c620:	7b03      	ldrb	r3, [r0, #12]
    c622:	6900      	ldr	r0, [r0, #16]
    c624:	4408      	add	r0, r1
    c626:	6110      	str	r0, [r2, #16]
    c628:	3859      	subs	r0, #89	; 0x59
    c62a:	f7f6 b80d 	b.w	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    c62e:	2201      	movs	r2, #1
    c630:	7302      	strb	r2, [r0, #12]
    c632:	2200      	movs	r2, #0
    c634:	75c2      	strb	r2, [r0, #23]
    c636:	790a      	ldrb	r2, [r1, #4]
    c638:	b16a      	cbz	r2, c656 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    c63a:	2200      	movs	r2, #0
    c63c:	8282      	strh	r2, [r0, #20]
    c63e:	794a      	ldrb	r2, [r1, #5]
    c640:	b15a      	cbz	r2, c65a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    c642:	2204      	movs	r2, #4
    c644:	7582      	strb	r2, [r0, #22]
    c646:	688a      	ldr	r2, [r1, #8]
    c648:	326a      	adds	r2, #106	; 0x6a
    c64a:	6102      	str	r2, [r0, #16]
    c64c:	68c9      	ldr	r1, [r1, #12]
    c64e:	6181      	str	r1, [r0, #24]
    c650:	2103      	movs	r1, #3
    c652:	7081      	strb	r1, [r0, #2]
    c654:	4770      	bx	lr
    c656:	222b      	movs	r2, #43	; 0x2b
    c658:	e7f0      	b.n	c63c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    c65a:	2203      	movs	r2, #3
    c65c:	e7f2      	b.n	c644 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    c65e:	b510      	push	{r4, lr}
    c660:	4604      	mov	r4, r0
    c662:	2000      	movs	r0, #0
    c664:	7320      	strb	r0, [r4, #12]
    c666:	75e0      	strb	r0, [r4, #23]
    c668:	7908      	ldrb	r0, [r1, #4]
    c66a:	b180      	cbz	r0, c68e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    c66c:	2000      	movs	r0, #0
    c66e:	82a0      	strh	r0, [r4, #20]
    c670:	7948      	ldrb	r0, [r1, #5]
    c672:	b170      	cbz	r0, c692 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    c674:	2004      	movs	r0, #4
    c676:	75a0      	strb	r0, [r4, #22]
    c678:	68c8      	ldr	r0, [r1, #12]
    c67a:	306a      	adds	r0, #106	; 0x6a
    c67c:	6120      	str	r0, [r4, #16]
    c67e:	6889      	ldr	r1, [r1, #8]
    c680:	69e0      	ldr	r0, [r4, #28]
    c682:	f7f4 ffed 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    c686:	61a0      	str	r0, [r4, #24]
    c688:	2004      	movs	r0, #4
    c68a:	70a0      	strb	r0, [r4, #2]
    c68c:	bd10      	pop	{r4, pc}
    c68e:	202b      	movs	r0, #43	; 0x2b
    c690:	e7ed      	b.n	c66e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    c692:	2003      	movs	r0, #3
    c694:	e7ef      	b.n	c676 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    c696:	b570      	push	{r4, r5, r6, lr}
    c698:	4605      	mov	r5, r0
    c69a:	460c      	mov	r4, r1
    c69c:	78c8      	ldrb	r0, [r1, #3]
    c69e:	f7f5 fd9b 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    c6a2:	b178      	cbz	r0, c6c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    c6a4:	4620      	mov	r0, r4
    c6a6:	f000 f810 	bl	c6ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    c6aa:	68a2      	ldr	r2, [r4, #8]
    c6ac:	2109      	movs	r1, #9
    c6ae:	4628      	mov	r0, r5
    c6b0:	4790      	blx	r2
    c6b2:	2800      	cmp	r0, #0
    c6b4:	d008      	beq.n	c6c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    c6b6:	7800      	ldrb	r0, [r0, #0]
    c6b8:	2800      	cmp	r0, #0
    c6ba:	d005      	beq.n	c6c8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    c6bc:	21db      	movs	r1, #219	; 0xdb
    c6be:	206a      	movs	r0, #106	; 0x6a
    c6c0:	f7f7 f910 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6c4:	21d7      	movs	r1, #215	; 0xd7
    c6c6:	e7fa      	b.n	c6be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    c6c8:	bd70      	pop	{r4, r5, r6, pc}
    c6ca:	2100      	movs	r1, #0
    c6cc:	7081      	strb	r1, [r0, #2]
    c6ce:	7001      	strb	r1, [r0, #0]
    c6d0:	7041      	strb	r1, [r0, #1]
    c6d2:	4770      	bx	lr

0000c6d4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c6d4:	b570      	push	{r4, r5, r6, lr}
    c6d6:	f7f3 ff1f 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c6da:	4605      	mov	r5, r0
    c6dc:	2400      	movs	r4, #0
    c6de:	e006      	b.n	c6ee <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c6e0:	4620      	mov	r0, r4
    c6e2:	f7f3 ff1f 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c6e6:	f7ff fff0 	bl	c6ca <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    c6ea:	1c64      	adds	r4, r4, #1
    c6ec:	b2e4      	uxtb	r4, r4
    c6ee:	42ac      	cmp	r4, r5
    c6f0:	d3f6      	bcc.n	c6e0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c6f2:	bd70      	pop	{r4, r5, r6, pc}

0000c6f4 <mpsl_timeslot_request>:
    c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6f8:	460d      	mov	r5, r1
    c6fa:	f7f3 ff13 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c6fe:	0004      	movs	r4, r0
    c700:	d007      	beq.n	c712 <mpsl_timeslot_request+0x1e>
    c702:	78a0      	ldrb	r0, [r4, #2]
    c704:	f06f 0622 	mvn.w	r6, #34	; 0x22
    c708:	2801      	cmp	r0, #1
    c70a:	d006      	beq.n	c71a <mpsl_timeslot_request+0x26>
    c70c:	2802      	cmp	r0, #2
    c70e:	d110      	bne.n	c732 <mpsl_timeslot_request+0x3e>
    c710:	e003      	b.n	c71a <mpsl_timeslot_request+0x26>
    c712:	f06f 0001 	mvn.w	r0, #1
    c716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c71a:	f06f 0715 	mvn.w	r7, #21
    c71e:	b155      	cbz	r5, c736 <mpsl_timeslot_request+0x42>
    c720:	4628      	mov	r0, r5
    c722:	f7f3 fe71 	bl	408 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x8>
    c726:	b130      	cbz	r0, c736 <mpsl_timeslot_request+0x42>
    c728:	7828      	ldrb	r0, [r5, #0]
    c72a:	b130      	cbz	r0, c73a <mpsl_timeslot_request+0x46>
    c72c:	78a0      	ldrb	r0, [r4, #2]
    c72e:	2802      	cmp	r0, #2
    c730:	d008      	beq.n	c744 <mpsl_timeslot_request+0x50>
    c732:	4630      	mov	r0, r6
    c734:	e7ef      	b.n	c716 <mpsl_timeslot_request+0x22>
    c736:	4638      	mov	r0, r7
    c738:	e7ed      	b.n	c716 <mpsl_timeslot_request+0x22>
    c73a:	4629      	mov	r1, r5
    c73c:	4620      	mov	r0, r4
    c73e:	f7ff ff76 	bl	c62e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    c742:	e003      	b.n	c74c <mpsl_timeslot_request+0x58>
    c744:	4629      	mov	r1, r5
    c746:	4620      	mov	r0, r4
    c748:	f7ff ff89 	bl	c65e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    c74c:	78e0      	ldrb	r0, [r4, #3]
    c74e:	f104 010c 	add.w	r1, r4, #12
    c752:	f7ff fe68 	bl	c426 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    c756:	b108      	cbz	r0, c75c <mpsl_timeslot_request+0x68>
    c758:	2000      	movs	r0, #0
    c75a:	e7dc      	b.n	c716 <mpsl_timeslot_request+0x22>
    c75c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    c760:	206a      	movs	r0, #106	; 0x6a
    c762:	f7f7 f8bf 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000c766 <mpsl_timeslot_session_close>:
    c766:	b510      	push	{r4, lr}
    c768:	4604      	mov	r4, r0
    c76a:	f7f3 fedb 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c76e:	0001      	movs	r1, r0
    c770:	d004      	beq.n	c77c <mpsl_timeslot_session_close+0x16>
    c772:	7808      	ldrb	r0, [r1, #0]
    c774:	f06f 0222 	mvn.w	r2, #34	; 0x22
    c778:	b968      	cbnz	r0, c796 <mpsl_timeslot_session_close+0x30>
    c77a:	e002      	b.n	c782 <mpsl_timeslot_session_close+0x1c>
    c77c:	f06f 0001 	mvn.w	r0, #1
    c780:	bd10      	pop	{r4, pc}
    c782:	7888      	ldrb	r0, [r1, #2]
    c784:	b138      	cbz	r0, c796 <mpsl_timeslot_session_close+0x30>
    c786:	2802      	cmp	r0, #2
    c788:	d007      	beq.n	c79a <mpsl_timeslot_session_close+0x34>
    c78a:	2801      	cmp	r0, #1
    c78c:	d005      	beq.n	c79a <mpsl_timeslot_session_close+0x34>
    c78e:	2001      	movs	r0, #1
    c790:	7008      	strb	r0, [r1, #0]
    c792:	2000      	movs	r0, #0
    c794:	bd10      	pop	{r4, pc}
    c796:	4610      	mov	r0, r2
    c798:	bd10      	pop	{r4, pc}
    c79a:	4620      	mov	r0, r4
    c79c:	f7ff ff7b 	bl	c696 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    c7a0:	e7f7      	b.n	c792 <mpsl_timeslot_session_close+0x2c>

0000c7a2 <mpsl_timeslot_session_count_set>:
    c7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7a6:	460e      	mov	r6, r1
    c7a8:	4607      	mov	r7, r0
    c7aa:	f7f3 feb5 	bl	518 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c7ae:	4605      	mov	r5, r0
    c7b0:	2400      	movs	r4, #0
    c7b2:	e00a      	b.n	c7ca <mpsl_timeslot_session_count_set+0x28>
    c7b4:	4620      	mov	r0, r4
    c7b6:	f7f3 feb5 	bl	524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c7ba:	7880      	ldrb	r0, [r0, #2]
    c7bc:	b118      	cbz	r0, c7c6 <mpsl_timeslot_session_count_set+0x24>
    c7be:	f04f 30ff 	mov.w	r0, #4294967295
    c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7c6:	1c64      	adds	r4, r4, #1
    c7c8:	b2e4      	uxtb	r4, r4
    c7ca:	42ac      	cmp	r4, r5
    c7cc:	d3f2      	bcc.n	c7b4 <mpsl_timeslot_session_count_set+0x12>
    c7ce:	2e08      	cmp	r6, #8
    c7d0:	d902      	bls.n	c7d8 <mpsl_timeslot_session_count_set+0x36>
    c7d2:	f06f 0015 	mvn.w	r0, #21
    c7d6:	e7f4      	b.n	c7c2 <mpsl_timeslot_session_count_set+0x20>
    c7d8:	b117      	cbz	r7, c7e0 <mpsl_timeslot_session_count_set+0x3e>
    c7da:	4631      	mov	r1, r6
    c7dc:	4638      	mov	r0, r7
    c7de:	e001      	b.n	c7e4 <mpsl_timeslot_session_count_set+0x42>
    c7e0:	2100      	movs	r1, #0
    c7e2:	4608      	mov	r0, r1
    c7e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c7e8:	f7f3 be82 	b.w	4f0 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000c7ec <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c7ec:	2000      	movs	r0, #0
    c7ee:	f7f6 bcbd 	b.w	316c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c7f2 <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    c7f2:	2000      	movs	r0, #0
    c7f4:	f7f6 bca0 	b.w	3138 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000c7f8 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c7f8:	b510      	push	{r4, lr}
    c7fa:	f7f6 f973 	bl	2ae4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c802:	f000 b800 	b.w	c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c806 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c806:	0a41      	lsrs	r1, r0, #9
    c808:	f643 5209 	movw	r2, #15625	; 0x3d09
    c80c:	4351      	muls	r1, r2
    c80e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c812:	fb10 f002 	smulbb	r0, r0, r2
    c816:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c81a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c81e:	4770      	bx	lr

0000c820 <MPSL_IRQ_RADIO_Handler>:
    c820:	f7f4 bf88 	b.w	1734 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c824:	2800      	cmp	r0, #0
    c826:	db09      	blt.n	c83c <MPSL_IRQ_RADIO_Handler+0x1c>
    c828:	f000 021f 	and.w	r2, r0, #31
    c82c:	2101      	movs	r1, #1
    c82e:	4091      	lsls	r1, r2
    c830:	0940      	lsrs	r0, r0, #5
    c832:	0080      	lsls	r0, r0, #2
    c834:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c838:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c83c:	4770      	bx	lr
    c83e:	2800      	cmp	r0, #0
    c840:	db0d      	blt.n	c85e <MPSL_IRQ_RADIO_Handler+0x3e>
    c842:	f000 021f 	and.w	r2, r0, #31
    c846:	2101      	movs	r1, #1
    c848:	4091      	lsls	r1, r2
    c84a:	0940      	lsrs	r0, r0, #5
    c84c:	0080      	lsls	r0, r0, #2
    c84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c852:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c856:	f3bf 8f4f 	dsb	sy
    c85a:	f3bf 8f6f 	isb	sy
    c85e:	4770      	bx	lr

0000c860 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c860:	b570      	push	{r4, r5, r6, lr}
    c862:	4602      	mov	r2, r0
    c864:	2000      	movs	r0, #0
    c866:	2900      	cmp	r1, #0
    c868:	d01d      	beq.n	c8a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c86a:	fba2 0101 	umull	r0, r1, r2, r1
    c86e:	0a40      	lsrs	r0, r0, #9
    c870:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c874:	0a49      	lsrs	r1, r1, #9
    c876:	1c40      	adds	r0, r0, #1
    c878:	f141 0100 	adc.w	r1, r1, #0
    c87c:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c880:	1883      	adds	r3, r0, r2
    c882:	f141 0100 	adc.w	r1, r1, #0
    c886:	1c5b      	adds	r3, r3, #1
    c888:	f141 0400 	adc.w	r4, r1, #0
    c88c:	2100      	movs	r1, #0
    c88e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c892:	41a1      	sbcs	r1, r4
    c894:	d203      	bcs.n	c89e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c896:	2171      	movs	r1, #113	; 0x71
    c898:	206d      	movs	r0, #109	; 0x6d
    c89a:	f7f7 f823 	bl	38e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c89e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c8a2:	fbb0 f0f2 	udiv	r0, r0, r2
    c8a6:	bd70      	pop	{r4, r5, r6, pc}
    c8a8:	5840      	ldr	r0, [r0, r1]
    c8aa:	2800      	cmp	r0, #0
    c8ac:	d000      	beq.n	c8b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c8ae:	2001      	movs	r0, #1
    c8b0:	4770      	bx	lr
    c8b2:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c8b6:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c8ba:	f002 0201 	and.w	r2, r2, #1
    c8be:	03c0      	lsls	r0, r0, #15
    c8c0:	d503      	bpl.n	c8ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c8c2:	428a      	cmp	r2, r1
    c8c4:	d101      	bne.n	c8ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c8c6:	2001      	movs	r0, #1
    c8c8:	4770      	bx	lr
    c8ca:	2000      	movs	r0, #0
    c8cc:	4770      	bx	lr

0000c8ce <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c8ce:	b510      	push	{r4, lr}
    c8d0:	2101      	movs	r1, #1
    c8d2:	0788      	lsls	r0, r1, #30
    c8d4:	f7f6 ffb0 	bl	3838 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c8d8:	2800      	cmp	r0, #0
    c8da:	d000      	beq.n	c8de <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c8dc:	2001      	movs	r0, #1
    c8de:	bd10      	pop	{r4, pc}

0000c8e0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c8e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c8e4:	2101      	movs	r1, #1
    c8e6:	6001      	str	r1, [r0, #0]
    c8e8:	4770      	bx	lr

0000c8ea <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c8ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c8ee:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c8f2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c8f6:	f002 0203 	and.w	r2, r2, #3
    c8fa:	03c9      	lsls	r1, r1, #15
    c8fc:	d503      	bpl.n	c906 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c8fe:	4282      	cmp	r2, r0
    c900:	d101      	bne.n	c906 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c902:	2001      	movs	r0, #1
    c904:	4770      	bx	lr
    c906:	2000      	movs	r0, #0
    c908:	4770      	bx	lr

0000c90a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c90a:	b510      	push	{r4, lr}
    c90c:	2100      	movs	r1, #0
    c90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c912:	f7f6 ff91 	bl	3838 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c916:	2800      	cmp	r0, #0
    c918:	d000      	beq.n	c91c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c91a:	2001      	movs	r0, #1
    c91c:	bd10      	pop	{r4, pc}
    c91e:	2800      	cmp	r0, #0
    c920:	db09      	blt.n	c936 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c922:	f000 021f 	and.w	r2, r0, #31
    c926:	2101      	movs	r1, #1
    c928:	4091      	lsls	r1, r2
    c92a:	0940      	lsrs	r0, r0, #5
    c92c:	0080      	lsls	r0, r0, #2
    c92e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c932:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c936:	4770      	bx	lr
    c938:	2800      	cmp	r0, #0
    c93a:	db0d      	blt.n	c958 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c93c:	f000 021f 	and.w	r2, r0, #31
    c940:	2101      	movs	r1, #1
    c942:	4091      	lsls	r1, r2
    c944:	0940      	lsrs	r0, r0, #5
    c946:	0080      	lsls	r0, r0, #2
    c948:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c94c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c950:	f3bf 8f4f 	dsb	sy
    c954:	f3bf 8f6f 	isb	sy
    c958:	4770      	bx	lr
    c95a:	1000      	.short	0x1000
    c95c:	00fa0002 	.word	0x00fa0002
    c960:	57230000 	.word	0x57230000
    c964:	31232462 	.word	0x31232462
    c968:	ee74578f 	.word	0xee74578f
    c96c:	c0882fd1 	.word	0xc0882fd1
    c970:	a2f74594 	.word	0xa2f74594
    c974:	36f9      	.short	0x36f9
    c976:	2800      	cmp	r0, #0
    c978:	db09      	blt.n	c98e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c97a:	f000 021f 	and.w	r2, r0, #31
    c97e:	2101      	movs	r1, #1
    c980:	4091      	lsls	r1, r2
    c982:	0940      	lsrs	r0, r0, #5
    c984:	0080      	lsls	r0, r0, #2
    c986:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c98a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c98e:	4770      	bx	lr

0000c990 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c990:	f3ef 8110 	mrs	r1, PRIMASK
    c994:	b672      	cpsid	i
    c996:	7802      	ldrb	r2, [r0, #0]
    c998:	2a01      	cmp	r2, #1
    c99a:	d001      	beq.n	c9a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c99c:	2201      	movs	r2, #1
    c99e:	e000      	b.n	c9a2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c9a0:	2200      	movs	r2, #0
    c9a2:	2301      	movs	r3, #1
    c9a4:	7003      	strb	r3, [r0, #0]
    c9a6:	b901      	cbnz	r1, c9aa <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c9a8:	b662      	cpsie	i
    c9aa:	b10a      	cbz	r2, c9b0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c9ac:	2000      	movs	r0, #0
    c9ae:	4770      	bx	lr
    c9b0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c9b4:	4770      	bx	lr

0000c9b6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c9b6:	2100      	movs	r1, #0
    c9b8:	7001      	strb	r1, [r0, #0]
    c9ba:	4608      	mov	r0, r1
    c9bc:	4770      	bx	lr

0000c9be <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c9be:	f3ef 8110 	mrs	r1, PRIMASK
    c9c2:	b672      	cpsid	i
    c9c4:	2200      	movs	r2, #0
    c9c6:	7002      	strb	r2, [r0, #0]
    c9c8:	b901      	cbnz	r1, c9cc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c9ca:	b662      	cpsie	i
    c9cc:	2000      	movs	r0, #0
    c9ce:	4770      	bx	lr

0000c9d0 <mpsl_low_priority_process>:
    c9d0:	f7f7 b874 	b.w	3abc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c9d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c9d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c9d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c9dc:	280f      	cmp	r0, #15
    c9de:	d001      	beq.n	c9e4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c9e0:	2000      	movs	r0, #0
    c9e2:	4770      	bx	lr
    c9e4:	2001      	movs	r0, #1
    c9e6:	4770      	bx	lr

0000c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c9e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c9ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c9f0:	280a      	cmp	r0, #10
    c9f2:	d001      	beq.n	c9f8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c9f4:	2000      	movs	r0, #0
    c9f6:	4770      	bx	lr
    c9f8:	2001      	movs	r0, #1
    c9fa:	4770      	bx	lr

0000c9fc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c9fc:	b500      	push	{lr}
    c9fe:	f7ff fff3 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ca02:	b120      	cbz	r0, ca0e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    ca04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca08:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ca0c:	b108      	cbz	r0, ca12 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    ca0e:	2000      	movs	r0, #0
    ca10:	bd00      	pop	{pc}
    ca12:	2001      	movs	r0, #1
    ca14:	bd00      	pop	{pc}

0000ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    ca16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca1a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca1e:	280e      	cmp	r0, #14
    ca20:	d001      	beq.n	ca26 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    ca22:	2000      	movs	r0, #0
    ca24:	4770      	bx	lr
    ca26:	2001      	movs	r0, #1
    ca28:	4770      	bx	lr

0000ca2a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ca2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca2e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca32:	2810      	cmp	r0, #16
    ca34:	d001      	beq.n	ca3a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ca36:	2000      	movs	r0, #0
    ca38:	4770      	bx	lr
    ca3a:	2001      	movs	r0, #1
    ca3c:	4770      	bx	lr

0000ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ca3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca42:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca46:	2806      	cmp	r0, #6
    ca48:	d003      	beq.n	ca52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ca4a:	1c40      	adds	r0, r0, #1
    ca4c:	d001      	beq.n	ca52 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ca4e:	2000      	movs	r0, #0
    ca50:	4770      	bx	lr
    ca52:	2001      	movs	r0, #1
    ca54:	4770      	bx	lr

0000ca56 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    ca56:	b500      	push	{lr}
    ca58:	f7ff fff1 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ca5c:	b148      	cbz	r0, ca72 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ca5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca62:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ca66:	2806      	cmp	r0, #6
    ca68:	d303      	bcc.n	ca72 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ca6a:	1c40      	adds	r0, r0, #1
    ca6c:	d001      	beq.n	ca72 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ca6e:	2001      	movs	r0, #1
    ca70:	bd00      	pop	{pc}
    ca72:	2000      	movs	r0, #0
    ca74:	bd00      	pop	{pc}

0000ca76 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    ca76:	b500      	push	{lr}
    ca78:	f7ff ffe1 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ca7c:	b138      	cbz	r0, ca8e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    ca7e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca82:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ca86:	2806      	cmp	r0, #6
    ca88:	d303      	bcc.n	ca92 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ca8a:	1c40      	adds	r0, r0, #1
    ca8c:	d001      	beq.n	ca92 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ca8e:	2000      	movs	r0, #0
    ca90:	bd00      	pop	{pc}
    ca92:	2001      	movs	r0, #1
    ca94:	bd00      	pop	{pc}

0000ca96 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    ca96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca9a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ca9e:	280d      	cmp	r0, #13
    caa0:	d001      	beq.n	caa6 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    caa2:	2000      	movs	r0, #0
    caa4:	4770      	bx	lr
    caa6:	2001      	movs	r0, #1
    caa8:	4770      	bx	lr

0000caaa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    caaa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    caae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cab2:	2808      	cmp	r0, #8
    cab4:	d001      	beq.n	caba <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    cab6:	2000      	movs	r0, #0
    cab8:	4770      	bx	lr
    caba:	2001      	movs	r0, #1
    cabc:	4770      	bx	lr

0000cabe <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    cabe:	2a00      	cmp	r2, #0
    cac0:	bf04      	itt	eq
    cac2:	2000      	moveq	r0, #0
    cac4:	4770      	bxeq	lr
    cac6:	1e52      	subs	r2, r2, #1
    cac8:	d007      	beq.n	cada <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    caca:	7803      	ldrb	r3, [r0, #0]
    cacc:	f891 c000 	ldrb.w	ip, [r1]
    cad0:	4563      	cmp	r3, ip
    cad2:	bf04      	itt	eq
    cad4:	1c40      	addeq	r0, r0, #1
    cad6:	1c49      	addeq	r1, r1, #1
    cad8:	d0f5      	beq.n	cac6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    cada:	7800      	ldrb	r0, [r0, #0]
    cadc:	7809      	ldrb	r1, [r1, #0]
    cade:	1a40      	subs	r0, r0, r1
    cae0:	4770      	bx	lr

0000cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cae2:	b4f0      	push	{r4, r5, r6, r7}
    cae4:	ea80 0c01 	eor.w	ip, r0, r1
    cae8:	4603      	mov	r3, r0
    caea:	f01c 0f03 	tst.w	ip, #3
    caee:	d13c      	bne.n	cb6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    caf0:	f013 0f03 	tst.w	r3, #3
    caf4:	d00b      	beq.n	cb0e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    caf6:	2a00      	cmp	r2, #0
    caf8:	bf04      	itt	eq
    cafa:	bcf0      	popeq	{r4, r5, r6, r7}
    cafc:	4770      	bxeq	lr
    cafe:	f811 cb01 	ldrb.w	ip, [r1], #1
    cb02:	f803 cb01 	strb.w	ip, [r3], #1
    cb06:	1e52      	subs	r2, r2, #1
    cb08:	f013 0f03 	tst.w	r3, #3
    cb0c:	d1f3      	bne.n	caf6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cb0e:	2a03      	cmp	r2, #3
    cb10:	d94f      	bls.n	cbb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cb12:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cb16:	d24c      	bcs.n	cbb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cb18:	f1c2 0c00 	rsb	ip, r2, #0
    cb1c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cb20:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cb24:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cb28:	f1cc 0c00 	rsb	ip, ip, #0
    cb2c:	f1bc 0f00 	cmp.w	ip, #0
    cb30:	dd1b      	ble.n	cb6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cb32:	1f0d      	subs	r5, r1, #4
    cb34:	1f1c      	subs	r4, r3, #4
    cb36:	f01c 0f01 	tst.w	ip, #1
    cb3a:	d003      	beq.n	cb44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cb3c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cb40:	f844 6f04 	str.w	r6, [r4, #4]!
    cb44:	ea5f 066c 	movs.w	r6, ip, asr #1
    cb48:	d007      	beq.n	cb5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cb4a:	686f      	ldr	r7, [r5, #4]
    cb4c:	6067      	str	r7, [r4, #4]
    cb4e:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cb52:	f844 7f08 	str.w	r7, [r4, #8]!
    cb56:	1e76      	subs	r6, r6, #1
    cb58:	d1f7      	bne.n	cb4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    cb5a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    cb5e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    cb62:	f1cc 0c00 	rsb	ip, ip, #0
    cb66:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    cb6a:	2a00      	cmp	r2, #0
    cb6c:	bf04      	itt	eq
    cb6e:	bcf0      	popeq	{r4, r5, r6, r7}
    cb70:	4770      	bxeq	lr
    cb72:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cb76:	d226      	bcs.n	cbc6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cb78:	2a00      	cmp	r2, #0
    cb7a:	bfdc      	itt	le
    cb7c:	bcf0      	pople	{r4, r5, r6, r7}
    cb7e:	4770      	bxle	lr
    cb80:	1e49      	subs	r1, r1, #1
    cb82:	1e5b      	subs	r3, r3, #1
    cb84:	f012 0f01 	tst.w	r2, #1
    cb88:	d003      	beq.n	cb92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    cb8a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    cb8e:	f803 cf01 	strb.w	ip, [r3, #1]!
    cb92:	1052      	asrs	r2, r2, #1
    cb94:	bf04      	itt	eq
    cb96:	bcf0      	popeq	{r4, r5, r6, r7}
    cb98:	4770      	bxeq	lr
    cb9a:	f891 c001 	ldrb.w	ip, [r1, #1]
    cb9e:	f883 c001 	strb.w	ip, [r3, #1]
    cba2:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    cba6:	f803 cf02 	strb.w	ip, [r3, #2]!
    cbaa:	1e52      	subs	r2, r2, #1
    cbac:	d1f5      	bne.n	cb9a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    cbae:	bcf0      	pop	{r4, r5, r6, r7}
    cbb0:	4770      	bx	lr
    cbb2:	2a04      	cmp	r2, #4
    cbb4:	d3d9      	bcc.n	cb6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cbb6:	f851 cb04 	ldr.w	ip, [r1], #4
    cbba:	1f12      	subs	r2, r2, #4
    cbbc:	f843 cb04 	str.w	ip, [r3], #4
    cbc0:	2a04      	cmp	r2, #4
    cbc2:	d2f8      	bcs.n	cbb6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    cbc4:	e7d1      	b.n	cb6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cbc6:	f811 cb01 	ldrb.w	ip, [r1], #1
    cbca:	f803 cb01 	strb.w	ip, [r3], #1
    cbce:	1e52      	subs	r2, r2, #1
    cbd0:	d1f9      	bne.n	cbc6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cbd2:	bcf0      	pop	{r4, r5, r6, r7}
    cbd4:	4770      	bx	lr

0000cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    cbd6:	b470      	push	{r4, r5, r6}
    cbd8:	4603      	mov	r3, r0
    cbda:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    cbde:	f010 0f03 	tst.w	r0, #3
    cbe2:	d009      	beq.n	cbf8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    cbe4:	2a00      	cmp	r2, #0
    cbe6:	bf04      	itt	eq
    cbe8:	bc70      	popeq	{r4, r5, r6}
    cbea:	4770      	bxeq	lr
    cbec:	f803 cb01 	strb.w	ip, [r3], #1
    cbf0:	1e52      	subs	r2, r2, #1
    cbf2:	f013 0f03 	tst.w	r3, #3
    cbf6:	d1f5      	bne.n	cbe4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    cbf8:	b2c9      	uxtb	r1, r1
    cbfa:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cbfe:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    cc02:	2a03      	cmp	r2, #3
    cc04:	d939      	bls.n	cc7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    cc06:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc0a:	d236      	bcs.n	cc7a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    cc0c:	4251      	negs	r1, r2
    cc0e:	17cc      	asrs	r4, r1, #31
    cc10:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    cc14:	1089      	asrs	r1, r1, #2
    cc16:	424e      	negs	r6, r1
    cc18:	2e00      	cmp	r6, #0
    cc1a:	dd11      	ble.n	cc40 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cc1c:	1f19      	subs	r1, r3, #4
    cc1e:	f016 0f01 	tst.w	r6, #1
    cc22:	bf18      	it	ne
    cc24:	f841 5f04 	strne.w	r5, [r1, #4]!
    cc28:	1074      	asrs	r4, r6, #1
    cc2a:	d004      	beq.n	cc36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    cc2c:	604d      	str	r5, [r1, #4]
    cc2e:	f841 5f08 	str.w	r5, [r1, #8]!
    cc32:	1e64      	subs	r4, r4, #1
    cc34:	d1fa      	bne.n	cc2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    cc36:	4271      	negs	r1, r6
    cc38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cc3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    cc40:	2a00      	cmp	r2, #0
    cc42:	bf04      	itt	eq
    cc44:	bc70      	popeq	{r4, r5, r6}
    cc46:	4770      	bxeq	lr
    cc48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc4c:	d21d      	bcs.n	cc8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cc4e:	2a00      	cmp	r2, #0
    cc50:	bfdc      	itt	le
    cc52:	bc70      	pople	{r4, r5, r6}
    cc54:	4770      	bxle	lr
    cc56:	1e59      	subs	r1, r3, #1
    cc58:	f012 0f01 	tst.w	r2, #1
    cc5c:	bf18      	it	ne
    cc5e:	f801 cf01 	strbne.w	ip, [r1, #1]!
    cc62:	1052      	asrs	r2, r2, #1
    cc64:	bf04      	itt	eq
    cc66:	bc70      	popeq	{r4, r5, r6}
    cc68:	4770      	bxeq	lr
    cc6a:	f881 c001 	strb.w	ip, [r1, #1]
    cc6e:	f801 cf02 	strb.w	ip, [r1, #2]!
    cc72:	1e52      	subs	r2, r2, #1
    cc74:	d1f9      	bne.n	cc6a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cc76:	bc70      	pop	{r4, r5, r6}
    cc78:	4770      	bx	lr
    cc7a:	2a04      	cmp	r2, #4
    cc7c:	d3e0      	bcc.n	cc40 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cc7e:	1f12      	subs	r2, r2, #4
    cc80:	f843 5b04 	str.w	r5, [r3], #4
    cc84:	2a04      	cmp	r2, #4
    cc86:	d2fa      	bcs.n	cc7e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    cc88:	e7da      	b.n	cc40 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cc8a:	f803 cb01 	strb.w	ip, [r3], #1
    cc8e:	1e52      	subs	r2, r2, #1
    cc90:	d1fb      	bne.n	cc8a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cc92:	bc70      	pop	{r4, r5, r6}
    cc94:	4770      	bx	lr
    cc96:	f04f 30ff 	mov.w	r0, #4294967295
    cc9a:	4770      	bx	lr
    cc9c:	2000      	movs	r0, #0
    cc9e:	4770      	bx	lr
    cca0:	2000      	movs	r0, #0
    cca2:	4770      	bx	lr
    cca4:	f04f 30ff 	mov.w	r0, #4294967295
    cca8:	4770      	bx	lr
    ccaa:	4770      	bx	lr
    ccac:	4770      	bx	lr
    ccae:	2000      	movs	r0, #0
    ccb0:	4770      	bx	lr
    ccb2:	f04f 30ff 	mov.w	r0, #4294967295
    ccb6:	4770      	bx	lr
    ccb8:	f04f 30ff 	mov.w	r0, #4294967295
    ccbc:	4770      	bx	lr
    ccbe:	2100      	movs	r1, #0
    ccc0:	7001      	strb	r1, [r0, #0]
    ccc2:	4770      	bx	lr
    ccc4:	f04f 30ff 	mov.w	r0, #4294967295
    ccc8:	4770      	bx	lr
    ccca:	f04f 30ff 	mov.w	r0, #4294967295
    ccce:	4770      	bx	lr
    ccd0:	2000      	movs	r0, #0
    ccd2:	4770      	bx	lr
    ccd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccd8:	4606      	mov	r6, r0
    ccda:	460c      	mov	r4, r1
    ccdc:	7808      	ldrb	r0, [r1, #0]
    ccde:	7849      	ldrb	r1, [r1, #1]
    cce0:	2700      	movs	r7, #0
    cce2:	4408      	add	r0, r1
    cce4:	4691      	mov	r9, r2
    cce6:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    ccea:	463d      	mov	r5, r7
    ccec:	e00e      	b.n	cd0c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    ccee:	7a23      	ldrb	r3, [r4, #8]
    ccf0:	2b02      	cmp	r3, #2
    ccf2:	d200      	bcs.n	ccf6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    ccf4:	2302      	movs	r3, #2
    ccf6:	79e2      	ldrb	r2, [r4, #7]
    ccf8:	2a03      	cmp	r2, #3
    ccfa:	d200      	bcs.n	ccfe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    ccfc:	2203      	movs	r2, #3
    ccfe:	79a1      	ldrb	r1, [r4, #6]
    cd00:	7960      	ldrb	r0, [r4, #5]
    cd02:	f000 ffd0 	bl	dca6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cd06:	1c6d      	adds	r5, r5, #1
    cd08:	4407      	add	r7, r0
    cd0a:	b2ed      	uxtb	r5, r5
    cd0c:	4545      	cmp	r5, r8
    cd0e:	d3ee      	bcc.n	ccee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    cd10:	6830      	ldr	r0, [r6, #0]
    cd12:	1cc0      	adds	r0, r0, #3
    cd14:	f020 0003 	bic.w	r0, r0, #3
    cd18:	6030      	str	r0, [r6, #0]
    cd1a:	f1b9 0f00 	cmp.w	r9, #0
    cd1e:	d000      	beq.n	cd22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    cd20:	2000      	movs	r0, #0
    cd22:	463a      	mov	r2, r7
    cd24:	4641      	mov	r1, r8
    cd26:	f7f7 fc73 	bl	4610 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cd2a:	6831      	ldr	r1, [r6, #0]
    cd2c:	4408      	add	r0, r1
    cd2e:	6030      	str	r0, [r6, #0]
    cd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cd34 <sdc_soc_ecb_block_encrypt>:
    cd34:	b530      	push	{r4, r5, lr}
    cd36:	460d      	mov	r5, r1
    cd38:	b08d      	sub	sp, #52	; 0x34
    cd3a:	4614      	mov	r4, r2
    cd3c:	4601      	mov	r1, r0
    cd3e:	2210      	movs	r2, #16
    cd40:	4668      	mov	r0, sp
    cd42:	f7ff fece 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd46:	2210      	movs	r2, #16
    cd48:	4629      	mov	r1, r5
    cd4a:	a804      	add	r0, sp, #16
    cd4c:	f7ff fec9 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd50:	4668      	mov	r0, sp
    cd52:	f7f7 fd99 	bl	4888 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cd56:	b118      	cbz	r0, cd60 <sdc_soc_ecb_block_encrypt+0x2c>
    cd58:	f06f 0015 	mvn.w	r0, #21
    cd5c:	b00d      	add	sp, #52	; 0x34
    cd5e:	bd30      	pop	{r4, r5, pc}
    cd60:	2210      	movs	r2, #16
    cd62:	4620      	mov	r0, r4
    cd64:	a908      	add	r1, sp, #32
    cd66:	f7ff febc 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd6a:	2000      	movs	r0, #0
    cd6c:	e7f6      	b.n	cd5c <sdc_soc_ecb_block_encrypt+0x28>

0000cd6e <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    cd6e:	2000      	movs	r0, #0
    cd70:	4770      	bx	lr

0000cd72 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    cd72:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    cd74:	4604      	mov	r4, r0
    cd76:	1d01      	adds	r1, r0, #4
    cd78:	4668      	mov	r0, sp
    cd7a:	f7f9 f8e5 	bl	5f48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    cd7e:	2800      	cmp	r0, #0
    cd80:	d004      	beq.n	cd8c <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    cd82:	4669      	mov	r1, sp
    cd84:	4620      	mov	r0, r4
    cd86:	f000 f848 	bl	ce1a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    cd8a:	2001      	movs	r0, #1
    cd8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000cd8e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cd8e:	b50e      	push	{r1, r2, r3, lr}
    cd90:	4601      	mov	r1, r0
    cd92:	4668      	mov	r0, sp
    cd94:	f000 f827 	bl	cde6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cd98:	4668      	mov	r0, sp
    cd9a:	f001 fc51 	bl	e640 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cd9e:	bd0e      	pop	{r1, r2, r3, pc}

0000cda0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    cda0:	b510      	push	{r4, lr}
    cda2:	4604      	mov	r4, r0
    cda4:	4620      	mov	r0, r4
    cda6:	f7f7 f973 	bl	4090 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    cdaa:	2800      	cmp	r0, #0
    cdac:	d006      	beq.n	cdbc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    cdae:	78a1      	ldrb	r1, [r4, #2]
    cdb0:	7820      	ldrb	r0, [r4, #0]
    cdb2:	f000 f804 	bl	cdbe <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    cdb6:	2800      	cmp	r0, #0
    cdb8:	d0f4      	beq.n	cda4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    cdba:	2001      	movs	r0, #1
    cdbc:	bd10      	pop	{r4, pc}
    cdbe:	b570      	push	{r4, r5, r6, lr}
    cdc0:	460c      	mov	r4, r1
    cdc2:	4605      	mov	r5, r0
    cdc4:	f7f7 f9c0 	bl	4148 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cdc8:	2800      	cmp	r0, #0
    cdca:	d002      	beq.n	cdd2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    cdcc:	2d3e      	cmp	r5, #62	; 0x3e
    cdce:	d001      	beq.n	cdd4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    cdd0:	2001      	movs	r0, #1
    cdd2:	bd70      	pop	{r4, r5, r6, pc}
    cdd4:	2c12      	cmp	r4, #18
    cdd6:	d004      	beq.n	cde2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    cdd8:	4620      	mov	r0, r4
    cdda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdde:	f7f7 b9cf 	b.w	4180 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cde2:	2000      	movs	r0, #0
    cde4:	bd70      	pop	{r4, r5, r6, pc}

0000cde6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cde6:	880a      	ldrh	r2, [r1, #0]
    cde8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cdec:	8002      	strh	r2, [r0, #0]
    cdee:	884a      	ldrh	r2, [r1, #2]
    cdf0:	8042      	strh	r2, [r0, #2]
    cdf2:	784a      	ldrb	r2, [r1, #1]
    cdf4:	0993      	lsrs	r3, r2, #6
    cdf6:	2200      	movs	r2, #0
    cdf8:	7142      	strb	r2, [r0, #5]
    cdfa:	784b      	ldrb	r3, [r1, #1]
    cdfc:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ce00:	b11b      	cbz	r3, ce0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ce02:	2b01      	cmp	r3, #1
    ce04:	d005      	beq.n	ce12 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ce06:	2b02      	cmp	r3, #2
    ce08:	d005      	beq.n	ce16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ce0a:	7102      	strb	r2, [r0, #4]
    ce0c:	1d09      	adds	r1, r1, #4
    ce0e:	6081      	str	r1, [r0, #8]
    ce10:	4770      	bx	lr
    ce12:	2201      	movs	r2, #1
    ce14:	e7f9      	b.n	ce0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ce16:	2202      	movs	r2, #2
    ce18:	e7f7      	b.n	ce0a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ce1a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ce1a:	b510      	push	{r4, lr}
    ce1c:	460c      	mov	r4, r1
    ce1e:	7809      	ldrb	r1, [r1, #0]
    ce20:	7001      	strb	r1, [r0, #0]
    ce22:	7841      	ldrb	r1, [r0, #1]
    ce24:	f021 010f 	bic.w	r1, r1, #15
    ce28:	7041      	strb	r1, [r0, #1]
    ce2a:	8822      	ldrh	r2, [r4, #0]
    ce2c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ce30:	4311      	orrs	r1, r2
    ce32:	7041      	strb	r1, [r0, #1]
    ce34:	78a2      	ldrb	r2, [r4, #2]
    ce36:	7082      	strb	r2, [r0, #2]
    ce38:	8862      	ldrh	r2, [r4, #2]
    ce3a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ce3e:	0a12      	lsrs	r2, r2, #8
    ce40:	70c2      	strb	r2, [r0, #3]
    ce42:	7041      	strb	r1, [r0, #1]
    ce44:	7922      	ldrb	r2, [r4, #4]
    ce46:	f002 0203 	and.w	r2, r2, #3
    ce4a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ce4e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ce52:	7041      	strb	r1, [r0, #1]
    ce54:	7962      	ldrb	r2, [r4, #5]
    ce56:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ce5a:	7041      	strb	r1, [r0, #1]
    ce5c:	68a1      	ldr	r1, [r4, #8]
    ce5e:	1d02      	adds	r2, r0, #4
    ce60:	4291      	cmp	r1, r2
    ce62:	d006      	beq.n	ce72 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    ce64:	8862      	ldrh	r2, [r4, #2]
    ce66:	2afb      	cmp	r2, #251	; 0xfb
    ce68:	d300      	bcc.n	ce6c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    ce6a:	22fb      	movs	r2, #251	; 0xfb
    ce6c:	1d00      	adds	r0, r0, #4
    ce6e:	f7ff fe38 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce72:	78a0      	ldrb	r0, [r4, #2]
    ce74:	1d00      	adds	r0, r0, #4
    ce76:	b2c0      	uxtb	r0, r0
    ce78:	bd10      	pop	{r4, pc}

0000ce7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ce7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce7e:	4604      	mov	r4, r0
    ce80:	f891 c000 	ldrb.w	ip, [r1]
    ce84:	2000      	movs	r0, #0
    ce86:	270c      	movs	r7, #12
    ce88:	223e      	movs	r2, #62	; 0x3e
    ce8a:	2612      	movs	r6, #18
    ce8c:	25ff      	movs	r5, #255	; 0xff
    ce8e:	f04f 0b14 	mov.w	fp, #20
    ce92:	f04f 0e13 	mov.w	lr, #19
    ce96:	f04f 0a05 	mov.w	sl, #5
    ce9a:	f104 030d 	add.w	r3, r4, #13
    ce9e:	f04f 0911 	mov.w	r9, #17
    cea2:	f1bc 0f20 	cmp.w	ip, #32
    cea6:	d272      	bcs.n	cf8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cea8:	e8df f00c 	tbb	[pc, ip]
    ceac:	29271071 	.word	0x29271071
    ceb0:	a46dfc2e 	.word	0xa46dfc2e
    ceb4:	fbdac0ae 	.word	0xfbdac0ae
    ceb8:	f7f8f9fa 	.word	0xf7f8f9fa
    cebc:	507171f6 	.word	0x507171f6
    cec0:	f3f4f572 	.word	0xf3f4f572
    cec4:	eff0f1f2 	.word	0xeff0f1f2
    cec8:	ec71edee 	.word	0xec71edee
    cecc:	7027      	strb	r7, [r4, #0]
    cece:	7908      	ldrb	r0, [r1, #4]
    ced0:	70a0      	strb	r0, [r4, #2]
    ced2:	7948      	ldrb	r0, [r1, #5]
    ced4:	70e0      	strb	r0, [r4, #3]
    ced6:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ceda:	0a00      	lsrs	r0, r0, #8
    cedc:	7120      	strb	r0, [r4, #4]
    cede:	79c8      	ldrb	r0, [r1, #7]
    cee0:	7160      	strb	r0, [r4, #5]
    cee2:	7a08      	ldrb	r0, [r1, #8]
    cee4:	71a0      	strb	r0, [r4, #6]
    cee6:	8908      	ldrh	r0, [r1, #8]
    cee8:	0a00      	lsrs	r0, r0, #8
    ceea:	71e0      	strb	r0, [r4, #7]
    ceec:	7a88      	ldrb	r0, [r1, #10]
    ceee:	7220      	strb	r0, [r4, #8]
    cef0:	8948      	ldrh	r0, [r1, #10]
    cef2:	0a00      	lsrs	r0, r0, #8
    cef4:	7260      	strb	r0, [r4, #9]
    cef6:	2008      	movs	r0, #8
    cef8:	e154      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cefa:	2010      	movs	r0, #16
    cefc:	e000      	b.n	cf00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    cefe:	201a      	movs	r0, #26
    cf00:	7020      	strb	r0, [r4, #0]
    cf02:	7908      	ldrb	r0, [r1, #4]
    cf04:	70a0      	strb	r0, [r4, #2]
    cf06:	e154      	b.n	d1b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    cf08:	7022      	strb	r2, [r4, #0]
    cf0a:	2002      	movs	r0, #2
    cf0c:	70a0      	strb	r0, [r4, #2]
    cf0e:	7908      	ldrb	r0, [r1, #4]
    cf10:	70e0      	strb	r0, [r4, #3]
    cf12:	7b88      	ldrb	r0, [r1, #14]
    cf14:	7120      	strb	r0, [r4, #4]
    cf16:	7948      	ldrb	r0, [r1, #5]
    cf18:	7160      	strb	r0, [r4, #5]
    cf1a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cf1e:	f8c4 0006 	str.w	r0, [r4, #6]
    cf22:	8948      	ldrh	r0, [r1, #10]
    cf24:	8160      	strh	r0, [r4, #10]
    cf26:	7b08      	ldrb	r0, [r1, #12]
    cf28:	7320      	strb	r0, [r4, #12]
    cf2a:	7b0e      	ldrb	r6, [r1, #12]
    cf2c:	1d0d      	adds	r5, r1, #4
    cf2e:	2e1f      	cmp	r6, #31
    cf30:	d300      	bcc.n	cf34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    cf32:	261f      	movs	r6, #31
    cf34:	4618      	mov	r0, r3
    cf36:	4632      	mov	r2, r6
    cf38:	f105 010b 	add.w	r1, r5, #11
    cf3c:	f7ff fdd1 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf40:	360d      	adds	r6, #13
    cf42:	7a69      	ldrb	r1, [r5, #9]
    cf44:	55a1      	strb	r1, [r4, r6]
    cf46:	1e76      	subs	r6, r6, #1
    cf48:	b2f0      	uxtb	r0, r6
    cf4a:	e129      	b.n	d1a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cf4c:	7022      	strb	r2, [r4, #0]
    cf4e:	200b      	movs	r0, #11
    cf50:	70a0      	strb	r0, [r4, #2]
    cf52:	7908      	ldrb	r0, [r1, #4]
    cf54:	70e0      	strb	r0, [r4, #3]
    cf56:	7948      	ldrb	r0, [r1, #5]
    cf58:	7120      	strb	r0, [r4, #4]
    cf5a:	7988      	ldrb	r0, [r1, #6]
    cf5c:	7160      	strb	r0, [r4, #5]
    cf5e:	f8d1 0007 	ldr.w	r0, [r1, #7]
    cf62:	f8c4 0006 	str.w	r0, [r4, #6]
    cf66:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    cf6a:	8160      	strh	r0, [r4, #10]
    cf6c:	7b48      	ldrb	r0, [r1, #13]
    cf6e:	7320      	strb	r0, [r4, #12]
    cf70:	f8d1 000e 	ldr.w	r0, [r1, #14]
    cf74:	f8c4 000d 	str.w	r0, [r4, #13]
    cf78:	8a48      	ldrh	r0, [r1, #18]
    cf7a:	f8a4 0011 	strh.w	r0, [r4, #17]
    cf7e:	7d08      	ldrb	r0, [r1, #20]
    cf80:	74e0      	strb	r0, [r4, #19]
    cf82:	4630      	mov	r0, r6
    cf84:	e10e      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cf86:	4620      	mov	r0, r4
    cf88:	f000 f98d 	bl	d2a6 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cf8c:	e108      	b.n	d1a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cf8e:	e10b      	b.n	d1a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cf90:	7022      	strb	r2, [r4, #0]
    cf92:	200a      	movs	r0, #10
    cf94:	70a0      	strb	r0, [r4, #2]
    cf96:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cf9a:	70e0      	strb	r0, [r4, #3]
    cf9c:	7888      	ldrb	r0, [r1, #2]
    cf9e:	7120      	strb	r0, [r4, #4]
    cfa0:	8848      	ldrh	r0, [r1, #2]
    cfa2:	0a00      	lsrs	r0, r0, #8
    cfa4:	7160      	strb	r0, [r4, #5]
    cfa6:	7908      	ldrb	r0, [r1, #4]
    cfa8:	71a0      	strb	r0, [r4, #6]
    cfaa:	7948      	ldrb	r0, [r1, #5]
    cfac:	71e0      	strb	r0, [r4, #7]
    cfae:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cfb2:	60a0      	str	r0, [r4, #8]
    cfb4:	8948      	ldrh	r0, [r1, #10]
    cfb6:	81a0      	strh	r0, [r4, #12]
    cfb8:	68c8      	ldr	r0, [r1, #12]
    cfba:	f8c4 000e 	str.w	r0, [r4, #14]
    cfbe:	8a08      	ldrh	r0, [r1, #16]
    cfc0:	8260      	strh	r0, [r4, #18]
    cfc2:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cfc6:	6160      	str	r0, [r4, #20]
    cfc8:	8ac8      	ldrh	r0, [r1, #22]
    cfca:	8320      	strh	r0, [r4, #24]
    cfcc:	7e08      	ldrb	r0, [r1, #24]
    cfce:	76a0      	strb	r0, [r4, #26]
    cfd0:	8b08      	ldrh	r0, [r1, #24]
    cfd2:	0a00      	lsrs	r0, r0, #8
    cfd4:	76e0      	strb	r0, [r4, #27]
    cfd6:	7e88      	ldrb	r0, [r1, #26]
    cfd8:	7720      	strb	r0, [r4, #28]
    cfda:	8b48      	ldrh	r0, [r1, #26]
    cfdc:	0a00      	lsrs	r0, r0, #8
    cfde:	7760      	strb	r0, [r4, #29]
    cfe0:	7f08      	ldrb	r0, [r1, #28]
    cfe2:	77a0      	strb	r0, [r4, #30]
    cfe4:	8b88      	ldrh	r0, [r1, #28]
    cfe6:	0a00      	lsrs	r0, r0, #8
    cfe8:	77e0      	strb	r0, [r4, #31]
    cfea:	7f88      	ldrb	r0, [r1, #30]
    cfec:	f884 0020 	strb.w	r0, [r4, #32]
    cff0:	201f      	movs	r0, #31
    cff2:	e0d7      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cff4:	7022      	strb	r2, [r4, #0]
    cff6:	f884 b002 	strb.w	fp, [r4, #2]
    cffa:	7908      	ldrb	r0, [r1, #4]
    cffc:	70e0      	strb	r0, [r4, #3]
    cffe:	8888      	ldrh	r0, [r1, #4]
    d000:	0a00      	lsrs	r0, r0, #8
    d002:	7120      	strb	r0, [r4, #4]
    d004:	7988      	ldrb	r0, [r1, #6]
    d006:	e0ed      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d008:	7022      	strb	r2, [r4, #0]
    d00a:	2004      	movs	r0, #4
    d00c:	70a0      	strb	r0, [r4, #2]
    d00e:	7908      	ldrb	r0, [r1, #4]
    d010:	70e0      	strb	r0, [r4, #3]
    d012:	7988      	ldrb	r0, [r1, #6]
    d014:	7120      	strb	r0, [r4, #4]
    d016:	88c8      	ldrh	r0, [r1, #6]
    d018:	0a00      	lsrs	r0, r0, #8
    d01a:	7160      	strb	r0, [r4, #5]
    d01c:	6888      	ldr	r0, [r1, #8]
    d01e:	f8c4 0006 	str.w	r0, [r4, #6]
    d022:	68c8      	ldr	r0, [r1, #12]
    d024:	f8c4 000a 	str.w	r0, [r4, #10]
    d028:	200c      	movs	r0, #12
    d02a:	e0bb      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d02c:	7022      	strb	r2, [r4, #0]
    d02e:	2003      	movs	r0, #3
    d030:	70a0      	strb	r0, [r4, #2]
    d032:	7908      	ldrb	r0, [r1, #4]
    d034:	70e0      	strb	r0, [r4, #3]
    d036:	7988      	ldrb	r0, [r1, #6]
    d038:	7120      	strb	r0, [r4, #4]
    d03a:	88c8      	ldrh	r0, [r1, #6]
    d03c:	0a00      	lsrs	r0, r0, #8
    d03e:	7160      	strb	r0, [r4, #5]
    d040:	7a08      	ldrb	r0, [r1, #8]
    d042:	71a0      	strb	r0, [r4, #6]
    d044:	8908      	ldrh	r0, [r1, #8]
    d046:	0a00      	lsrs	r0, r0, #8
    d048:	71e0      	strb	r0, [r4, #7]
    d04a:	7a88      	ldrb	r0, [r1, #10]
    d04c:	7220      	strb	r0, [r4, #8]
    d04e:	8948      	ldrh	r0, [r1, #10]
    d050:	0a00      	lsrs	r0, r0, #8
    d052:	7260      	strb	r0, [r4, #9]
    d054:	7b08      	ldrb	r0, [r1, #12]
    d056:	72a0      	strb	r0, [r4, #10]
    d058:	8988      	ldrh	r0, [r1, #12]
    d05a:	0a00      	lsrs	r0, r0, #8
    d05c:	72e0      	strb	r0, [r4, #11]
    d05e:	e120      	b.n	d2a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    d060:	7022      	strb	r2, [r4, #0]
    d062:	f884 a002 	strb.w	sl, [r4, #2]
    d066:	7908      	ldrb	r0, [r1, #4]
    d068:	70e0      	strb	r0, [r4, #3]
    d06a:	8888      	ldrh	r0, [r1, #4]
    d06c:	0a00      	lsrs	r0, r0, #8
    d06e:	7120      	strb	r0, [r4, #4]
    d070:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d074:	f8c4 0005 	str.w	r0, [r4, #5]
    d078:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d07c:	f8c4 0009 	str.w	r0, [r4, #9]
    d080:	89c8      	ldrh	r0, [r1, #14]
    d082:	e010      	b.n	d0a6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    d084:	e0fa      	b.n	d27c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    d086:	e0ce      	b.n	d226 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d088:	e0af      	b.n	d1ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    d08a:	e0da      	b.n	d242 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    d08c:	e0e8      	b.n	d260 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    d08e:	e0a1      	b.n	d1d4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d090:	e08c      	b.n	d1ac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    d092:	e090      	b.n	d1b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    d094:	e033      	b.n	d0fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d096:	e02f      	b.n	d0f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d098:	e043      	b.n	d122 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    d09a:	e03d      	b.n	d118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    d09c:	e021      	b.n	d0e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    d09e:	e015      	b.n	d0cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    d0a0:	e008      	b.n	d0b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    d0a2:	e004      	b.n	d0ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d0a4:	e046      	b.n	d134 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    d0a6:	f8a4 000d 	strh.w	r0, [r4, #13]
    d0aa:	200d      	movs	r0, #13
    d0ac:	e07a      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d0ae:	f884 9000 	strb.w	r9, [r4]
    d0b2:	e038      	b.n	d126 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    d0b4:	f884 a000 	strb.w	sl, [r4]
    d0b8:	7908      	ldrb	r0, [r1, #4]
    d0ba:	70a0      	strb	r0, [r4, #2]
    d0bc:	7948      	ldrb	r0, [r1, #5]
    d0be:	70e0      	strb	r0, [r4, #3]
    d0c0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d0c4:	0a00      	lsrs	r0, r0, #8
    d0c6:	7120      	strb	r0, [r4, #4]
    d0c8:	79c8      	ldrb	r0, [r1, #7]
    d0ca:	e08b      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d0cc:	2008      	movs	r0, #8
    d0ce:	7020      	strb	r0, [r4, #0]
    d0d0:	7908      	ldrb	r0, [r1, #4]
    d0d2:	70a0      	strb	r0, [r4, #2]
    d0d4:	7988      	ldrb	r0, [r1, #6]
    d0d6:	70e0      	strb	r0, [r4, #3]
    d0d8:	88c8      	ldrh	r0, [r1, #6]
    d0da:	0a00      	lsrs	r0, r0, #8
    d0dc:	7120      	strb	r0, [r4, #4]
    d0de:	7a08      	ldrb	r0, [r1, #8]
    d0e0:	e080      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d0e2:	2030      	movs	r0, #48	; 0x30
    d0e4:	7020      	strb	r0, [r4, #0]
    d0e6:	7908      	ldrb	r0, [r1, #4]
    d0e8:	70a0      	strb	r0, [r4, #2]
    d0ea:	7988      	ldrb	r0, [r1, #6]
    d0ec:	70e0      	strb	r0, [r4, #3]
    d0ee:	88c8      	ldrh	r0, [r1, #6]
    d0f0:	0a00      	lsrs	r0, r0, #8
    d0f2:	7120      	strb	r0, [r4, #4]
    d0f4:	2003      	movs	r0, #3
    d0f6:	e055      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d0f8:	7022      	strb	r2, [r4, #0]
    d0fa:	2007      	movs	r0, #7
    d0fc:	e077      	b.n	d1ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d0fe:	7022      	strb	r2, [r4, #0]
    d100:	70a7      	strb	r7, [r4, #2]
    d102:	7908      	ldrb	r0, [r1, #4]
    d104:	70e0      	strb	r0, [r4, #3]
    d106:	7988      	ldrb	r0, [r1, #6]
    d108:	7120      	strb	r0, [r4, #4]
    d10a:	88c8      	ldrh	r0, [r1, #6]
    d10c:	0a00      	lsrs	r0, r0, #8
    d10e:	7160      	strb	r0, [r4, #5]
    d110:	7a08      	ldrb	r0, [r1, #8]
    d112:	71a0      	strb	r0, [r4, #6]
    d114:	7a48      	ldrb	r0, [r1, #9]
    d116:	e05a      	b.n	d1ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    d118:	4620      	mov	r0, r4
    d11a:	1d09      	adds	r1, r1, #4
    d11c:	f7f6 ffe6 	bl	40ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    d120:	e03e      	b.n	d1a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d122:	2057      	movs	r0, #87	; 0x57
    d124:	7020      	strb	r0, [r4, #0]
    d126:	7908      	ldrb	r0, [r1, #4]
    d128:	70a0      	strb	r0, [r4, #2]
    d12a:	8888      	ldrh	r0, [r1, #4]
    d12c:	0a00      	lsrs	r0, r0, #8
    d12e:	70e0      	strb	r0, [r4, #3]
    d130:	2002      	movs	r0, #2
    d132:	e037      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d134:	7022      	strb	r2, [r4, #0]
    d136:	220d      	movs	r2, #13
    d138:	70a2      	strb	r2, [r4, #2]
    d13a:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d13e:	70e2      	strb	r2, [r4, #3]
    d140:	894a      	ldrh	r2, [r1, #10]
    d142:	80a2      	strh	r2, [r4, #4]
    d144:	784a      	ldrb	r2, [r1, #1]
    d146:	71a2      	strb	r2, [r4, #6]
    d148:	f8d1 2002 	ldr.w	r2, [r1, #2]
    d14c:	f8c4 2007 	str.w	r2, [r4, #7]
    d150:	88ca      	ldrh	r2, [r1, #6]
    d152:	f8a4 200b 	strh.w	r2, [r4, #11]
    d156:	7b0a      	ldrb	r2, [r1, #12]
    d158:	4620      	mov	r0, r4
    d15a:	7362      	strb	r2, [r4, #13]
    d15c:	7b4a      	ldrb	r2, [r1, #13]
    d15e:	7382      	strb	r2, [r0, #14]
    d160:	7b8a      	ldrb	r2, [r1, #14]
    d162:	73c2      	strb	r2, [r0, #15]
    d164:	7e8a      	ldrb	r2, [r1, #26]
    d166:	7402      	strb	r2, [r0, #16]
    d168:	7a4a      	ldrb	r2, [r1, #9]
    d16a:	7442      	strb	r2, [r0, #17]
    d16c:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d170:	f8ad 2000 	strh.w	r2, [sp]
    d174:	8242      	strh	r2, [r0, #18]
    d176:	7cca      	ldrb	r2, [r1, #19]
    d178:	7502      	strb	r2, [r0, #20]
    d17a:	694a      	ldr	r2, [r1, #20]
    d17c:	f8c0 2015 	str.w	r2, [r0, #21]
    d180:	8b0a      	ldrh	r2, [r1, #24]
    d182:	f8a0 2019 	strh.w	r2, [r0, #25]
    d186:	7a0a      	ldrb	r2, [r1, #8]
    d188:	76c2      	strb	r2, [r0, #27]
    d18a:	7a0d      	ldrb	r5, [r1, #8]
    d18c:	2de5      	cmp	r5, #229	; 0xe5
    d18e:	d300      	bcc.n	d192 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    d190:	25e5      	movs	r5, #229	; 0xe5
    d192:	462a      	mov	r2, r5
    d194:	301c      	adds	r0, #28
    d196:	311c      	adds	r1, #28
    d198:	f7ff fca3 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d19c:	351a      	adds	r5, #26
    d19e:	b2e8      	uxtb	r0, r5
    d1a0:	2800      	cmp	r0, #0
    d1a2:	d001      	beq.n	d1a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d1a4:	7060      	strb	r0, [r4, #1]
    d1a6:	1c80      	adds	r0, r0, #2
    d1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1ac:	7022      	strb	r2, [r4, #0]
    d1ae:	f884 9002 	strb.w	r9, [r4, #2]
    d1b2:	2001      	movs	r0, #1
    d1b4:	e7f6      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d1b6:	7022      	strb	r2, [r4, #0]
    d1b8:	70a6      	strb	r6, [r4, #2]
    d1ba:	7908      	ldrb	r0, [r1, #4]
    d1bc:	70e0      	strb	r0, [r4, #3]
    d1be:	7948      	ldrb	r0, [r1, #5]
    d1c0:	7120      	strb	r0, [r4, #4]
    d1c2:	7988      	ldrb	r0, [r1, #6]
    d1c4:	7160      	strb	r0, [r4, #5]
    d1c6:	88c8      	ldrh	r0, [r1, #6]
    d1c8:	0a00      	lsrs	r0, r0, #8
    d1ca:	71a0      	strb	r0, [r4, #6]
    d1cc:	7a08      	ldrb	r0, [r1, #8]
    d1ce:	71e0      	strb	r0, [r4, #7]
    d1d0:	2006      	movs	r0, #6
    d1d2:	e7e7      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d1d4:	7025      	strb	r5, [r4, #0]
    d1d6:	20a1      	movs	r0, #161	; 0xa1
    d1d8:	70a0      	strb	r0, [r4, #2]
    d1da:	7908      	ldrb	r0, [r1, #4]
    d1dc:	70e0      	strb	r0, [r4, #3]
    d1de:	7948      	ldrb	r0, [r1, #5]
    d1e0:	7120      	strb	r0, [r4, #4]
    d1e2:	2000      	movs	r0, #0
    d1e4:	7160      	strb	r0, [r4, #5]
    d1e6:	2004      	movs	r0, #4
    d1e8:	e7dc      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d1ea:	7025      	strb	r5, [r4, #0]
    d1ec:	20a2      	movs	r0, #162	; 0xa2
    d1ee:	70a0      	strb	r0, [r4, #2]
    d1f0:	7908      	ldrb	r0, [r1, #4]
    d1f2:	70e0      	strb	r0, [r4, #3]
    d1f4:	8888      	ldrh	r0, [r1, #4]
    d1f6:	0a00      	lsrs	r0, r0, #8
    d1f8:	7120      	strb	r0, [r4, #4]
    d1fa:	7988      	ldrb	r0, [r1, #6]
    d1fc:	7160      	strb	r0, [r4, #5]
    d1fe:	88c8      	ldrh	r0, [r1, #6]
    d200:	0a00      	lsrs	r0, r0, #8
    d202:	71a0      	strb	r0, [r4, #6]
    d204:	7a08      	ldrb	r0, [r1, #8]
    d206:	71e0      	strb	r0, [r4, #7]
    d208:	8908      	ldrh	r0, [r1, #8]
    d20a:	0a00      	lsrs	r0, r0, #8
    d20c:	7220      	strb	r0, [r4, #8]
    d20e:	7a88      	ldrb	r0, [r1, #10]
    d210:	7260      	strb	r0, [r4, #9]
    d212:	8948      	ldrh	r0, [r1, #10]
    d214:	0a00      	lsrs	r0, r0, #8
    d216:	72a0      	strb	r0, [r4, #10]
    d218:	7b08      	ldrb	r0, [r1, #12]
    d21a:	72e0      	strb	r0, [r4, #11]
    d21c:	8988      	ldrh	r0, [r1, #12]
    d21e:	0a00      	lsrs	r0, r0, #8
    d220:	7320      	strb	r0, [r4, #12]
    d222:	200b      	movs	r0, #11
    d224:	e7be      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d226:	7025      	strb	r5, [r4, #0]
    d228:	20a3      	movs	r0, #163	; 0xa3
    d22a:	70a0      	strb	r0, [r4, #2]
    d22c:	7908      	ldrb	r0, [r1, #4]
    d22e:	70e0      	strb	r0, [r4, #3]
    d230:	8888      	ldrh	r0, [r1, #4]
    d232:	0a00      	lsrs	r0, r0, #8
    d234:	7120      	strb	r0, [r4, #4]
    d236:	7988      	ldrb	r0, [r1, #6]
    d238:	7160      	strb	r0, [r4, #5]
    d23a:	79c8      	ldrb	r0, [r1, #7]
    d23c:	71a0      	strb	r0, [r4, #6]
    d23e:	2005      	movs	r0, #5
    d240:	e7b0      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d242:	7022      	strb	r2, [r4, #0]
    d244:	f884 e002 	strb.w	lr, [r4, #2]
    d248:	7908      	ldrb	r0, [r1, #4]
    d24a:	70e0      	strb	r0, [r4, #3]
    d24c:	7948      	ldrb	r0, [r1, #5]
    d24e:	7120      	strb	r0, [r4, #4]
    d250:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d254:	f8c4 0005 	str.w	r0, [r4, #5]
    d258:	8948      	ldrh	r0, [r1, #10]
    d25a:	f8a4 0009 	strh.w	r0, [r4, #9]
    d25e:	e020      	b.n	d2a2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    d260:	7025      	strb	r5, [r4, #0]
    d262:	20a4      	movs	r0, #164	; 0xa4
    d264:	70a0      	strb	r0, [r4, #2]
    d266:	7908      	ldrb	r0, [r1, #4]
    d268:	70e0      	strb	r0, [r4, #3]
    d26a:	8888      	ldrh	r0, [r1, #4]
    d26c:	0a00      	lsrs	r0, r0, #8
    d26e:	7120      	strb	r0, [r4, #4]
    d270:	7988      	ldrb	r0, [r1, #6]
    d272:	7160      	strb	r0, [r4, #5]
    d274:	79c8      	ldrb	r0, [r1, #7]
    d276:	71a0      	strb	r0, [r4, #6]
    d278:	2007      	movs	r0, #7
    d27a:	e793      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d27c:	7025      	strb	r5, [r4, #0]
    d27e:	2080      	movs	r0, #128	; 0x80
    d280:	70a0      	strb	r0, [r4, #2]
    d282:	888a      	ldrh	r2, [r1, #4]
    d284:	f8a4 2003 	strh.w	r2, [r4, #3]
    d288:	88ca      	ldrh	r2, [r1, #6]
    d28a:	f8a4 2005 	strh.w	r2, [r4, #5]
    d28e:	7a0a      	ldrb	r2, [r1, #8]
    d290:	71e2      	strb	r2, [r4, #7]
    d292:	7a4a      	ldrb	r2, [r1, #9]
    d294:	8122      	strh	r2, [r4, #8]
    d296:	7a8a      	ldrb	r2, [r1, #10]
    d298:	72a2      	strb	r2, [r4, #10]
    d29a:	7ac9      	ldrb	r1, [r1, #11]
    d29c:	f001 0101 	and.w	r1, r1, #1
    d2a0:	72e1      	strb	r1, [r4, #11]
    d2a2:	200a      	movs	r0, #10
    d2a4:	e77e      	b.n	d1a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000d2a6 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d2a6:	223e      	movs	r2, #62	; 0x3e
    d2a8:	7002      	strb	r2, [r0, #0]
    d2aa:	2201      	movs	r2, #1
    d2ac:	7082      	strb	r2, [r0, #2]
    d2ae:	790a      	ldrb	r2, [r1, #4]
    d2b0:	70c2      	strb	r2, [r0, #3]
    d2b2:	798a      	ldrb	r2, [r1, #6]
    d2b4:	7102      	strb	r2, [r0, #4]
    d2b6:	88ca      	ldrh	r2, [r1, #6]
    d2b8:	0a12      	lsrs	r2, r2, #8
    d2ba:	7142      	strb	r2, [r0, #5]
    d2bc:	7a0a      	ldrb	r2, [r1, #8]
    d2be:	7182      	strb	r2, [r0, #6]
    d2c0:	7a4a      	ldrb	r2, [r1, #9]
    d2c2:	71c2      	strb	r2, [r0, #7]
    d2c4:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d2c8:	6082      	str	r2, [r0, #8]
    d2ca:	89ca      	ldrh	r2, [r1, #14]
    d2cc:	8182      	strh	r2, [r0, #12]
    d2ce:	7c0a      	ldrb	r2, [r1, #16]
    d2d0:	7382      	strb	r2, [r0, #14]
    d2d2:	8a0a      	ldrh	r2, [r1, #16]
    d2d4:	0a12      	lsrs	r2, r2, #8
    d2d6:	73c2      	strb	r2, [r0, #15]
    d2d8:	7c8a      	ldrb	r2, [r1, #18]
    d2da:	7402      	strb	r2, [r0, #16]
    d2dc:	8a4a      	ldrh	r2, [r1, #18]
    d2de:	0a12      	lsrs	r2, r2, #8
    d2e0:	7442      	strb	r2, [r0, #17]
    d2e2:	7d0a      	ldrb	r2, [r1, #20]
    d2e4:	7482      	strb	r2, [r0, #18]
    d2e6:	8a8a      	ldrh	r2, [r1, #20]
    d2e8:	0a12      	lsrs	r2, r2, #8
    d2ea:	74c2      	strb	r2, [r0, #19]
    d2ec:	7d89      	ldrb	r1, [r1, #22]
    d2ee:	7501      	strb	r1, [r0, #20]
    d2f0:	2013      	movs	r0, #19
    d2f2:	4770      	bx	lr

0000d2f4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d2f4:	223e      	movs	r2, #62	; 0x3e
    d2f6:	7002      	strb	r2, [r0, #0]
    d2f8:	2201      	movs	r2, #1
    d2fa:	7082      	strb	r2, [r0, #2]
    d2fc:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d300:	70c2      	strb	r2, [r0, #3]
    d302:	788a      	ldrb	r2, [r1, #2]
    d304:	7102      	strb	r2, [r0, #4]
    d306:	884a      	ldrh	r2, [r1, #2]
    d308:	0a12      	lsrs	r2, r2, #8
    d30a:	7142      	strb	r2, [r0, #5]
    d30c:	790a      	ldrb	r2, [r1, #4]
    d30e:	7182      	strb	r2, [r0, #6]
    d310:	794a      	ldrb	r2, [r1, #5]
    d312:	71c2      	strb	r2, [r0, #7]
    d314:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d318:	6082      	str	r2, [r0, #8]
    d31a:	894a      	ldrh	r2, [r1, #10]
    d31c:	8182      	strh	r2, [r0, #12]
    d31e:	7e0a      	ldrb	r2, [r1, #24]
    d320:	7382      	strb	r2, [r0, #14]
    d322:	8b0a      	ldrh	r2, [r1, #24]
    d324:	0a12      	lsrs	r2, r2, #8
    d326:	73c2      	strb	r2, [r0, #15]
    d328:	7e8a      	ldrb	r2, [r1, #26]
    d32a:	7402      	strb	r2, [r0, #16]
    d32c:	8b4a      	ldrh	r2, [r1, #26]
    d32e:	0a12      	lsrs	r2, r2, #8
    d330:	7442      	strb	r2, [r0, #17]
    d332:	7f0a      	ldrb	r2, [r1, #28]
    d334:	7482      	strb	r2, [r0, #18]
    d336:	8b8a      	ldrh	r2, [r1, #28]
    d338:	0a12      	lsrs	r2, r2, #8
    d33a:	74c2      	strb	r2, [r0, #19]
    d33c:	7f89      	ldrb	r1, [r1, #30]
    d33e:	7501      	strb	r1, [r0, #20]
    d340:	2113      	movs	r1, #19
    d342:	7041      	strb	r1, [r0, #1]
    d344:	4608      	mov	r0, r1
    d346:	4770      	bx	lr

0000d348 <sdc_hci_data_get>:
    d348:	b510      	push	{r4, lr}
    d34a:	b120      	cbz	r0, d356 <sdc_hci_data_get+0xe>
    d34c:	f7ff fd11 	bl	cd72 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d350:	b120      	cbz	r0, d35c <sdc_hci_data_get+0x14>
    d352:	2000      	movs	r0, #0
    d354:	bd10      	pop	{r4, pc}
    d356:	f06f 0015 	mvn.w	r0, #21
    d35a:	bd10      	pop	{r4, pc}
    d35c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d360:	bd10      	pop	{r4, pc}

0000d362 <sdc_hci_data_put>:
    d362:	b510      	push	{r4, lr}
    d364:	f06f 0415 	mvn.w	r4, #21
    d368:	b120      	cbz	r0, d374 <sdc_hci_data_put+0x12>
    d36a:	f7ff fd10 	bl	cd8e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d36e:	b108      	cbz	r0, d374 <sdc_hci_data_put+0x12>
    d370:	2000      	movs	r0, #0
    d372:	bd10      	pop	{r4, pc}
    d374:	4620      	mov	r0, r4
    d376:	bd10      	pop	{r4, pc}

0000d378 <sdc_hci_evt_get>:
    d378:	b510      	push	{r4, lr}
    d37a:	b120      	cbz	r0, d386 <sdc_hci_evt_get+0xe>
    d37c:	f7ff fd10 	bl	cda0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d380:	b120      	cbz	r0, d38c <sdc_hci_evt_get+0x14>
    d382:	2000      	movs	r0, #0
    d384:	bd10      	pop	{r4, pc}
    d386:	f06f 0015 	mvn.w	r0, #21
    d38a:	bd10      	pop	{r4, pc}
    d38c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d390:	bd10      	pop	{r4, pc}

0000d392 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d392:	f002 b98e 	b.w	f6b2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d396 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d396:	f002 b9cd 	b.w	f734 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d39a <sdc_hci_cmd_cb_set_event_mask>:
    d39a:	b510      	push	{r4, lr}
    d39c:	f7f6 ff04 	bl	41a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d3a0:	2000      	movs	r0, #0
    d3a2:	bd10      	pop	{r4, pc}

0000d3a4 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d3a4:	b510      	push	{r4, lr}
    d3a6:	f7f6 ff0d 	bl	41c4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d3aa:	2000      	movs	r0, #0
    d3ac:	bd10      	pop	{r4, pc}

0000d3ae <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d3ae:	f002 b9dd 	b.w	f76c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d3b2 <sdc_hci_cmd_vs_conn_event_extend>:
    d3b2:	b508      	push	{r3, lr}
    d3b4:	7800      	ldrb	r0, [r0, #0]
    d3b6:	f88d 0000 	strb.w	r0, [sp]
    d3ba:	4668      	mov	r0, sp
    d3bc:	f002 f94b 	bl	f656 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d3c0:	bd08      	pop	{r3, pc}

0000d3c2 <sdc_hci_cmd_vs_conn_update>:
    d3c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d3c4:	2100      	movs	r1, #0
    d3c6:	9100      	str	r1, [sp, #0]
    d3c8:	9101      	str	r1, [sp, #4]
    d3ca:	9102      	str	r1, [sp, #8]
    d3cc:	9103      	str	r1, [sp, #12]
    d3ce:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d3d2:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d3d6:	4291      	cmp	r1, r2
    d3d8:	d304      	bcc.n	d3e4 <sdc_hci_cmd_vs_conn_update+0x22>
    d3da:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d3de:	fbb1 f1f2 	udiv	r1, r1, r2
    d3e2:	e005      	b.n	d3f0 <sdc_hci_cmd_vs_conn_update+0x2e>
    d3e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d3e8:	fbb1 f1f2 	udiv	r1, r1, r2
    d3ec:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d3f0:	8802      	ldrh	r2, [r0, #0]
    d3f2:	b289      	uxth	r1, r1
    d3f4:	f8ad 2000 	strh.w	r2, [sp]
    d3f8:	f8ad 1002 	strh.w	r1, [sp, #2]
    d3fc:	f8ad 1004 	strh.w	r1, [sp, #4]
    d400:	88c1      	ldrh	r1, [r0, #6]
    d402:	f8ad 1006 	strh.w	r1, [sp, #6]
    d406:	8900      	ldrh	r0, [r0, #8]
    d408:	f8ad 0008 	strh.w	r0, [sp, #8]
    d40c:	4668      	mov	r0, sp
    d40e:	f001 fed9 	bl	f1c4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d412:	b004      	add	sp, #16
    d414:	bd10      	pop	{r4, pc}

0000d416 <sdc_hci_cmd_vs_event_length_set>:
    d416:	f7fd bc17 	b.w	ac48 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d41a <sdc_hci_cmd_vs_llpm_mode_set>:
    d41a:	2001      	movs	r0, #1
    d41c:	4770      	bx	lr

0000d41e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d41e:	7800      	ldrb	r0, [r0, #0]
    d420:	b100      	cbz	r0, d424 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d422:	2001      	movs	r0, #1
    d424:	f002 b8ef 	b.w	f606 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d428 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d428:	b570      	push	{r4, r5, r6, lr}
    d42a:	4605      	mov	r5, r0
    d42c:	2210      	movs	r2, #16
    d42e:	2100      	movs	r1, #0
    d430:	f7ff fbd1 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d434:	2210      	movs	r2, #16
    d436:	2100      	movs	r1, #0
    d438:	f105 0010 	add.w	r0, r5, #16
    d43c:	f7ff fbcb 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d440:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d444:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d448:	1c40      	adds	r0, r0, #1
    d44a:	d10b      	bne.n	d464 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d44c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d450:	1c40      	adds	r0, r0, #1
    d452:	d107      	bne.n	d464 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d454:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d458:	1c40      	adds	r0, r0, #1
    d45a:	d103      	bne.n	d464 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d45c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d460:	1c40      	adds	r0, r0, #1
    d462:	d00b      	beq.n	d47c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d464:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d468:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d46c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d470:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d474:	612a      	str	r2, [r5, #16]
    d476:	6168      	str	r0, [r5, #20]
    d478:	61a9      	str	r1, [r5, #24]
    d47a:	61eb      	str	r3, [r5, #28]
    d47c:	2000      	movs	r0, #0
    d47e:	f7f7 fb8f 	bl	4ba0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d482:	b918      	cbnz	r0, d48c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d484:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d488:	07c0      	lsls	r0, r0, #31
    d48a:	d118      	bne.n	d4be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d48c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d490:	1c40      	adds	r0, r0, #1
    d492:	d10b      	bne.n	d4ac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d494:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d498:	1c40      	adds	r0, r0, #1
    d49a:	d107      	bne.n	d4ac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d49c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d4a0:	1c40      	adds	r0, r0, #1
    d4a2:	d103      	bne.n	d4ac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d4a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d4a8:	1c40      	adds	r0, r0, #1
    d4aa:	d008      	beq.n	d4be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d4ac:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d4b0:	6861      	ldr	r1, [r4, #4]
    d4b2:	68a2      	ldr	r2, [r4, #8]
    d4b4:	68e3      	ldr	r3, [r4, #12]
    d4b6:	6028      	str	r0, [r5, #0]
    d4b8:	6069      	str	r1, [r5, #4]
    d4ba:	60aa      	str	r2, [r5, #8]
    d4bc:	60eb      	str	r3, [r5, #12]
    d4be:	2000      	movs	r0, #0
    d4c0:	bd70      	pop	{r4, r5, r6, pc}

0000d4c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d4c2:	b538      	push	{r3, r4, r5, lr}
    d4c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d4c8:	4604      	mov	r4, r0
    d4ca:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d4ce:	1c40      	adds	r0, r0, #1
    d4d0:	d105      	bne.n	d4de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d4d2:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d4d6:	43c0      	mvns	r0, r0
    d4d8:	0400      	lsls	r0, r0, #16
    d4da:	0c00      	lsrs	r0, r0, #16
    d4dc:	d03e      	beq.n	d55c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d4de:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d4e2:	07c0      	lsls	r0, r0, #31
    d4e4:	d03a      	beq.n	d55c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d4e6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d4ea:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d4ee:	f8ad 1000 	strh.w	r1, [sp]
    d4f2:	f8c4 0001 	str.w	r0, [r4, #1]
    d4f6:	f8bd 0000 	ldrh.w	r0, [sp]
    d4fa:	f8a4 0005 	strh.w	r0, [r4, #5]
    d4fe:	79a0      	ldrb	r0, [r4, #6]
    d500:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d504:	71a0      	strb	r0, [r4, #6]
    d506:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d50a:	1c40      	adds	r0, r0, #1
    d50c:	d00f      	beq.n	d52e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d50e:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d512:	1c40      	adds	r0, r0, #1
    d514:	d00b      	beq.n	d52e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d516:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d51a:	1c40      	adds	r0, r0, #1
    d51c:	d007      	beq.n	d52e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d51e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d522:	1c40      	adds	r0, r0, #1
    d524:	d003      	beq.n	d52e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d526:	2000      	movs	r0, #0
    d528:	f7f7 fb3a 	bl	4ba0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d52c:	b140      	cbz	r0, d540 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d52e:	2210      	movs	r2, #16
    d530:	2100      	movs	r1, #0
    d532:	1de0      	adds	r0, r4, #7
    d534:	f7ff fb4f 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d538:	2001      	movs	r0, #1
    d53a:	7020      	strb	r0, [r4, #0]
    d53c:	2000      	movs	r0, #0
    d53e:	bd38      	pop	{r3, r4, r5, pc}
    d540:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d544:	6869      	ldr	r1, [r5, #4]
    d546:	68a8      	ldr	r0, [r5, #8]
    d548:	68eb      	ldr	r3, [r5, #12]
    d54a:	f8c4 2007 	str.w	r2, [r4, #7]
    d54e:	f8c4 100b 	str.w	r1, [r4, #11]
    d552:	f8c4 000f 	str.w	r0, [r4, #15]
    d556:	f8c4 3013 	str.w	r3, [r4, #19]
    d55a:	e7ed      	b.n	d538 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d55c:	2000      	movs	r0, #0
    d55e:	e7ec      	b.n	d53a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d560 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d560:	f002 b86b 	b.w	f63a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d564 <sdc_hci_cmd_ip_read_bd_addr>:
    d564:	f002 b8b6 	b.w	f6d4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d568 <sdc_hci_cmd_ip_read_local_version_information>:
    d568:	f7fd bbba 	b.w	ace0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d56c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d56c:	f001 bde1 	b.w	f132 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d570 <sdc_hci_cmd_le_add_device_to_white_list>:
    d570:	f001 bdfa 	b.w	f168 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d574 <sdc_hci_cmd_le_clear_resolving_list>:
    d574:	f001 be0f 	b.w	f196 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d578 <sdc_hci_cmd_le_clear_white_list>:
    d578:	f001 be1a 	b.w	f1b0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d57c <sdc_hci_cmd_le_conn_update>:
    d57c:	f001 be22 	b.w	f1c4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d580 <sdc_hci_cmd_le_create_conn>:
    d580:	f7fd b904 	b.w	a78c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d584 <sdc_hci_cmd_le_create_conn_cancel>:
    d584:	f001 be60 	b.w	f248 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d588 <sdc_hci_cmd_le_enable_encryption>:
    d588:	f001 bff4 	b.w	f574 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d58c <sdc_hci_cmd_le_encrypt>:
    d58c:	f001 be84 	b.w	f298 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d590 <sdc_hci_cmd_le_rand>:
    d590:	f001 be8b 	b.w	f2aa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d594 <sdc_hci_cmd_le_read_buffer_size>:
    d594:	f7fd b954 	b.w	a840 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d598 <sdc_hci_cmd_le_read_channel_map>:
    d598:	f7fd b95c 	b.w	a854 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d59c <sdc_hci_cmd_le_read_max_data_length>:
    d59c:	f001 be8b 	b.w	f2b6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d5a0 <sdc_hci_cmd_le_read_phy>:
    d5a0:	f001 be99 	b.w	f2d6 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d5a4 <sdc_hci_cmd_le_read_remote_features>:
    d5a4:	f7fd b980 	b.w	a8a8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d5a8 <sdc_hci_cmd_le_read_resolving_list_size>:
    d5a8:	f001 bec0 	b.w	f32c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d5ac <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d5ac:	f7fd b9a0 	b.w	a8f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d5b0 <sdc_hci_cmd_le_read_transmit_power>:
    d5b0:	f001 bec0 	b.w	f334 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d5b4 <sdc_hci_cmd_le_read_white_list_size>:
    d5b4:	f001 bec7 	b.w	f346 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d5b8 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d5b8:	f001 bec9 	b.w	f34e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d5bc <sdc_hci_cmd_le_remove_device_from_white_list>:
    d5bc:	f001 bee0 	b.w	f380 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d5c0 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d5c0:	f001 bef3 	b.w	f3aa <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d5c4 <sdc_hci_cmd_le_set_data_length>:
    d5c4:	f001 beff 	b.w	f3c6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d5c8 <sdc_hci_cmd_le_set_default_phy>:
    d5c8:	f7fd b9a2 	b.w	a910 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d5cc <sdc_hci_cmd_le_set_event_mask>:
    d5cc:	b510      	push	{r4, lr}
    d5ce:	f7f6 fde5 	bl	419c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d5d2:	2000      	movs	r0, #0
    d5d4:	bd10      	pop	{r4, pc}

0000d5d6 <sdc_hci_cmd_le_set_host_channel_classification>:
    d5d6:	f001 bf1d 	b.w	f414 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d5da <sdc_hci_cmd_le_set_phy>:
    d5da:	f001 bf3b 	b.w	f454 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d5de <sdc_hci_cmd_le_set_privacy_mode>:
    d5de:	f001 bf59 	b.w	f494 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d5e2 <sdc_hci_cmd_le_set_random_address>:
    d5e2:	f001 bf6d 	b.w	f4c0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d5e6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d5e6:	f001 bf79 	b.w	f4dc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d5ea <sdc_hci_cmd_le_set_scan_enable>:
    d5ea:	f001 bf80 	b.w	f4ee <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d5ee <sdc_hci_cmd_le_set_scan_params>:
    d5ee:	f001 bf94 	b.w	f51a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d5f2 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d5f2:	f001 bff1 	b.w	f5d8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d5f6 <sdc_hci_cmd_lc_disconnect>:
    d5f6:	f001 bd4b 	b.w	f090 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d5fa <sdc_hci_cmd_lc_read_remote_version_information>:
    d5fa:	f002 b877 	b.w	f6ec <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d5fe:	b570      	push	{r4, r5, r6, lr}
    d600:	880b      	ldrh	r3, [r1, #0]
    d602:	7f04      	ldrb	r4, [r0, #28]
    d604:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d608:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d60c:	8802      	ldrh	r2, [r0, #0]
    d60e:	4435      	add	r5, r6
    d610:	1da4      	adds	r4, r4, #6
    d612:	882d      	ldrh	r5, [r5, #0]
    d614:	4422      	add	r2, r4
    d616:	b292      	uxth	r2, r2
    d618:	4425      	add	r5, r4
    d61a:	1e54      	subs	r4, r2, #1
    d61c:	442c      	add	r4, r5
    d61e:	fb94 f4f2 	sdiv	r4, r4, r2
    d622:	fb02 6204 	mla	r2, r2, r4, r6
    d626:	8840      	ldrh	r0, [r0, #2]
    d628:	b292      	uxth	r2, r2
    d62a:	4290      	cmp	r0, r2
    d62c:	d903      	bls.n	d636 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d62e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d632:	4310      	orrs	r0, r2
    d634:	e002      	b.n	d63c <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d63a:	4398      	bics	r0, r3
    d63c:	8008      	strh	r0, [r1, #0]
    d63e:	bd70      	pop	{r4, r5, r6, pc}
    d640:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d644:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d648:	429a      	cmp	r2, r3
    d64a:	d107      	bne.n	d65c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d64c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d650:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d654:	4288      	cmp	r0, r1
    d656:	d001      	beq.n	d65c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d658:	2001      	movs	r0, #1
    d65a:	4770      	bx	lr
    d65c:	2000      	movs	r0, #0
    d65e:	4770      	bx	lr

0000d660 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d660:	b570      	push	{r4, r5, r6, lr}
    d662:	7f00      	ldrb	r0, [r0, #28]
    d664:	461c      	mov	r4, r3
    d666:	1d80      	adds	r0, r0, #6
    d668:	4408      	add	r0, r1
    d66a:	4613      	mov	r3, r2
    d66c:	8809      	ldrh	r1, [r1, #0]
    d66e:	9a04      	ldr	r2, [sp, #16]
    d670:	1cc9      	adds	r1, r1, #3
    d672:	b289      	uxth	r1, r1
    d674:	1915      	adds	r5, r2, r4
    d676:	1ec0      	subs	r0, r0, #3
    d678:	428d      	cmp	r5, r1
    d67a:	d805      	bhi.n	d688 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d67c:	1881      	adds	r1, r0, r2
    d67e:	4622      	mov	r2, r4
    d680:	4618      	mov	r0, r3
    d682:	f7ff fa2e 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d686:	e000      	b.n	d68a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d688:	2400      	movs	r4, #0
    d68a:	4620      	mov	r0, r4
    d68c:	bd70      	pop	{r4, r5, r6, pc}

0000d68e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d68e:	b570      	push	{r4, r5, r6, lr}
    d690:	7f00      	ldrb	r0, [r0, #28]
    d692:	461c      	mov	r4, r3
    d694:	1d80      	adds	r0, r0, #6
    d696:	4408      	add	r0, r1
    d698:	4613      	mov	r3, r2
    d69a:	8809      	ldrh	r1, [r1, #0]
    d69c:	9a04      	ldr	r2, [sp, #16]
    d69e:	1cc9      	adds	r1, r1, #3
    d6a0:	b289      	uxth	r1, r1
    d6a2:	1915      	adds	r5, r2, r4
    d6a4:	1ec0      	subs	r0, r0, #3
    d6a6:	428d      	cmp	r5, r1
    d6a8:	d805      	bhi.n	d6b6 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d6aa:	4410      	add	r0, r2
    d6ac:	4622      	mov	r2, r4
    d6ae:	4619      	mov	r1, r3
    d6b0:	f7ff fa17 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d6b4:	e000      	b.n	d6b8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d6b6:	2400      	movs	r4, #0
    d6b8:	4620      	mov	r0, r4
    d6ba:	bd70      	pop	{r4, r5, r6, pc}

0000d6bc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d6bc:	8881      	ldrh	r1, [r0, #4]
    d6be:	88c0      	ldrh	r0, [r0, #6]
    d6c0:	4288      	cmp	r0, r1
    d6c2:	d101      	bne.n	d6c8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d6c4:	2001      	movs	r0, #1
    d6c6:	4770      	bx	lr
    d6c8:	2000      	movs	r0, #0
    d6ca:	4770      	bx	lr

0000d6cc <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d6cc:	8881      	ldrh	r1, [r0, #4]
    d6ce:	8900      	ldrh	r0, [r0, #8]
    d6d0:	4288      	cmp	r0, r1
    d6d2:	d101      	bne.n	d6d8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d6d4:	2001      	movs	r0, #1
    d6d6:	4770      	bx	lr
    d6d8:	2000      	movs	r0, #0
    d6da:	4770      	bx	lr

0000d6dc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d6dc:	b570      	push	{r4, r5, r6, lr}
    d6de:	4604      	mov	r4, r0
    d6e0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d6e4:	8880      	ldrh	r0, [r0, #4]
    d6e6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d6ea:	4401      	add	r1, r0
    d6ec:	8a20      	ldrh	r0, [r4, #16]
    d6ee:	2800      	cmp	r0, #0
    d6f0:	d01a      	beq.n	d728 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d6f2:	89a2      	ldrh	r2, [r4, #12]
    d6f4:	2500      	movs	r5, #0
    d6f6:	4410      	add	r0, r2
    d6f8:	b280      	uxth	r0, r0
    d6fa:	81a0      	strh	r0, [r4, #12]
    d6fc:	880a      	ldrh	r2, [r1, #0]
    d6fe:	4290      	cmp	r0, r2
    d700:	d905      	bls.n	d70e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d702:	f240 1163 	movw	r1, #355	; 0x163
    d706:	f04f 0014 	mov.w	r0, #20
    d70a:	f7f6 fbcb 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d70e:	d109      	bne.n	d724 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d710:	69a0      	ldr	r0, [r4, #24]
    d712:	b108      	cbz	r0, d718 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d714:	7f40      	ldrb	r0, [r0, #29]
    d716:	7088      	strb	r0, [r1, #2]
    d718:	f104 0104 	add.w	r1, r4, #4
    d71c:	4620      	mov	r0, r4
    d71e:	f7ff ff6e 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d722:	81a5      	strh	r5, [r4, #12]
    d724:	8225      	strh	r5, [r4, #16]
    d726:	2001      	movs	r0, #1
    d728:	bd70      	pop	{r4, r5, r6, pc}

0000d72a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d72c:	4604      	mov	r4, r0
    d72e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d732:	88c0      	ldrh	r0, [r0, #6]
    d734:	460e      	mov	r6, r1
    d736:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d73a:	8a60      	ldrh	r0, [r4, #18]
    d73c:	19d9      	adds	r1, r3, r7
    d73e:	b108      	cbz	r0, d744 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d740:	42b0      	cmp	r0, r6
    d742:	d201      	bcs.n	d748 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d744:	2000      	movs	r0, #0
    d746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d748:	89e0      	ldrh	r0, [r4, #14]
    d74a:	2500      	movs	r5, #0
    d74c:	b140      	cbz	r0, d760 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d74e:	f8b1 c000 	ldrh.w	ip, [r1]
    d752:	4560      	cmp	r0, ip
    d754:	d008      	beq.n	d768 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d756:	f240 214b 	movw	r1, #587	; 0x24b
    d75a:	2014      	movs	r0, #20
    d75c:	f7f6 fba2 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d760:	7f60      	ldrb	r0, [r4, #29]
    d762:	7088      	strb	r0, [r1, #2]
    d764:	800d      	strh	r5, [r1, #0]
    d766:	e00e      	b.n	d786 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d768:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d76c:	4418      	add	r0, r3
    d76e:	f10c 0c06 	add.w	ip, ip, #6
    d772:	44bc      	add	ip, r7
    d774:	4460      	add	r0, ip
    d776:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d77a:	f820 cc03 	strh.w	ip, [r0, #-3]
    d77e:	f894 c020 	ldrb.w	ip, [r4, #32]
    d782:	f800 cc01 	strb.w	ip, [r0, #-1]
    d786:	89e0      	ldrh	r0, [r4, #14]
    d788:	4430      	add	r0, r6
    d78a:	81e0      	strh	r0, [r4, #14]
    d78c:	8808      	ldrh	r0, [r1, #0]
    d78e:	4430      	add	r0, r6
    d790:	8008      	strh	r0, [r1, #0]
    d792:	b19a      	cbz	r2, d7bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d794:	1da1      	adds	r1, r4, #6
    d796:	4620      	mov	r0, r4
    d798:	f7ff ff31 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d79c:	81e5      	strh	r5, [r4, #14]
    d79e:	7f60      	ldrb	r0, [r4, #29]
    d7a0:	1c40      	adds	r0, r0, #1
    d7a2:	7760      	strb	r0, [r4, #29]
    d7a4:	7da0      	ldrb	r0, [r4, #22]
    d7a6:	f88d 0000 	strb.w	r0, [sp]
    d7aa:	9800      	ldr	r0, [sp, #0]
    d7ac:	9000      	str	r0, [sp, #0]
    d7ae:	f89d 0000 	ldrb.w	r0, [sp]
    d7b2:	b178      	cbz	r0, d7d4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d7b4:	88e0      	ldrh	r0, [r4, #6]
    d7b6:	82a0      	strh	r0, [r4, #20]
    d7b8:	75a5      	strb	r5, [r4, #22]
    d7ba:	e00b      	b.n	d7d4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d7bc:	7f20      	ldrb	r0, [r4, #28]
    d7be:	89e1      	ldrh	r1, [r4, #14]
    d7c0:	1d80      	adds	r0, r0, #6
    d7c2:	4438      	add	r0, r7
    d7c4:	4419      	add	r1, r3
    d7c6:	4408      	add	r0, r1
    d7c8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d7cc:	83e1      	strh	r1, [r4, #30]
    d7ce:	7880      	ldrb	r0, [r0, #2]
    d7d0:	f884 0020 	strb.w	r0, [r4, #32]
    d7d4:	8265      	strh	r5, [r4, #18]
    d7d6:	2001      	movs	r0, #1
    d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d7da <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d7da:	1cc0      	adds	r0, r0, #3
    d7dc:	4770      	bx	lr

0000d7de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d7de:	b510      	push	{r4, lr}
    d7e0:	88c2      	ldrh	r2, [r0, #6]
    d7e2:	8943      	ldrh	r3, [r0, #10]
    d7e4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d7e8:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d7ec:	1a61      	subs	r1, r4, r1
    d7ee:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d7f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d7f6:	429a      	cmp	r2, r3
    d7f8:	d101      	bne.n	d7fe <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d7fa:	8842      	ldrh	r2, [r0, #2]
    d7fc:	4411      	add	r1, r2
    d7fe:	7f02      	ldrb	r2, [r0, #28]
    d800:	8800      	ldrh	r0, [r0, #0]
    d802:	4410      	add	r0, r2
    d804:	1d80      	adds	r0, r0, #6
    d806:	b280      	uxth	r0, r0
    d808:	fb91 f0f0 	sdiv	r0, r1, r0
    d80c:	b280      	uxth	r0, r0
    d80e:	bd10      	pop	{r4, pc}

0000d810 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d810:	b510      	push	{r4, lr}
    d812:	4604      	mov	r4, r0
    d814:	88c0      	ldrh	r0, [r0, #6]
    d816:	88a1      	ldrh	r1, [r4, #4]
    d818:	4281      	cmp	r1, r0
    d81a:	d007      	beq.n	d82c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d81c:	89a0      	ldrh	r0, [r4, #12]
    d81e:	b928      	cbnz	r0, d82c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d820:	8a20      	ldrh	r0, [r4, #16]
    d822:	b918      	cbnz	r0, d82c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d824:	88a0      	ldrh	r0, [r4, #4]
    d826:	8aa1      	ldrh	r1, [r4, #20]
    d828:	4288      	cmp	r0, r1
    d82a:	d101      	bne.n	d830 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d82c:	2000      	movs	r0, #0
    d82e:	bd10      	pop	{r4, pc}
    d830:	1d21      	adds	r1, r4, #4
    d832:	4620      	mov	r0, r4
    d834:	f7ff fee3 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d838:	2000      	movs	r0, #0
    d83a:	8220      	strh	r0, [r4, #16]
    d83c:	2001      	movs	r0, #1
    d83e:	bd10      	pop	{r4, pc}

0000d840 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d840:	b510      	push	{r4, lr}
    d842:	4604      	mov	r4, r0
    d844:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d848:	88c0      	ldrh	r0, [r0, #6]
    d84a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d84e:	4402      	add	r2, r0
    d850:	8820      	ldrh	r0, [r4, #0]
    d852:	2845      	cmp	r0, #69	; 0x45
    d854:	d200      	bcs.n	d858 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d856:	2045      	movs	r0, #69	; 0x45
    d858:	4288      	cmp	r0, r1
    d85a:	d204      	bcs.n	d866 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d85c:	f240 1119 	movw	r1, #281	; 0x119
    d860:	2014      	movs	r0, #20
    d862:	f7f6 fb1f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d866:	7de0      	ldrb	r0, [r4, #23]
    d868:	2800      	cmp	r0, #0
    d86a:	d003      	beq.n	d874 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d86c:	8810      	ldrh	r0, [r2, #0]
    d86e:	4288      	cmp	r0, r1
    d870:	d201      	bcs.n	d876 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d872:	2000      	movs	r0, #0
    d874:	bd10      	pop	{r4, pc}
    d876:	8011      	strh	r1, [r2, #0]
    d878:	1da1      	adds	r1, r4, #6
    d87a:	4620      	mov	r0, r4
    d87c:	f7ff febf 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d880:	2000      	movs	r0, #0
    d882:	75e0      	strb	r0, [r4, #23]
    d884:	2001      	movs	r0, #1
    d886:	bd10      	pop	{r4, pc}

0000d888 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d88c:	8941      	ldrh	r1, [r0, #10]
    d88e:	8886      	ldrh	r6, [r0, #4]
    d890:	4604      	mov	r4, r0
    d892:	2500      	movs	r5, #0
    d894:	f100 070a 	add.w	r7, r0, #10
    d898:	e006      	b.n	d8a8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d89a:	4639      	mov	r1, r7
    d89c:	4620      	mov	r0, r4
    d89e:	f7ff feae 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8a2:	1c6d      	adds	r5, r5, #1
    d8a4:	8961      	ldrh	r1, [r4, #10]
    d8a6:	b2ad      	uxth	r5, r5
    d8a8:	42b1      	cmp	r1, r6
    d8aa:	d1f6      	bne.n	d89a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d8ac:	4628      	mov	r0, r5
    d8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d8b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d8b2:	b530      	push	{r4, r5, lr}
    d8b4:	88c4      	ldrh	r4, [r0, #6]
    d8b6:	8881      	ldrh	r1, [r0, #4]
    d8b8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d8bc:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d8c0:	4413      	add	r3, r2
    d8c2:	8882      	ldrh	r2, [r0, #4]
    d8c4:	8a85      	ldrh	r5, [r0, #20]
    d8c6:	42aa      	cmp	r2, r5
    d8c8:	d012      	beq.n	d8f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d8ca:	42a1      	cmp	r1, r4
    d8cc:	d010      	beq.n	d8f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d8ce:	8981      	ldrh	r1, [r0, #12]
    d8d0:	b971      	cbnz	r1, d8f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d8d2:	6982      	ldr	r2, [r0, #24]
    d8d4:	b172      	cbz	r2, d8f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d8d6:	4610      	mov	r0, r2
    d8d8:	f7ff fef8 	bl	d6cc <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d8dc:	b950      	cbnz	r0, d8f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d8de:	8910      	ldrh	r0, [r2, #8]
    d8e0:	3224      	adds	r2, #36	; 0x24
    d8e2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d8e6:	4410      	add	r0, r2
    d8e8:	7899      	ldrb	r1, [r3, #2]
    d8ea:	7880      	ldrb	r0, [r0, #2]
    d8ec:	4288      	cmp	r0, r1
    d8ee:	d101      	bne.n	d8f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d8f0:	2000      	movs	r0, #0
    d8f2:	bd30      	pop	{r4, r5, pc}
    d8f4:	4618      	mov	r0, r3
    d8f6:	bd30      	pop	{r4, r5, pc}

0000d8f8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d8f8:	8803      	ldrh	r3, [r0, #0]
    d8fa:	2b45      	cmp	r3, #69	; 0x45
    d8fc:	d200      	bcs.n	d900 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d8fe:	2345      	movs	r3, #69	; 0x45
    d900:	8013      	strh	r3, [r2, #0]
    d902:	88c2      	ldrh	r2, [r0, #6]
    d904:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d908:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d90c:	441a      	add	r2, r3
    d90e:	600a      	str	r2, [r1, #0]
    d910:	89c0      	ldrh	r0, [r0, #14]
    d912:	4770      	bx	lr

0000d914 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d914:	7f00      	ldrb	r0, [r0, #28]
    d916:	1d80      	adds	r0, r0, #6
    d918:	4408      	add	r0, r1
    d91a:	1ec0      	subs	r0, r0, #3
    d91c:	6010      	str	r0, [r2, #0]
    d91e:	8808      	ldrh	r0, [r1, #0]
    d920:	4770      	bx	lr

0000d922 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d926:	460e      	mov	r6, r1
    d928:	88c1      	ldrh	r1, [r0, #6]
    d92a:	8902      	ldrh	r2, [r0, #8]
    d92c:	4604      	mov	r4, r0
    d92e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d932:	8800      	ldrh	r0, [r0, #0]
    d934:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d938:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d93c:	2845      	cmp	r0, #69	; 0x45
    d93e:	d200      	bcs.n	d942 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d940:	2045      	movs	r0, #69	; 0x45
    d942:	42b0      	cmp	r0, r6
    d944:	d203      	bcs.n	d94e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d946:	21db      	movs	r1, #219	; 0xdb
    d948:	2014      	movs	r0, #20
    d94a:	f7f6 faab 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d94e:	4610      	mov	r0, r2
    d950:	f7ff fe76 	bl	d640 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d954:	b110      	cbz	r0, d95c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d956:	2000      	movs	r0, #0
    d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d95c:	42af      	cmp	r7, r5
    d95e:	d908      	bls.n	d972 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d960:	7f21      	ldrb	r1, [r4, #28]
    d962:	1b78      	subs	r0, r7, r5
    d964:	1a40      	subs	r0, r0, r1
    d966:	1f80      	subs	r0, r0, #6
    d968:	4286      	cmp	r6, r0
    d96a:	dd02      	ble.n	d972 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d96c:	2000      	movs	r0, #0
    d96e:	75e0      	strb	r0, [r4, #23]
    d970:	e7f1      	b.n	d956 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d972:	eb08 0005 	add.w	r0, r8, r5
    d976:	2101      	movs	r1, #1
    d978:	8006      	strh	r6, [r0, #0]
    d97a:	75e1      	strb	r1, [r4, #23]
    d97c:	e7ec      	b.n	d958 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d97e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d97e:	b538      	push	{r3, r4, r5, lr}
    d980:	88c4      	ldrh	r4, [r0, #6]
    d982:	8881      	ldrh	r1, [r0, #4]
    d984:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d988:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d98c:	441a      	add	r2, r3
    d98e:	42a1      	cmp	r1, r4
    d990:	d010      	beq.n	d9b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d992:	8983      	ldrh	r3, [r0, #12]
    d994:	8a05      	ldrh	r5, [r0, #16]
    d996:	8812      	ldrh	r2, [r2, #0]
    d998:	442b      	add	r3, r5
    d99a:	4293      	cmp	r3, r2
    d99c:	d308      	bcc.n	d9b0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d99e:	f8ad 1000 	strh.w	r1, [sp]
    d9a2:	4669      	mov	r1, sp
    d9a4:	f7ff fe2b 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d9a8:	f8bd 0000 	ldrh.w	r0, [sp]
    d9ac:	42a0      	cmp	r0, r4
    d9ae:	d001      	beq.n	d9b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d9b0:	2001      	movs	r0, #1
    d9b2:	bd38      	pop	{r3, r4, r5, pc}
    d9b4:	2000      	movs	r0, #0
    d9b6:	bd38      	pop	{r3, r4, r5, pc}

0000d9b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d9b8:	b570      	push	{r4, r5, r6, lr}
    d9ba:	88c6      	ldrh	r6, [r0, #6]
    d9bc:	8885      	ldrh	r5, [r0, #4]
    d9be:	4603      	mov	r3, r0
    d9c0:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d9c4:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d9c8:	4420      	add	r0, r4
    d9ca:	42b5      	cmp	r5, r6
    d9cc:	d102      	bne.n	d9d4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d9ce:	2000      	movs	r0, #0
    d9d0:	8218      	strh	r0, [r3, #16]
    d9d2:	bd70      	pop	{r4, r5, r6, pc}
    d9d4:	8804      	ldrh	r4, [r0, #0]
    d9d6:	899d      	ldrh	r5, [r3, #12]
    d9d8:	7f1e      	ldrb	r6, [r3, #28]
    d9da:	1b64      	subs	r4, r4, r5
    d9dc:	4435      	add	r5, r6
    d9de:	4428      	add	r0, r5
    d9e0:	880d      	ldrh	r5, [r1, #0]
    d9e2:	b2a4      	uxth	r4, r4
    d9e4:	1cc0      	adds	r0, r0, #3
    d9e6:	42a5      	cmp	r5, r4
    d9e8:	d900      	bls.n	d9ec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d9ea:	800c      	strh	r4, [r1, #0]
    d9ec:	899c      	ldrh	r4, [r3, #12]
    d9ee:	b124      	cbz	r4, d9fa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d9f0:	2400      	movs	r4, #0
    d9f2:	7014      	strb	r4, [r2, #0]
    d9f4:	8809      	ldrh	r1, [r1, #0]
    d9f6:	8219      	strh	r1, [r3, #16]
    d9f8:	bd70      	pop	{r4, r5, r6, pc}
    d9fa:	2401      	movs	r4, #1
    d9fc:	e7f9      	b.n	d9f2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d9fe <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d9fe:	b508      	push	{r3, lr}
    da00:	8a81      	ldrh	r1, [r0, #20]
    da02:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    da06:	3aff      	subs	r2, #255	; 0xff
    da08:	d008      	beq.n	da1c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    da0a:	7d82      	ldrb	r2, [r0, #22]
    da0c:	f88d 2000 	strb.w	r2, [sp]
    da10:	9a00      	ldr	r2, [sp, #0]
    da12:	9200      	str	r2, [sp, #0]
    da14:	f89d 2000 	ldrb.w	r2, [sp]
    da18:	b952      	cbnz	r2, da30 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    da1a:	e004      	b.n	da26 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    da1c:	f44f 7162 	mov.w	r1, #904	; 0x388
    da20:	2014      	movs	r0, #20
    da22:	f7f6 fa3f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da26:	8880      	ldrh	r0, [r0, #4]
    da28:	4281      	cmp	r1, r0
    da2a:	d101      	bne.n	da30 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    da2c:	2000      	movs	r0, #0
    da2e:	bd08      	pop	{r3, pc}
    da30:	2001      	movs	r0, #1
    da32:	bd08      	pop	{r3, pc}

0000da34 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    da34:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da38:	8281      	strh	r1, [r0, #20]
    da3a:	2100      	movs	r1, #0
    da3c:	7581      	strb	r1, [r0, #22]
    da3e:	4770      	bx	lr

0000da40 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    da40:	b510      	push	{r4, lr}
    da42:	8a81      	ldrh	r1, [r0, #20]
    da44:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    da48:	3aff      	subs	r2, #255	; 0xff
    da4a:	d004      	beq.n	da56 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    da4c:	f44f 7159 	mov.w	r1, #868	; 0x364
    da50:	2014      	movs	r0, #20
    da52:	f7f6 fa27 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da56:	88c1      	ldrh	r1, [r0, #6]
    da58:	8281      	strh	r1, [r0, #20]
    da5a:	89c1      	ldrh	r1, [r0, #14]
    da5c:	b109      	cbz	r1, da62 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    da5e:	2101      	movs	r1, #1
    da60:	e000      	b.n	da64 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    da62:	2100      	movs	r1, #0
    da64:	7581      	strb	r1, [r0, #22]
    da66:	bd10      	pop	{r4, pc}

0000da68 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da6c:	461d      	mov	r5, r3
    da6e:	4616      	mov	r6, r2
    da70:	9f06      	ldr	r7, [sp, #24]
    da72:	460b      	mov	r3, r1
    da74:	4604      	mov	r4, r0
    da76:	463a      	mov	r2, r7
    da78:	4629      	mov	r1, r5
    da7a:	4630      	mov	r0, r6
    da7c:	f000 f84f 	bl	db1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    da80:	4283      	cmp	r3, r0
    da82:	d201      	bcs.n	da88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    da84:	21a8      	movs	r1, #168	; 0xa8
    da86:	e018      	b.n	daba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    da88:	1ce0      	adds	r0, r4, #3
    da8a:	f020 0103 	bic.w	r1, r0, #3
    da8e:	4620      	mov	r0, r4
    da90:	42a1      	cmp	r1, r4
    da92:	d001      	beq.n	da98 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    da94:	21a9      	movs	r1, #169	; 0xa9
    da96:	e010      	b.n	daba <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    da98:	2224      	movs	r2, #36	; 0x24
    da9a:	2100      	movs	r1, #0
    da9c:	f7ff f89b 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    daa0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    daa4:	82a0      	strh	r0, [r4, #20]
    daa6:	19a8      	adds	r0, r5, r6
    daa8:	1d80      	adds	r0, r0, #6
    daaa:	4378      	muls	r0, r7
    daac:	b280      	uxth	r0, r0
    daae:	7725      	strb	r5, [r4, #28]
    dab0:	8060      	strh	r0, [r4, #2]
    dab2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dab6:	d903      	bls.n	dac0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    dab8:	21af      	movs	r1, #175	; 0xaf
    daba:	2014      	movs	r0, #20
    dabc:	f7f6 f9f2 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dac0:	8026      	strh	r6, [r4, #0]
    dac2:	2000      	movs	r0, #0
    dac4:	7760      	strb	r0, [r4, #29]
    dac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000daca <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    daca:	6181      	str	r1, [r0, #24]
    dacc:	6188      	str	r0, [r1, #24]
    dace:	4770      	bx	lr

0000dad0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    dad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dad4:	460b      	mov	r3, r1
    dad6:	4604      	mov	r4, r0
    dad8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dadc:	8905      	ldrh	r5, [r0, #8]
    dade:	8946      	ldrh	r6, [r0, #10]
    dae0:	8880      	ldrh	r0, [r0, #4]
    dae2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    dae6:	4439      	add	r1, r7
    dae8:	460f      	mov	r7, r1
    daea:	4285      	cmp	r5, r0
    daec:	d102      	bne.n	daf4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    daee:	2000      	movs	r0, #0
    daf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    daf4:	b10a      	cbz	r2, dafa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    daf6:	1cc8      	adds	r0, r1, #3
    daf8:	6010      	str	r0, [r2, #0]
    dafa:	b123      	cbz	r3, db06 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dafc:	7f22      	ldrb	r2, [r4, #28]
    dafe:	1cf9      	adds	r1, r7, #3
    db00:	4618      	mov	r0, r3
    db02:	f7fe ffee 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db06:	883f      	ldrh	r7, [r7, #0]
    db08:	f104 0108 	add.w	r1, r4, #8
    db0c:	4620      	mov	r0, r4
    db0e:	f7ff fd76 	bl	d5fe <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db12:	42b5      	cmp	r5, r6
    db14:	d101      	bne.n	db1a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    db16:	8920      	ldrh	r0, [r4, #8]
    db18:	8160      	strh	r0, [r4, #10]
    db1a:	4638      	mov	r0, r7
    db1c:	e7e8      	b.n	daf0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000db1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    db1e:	4401      	add	r1, r0
    db20:	1d89      	adds	r1, r1, #6
    db22:	4351      	muls	r1, r2
    db24:	b28a      	uxth	r2, r1
    db26:	2100      	movs	r1, #0
    db28:	2845      	cmp	r0, #69	; 0x45
    db2a:	d201      	bcs.n	db30 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    db2c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    db30:	3224      	adds	r2, #36	; 0x24
    db32:	1850      	adds	r0, r2, r1
    db34:	b280      	uxth	r0, r0
    db36:	4770      	bx	lr

0000db38 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db3c:	4688      	mov	r8, r1
    db3e:	88c1      	ldrh	r1, [r0, #6]
    db40:	4604      	mov	r4, r0
    db42:	8900      	ldrh	r0, [r0, #8]
    db44:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    db48:	f104 0524 	add.w	r5, r4, #36	; 0x24
    db4c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    db50:	eb05 0906 	add.w	r9, r5, r6
    db54:	f7ff fd74 	bl	d640 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    db58:	2200      	movs	r2, #0
    db5a:	b998      	cbnz	r0, db84 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    db5c:	8820      	ldrh	r0, [r4, #0]
    db5e:	2845      	cmp	r0, #69	; 0x45
    db60:	d200      	bcs.n	db64 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    db62:	2045      	movs	r0, #69	; 0x45
    db64:	42b7      	cmp	r7, r6
    db66:	d906      	bls.n	db76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db68:	7f23      	ldrb	r3, [r4, #28]
    db6a:	1bb9      	subs	r1, r7, r6
    db6c:	1ac9      	subs	r1, r1, r3
    db6e:	1f89      	subs	r1, r1, #6
    db70:	4281      	cmp	r1, r0
    db72:	da00      	bge.n	db76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db74:	4608      	mov	r0, r1
    db76:	89e1      	ldrh	r1, [r4, #14]
    db78:	b111      	cbz	r1, db80 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    db7a:	f8b9 3000 	ldrh.w	r3, [r9]
    db7e:	1ac0      	subs	r0, r0, r3
    db80:	4540      	cmp	r0, r8
    db82:	da03      	bge.n	db8c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    db84:	8262      	strh	r2, [r4, #18]
    db86:	2000      	movs	r0, #0
    db88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db8c:	7f20      	ldrb	r0, [r4, #28]
    db8e:	4429      	add	r1, r5
    db90:	1d80      	adds	r0, r0, #6
    db92:	4430      	add	r0, r6
    db94:	4408      	add	r0, r1
    db96:	f8a4 8012 	strh.w	r8, [r4, #18]
    db9a:	1ec0      	subs	r0, r0, #3
    db9c:	e7f4      	b.n	db88 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000db9e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    db9e:	2100      	movs	r1, #0
    dba0:	81c1      	strh	r1, [r0, #14]
    dba2:	8241      	strh	r1, [r0, #18]
    dba4:	7581      	strb	r1, [r0, #22]
    dba6:	4770      	bx	lr

0000dba8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dba8:	b570      	push	{r4, r5, r6, lr}
    dbaa:	2300      	movs	r3, #0
    dbac:	2908      	cmp	r1, #8
    dbae:	d204      	bcs.n	dbba <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    dbb0:	f240 11cb 	movw	r1, #459	; 0x1cb
    dbb4:	2015      	movs	r0, #21
    dbb6:	f7f6 f975 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbba:	6802      	ldr	r2, [r0, #0]
    dbbc:	b90a      	cbnz	r2, dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dbbe:	e01e      	b.n	dbfe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dbc0:	4610      	mov	r0, r2
    dbc2:	6802      	ldr	r2, [r0, #0]
    dbc4:	8893      	ldrh	r3, [r2, #4]
    dbc6:	428b      	cmp	r3, r1
    dbc8:	d002      	beq.n	dbd0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    dbca:	6813      	ldr	r3, [r2, #0]
    dbcc:	2b00      	cmp	r3, #0
    dbce:	d1f7      	bne.n	dbc0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    dbd0:	8894      	ldrh	r4, [r2, #4]
    dbd2:	4613      	mov	r3, r2
    dbd4:	428c      	cmp	r4, r1
    dbd6:	d101      	bne.n	dbdc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    dbd8:	6811      	ldr	r1, [r2, #0]
    dbda:	e00d      	b.n	dbf8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    dbdc:	f101 0508 	add.w	r5, r1, #8
    dbe0:	b2ae      	uxth	r6, r5
    dbe2:	2500      	movs	r5, #0
    dbe4:	42b4      	cmp	r4, r6
    dbe6:	d309      	bcc.n	dbfc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    dbe8:	1a64      	subs	r4, r4, r1
    dbea:	4411      	add	r1, r2
    dbec:	600d      	str	r5, [r1, #0]
    dbee:	808c      	strh	r4, [r1, #4]
    dbf0:	6802      	ldr	r2, [r0, #0]
    dbf2:	6812      	ldr	r2, [r2, #0]
    dbf4:	6002      	str	r2, [r0, #0]
    dbf6:	600a      	str	r2, [r1, #0]
    dbf8:	6001      	str	r1, [r0, #0]
    dbfa:	e000      	b.n	dbfe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dbfc:	2300      	movs	r3, #0
    dbfe:	4618      	mov	r0, r3
    dc00:	bd70      	pop	{r4, r5, r6, pc}

0000dc02 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dc02:	b510      	push	{r4, lr}
    dc04:	000c      	movs	r4, r1
    dc06:	d006      	beq.n	dc16 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    dc08:	2c08      	cmp	r4, #8
    dc0a:	d209      	bcs.n	dc20 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    dc0c:	f240 1195 	movw	r1, #405	; 0x195
    dc10:	2015      	movs	r0, #21
    dc12:	f7f6 f947 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc16:	b108      	cbz	r0, dc1c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dc18:	2100      	movs	r1, #0
    dc1a:	6001      	str	r1, [r0, #0]
    dc1c:	2000      	movs	r0, #0
    dc1e:	bd10      	pop	{r4, pc}
    dc20:	b118      	cbz	r0, dc2a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    dc22:	b2a1      	uxth	r1, r4
    dc24:	6800      	ldr	r0, [r0, #0]
    dc26:	f000 f814 	bl	dc52 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dc2a:	1d20      	adds	r0, r4, #4
    dc2c:	bd10      	pop	{r4, pc}

0000dc2e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dc2e:	2100      	movs	r1, #0
    dc30:	6802      	ldr	r2, [r0, #0]
    dc32:	e003      	b.n	dc3c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dc34:	8893      	ldrh	r3, [r2, #4]
    dc36:	6812      	ldr	r2, [r2, #0]
    dc38:	4419      	add	r1, r3
    dc3a:	b289      	uxth	r1, r1
    dc3c:	2a00      	cmp	r2, #0
    dc3e:	d1f9      	bne.n	dc34 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dc40:	f000 b807 	b.w	dc52 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dc44 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dc44:	2300      	movs	r3, #0
    dc46:	600b      	str	r3, [r1, #0]
    dc48:	808a      	strh	r2, [r1, #4]
    dc4a:	6802      	ldr	r2, [r0, #0]
    dc4c:	600a      	str	r2, [r1, #0]
    dc4e:	6001      	str	r1, [r0, #0]
    dc50:	4770      	bx	lr
    dc52:	2300      	movs	r3, #0
    dc54:	6043      	str	r3, [r0, #4]
    dc56:	1d02      	adds	r2, r0, #4
    dc58:	8101      	strh	r1, [r0, #8]
    dc5a:	6002      	str	r2, [r0, #0]
    dc5c:	4770      	bx	lr

0000dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dc5e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    dc62:	3aff      	subs	r2, #255	; 0xff
    dc64:	d000      	beq.n	dc68 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    dc66:	b109      	cbz	r1, dc6c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    dc68:	2000      	movs	r0, #0
    dc6a:	4770      	bx	lr
    dc6c:	f7f6 bbfa 	b.w	4464 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    dc70:	b570      	push	{r4, r5, r6, lr}
    dc72:	4605      	mov	r5, r0
    dc74:	460c      	mov	r4, r1
    dc76:	4608      	mov	r0, r1
    dc78:	f000 f854 	bl	dd24 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    dc7c:	b108      	cbz	r0, dc82 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    dc7e:	2010      	movs	r0, #16
    dc80:	bd70      	pop	{r4, r5, r6, pc}
    dc82:	b10d      	cbz	r5, dc88 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    dc84:	2007      	movs	r0, #7
    dc86:	bd70      	pop	{r4, r5, r6, pc}
    dc88:	7025      	strb	r5, [r4, #0]
    dc8a:	2000      	movs	r0, #0
    dc8c:	8060      	strh	r0, [r4, #2]
    dc8e:	bd70      	pop	{r4, r5, r6, pc}
    dc90:	b510      	push	{r4, lr}
    dc92:	4604      	mov	r4, r0
    dc94:	f7f6 fc32 	bl	44fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    dc98:	42a0      	cmp	r0, r4
    dc9a:	d901      	bls.n	dca0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    dc9c:	2001      	movs	r0, #1
    dc9e:	bd10      	pop	{r4, pc}
    dca0:	2000      	movs	r0, #0
    dca2:	bd10      	pop	{r4, pc}
    dca4:	4770      	bx	lr

0000dca6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    dca6:	b570      	push	{r4, r5, r6, lr}
    dca8:	460e      	mov	r6, r1
    dcaa:	461d      	mov	r5, r3
    dcac:	4611      	mov	r1, r2
    dcae:	f000 f811 	bl	dcd4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    dcb2:	4604      	mov	r4, r0
    dcb4:	4629      	mov	r1, r5
    dcb6:	4630      	mov	r0, r6
    dcb8:	f000 f803 	bl	dcc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    dcbc:	4420      	add	r0, r4
    dcbe:	1d00      	adds	r0, r0, #4
    dcc0:	bd70      	pop	{r4, r5, r6, pc}
    dcc2:	b510      	push	{r4, lr}
    dcc4:	460a      	mov	r2, r1
    dcc6:	2101      	movs	r1, #1
    dcc8:	f7ff ff29 	bl	db1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dccc:	1cc0      	adds	r0, r0, #3
    dcce:	f020 0003 	bic.w	r0, r0, #3
    dcd2:	bd10      	pop	{r4, pc}
    dcd4:	b510      	push	{r4, lr}
    dcd6:	460a      	mov	r2, r1
    dcd8:	2101      	movs	r1, #1
    dcda:	f7ff ff20 	bl	db1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dcde:	1cc0      	adds	r0, r0, #3
    dce0:	f020 0003 	bic.w	r0, r0, #3
    dce4:	bd10      	pop	{r4, pc}
    dce6:	2800      	cmp	r0, #0
    dce8:	db09      	blt.n	dcfe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    dcea:	f000 021f 	and.w	r2, r0, #31
    dcee:	2101      	movs	r1, #1
    dcf0:	4091      	lsls	r1, r2
    dcf2:	0940      	lsrs	r0, r0, #5
    dcf4:	0080      	lsls	r0, r0, #2
    dcf6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dcfa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dcfe:	4770      	bx	lr
    dd00:	5840      	ldr	r0, [r0, r1]
    dd02:	2800      	cmp	r0, #0
    dd04:	d000      	beq.n	dd08 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    dd06:	2001      	movs	r0, #1
    dd08:	4770      	bx	lr

0000dd0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dd0a:	f7f6 bdbd 	b.w	4888 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000dd0e <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    dd0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    dd12:	2000      	movs	r0, #0
    dd14:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    dd18:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    dd1c:	2001      	movs	r0, #1
    dd1e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    dd22:	4770      	bx	lr

0000dd24 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    dd24:	b108      	cbz	r0, dd2a <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    dd26:	2000      	movs	r0, #0
    dd28:	4770      	bx	lr
    dd2a:	2001      	movs	r0, #1
    dd2c:	4770      	bx	lr

0000dd2e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dd2e:	f7f6 befd 	b.w	4b2c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dd32 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dd32:	f7f6 beeb 	b.w	4b0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dd36 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dd36:	b510      	push	{r4, lr}
    dd38:	2900      	cmp	r1, #0
    dd3a:	4604      	mov	r4, r0
    dd3c:	f04f 0106 	mov.w	r1, #6
    dd40:	d002      	beq.n	dd48 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dd42:	f7f6 f93d 	bl	3fc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dd46:	e001      	b.n	dd4c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dd48:	f7f6 f956 	bl	3ff8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dd4c:	7960      	ldrb	r0, [r4, #5]
    dd4e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dd52:	7160      	strb	r0, [r4, #5]
    dd54:	bd10      	pop	{r4, pc}

0000dd56 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dd56:	4770      	bx	lr

0000dd58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dd58:	b530      	push	{r4, r5, lr}
    dd5a:	460c      	mov	r4, r1
    dd5c:	4605      	mov	r5, r0
    dd5e:	b08d      	sub	sp, #52	; 0x34
    dd60:	f04f 0103 	mov.w	r1, #3
    dd64:	f104 0003 	add.w	r0, r4, #3
    dd68:	b112      	cbz	r2, dd70 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dd6a:	f7f6 f929 	bl	3fc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dd6e:	e001      	b.n	dd74 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dd70:	f7f6 f942 	bl	3ff8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dd74:	7960      	ldrb	r0, [r4, #5]
    dd76:	220d      	movs	r2, #13
    dd78:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dd7c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dd80:	7160      	strb	r0, [r4, #5]
    dd82:	2100      	movs	r1, #0
    dd84:	a804      	add	r0, sp, #16
    dd86:	f7fe ff26 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd8a:	78e0      	ldrb	r0, [r4, #3]
    dd8c:	f88d 001f 	strb.w	r0, [sp, #31]
    dd90:	7920      	ldrb	r0, [r4, #4]
    dd92:	f88d 001e 	strb.w	r0, [sp, #30]
    dd96:	7960      	ldrb	r0, [r4, #5]
    dd98:	f88d 001d 	strb.w	r0, [sp, #29]
    dd9c:	2210      	movs	r2, #16
    dd9e:	4629      	mov	r1, r5
    dda0:	4668      	mov	r0, sp
    dda2:	f7fe fe9e 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dda6:	4668      	mov	r0, sp
    dda8:	f7ff ffaf 	bl	dd0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ddac:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    ddb0:	7020      	strb	r0, [r4, #0]
    ddb2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    ddb6:	7060      	strb	r0, [r4, #1]
    ddb8:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    ddbc:	70a0      	strb	r0, [r4, #2]
    ddbe:	b00d      	add	sp, #52	; 0x34
    ddc0:	bd30      	pop	{r4, r5, pc}

0000ddc2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    ddc2:	b530      	push	{r4, r5, lr}
    ddc4:	b08d      	sub	sp, #52	; 0x34
    ddc6:	460c      	mov	r4, r1
    ddc8:	4605      	mov	r5, r0
    ddca:	220d      	movs	r2, #13
    ddcc:	2100      	movs	r1, #0
    ddce:	a804      	add	r0, sp, #16
    ddd0:	f7fe ff01 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ddd4:	78e0      	ldrb	r0, [r4, #3]
    ddd6:	f88d 001f 	strb.w	r0, [sp, #31]
    ddda:	7920      	ldrb	r0, [r4, #4]
    dddc:	f88d 001e 	strb.w	r0, [sp, #30]
    dde0:	7960      	ldrb	r0, [r4, #5]
    dde2:	f88d 001d 	strb.w	r0, [sp, #29]
    dde6:	2210      	movs	r2, #16
    dde8:	4629      	mov	r1, r5
    ddea:	4668      	mov	r0, sp
    ddec:	f7fe fe79 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddf0:	4668      	mov	r0, sp
    ddf2:	f7ff ff8a 	bl	dd0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ddf6:	7820      	ldrb	r0, [r4, #0]
    ddf8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    ddfc:	4288      	cmp	r0, r1
    ddfe:	d10c      	bne.n	de1a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    de00:	7860      	ldrb	r0, [r4, #1]
    de02:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    de06:	4288      	cmp	r0, r1
    de08:	d107      	bne.n	de1a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    de0a:	78a0      	ldrb	r0, [r4, #2]
    de0c:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    de10:	4288      	cmp	r0, r1
    de12:	d102      	bne.n	de1a <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    de14:	2001      	movs	r0, #1
    de16:	b00d      	add	sp, #52	; 0x34
    de18:	bd30      	pop	{r4, r5, pc}
    de1a:	2000      	movs	r0, #0
    de1c:	e7fb      	b.n	de16 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000de1e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    de1e:	f7f7 ba49 	b.w	52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    de22:	b510      	push	{r4, lr}
    de24:	2801      	cmp	r0, #1
    de26:	d008      	beq.n	de3a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    de28:	2802      	cmp	r0, #2
    de2a:	d004      	beq.n	de36 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    de2c:	f240 31ad 	movw	r1, #941	; 0x3ad
    de30:	2006      	movs	r0, #6
    de32:	f7f6 f837 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de36:	2001      	movs	r0, #1
    de38:	bd10      	pop	{r4, pc}
    de3a:	2000      	movs	r0, #0
    de3c:	bd10      	pop	{r4, pc}
    de3e:	2900      	cmp	r1, #0
    de40:	d004      	beq.n	de4c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    de42:	2801      	cmp	r0, #1
    de44:	d003      	beq.n	de4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    de46:	2901      	cmp	r1, #1
    de48:	d001      	beq.n	de4e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    de4a:	2002      	movs	r0, #2
    de4c:	4770      	bx	lr
    de4e:	2001      	movs	r0, #1
    de50:	4770      	bx	lr
    de52:	f7ff bdb1 	b.w	d9b8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000de56 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    de56:	2101      	movs	r1, #1
    de58:	f7f7 be40 	b.w	5adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000de5c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    de5c:	b510      	push	{r4, lr}
    de5e:	f002 f806 	bl	fe6e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    de62:	b118      	cbz	r0, de6c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    de64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de68:	f7fd b9d2 	b.w	b210 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    de6c:	20ff      	movs	r0, #255	; 0xff
    de6e:	bd10      	pop	{r4, pc}

0000de70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    de70:	b510      	push	{r4, lr}
    de72:	f7f7 fe7b 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    de76:	2810      	cmp	r0, #16
    de78:	d003      	beq.n	de82 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    de7a:	f7f7 fe47 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    de7e:	2810      	cmp	r0, #16
    de80:	d100      	bne.n	de84 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    de82:	2008      	movs	r0, #8
    de84:	bd10      	pop	{r4, pc}

0000de86 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    de86:	b510      	push	{r4, lr}
    de88:	f7f7 fe70 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    de8c:	2810      	cmp	r0, #16
    de8e:	d007      	beq.n	dea0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    de90:	f7f7 fe3c 	bl	5b0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    de94:	2810      	cmp	r0, #16
    de96:	d003      	beq.n	dea0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    de98:	f7f7 feb0 	bl	5bfc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    de9c:	2001      	movs	r0, #1
    de9e:	bd10      	pop	{r4, pc}
    dea0:	2000      	movs	r0, #0
    dea2:	bd10      	pop	{r4, pc}

0000dea4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dea4:	b510      	push	{r4, lr}
    dea6:	f7f7 fe61 	bl	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    deaa:	2810      	cmp	r0, #16
    deac:	d003      	beq.n	deb6 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    deae:	f7f7 feed 	bl	5c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    deb2:	2001      	movs	r0, #1
    deb4:	bd10      	pop	{r4, pc}
    deb6:	2000      	movs	r0, #0
    deb8:	bd10      	pop	{r4, pc}

0000deba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    deba:	b570      	push	{r4, r5, r6, lr}
    debc:	460e      	mov	r6, r1
    debe:	b08c      	sub	sp, #48	; 0x30
    dec0:	4614      	mov	r4, r2
    dec2:	4601      	mov	r1, r0
    dec4:	461d      	mov	r5, r3
    dec6:	2210      	movs	r2, #16
    dec8:	4668      	mov	r0, sp
    deca:	f000 f9b8 	bl	e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dece:	2210      	movs	r2, #16
    ded0:	4631      	mov	r1, r6
    ded2:	a804      	add	r0, sp, #16
    ded4:	f000 f9b3 	bl	e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ded8:	4668      	mov	r0, sp
    deda:	f7ff ff16 	bl	dd0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dede:	a908      	add	r1, sp, #32
    dee0:	f04f 0210 	mov.w	r2, #16
    dee4:	4628      	mov	r0, r5
    dee6:	b11c      	cbz	r4, def0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dee8:	f000 f9a9 	bl	e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    deec:	b00c      	add	sp, #48	; 0x30
    deee:	bd70      	pop	{r4, r5, r6, pc}
    def0:	f7fe fdf7 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    def4:	e7fa      	b.n	deec <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    def6:	0781      	lsls	r1, r0, #30
    def8:	d501      	bpl.n	defe <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    defa:	2002      	movs	r0, #2
    defc:	4770      	bx	lr
    defe:	07c0      	lsls	r0, r0, #31
    df00:	d0fc      	beq.n	defc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    df02:	2001      	movs	r0, #1
    df04:	4770      	bx	lr

0000df06 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    df06:	b530      	push	{r4, r5, lr}
    df08:	4605      	mov	r5, r0
    df0a:	7900      	ldrb	r0, [r0, #4]
    df0c:	0940      	lsrs	r0, r0, #5
    df0e:	d10e      	bne.n	df2e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    df10:	2400      	movs	r4, #0
    df12:	4623      	mov	r3, r4
    df14:	5ce8      	ldrb	r0, [r5, r3]
    df16:	f000 f855 	bl	dfc4 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    df1a:	1c5b      	adds	r3, r3, #1
    df1c:	4420      	add	r0, r4
    df1e:	b2db      	uxtb	r3, r3
    df20:	b2c4      	uxtb	r4, r0
    df22:	2b05      	cmp	r3, #5
    df24:	d3f6      	bcc.n	df14 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    df26:	2c01      	cmp	r4, #1
    df28:	d901      	bls.n	df2e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    df2a:	2001      	movs	r0, #1
    df2c:	bd30      	pop	{r4, r5, pc}
    df2e:	2000      	movs	r0, #0
    df30:	bd30      	pop	{r4, r5, pc}

0000df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    df32:	b510      	push	{r4, lr}
    df34:	460c      	mov	r4, r1
    df36:	2100      	movs	r1, #0
    df38:	f7ff fe91 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    df3c:	6060      	str	r0, [r4, #4]
    df3e:	b110      	cbz	r0, df46 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    df40:	2000      	movs	r0, #0
    df42:	7020      	strb	r0, [r4, #0]
    df44:	bd10      	pop	{r4, pc}
    df46:	2002      	movs	r0, #2
    df48:	bd10      	pop	{r4, pc}

0000df4a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    df4a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df4e:	4348      	muls	r0, r1
    df50:	4770      	bx	lr

0000df52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    df52:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df56:	fbb0 f0f1 	udiv	r0, r0, r1
    df5a:	b280      	uxth	r0, r0
    df5c:	4770      	bx	lr

0000df5e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    df5e:	b570      	push	{r4, r5, r6, lr}
    df60:	4604      	mov	r4, r0
    df62:	4290      	cmp	r0, r2
    df64:	d20b      	bcs.n	df7e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    df66:	1b10      	subs	r0, r2, r4
    df68:	2865      	cmp	r0, #101	; 0x65
    df6a:	d200      	bcs.n	df6e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    df6c:	2065      	movs	r0, #101	; 0x65
    df6e:	1825      	adds	r5, r4, r0
    df70:	428d      	cmp	r5, r1
    df72:	d803      	bhi.n	df7c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    df74:	2104      	movs	r1, #4
    df76:	f7f3 fa57 	bl	1428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    df7a:	b108      	cbz	r0, df80 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    df7c:	4620      	mov	r0, r4
    df7e:	bd70      	pop	{r4, r5, r6, pc}
    df80:	4628      	mov	r0, r5
    df82:	bd70      	pop	{r4, r5, r6, pc}

0000df84 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    df84:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    df88:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    df8c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    df90:	4408      	add	r0, r1
    df92:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    df96:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    df9a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    df9e:	4408      	add	r0, r1
    dfa0:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    dfa4:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    dfa8:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    dfac:	4408      	add	r0, r1
    dfae:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    dfb2:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    dfb6:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    dfba:	4408      	add	r0, r1
    dfbc:	b281      	uxth	r1, r0
    dfbe:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    dfc2:	4770      	bx	lr

0000dfc4 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    dfc4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    dfc8:	2255      	movs	r2, #85	; 0x55
    dfca:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    dfce:	4408      	add	r0, r1
    dfd0:	f000 0133 	and.w	r1, r0, #51	; 0x33
    dfd4:	2233      	movs	r2, #51	; 0x33
    dfd6:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    dfda:	4408      	add	r0, r1
    dfdc:	f000 010f 	and.w	r1, r0, #15
    dfe0:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    dfe4:	4770      	bx	lr

0000dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dfe6:	b510      	push	{r4, lr}
    dfe8:	f1a2 030f 	sub.w	r3, r2, #15
    dfec:	290c      	cmp	r1, #12
    dfee:	d24f      	bcs.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dff0:	e8df f001 	tbb	[pc, r1]
    dff4:	120d0806 	.word	0x120d0806
    dff8:	2f271815 	.word	0x2f271815
    dffc:	3d354c32 	.word	0x3d354c32
    e000:	b3a2      	cbz	r2, e06c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    e002:	e045      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e004:	2a07      	cmp	r2, #7
    e006:	d045      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e008:	2a08      	cmp	r2, #8
    e00a:	d043      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e00c:	e040      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e00e:	2a0c      	cmp	r2, #12
    e010:	d040      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e012:	2a0b      	cmp	r2, #11
    e014:	d03e      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e016:	e03b      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e018:	2a0d      	cmp	r2, #13
    e01a:	d03b      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e01c:	e038      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e01e:	2b0c      	cmp	r3, #12
    e020:	d938      	bls.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e022:	e035      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e024:	2a12      	cmp	r2, #18
    e026:	d035      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e028:	2a11      	cmp	r2, #17
    e02a:	d033      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e02c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e030:	b120      	cbz	r0, e03c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    e032:	2a12      	cmp	r2, #18
    e034:	d32c      	bcc.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e036:	2a1a      	cmp	r2, #26
    e038:	d92c      	bls.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e03a:	e029      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e03c:	2a16      	cmp	r2, #22
    e03e:	d2fa      	bcs.n	e036 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    e040:	e026      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e042:	2b03      	cmp	r3, #3
    e044:	d926      	bls.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e046:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e04a:	b308      	cbz	r0, e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e04c:	2a1b      	cmp	r2, #27
    e04e:	d921      	bls.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e050:	e01e      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e052:	2a04      	cmp	r2, #4
    e054:	d01e      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e056:	e01b      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e058:	2a01      	cmp	r2, #1
    e05a:	d01b      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e05c:	e018      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e05e:	2a1c      	cmp	r2, #28
    e060:	d018      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e062:	2a1d      	cmp	r2, #29
    e064:	d016      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e066:	2a1e      	cmp	r2, #30
    e068:	d014      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e06a:	e011      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e06c:	e012      	b.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e06e:	2a1f      	cmp	r2, #31
    e070:	d010      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e072:	2a20      	cmp	r2, #32
    e074:	d00e      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e076:	2a21      	cmp	r2, #33	; 0x21
    e078:	d00c      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e07a:	2a22      	cmp	r2, #34	; 0x22
    e07c:	d00a      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e07e:	2a23      	cmp	r2, #35	; 0x23
    e080:	d008      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e082:	2a24      	cmp	r2, #36	; 0x24
    e084:	d006      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e086:	2a26      	cmp	r2, #38	; 0x26
    e088:	d004      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e08a:	e001      	b.n	e090 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e08c:	2a05      	cmp	r2, #5
    e08e:	d001      	beq.n	e094 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e090:	2000      	movs	r0, #0
    e092:	bd10      	pop	{r4, pc}
    e094:	2001      	movs	r0, #1
    e096:	bd10      	pop	{r4, pc}

0000e098 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e098:	280c      	cmp	r0, #12
    e09a:	d013      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e09c:	280b      	cmp	r0, #11
    e09e:	d011      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0a0:	280d      	cmp	r0, #13
    e0a2:	d00f      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0a4:	281f      	cmp	r0, #31
    e0a6:	d00d      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0a8:	2820      	cmp	r0, #32
    e0aa:	d00b      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0ac:	2821      	cmp	r0, #33	; 0x21
    e0ae:	d009      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0b0:	2822      	cmp	r0, #34	; 0x22
    e0b2:	d007      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0b4:	2823      	cmp	r0, #35	; 0x23
    e0b6:	d005      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0b8:	2824      	cmp	r0, #36	; 0x24
    e0ba:	d003      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0bc:	2826      	cmp	r0, #38	; 0x26
    e0be:	d001      	beq.n	e0c4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e0c0:	2000      	movs	r0, #0
    e0c2:	4770      	bx	lr
    e0c4:	2001      	movs	r0, #1
    e0c6:	4770      	bx	lr

0000e0c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e0c8:	f011 0f0c 	tst.w	r1, #12
    e0cc:	d016      	beq.n	e0fc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e0ce:	074a      	lsls	r2, r1, #29
    e0d0:	f44f 7116 	mov.w	r1, #600	; 0x258
    e0d4:	2a00      	cmp	r2, #0
    e0d6:	da02      	bge.n	e0de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e0d8:	f04f 0210 	mov.w	r2, #16
    e0dc:	e001      	b.n	e0e2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e0de:	f04f 0240 	mov.w	r2, #64	; 0x40
    e0e2:	da01      	bge.n	e0e8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e0e4:	f04f 0196 	mov.w	r1, #150	; 0x96
    e0e8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e0ec:	eba0 0301 	sub.w	r3, r0, r1
    e0f0:	4288      	cmp	r0, r1
    e0f2:	d910      	bls.n	e116 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e0f4:	fb93 f0f2 	sdiv	r0, r3, r2
    e0f8:	b280      	uxth	r0, r0
    e0fa:	4770      	bx	lr
    e0fc:	2902      	cmp	r1, #2
    e0fe:	d002      	beq.n	e106 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    e100:	2870      	cmp	r0, #112	; 0x70
    e102:	d80a      	bhi.n	e11a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    e104:	e007      	b.n	e116 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e106:	283c      	cmp	r0, #60	; 0x3c
    e108:	d905      	bls.n	e116 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e10a:	383c      	subs	r0, #60	; 0x3c
    e10c:	17c1      	asrs	r1, r0, #31
    e10e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e112:	1080      	asrs	r0, r0, #2
    e114:	e7f0      	b.n	e0f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e116:	2000      	movs	r0, #0
    e118:	e7ee      	b.n	e0f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e11a:	3870      	subs	r0, #112	; 0x70
    e11c:	17c1      	asrs	r1, r0, #31
    e11e:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e122:	10c0      	asrs	r0, r0, #3
    e124:	e7e8      	b.n	e0f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000e126 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e126:	6809      	ldr	r1, [r1, #0]
    e128:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    e12c:	4770      	bx	lr

0000e12e <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    e12e:	2801      	cmp	r0, #1
    e130:	d002      	beq.n	e138 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e132:	2802      	cmp	r0, #2
    e134:	d000      	beq.n	e138 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e136:	2000      	movs	r0, #0
    e138:	4770      	bx	lr

0000e13a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e13a:	b510      	push	{r4, lr}
    e13c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e140:	2901      	cmp	r1, #1
    e142:	d006      	beq.n	e152 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e144:	2902      	cmp	r1, #2
    e146:	d005      	beq.n	e154 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e148:	f240 31b1 	movw	r1, #945	; 0x3b1
    e14c:	2029      	movs	r0, #41	; 0x29
    e14e:	f7f5 fea9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e152:	b108      	cbz	r0, e158 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e154:	4610      	mov	r0, r2
    e156:	bd10      	pop	{r4, pc}
    e158:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e15c:	bd10      	pop	{r4, pc}

0000e15e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    e15e:	b530      	push	{r4, r5, lr}
    e160:	242a      	movs	r4, #42	; 0x2a
    e162:	2523      	movs	r5, #35	; 0x23
    e164:	2a16      	cmp	r2, #22
    e166:	d105      	bne.n	e174 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    e168:	280c      	cmp	r0, #12
    e16a:	d007      	beq.n	e17c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e16c:	280d      	cmp	r0, #13
    e16e:	d005      	beq.n	e17c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e170:	281f      	cmp	r0, #31
    e172:	d005      	beq.n	e180 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    e174:	b171      	cbz	r1, e194 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    e176:	2a16      	cmp	r2, #22
    e178:	d10c      	bne.n	e194 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    e17a:	e004      	b.n	e186 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    e17c:	701c      	strb	r4, [r3, #0]
    e17e:	e000      	b.n	e182 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    e180:	701d      	strb	r5, [r3, #0]
    e182:	2001      	movs	r0, #1
    e184:	bd30      	pop	{r4, r5, pc}
    e186:	7808      	ldrb	r0, [r1, #0]
    e188:	2801      	cmp	r0, #1
    e18a:	d0f7      	beq.n	e17c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e18c:	2800      	cmp	r0, #0
    e18e:	d0f5      	beq.n	e17c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e190:	2816      	cmp	r0, #22
    e192:	d0f5      	beq.n	e180 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    e194:	2000      	movs	r0, #0
    e196:	bd30      	pop	{r4, r5, pc}

0000e198 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e19a:	b2cf      	uxtb	r7, r1
    e19c:	4606      	mov	r6, r0
    e19e:	f3c1 2407 	ubfx	r4, r1, #8, #8
    e1a2:	4621      	mov	r1, r4
    e1a4:	4638      	mov	r0, r7
    e1a6:	f000 f8ca 	bl	e33e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    e1aa:	b2f5      	uxtb	r5, r6
    e1ac:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e1b0:	b920      	cbnz	r0, e1bc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    e1b2:	4631      	mov	r1, r6
    e1b4:	4628      	mov	r0, r5
    e1b6:	f000 f8c2 	bl	e33e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    e1ba:	b140      	cbz	r0, e1ce <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    e1bc:	4027      	ands	r7, r4
    e1be:	4035      	ands	r5, r6
    e1c0:	403d      	ands	r5, r7
    e1c2:	4644      	mov	r4, r8
    e1c4:	f365 0407 	bfi	r4, r5, #0, #8
    e1c8:	f365 240f 	bfi	r4, r5, #8, #8
    e1cc:	e006      	b.n	e1dc <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    e1ce:	4025      	ands	r5, r4
    e1d0:	4644      	mov	r4, r8
    e1d2:	f365 0407 	bfi	r4, r5, #0, #8
    e1d6:	403e      	ands	r6, r7
    e1d8:	f366 240f 	bfi	r4, r6, #8, #8
    e1dc:	b2e0      	uxtb	r0, r4
    e1de:	f7ff fe8a 	bl	def6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e1e2:	f88d 0000 	strb.w	r0, [sp]
    e1e6:	f3c4 2007 	ubfx	r0, r4, #8, #8
    e1ea:	f7ff fe84 	bl	def6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e1ee:	f88d 0001 	strb.w	r0, [sp, #1]
    e1f2:	f8bd 0000 	ldrh.w	r0, [sp]
    e1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1f8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1fc:	460c      	mov	r4, r1
    e1fe:	4605      	mov	r5, r0
    e200:	68c6      	ldr	r6, [r0, #12]
    e202:	f7f3 fd6b 	bl	1cdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e206:	b198      	cbz	r0, e230 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    e208:	b1bc      	cbz	r4, e23a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e20a:	4630      	mov	r0, r6
    e20c:	68e9      	ldr	r1, [r5, #12]
    e20e:	f7f3 fa59 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e212:	2800      	cmp	r0, #0
    e214:	dd11      	ble.n	e23a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e216:	4420      	add	r0, r4
    e218:	1e40      	subs	r0, r0, #1
    e21a:	fbb0 f7f4 	udiv	r7, r0, r4
    e21e:	fb07 f104 	mul.w	r1, r7, r4
    e222:	4630      	mov	r0, r6
    e224:	f7f3 fa1c 	bl	1660 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e228:	60e8      	str	r0, [r5, #12]
    e22a:	4638      	mov	r0, r7
    e22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e230:	f240 2136 	movw	r1, #566	; 0x236
    e234:	2029      	movs	r0, #41	; 0x29
    e236:	f7f5 fe35 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e23a:	2000      	movs	r0, #0
    e23c:	e7f6      	b.n	e22c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000e23e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e23e:	b530      	push	{r4, r5, lr}
    e240:	4613      	mov	r3, r2
    e242:	e006      	b.n	e252 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e244:	18cc      	adds	r4, r1, r3
    e246:	1ad5      	subs	r5, r2, r3
    e248:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e24c:	1e5b      	subs	r3, r3, #1
    e24e:	5544      	strb	r4, [r0, r5]
    e250:	b2db      	uxtb	r3, r3
    e252:	2b00      	cmp	r3, #0
    e254:	d1f6      	bne.n	e244 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e256:	bd30      	pop	{r4, r5, pc}

0000e258 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e258:	b538      	push	{r3, r4, r5, lr}
    e25a:	4605      	mov	r5, r0
    e25c:	460c      	mov	r4, r1
    e25e:	4668      	mov	r0, sp
    e260:	f7fd fce6 	bl	bc30 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e264:	b310      	cbz	r0, e2ac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e266:	f99d 0000 	ldrsb.w	r0, [sp]
    e26a:	7260      	strb	r0, [r4, #9]
    e26c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e270:	72a1      	strb	r1, [r4, #10]
    e272:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e276:	2200      	movs	r2, #0
    e278:	1a41      	subs	r1, r0, r1
    e27a:	d500      	bpl.n	e27e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e27c:	4249      	negs	r1, r1
    e27e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    e282:	428b      	cmp	r3, r1
    e284:	dc10      	bgt.n	e2a8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e286:	2bff      	cmp	r3, #255	; 0xff
    e288:	d00e      	beq.n	e2a8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e28a:	7b21      	ldrb	r1, [r4, #12]
    e28c:	1c49      	adds	r1, r1, #1
    e28e:	b2c9      	uxtb	r1, r1
    e290:	7321      	strb	r1, [r4, #12]
    e292:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e296:	4299      	cmp	r1, r3
    e298:	d802      	bhi.n	e2a0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e29a:	7ae1      	ldrb	r1, [r4, #11]
    e29c:	297f      	cmp	r1, #127	; 0x7f
    e29e:	d103      	bne.n	e2a8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e2a0:	72e0      	strb	r0, [r4, #11]
    e2a2:	2000      	movs	r0, #0
    e2a4:	7320      	strb	r0, [r4, #12]
    e2a6:	2201      	movs	r2, #1
    e2a8:	4610      	mov	r0, r2
    e2aa:	bd38      	pop	{r3, r4, r5, pc}
    e2ac:	207f      	movs	r0, #127	; 0x7f
    e2ae:	7260      	strb	r0, [r4, #9]
    e2b0:	2000      	movs	r0, #0
    e2b2:	bd38      	pop	{r3, r4, r5, pc}

0000e2b4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e2b4:	2300      	movs	r3, #0
    e2b6:	6283      	str	r3, [r0, #40]	; 0x28
    e2b8:	8602      	strh	r2, [r0, #48]	; 0x30
    e2ba:	f240 2371 	movw	r3, #625	; 0x271
    e2be:	435a      	muls	r2, r3
    e2c0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e2c4:	1e52      	subs	r2, r2, #1
    e2c6:	fbb2 f1f1 	udiv	r1, r2, r1
    e2ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    e2cc:	4770      	bx	lr

0000e2ce <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e2ce:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2d2:	4348      	muls	r0, r1
    e2d4:	4770      	bx	lr

0000e2d6 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    e2d6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2da:	fbb0 f0f1 	udiv	r0, r0, r1
    e2de:	b280      	uxth	r0, r0
    e2e0:	4770      	bx	lr

0000e2e2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e2e2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2e6:	fb10 f001 	smulbb	r0, r0, r1
    e2ea:	4770      	bx	lr

0000e2ec <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    e2ec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2f0:	fbb0 f0f1 	udiv	r0, r0, r1
    e2f4:	b2c0      	uxtb	r0, r0
    e2f6:	4770      	bx	lr

0000e2f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e2f8:	b510      	push	{r4, lr}
    e2fa:	2300      	movs	r3, #0
    e2fc:	461a      	mov	r2, r3
    e2fe:	e003      	b.n	e308 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e300:	5c84      	ldrb	r4, [r0, r2]
    e302:	4323      	orrs	r3, r4
    e304:	1c52      	adds	r2, r2, #1
    e306:	b2d2      	uxtb	r2, r2
    e308:	428a      	cmp	r2, r1
    e30a:	d3f9      	bcc.n	e300 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e30c:	b10b      	cbz	r3, e312 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e30e:	2000      	movs	r0, #0
    e310:	bd10      	pop	{r4, pc}
    e312:	2001      	movs	r0, #1
    e314:	bd10      	pop	{r4, pc}
    e316:	b510      	push	{r4, lr}
    e318:	4604      	mov	r4, r0
    e31a:	f7fc fef5 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e31e:	f644 112b 	movw	r1, #18731	; 0x492b
    e322:	4008      	ands	r0, r1
    e324:	2101      	movs	r1, #1
    e326:	7561      	strb	r1, [r4, #21]
    e328:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    e32c:	0a00      	lsrs	r0, r0, #8
    e32e:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    e332:	20fe      	movs	r0, #254	; 0xfe
    e334:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    e338:	207f      	movs	r0, #127	; 0x7f
    e33a:	7260      	strb	r0, [r4, #9]
    e33c:	bd10      	pop	{r4, pc}
    e33e:	2801      	cmp	r0, #1
    e340:	d002      	beq.n	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    e342:	2802      	cmp	r0, #2
    e344:	d003      	beq.n	e34e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    e346:	e004      	b.n	e352 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    e348:	2901      	cmp	r1, #1
    e34a:	d004      	beq.n	e356 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    e34c:	e001      	b.n	e352 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    e34e:	2902      	cmp	r1, #2
    e350:	d001      	beq.n	e356 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    e352:	2000      	movs	r0, #0
    e354:	4770      	bx	lr
    e356:	2001      	movs	r0, #1
    e358:	4770      	bx	lr

0000e35a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e35a:	b510      	push	{r4, lr}
    e35c:	4604      	mov	r4, r0
    e35e:	f890 0020 	ldrb.w	r0, [r0, #32]
    e362:	b108      	cbz	r0, e368 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e364:	2825      	cmp	r0, #37	; 0x25
    e366:	d901      	bls.n	e36c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e368:	2012      	movs	r0, #18
    e36a:	bd10      	pop	{r4, pc}
    e36c:	b12a      	cbz	r2, e37a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e36e:	7d60      	ldrb	r0, [r4, #21]
    e370:	b128      	cbz	r0, e37e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e372:	2801      	cmp	r0, #1
    e374:	d009      	beq.n	e38a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e376:	201f      	movs	r0, #31
    e378:	bd10      	pop	{r4, pc}
    e37a:	2000      	movs	r0, #0
    e37c:	bd10      	pop	{r4, pc}
    e37e:	4620      	mov	r0, r4
    e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e384:	4611      	mov	r1, r2
    e386:	f7f7 bd77 	b.w	5e78 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e38a:	88a2      	ldrh	r2, [r4, #4]
    e38c:	6909      	ldr	r1, [r1, #16]
    e38e:	f104 0015 	add.w	r0, r4, #21
    e392:	f7f7 fd1d 	bl	5dd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e396:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e39a:	e7ee      	b.n	e37a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e39c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e39c:	b530      	push	{r4, r5, lr}
    e39e:	1c42      	adds	r2, r0, #1
    e3a0:	428a      	cmp	r2, r1
    e3a2:	d004      	beq.n	e3ae <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e3a4:	680a      	ldr	r2, [r1, #0]
    e3a6:	f8c0 2001 	str.w	r2, [r0, #1]
    e3aa:	7909      	ldrb	r1, [r1, #4]
    e3ac:	7141      	strb	r1, [r0, #5]
    e3ae:	7941      	ldrb	r1, [r0, #5]
    e3b0:	f001 011f 	and.w	r1, r1, #31
    e3b4:	7141      	strb	r1, [r0, #5]
    e3b6:	2100      	movs	r1, #0
    e3b8:	72c1      	strb	r1, [r0, #11]
    e3ba:	1843      	adds	r3, r0, r1
    e3bc:	1c49      	adds	r1, r1, #1
    e3be:	785c      	ldrb	r4, [r3, #1]
    e3c0:	b2c9      	uxtb	r1, r1
    e3c2:	f004 0201 	and.w	r2, r4, #1
    e3c6:	0864      	lsrs	r4, r4, #1
    e3c8:	f004 0501 	and.w	r5, r4, #1
    e3cc:	4415      	add	r5, r2
    e3ce:	0862      	lsrs	r2, r4, #1
    e3d0:	f002 0401 	and.w	r4, r2, #1
    e3d4:	442c      	add	r4, r5
    e3d6:	0852      	lsrs	r2, r2, #1
    e3d8:	f002 0501 	and.w	r5, r2, #1
    e3dc:	442c      	add	r4, r5
    e3de:	0852      	lsrs	r2, r2, #1
    e3e0:	f002 0501 	and.w	r5, r2, #1
    e3e4:	442c      	add	r4, r5
    e3e6:	0852      	lsrs	r2, r2, #1
    e3e8:	f002 0501 	and.w	r5, r2, #1
    e3ec:	442c      	add	r4, r5
    e3ee:	0852      	lsrs	r2, r2, #1
    e3f0:	f002 0501 	and.w	r5, r2, #1
    e3f4:	442c      	add	r4, r5
    e3f6:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e3fa:	719a      	strb	r2, [r3, #6]
    e3fc:	7ac3      	ldrb	r3, [r0, #11]
    e3fe:	2905      	cmp	r1, #5
    e400:	441a      	add	r2, r3
    e402:	72c2      	strb	r2, [r0, #11]
    e404:	d3d9      	bcc.n	e3ba <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e406:	bd30      	pop	{r4, r5, pc}

0000e408 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    e408:	68c0      	ldr	r0, [r0, #12]
    e40a:	6008      	str	r0, [r1, #0]
    e40c:	4770      	bx	lr

0000e40e <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    e40e:	6842      	ldr	r2, [r0, #4]
    e410:	600a      	str	r2, [r1, #0]
    e412:	6880      	ldr	r0, [r0, #8]
    e414:	6048      	str	r0, [r1, #4]
    e416:	4770      	bx	lr

0000e418 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    e418:	6842      	ldr	r2, [r0, #4]
    e41a:	600a      	str	r2, [r1, #0]
    e41c:	6880      	ldr	r0, [r0, #8]
    e41e:	6048      	str	r0, [r1, #4]
    e420:	4770      	bx	lr

0000e422 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e422:	7800      	ldrb	r0, [r0, #0]
    e424:	f000 0003 	and.w	r0, r0, #3
    e428:	4770      	bx	lr

0000e42a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e42a:	8880      	ldrh	r0, [r0, #4]
    e42c:	4770      	bx	lr

0000e42e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e42e:	88c0      	ldrh	r0, [r0, #6]
    e430:	4770      	bx	lr

0000e432 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e432:	8900      	ldrh	r0, [r0, #8]
    e434:	4770      	bx	lr

0000e436 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e436:	8940      	ldrh	r0, [r0, #10]
    e438:	4770      	bx	lr

0000e43a <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e43a:	7900      	ldrb	r0, [r0, #4]
    e43c:	4770      	bx	lr

0000e43e <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e43e:	7900      	ldrb	r0, [r0, #4]
    e440:	4770      	bx	lr

0000e442 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e442:	8901      	ldrh	r1, [r0, #8]
    e444:	291b      	cmp	r1, #27
    e446:	d30c      	bcc.n	e462 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e448:	8941      	ldrh	r1, [r0, #10]
    e44a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e44e:	4291      	cmp	r1, r2
    e450:	d307      	bcc.n	e462 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e452:	8881      	ldrh	r1, [r0, #4]
    e454:	291b      	cmp	r1, #27
    e456:	d304      	bcc.n	e462 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e458:	88c0      	ldrh	r0, [r0, #6]
    e45a:	4290      	cmp	r0, r2
    e45c:	d301      	bcc.n	e462 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e45e:	2001      	movs	r0, #1
    e460:	4770      	bx	lr
    e462:	2000      	movs	r0, #0
    e464:	4770      	bx	lr

0000e466 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e466:	b510      	push	{r4, lr}
    e468:	29fb      	cmp	r1, #251	; 0xfb
    e46a:	d904      	bls.n	e476 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e46c:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e470:	202a      	movs	r0, #42	; 0x2a
    e472:	f7f5 fd17 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e476:	7041      	strb	r1, [r0, #1]
    e478:	bd10      	pop	{r4, pc}

0000e47a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e47a:	7901      	ldrb	r1, [r0, #4]
    e47c:	0749      	lsls	r1, r1, #29
    e47e:	d004      	beq.n	e48a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e480:	7940      	ldrb	r0, [r0, #5]
    e482:	0740      	lsls	r0, r0, #29
    e484:	d001      	beq.n	e48a <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e486:	2001      	movs	r0, #1
    e488:	4770      	bx	lr
    e48a:	2000      	movs	r0, #0
    e48c:	4770      	bx	lr

0000e48e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    e48e:	7901      	ldrb	r1, [r0, #4]
    e490:	0749      	lsls	r1, r1, #29
    e492:	d004      	beq.n	e49e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e494:	7940      	ldrb	r0, [r0, #5]
    e496:	0740      	lsls	r0, r0, #29
    e498:	d001      	beq.n	e49e <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e49a:	2001      	movs	r0, #1
    e49c:	4770      	bx	lr
    e49e:	2000      	movs	r0, #0
    e4a0:	4770      	bx	lr

0000e4a2 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e4a2:	7900      	ldrb	r0, [r0, #4]
    e4a4:	4770      	bx	lr

0000e4a6 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e4a6:	7940      	ldrb	r0, [r0, #5]
    e4a8:	4770      	bx	lr

0000e4aa <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e4aa:	7101      	strb	r1, [r0, #4]
    e4ac:	4770      	bx	lr

0000e4ae <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e4ae:	7141      	strb	r1, [r0, #5]
    e4b0:	4770      	bx	lr

0000e4b2 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    e4b2:	680a      	ldr	r2, [r1, #0]
    e4b4:	6042      	str	r2, [r0, #4]
    e4b6:	7909      	ldrb	r1, [r1, #4]
    e4b8:	7201      	strb	r1, [r0, #8]
    e4ba:	4770      	bx	lr

0000e4bc <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    e4bc:	72c1      	strb	r1, [r0, #11]
    e4be:	0a09      	lsrs	r1, r1, #8
    e4c0:	7301      	strb	r1, [r0, #12]
    e4c2:	4770      	bx	lr

0000e4c4 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    e4c4:	8809      	ldrh	r1, [r1, #0]
    e4c6:	8181      	strh	r1, [r0, #12]
    e4c8:	4770      	bx	lr

0000e4ca <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    e4ca:	6809      	ldr	r1, [r1, #0]
    e4cc:	f8c0 1016 	str.w	r1, [r0, #22]
    e4d0:	4770      	bx	lr

0000e4d2 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    e4d2:	680a      	ldr	r2, [r1, #0]
    e4d4:	6042      	str	r2, [r0, #4]
    e4d6:	6849      	ldr	r1, [r1, #4]
    e4d8:	6081      	str	r1, [r0, #8]
    e4da:	4770      	bx	lr

0000e4dc <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    e4dc:	680a      	ldr	r2, [r1, #0]
    e4de:	f840 2f0e 	str.w	r2, [r0, #14]!
    e4e2:	6849      	ldr	r1, [r1, #4]
    e4e4:	6041      	str	r1, [r0, #4]
    e4e6:	4770      	bx	lr

0000e4e8 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e4e8:	680a      	ldr	r2, [r1, #0]
    e4ea:	6042      	str	r2, [r0, #4]
    e4ec:	6849      	ldr	r1, [r1, #4]
    e4ee:	6081      	str	r1, [r0, #8]
    e4f0:	4770      	bx	lr

0000e4f2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e4f2:	7802      	ldrb	r2, [r0, #0]
    e4f4:	f001 0103 	and.w	r1, r1, #3
    e4f8:	f022 0203 	bic.w	r2, r2, #3
    e4fc:	430a      	orrs	r2, r1
    e4fe:	7002      	strb	r2, [r0, #0]
    e500:	4770      	bx	lr

0000e502 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    e502:	7101      	strb	r1, [r0, #4]
    e504:	4770      	bx	lr

0000e506 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e506:	7101      	strb	r1, [r0, #4]
    e508:	0a09      	lsrs	r1, r1, #8
    e50a:	7141      	strb	r1, [r0, #5]
    e50c:	4770      	bx	lr

0000e50e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e50e:	7181      	strb	r1, [r0, #6]
    e510:	0a09      	lsrs	r1, r1, #8
    e512:	71c1      	strb	r1, [r0, #7]
    e514:	4770      	bx	lr

0000e516 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e516:	7201      	strb	r1, [r0, #8]
    e518:	0a09      	lsrs	r1, r1, #8
    e51a:	7241      	strb	r1, [r0, #9]
    e51c:	4770      	bx	lr

0000e51e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e51e:	7281      	strb	r1, [r0, #10]
    e520:	0a09      	lsrs	r1, r1, #8
    e522:	72c1      	strb	r1, [r0, #11]
    e524:	4770      	bx	lr

0000e526 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    e526:	7181      	strb	r1, [r0, #6]
    e528:	0a09      	lsrs	r1, r1, #8
    e52a:	71c1      	strb	r1, [r0, #7]
    e52c:	4770      	bx	lr

0000e52e <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    e52e:	7141      	strb	r1, [r0, #5]
    e530:	4770      	bx	lr

0000e532 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    e532:	7841      	ldrb	r1, [r0, #1]
    e534:	7800      	ldrb	r0, [r0, #0]
    e536:	f010 000f 	ands.w	r0, r0, #15
    e53a:	d005      	beq.n	e548 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e53c:	2801      	cmp	r0, #1
    e53e:	d007      	beq.n	e550 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    e540:	2802      	cmp	r0, #2
    e542:	d001      	beq.n	e548 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e544:	2806      	cmp	r0, #6
    e546:	d105      	bne.n	e554 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e548:	1f89      	subs	r1, r1, #6
    e54a:	291f      	cmp	r1, #31
    e54c:	d904      	bls.n	e558 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e54e:	e001      	b.n	e554 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e550:	290c      	cmp	r1, #12
    e552:	d001      	beq.n	e558 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e554:	2000      	movs	r0, #0
    e556:	4770      	bx	lr
    e558:	2001      	movs	r0, #1
    e55a:	4770      	bx	lr

0000e55c <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    e55c:	7800      	ldrb	r0, [r0, #0]
    e55e:	09c0      	lsrs	r0, r0, #7
    e560:	4770      	bx	lr

0000e562 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    e562:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e566:	600a      	str	r2, [r1, #0]
    e568:	8880      	ldrh	r0, [r0, #4]
    e56a:	8088      	strh	r0, [r1, #4]
    e56c:	4770      	bx	lr

0000e56e <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    e56e:	7800      	ldrb	r0, [r0, #0]
    e570:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e574:	4770      	bx	lr

0000e576 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    e576:	7801      	ldrb	r1, [r0, #0]
    e578:	f001 010f 	and.w	r1, r1, #15
    e57c:	2904      	cmp	r1, #4
    e57e:	d105      	bne.n	e58c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e580:	7840      	ldrb	r0, [r0, #1]
    e582:	1f80      	subs	r0, r0, #6
    e584:	281f      	cmp	r0, #31
    e586:	d801      	bhi.n	e58c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e588:	2001      	movs	r0, #1
    e58a:	4770      	bx	lr
    e58c:	2000      	movs	r0, #0
    e58e:	4770      	bx	lr

0000e590 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e590:	b510      	push	{r4, lr}
    e592:	7802      	ldrb	r2, [r0, #0]
    e594:	f001 030f 	and.w	r3, r1, #15
    e598:	f022 020f 	bic.w	r2, r2, #15
    e59c:	431a      	orrs	r2, r3
    e59e:	7002      	strb	r2, [r0, #0]
    e5a0:	2907      	cmp	r1, #7
    e5a2:	d20c      	bcs.n	e5be <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e5a4:	e8df f001 	tbb	[pc, r1]
    e5a8:	06040604 	.word	0x06040604
    e5ac:	00040804 	.word	0x00040804
    e5b0:	2106      	movs	r1, #6
    e5b2:	e002      	b.n	e5ba <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e5b4:	210c      	movs	r1, #12
    e5b6:	e000      	b.n	e5ba <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e5b8:	2122      	movs	r1, #34	; 0x22
    e5ba:	7041      	strb	r1, [r0, #1]
    e5bc:	bd10      	pop	{r4, pc}
    e5be:	216e      	movs	r1, #110	; 0x6e
    e5c0:	202a      	movs	r0, #42	; 0x2a
    e5c2:	f7f5 fc6f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5c6 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e5c6:	680a      	ldr	r2, [r1, #0]
    e5c8:	f840 2f09 	str.w	r2, [r0, #9]!
    e5cc:	8889      	ldrh	r1, [r1, #4]
    e5ce:	8081      	strh	r1, [r0, #4]
    e5d0:	4770      	bx	lr

0000e5d2 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e5d2:	7802      	ldrb	r2, [r0, #0]
    e5d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e5d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e5dc:	7002      	strb	r2, [r0, #0]
    e5de:	4770      	bx	lr

0000e5e0 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e5e0:	680a      	ldr	r2, [r1, #0]
    e5e2:	f840 2f03 	str.w	r2, [r0, #3]!
    e5e6:	8889      	ldrh	r1, [r1, #4]
    e5e8:	8081      	strh	r1, [r0, #4]
    e5ea:	4770      	bx	lr

0000e5ec <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e5ec:	7802      	ldrb	r2, [r0, #0]
    e5ee:	2340      	movs	r3, #64	; 0x40
    e5f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e5f4:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e5f8:	430a      	orrs	r2, r1
    e5fa:	7002      	strb	r2, [r0, #0]
    e5fc:	4770      	bx	lr

0000e5fe <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e5fe:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e602:	4604      	mov	r4, r0
    e604:	2000      	movs	r0, #0
    e606:	f7f5 fe31 	bl	426c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e60a:	2600      	movs	r6, #0
    e60c:	4605      	mov	r5, r0
    e60e:	4637      	mov	r7, r6
    e610:	e00e      	b.n	e630 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e612:	8820      	ldrh	r0, [r4, #0]
    e614:	1c40      	adds	r0, r0, #1
    e616:	b280      	uxth	r0, r0
    e618:	8020      	strh	r0, [r4, #0]
    e61a:	42a8      	cmp	r0, r5
    e61c:	d300      	bcc.n	e620 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e61e:	8027      	strh	r7, [r4, #0]
    e620:	8820      	ldrh	r0, [r4, #0]
    e622:	4669      	mov	r1, sp
    e624:	f7ff fc85 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e628:	2800      	cmp	r0, #0
    e62a:	d007      	beq.n	e63c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e62c:	1c76      	adds	r6, r6, #1
    e62e:	b2f6      	uxtb	r6, r6
    e630:	42ae      	cmp	r6, r5
    e632:	d3ee      	bcc.n	e612 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e634:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e638:	8020      	strh	r0, [r4, #0]
    e63a:	2012      	movs	r0, #18
    e63c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e640 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e640:	b510      	push	{r4, lr}
    e642:	7901      	ldrb	r1, [r0, #4]
    e644:	b119      	cbz	r1, e64e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e646:	2901      	cmp	r1, #1
    e648:	d006      	beq.n	e658 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e64a:	2000      	movs	r0, #0
    e64c:	bd10      	pop	{r4, pc}
    e64e:	8842      	ldrh	r2, [r0, #2]
    e650:	6883      	ldr	r3, [r0, #8]
    e652:	8800      	ldrh	r0, [r0, #0]
    e654:	2102      	movs	r1, #2
    e656:	e003      	b.n	e660 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e658:	8842      	ldrh	r2, [r0, #2]
    e65a:	6883      	ldr	r3, [r0, #8]
    e65c:	8800      	ldrh	r0, [r0, #0]
    e65e:	2101      	movs	r1, #1
    e660:	f7f7 fc9c 	bl	5f9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e664:	b908      	cbnz	r0, e66a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e666:	f7f7 fce7 	bl	6038 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e66a:	2001      	movs	r0, #1
    e66c:	bd10      	pop	{r4, pc}
    e66e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e672:	460e      	mov	r6, r1
    e674:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e678:	4617      	mov	r7, r2
    e67a:	39ff      	subs	r1, #255	; 0xff
    e67c:	d014      	beq.n	e6a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e67e:	8030      	strh	r0, [r6, #0]
    e680:	2100      	movs	r1, #0
    e682:	7171      	strb	r1, [r6, #5]
    e684:	f7f6 f80c 	bl	46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e688:	4604      	mov	r4, r0
    e68a:	f7ff f912 	bl	d8b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e68e:	0005      	movs	r5, r0
    e690:	d00a      	beq.n	e6a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e692:	4620      	mov	r0, r4
    e694:	4629      	mov	r1, r5
    e696:	aa01      	add	r2, sp, #4
    e698:	f7ff f93c 	bl	d914 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e69c:	8070      	strh	r0, [r6, #2]
    e69e:	b130      	cbz	r0, e6ae <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e6a0:	28fb      	cmp	r0, #251	; 0xfb
    e6a2:	d906      	bls.n	e6b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e6a4:	21ae      	movs	r1, #174	; 0xae
    e6a6:	e026      	b.n	e6f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e6a8:	2000      	movs	r0, #0
    e6aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e6ae:	21ad      	movs	r1, #173	; 0xad
    e6b0:	e021      	b.n	e6f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e6b2:	9801      	ldr	r0, [sp, #4]
    e6b4:	f7ff feb5 	bl	e422 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e6b8:	2801      	cmp	r0, #1
    e6ba:	d003      	beq.n	e6c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e6bc:	2802      	cmp	r0, #2
    e6be:	d001      	beq.n	e6c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e6c0:	21bd      	movs	r1, #189	; 0xbd
    e6c2:	e018      	b.n	e6f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e6c4:	7130      	strb	r0, [r6, #4]
    e6c6:	4629      	mov	r1, r5
    e6c8:	8873      	ldrh	r3, [r6, #2]
    e6ca:	2503      	movs	r5, #3
    e6cc:	4620      	mov	r0, r4
    e6ce:	463a      	mov	r2, r7
    e6d0:	9500      	str	r5, [sp, #0]
    e6d2:	f7fe ffc5 	bl	d660 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e6d6:	4620      	mov	r0, r4
    e6d8:	60b7      	str	r7, [r6, #8]
    e6da:	f7ff f899 	bl	d810 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e6de:	b138      	cbz	r0, e6f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e6e0:	2100      	movs	r1, #0
    e6e2:	4620      	mov	r0, r4
    e6e4:	460a      	mov	r2, r1
    e6e6:	f7ff f9f3 	bl	dad0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e6ea:	b118      	cbz	r0, e6f4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e6ec:	2001      	movs	r0, #1
    e6ee:	e7dc      	b.n	e6aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e6f0:	21cd      	movs	r1, #205	; 0xcd
    e6f2:	e000      	b.n	e6f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e6f4:	21d2      	movs	r1, #210	; 0xd2
    e6f6:	202b      	movs	r0, #43	; 0x2b
    e6f8:	f7f5 fbd4 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e6fc:	f7f7 be98 	b.w	6430 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    e700:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e704:	4604      	mov	r4, r0
    e706:	2000      	movs	r0, #0
    e708:	f7f5 fdb0 	bl	426c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e70c:	4605      	mov	r5, r0
    e70e:	1c40      	adds	r0, r0, #1
    e710:	2600      	movs	r6, #0
    e712:	b2c7      	uxtb	r7, r0
    e714:	46b0      	mov	r8, r6
    e716:	e017      	b.n	e748 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    e718:	8820      	ldrh	r0, [r4, #0]
    e71a:	1c40      	adds	r0, r0, #1
    e71c:	b280      	uxth	r0, r0
    e71e:	8020      	strh	r0, [r4, #0]
    e720:	42b8      	cmp	r0, r7
    e722:	d302      	bcc.n	e72a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    e724:	4640      	mov	r0, r8
    e726:	f8a4 8000 	strh.w	r8, [r4]
    e72a:	b280      	uxth	r0, r0
    e72c:	42a8      	cmp	r0, r5
    e72e:	d304      	bcc.n	e73a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e730:	42b8      	cmp	r0, r7
    e732:	d202      	bcs.n	e73a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e734:	2000      	movs	r0, #0
    e736:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e73a:	4669      	mov	r1, sp
    e73c:	f7ff fbf9 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e740:	2800      	cmp	r0, #0
    e742:	d0f8      	beq.n	e736 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    e744:	1c76      	adds	r6, r6, #1
    e746:	b2f6      	uxtb	r6, r6
    e748:	42be      	cmp	r6, r7
    e74a:	d3e5      	bcc.n	e718 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    e74c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e750:	8020      	strh	r0, [r4, #0]
    e752:	2012      	movs	r0, #18
    e754:	e7ef      	b.n	e736 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000e756 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e756:	b570      	push	{r4, r5, r6, lr}
    e758:	8050      	strh	r0, [r2, #2]
    e75a:	890c      	ldrh	r4, [r1, #8]
    e75c:	8094      	strh	r4, [r2, #4]
    e75e:	898b      	ldrh	r3, [r1, #12]
    e760:	80d3      	strh	r3, [r2, #6]
    e762:	8948      	ldrh	r0, [r1, #10]
    e764:	8110      	strh	r0, [r2, #8]
    e766:	89cd      	ldrh	r5, [r1, #14]
    e768:	8155      	strh	r5, [r2, #10]
    e76a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e76c:	42ae      	cmp	r6, r5
    e76e:	d108      	bne.n	e782 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e770:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e772:	4285      	cmp	r5, r0
    e774:	d105      	bne.n	e782 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e776:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e778:	429d      	cmp	r5, r3
    e77a:	d102      	bne.n	e782 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e77c:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e77e:	42a3      	cmp	r3, r4
    e780:	d001      	beq.n	e786 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e782:	2301      	movs	r3, #1
    e784:	e000      	b.n	e788 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e786:	2300      	movs	r3, #0
    e788:	7313      	strb	r3, [r2, #12]
    e78a:	8548      	strh	r0, [r1, #42]	; 0x2a
    e78c:	8950      	ldrh	r0, [r2, #10]
    e78e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e790:	8890      	ldrh	r0, [r2, #4]
    e792:	8588      	strh	r0, [r1, #44]	; 0x2c
    e794:	88d0      	ldrh	r0, [r2, #6]
    e796:	8608      	strh	r0, [r1, #48]	; 0x30
    e798:	2001      	movs	r0, #1
    e79a:	7010      	strb	r0, [r2, #0]
    e79c:	bd70      	pop	{r4, r5, r6, pc}

0000e79e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e79e:	b510      	push	{r4, lr}
    e7a0:	888c      	ldrh	r4, [r1, #4]
    e7a2:	890a      	ldrh	r2, [r1, #8]
    e7a4:	884b      	ldrh	r3, [r1, #2]
    e7a6:	88c9      	ldrh	r1, [r1, #6]
    e7a8:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e7ac:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e7b0:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e7b4:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e7b8:	bd10      	pop	{r4, pc}

0000e7ba <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e7ba:	b570      	push	{r4, r5, r6, lr}
    e7bc:	4615      	mov	r5, r2
    e7be:	460c      	mov	r4, r1
    e7c0:	f000 f8c7 	bl	e952 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e7c4:	3096      	adds	r0, #150	; 0x96
    e7c6:	4428      	add	r0, r5
    e7c8:	42a0      	cmp	r0, r4
    e7ca:	d801      	bhi.n	e7d0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e7cc:	1a20      	subs	r0, r4, r0
    e7ce:	bd70      	pop	{r4, r5, r6, pc}
    e7d0:	2000      	movs	r0, #0
    e7d2:	bd70      	pop	{r4, r5, r6, pc}

0000e7d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7d8:	4604      	mov	r4, r0
    e7da:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e7dc:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e7de:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e7e2:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e7e6:	4285      	cmp	r5, r0
    e7e8:	d300      	bcc.n	e7ec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e7ea:	4605      	mov	r5, r0
    e7ec:	4620      	mov	r0, r4
    e7ee:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e7f2:	f000 f89e 	bl	e932 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e7f6:	4601      	mov	r1, r0
    e7f8:	86e5      	strh	r5, [r4, #54]	; 0x36
    e7fa:	8761      	strh	r1, [r4, #58]	; 0x3a
    e7fc:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e7fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e802:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e804:	4680      	mov	r8, r0
    e806:	42aa      	cmp	r2, r5
    e808:	d200      	bcs.n	e80c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e80a:	462a      	mov	r2, r5
    e80c:	428b      	cmp	r3, r1
    e80e:	d200      	bcs.n	e812 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e810:	460b      	mov	r3, r1
    e812:	8202      	strh	r2, [r0, #16]
    e814:	f8a8 3012 	strh.w	r3, [r8, #18]
    e818:	42bd      	cmp	r5, r7
    e81a:	d101      	bne.n	e820 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e81c:	42b1      	cmp	r1, r6
    e81e:	d001      	beq.n	e824 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e820:	2001      	movs	r0, #1
    e822:	e000      	b.n	e826 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e824:	2000      	movs	r0, #0
    e826:	4681      	mov	r9, r0
    e828:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e82c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e830:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e832:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e834:	4285      	cmp	r5, r0
    e836:	d300      	bcc.n	e83a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e838:	4605      	mov	r5, r0
    e83a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e83e:	4620      	mov	r0, r4
    e840:	f000 f87f 	bl	e942 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e844:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e848:	2902      	cmp	r1, #2
    e84a:	d108      	bne.n	e85e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e84c:	42af      	cmp	r7, r5
    e84e:	d200      	bcs.n	e852 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e850:	463d      	mov	r5, r7
    e852:	4286      	cmp	r6, r0
    e854:	d200      	bcs.n	e858 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e856:	4630      	mov	r0, r6
    e858:	2100      	movs	r1, #0
    e85a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e85e:	f8a8 5008 	strh.w	r5, [r8, #8]
    e862:	f8a8 000c 	strh.w	r0, [r8, #12]
    e866:	42bd      	cmp	r5, r7
    e868:	d101      	bne.n	e86e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e86a:	42b0      	cmp	r0, r6
    e86c:	d001      	beq.n	e872 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e86e:	2001      	movs	r0, #1
    e870:	e000      	b.n	e874 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e872:	2000      	movs	r0, #0
    e874:	ea40 0009 	orr.w	r0, r0, r9
    e878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e87c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e87c:	6840      	ldr	r0, [r0, #4]
    e87e:	4770      	bx	lr

0000e880 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e884:	4616      	mov	r6, r2
    e886:	460f      	mov	r7, r1
    e888:	4604      	mov	r4, r0
    e88a:	f000 f862 	bl	e952 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e88e:	4605      	mov	r5, r0
    e890:	463a      	mov	r2, r7
    e892:	68e1      	ldr	r1, [r4, #12]
    e894:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e896:	f000 f847 	bl	e928 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e89a:	19a9      	adds	r1, r5, r6
    e89c:	4281      	cmp	r1, r0
    e89e:	d300      	bcc.n	e8a2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e8a0:	4608      	mov	r0, r1
    e8a2:	6320      	str	r0, [r4, #48]	; 0x30
    e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e8a8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e8a8:	221b      	movs	r2, #27
    e8aa:	8402      	strh	r2, [r0, #32]
    e8ac:	8382      	strh	r2, [r0, #28]
    e8ae:	82c2      	strh	r2, [r0, #22]
    e8b0:	8282      	strh	r2, [r0, #20]
    e8b2:	8142      	strh	r2, [r0, #10]
    e8b4:	8202      	strh	r2, [r0, #16]
    e8b6:	8102      	strh	r2, [r0, #8]
    e8b8:	8542      	strh	r2, [r0, #42]	; 0x2a
    e8ba:	8582      	strh	r2, [r0, #44]	; 0x2c
    e8bc:	8482      	strh	r2, [r0, #36]	; 0x24
    e8be:	2900      	cmp	r1, #0
    e8c0:	d10a      	bne.n	e8d8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e8c2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e8c6:	8441      	strh	r1, [r0, #34]	; 0x22
    e8c8:	83c1      	strh	r1, [r0, #30]
    e8ca:	8341      	strh	r1, [r0, #26]
    e8cc:	8301      	strh	r1, [r0, #24]
    e8ce:	81c1      	strh	r1, [r0, #14]
    e8d0:	8241      	strh	r1, [r0, #18]
    e8d2:	8181      	strh	r1, [r0, #12]
    e8d4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e8d6:	8601      	strh	r1, [r0, #48]	; 0x30
    e8d8:	4770      	bx	lr

0000e8da <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e8da:	6800      	ldr	r0, [r0, #0]
    e8dc:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e8e0:	4290      	cmp	r0, r2
    e8e2:	d903      	bls.n	e8ec <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e8e4:	1a40      	subs	r0, r0, r1
    e8e6:	389c      	subs	r0, #156	; 0x9c
    e8e8:	0840      	lsrs	r0, r0, #1
    e8ea:	4770      	bx	lr
    e8ec:	2000      	movs	r0, #0
    e8ee:	4770      	bx	lr

0000e8f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e8f0:	b510      	push	{r4, lr}
    e8f2:	9c02      	ldr	r4, [sp, #8]
    e8f4:	8281      	strh	r1, [r0, #20]
    e8f6:	82c2      	strh	r2, [r0, #22]
    e8f8:	8303      	strh	r3, [r0, #24]
    e8fa:	8344      	strh	r4, [r0, #26]
    e8fc:	bd10      	pop	{r4, pc}

0000e8fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e8fe:	8050      	strh	r0, [r2, #2]
    e900:	8a88      	ldrh	r0, [r1, #20]
    e902:	8090      	strh	r0, [r2, #4]
    e904:	8ac8      	ldrh	r0, [r1, #22]
    e906:	80d0      	strh	r0, [r2, #6]
    e908:	8b08      	ldrh	r0, [r1, #24]
    e90a:	8110      	strh	r0, [r2, #8]
    e90c:	8b48      	ldrh	r0, [r1, #26]
    e90e:	8150      	strh	r0, [r2, #10]
    e910:	2001      	movs	r0, #1
    e912:	7010      	strb	r0, [r2, #0]
    e914:	4770      	bx	lr
    e916:	2902      	cmp	r1, #2
    e918:	d003      	beq.n	e922 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e91a:	00c0      	lsls	r0, r0, #3
    e91c:	3070      	adds	r0, #112	; 0x70
    e91e:	b280      	uxth	r0, r0
    e920:	4770      	bx	lr
    e922:	0080      	lsls	r0, r0, #2
    e924:	303c      	adds	r0, #60	; 0x3c
    e926:	e7fa      	b.n	e91e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e928:	4288      	cmp	r0, r1
    e92a:	d300      	bcc.n	e92e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e92c:	4608      	mov	r0, r1
    e92e:	1a80      	subs	r0, r0, r2
    e930:	4770      	bx	lr
    e932:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e936:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e93a:	4281      	cmp	r1, r0
    e93c:	d200      	bcs.n	e940 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e93e:	4608      	mov	r0, r1
    e940:	4770      	bx	lr
    e942:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e946:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e94a:	4281      	cmp	r1, r0
    e94c:	d200      	bcs.n	e950 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e94e:	4608      	mov	r0, r1
    e950:	4770      	bx	lr
    e952:	2196      	movs	r1, #150	; 0x96
    e954:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e958:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e95c:	f000 b800 	b.w	e960 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e964:	460d      	mov	r5, r1
    e966:	4606      	mov	r6, r0
    e968:	4698      	mov	r8, r3
    e96a:	4617      	mov	r7, r2
    e96c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e96e:	4611      	mov	r1, r2
    e970:	f7ff ffd1 	bl	e916 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e974:	4604      	mov	r4, r0
    e976:	4639      	mov	r1, r7
    e978:	4630      	mov	r0, r6
    e97a:	f7ff ffe2 	bl	e942 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e97e:	42a0      	cmp	r0, r4
    e980:	d200      	bcs.n	e984 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e982:	4604      	mov	r4, r0
    e984:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e986:	4641      	mov	r1, r8
    e988:	f7ff ffc5 	bl	e916 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e98c:	4607      	mov	r7, r0
    e98e:	4641      	mov	r1, r8
    e990:	4630      	mov	r0, r6
    e992:	f7ff ffce 	bl	e932 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e996:	42b8      	cmp	r0, r7
    e998:	d300      	bcc.n	e99c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e99a:	4638      	mov	r0, r7
    e99c:	4420      	add	r0, r4
    e99e:	4428      	add	r0, r5
    e9a0:	1d80      	adds	r0, r0, #6
    e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e9a6 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e9a6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e9a8:	2700      	movs	r7, #0
    e9aa:	463d      	mov	r5, r7
    e9ac:	2623      	movs	r6, #35	; 0x23
    e9ae:	f7f7 fdf1 	bl	6594 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    e9b2:	4604      	mov	r4, r0
    e9b4:	f7f7 fdc2 	bl	653c <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e9b8:	b190      	cbz	r0, e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e9ba:	4669      	mov	r1, sp
    e9bc:	2000      	movs	r0, #0
    e9be:	f7ff f957 	bl	dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e9c2:	e003      	b.n	e9cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    e9c4:	9802      	ldr	r0, [sp, #8]
    e9c6:	6901      	ldr	r1, [r0, #16]
    e9c8:	42a1      	cmp	r1, r4
    e9ca:	d009      	beq.n	e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e9cc:	4668      	mov	r0, sp
    e9ce:	f7f5 fc99 	bl	4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e9d2:	2800      	cmp	r0, #0
    e9d4:	d0f6      	beq.n	e9c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    e9d6:	4625      	mov	r5, r4
    e9d8:	4620      	mov	r0, r4
    e9da:	f7f7 fd73 	bl	64c4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e9de:	4607      	mov	r7, r0
    e9e0:	1e76      	subs	r6, r6, #1
    e9e2:	d001      	beq.n	e9e8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    e9e4:	2f00      	cmp	r7, #0
    e9e6:	d0e2      	beq.n	e9ae <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    e9e8:	b10d      	cbz	r5, e9ee <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    e9ea:	4628      	mov	r0, r5
    e9ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9ee:	f240 1177 	movw	r1, #375	; 0x177
    e9f2:	200f      	movs	r0, #15
    e9f4:	f7f5 fa56 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9f8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e9fc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea00:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea04:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea08:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea0c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    ea10:	d001      	beq.n	ea16 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    ea12:	2000      	movs	r0, #0
    ea14:	4770      	bx	lr
    ea16:	2001      	movs	r0, #1
    ea18:	4770      	bx	lr

0000ea1a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    ea1a:	b510      	push	{r4, lr}
    ea1c:	4604      	mov	r4, r0
    ea1e:	2108      	movs	r1, #8
    ea20:	4620      	mov	r0, r4
    ea22:	f7f5 fae9 	bl	3ff8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ea26:	6820      	ldr	r0, [r4, #0]
    ea28:	2800      	cmp	r0, #0
    ea2a:	d102      	bne.n	ea32 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    ea2c:	6860      	ldr	r0, [r4, #4]
    ea2e:	2800      	cmp	r0, #0
    ea30:	d0f5      	beq.n	ea1e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    ea32:	bd10      	pop	{r4, pc}
    ea34:	2801      	cmp	r0, #1
    ea36:	d102      	bne.n	ea3e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    ea38:	7948      	ldrb	r0, [r1, #5]
    ea3a:	0980      	lsrs	r0, r0, #6
    ea3c:	d001      	beq.n	ea42 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    ea3e:	2000      	movs	r0, #0
    ea40:	4770      	bx	lr
    ea42:	2001      	movs	r0, #1
    ea44:	4770      	bx	lr
    ea46:	2801      	cmp	r0, #1
    ea48:	d106      	bne.n	ea58 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ea4a:	7948      	ldrb	r0, [r1, #5]
    ea4c:	2101      	movs	r1, #1
    ea4e:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ea52:	d101      	bne.n	ea58 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ea54:	2001      	movs	r0, #1
    ea56:	4770      	bx	lr
    ea58:	2000      	movs	r0, #0
    ea5a:	4770      	bx	lr
    ea5c:	b118      	cbz	r0, ea66 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    ea5e:	2802      	cmp	r0, #2
    ea60:	d001      	beq.n	ea66 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    ea62:	2001      	movs	r0, #1
    ea64:	4770      	bx	lr
    ea66:	2000      	movs	r0, #0
    ea68:	4770      	bx	lr
    ea6a:	2802      	cmp	r0, #2
    ea6c:	d003      	beq.n	ea76 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    ea6e:	2803      	cmp	r0, #3
    ea70:	d001      	beq.n	ea76 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    ea72:	2000      	movs	r0, #0
    ea74:	4770      	bx	lr
    ea76:	2001      	movs	r0, #1
    ea78:	4770      	bx	lr

0000ea7a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ea7a:	f7f8 bddb 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    ea7e:	b510      	push	{r4, lr}
    ea80:	f7f8 fc26 	bl	72d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    ea84:	f7f7 ffc8 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ea88:	f7fc fdbc 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ea8c:	2005      	movs	r0, #5
    ea8e:	bd10      	pop	{r4, pc}
    ea90:	b510      	push	{r4, lr}
    ea92:	f7f8 fc1d 	bl	72d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    ea96:	f7fc fdb5 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ea9a:	2005      	movs	r0, #5
    ea9c:	bd10      	pop	{r4, pc}
    ea9e:	b530      	push	{r4, r5, lr}
    eaa0:	b089      	sub	sp, #36	; 0x24
    eaa2:	4605      	mov	r5, r0
    eaa4:	f7f8 fc14 	bl	72d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    eaa8:	7828      	ldrb	r0, [r5, #0]
    eaaa:	4669      	mov	r1, sp
    eaac:	f000 040f 	and.w	r4, r0, #15
    eab0:	4622      	mov	r2, r4
    eab2:	4628      	mov	r0, r5
    eab4:	f7f8 ff7e 	bl	79b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    eab8:	2200      	movs	r2, #0
    eaba:	4621      	mov	r1, r4
    eabc:	4668      	mov	r0, sp
    eabe:	f7f8 f82b 	bl	6b18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    eac2:	4621      	mov	r1, r4
    eac4:	4668      	mov	r0, sp
    eac6:	f7f8 fb83 	bl	71d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>
    eaca:	4604      	mov	r4, r0
    eacc:	f7f7 ffa4 	bl	6a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ead0:	b009      	add	sp, #36	; 0x24
    ead2:	4620      	mov	r0, r4
    ead4:	bd30      	pop	{r4, r5, pc}
    ead6:	f240 21f2 	movw	r1, #754	; 0x2f2
    eada:	2032      	movs	r0, #50	; 0x32
    eadc:	f7f5 f9e2 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eae0:	b510      	push	{r4, lr}
    eae2:	f7f8 fbf5 	bl	72d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d0>
    eae6:	f7fc fd8d 	bl	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    eaea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaee:	f7f8 bdb9 	b.w	7664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x664>
    eaf2:	f7f8 bd9f 	b.w	7634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x634>
    eaf6:	f7ff b81f 	b.w	db38 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000eafa <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    eafa:	b5f0      	push	{r4, r5, r6, r7, lr}
    eafc:	b08b      	sub	sp, #44	; 0x2c
    eafe:	4607      	mov	r7, r0
    eb00:	f7f5 fe02 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eb04:	4604      	mov	r4, r0
    eb06:	f7fe fed4 	bl	d8b2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    eb0a:	0005      	movs	r5, r0
    eb0c:	d00c      	beq.n	eb28 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    eb0e:	4620      	mov	r0, r4
    eb10:	4629      	mov	r1, r5
    eb12:	466a      	mov	r2, sp
    eb14:	f7fe fefe 	bl	d914 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    eb18:	4606      	mov	r6, r0
    eb1a:	f7f5 fdef 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    eb1e:	42b0      	cmp	r0, r6
    eb20:	d005      	beq.n	eb2e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    eb22:	f44f 7198 	mov.w	r1, #304	; 0x130
    eb26:	e033      	b.n	eb90 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    eb28:	2000      	movs	r0, #0
    eb2a:	b00b      	add	sp, #44	; 0x2c
    eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb2e:	a901      	add	r1, sp, #4
    eb30:	9800      	ldr	r0, [sp, #0]
    eb32:	f000 f8b4 	bl	ec9e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    eb36:	1d3e      	adds	r6, r7, #4
    eb38:	4628      	mov	r0, r5
    eb3a:	f7fe fe4e 	bl	d7da <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eb3e:	4605      	mov	r5, r0
    eb40:	4601      	mov	r1, r0
    eb42:	221c      	movs	r2, #28
    eb44:	4630      	mov	r0, r6
    eb46:	f7fd ffcc 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb4a:	7aa8      	ldrb	r0, [r5, #10]
    eb4c:	f04f 0500 	mov.w	r5, #0
    eb50:	06c1      	lsls	r1, r0, #27
    eb52:	d50d      	bpl.n	eb70 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    eb54:	0740      	lsls	r0, r0, #29
    eb56:	d40a      	bmi.n	eb6e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    eb58:	f89d 2014 	ldrb.w	r2, [sp, #20]
    eb5c:	f106 001c 	add.w	r0, r6, #28
    eb60:	9904      	ldr	r1, [sp, #16]
    eb62:	f7fd ffbe 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb66:	f89d 0014 	ldrb.w	r0, [sp, #20]
    eb6a:	7230      	strb	r0, [r6, #8]
    eb6c:	e000      	b.n	eb70 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    eb6e:	7235      	strb	r5, [r6, #8]
    eb70:	707d      	strb	r5, [r7, #1]
    eb72:	2005      	movs	r0, #5
    eb74:	7038      	strb	r0, [r7, #0]
    eb76:	4620      	mov	r0, r4
    eb78:	f7fe fe4a 	bl	d810 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    eb7c:	b130      	cbz	r0, eb8c <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    eb7e:	2100      	movs	r1, #0
    eb80:	4620      	mov	r0, r4
    eb82:	460a      	mov	r2, r1
    eb84:	f7fe ffa4 	bl	dad0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    eb88:	2001      	movs	r0, #1
    eb8a:	e7ce      	b.n	eb2a <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    eb8c:	f240 1173 	movw	r1, #371	; 0x173
    eb90:	2033      	movs	r0, #51	; 0x33
    eb92:	f7f5 f987 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb96 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    eb96:	b510      	push	{r4, lr}
    eb98:	f7f5 fdb6 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eb9c:	f000 f874 	bl	ec88 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    eba0:	4604      	mov	r4, r0
    eba2:	221c      	movs	r2, #28
    eba4:	2100      	movs	r1, #0
    eba6:	f7fe f816 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ebaa:	207f      	movs	r0, #127	; 0x7f
    ebac:	76a0      	strb	r0, [r4, #26]
    ebae:	21ff      	movs	r1, #255	; 0xff
    ebb0:	73a1      	strb	r1, [r4, #14]
    ebb2:	7061      	strb	r1, [r4, #1]
    ebb4:	74e1      	strb	r1, [r4, #19]
    ebb6:	7aa0      	ldrb	r0, [r4, #10]
    ebb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    ebbc:	3020      	adds	r0, #32
    ebbe:	72a0      	strb	r0, [r4, #10]
    ebc0:	bd10      	pop	{r4, pc}

0000ebc2 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    ebc2:	f7ff bfe8 	b.w	eb96 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000ebc6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    ebc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebca:	461e      	mov	r6, r3
    ebcc:	4617      	mov	r7, r2
    ebce:	4689      	mov	r9, r1
    ebd0:	4682      	mov	sl, r0
    ebd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ebd6:	f7f5 fd97 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ebda:	4604      	mov	r4, r0
    ebdc:	f7fe fdff 	bl	d7de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    ebe0:	2801      	cmp	r0, #1
    ebe2:	d034      	beq.n	ec4e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    ebe4:	4620      	mov	r0, r4
    ebe6:	f000 f84f 	bl	ec88 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    ebea:	4604      	mov	r4, r0
    ebec:	221c      	movs	r2, #28
    ebee:	2100      	movs	r1, #0
    ebf0:	f7fd fff1 	bl	cbd6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ebf4:	2501      	movs	r5, #1
    ebf6:	7025      	strb	r5, [r4, #0]
    ebf8:	1c63      	adds	r3, r4, #1
    ebfa:	1ca2      	adds	r2, r4, #2
    ebfc:	4649      	mov	r1, r9
    ebfe:	4650      	mov	r0, sl
    ec00:	f000 f827 	bl	ec52 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    ec04:	f884 8009 	strb.w	r8, [r4, #9]
    ec08:	7aa0      	ldrb	r0, [r4, #10]
    ec0a:	21ff      	movs	r1, #255	; 0xff
    ec0c:	f367 0000 	bfi	r0, r7, #0, #1
    ec10:	f040 001a 	orr.w	r0, r0, #26
    ec14:	72a0      	strb	r0, [r4, #10]
    ec16:	7325      	strb	r5, [r4, #12]
    ec18:	2000      	movs	r0, #0
    ec1a:	7360      	strb	r0, [r4, #13]
    ec1c:	73a1      	strb	r1, [r4, #14]
    ec1e:	74e1      	strb	r1, [r4, #19]
    ec20:	207f      	movs	r0, #127	; 0x7f
    ec22:	76a0      	strb	r0, [r4, #26]
    ec24:	76e6      	strb	r6, [r4, #27]
    ec26:	f7f5 fd69 	bl	46fc <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ec2a:	4604      	mov	r4, r0
    ec2c:	f7f5 fd6c 	bl	4708 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ec30:	2201      	movs	r2, #1
    ec32:	4621      	mov	r1, r4
    ec34:	f000 f831 	bl	ec9a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    ec38:	b120      	cbz	r0, ec44 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    ec3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec3e:	2005      	movs	r0, #5
    ec40:	f7f8 bf80 	b.w	7b44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    ec44:	f240 21c9 	movw	r1, #713	; 0x2c9
    ec48:	2033      	movs	r0, #51	; 0x33
    ec4a:	f7f5 f92b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec52:	b510      	push	{r4, lr}
    ec54:	461c      	mov	r4, r3
    ec56:	460b      	mov	r3, r1
    ec58:	29ff      	cmp	r1, #255	; 0xff
    ec5a:	d00d      	beq.n	ec78 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    ec5c:	4621      	mov	r1, r4
    ec5e:	4618      	mov	r0, r3
    ec60:	f7f6 fdee 	bl	5840 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ec64:	b120      	cbz	r0, ec70 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    ec66:	7820      	ldrb	r0, [r4, #0]
    ec68:	f040 0002 	orr.w	r0, r0, #2
    ec6c:	7020      	strb	r0, [r4, #0]
    ec6e:	bd10      	pop	{r4, pc}
    ec70:	2150      	movs	r1, #80	; 0x50
    ec72:	2033      	movs	r0, #51	; 0x33
    ec74:	f7f5 f916 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec78:	7c41      	ldrb	r1, [r0, #17]
    ec7a:	7021      	strb	r1, [r4, #0]
    ec7c:	6840      	ldr	r0, [r0, #4]
    ec7e:	6801      	ldr	r1, [r0, #0]
    ec80:	6011      	str	r1, [r2, #0]
    ec82:	8880      	ldrh	r0, [r0, #4]
    ec84:	8090      	strh	r0, [r2, #4]
    ec86:	bd10      	pop	{r4, pc}
    ec88:	b51c      	push	{r2, r3, r4, lr}
    ec8a:	4669      	mov	r1, sp
    ec8c:	aa01      	add	r2, sp, #4
    ec8e:	f7fe fe33 	bl	d8f8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    ec92:	9800      	ldr	r0, [sp, #0]
    ec94:	f7fe fda1 	bl	d7da <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ec98:	bd1c      	pop	{r2, r3, r4, pc}
    ec9a:	f7fe bd46 	b.w	d72a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000ec9e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    ec9e:	7802      	ldrb	r2, [r0, #0]
    eca0:	f002 020f 	and.w	r2, r2, #15
    eca4:	f7f8 be86 	b.w	79b4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    eca8:	2800      	cmp	r0, #0
    ecaa:	db04      	blt.n	ecb6 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    ecac:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ecb0:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    ecb4:	e005      	b.n	ecc2 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    ecb6:	f000 000f 	and.w	r0, r0, #15
    ecba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ecbe:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    ecc2:	0940      	lsrs	r0, r0, #5
    ecc4:	4770      	bx	lr
    ecc6:	6940      	ldr	r0, [r0, #20]
    ecc8:	2800      	cmp	r0, #0
    ecca:	d000      	beq.n	ecce <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    eccc:	2001      	movs	r0, #1
    ecce:	4770      	bx	lr

0000ecd0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ecd0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ecd4:	4770      	bx	lr
    ecd6:	b510      	push	{r4, lr}
    ecd8:	2808      	cmp	r0, #8
    ecda:	d00a      	beq.n	ecf2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    ecdc:	2804      	cmp	r0, #4
    ecde:	d00a      	beq.n	ecf6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    ece0:	2802      	cmp	r0, #2
    ece2:	d00a      	beq.n	ecfa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    ece4:	2108      	movs	r1, #8
    ece6:	2801      	cmp	r0, #1
    ece8:	d009      	beq.n	ecfe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    ecea:	21d9      	movs	r1, #217	; 0xd9
    ecec:	2005      	movs	r0, #5
    ecee:	f7f5 f8d9 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecf2:	2140      	movs	r1, #64	; 0x40
    ecf4:	e7f7      	b.n	ece6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ecf6:	2110      	movs	r1, #16
    ecf8:	e7f5      	b.n	ece6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ecfa:	2104      	movs	r1, #4
    ecfc:	e7f3      	b.n	ece6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    ecfe:	222a      	movs	r2, #42	; 0x2a
    ed00:	2028      	movs	r0, #40	; 0x28
    ed02:	fb11 0002 	smlabb	r0, r1, r2, r0
    ed06:	b280      	uxth	r0, r0
    ed08:	bd10      	pop	{r4, pc}
    ed0a:	2000      	movs	r0, #0
    ed0c:	4770      	bx	lr
    ed0e:	b570      	push	{r4, r5, r6, lr}
    ed10:	4604      	mov	r4, r0
    ed12:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ed16:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ed1a:	f000 f80c 	bl	ed36 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    ed1e:	4605      	mov	r5, r0
    ed20:	f000 f857 	bl	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    ed24:	4601      	mov	r1, r0
    ed26:	462a      	mov	r2, r5
    ed28:	4620      	mov	r0, r4
    ed2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed2e:	f7ff bda7 	b.w	e880 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ed32:	f7f2 be05 	b.w	1940 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ed36:	b510      	push	{r4, lr}
    ed38:	4604      	mov	r4, r0
    ed3a:	4608      	mov	r0, r1
    ed3c:	f001 f919 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ed44:	2c02      	cmp	r4, #2
    ed46:	d00a      	beq.n	ed5e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    ed48:	f640 0234 	movw	r2, #2100	; 0x834
    ed4c:	4410      	add	r0, r2
    ed4e:	f24a 5295 	movw	r2, #42389	; 0xa595
    ed52:	4410      	add	r0, r2
    ed54:	fbb0 f0f1 	udiv	r0, r0, r1
    ed58:	f200 1037 	addw	r0, r0, #311	; 0x137
    ed5c:	bd10      	pop	{r4, pc}
    ed5e:	460a      	mov	r2, r1
    ed60:	e7f4      	b.n	ed4c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    ed62:	b510      	push	{r4, lr}
    ed64:	4604      	mov	r4, r0
    ed66:	2000      	movs	r0, #0
    ed68:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    ed6c:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    ed70:	f7f3 fa32 	bl	21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed74:	b140      	cbz	r0, ed88 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    ed76:	2020      	movs	r0, #32
    ed78:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    ed7c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    ed80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed84:	f7fb bcaa 	b.w	a6dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    ed88:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    ed8c:	2035      	movs	r0, #53	; 0x35
    ed8e:	f7f5 f889 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ed94:	4613      	mov	r3, r2
    ed96:	460a      	mov	r2, r1
    ed98:	4604      	mov	r4, r0
    ed9a:	4601      	mov	r1, r0
    ed9c:	4668      	mov	r0, sp
    ed9e:	f7f9 fab7 	bl	8310 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x310>
    eda2:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    eda6:	4669      	mov	r1, sp
    eda8:	f7ff ffc3 	bl	ed32 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    edac:	2800      	cmp	r0, #0
    edae:	d104      	bne.n	edba <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    edb0:	f640 2139 	movw	r1, #2617	; 0xa39
    edb4:	2035      	movs	r0, #53	; 0x35
    edb6:	f7f5 f875 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    edbc:	b510      	push	{r4, lr}
    edbe:	245b      	movs	r4, #91	; 0x5b
    edc0:	f001 f895 	bl	feee <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    edc4:	b910      	cbnz	r0, edcc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    edc6:	f001 f888 	bl	feda <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    edca:	b100      	cbz	r0, edce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    edcc:	2462      	movs	r4, #98	; 0x62
    edce:	4620      	mov	r0, r4
    edd0:	bd10      	pop	{r4, pc}
    edd2:	b510      	push	{r4, lr}
    edd4:	f7ff fff2 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    edd8:	3069      	adds	r0, #105	; 0x69
    edda:	b280      	uxth	r0, r0
    eddc:	bd10      	pop	{r4, pc}
    edde:	b510      	push	{r4, lr}
    ede0:	f7ff ffec 	bl	edbc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ede4:	30ff      	adds	r0, #255	; 0xff
    ede6:	b280      	uxth	r0, r0
    ede8:	bd10      	pop	{r4, pc}
    edea:	b1d0      	cbz	r0, ee22 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    edec:	2908      	cmp	r1, #8
    edee:	d011      	beq.n	ee14 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    edf0:	2904      	cmp	r1, #4
    edf2:	d00b      	beq.n	ee0c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    edf4:	2000      	movs	r0, #0
    edf6:	2902      	cmp	r1, #2
    edf8:	d010      	beq.n	ee1c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    edfa:	2108      	movs	r1, #8
    edfc:	3028      	adds	r0, #40	; 0x28
    edfe:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    ee02:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    ee06:	4408      	add	r0, r1
    ee08:	3098      	adds	r0, #152	; 0x98
    ee0a:	4770      	bx	lr
    ee0c:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    ee10:	2110      	movs	r1, #16
    ee12:	e7f4      	b.n	edfe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    ee14:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ee18:	2140      	movs	r1, #64	; 0x40
    ee1a:	e7f0      	b.n	edfe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    ee1c:	2104      	movs	r1, #4
    ee1e:	3018      	adds	r0, #24
    ee20:	e7ed      	b.n	edfe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    ee22:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    ee26:	4770      	bx	lr
    ee28:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ee2c:	f001 0307 	and.w	r3, r1, #7
    ee30:	7802      	ldrb	r2, [r0, #0]
    ee32:	2101      	movs	r1, #1
    ee34:	4099      	lsls	r1, r3
    ee36:	438a      	bics	r2, r1
    ee38:	7002      	strb	r2, [r0, #0]
    ee3a:	4770      	bx	lr

0000ee3c <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    ee3c:	f7f5 bbbc 	b.w	45b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ee40 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    ee40:	2000      	movs	r0, #0
    ee42:	4770      	bx	lr

0000ee44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    ee44:	b538      	push	{r3, r4, r5, lr}
    ee46:	460d      	mov	r5, r1
    ee48:	4604      	mov	r4, r0
    ee4a:	e050      	b.n	eeee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    ee4c:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    ee50:	1c40      	adds	r0, r0, #1
    ee52:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    ee56:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    ee5a:	1c40      	adds	r0, r0, #1
    ee5c:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    ee60:	4620      	mov	r0, r4
    ee62:	f000 f8e1 	bl	f028 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    ee66:	b198      	cbz	r0, ee90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    ee68:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ee6c:	1c40      	adds	r0, r0, #1
    ee6e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ee72:	4620      	mov	r0, r4
    ee74:	f000 f86e 	bl	ef54 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    ee78:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    ee7c:	4288      	cmp	r0, r1
    ee7e:	d307      	bcc.n	ee90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    ee80:	2000      	movs	r0, #0
    ee82:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ee86:	2001      	movs	r0, #1
    ee88:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    ee8c:	f7f7 f94a 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ee90:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    ee94:	b120      	cbz	r0, eea0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    ee96:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    ee9a:	1c40      	adds	r0, r0, #1
    ee9c:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    eea0:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    eea4:	b120      	cbz	r0, eeb0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    eea6:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    eeaa:	1c40      	adds	r0, r0, #1
    eeac:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    eeb0:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    eeb4:	f88d 0000 	strb.w	r0, [sp]
    eeb8:	9800      	ldr	r0, [sp, #0]
    eeba:	9000      	str	r0, [sp, #0]
    eebc:	f89d 0000 	ldrb.w	r0, [sp]
    eec0:	b940      	cbnz	r0, eed4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    eec2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    eec6:	2300      	movs	r3, #0
    eec8:	2101      	movs	r1, #1
    eeca:	f104 0078 	add.w	r0, r4, #120	; 0x78
    eece:	f7ff f88a 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eed2:	b120      	cbz	r0, eede <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    eed4:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    eed8:	1c40      	adds	r0, r0, #1
    eeda:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    eede:	4620      	mov	r0, r4
    eee0:	f000 f847 	bl	ef72 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    eee4:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    eee8:	1c40      	adds	r0, r0, #1
    eeea:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    eeee:	1e6d      	subs	r5, r5, #1
    eef0:	b2ad      	uxth	r5, r5
    eef2:	d2ab      	bcs.n	ee4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    eef4:	bd38      	pop	{r3, r4, r5, pc}

0000eef6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    eef6:	b510      	push	{r4, lr}
    eef8:	f7fa fb5c 	bl	95b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    eefc:	b128      	cbz	r0, ef0a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    eefe:	2000      	movs	r0, #0
    ef00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef04:	4601      	mov	r1, r0
    ef06:	f7fa bb01 	b.w	950c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    ef0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef0e:	f7f5 bff5 	b.w	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ef12:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    ef16:	28fe      	cmp	r0, #254	; 0xfe
    ef18:	d001      	beq.n	ef1e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ef1a:	2001      	movs	r0, #1
    ef1c:	4770      	bx	lr
    ef1e:	2000      	movs	r0, #0
    ef20:	4770      	bx	lr
    ef22:	b510      	push	{r4, lr}
    ef24:	2801      	cmp	r0, #1
    ef26:	d006      	beq.n	ef36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ef28:	2802      	cmp	r0, #2
    ef2a:	d004      	beq.n	ef36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ef2c:	f240 2163 	movw	r1, #611	; 0x263
    ef30:	2006      	movs	r0, #6
    ef32:	f7f4 ffb7 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef36:	bd10      	pop	{r4, pc}
    ef38:	2801      	cmp	r0, #1
    ef3a:	d002      	beq.n	ef42 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ef3c:	2802      	cmp	r0, #2
    ef3e:	d105      	bne.n	ef4c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ef40:	e002      	b.n	ef48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ef42:	2901      	cmp	r1, #1
    ef44:	d004      	beq.n	ef50 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ef46:	e001      	b.n	ef4c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ef48:	2902      	cmp	r1, #2
    ef4a:	d001      	beq.n	ef50 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ef4c:	2000      	movs	r0, #0
    ef4e:	4770      	bx	lr
    ef50:	2001      	movs	r0, #1
    ef52:	4770      	bx	lr
    ef54:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    ef58:	428a      	cmp	r2, r1
    ef5a:	d301      	bcc.n	ef60 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    ef5c:	1a51      	subs	r1, r2, r1
    ef5e:	e000      	b.n	ef62 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    ef60:	2100      	movs	r1, #0
    ef62:	8a82      	ldrh	r2, [r0, #20]
    ef64:	1d52      	adds	r2, r2, #5
    ef66:	428a      	cmp	r2, r1
    ef68:	d302      	bcc.n	ef70 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    ef6a:	2101      	movs	r1, #1
    ef6c:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    ef70:	4770      	bx	lr
    ef72:	b570      	push	{r4, r5, r6, lr}
    ef74:	4604      	mov	r4, r0
    ef76:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ef7a:	2500      	movs	r5, #0
    ef7c:	2601      	movs	r6, #1
    ef7e:	280c      	cmp	r0, #12
    ef80:	d02c      	beq.n	efdc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    ef82:	280d      	cmp	r0, #13
    ef84:	d129      	bne.n	efda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ef86:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    ef8a:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    ef8e:	1c40      	adds	r0, r0, #1
    ef90:	4288      	cmp	r0, r1
    ef92:	d122      	bne.n	efda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ef94:	8820      	ldrh	r0, [r4, #0]
    ef96:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    ef9a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    ef9e:	f7fe ffd8 	bl	df52 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    efa2:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    efa6:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    efaa:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    efae:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    efb2:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    efb6:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    efba:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    efbe:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    efc2:	2102      	movs	r1, #2
    efc4:	4620      	mov	r0, r4
    efc6:	f7f6 fe6f 	bl	5ca8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    efca:	f7f7 f8ab 	bl	6124 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    efce:	2103      	movs	r1, #3
    efd0:	4620      	mov	r0, r4
    efd2:	f7f8 fd49 	bl	7a68 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    efd6:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    efda:	bd70      	pop	{r4, r5, r6, pc}
    efdc:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    efe0:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    efe4:	1c40      	adds	r0, r0, #1
    efe6:	4288      	cmp	r0, r1
    efe8:	d1f7      	bne.n	efda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    efea:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    efee:	f8d0 1001 	ldr.w	r1, [r0, #1]
    eff2:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    eff6:	7940      	ldrb	r0, [r0, #5]
    eff8:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    effc:	2103      	movs	r1, #3
    effe:	4620      	mov	r0, r4
    f000:	f7f6 fe52 	bl	5ca8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f004:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f008:	7800      	ldrb	r0, [r0, #0]
    f00a:	b140      	cbz	r0, f01e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    f00c:	2101      	movs	r1, #1
    f00e:	20fe      	movs	r0, #254	; 0xfe
    f010:	f7fb faec 	bl	a5ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    f014:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f018:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    f01c:	bd70      	pop	{r4, r5, r6, pc}
    f01e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    f022:	2036      	movs	r0, #54	; 0x36
    f024:	f7f4 ff3e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f028:	b510      	push	{r4, lr}
    f02a:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    f02e:	b941      	cbnz	r1, f042 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    f030:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    f034:	2300      	movs	r3, #0
    f036:	2106      	movs	r1, #6
    f038:	3078      	adds	r0, #120	; 0x78
    f03a:	f7fe ffd4 	bl	dfe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f03e:	2800      	cmp	r0, #0
    f040:	d000      	beq.n	f044 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f042:	2001      	movs	r0, #1
    f044:	bd10      	pop	{r4, pc}

0000f046 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f046:	b510      	push	{r4, lr}
    f048:	460c      	mov	r4, r1
    f04a:	4601      	mov	r1, r0
    f04c:	4610      	mov	r0, r2
    f04e:	f7f2 fb39 	bl	16c4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f052:	2800      	cmp	r0, #0
    f054:	da06      	bge.n	f064 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    f056:	1a21      	subs	r1, r4, r0
    f058:	1e49      	subs	r1, r1, #1
    f05a:	fbb1 f1f4 	udiv	r1, r1, r4
    f05e:	fb01 0004 	mla	r0, r1, r4, r0
    f062:	bd10      	pop	{r4, pc}
    f064:	fb90 f1f4 	sdiv	r1, r0, r4
    f068:	fb01 0014 	mls	r0, r1, r4, r0
    f06c:	bd10      	pop	{r4, pc}
    f06e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f072:	f001 0107 	and.w	r1, r1, #7
    f076:	7800      	ldrb	r0, [r0, #0]
    f078:	2201      	movs	r2, #1
    f07a:	408a      	lsls	r2, r1
    f07c:	4010      	ands	r0, r2
    f07e:	40c8      	lsrs	r0, r1
    f080:	4770      	bx	lr
    f082:	b118      	cbz	r0, f08c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f084:	2802      	cmp	r0, #2
    f086:	d001      	beq.n	f08c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f088:	2001      	movs	r0, #1
    f08a:	4770      	bx	lr
    f08c:	2000      	movs	r0, #0
    f08e:	4770      	bx	lr

0000f090 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f090:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f092:	7881      	ldrb	r1, [r0, #2]
    f094:	4604      	mov	r4, r0
    f096:	291a      	cmp	r1, #26
    f098:	d025      	beq.n	f0e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f09a:	dc0e      	bgt.n	f0ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f09c:	2916      	cmp	r1, #22
    f09e:	d22d      	bcs.n	f0fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0a0:	e8df f001 	tbb	[pc, r1]
    f0a4:	2c2c2c2c 	.word	0x2c2c2c2c
    f0a8:	2c2c212c 	.word	0x2c2c212c
    f0ac:	2c2c2c2c 	.word	0x2c2c2c2c
    f0b0:	2c2c2c2c 	.word	0x2c2c2c2c
    f0b4:	212c2c2c 	.word	0x212c2c2c
    f0b8:	2121      	.short	0x2121
    f0ba:	292a      	cmp	r1, #42	; 0x2a
    f0bc:	d01e      	beq.n	f0fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0be:	dc0b      	bgt.n	f0d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f0c0:	f1a1 011e 	sub.w	r1, r1, #30
    f0c4:	290c      	cmp	r1, #12
    f0c6:	d219      	bcs.n	f0fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0c8:	e8df f001 	tbb	[pc, r1]
    f0cc:	18181818 	.word	0x18181818
    f0d0:	18181818 	.word	0x18181818
    f0d4:	0d181818 	.word	0x0d181818
    f0d8:	393a      	subs	r1, #58	; 0x3a
    f0da:	2904      	cmp	r1, #4
    f0dc:	d20e      	bcs.n	f0fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0de:	e8df f001 	tbb	[pc, r1]
    f0e2:	020d      	.short	0x020d
    f0e4:	020d      	.short	0x020d
    f0e6:	8820      	ldrh	r0, [r4, #0]
    f0e8:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f0ec:	d206      	bcs.n	f0fc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f0ee:	2701      	movs	r7, #1
    f0f0:	4669      	mov	r1, sp
    f0f2:	f7fe ff1e 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f0f6:	b118      	cbz	r0, f100 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f0f8:	2002      	movs	r0, #2
    f0fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f0fc:	2012      	movs	r0, #18
    f0fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f100:	9d01      	ldr	r5, [sp, #4]
    f102:	4668      	mov	r0, sp
    f104:	462e      	mov	r6, r5
    f106:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    f10a:	f206 163d 	addw	r6, r6, #317	; 0x13d
    f10e:	f000 fd7f 	bl	fc10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f112:	b138      	cbz	r0, f124 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f114:	7828      	ldrb	r0, [r5, #0]
    f116:	f88d 0008 	strb.w	r0, [sp, #8]
    f11a:	9802      	ldr	r0, [sp, #8]
    f11c:	9002      	str	r0, [sp, #8]
    f11e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f122:	b108      	cbz	r0, f128 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f124:	200c      	movs	r0, #12
    f126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f128:	702f      	strb	r7, [r5, #0]
    f12a:	78a0      	ldrb	r0, [r4, #2]
    f12c:	7030      	strb	r0, [r6, #0]
    f12e:	2000      	movs	r0, #0
    f130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f132 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f132:	b510      	push	{r4, lr}
    f134:	4604      	mov	r4, r0
    f136:	7800      	ldrb	r0, [r0, #0]
    f138:	b118      	cbz	r0, f142 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f13a:	2801      	cmp	r0, #1
    f13c:	d001      	beq.n	f142 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f13e:	2012      	movs	r0, #18
    f140:	bd10      	pop	{r4, pc}
    f142:	f000 fd7c 	bl	fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f146:	b120      	cbz	r0, f152 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f148:	f7f6 fb74 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f14c:	b108      	cbz	r0, f152 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f14e:	200c      	movs	r0, #12
    f150:	bd10      	pop	{r4, pc}
    f152:	7820      	ldrb	r0, [r4, #0]
    f154:	f7ff ff95 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f158:	1de2      	adds	r2, r4, #7
    f15a:	f104 0317 	add.w	r3, r4, #23
    f15e:	1c61      	adds	r1, r4, #1
    f160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f164:	f7f6 bb98 	b.w	5898 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f168 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f168:	b510      	push	{r4, lr}
    f16a:	4604      	mov	r4, r0
    f16c:	f000 fe0e 	bl	fd8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f170:	b108      	cbz	r0, f176 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f172:	200c      	movs	r0, #12
    f174:	bd10      	pop	{r4, pc}
    f176:	7820      	ldrb	r0, [r4, #0]
    f178:	b118      	cbz	r0, f182 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f17a:	2801      	cmp	r0, #1
    f17c:	d001      	beq.n	f182 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f17e:	2012      	movs	r0, #18
    f180:	bd10      	pop	{r4, pc}
    f182:	f7ff ff7e 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f186:	1c61      	adds	r1, r4, #1
    f188:	f7f6 fc2a 	bl	59e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f18c:	b108      	cbz	r0, f192 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f18e:	2000      	movs	r0, #0
    f190:	bd10      	pop	{r4, pc}
    f192:	2007      	movs	r0, #7
    f194:	bd10      	pop	{r4, pc}

0000f196 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f196:	b510      	push	{r4, lr}
    f198:	f000 fd51 	bl	fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f19c:	b120      	cbz	r0, f1a8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f19e:	f7f6 fb49 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f1a2:	b108      	cbz	r0, f1a8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f1a4:	200c      	movs	r0, #12
    f1a6:	bd10      	pop	{r4, pc}
    f1a8:	f7f6 fbbc 	bl	5924 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f1ac:	2000      	movs	r0, #0
    f1ae:	bd10      	pop	{r4, pc}

0000f1b0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f1b0:	b510      	push	{r4, lr}
    f1b2:	f000 fdeb 	bl	fd8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f1b6:	b108      	cbz	r0, f1bc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f1b8:	200c      	movs	r0, #12
    f1ba:	bd10      	pop	{r4, pc}
    f1bc:	f7f6 fc38 	bl	5a30 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f1c0:	2000      	movs	r0, #0
    f1c2:	bd10      	pop	{r4, pc}

0000f1c4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1c6:	4605      	mov	r5, r0
    f1c8:	f000 fafa 	bl	f7c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f1cc:	2800      	cmp	r0, #0
    f1ce:	d112      	bne.n	f1f6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    f1d0:	8828      	ldrh	r0, [r5, #0]
    f1d2:	2100      	movs	r1, #0
    f1d4:	f7fe fd43 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f1d8:	0004      	movs	r4, r0
    f1da:	d00d      	beq.n	f1f8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f1dc:	f000 fd1b 	bl	fc16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f1e0:	b150      	cbz	r0, f1f8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f1e2:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f1e6:	f88d 0000 	strb.w	r0, [sp]
    f1ea:	9800      	ldr	r0, [sp, #0]
    f1ec:	9000      	str	r0, [sp, #0]
    f1ee:	f89d 0000 	ldrb.w	r0, [sp]
    f1f2:	b118      	cbz	r0, f1fc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f1f4:	203a      	movs	r0, #58	; 0x3a
    f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1f8:	2002      	movs	r0, #2
    f1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1fc:	88a8      	ldrh	r0, [r5, #4]
    f1fe:	f7fe fea4 	bl	df4a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f202:	4606      	mov	r6, r0
    f204:	4601      	mov	r1, r0
    f206:	2008      	movs	r0, #8
    f208:	f7ff f86b 	bl	e2e2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f20c:	4601      	mov	r1, r0
    f20e:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    f212:	4281      	cmp	r1, r0
    f214:	d301      	bcc.n	f21a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    f216:	42b0      	cmp	r0, r6
    f218:	d301      	bcc.n	f21e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    f21a:	2012      	movs	r0, #18
    f21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f21e:	4631      	mov	r1, r6
    f220:	2005      	movs	r0, #5
    f222:	f7ff f85e 	bl	e2e2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f226:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    f22a:	2000      	movs	r0, #0
    f22c:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    f230:	88e8      	ldrh	r0, [r5, #6]
    f232:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f236:	8928      	ldrh	r0, [r5, #8]
    f238:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    f23c:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    f240:	2001      	movs	r0, #1
    f242:	7020      	strb	r0, [r4, #0]
    f244:	2000      	movs	r0, #0
    f246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f248 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f248:	b508      	push	{r3, lr}
    f24a:	f7f6 ff65 	bl	6118 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    f24e:	b970      	cbnz	r0, f26e <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    f250:	f7f8 fdc8 	bl	7de4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f254:	2805      	cmp	r0, #5
    f256:	d005      	beq.n	f264 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    f258:	f7f7 fa1a 	bl	6690 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    f25c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f260:	39ff      	subs	r1, #255	; 0xff
    f262:	d004      	beq.n	f26e <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    f264:	4668      	mov	r0, sp
    f266:	f7f8 fd29 	bl	7cbc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f26a:	b110      	cbz	r0, f272 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    f26c:	e012      	b.n	f294 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    f26e:	200c      	movs	r0, #12
    f270:	bd08      	pop	{r3, pc}
    f272:	9800      	ldr	r0, [sp, #0]
    f274:	8800      	ldrh	r0, [r0, #0]
    f276:	f7fe fd5a 	bl	dd2e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f27a:	9800      	ldr	r0, [sp, #0]
    f27c:	2100      	movs	r1, #0
    f27e:	8800      	ldrh	r0, [r0, #0]
    f280:	f7f5 f88e 	bl	43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f284:	b120      	cbz	r0, f290 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    f286:	f640 717f 	movw	r1, #3967	; 0xf7f
    f28a:	2039      	movs	r0, #57	; 0x39
    f28c:	f7f4 fe0a 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f290:	f7f6 ff3a 	bl	6108 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    f294:	2000      	movs	r0, #0
    f296:	bd08      	pop	{r3, pc}

0000f298 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f298:	b510      	push	{r4, lr}
    f29a:	460b      	mov	r3, r1
    f29c:	2201      	movs	r2, #1
    f29e:	f100 0110 	add.w	r1, r0, #16
    f2a2:	f7fe fe0a 	bl	deba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f2a6:	2000      	movs	r0, #0
    f2a8:	bd10      	pop	{r4, pc}

0000f2aa <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f2aa:	b510      	push	{r4, lr}
    f2ac:	2108      	movs	r1, #8
    f2ae:	f7f4 fea3 	bl	3ff8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f2b2:	2000      	movs	r0, #0
    f2b4:	bd10      	pop	{r4, pc}

0000f2b6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f2b6:	b510      	push	{r4, lr}
    f2b8:	4604      	mov	r4, r0
    f2ba:	f000 fca3 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f2be:	b140      	cbz	r0, f2d2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f2c0:	20fb      	movs	r0, #251	; 0xfb
    f2c2:	8020      	strh	r0, [r4, #0]
    f2c4:	f640 0148 	movw	r1, #2120	; 0x848
    f2c8:	8061      	strh	r1, [r4, #2]
    f2ca:	80a0      	strh	r0, [r4, #4]
    f2cc:	80e1      	strh	r1, [r4, #6]
    f2ce:	2000      	movs	r0, #0
    f2d0:	bd10      	pop	{r4, pc}
    f2d2:	2001      	movs	r0, #1
    f2d4:	bd10      	pop	{r4, pc}

0000f2d6 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f2d6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f2d8:	460d      	mov	r5, r1
    f2da:	4606      	mov	r6, r0
    f2dc:	f7fb ff14 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f2e0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f2e4:	b300      	cbz	r0, f328 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f2e6:	8830      	ldrh	r0, [r6, #0]
    f2e8:	4669      	mov	r1, sp
    f2ea:	f7fe fe22 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f2ee:	2800      	cmp	r0, #0
    f2f0:	d119      	bne.n	f326 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f2f2:	9c01      	ldr	r4, [sp, #4]
    f2f4:	2700      	movs	r7, #0
    f2f6:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f2fa:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f2fe:	f000 fa94 	bl	f82a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    f302:	70a8      	strb	r0, [r5, #2]
    f304:	7860      	ldrb	r0, [r4, #1]
    f306:	f000 fa90 	bl	f82a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    f30a:	70e8      	strb	r0, [r5, #3]
    f30c:	78a0      	ldrb	r0, [r4, #2]
    f30e:	f88d 0008 	strb.w	r0, [sp, #8]
    f312:	9802      	ldr	r0, [sp, #8]
    f314:	9002      	str	r0, [sp, #8]
    f316:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f31a:	3c6a      	subs	r4, #106	; 0x6a
    f31c:	2800      	cmp	r0, #0
    f31e:	d1ea      	bne.n	f2f6 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f320:	8830      	ldrh	r0, [r6, #0]
    f322:	8028      	strh	r0, [r5, #0]
    f324:	2000      	movs	r0, #0
    f326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f328:	2001      	movs	r0, #1
    f32a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f32c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f32c:	2108      	movs	r1, #8
    f32e:	7001      	strb	r1, [r0, #0]
    f330:	2000      	movs	r0, #0
    f332:	4770      	bx	lr

0000f334 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	20d8      	movs	r0, #216	; 0xd8
    f33a:	7020      	strb	r0, [r4, #0]
    f33c:	f000 fc43 	bl	fbc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f340:	7060      	strb	r0, [r4, #1]
    f342:	2000      	movs	r0, #0
    f344:	bd10      	pop	{r4, pc}

0000f346 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f346:	2108      	movs	r1, #8
    f348:	7001      	strb	r1, [r0, #0]
    f34a:	2000      	movs	r0, #0
    f34c:	4770      	bx	lr

0000f34e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f34e:	b510      	push	{r4, lr}
    f350:	4604      	mov	r4, r0
    f352:	7800      	ldrb	r0, [r0, #0]
    f354:	b108      	cbz	r0, f35a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f356:	2801      	cmp	r0, #1
    f358:	d110      	bne.n	f37c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f35a:	f000 fc70 	bl	fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f35e:	b120      	cbz	r0, f36a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f360:	f7f6 fa68 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f364:	b108      	cbz	r0, f36a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f366:	200c      	movs	r0, #12
    f368:	bd10      	pop	{r4, pc}
    f36a:	7820      	ldrb	r0, [r4, #0]
    f36c:	f7ff fe89 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f370:	1c61      	adds	r1, r4, #1
    f372:	f7fe fd88 	bl	de86 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f376:	b108      	cbz	r0, f37c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f378:	2000      	movs	r0, #0
    f37a:	bd10      	pop	{r4, pc}
    f37c:	2012      	movs	r0, #18
    f37e:	bd10      	pop	{r4, pc}

0000f380 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f380:	b510      	push	{r4, lr}
    f382:	4604      	mov	r4, r0
    f384:	f000 fd02 	bl	fd8c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    f388:	b108      	cbz	r0, f38e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f38a:	200c      	movs	r0, #12
    f38c:	bd10      	pop	{r4, pc}
    f38e:	7820      	ldrb	r0, [r4, #0]
    f390:	b108      	cbz	r0, f396 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f392:	2801      	cmp	r0, #1
    f394:	d107      	bne.n	f3a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f396:	f7ff fe74 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f39a:	1c61      	adds	r1, r4, #1
    f39c:	f7fe fd82 	bl	dea4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f3a0:	b108      	cbz	r0, f3a6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f3a2:	2000      	movs	r0, #0
    f3a4:	bd10      	pop	{r4, pc}
    f3a6:	2012      	movs	r0, #18
    f3a8:	bd10      	pop	{r4, pc}

0000f3aa <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f3aa:	b510      	push	{r4, lr}
    f3ac:	4604      	mov	r4, r0
    f3ae:	f000 fc46 	bl	fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f3b2:	b108      	cbz	r0, f3b8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f3b4:	200c      	movs	r0, #12
    f3b6:	bd10      	pop	{r4, pc}
    f3b8:	7820      	ldrb	r0, [r4, #0]
    f3ba:	f000 0001 	and.w	r0, r0, #1
    f3be:	f7f6 fa33 	bl	5828 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f3c2:	2000      	movs	r0, #0
    f3c4:	bd10      	pop	{r4, pc}

0000f3c6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f3c6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f3c8:	460d      	mov	r5, r1
    f3ca:	4604      	mov	r4, r0
    f3cc:	f000 fc1a 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f3d0:	b130      	cbz	r0, f3e0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f3d2:	88a2      	ldrh	r2, [r4, #4]
    f3d4:	f244 2090 	movw	r0, #17040	; 0x4290
    f3d8:	4282      	cmp	r2, r0
    f3da:	d903      	bls.n	f3e4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f3dc:	2012      	movs	r0, #18
    f3de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3e0:	2001      	movs	r0, #1
    f3e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3e4:	f640 0048 	movw	r0, #2120	; 0x848
    f3e8:	4282      	cmp	r2, r0
    f3ea:	d300      	bcc.n	f3ee <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f3ec:	4602      	mov	r2, r0
    f3ee:	8820      	ldrh	r0, [r4, #0]
    f3f0:	f8ad 0000 	strh.w	r0, [sp]
    f3f4:	8860      	ldrh	r0, [r4, #2]
    f3f6:	f8ad 0002 	strh.w	r0, [sp, #2]
    f3fa:	f8ad 2004 	strh.w	r2, [sp, #4]
    f3fe:	8860      	ldrh	r0, [r4, #2]
    f400:	f8ad 0006 	strh.w	r0, [sp, #6]
    f404:	f8ad 2008 	strh.w	r2, [sp, #8]
    f408:	8820      	ldrh	r0, [r4, #0]
    f40a:	8028      	strh	r0, [r5, #0]
    f40c:	4668      	mov	r0, sp
    f40e:	f000 fc28 	bl	fc62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f412:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f414 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    f414:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f416:	4604      	mov	r4, r0
    f418:	f7fe fd75 	bl	df06 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    f41c:	b160      	cbz	r0, f438 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    f41e:	4620      	mov	r0, r4
    f420:	f7f6 fcc8 	bl	5db4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    f424:	4669      	mov	r1, sp
    f426:	2000      	movs	r0, #0
    f428:	f7fe fc22 	bl	dc70 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f42c:	b150      	cbz	r0, f444 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    f42e:	f241 0104 	movw	r1, #4100	; 0x1004
    f432:	2039      	movs	r0, #57	; 0x39
    f434:	f7f4 fd36 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f438:	2012      	movs	r0, #18
    f43a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f43c:	9802      	ldr	r0, [sp, #8]
    f43e:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    f442:	e000      	b.n	f446 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    f444:	2401      	movs	r4, #1
    f446:	4668      	mov	r0, sp
    f448:	f7f4 ff5c 	bl	4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f44c:	2800      	cmp	r0, #0
    f44e:	d0f5      	beq.n	f43c <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    f450:	2000      	movs	r0, #0
    f452:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f454 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f454:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f456:	4604      	mov	r4, r0
    f458:	f7fb fe56 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f45c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f460:	b1b0      	cbz	r0, f490 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f462:	f10d 0007 	add.w	r0, sp, #7
    f466:	9000      	str	r0, [sp, #0]
    f468:	7922      	ldrb	r2, [r4, #4]
    f46a:	78e1      	ldrb	r1, [r4, #3]
    f46c:	78a0      	ldrb	r0, [r4, #2]
    f46e:	f10d 0306 	add.w	r3, sp, #6
    f472:	f000 fc74 	bl	fd5e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    f476:	2800      	cmp	r0, #0
    f478:	d109      	bne.n	f48e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f47a:	8820      	ldrh	r0, [r4, #0]
    f47c:	f8ad 0004 	strh.w	r0, [sp, #4]
    f480:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f484:	f8ad 0008 	strh.w	r0, [sp, #8]
    f488:	a801      	add	r0, sp, #4
    f48a:	f000 f8f8 	bl	f67e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f48e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f490:	2001      	movs	r0, #1
    f492:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f494 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f494:	b510      	push	{r4, lr}
    f496:	4604      	mov	r4, r0
    f498:	f000 fbd1 	bl	fc3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f49c:	b120      	cbz	r0, f4a8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f49e:	f7f6 f9c9 	bl	5834 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f4a2:	b108      	cbz	r0, f4a8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f4a4:	200c      	movs	r0, #12
    f4a6:	bd10      	pop	{r4, pc}
    f4a8:	7820      	ldrb	r0, [r4, #0]
    f4aa:	f7ff fdea 	bl	f082 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f4ae:	79e2      	ldrb	r2, [r4, #7]
    f4b0:	1c61      	adds	r1, r4, #1
    f4b2:	f7f6 f959 	bl	5768 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f4b6:	b108      	cbz	r0, f4bc <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f4b8:	2000      	movs	r0, #0
    f4ba:	bd10      	pop	{r4, pc}
    f4bc:	2002      	movs	r0, #2
    f4be:	bd10      	pop	{r4, pc}

0000f4c0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f4c0:	b510      	push	{r4, lr}
    f4c2:	4604      	mov	r4, r0
    f4c4:	2001      	movs	r0, #1
    f4c6:	f000 f9bb 	bl	f840 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f4ca:	b128      	cbz	r0, f4d8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f4cc:	4621      	mov	r1, r4
    f4ce:	2001      	movs	r0, #1
    f4d0:	f7f5 fb52 	bl	4b78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f4d4:	2000      	movs	r0, #0
    f4d6:	bd10      	pop	{r4, pc}
    f4d8:	200c      	movs	r0, #12
    f4da:	bd10      	pop	{r4, pc}

0000f4dc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f4dc:	b510      	push	{r4, lr}
    f4de:	8800      	ldrh	r0, [r0, #0]
    f4e0:	f7f6 fa36 	bl	5950 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f4e4:	b108      	cbz	r0, f4ea <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f4e6:	2000      	movs	r0, #0
    f4e8:	bd10      	pop	{r4, pc}
    f4ea:	2030      	movs	r0, #48	; 0x30
    f4ec:	bd10      	pop	{r4, pc}

0000f4ee <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f4ee:	b51c      	push	{r2, r3, r4, lr}
    f4f0:	7801      	ldrb	r1, [r0, #0]
    f4f2:	f88d 1000 	strb.w	r1, [sp]
    f4f6:	7840      	ldrb	r0, [r0, #1]
    f4f8:	f88d 0001 	strb.w	r0, [sp, #1]
    f4fc:	2000      	movs	r0, #0
    f4fe:	f8ad 0002 	strh.w	r0, [sp, #2]
    f502:	f8ad 0004 	strh.w	r0, [sp, #4]
    f506:	4601      	mov	r1, r0
    f508:	4668      	mov	r0, sp
    f50a:	f000 f9e4 	bl	f8d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    f50e:	2800      	cmp	r0, #0
    f510:	d102      	bne.n	f518 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f512:	4668      	mov	r0, sp
    f514:	f000 f9c3 	bl	f89e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    f518:	bd1c      	pop	{r2, r3, r4, pc}

0000f51a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f51a:	b500      	push	{lr}
    f51c:	b087      	sub	sp, #28
    f51e:	7941      	ldrb	r1, [r0, #5]
    f520:	f88d 1000 	strb.w	r1, [sp]
    f524:	7981      	ldrb	r1, [r0, #6]
    f526:	f88d 1001 	strb.w	r1, [sp, #1]
    f52a:	2101      	movs	r1, #1
    f52c:	f88d 1002 	strb.w	r1, [sp, #2]
    f530:	7801      	ldrb	r1, [r0, #0]
    f532:	f88d 1003 	strb.w	r1, [sp, #3]
    f536:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f53a:	f240 2271 	movw	r2, #625	; 0x271
    f53e:	4351      	muls	r1, r2
    f540:	9102      	str	r1, [sp, #8]
    f542:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f546:	4350      	muls	r0, r2
    f548:	9004      	str	r0, [sp, #16]
    f54a:	2007      	movs	r0, #7
    f54c:	f88d 0018 	strb.w	r0, [sp, #24]
    f550:	2000      	movs	r0, #0
    f552:	f88d 0019 	strb.w	r0, [sp, #25]
    f556:	9804      	ldr	r0, [sp, #16]
    f558:	f7fb fcf8 	bl	af4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    f55c:	b140      	cbz	r0, f570 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f55e:	9802      	ldr	r0, [sp, #8]
    f560:	f7fb fce8 	bl	af34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    f564:	b120      	cbz	r0, f570 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f566:	4668      	mov	r0, sp
    f568:	f7fb fb7c 	bl	ac64 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f56c:	b007      	add	sp, #28
    f56e:	bd00      	pop	{pc}
    f570:	2030      	movs	r0, #48	; 0x30
    f572:	e7fb      	b.n	f56c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f574 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f574:	b570      	push	{r4, r5, r6, lr}
    f576:	4605      	mov	r5, r0
    f578:	8800      	ldrh	r0, [r0, #0]
    f57a:	2100      	movs	r1, #0
    f57c:	f7fe fb6f 	bl	dc5e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f580:	0004      	movs	r4, r0
    f582:	d007      	beq.n	f594 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f584:	f000 fb47 	bl	fc16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f588:	b120      	cbz	r0, f594 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f58a:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    f58e:	b118      	cbz	r0, f598 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f590:	203a      	movs	r0, #58	; 0x3a
    f592:	bd70      	pop	{r4, r5, r6, pc}
    f594:	2002      	movs	r0, #2
    f596:	bd70      	pop	{r4, r5, r6, pc}
    f598:	2100      	movs	r1, #0
    f59a:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    f59e:	f7ff fd66 	bl	f06e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f5a2:	2801      	cmp	r0, #1
    f5a4:	d001      	beq.n	f5aa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f5a6:	201a      	movs	r0, #26
    f5a8:	bd70      	pop	{r4, r5, r6, pc}
    f5aa:	f8d5 1002 	ldr.w	r1, [r5, #2]
    f5ae:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    f5b2:	f8d5 1006 	ldr.w	r1, [r5, #6]
    f5b6:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    f5ba:	8969      	ldrh	r1, [r5, #10]
    f5bc:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    f5c0:	2210      	movs	r2, #16
    f5c2:	f105 010c 	add.w	r1, r5, #12
    f5c6:	f204 1065 	addw	r0, r4, #357	; 0x165
    f5ca:	f7fd fa8a 	bl	cae2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f5ce:	2001      	movs	r0, #1
    f5d0:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    f5d4:	2000      	movs	r0, #0
    f5d6:	bd70      	pop	{r4, r5, r6, pc}

0000f5d8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f5d8:	b51c      	push	{r2, r3, r4, lr}
    f5da:	4604      	mov	r4, r0
    f5dc:	f000 fb12 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f5e0:	b178      	cbz	r0, f602 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f5e2:	8820      	ldrh	r0, [r4, #0]
    f5e4:	f8ad 0000 	strh.w	r0, [sp]
    f5e8:	8860      	ldrh	r0, [r4, #2]
    f5ea:	f8ad 0002 	strh.w	r0, [sp, #2]
    f5ee:	8820      	ldrh	r0, [r4, #0]
    f5f0:	f8ad 0004 	strh.w	r0, [sp, #4]
    f5f4:	8860      	ldrh	r0, [r4, #2]
    f5f6:	f8ad 0006 	strh.w	r0, [sp, #6]
    f5fa:	4668      	mov	r0, sp
    f5fc:	f7fb fcdc 	bl	afb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    f600:	bd1c      	pop	{r2, r3, r4, pc}
    f602:	2001      	movs	r0, #1
    f604:	bd1c      	pop	{r2, r3, r4, pc}

0000f606 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f606:	b510      	push	{r4, lr}
    f608:	f7f5 fada 	bl	4bc0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f60c:	2000      	movs	r0, #0
    f60e:	bd10      	pop	{r4, pc}

0000f610 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f610:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f612:	460c      	mov	r4, r1
    f614:	4605      	mov	r5, r0
    f616:	f000 faf5 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f61a:	b160      	cbz	r0, f636 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f61c:	4669      	mov	r1, sp
    f61e:	4628      	mov	r0, r5
    f620:	f7fe fc87 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f624:	2800      	cmp	r0, #0
    f626:	d105      	bne.n	f634 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f628:	2101      	movs	r1, #1
    f62a:	4622      	mov	r2, r4
    f62c:	9801      	ldr	r0, [sp, #4]
    f62e:	f000 fa74 	bl	fb1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f632:	2000      	movs	r0, #0
    f634:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f636:	2001      	movs	r0, #1
    f638:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f63a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f63a:	b510      	push	{r4, lr}
    f63c:	4604      	mov	r4, r0
    f63e:	2000      	movs	r0, #0
    f640:	f000 f8fe 	bl	f840 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f644:	b128      	cbz	r0, f652 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f646:	4621      	mov	r1, r4
    f648:	2000      	movs	r0, #0
    f64a:	f7f5 fa95 	bl	4b78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f64e:	2000      	movs	r0, #0
    f650:	bd10      	pop	{r4, pc}
    f652:	200c      	movs	r0, #12
    f654:	bd10      	pop	{r4, pc}

0000f656 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f656:	b510      	push	{r4, lr}
    f658:	7800      	ldrb	r0, [r0, #0]
    f65a:	f000 0001 	and.w	r0, r0, #1
    f65e:	f7f8 fb35 	bl	7ccc <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f662:	2000      	movs	r0, #0
    f664:	bd10      	pop	{r4, pc}

0000f666 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f666:	b510      	push	{r4, lr}
    f668:	4604      	mov	r4, r0
    f66a:	f000 facb 	bl	fc04 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f66e:	b120      	cbz	r0, f67a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f670:	4620      	mov	r0, r4
    f672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f676:	f000 baf4 	b.w	fc62 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f67a:	2001      	movs	r0, #1
    f67c:	bd10      	pop	{r4, pc}

0000f67e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f67e:	b510      	push	{r4, lr}
    f680:	4604      	mov	r4, r0
    f682:	8880      	ldrh	r0, [r0, #4]
    f684:	b128      	cbz	r0, f692 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f686:	2801      	cmp	r0, #1
    f688:	d003      	beq.n	f692 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f68a:	2802      	cmp	r0, #2
    f68c:	d001      	beq.n	f692 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f68e:	2012      	movs	r0, #18
    f690:	bd10      	pop	{r4, pc}
    f692:	78e0      	ldrb	r0, [r4, #3]
    f694:	f000 f8e0 	bl	f858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f698:	b148      	cbz	r0, f6ae <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f69a:	78a0      	ldrb	r0, [r4, #2]
    f69c:	f000 f8dc 	bl	f858 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f6a0:	b128      	cbz	r0, f6ae <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f6a2:	4620      	mov	r0, r4
    f6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6a8:	2101      	movs	r1, #1
    f6aa:	f7fb bb31 	b.w	ad10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f6ae:	2011      	movs	r0, #17
    f6b0:	bd10      	pop	{r4, pc}

0000f6b2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f6b2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f6b4:	460c      	mov	r4, r1
    f6b6:	4605      	mov	r5, r0
    f6b8:	8800      	ldrh	r0, [r0, #0]
    f6ba:	4669      	mov	r1, sp
    f6bc:	f7fe fc39 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6c0:	2800      	cmp	r0, #0
    f6c2:	d106      	bne.n	f6d2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f6c4:	9801      	ldr	r0, [sp, #4]
    f6c6:	8829      	ldrh	r1, [r5, #0]
    f6c8:	8021      	strh	r1, [r4, #0]
    f6ca:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    f6ce:	8060      	strh	r0, [r4, #2]
    f6d0:	2000      	movs	r0, #0
    f6d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f6d4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f6d4:	b510      	push	{r4, lr}
    f6d6:	4604      	mov	r4, r0
    f6d8:	4601      	mov	r1, r0
    f6da:	2000      	movs	r0, #0
    f6dc:	f7f5 fa34 	bl	4b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f6e0:	b910      	cbnz	r0, f6e8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f6e2:	2000      	movs	r0, #0
    f6e4:	6020      	str	r0, [r4, #0]
    f6e6:	80a0      	strh	r0, [r4, #4]
    f6e8:	2000      	movs	r0, #0
    f6ea:	bd10      	pop	{r4, pc}

0000f6ec <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f6ec:	b51c      	push	{r2, r3, r4, lr}
    f6ee:	8800      	ldrh	r0, [r0, #0]
    f6f0:	4669      	mov	r1, sp
    f6f2:	f7fe fc1e 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f6f6:	b968      	cbnz	r0, f714 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f6f8:	4668      	mov	r0, sp
    f6fa:	f000 fa89 	bl	fc10 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f6fe:	b148      	cbz	r0, f714 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f700:	9801      	ldr	r0, [sp, #4]
    f702:	2201      	movs	r2, #1
    f704:	4601      	mov	r1, r0
    f706:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f70a:	3078      	adds	r0, #120	; 0x78
    f70c:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f710:	b92b      	cbnz	r3, f71e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f712:	e001      	b.n	f718 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f714:	2002      	movs	r0, #2
    f716:	bd1c      	pop	{r2, r3, r4, pc}
    f718:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f71c:	b10b      	cbz	r3, f722 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f71e:	203a      	movs	r0, #58	; 0x3a
    f720:	bd1c      	pop	{r2, r3, r4, pc}
    f722:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f726:	079b      	lsls	r3, r3, #30
    f728:	d100      	bne.n	f72c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f72a:	700a      	strb	r2, [r1, #0]
    f72c:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f730:	2000      	movs	r0, #0
    f732:	bd1c      	pop	{r2, r3, r4, pc}

0000f734 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f734:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f736:	460c      	mov	r4, r1
    f738:	4605      	mov	r5, r0
    f73a:	8800      	ldrh	r0, [r0, #0]
    f73c:	4669      	mov	r1, sp
    f73e:	f7fe fbf8 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f742:	b108      	cbz	r0, f748 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f744:	2002      	movs	r0, #2
    f746:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f748:	78a8      	ldrb	r0, [r5, #2]
    f74a:	b130      	cbz	r0, f75a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f74c:	f000 fa3b 	bl	fbc6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f750:	70a0      	strb	r0, [r4, #2]
    f752:	8828      	ldrh	r0, [r5, #0]
    f754:	8020      	strh	r0, [r4, #0]
    f756:	2000      	movs	r0, #0
    f758:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f75a:	9801      	ldr	r0, [sp, #4]
    f75c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f760:	e7f6      	b.n	f750 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f762 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f762:	b510      	push	{r4, lr}
    f764:	f7fb fc66 	bl	b034 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f768:	2000      	movs	r0, #0
    f76a:	bd10      	pop	{r4, pc}

0000f76c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f76c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f770:	4604      	mov	r4, r0
    f772:	8840      	ldrh	r0, [r0, #2]
    f774:	460d      	mov	r5, r1
    f776:	b1b8      	cbz	r0, f7a8 <__kernel_ram_size+0x30>
    f778:	8820      	ldrh	r0, [r4, #0]
    f77a:	4669      	mov	r1, sp
    f77c:	f7fe fbd9 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f780:	2800      	cmp	r0, #0
    f782:	d10f      	bne.n	f7a4 <__kernel_ram_size+0x2c>
    f784:	8820      	ldrh	r0, [r4, #0]
    f786:	8028      	strh	r0, [r5, #0]
    f788:	9e01      	ldr	r6, [sp, #4]
    f78a:	f106 050c 	add.w	r5, r6, #12
    f78e:	3678      	adds	r6, #120	; 0x78
    f790:	682f      	ldr	r7, [r5, #0]
    f792:	8862      	ldrh	r2, [r4, #2]
    f794:	4639      	mov	r1, r7
    f796:	4630      	mov	r0, r6
    f798:	f7fe fd8c 	bl	e2b4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f79c:	6828      	ldr	r0, [r5, #0]
    f79e:	42b8      	cmp	r0, r7
    f7a0:	d1f6      	bne.n	f790 <__kernel_ram_size+0x18>
    f7a2:	2000      	movs	r0, #0
    f7a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f7a8:	2012      	movs	r0, #18
    f7aa:	e7fb      	b.n	f7a4 <__kernel_ram_size+0x2c>

0000f7ac <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f7ac:	f7fb bb16 	b.w	addc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f7b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f7b0:	b510      	push	{r4, lr}
    f7b2:	2008      	movs	r0, #8
    f7b4:	f7fb fc9e 	bl	b0f4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7bc:	f7f9 baa0 	b.w	8d00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f7c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f7c0:	b510      	push	{r4, lr}
    f7c2:	4604      	mov	r4, r0
    f7c4:	2000      	movs	r0, #0
    f7c6:	8822      	ldrh	r2, [r4, #0]
    f7c8:	b086      	sub	sp, #24
    f7ca:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f7ce:	39ff      	subs	r1, #255	; 0xff
    f7d0:	d008      	beq.n	f7e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f7d2:	a903      	add	r1, sp, #12
    f7d4:	4610      	mov	r0, r2
    f7d6:	f7fe fbac 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f7da:	b110      	cbz	r0, f7e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f7dc:	2002      	movs	r0, #2
    f7de:	b006      	add	sp, #24
    f7e0:	bd10      	pop	{r4, pc}
    f7e2:	9804      	ldr	r0, [sp, #16]
    f7e4:	8921      	ldrh	r1, [r4, #8]
    f7e6:	89a3      	ldrh	r3, [r4, #12]
    f7e8:	8962      	ldrh	r2, [r4, #10]
    f7ea:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f7ee:	88e3      	ldrh	r3, [r4, #6]
    f7f0:	88a2      	ldrh	r2, [r4, #4]
    f7f2:	8861      	ldrh	r1, [r4, #2]
    f7f4:	f000 f966 	bl	fac4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f7f8:	b108      	cbz	r0, f7fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f7fa:	2000      	movs	r0, #0
    f7fc:	e7ef      	b.n	f7de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f7fe:	2030      	movs	r0, #48	; 0x30
    f800:	e7ed      	b.n	f7de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f802:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f806:	4288      	cmp	r0, r1
    f808:	d303      	bcc.n	f812 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f80a:	f640 0148 	movw	r1, #2120	; 0x848
    f80e:	4288      	cmp	r0, r1
    f810:	d300      	bcc.n	f814 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f812:	4608      	mov	r0, r1
    f814:	4770      	bx	lr
    f816:	07c1      	lsls	r1, r0, #31
    f818:	d001      	beq.n	f81e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f81a:	2001      	movs	r0, #1
    f81c:	4770      	bx	lr
    f81e:	0780      	lsls	r0, r0, #30
    f820:	d501      	bpl.n	f826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f822:	2002      	movs	r0, #2
    f824:	4770      	bx	lr
    f826:	2000      	movs	r0, #0
    f828:	4770      	bx	lr
    f82a:	b510      	push	{r4, lr}
    f82c:	2801      	cmp	r0, #1
    f82e:	d006      	beq.n	f83e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f830:	2802      	cmp	r0, #2
    f832:	d004      	beq.n	f83e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f834:	f240 2163 	movw	r1, #611	; 0x263
    f838:	2006      	movs	r0, #6
    f83a:	f7f4 fb33 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f83e:	bd10      	pop	{r4, pc}
    f840:	b510      	push	{r4, lr}
    f842:	f000 fa03 	bl	fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f846:	b128      	cbz	r0, f854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f848:	f7f7 f8c0 	bl	69cc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f84c:	2801      	cmp	r0, #1
    f84e:	d001      	beq.n	f854 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f850:	2000      	movs	r0, #0
    f852:	bd10      	pop	{r4, pc}
    f854:	2001      	movs	r0, #1
    f856:	bd10      	pop	{r4, pc}
    f858:	b510      	push	{r4, lr}
    f85a:	0004      	movs	r4, r0
    f85c:	d005      	beq.n	f86a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f85e:	f7fb fc59 	bl	b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f862:	4384      	bics	r4, r0
    f864:	d001      	beq.n	f86a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f866:	2000      	movs	r0, #0
    f868:	bd10      	pop	{r4, pc}
    f86a:	2001      	movs	r0, #1
    f86c:	bd10      	pop	{r4, pc}
    f86e:	28fb      	cmp	r0, #251	; 0xfb
    f870:	d803      	bhi.n	f87a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f872:	f640 0048 	movw	r0, #2120	; 0x848
    f876:	4281      	cmp	r1, r0
    f878:	d901      	bls.n	f87e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f87a:	2011      	movs	r0, #17
    f87c:	4770      	bx	lr
    f87e:	2000      	movs	r0, #0
    f880:	4770      	bx	lr
    f882:	381b      	subs	r0, #27
    f884:	28e1      	cmp	r0, #225	; 0xe1
    f886:	d206      	bcs.n	f896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f888:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f88c:	d303      	bcc.n	f896 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f88e:	f244 2090 	movw	r0, #17040	; 0x4290
    f892:	4281      	cmp	r1, r0
    f894:	d901      	bls.n	f89a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f896:	2012      	movs	r0, #18
    f898:	4770      	bx	lr
    f89a:	2000      	movs	r0, #0
    f89c:	4770      	bx	lr
    f89e:	b510      	push	{r4, lr}
    f8a0:	4604      	mov	r4, r0
    f8a2:	7800      	ldrb	r0, [r0, #0]
    f8a4:	2801      	cmp	r0, #1
    f8a6:	d009      	beq.n	f8bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f8a8:	f7f8 fa9c 	bl	7de4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f8ac:	2805      	cmp	r0, #5
    f8ae:	d003      	beq.n	f8b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f8b0:	f7f8 fa62 	bl	7d78 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d000      	beq.n	f8ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f8b8:	200c      	movs	r0, #12
    f8ba:	bd10      	pop	{r4, pc}
    f8bc:	f7f7 f814 	bl	68e8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f8c0:	b138      	cbz	r0, f8d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f8c2:	f7f6 fe8d 	bl	65e0 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f8c6:	88a1      	ldrh	r1, [r4, #4]
    f8c8:	8860      	ldrh	r0, [r4, #2]
    f8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8ce:	f7f8 ba17 	b.w	7d00 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    f8d2:	2012      	movs	r0, #18
    f8d4:	bd10      	pop	{r4, pc}
    f8d6:	7802      	ldrb	r2, [r0, #0]
    f8d8:	2a01      	cmp	r2, #1
    f8da:	d001      	beq.n	f8e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f8dc:	b1ba      	cbz	r2, f90e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f8de:	e018      	b.n	f912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f8e0:	7842      	ldrb	r2, [r0, #1]
    f8e2:	b13a      	cbz	r2, f8f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f8e4:	2a01      	cmp	r2, #1
    f8e6:	d005      	beq.n	f8f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f8e8:	2a02      	cmp	r2, #2
    f8ea:	d112      	bne.n	f912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f8ec:	b189      	cbz	r1, f912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f8ee:	8881      	ldrh	r1, [r0, #4]
    f8f0:	b179      	cbz	r1, f912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f8f2:	e000      	b.n	f8f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f8f4:	b159      	cbz	r1, f90e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f8f6:	8841      	ldrh	r1, [r0, #2]
    f8f8:	b149      	cbz	r1, f90e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f8fa:	8880      	ldrh	r0, [r0, #4]
    f8fc:	b138      	cbz	r0, f90e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f8fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f902:	0049      	lsls	r1, r1, #1
    f904:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f908:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f90c:	d201      	bcs.n	f912 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f90e:	2000      	movs	r0, #0
    f910:	4770      	bx	lr
    f912:	2012      	movs	r0, #18
    f914:	4770      	bx	lr
    f916:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f91a:	7a45      	ldrb	r5, [r0, #9]
    f91c:	4604      	mov	r4, r0
    f91e:	0768      	lsls	r0, r5, #29
    f920:	d06c      	beq.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f922:	08e8      	lsrs	r0, r5, #3
    f924:	d16a      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f926:	2d02      	cmp	r5, #2
    f928:	d068      	beq.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f92a:	f7fb fbf3 	bl	b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f92e:	ea25 0000 	bic.w	r0, r5, r0
    f932:	0740      	lsls	r0, r0, #29
    f934:	d102      	bne.n	f93c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f936:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f93a:	b110      	cbz	r0, f942 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f93c:	2011      	movs	r0, #17
    f93e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f942:	2d01      	cmp	r5, #1
    f944:	d15a      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f946:	27ff      	movs	r7, #255	; 0xff
    f948:	2101      	movs	r1, #1
    f94a:	69a0      	ldr	r0, [r4, #24]
    f94c:	f7fb fb1e 	bl	af8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f950:	b3e8      	cbz	r0, f9ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f952:	46a8      	mov	r8, r5
    f954:	2600      	movs	r6, #0
    f956:	4635      	mov	r5, r6
    f958:	42bd      	cmp	r5, r7
    f95a:	d02f      	beq.n	f9bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f95c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f960:	6988      	ldr	r0, [r1, #24]
    f962:	68c9      	ldr	r1, [r1, #12]
    f964:	4288      	cmp	r0, r1
    f966:	d849      	bhi.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f968:	4406      	add	r6, r0
    f96a:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f96e:	4681      	mov	r9, r0
    f970:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f972:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f976:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f978:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f97c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f97e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f980:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f982:	2000      	movs	r0, #0
    f984:	f000 f89e 	bl	fac4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f988:	b308      	cbz	r0, f9ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f98a:	b1bd      	cbz	r5, f9bc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f98c:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f990:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f994:	4281      	cmp	r1, r0
    f996:	d131      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f998:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f99c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f9a0:	4281      	cmp	r1, r0
    f9a2:	d12b      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9a4:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f9a8:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f9ac:	4281      	cmp	r1, r0
    f9ae:	d125      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9b0:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f9b4:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f9b8:	4281      	cmp	r1, r0
    f9ba:	d11f      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9bc:	1c6d      	adds	r5, r5, #1
    f9be:	b2ed      	uxtb	r5, r5
    f9c0:	4545      	cmp	r5, r8
    f9c2:	d3c9      	bcc.n	f958 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f9c4:	68e0      	ldr	r0, [r4, #12]
    f9c6:	42b0      	cmp	r0, r6
    f9c8:	d318      	bcc.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9ca:	7820      	ldrb	r0, [r4, #0]
    f9cc:	e000      	b.n	f9d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f9ce:	e003      	b.n	f9d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f9d0:	b120      	cbz	r0, f9dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f9d2:	2801      	cmp	r0, #1
    f9d4:	d112      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9d6:	e004      	b.n	f9e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f9d8:	2030      	movs	r0, #48	; 0x30
    f9da:	e7b0      	b.n	f93e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f9dc:	78a0      	ldrb	r0, [r4, #2]
    f9de:	2800      	cmp	r0, #0
    f9e0:	d1f7      	bne.n	f9d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f9e2:	7860      	ldrb	r0, [r4, #1]
    f9e4:	b128      	cbz	r0, f9f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f9e6:	2801      	cmp	r0, #1
    f9e8:	d003      	beq.n	f9f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f9ea:	2802      	cmp	r0, #2
    f9ec:	d001      	beq.n	f9f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f9ee:	2803      	cmp	r0, #3
    f9f0:	d104      	bne.n	f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9f2:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9f6:	b108      	cbz	r0, f9fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f9f8:	2807      	cmp	r0, #7
    f9fa:	d901      	bls.n	fa00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f9fc:	2012      	movs	r0, #18
    f9fe:	e79e      	b.n	f93e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    fa00:	2000      	movs	r0, #0
    fa02:	e79c      	b.n	f93e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    fa04:	b570      	push	{r4, r5, r6, lr}
    fa06:	4604      	mov	r4, r0
    fa08:	7800      	ldrb	r0, [r0, #0]
    fa0a:	2500      	movs	r5, #0
    fa0c:	2801      	cmp	r0, #1
    fa0e:	d004      	beq.n	fa1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fa10:	b118      	cbz	r0, fa1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fa12:	2802      	cmp	r0, #2
    fa14:	d001      	beq.n	fa1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    fa16:	2803      	cmp	r0, #3
    fa18:	d139      	bne.n	fa8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fa1a:	7860      	ldrb	r0, [r4, #1]
    fa1c:	b128      	cbz	r0, fa2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fa1e:	2801      	cmp	r0, #1
    fa20:	d003      	beq.n	fa2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fa22:	2802      	cmp	r0, #2
    fa24:	d001      	beq.n	fa2a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    fa26:	2803      	cmp	r0, #3
    fa28:	d131      	bne.n	fa8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fa2a:	7e60      	ldrb	r0, [r4, #25]
    fa2c:	b948      	cbnz	r0, fa42 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    fa2e:	78a0      	ldrb	r0, [r4, #2]
    fa30:	2801      	cmp	r0, #1
    fa32:	d12c      	bne.n	fa8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fa34:	f7fb fb6e 	bl	b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fa38:	4601      	mov	r1, r0
    fa3a:	78a0      	ldrb	r0, [r4, #2]
    fa3c:	ea30 0101 	bics.w	r1, r0, r1
    fa40:	d001      	beq.n	fa46 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    fa42:	2011      	movs	r0, #17
    fa44:	bd70      	pop	{r4, r5, r6, pc}
    fa46:	07c0      	lsls	r0, r0, #31
    fa48:	d006      	beq.n	fa58 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    fa4a:	78e0      	ldrb	r0, [r4, #3]
    fa4c:	2301      	movs	r3, #1
    fa4e:	6922      	ldr	r2, [r4, #16]
    fa50:	68a1      	ldr	r1, [r4, #8]
    fa52:	f000 f820 	bl	fa96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fa56:	4605      	mov	r5, r0
    fa58:	78a0      	ldrb	r0, [r4, #2]
    fa5a:	0780      	lsls	r0, r0, #30
    fa5c:	d506      	bpl.n	fa6c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    fa5e:	78e0      	ldrb	r0, [r4, #3]
    fa60:	2302      	movs	r3, #2
    fa62:	6922      	ldr	r2, [r4, #16]
    fa64:	68a1      	ldr	r1, [r4, #8]
    fa66:	f000 f816 	bl	fa96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fa6a:	4305      	orrs	r5, r0
    fa6c:	78a0      	ldrb	r0, [r4, #2]
    fa6e:	0740      	lsls	r0, r0, #29
    fa70:	d506      	bpl.n	fa80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    fa72:	78e0      	ldrb	r0, [r4, #3]
    fa74:	2304      	movs	r3, #4
    fa76:	6922      	ldr	r2, [r4, #16]
    fa78:	68a1      	ldr	r1, [r4, #8]
    fa7a:	f000 f80c 	bl	fa96 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    fa7e:	4305      	orrs	r5, r0
    fa80:	b10d      	cbz	r5, fa86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    fa82:	4628      	mov	r0, r5
    fa84:	bd70      	pop	{r4, r5, r6, pc}
    fa86:	7e20      	ldrb	r0, [r4, #24]
    fa88:	b108      	cbz	r0, fa8e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    fa8a:	2807      	cmp	r0, #7
    fa8c:	d901      	bls.n	fa92 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    fa8e:	2012      	movs	r0, #18
    fa90:	bd70      	pop	{r4, r5, r6, pc}
    fa92:	2000      	movs	r0, #0
    fa94:	bd70      	pop	{r4, r5, r6, pc}
    fa96:	b570      	push	{r4, r5, r6, lr}
    fa98:	4614      	mov	r4, r2
    fa9a:	460d      	mov	r5, r1
    fa9c:	b108      	cbz	r0, faa2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    fa9e:	2801      	cmp	r0, #1
    faa0:	d10a      	bne.n	fab8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    faa2:	4619      	mov	r1, r3
    faa4:	4610      	mov	r0, r2
    faa6:	f7fb fa71 	bl	af8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    faaa:	b138      	cbz	r0, fabc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    faac:	4628      	mov	r0, r5
    faae:	f7fb fa35 	bl	af1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
    fab2:	b118      	cbz	r0, fabc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    fab4:	42ac      	cmp	r4, r5
    fab6:	d903      	bls.n	fac0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    fab8:	2012      	movs	r0, #18
    faba:	bd70      	pop	{r4, r5, r6, pc}
    fabc:	2030      	movs	r0, #48	; 0x30
    fabe:	bd70      	pop	{r4, r5, r6, pc}
    fac0:	2000      	movs	r0, #0
    fac2:	bd70      	pop	{r4, r5, r6, pc}
    fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fac8:	461d      	mov	r5, r3
    faca:	4610      	mov	r0, r2
    facc:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    fad0:	1f8b      	subs	r3, r1, #6
    fad2:	f640 427a 	movw	r2, #3194	; 0xc7a
    fad6:	9e08      	ldr	r6, [sp, #32]
    fad8:	4293      	cmp	r3, r2
    fada:	d81c      	bhi.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fadc:	1f83      	subs	r3, r0, #6
    fade:	4293      	cmp	r3, r2
    fae0:	d819      	bhi.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fae2:	4281      	cmp	r1, r0
    fae4:	d817      	bhi.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fae6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    faea:	d214      	bcs.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    faec:	f1a4 010a 	sub.w	r1, r4, #10
    faf0:	1f12      	subs	r2, r2, #4
    faf2:	4291      	cmp	r1, r2
    faf4:	d80f      	bhi.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    faf6:	f7fe fa28 	bl	df4a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fafa:	1c6d      	adds	r5, r5, #1
    fafc:	4368      	muls	r0, r5
    fafe:	f240 2171 	movw	r1, #625	; 0x271
    fb02:	0040      	lsls	r0, r0, #1
    fb04:	434c      	muls	r4, r1
    fb06:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    fb0a:	d204      	bcs.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fb0c:	42b7      	cmp	r7, r6
    fb0e:	d802      	bhi.n	fb16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    fb10:	2001      	movs	r0, #1
    fb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb16:	2000      	movs	r0, #0
    fb18:	e7fb      	b.n	fb12 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    fb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb1e:	4606      	mov	r6, r0
    fb20:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fb24:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fb28:	4615      	mov	r5, r2
    fb2a:	302c      	adds	r0, #44	; 0x2c
    fb2c:	f7f8 f8d4 	bl	7cd8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    fb30:	4680      	mov	r8, r0
    fb32:	2102      	movs	r1, #2
    fb34:	f7fe fac8 	bl	e0c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb38:	4287      	cmp	r7, r0
    fb3a:	d200      	bcs.n	fb3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    fb3c:	4638      	mov	r0, r7
    fb3e:	4607      	mov	r7, r0
    fb40:	2102      	movs	r1, #2
    fb42:	4640      	mov	r0, r8
    fb44:	f7fe fac0 	bl	e0c8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fb48:	4284      	cmp	r4, r0
    fb4a:	d200      	bcs.n	fb4e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    fb4c:	4620      	mov	r0, r4
    fb4e:	8831      	ldrh	r1, [r6, #0]
    fb50:	8029      	strh	r1, [r5, #0]
    fb52:	2f1b      	cmp	r7, #27
    fb54:	d913      	bls.n	fb7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    fb56:	2ffb      	cmp	r7, #251	; 0xfb
    fb58:	d300      	bcc.n	fb5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    fb5a:	27fb      	movs	r7, #251	; 0xfb
    fb5c:	806f      	strh	r7, [r5, #2]
    fb5e:	281b      	cmp	r0, #27
    fb60:	d90f      	bls.n	fb82 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    fb62:	28fb      	cmp	r0, #251	; 0xfb
    fb64:	d300      	bcc.n	fb68 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    fb66:	20fb      	movs	r0, #251	; 0xfb
    fb68:	80e8      	strh	r0, [r5, #6]
    fb6a:	4640      	mov	r0, r8
    fb6c:	f7ff fe49 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    fb70:	80a8      	strh	r0, [r5, #4]
    fb72:	4640      	mov	r0, r8
    fb74:	f7ff fe45 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    fb78:	8128      	strh	r0, [r5, #8]
    fb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb7e:	271b      	movs	r7, #27
    fb80:	e7ec      	b.n	fb5c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    fb82:	201b      	movs	r0, #27
    fb84:	e7f0      	b.n	fb68 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    fb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb8a:	7890      	ldrb	r0, [r2, #2]
    fb8c:	9e06      	ldr	r6, [sp, #24]
    fb8e:	461d      	mov	r5, r3
    fb90:	4614      	mov	r4, r2
    fb92:	b908      	cbnz	r0, fb98 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    fb94:	f7fb fabe 	bl	b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fb98:	78e4      	ldrb	r4, [r4, #3]
    fb9a:	4607      	mov	r7, r0
    fb9c:	b914      	cbnz	r4, fba4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
    fb9e:	f7fb fab9 	bl	b114 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fba2:	4604      	mov	r4, r0
    fba4:	b16f      	cbz	r7, fbc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fba6:	b164      	cbz	r4, fbc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fba8:	4638      	mov	r0, r7
    fbaa:	f7ff fe34 	bl	f816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    fbae:	4620      	mov	r0, r4
    fbb0:	f7ff fe31 	bl	f816 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    fbb4:	b12f      	cbz	r7, fbc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fbb6:	b124      	cbz	r4, fbc2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    fbb8:	702f      	strb	r7, [r5, #0]
    fbba:	7034      	strb	r4, [r6, #0]
    fbbc:	2000      	movs	r0, #0
    fbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbc2:	2009      	movs	r0, #9
    fbc4:	e7fb      	b.n	fbbe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
    fbc6:	b510      	push	{r4, lr}
    fbc8:	f7fc ff2f 	bl	ca2a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    fbcc:	b928      	cbnz	r0, fbda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    fbce:	f7fc ff62 	bl	ca96 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    fbd2:	b910      	cbnz	r0, fbda <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    fbd4:	f7fc ff69 	bl	caaa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    fbd8:	b108      	cbz	r0, fbde <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
    fbda:	2008      	movs	r0, #8
    fbdc:	bd10      	pop	{r4, pc}
    fbde:	f7fc fef9 	bl	c9d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    fbe2:	b940      	cbnz	r0, fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fbe4:	f7fc ff00 	bl	c9e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    fbe8:	b928      	cbnz	r0, fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fbea:	f7fc ff14 	bl	ca16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    fbee:	b910      	cbnz	r0, fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    fbf0:	f7fc ff25 	bl	ca3e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    fbf4:	b108      	cbz	r0, fbfa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
    fbf6:	2004      	movs	r0, #4
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	f240 519c 	movw	r1, #1436	; 0x59c
    fbfe:	2039      	movs	r0, #57	; 0x39
    fc00:	f7f4 f950 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc04:	b510      	push	{r4, lr}
    fc06:	f7fb fa7f 	bl	b108 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fc0a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fc0e:	bd10      	pop	{r4, pc}
    fc10:	6840      	ldr	r0, [r0, #4]
    fc12:	f000 b800 	b.w	fc16 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    fc16:	b508      	push	{r3, lr}
    fc18:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    fc1c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    fc20:	f88d 0000 	strb.w	r0, [sp]
    fc24:	9800      	ldr	r0, [sp, #0]
    fc26:	9000      	str	r0, [sp, #0]
    fc28:	f89d 0000 	ldrb.w	r0, [sp]
    fc2c:	1e40      	subs	r0, r0, #1
    fc2e:	4208      	tst	r0, r1
    fc30:	d003      	beq.n	fc3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    fc32:	2904      	cmp	r1, #4
    fc34:	d001      	beq.n	fc3a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    fc36:	2001      	movs	r0, #1
    fc38:	bd08      	pop	{r3, pc}
    fc3a:	2000      	movs	r0, #0
    fc3c:	bd08      	pop	{r3, pc}
    fc3e:	b510      	push	{r4, lr}
    fc40:	f000 f804 	bl	fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    fc44:	2800      	cmp	r0, #0
    fc46:	d000      	beq.n	fc4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
    fc48:	2001      	movs	r0, #1
    fc4a:	bd10      	pop	{r4, pc}
    fc4c:	b510      	push	{r4, lr}
    fc4e:	f7f8 f8c9 	bl	7de4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fc52:	2804      	cmp	r0, #4
    fc54:	d003      	beq.n	fc5e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    fc56:	2805      	cmp	r0, #5
    fc58:	d001      	beq.n	fc5e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    fc5a:	2000      	movs	r0, #0
    fc5c:	bd10      	pop	{r4, pc}
    fc5e:	2001      	movs	r0, #1
    fc60:	bd10      	pop	{r4, pc}
    fc62:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc64:	b089      	sub	sp, #36	; 0x24
    fc66:	4604      	mov	r4, r0
    fc68:	8800      	ldrh	r0, [r0, #0]
    fc6a:	a906      	add	r1, sp, #24
    fc6c:	f7fe f961 	bl	df32 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc70:	2800      	cmp	r0, #0
    fc72:	d143      	bne.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fc74:	9807      	ldr	r0, [sp, #28]
    fc76:	2601      	movs	r6, #1
    fc78:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    fc7c:	f88d 1008 	strb.w	r1, [sp, #8]
    fc80:	9902      	ldr	r1, [sp, #8]
    fc82:	9102      	str	r1, [sp, #8]
    fc84:	f89d 1008 	ldrb.w	r1, [sp, #8]
    fc88:	f88d 100c 	strb.w	r1, [sp, #12]
    fc8c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    fc90:	3078      	adds	r0, #120	; 0x78
    fc92:	291d      	cmp	r1, #29
    fc94:	d102      	bne.n	fc9c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    fc96:	f89d 100c 	ldrb.w	r1, [sp, #12]
    fc9a:	b141      	cbz	r1, fcae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    fc9c:	2100      	movs	r1, #0
    fc9e:	f88d 1004 	strb.w	r1, [sp, #4]
    fca2:	2105      	movs	r1, #5
    fca4:	304e      	adds	r0, #78	; 0x4e
    fca6:	f7ff f9e2 	bl	f06e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    fcaa:	b110      	cbz	r0, fcb2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    fcac:	e004      	b.n	fcb8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    fcae:	2101      	movs	r1, #1
    fcb0:	e7f5      	b.n	fc9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    fcb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fcb6:	b300      	cbz	r0, fcfa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    fcb8:	8921      	ldrh	r1, [r4, #8]
    fcba:	88e0      	ldrh	r0, [r4, #6]
    fcbc:	f7ff fde1 	bl	f882 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    fcc0:	2800      	cmp	r0, #0
    fcc2:	d11b      	bne.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fcc4:	88a1      	ldrh	r1, [r4, #4]
    fcc6:	8860      	ldrh	r0, [r4, #2]
    fcc8:	f7ff fddb 	bl	f882 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    fccc:	2800      	cmp	r0, #0
    fcce:	d115      	bne.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fcd0:	8921      	ldrh	r1, [r4, #8]
    fcd2:	88e0      	ldrh	r0, [r4, #6]
    fcd4:	f7ff fdcb 	bl	f86e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    fcd8:	2800      	cmp	r0, #0
    fcda:	d10f      	bne.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fcdc:	88a1      	ldrh	r1, [r4, #4]
    fcde:	8860      	ldrh	r0, [r4, #2]
    fce0:	f7ff fdc5 	bl	f86e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    fce4:	0007      	movs	r7, r0
    fce6:	d109      	bne.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fce8:	9807      	ldr	r0, [sp, #28]
    fcea:	f500 7599 	add.w	r5, r0, #306	; 0x132
    fcee:	706e      	strb	r6, [r5, #1]
    fcf0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    fcf4:	b121      	cbz	r1, fd00 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    fcf6:	273a      	movs	r7, #58	; 0x3a
    fcf8:	e02d      	b.n	fd56 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    fcfa:	201a      	movs	r0, #26
    fcfc:	b009      	add	sp, #36	; 0x24
    fcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd00:	4631      	mov	r1, r6
    fd02:	aa03      	add	r2, sp, #12
    fd04:	f7ff ff09 	bl	fb1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    fd08:	8861      	ldrh	r1, [r4, #2]
    fd0a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    fd0e:	4281      	cmp	r1, r0
    fd10:	d200      	bcs.n	fd14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    fd12:	4608      	mov	r0, r1
    fd14:	80e8      	strh	r0, [r5, #6]
    fd16:	88a1      	ldrh	r1, [r4, #4]
    fd18:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    fd1c:	4281      	cmp	r1, r0
    fd1e:	d200      	bcs.n	fd22 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    fd20:	4608      	mov	r0, r1
    fd22:	8128      	strh	r0, [r5, #8]
    fd24:	88e2      	ldrh	r2, [r4, #6]
    fd26:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    fd2a:	428a      	cmp	r2, r1
    fd2c:	d200      	bcs.n	fd30 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    fd2e:	4611      	mov	r1, r2
    fd30:	8069      	strh	r1, [r5, #2]
    fd32:	8922      	ldrh	r2, [r4, #8]
    fd34:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    fd38:	428a      	cmp	r2, r1
    fd3a:	d200      	bcs.n	fd3e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    fd3c:	4611      	mov	r1, r2
    fd3e:	f640 0248 	movw	r2, #2120	; 0x848
    fd42:	80a9      	strh	r1, [r5, #4]
    fd44:	4291      	cmp	r1, r2
    fd46:	d300      	bcc.n	fd4a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    fd48:	4611      	mov	r1, r2
    fd4a:	80a9      	strh	r1, [r5, #4]
    fd4c:	4290      	cmp	r0, r2
    fd4e:	d200      	bcs.n	fd52 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    fd50:	4602      	mov	r2, r0
    fd52:	812a      	strh	r2, [r5, #8]
    fd54:	702e      	strb	r6, [r5, #0]
    fd56:	2000      	movs	r0, #0
    fd58:	7068      	strb	r0, [r5, #1]
    fd5a:	4638      	mov	r0, r7
    fd5c:	e7ce      	b.n	fcfc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    fd5e:	b530      	push	{r4, r5, lr}
    fd60:	f340 0400 	sbfx	r4, r0, #0, #1
    fd64:	f340 0040 	sbfx	r0, r0, #1, #1
    fd68:	1c40      	adds	r0, r0, #1
    fd6a:	9d03      	ldr	r5, [sp, #12]
    fd6c:	1c64      	adds	r4, r4, #1
    fd6e:	d000      	beq.n	fd72 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    fd70:	b119      	cbz	r1, fd7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    fd72:	b100      	cbz	r0, fd76 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    fd74:	b10a      	cbz	r2, fd7a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    fd76:	b91c      	cbnz	r4, fd80 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    fd78:	e001      	b.n	fd7e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    fd7a:	2011      	movs	r0, #17
    fd7c:	bd30      	pop	{r4, r5, pc}
    fd7e:	2100      	movs	r1, #0
    fd80:	7019      	strb	r1, [r3, #0]
    fd82:	b900      	cbnz	r0, fd86 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    fd84:	2200      	movs	r2, #0
    fd86:	702a      	strb	r2, [r5, #0]
    fd88:	2000      	movs	r0, #0
    fd8a:	bd30      	pop	{r4, r5, pc}
    fd8c:	b510      	push	{r4, lr}
    fd8e:	f7ff ff5d 	bl	fc4c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    fd92:	b120      	cbz	r0, fd9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    fd94:	f7f6 fe22 	bl	69dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    fd98:	b108      	cbz	r0, fd9e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    fd9a:	2001      	movs	r0, #1
    fd9c:	bd10      	pop	{r4, pc}
    fd9e:	2000      	movs	r0, #0
    fda0:	bd10      	pop	{r4, pc}

0000fda2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    fda2:	6802      	ldr	r2, [r0, #0]
    fda4:	b912      	cbnz	r2, fdac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    fda6:	6001      	str	r1, [r0, #0]
    fda8:	4770      	bx	lr
    fdaa:	4602      	mov	r2, r0
    fdac:	6850      	ldr	r0, [r2, #4]
    fdae:	b108      	cbz	r0, fdb4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fdb0:	428a      	cmp	r2, r1
    fdb2:	d1fa      	bne.n	fdaa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fdb4:	428a      	cmp	r2, r1
    fdb6:	d0f7      	beq.n	fda8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fdb8:	6051      	str	r1, [r2, #4]
    fdba:	4770      	bx	lr
    fdbc:	b510      	push	{r4, lr}
    fdbe:	4604      	mov	r4, r0
    fdc0:	e002      	b.n	fdc8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fdc2:	6820      	ldr	r0, [r4, #0]
    fdc4:	4780      	blx	r0
    fdc6:	6864      	ldr	r4, [r4, #4]
    fdc8:	2c00      	cmp	r4, #0
    fdca:	d1fa      	bne.n	fdc2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    fdcc:	bd10      	pop	{r4, pc}
    fdce:	b510      	push	{r4, lr}
    fdd0:	2000      	movs	r0, #0
    fdd2:	f7f4 fa2f 	bl	4234 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fdd6:	f7f4 fc4f 	bl	4678 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fdda:	f7f4 fe97 	bl	4b0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fdde:	f7f5 f87f 	bl	4ee0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fde2:	2800      	cmp	r0, #0
    fde4:	d003      	beq.n	fdee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    fde6:	21b8      	movs	r1, #184	; 0xb8
    fde8:	2001      	movs	r0, #1
    fdea:	f7f4 f85b 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fdee:	bd10      	pop	{r4, pc}
    fdf0:	b510      	push	{r4, lr}
    fdf2:	f000 f80a 	bl	fe0a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    fdf6:	f7ff f823 	bl	ee40 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    fdfa:	2800      	cmp	r0, #0
    fdfc:	d004      	beq.n	fe08 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    fdfe:	f240 1135 	movw	r1, #309	; 0x135
    fe02:	2001      	movs	r0, #1
    fe04:	f7f4 f84e 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe08:	bd10      	pop	{r4, pc}
    fe0a:	b510      	push	{r4, lr}
    fe0c:	f7f7 ff06 	bl	7c1c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    fe10:	b120      	cbz	r0, fe1c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    fe12:	f240 111d 	movw	r1, #285	; 0x11d
    fe16:	2001      	movs	r0, #1
    fe18:	f7f4 f844 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe1c:	f7f6 fd2e 	bl	687c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe24:	f7fa bca8 	b.w	a778 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    fe28:	000b0001 	.word	0x000b0001
    fe2c:	000a0002 	.word	0x000a0002
    fe30:	00090005 	.word	0x00090005
    fe34:	0008000a 	.word	0x0008000a
    fe38:	00070014 	.word	0x00070014
    fe3c:	0006001e 	.word	0x0006001e
    fe40:	00050032 	.word	0x00050032
    fe44:	0004004b 	.word	0x0004004b
    fe48:	00030064 	.word	0x00030064
    fe4c:	00020096 	.word	0x00020096
    fe50:	000100fa 	.word	0x000100fa
    fe54:	000001f4 	.word	0x000001f4

0000fe58 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fe58:	b510      	push	{r4, lr}
    fe5a:	f7fb fd13 	bl	b884 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fe5e:	f000 f850 	bl	ff02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fe62:	f7fb f9cb 	bl	b1fc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fe66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe6a:	f7fb bac9 	b.w	b400 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fe6e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fe6e:	b510      	push	{r4, lr}
    fe70:	24c8      	movs	r4, #200	; 0xc8
    fe72:	1e64      	subs	r4, r4, #1
    fe74:	b2e4      	uxtb	r4, r4
    fe76:	f7fb f9df 	bl	b238 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fe7a:	2802      	cmp	r0, #2
    fe7c:	d003      	beq.n	fe86 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fe7e:	2801      	cmp	r0, #1
    fe80:	d000      	beq.n	fe84 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fe82:	2000      	movs	r0, #0
    fe84:	bd10      	pop	{r4, pc}
    fe86:	2c00      	cmp	r4, #0
    fe88:	d1f3      	bne.n	fe72 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fe8a:	2193      	movs	r1, #147	; 0x93
    fe8c:	203b      	movs	r0, #59	; 0x3b
    fe8e:	f7f4 f809 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe92 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fe92:	b510      	push	{r4, lr}
    fe94:	f7f3 fe9c 	bl	3bd0 <mpsl_fem_lna_configuration_clear>
    fe98:	2800      	cmp	r0, #0
    fe9a:	d005      	beq.n	fea8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fe9c:	1c40      	adds	r0, r0, #1
    fe9e:	d003      	beq.n	fea8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fea0:	2150      	movs	r1, #80	; 0x50
    fea2:	2040      	movs	r0, #64	; 0x40
    fea4:	f7f3 fffe 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fea8:	bd10      	pop	{r4, pc}

0000feaa <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    feaa:	b510      	push	{r4, lr}
    feac:	f7f3 fe9c 	bl	3be8 <mpsl_fem_pa_configuration_clear>
    feb0:	2800      	cmp	r0, #0
    feb2:	d005      	beq.n	fec0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    feb4:	1c40      	adds	r0, r0, #1
    feb6:	d003      	beq.n	fec0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    feb8:	2149      	movs	r1, #73	; 0x49
    feba:	2040      	movs	r0, #64	; 0x40
    febc:	f7f3 fff2 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fec0:	bd10      	pop	{r4, pc}

0000fec2 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fec2:	b510      	push	{r4, lr}
    fec4:	f7f3 fe7e 	bl	3bc4 <mpsl_fem_disable>
    fec8:	2800      	cmp	r0, #0
    feca:	d005      	beq.n	fed8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fecc:	1c40      	adds	r0, r0, #1
    fece:	d003      	beq.n	fed8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fed0:	2157      	movs	r1, #87	; 0x57
    fed2:	2040      	movs	r0, #64	; 0x40
    fed4:	f7f3 ffe6 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fed8:	bd10      	pop	{r4, pc}

0000feda <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    feda:	b510      	push	{r4, lr}
    fedc:	2100      	movs	r1, #0
    fede:	4608      	mov	r0, r1
    fee0:	f7f3 fe7c 	bl	3bdc <mpsl_fem_lna_configuration_set>
    fee4:	b108      	cbz	r0, feea <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fee6:	2000      	movs	r0, #0
    fee8:	bd10      	pop	{r4, pc}
    feea:	2001      	movs	r0, #1
    feec:	bd10      	pop	{r4, pc}

0000feee <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    feee:	b508      	push	{r3, lr}
    fef0:	4668      	mov	r0, sp
    fef2:	f7f3 fe85 	bl	3c00 <mpsl_fem_pa_is_configured>
    fef6:	f89d 0000 	ldrb.w	r0, [sp]
    fefa:	2800      	cmp	r0, #0
    fefc:	d000      	beq.n	ff00 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fefe:	2001      	movs	r0, #1
    ff00:	bd08      	pop	{r3, pc}

0000ff02 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    ff02:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ff06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ff0a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    ff0e:	f3bf 8f4f 	dsb	sy
    ff12:	f3bf 8f6f 	isb	sy
    ff16:	f7fb bb4d 	b.w	b5b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    ff1a:	2800      	cmp	r0, #0
    ff1c:	db09      	blt.n	ff32 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    ff1e:	f000 021f 	and.w	r2, r0, #31
    ff22:	2101      	movs	r1, #1
    ff24:	4091      	lsls	r1, r2
    ff26:	0940      	lsrs	r0, r0, #5
    ff28:	0080      	lsls	r0, r0, #2
    ff2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ff2e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ff32:	4770      	bx	lr
    ff34:	2800      	cmp	r0, #0
    ff36:	db0d      	blt.n	ff54 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    ff38:	f000 021f 	and.w	r2, r0, #31
    ff3c:	2101      	movs	r1, #1
    ff3e:	4091      	lsls	r1, r2
    ff40:	0940      	lsrs	r0, r0, #5
    ff42:	0080      	lsls	r0, r0, #2
    ff44:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ff48:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ff4c:	f3bf 8f4f 	dsb	sy
    ff50:	f3bf 8f6f 	isb	sy
    ff54:	4770      	bx	lr

0000ff56 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    ff56:	b510      	push	{r4, lr}
    ff58:	2801      	cmp	r0, #1
    ff5a:	d006      	beq.n	ff6a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    ff5c:	2802      	cmp	r0, #2
    ff5e:	d006      	beq.n	ff6e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    ff60:	f640 3141 	movw	r1, #2881	; 0xb41
    ff64:	203e      	movs	r0, #62	; 0x3e
    ff66:	f7f3 ff9d 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff6a:	2028      	movs	r0, #40	; 0x28
    ff6c:	bd10      	pop	{r4, pc}
    ff6e:	2018      	movs	r0, #24
    ff70:	bd10      	pop	{r4, pc}

0000ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    ff72:	b510      	push	{r4, lr}
    ff74:	2801      	cmp	r0, #1
    ff76:	d006      	beq.n	ff86 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    ff78:	2802      	cmp	r0, #2
    ff7a:	d007      	beq.n	ff8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    ff7c:	f640 3155 	movw	r1, #2901	; 0xb55
    ff80:	203e      	movs	r0, #62	; 0x3e
    ff82:	f7f3 ff8f 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff86:	f641 6014 	movw	r0, #7700	; 0x1e14
    ff8a:	bd10      	pop	{r4, pc}
    ff8c:	f241 1030 	movw	r0, #4400	; 0x1130
    ff90:	bd10      	pop	{r4, pc}

0000ff92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    ff92:	f7fc b9c1 	b.w	c318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    ff96:	b510      	push	{r4, lr}
    ff98:	460a      	mov	r2, r1
    ff9a:	b130      	cbz	r0, ffaa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    ff9c:	2801      	cmp	r0, #1
    ff9e:	d00b      	beq.n	ffb8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    ffa0:	f240 6114 	movw	r1, #1556	; 0x614
    ffa4:	203e      	movs	r0, #62	; 0x3e
    ffa6:	f7f3 ff7d 	bl	3ea4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffae:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ffb2:	4610      	mov	r0, r2
    ffb4:	f7fb b994 	b.w	b2e0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    ffb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ffbc:	f102 0129 	add.w	r1, r2, #41	; 0x29
    ffc0:	4610      	mov	r0, r2
    ffc2:	f7fb b977 	b.w	b2b4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    ffc6:	5840      	ldr	r0, [r0, r1]
    ffc8:	2800      	cmp	r0, #0
    ffca:	d000      	beq.n	ffce <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    ffcc:	2001      	movs	r0, #1
    ffce:	4770      	bx	lr
    ffd0:	5840      	ldr	r0, [r0, r1]
    ffd2:	2800      	cmp	r0, #0
    ffd4:	d000      	beq.n	ffd8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    ffd6:	2001      	movs	r0, #1
    ffd8:	4770      	bx	lr

0000ffda <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    ffda:	b570      	push	{r4, r5, r6, lr}
    ffdc:	4605      	mov	r5, r0
    ffde:	4614      	mov	r4, r2
    ffe0:	4608      	mov	r0, r1
    ffe2:	f7ff ffc6 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ffe6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    ffea:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    ffee:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fff2:	4620      	mov	r0, r4
    fff4:	f7ff ffbd 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fff8:	4428      	add	r0, r5
    fffa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fffe:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10002:	fbb0 f5f1 	udiv	r5, r0, r1
   10006:	4620      	mov	r0, r4
   10008:	f7ff ffa5 	bl	ff56 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1000c:	4428      	add	r0, r5
   1000e:	1d40      	adds	r0, r0, #5
   10010:	bd70      	pop	{r4, r5, r6, pc}

00010012 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10016:	4607      	mov	r7, r0
   10018:	461d      	mov	r5, r3
   1001a:	460e      	mov	r6, r1
   1001c:	4614      	mov	r4, r2
   1001e:	4610      	mov	r0, r2
   10020:	f7ff ffa7 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10024:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10028:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1002c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   10030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10034:	2e02      	cmp	r6, #2
   10036:	d00e      	beq.n	10056 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10038:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1003c:	4411      	add	r1, r2
   1003e:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   10042:	fbb1 f6f0 	udiv	r6, r1, r0
   10046:	4620      	mov	r0, r4
   10048:	f7ff ff85 	bl	ff56 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1004c:	4430      	add	r0, r6
   1004e:	4428      	add	r0, r5
   10050:	1d40      	adds	r0, r0, #5
   10052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10056:	4602      	mov	r2, r0
   10058:	e7f0      	b.n	1003c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0001005a <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1005a:	b510      	push	{r4, lr}
   1005c:	4604      	mov	r4, r0
   1005e:	4608      	mov	r0, r1
   10060:	f7ff ff87 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10064:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10068:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1006c:	fbb0 f0f1 	udiv	r0, r0, r1
   10070:	1a20      	subs	r0, r4, r0
   10072:	1e80      	subs	r0, r0, #2
   10074:	bd10      	pop	{r4, pc}

00010076 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10076:	b510      	push	{r4, lr}
   10078:	4604      	mov	r4, r0
   1007a:	4608      	mov	r0, r1
   1007c:	f7ff ff79 	bl	ff72 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10084:	fbb0 f0f1 	udiv	r0, r0, r1
   10088:	1a20      	subs	r0, r4, r0
   1008a:	bd10      	pop	{r4, pc}

0001008c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   1008c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10090:	2902      	cmp	r1, #2
   10092:	d008      	beq.n	100a6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   10094:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10098:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   1009c:	fbb1 f1f2 	udiv	r1, r1, r2
   100a0:	4408      	add	r0, r1
   100a2:	1e80      	subs	r0, r0, #2
   100a4:	4770      	bx	lr
   100a6:	4611      	mov	r1, r2
   100a8:	e7f6      	b.n	10098 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000100aa <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   100aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   100ae:	2902      	cmp	r1, #2
   100b0:	d007      	beq.n	100c2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   100b2:	f240 51dc 	movw	r1, #1500	; 0x5dc
   100b6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   100ba:	fbb1 f1f2 	udiv	r1, r1, r2
   100be:	4408      	add	r0, r1
   100c0:	4770      	bx	lr
   100c2:	4611      	mov	r1, r2
   100c4:	e7f7      	b.n	100b6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   100c6:	080c      	.short	0x080c
   100c8:	010d1702 	.word	0x010d1702
   100cc:	09090201 	.word	0x09090201
   100d0:	02060101 	.word	0x02060101
   100d4:	03181809 	.word	0x03181809
   100d8:	09090101 	.word	0x09090101
   100dc:	0303      	.short	0x0303
   100de:	05          	.byte	0x05
   100df:	55          	.byte	0x55
   100e0:	26255555 	.word	0x26255555
   100e4:	27          	.byte	0x27
   100e5:	01          	.byte	0x01
   100e6:	0103      	.short	0x0103
   100e8:	01          	.byte	0x01
   100e9:	01          	.byte	0x01
   100ea:	0000      	.short	0x0000
   100ec:	00000000 	.word	0x00000000

000100f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   100f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   100f2:	4d45      	ldr	r5, [pc, #276]	; (10208 <bt_init+0x118>)
   100f4:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
   100f8:	6899      	ldr	r1, [r3, #8]
   100fa:	f011 0101 	ands.w	r1, r1, #1
   100fe:	d123      	bne.n	10148 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10100:	aa01      	add	r2, sp, #4
   10102:	f640 4003 	movw	r0, #3075	; 0xc03
   10106:	f004 fecf 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   1010a:	4604      	mov	r4, r0
   1010c:	2800      	cmp	r0, #0
   1010e:	d178      	bne.n	10202 <bt_init+0x112>
	uint8_t status = buf->data[0];
   10110:	9b01      	ldr	r3, [sp, #4]
   10112:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10114:	781b      	ldrb	r3, [r3, #0]
   10116:	b9a3      	cbnz	r3, 10142 <bt_init+0x52>
		bt_scan_reset();
   10118:	f005 fc00 	bl	1591c <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1011c:	f3bf 8f5b 	dmb	ish
   10120:	462b      	mov	r3, r5
   10122:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   10126:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1012a:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1012e:	f3bf 8f5b 	dmb	ish
   10132:	e853 1f00 	ldrex	r1, [r3]
   10136:	e843 2000 	strex	r0, r2, [r3]
   1013a:	2800      	cmp	r0, #0
   1013c:	d1f9      	bne.n	10132 <bt_init+0x42>
   1013e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10142:	9801      	ldr	r0, [sp, #4]
   10144:	f00b fdf0 	bl	1bd28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10148:	aa01      	add	r2, sp, #4
   1014a:	2100      	movs	r1, #0
   1014c:	f241 0003 	movw	r0, #4099	; 0x1003
   10150:	f004 feaa 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   10154:	4604      	mov	r4, r0
   10156:	2800      	cmp	r0, #0
   10158:	d153      	bne.n	10202 <bt_init+0x112>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1015a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1015c:	482b      	ldr	r0, [pc, #172]	; (1020c <bt_init+0x11c>)
   1015e:	6899      	ldr	r1, [r3, #8]
   10160:	2208      	movs	r2, #8
   10162:	3101      	adds	r1, #1
   10164:	f015 fbfe 	bl	25964 <memcpy>
	net_buf_unref(rsp);
   10168:	9801      	ldr	r0, [sp, #4]
   1016a:	f00b fddd 	bl	1bd28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1016e:	4621      	mov	r1, r4
   10170:	aa01      	add	r2, sp, #4
   10172:	f241 0001 	movw	r0, #4097	; 0x1001
   10176:	f004 fe97 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1017a:	4604      	mov	r4, r0
   1017c:	2800      	cmp	r0, #0
   1017e:	d140      	bne.n	10202 <bt_init+0x112>
	read_local_ver_complete(rsp);
   10180:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10182:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   10184:	785a      	ldrb	r2, [r3, #1]
   10186:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1018a:	78d9      	ldrb	r1, [r3, #3]
   1018c:	789a      	ldrb	r2, [r3, #2]
   1018e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10192:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   10196:	791a      	ldrb	r2, [r3, #4]
   10198:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1019c:	7a19      	ldrb	r1, [r3, #8]
   1019e:	79da      	ldrb	r2, [r3, #7]
   101a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   101a4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   101a8:	795a      	ldrb	r2, [r3, #5]
   101aa:	799b      	ldrb	r3, [r3, #6]
   101ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   101b0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   101b4:	f00b fdb8 	bl	1bd28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   101b8:	4621      	mov	r1, r4
   101ba:	aa01      	add	r2, sp, #4
   101bc:	f241 0002 	movw	r0, #4098	; 0x1002
   101c0:	f004 fe72 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   101c4:	4604      	mov	r4, r0
   101c6:	b9e0      	cbnz	r0, 10202 <bt_init+0x112>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   101c8:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   101ca:	4811      	ldr	r0, [pc, #68]	; (10210 <bt_init+0x120>)
   101cc:	6899      	ldr	r1, [r3, #8]
   101ce:	2240      	movs	r2, #64	; 0x40
   101d0:	3101      	adds	r1, #1
   101d2:	f015 fbc7 	bl	25964 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   101d6:	480e      	ldr	r0, [pc, #56]	; (10210 <bt_init+0x120>)
   101d8:	f015 fc06 	bl	259e8 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   101dc:	9801      	ldr	r0, [sp, #4]
   101de:	f00b fda3 	bl	1bd28 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   101e2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   101e6:	065a      	lsls	r2, r3, #25
   101e8:	d41a      	bmi.n	10220 <bt_init+0x130>
   101ea:	4b0a      	ldr	r3, [pc, #40]	; (10214 <bt_init+0x124>)
   101ec:	490a      	ldr	r1, [pc, #40]	; (10218 <bt_init+0x128>)
		BT_ERR("Non-LE capable controller detected!");
   101ee:	480b      	ldr	r0, [pc, #44]	; (1021c <bt_init+0x12c>)
   101f0:	1ac9      	subs	r1, r1, r3
   101f2:	08c9      	lsrs	r1, r1, #3
   101f4:	0189      	lsls	r1, r1, #6
   101f6:	f041 0101 	orr.w	r1, r1, #1
   101fa:	f014 fc9c 	bl	24b36 <log_0>
		return -ENODEV;
   101fe:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   10202:	4620      	mov	r0, r4
   10204:	b002      	add	sp, #8
   10206:	bd70      	pop	{r4, r5, r6, pc}
   10208:	200002b0 	.word	0x200002b0
   1020c:	20000320 	.word	0x20000320
   10210:	20000328 	.word	0x20000328
   10214:	00028618 	.word	0x00028618
   10218:	00028648 	.word	0x00028648
   1021c:	0002def3 	.word	0x0002def3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10220:	4621      	mov	r1, r4
   10222:	aa01      	add	r2, sp, #4
   10224:	f242 0003 	movw	r0, #8195	; 0x2003
   10228:	f004 fe3e 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1022c:	4604      	mov	r4, r0
   1022e:	2800      	cmp	r0, #0
   10230:	d1e7      	bne.n	10202 <bt_init+0x112>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   10232:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10234:	48ba      	ldr	r0, [pc, #744]	; (10520 <bt_init+0x430>)
   10236:	6899      	ldr	r1, [r3, #8]
   10238:	2208      	movs	r2, #8
   1023a:	3101      	adds	r1, #1
   1023c:	f015 fb92 	bl	25964 <memcpy>
	net_buf_unref(rsp);
   10240:	9801      	ldr	r0, [sp, #4]
   10242:	f00b fd71 	bl	1bd28 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10246:	4621      	mov	r1, r4
   10248:	aa01      	add	r2, sp, #4
   1024a:	f242 0002 	movw	r0, #8194	; 0x2002
   1024e:	f004 fe2b 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   10252:	4604      	mov	r4, r0
   10254:	2800      	cmp	r0, #0
   10256:	d1d4      	bne.n	10202 <bt_init+0x112>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   10258:	9b01      	ldr	r3, [sp, #4]
   1025a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1025c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10260:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   10264:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   10266:	b121      	cbz	r1, 10272 <bt_init+0x182>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10268:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1026a:	48ae      	ldr	r0, [pc, #696]	; (10524 <bt_init+0x434>)
   1026c:	4611      	mov	r1, r2
   1026e:	f017 ff23 	bl	280b8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10272:	9801      	ldr	r0, [sp, #4]
   10274:	f00b fd58 	bl	1bd28 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10278:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1027c:	f016 0620 	ands.w	r6, r6, #32
   10280:	f000 8105 	beq.w	1048e <bt_init+0x39e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10284:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   10288:	071b      	lsls	r3, r3, #28
   1028a:	d511      	bpl.n	102b0 <bt_init+0x1c0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1028c:	aa01      	add	r2, sp, #4
   1028e:	2100      	movs	r1, #0
   10290:	f242 001c 	movw	r0, #8220	; 0x201c
   10294:	f004 fe08 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   10298:	4604      	mov	r4, r0
   1029a:	2800      	cmp	r0, #0
   1029c:	d1b1      	bne.n	10202 <bt_init+0x112>
		le_read_supp_states_complete(rsp);
   1029e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   102a0:	6883      	ldr	r3, [r0, #8]
   102a2:	f853 2f01 	ldr.w	r2, [r3, #1]!
   102a6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   102a8:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   102ac:	f00b fd3c 	bl	1bd28 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   102b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   102b4:	069e      	lsls	r6, r3, #26
   102b6:	d523      	bpl.n	10300 <bt_init+0x210>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   102b8:	f10d 0102 	add.w	r1, sp, #2
   102bc:	4668      	mov	r0, sp
   102be:	f004 fe6b 	bl	14f98 <hci_le_read_max_data_len>
		if (err) {
   102c2:	4604      	mov	r4, r0
   102c4:	2800      	cmp	r0, #0
   102c6:	d19c      	bne.n	10202 <bt_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   102c8:	2104      	movs	r1, #4
   102ca:	f242 0024 	movw	r0, #8228	; 0x2024
   102ce:	f004 fda3 	bl	14e18 <bt_hci_cmd_create>
		if (!buf) {
   102d2:	4606      	mov	r6, r0
   102d4:	2800      	cmp	r0, #0
   102d6:	f000 80e1 	beq.w	1049c <bt_init+0x3ac>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   102da:	2104      	movs	r1, #4
   102dc:	3008      	adds	r0, #8
   102de:	f00b fe53 	bl	1bf88 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   102e2:	f8bd 3000 	ldrh.w	r3, [sp]
   102e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   102e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   102ec:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   102ee:	4622      	mov	r2, r4
   102f0:	4631      	mov	r1, r6
   102f2:	f242 0024 	movw	r0, #8228	; 0x2024
   102f6:	f004 fdd7 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   102fa:	4604      	mov	r4, r0
   102fc:	2800      	cmp	r0, #0
   102fe:	d180      	bne.n	10202 <bt_init+0x112>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10300:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10304:	065c      	lsls	r4, r3, #25
   10306:	d510      	bpl.n	1032a <bt_init+0x23a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   10308:	aa01      	add	r2, sp, #4
   1030a:	2100      	movs	r1, #0
   1030c:	f242 002a 	movw	r0, #8234	; 0x202a
   10310:	f004 fdca 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   10314:	4604      	mov	r4, r0
   10316:	2800      	cmp	r0, #0
   10318:	f47f af73 	bne.w	10202 <bt_init+0x112>
		le_read_resolving_list_size_complete(rsp);
   1031c:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   1031e:	6883      	ldr	r3, [r0, #8]
   10320:	785b      	ldrb	r3, [r3, #1]
   10322:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   10326:	f00b fcff 	bl	1bd28 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1032a:	2108      	movs	r1, #8
   1032c:	f242 0001 	movw	r0, #8193	; 0x2001
   10330:	f004 fd72 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   10334:	4604      	mov	r4, r0
   10336:	2800      	cmp	r0, #0
   10338:	f000 80b0 	beq.w	1049c <bt_init+0x3ac>
   1033c:	2108      	movs	r1, #8
   1033e:	4408      	add	r0, r1
   10340:	f00b fe22 	bl	1bf88 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10344:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10348:	f011 0f40 	tst.w	r1, #64	; 0x40
   1034c:	4602      	mov	r2, r0
   1034e:	f240 2302 	movw	r3, #514	; 0x202
   10352:	bf08      	it	eq
   10354:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10356:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10358:	bf4c      	ite	mi
   1035a:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1035e:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10362:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10364:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10368:	bf48      	it	mi
   1036a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1036e:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10372:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10376:	bf18      	it	ne
   10378:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1037c:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10380:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10382:	bf48      	it	mi
   10384:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10388:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   1038a:	bf08      	it	eq
   1038c:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10390:	2100      	movs	r1, #0
   10392:	f015 fbdb 	bl	25b4c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10396:	4621      	mov	r1, r4
   10398:	2200      	movs	r2, #0
   1039a:	f242 0001 	movw	r0, #8193	; 0x2001
   1039e:	f004 fd83 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   103a2:	4604      	mov	r4, r0
   103a4:	2800      	cmp	r0, #0
   103a6:	f47f af2c 	bne.w	10202 <bt_init+0x112>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   103aa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   103ae:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   103b2:	0698      	lsls	r0, r3, #26
   103b4:	f100 8087 	bmi.w	104c6 <bt_init+0x3d6>
	if (bt_dev.le.acl_mtu) {
   103b8:	b9d9      	cbnz	r1, 103f2 <bt_init+0x302>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   103ba:	aa01      	add	r2, sp, #4
   103bc:	f241 0005 	movw	r0, #4101	; 0x1005
   103c0:	f004 fd72 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   103c4:	4604      	mov	r4, r0
   103c6:	2800      	cmp	r0, #0
   103c8:	f47f af1b 	bne.w	10202 <bt_init+0x112>
	if (bt_dev.le.acl_mtu) {
   103cc:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   103d0:	b963      	cbnz	r3, 103ec <bt_init+0x2fc>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   103d6:	785a      	ldrb	r2, [r3, #1]
   103d8:	7899      	ldrb	r1, [r3, #2]
   103da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   103de:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   103e2:	889a      	ldrh	r2, [r3, #4]
   103e4:	484f      	ldr	r0, [pc, #316]	; (10524 <bt_init+0x434>)
   103e6:	4611      	mov	r1, r2
   103e8:	f017 fe66 	bl	280b8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   103ec:	9801      	ldr	r0, [sp, #4]
   103ee:	f00b fc9b 	bl	1bd28 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   103f2:	2108      	movs	r1, #8
   103f4:	f640 4001 	movw	r0, #3073	; 0xc01
   103f8:	f004 fd0e 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   103fc:	4604      	mov	r4, r0
   103fe:	2800      	cmp	r0, #0
   10400:	d04c      	beq.n	1049c <bt_init+0x3ac>
   10402:	2108      	movs	r1, #8
   10404:	4408      	add	r0, r1
   10406:	f00b fdbf 	bl	1bf88 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1040a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1040e:	07d9      	lsls	r1, r3, #31
   10410:	4602      	mov	r2, r0
   10412:	d567      	bpl.n	104e4 <bt_init+0x3f4>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10414:	a140      	add	r1, pc, #256	; (adr r1, 10518 <bt_init+0x428>)
   10416:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1041a:	f015 fb97 	bl	25b4c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1041e:	4621      	mov	r1, r4
   10420:	2200      	movs	r2, #0
   10422:	f640 4001 	movw	r0, #3073	; 0xc01
   10426:	f004 fd3f 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1042a:	4604      	mov	r4, r0
   1042c:	2800      	cmp	r0, #0
   1042e:	f47f aee8 	bne.w	10202 <bt_init+0x112>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10432:	4601      	mov	r1, r0
   10434:	aa01      	add	r2, sp, #4
   10436:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1043a:	f004 fd35 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1043e:	4604      	mov	r4, r0
   10440:	2800      	cmp	r0, #0
   10442:	d053      	beq.n	104ec <bt_init+0x3fc>
   10444:	4938      	ldr	r1, [pc, #224]	; (10528 <bt_init+0x438>)
   10446:	4b39      	ldr	r3, [pc, #228]	; (1052c <bt_init+0x43c>)
		BT_WARN("Vendor HCI extensions not available");
   10448:	4839      	ldr	r0, [pc, #228]	; (10530 <bt_init+0x440>)
   1044a:	1ac9      	subs	r1, r1, r3
   1044c:	08c9      	lsrs	r1, r1, #3
   1044e:	0189      	lsls	r1, r1, #6
   10450:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   10454:	f014 fb6f 	bl	24b36 <log_0>
	err = bt_id_init();
   10458:	f015 fc11 	bl	25c7e <bt_id_init>
	if (err) {
   1045c:	4604      	mov	r4, r0
   1045e:	2800      	cmp	r0, #0
   10460:	f47f aecf 	bne.w	10202 <bt_init+0x112>
		err = bt_conn_init();
   10464:	f005 ffbc 	bl	163e0 <bt_conn_init>
		if (err) {
   10468:	4604      	mov	r4, r0
   1046a:	2800      	cmp	r0, #0
   1046c:	f47f aec9 	bne.w	10202 <bt_init+0x112>
		if (!bt_dev.id_count) {
   10470:	79eb      	ldrb	r3, [r5, #7]
   10472:	2b00      	cmp	r3, #0
   10474:	f040 8090 	bne.w	10598 <bt_init+0x4a8>
   10478:	4b2c      	ldr	r3, [pc, #176]	; (1052c <bt_init+0x43c>)
   1047a:	492b      	ldr	r1, [pc, #172]	; (10528 <bt_init+0x438>)
			BT_INFO("No ID address. App must call settings_load()");
   1047c:	482d      	ldr	r0, [pc, #180]	; (10534 <bt_init+0x444>)
   1047e:	1ac9      	subs	r1, r1, r3
   10480:	08c9      	lsrs	r1, r1, #3
   10482:	0189      	lsls	r1, r1, #6
   10484:	f041 0103 	orr.w	r1, r1, #3
   10488:	f014 fb55 	bl	24b36 <log_0>
			return 0;
   1048c:	e6b9      	b.n	10202 <bt_init+0x112>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1048e:	2102      	movs	r1, #2
   10490:	f640 406d 	movw	r0, #3181	; 0xc6d
   10494:	f004 fcc0 	bl	14e18 <bt_hci_cmd_create>
		if (!buf) {
   10498:	4604      	mov	r4, r0
   1049a:	b910      	cbnz	r0, 104a2 <bt_init+0x3b2>
		return -ENOBUFS;
   1049c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   104a0:	e6af      	b.n	10202 <bt_init+0x112>
   104a2:	2102      	movs	r1, #2
   104a4:	3008      	adds	r0, #8
   104a6:	f00b fd6f 	bl	1bf88 <net_buf_simple_add>
		cp_le->le = 0x01;
   104aa:	2301      	movs	r3, #1
   104ac:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   104ae:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   104b0:	4621      	mov	r1, r4
   104b2:	4632      	mov	r2, r6
   104b4:	f640 406d 	movw	r0, #3181	; 0xc6d
   104b8:	f004 fcf6 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   104bc:	4604      	mov	r4, r0
   104be:	2800      	cmp	r0, #0
   104c0:	f43f aee0 	beq.w	10284 <bt_init+0x194>
   104c4:	e69d      	b.n	10202 <bt_init+0x112>
	else if (!bt_dev.le.acl_mtu) {
   104c6:	2900      	cmp	r1, #0
   104c8:	d193      	bne.n	103f2 <bt_init+0x302>
   104ca:	4b18      	ldr	r3, [pc, #96]	; (1052c <bt_init+0x43c>)
   104cc:	4916      	ldr	r1, [pc, #88]	; (10528 <bt_init+0x438>)
		BT_ERR("ACL BR/EDR buffers not initialized");
   104ce:	481a      	ldr	r0, [pc, #104]	; (10538 <bt_init+0x448>)
   104d0:	1ac9      	subs	r1, r1, r3
   104d2:	08c9      	lsrs	r1, r1, #3
   104d4:	0189      	lsls	r1, r1, #6
   104d6:	f041 0101 	orr.w	r1, r1, #1
   104da:	f014 fb2c 	bl	24b36 <log_0>
		return -EIO;
   104de:	f06f 0404 	mvn.w	r4, #4
   104e2:	e68e      	b.n	10202 <bt_init+0x112>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   104e4:	4815      	ldr	r0, [pc, #84]	; (1053c <bt_init+0x44c>)
   104e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   104ea:	e796      	b.n	1041a <bt_init+0x32a>
	net_buf_unref(rsp);
   104ec:	9801      	ldr	r0, [sp, #4]
   104ee:	f00b fc1b 	bl	1bd28 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   104f2:	4621      	mov	r1, r4
   104f4:	aa01      	add	r2, sp, #4
   104f6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   104fa:	f004 fcd5 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   104fe:	4604      	mov	r4, r0
   10500:	b300      	cbz	r0, 10544 <bt_init+0x454>
   10502:	4909      	ldr	r1, [pc, #36]	; (10528 <bt_init+0x438>)
   10504:	4b09      	ldr	r3, [pc, #36]	; (1052c <bt_init+0x43c>)
		BT_WARN("Failed to read supported vendor commands");
   10506:	480e      	ldr	r0, [pc, #56]	; (10540 <bt_init+0x450>)
   10508:	1ac9      	subs	r1, r1, r3
   1050a:	08c9      	lsrs	r1, r1, #3
   1050c:	0189      	lsls	r1, r1, #6
   1050e:	f041 0102 	orr.w	r1, r1, #2
   10512:	e79f      	b.n	10454 <bt_init+0x364>
   10514:	f3af 8000 	nop.w
   10518:	02008890 	.word	0x02008890
   1051c:	20008000 	.word	0x20008000
   10520:	20000380 	.word	0x20000380
   10524:	200003b0 	.word	0x200003b0
   10528:	00028648 	.word	0x00028648
   1052c:	00028618 	.word	0x00028618
   10530:	0002df3a 	.word	0x0002df3a
   10534:	0002dfb0 	.word	0x0002dfb0
   10538:	0002df17 	.word	0x0002df17
   1053c:	02008810 	.word	0x02008810
   10540:	0002df5e 	.word	0x0002df5e
	rp.cmds = (void *)rsp->data;
   10544:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10546:	4818      	ldr	r0, [pc, #96]	; (105a8 <bt_init+0x4b8>)
   10548:	6899      	ldr	r1, [r3, #8]
   1054a:	2202      	movs	r2, #2
   1054c:	3101      	adds	r1, #1
   1054e:	f015 fa09 	bl	25964 <memcpy>
	net_buf_unref(rsp);
   10552:	9801      	ldr	r0, [sp, #4]
   10554:	f00b fbe8 	bl	1bd28 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10558:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1055c:	075b      	lsls	r3, r3, #29
   1055e:	f57f af7b 	bpl.w	10458 <bt_init+0x368>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10562:	aa01      	add	r2, sp, #4
   10564:	4621      	mov	r1, r4
   10566:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1056a:	f004 fc9d 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   1056e:	b140      	cbz	r0, 10582 <bt_init+0x492>
   10570:	490e      	ldr	r1, [pc, #56]	; (105ac <bt_init+0x4bc>)
   10572:	4b0f      	ldr	r3, [pc, #60]	; (105b0 <bt_init+0x4c0>)
			BT_WARN("Failed to read supported vendor features");
   10574:	480f      	ldr	r0, [pc, #60]	; (105b4 <bt_init+0x4c4>)
   10576:	1ac9      	subs	r1, r1, r3
   10578:	08c9      	lsrs	r1, r1, #3
   1057a:	0189      	lsls	r1, r1, #6
   1057c:	f041 0102 	orr.w	r1, r1, #2
   10580:	e768      	b.n	10454 <bt_init+0x364>
		rp.feat = (void *)rsp->data;
   10582:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10584:	480c      	ldr	r0, [pc, #48]	; (105b8 <bt_init+0x4c8>)
   10586:	6899      	ldr	r1, [r3, #8]
   10588:	2201      	movs	r2, #1
   1058a:	4411      	add	r1, r2
   1058c:	f015 f9ea 	bl	25964 <memcpy>
		net_buf_unref(rsp);
   10590:	9801      	ldr	r0, [sp, #4]
   10592:	f00b fbc9 	bl	1bd28 <net_buf_unref>
   10596:	e75f      	b.n	10458 <bt_init+0x368>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10598:	2104      	movs	r1, #4
   1059a:	4808      	ldr	r0, [pc, #32]	; (105bc <bt_init+0x4cc>)
   1059c:	f015 fac7 	bl	25b2e <atomic_or>
	bt_finalize_init();
   105a0:	f004 fdc6 	bl	15130 <bt_finalize_init>
	return 0;
   105a4:	e62d      	b.n	10202 <bt_init+0x112>
   105a6:	bf00      	nop
   105a8:	20000369 	.word	0x20000369
   105ac:	00028648 	.word	0x00028648
   105b0:	00028618 	.word	0x00028618
   105b4:	0002df87 	.word	0x0002df87
   105b8:	20000368 	.word	0x20000368
   105bc:	2000037c 	.word	0x2000037c

000105c0 <discovery_error>:
   105c0:	4a04      	ldr	r2, [pc, #16]	; (105d4 <discovery_error+0x14>)
   105c2:	4b05      	ldr	r3, [pc, #20]	; (105d8 <discovery_error+0x18>)

static void discovery_error(struct bt_conn *conn,
			    int err,
			    void *context)
{
	LOG_WRN("Error while discovering GATT database: (%d)", err);
   105c4:	4805      	ldr	r0, [pc, #20]	; (105dc <discovery_error+0x1c>)
   105c6:	1ad2      	subs	r2, r2, r3
   105c8:	08d2      	lsrs	r2, r2, #3
   105ca:	0192      	lsls	r2, r2, #6
   105cc:	f042 0202 	orr.w	r2, r2, #2
   105d0:	f014 babe 	b.w	24b50 <log_1>
   105d4:	00028690 	.word	0x00028690
   105d8:	00028618 	.word	0x00028618
   105dc:	00028de4 	.word	0x00028de4

000105e0 <discovery_service_not_found>:
   105e0:	4904      	ldr	r1, [pc, #16]	; (105f4 <discovery_service_not_found+0x14>)
   105e2:	4b05      	ldr	r3, [pc, #20]	; (105f8 <discovery_service_not_found+0x18>)
	LOG_INF("Service not found");
   105e4:	4805      	ldr	r0, [pc, #20]	; (105fc <discovery_service_not_found+0x1c>)
   105e6:	1ac9      	subs	r1, r1, r3
   105e8:	08c9      	lsrs	r1, r1, #3
   105ea:	0189      	lsls	r1, r1, #6
   105ec:	f041 0103 	orr.w	r1, r1, #3
   105f0:	f014 baa1 	b.w	24b36 <log_0>
   105f4:	00028690 	.word	0x00028690
   105f8:	00028618 	.word	0x00028618
   105fc:	00028e10 	.word	0x00028e10

00010600 <discovery_complete>:
{
   10600:	b538      	push	{r3, r4, r5, lr}
   10602:	460d      	mov	r5, r1
   10604:	4b0b      	ldr	r3, [pc, #44]	; (10634 <discovery_complete+0x34>)
   10606:	490c      	ldr	r1, [pc, #48]	; (10638 <discovery_complete+0x38>)
   10608:	1a5b      	subs	r3, r3, r1
   1060a:	08db      	lsrs	r3, r3, #3
	LOG_INF("Service discovery completed");
   1060c:	019b      	lsls	r3, r3, #6
   1060e:	f043 0103 	orr.w	r1, r3, #3
{
   10612:	4604      	mov	r4, r0
	LOG_INF("Service discovery completed");
   10614:	4809      	ldr	r0, [pc, #36]	; (1063c <discovery_complete+0x3c>)
   10616:	f014 fa8e 	bl	24b36 <log_0>
	bt_nus_handles_assign(dm, nus);
   1061a:	4629      	mov	r1, r5
   1061c:	4620      	mov	r0, r4
   1061e:	f002 ffad 	bl	1357c <bt_nus_handles_assign>
	bt_nus_subscribe_receive(nus);
   10622:	4628      	mov	r0, r5
   10624:	f003 f88c 	bl	13740 <bt_nus_subscribe_receive>
	bt_gatt_dm_data_release(dm);
   10628:	4620      	mov	r0, r4
}
   1062a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_dm_data_release(dm);
   1062e:	f014 bea0 	b.w	25372 <bt_gatt_dm_data_release>
   10632:	bf00      	nop
   10634:	00028690 	.word	0x00028690
   10638:	00028618 	.word	0x00028618
   1063c:	00028e22 	.word	0x00028e22

00010640 <exchange_func>:
	}
}

static void exchange_func(struct bt_conn *conn, uint8_t err, struct bt_gatt_exchange_params *params)
{
	if (!err) {
   10640:	4a07      	ldr	r2, [pc, #28]	; (10660 <exchange_func+0x20>)
   10642:	4b08      	ldr	r3, [pc, #32]	; (10664 <exchange_func+0x24>)
   10644:	1ad2      	subs	r2, r2, r3
   10646:	08d2      	lsrs	r2, r2, #3
   10648:	0192      	lsls	r2, r2, #6
   1064a:	b921      	cbnz	r1, 10656 <exchange_func+0x16>
		LOG_INF("MTU exchange done");
   1064c:	4806      	ldr	r0, [pc, #24]	; (10668 <exchange_func+0x28>)
   1064e:	f042 0103 	orr.w	r1, r2, #3
   10652:	f014 ba70 	b.w	24b36 <log_0>
	} else {
		LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
   10656:	4805      	ldr	r0, [pc, #20]	; (1066c <exchange_func+0x2c>)
   10658:	f042 0202 	orr.w	r2, r2, #2
   1065c:	f014 ba78 	b.w	24b50 <log_1>
   10660:	00028690 	.word	0x00028690
   10664:	00028618 	.word	0x00028618
   10668:	00028e3e 	.word	0x00028e3e
   1066c:	00028e50 	.word	0x00028e50

00010670 <gatt_discover.part.0>:
static void gatt_discover(struct bt_conn *conn)
   10670:	b5f0      	push	{r4, r5, r6, r7, lr}
			       BT_UUID_NUS_SERVICE,
   10672:	4b12      	ldr	r3, [pc, #72]	; (106bc <gatt_discover.part.0+0x4c>)
static void gatt_discover(struct bt_conn *conn)
   10674:	b087      	sub	sp, #28
			       BT_UUID_NUS_SERVICE,
   10676:	aa01      	add	r2, sp, #4
static void gatt_discover(struct bt_conn *conn)
   10678:	4605      	mov	r5, r0
			       BT_UUID_NUS_SERVICE,
   1067a:	f103 0710 	add.w	r7, r3, #16
   1067e:	4616      	mov	r6, r2
   10680:	6818      	ldr	r0, [r3, #0]
   10682:	6859      	ldr	r1, [r3, #4]
   10684:	4614      	mov	r4, r2
   10686:	c403      	stmia	r4!, {r0, r1}
   10688:	3308      	adds	r3, #8
   1068a:	42bb      	cmp	r3, r7
   1068c:	4622      	mov	r2, r4
   1068e:	d1f7      	bne.n	10680 <gatt_discover.part.0+0x10>
   10690:	781b      	ldrb	r3, [r3, #0]
   10692:	7023      	strb	r3, [r4, #0]
	err = bt_gatt_dm_start(conn,
   10694:	4631      	mov	r1, r6
   10696:	4b0a      	ldr	r3, [pc, #40]	; (106c0 <gatt_discover.part.0+0x50>)
   10698:	4a0a      	ldr	r2, [pc, #40]	; (106c4 <gatt_discover.part.0+0x54>)
   1069a:	4628      	mov	r0, r5
   1069c:	f002 fefc 	bl	13498 <bt_gatt_dm_start>
	if (err) {
   106a0:	4601      	mov	r1, r0
   106a2:	b148      	cbz	r0, 106b8 <gatt_discover.part.0+0x48>
   106a4:	4a08      	ldr	r2, [pc, #32]	; (106c8 <gatt_discover.part.0+0x58>)
   106a6:	4b09      	ldr	r3, [pc, #36]	; (106cc <gatt_discover.part.0+0x5c>)
		LOG_ERR("could not start the discovery procedure, error "
   106a8:	4809      	ldr	r0, [pc, #36]	; (106d0 <gatt_discover.part.0+0x60>)
   106aa:	1ad2      	subs	r2, r2, r3
   106ac:	08d2      	lsrs	r2, r2, #3
   106ae:	0192      	lsls	r2, r2, #6
   106b0:	f042 0201 	orr.w	r2, r2, #1
   106b4:	f014 fa4c 	bl	24b50 <log_1>
}
   106b8:	b007      	add	sp, #28
   106ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106bc:	000287f8 	.word	0x000287f8
   106c0:	20001ec8 	.word	0x20001ec8
   106c4:	20000428 	.word	0x20000428
   106c8:	00028690 	.word	0x00028690
   106cc:	00028618 	.word	0x00028618
   106d0:	00028e6d 	.word	0x00028e6d

000106d4 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   106d4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   106d6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   106d8:	b08a      	sub	sp, #40	; 0x28
   106da:	4604      	mov	r4, r0
   106dc:	460e      	mov	r6, r1
   106de:	ad07      	add	r5, sp, #28
   106e0:	2b03      	cmp	r3, #3
   106e2:	d820      	bhi.n	10726 <bt_addr_le_to_str.constprop.0+0x52>
   106e4:	e8df f003 	tbb	[pc, r3]
   106e8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   106ec:	4911      	ldr	r1, [pc, #68]	; (10734 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   106ee:	4628      	mov	r0, r5
   106f0:	f015 f8e0 	bl	258b4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   106f4:	7863      	ldrb	r3, [r4, #1]
   106f6:	9304      	str	r3, [sp, #16]
   106f8:	78a3      	ldrb	r3, [r4, #2]
   106fa:	9303      	str	r3, [sp, #12]
   106fc:	78e3      	ldrb	r3, [r4, #3]
   106fe:	9302      	str	r3, [sp, #8]
   10700:	7923      	ldrb	r3, [r4, #4]
   10702:	9301      	str	r3, [sp, #4]
   10704:	7963      	ldrb	r3, [r4, #5]
   10706:	9300      	str	r3, [sp, #0]
   10708:	4a0b      	ldr	r2, [pc, #44]	; (10738 <bt_addr_le_to_str.constprop.0+0x64>)
   1070a:	79a3      	ldrb	r3, [r4, #6]
   1070c:	9505      	str	r5, [sp, #20]
   1070e:	211e      	movs	r1, #30
   10710:	4630      	mov	r0, r6
   10712:	f013 fffe 	bl	24712 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10716:	b00a      	add	sp, #40	; 0x28
   10718:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   1071a:	4908      	ldr	r1, [pc, #32]	; (1073c <bt_addr_le_to_str.constprop.0+0x68>)
   1071c:	e7e7      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   1071e:	4908      	ldr	r1, [pc, #32]	; (10740 <bt_addr_le_to_str.constprop.0+0x6c>)
   10720:	e7e5      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   10722:	4908      	ldr	r1, [pc, #32]	; (10744 <bt_addr_le_to_str.constprop.0+0x70>)
   10724:	e7e3      	b.n	106ee <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10726:	4a08      	ldr	r2, [pc, #32]	; (10748 <bt_addr_le_to_str.constprop.0+0x74>)
   10728:	210a      	movs	r1, #10
   1072a:	4628      	mov	r0, r5
   1072c:	f013 fff1 	bl	24712 <snprintk>
		break;
   10730:	e7e0      	b.n	106f4 <bt_addr_le_to_str.constprop.0+0x20>
   10732:	bf00      	nop
   10734:	00028ea5 	.word	0x00028ea5
   10738:	00028ec7 	.word	0x00028ec7
   1073c:	00028eac 	.word	0x00028eac
   10740:	00028eb3 	.word	0x00028eb3
   10744:	00028ebd 	.word	0x00028ebd
   10748:	0002f158 	.word	0x0002f158

0001074c <connected>:
	}
}

static void connected(struct bt_conn *conn, uint8_t conn_err)
{
   1074c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1074e:	b089      	sub	sp, #36	; 0x24
   10750:	460e      	mov	r6, r1
   10752:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10754:	f015 fb9c 	bl	25e90 <bt_conn_get_dst>
   10758:	4669      	mov	r1, sp
   1075a:	f7ff ffbb 	bl	106d4 <bt_addr_le_to_str.constprop.0>

	if (conn_err) {
   1075e:	4c2b      	ldr	r4, [pc, #172]	; (1080c <connected+0xc0>)
   10760:	4b2b      	ldr	r3, [pc, #172]	; (10810 <connected+0xc4>)
   10762:	1ae4      	subs	r4, r4, r3
   10764:	08e4      	lsrs	r4, r4, #3
   10766:	01a4      	lsls	r4, r4, #6
   10768:	b1f6      	cbz	r6, 107a8 <connected+0x5c>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1076a:	4668      	mov	r0, sp
   1076c:	f001 fb02 	bl	11d74 <z_log_strdup>
		LOG_INF("Failed to connect to %s (%d)", log_strdup(addr),
   10770:	f044 0703 	orr.w	r7, r4, #3
   10774:	4632      	mov	r2, r6
			conn_err);

		if (default_conn == conn) {
   10776:	4e27      	ldr	r6, [pc, #156]	; (10814 <connected+0xc8>)
   10778:	4601      	mov	r1, r0
		LOG_INF("Failed to connect to %s (%d)", log_strdup(addr),
   1077a:	463b      	mov	r3, r7
   1077c:	4826      	ldr	r0, [pc, #152]	; (10818 <connected+0xcc>)
   1077e:	f014 f9fb 	bl	24b78 <log_2>
		if (default_conn == conn) {
   10782:	6830      	ldr	r0, [r6, #0]
   10784:	42a8      	cmp	r0, r5
   10786:	d10d      	bne.n	107a4 <connected+0x58>
			bt_conn_unref(default_conn);
   10788:	f005 fb66 	bl	15e58 <bt_conn_unref>
			default_conn = NULL;
   1078c:	2300      	movs	r3, #0

			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1078e:	2001      	movs	r0, #1
			default_conn = NULL;
   10790:	6033      	str	r3, [r6, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10792:	f002 fee1 	bl	13558 <bt_scan_start>
			if (err) {
   10796:	4601      	mov	r1, r0
   10798:	b120      	cbz	r0, 107a4 <connected+0x58>
				LOG_ERR("Scanning failed to start (err %d)",
   1079a:	4820      	ldr	r0, [pc, #128]	; (1081c <connected+0xd0>)
   1079c:	f044 0201 	orr.w	r2, r4, #1
		gatt_discover(conn);
	}

	err = bt_scan_stop();
	if ((!err) && (err != -EALREADY)) {
		LOG_ERR("Stop LE scan failed (err %d)", err);
   107a0:	f014 f9d6 	bl	24b50 <log_1>
	}
}
   107a4:	b009      	add	sp, #36	; 0x24
   107a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107a8:	4668      	mov	r0, sp
   107aa:	f001 fae3 	bl	11d74 <z_log_strdup>
	LOG_INF("Connected: %s", log_strdup(addr));
   107ae:	f044 0603 	orr.w	r6, r4, #3
   107b2:	4601      	mov	r1, r0
   107b4:	4632      	mov	r2, r6
   107b6:	481a      	ldr	r0, [pc, #104]	; (10820 <connected+0xd4>)
   107b8:	f014 f9ca 	bl	24b50 <log_1>
	exchange_params.func = exchange_func;
   107bc:	4919      	ldr	r1, [pc, #100]	; (10824 <connected+0xd8>)
   107be:	4b1a      	ldr	r3, [pc, #104]	; (10828 <connected+0xdc>)
   107c0:	600b      	str	r3, [r1, #0]
	err = bt_gatt_exchange_mtu(conn, &exchange_params);
   107c2:	4628      	mov	r0, r5
   107c4:	f008 fae2 	bl	18d8c <bt_gatt_exchange_mtu>
	if (err) {
   107c8:	4601      	mov	r1, r0
   107ca:	b120      	cbz	r0, 107d6 <connected+0x8a>
		LOG_WRN("MTU exchange failed (err %d)", err);
   107cc:	4817      	ldr	r0, [pc, #92]	; (1082c <connected+0xe0>)
   107ce:	f044 0202 	orr.w	r2, r4, #2
   107d2:	f014 f9bd 	bl	24b50 <log_1>
	err = bt_conn_set_security(conn, BT_SECURITY_L2);
   107d6:	2102      	movs	r1, #2
   107d8:	4628      	mov	r0, r5
   107da:	f015 fb04 	bl	25de6 <bt_conn_set_security>
	if (err) {
   107de:	4601      	mov	r1, r0
   107e0:	b158      	cbz	r0, 107fa <connected+0xae>
		LOG_WRN("Failed to set security: %d", err);
   107e2:	4813      	ldr	r0, [pc, #76]	; (10830 <connected+0xe4>)
   107e4:	f044 0202 	orr.w	r2, r4, #2
   107e8:	f014 f9b2 	bl	24b50 <log_1>
	if (conn != default_conn) {
   107ec:	4b09      	ldr	r3, [pc, #36]	; (10814 <connected+0xc8>)
   107ee:	681b      	ldr	r3, [r3, #0]
   107f0:	429d      	cmp	r5, r3
   107f2:	d102      	bne.n	107fa <connected+0xae>
   107f4:	4628      	mov	r0, r5
   107f6:	f7ff ff3b 	bl	10670 <gatt_discover.part.0>
	err = bt_scan_stop();
   107fa:	f014 fdd7 	bl	253ac <bt_scan_stop>
	if ((!err) && (err != -EALREADY)) {
   107fe:	4601      	mov	r1, r0
   10800:	2800      	cmp	r0, #0
   10802:	d1cf      	bne.n	107a4 <connected+0x58>
		LOG_ERR("Stop LE scan failed (err %d)", err);
   10804:	480b      	ldr	r0, [pc, #44]	; (10834 <connected+0xe8>)
   10806:	f044 0201 	orr.w	r2, r4, #1
   1080a:	e7c9      	b.n	107a0 <connected+0x54>
   1080c:	00028690 	.word	0x00028690
   10810:	00028618 	.word	0x00028618
   10814:	20001ec0 	.word	0x20001ec0
   10818:	00028eea 	.word	0x00028eea
   1081c:	00028f07 	.word	0x00028f07
   10820:	00028f29 	.word	0x00028f29
   10824:	20001ec4 	.word	0x20001ec4
   10828:	00010641 	.word	0x00010641
   1082c:	00028f37 	.word	0x00028f37
   10830:	00028f54 	.word	0x00028f54
   10834:	00028f6f 	.word	0x00028f6f

00010838 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   10838:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083a:	b089      	sub	sp, #36	; 0x24
   1083c:	460e      	mov	r6, r1
   1083e:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10840:	f015 fb26 	bl	25e90 <bt_conn_get_dst>
   10844:	4669      	mov	r1, sp
   10846:	f7ff ff45 	bl	106d4 <bt_addr_le_to_str.constprop.0>
   1084a:	4c12      	ldr	r4, [pc, #72]	; (10894 <disconnected+0x5c>)
   1084c:	4b12      	ldr	r3, [pc, #72]	; (10898 <disconnected+0x60>)
   1084e:	4668      	mov	r0, sp
   10850:	1ae4      	subs	r4, r4, r3
   10852:	08e4      	lsrs	r4, r4, #3
   10854:	f001 fa8e 	bl	11d74 <z_log_strdup>

	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr),
   10858:	01a4      	lsls	r4, r4, #6
   1085a:	4632      	mov	r2, r6
   1085c:	f044 0703 	orr.w	r7, r4, #3
		reason);

	if (default_conn != conn) {
   10860:	4e0e      	ldr	r6, [pc, #56]	; (1089c <disconnected+0x64>)
   10862:	4601      	mov	r1, r0
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr),
   10864:	463b      	mov	r3, r7
   10866:	480e      	ldr	r0, [pc, #56]	; (108a0 <disconnected+0x68>)
   10868:	f014 f986 	bl	24b78 <log_2>
	if (default_conn != conn) {
   1086c:	6830      	ldr	r0, [r6, #0]
   1086e:	42a8      	cmp	r0, r5
   10870:	d10d      	bne.n	1088e <disconnected+0x56>
		return;
	}

	bt_conn_unref(default_conn);
   10872:	f005 faf1 	bl	15e58 <bt_conn_unref>
	default_conn = NULL;
   10876:	2300      	movs	r3, #0

	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10878:	2001      	movs	r0, #1
	default_conn = NULL;
   1087a:	6033      	str	r3, [r6, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1087c:	f002 fe6c 	bl	13558 <bt_scan_start>
	if (err) {
   10880:	4601      	mov	r1, r0
   10882:	b120      	cbz	r0, 1088e <disconnected+0x56>
		LOG_ERR("Scanning failed to start (err %d)",
   10884:	4807      	ldr	r0, [pc, #28]	; (108a4 <disconnected+0x6c>)
   10886:	f044 0201 	orr.w	r2, r4, #1
   1088a:	f014 f961 	bl	24b50 <log_1>
			err);
	}
}
   1088e:	b009      	add	sp, #36	; 0x24
   10890:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10892:	bf00      	nop
   10894:	00028690 	.word	0x00028690
   10898:	00028618 	.word	0x00028618
   1089c:	20001ec0 	.word	0x20001ec0
   108a0:	00028f8c 	.word	0x00028f8c
   108a4:	00028f07 	.word	0x00028f07

000108a8 <security_changed>:

static void security_changed(struct bt_conn *conn, bt_security_t level,
			     enum bt_security_err err)
{
   108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108aa:	b08b      	sub	sp, #44	; 0x2c
   108ac:	460e      	mov	r6, r1
   108ae:	4617      	mov	r7, r2
   108b0:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   108b2:	f015 faed 	bl	25e90 <bt_conn_get_dst>
   108b6:	a902      	add	r1, sp, #8
   108b8:	f7ff ff0c 	bl	106d4 <bt_addr_le_to_str.constprop.0>

	if (!err) {
   108bc:	4c13      	ldr	r4, [pc, #76]	; (1090c <security_changed+0x64>)
   108be:	4b14      	ldr	r3, [pc, #80]	; (10910 <security_changed+0x68>)
   108c0:	1ae4      	subs	r4, r4, r3
   108c2:	08e4      	lsrs	r4, r4, #3
   108c4:	01a4      	lsls	r4, r4, #6
   108c6:	b99f      	cbnz	r7, 108f0 <security_changed+0x48>
   108c8:	a802      	add	r0, sp, #8
   108ca:	f001 fa53 	bl	11d74 <z_log_strdup>
		LOG_INF("Security changed: %s level %u", log_strdup(addr),
   108ce:	f044 0403 	orr.w	r4, r4, #3
   108d2:	4601      	mov	r1, r0
   108d4:	4623      	mov	r3, r4
   108d6:	480f      	ldr	r0, [pc, #60]	; (10914 <security_changed+0x6c>)
   108d8:	4632      	mov	r2, r6
   108da:	f014 f94d 	bl	24b78 <log_2>
	if (conn != default_conn) {
   108de:	4b0e      	ldr	r3, [pc, #56]	; (10918 <security_changed+0x70>)
   108e0:	681b      	ldr	r3, [r3, #0]
   108e2:	429d      	cmp	r5, r3
   108e4:	d102      	bne.n	108ec <security_changed+0x44>
   108e6:	4628      	mov	r0, r5
   108e8:	f7ff fec2 	bl	10670 <gatt_discover.part.0>
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
			level, err);
	}

	gatt_discover(conn);
}
   108ec:	b00b      	add	sp, #44	; 0x2c
   108ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108f0:	a802      	add	r0, sp, #8
   108f2:	f001 fa3f 	bl	11d74 <z_log_strdup>
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
   108f6:	f044 0402 	orr.w	r4, r4, #2
   108fa:	4601      	mov	r1, r0
   108fc:	f8ad 4000 	strh.w	r4, [sp]
   10900:	4806      	ldr	r0, [pc, #24]	; (1091c <security_changed+0x74>)
   10902:	463b      	mov	r3, r7
   10904:	4632      	mov	r2, r6
   10906:	f014 f950 	bl	24baa <log_3>
   1090a:	e7e8      	b.n	108de <security_changed+0x36>
   1090c:	00028690 	.word	0x00028690
   10910:	00028618 	.word	0x00028618
   10914:	00028fa9 	.word	0x00028fa9
   10918:	20001ec0 	.word	0x20001ec0
   1091c:	00028fc7 	.word	0x00028fc7

00010920 <main>:
		}
	}
}
*/

void main() {
   10920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10924:	b091      	sub	sp, #68	; 0x44
   10926:	4846      	ldr	r0, [pc, #280]	; (10a40 <main+0x120>)
   10928:	f00f ffec 	bl	20904 <z_impl_device_get_binding>
    uint8_t font_height;
    uint16_t display_height;

    dev = device_get_binding("SSD1306");

    if (dev == NULL) {
   1092c:	4604      	mov	r4, r0
   1092e:	b928      	cbnz	r0, 1093c <main+0x1c>
        printk("Device not found\n");
   10930:	4844      	ldr	r0, [pc, #272]	; (10a44 <main+0x124>)
    }

    printk("initialized %s\n", "SSD1306");

    if (cfb_framebuffer_init(dev)) {
        printk("Framebuffer initialization failed!\n");
   10932:	f013 fee1 	bl	246f8 <printk>
            }
        }
        cfb_framebuffer_finalize(dev);
        k_sleep(K_MSEC(1000));
    }
   10936:	b011      	add	sp, #68	; 0x44
   10938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 const enum display_pixel_format pixel_format)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->set_pixel_format(dev, pixel_format);
   1093c:	6883      	ldr	r3, [r0, #8]
   1093e:	2104      	movs	r1, #4
   10940:	6a1b      	ldr	r3, [r3, #32]
   10942:	4798      	blx	r3
    if (display_set_pixel_format(dev, PIXEL_FORMAT_MONO10) != 0) {
   10944:	b108      	cbz	r0, 1094a <main+0x2a>
        printk("Failed to set required pixel format\n");
   10946:	4840      	ldr	r0, [pc, #256]	; (10a48 <main+0x128>)
   10948:	e7f3      	b.n	10932 <main+0x12>
    printk("initialized %s\n", "SSD1306");
   1094a:	493d      	ldr	r1, [pc, #244]	; (10a40 <main+0x120>)
   1094c:	483f      	ldr	r0, [pc, #252]	; (10a4c <main+0x12c>)
   1094e:	f013 fed3 	bl	246f8 <printk>
    if (cfb_framebuffer_init(dev)) {
   10952:	4620      	mov	r0, r4
   10954:	f002 f968 	bl	12c28 <cfb_framebuffer_init>
   10958:	4605      	mov	r5, r0
   1095a:	b108      	cbz	r0, 10960 <main+0x40>
        printk("Framebuffer initialization failed!\n");
   1095c:	483c      	ldr	r0, [pc, #240]	; (10a50 <main+0x130>)
   1095e:	e7e8      	b.n	10932 <main+0x12>
    cfb_framebuffer_clear(dev, true);
   10960:	2101      	movs	r1, #1
   10962:	4620      	mov	r0, r4
   10964:	f002 f8be 	bl	12ae4 <cfb_framebuffer_clear>
    cfb_framebuffer_invert(dev);
   10968:	4620      	mov	r0, r4
   1096a:	f002 f8cb 	bl	12b04 <cfb_framebuffer_invert>
	return api->blanking_off(dev);
   1096e:	68a3      	ldr	r3, [r4, #8]
   10970:	4620      	mov	r0, r4
   10972:	685b      	ldr	r3, [r3, #4]
   10974:	4798      	blx	r3
    rows = cfb_get_display_parameter(dev, CFB_DISPLAY_ROWS);
   10976:	2103      	movs	r1, #3
   10978:	4620      	mov	r0, r4
   1097a:	f002 f907 	bl	12b8c <cfb_get_display_parameter>
    ppt = cfb_get_display_parameter(dev, CFB_DISPLAY_PPT);
   1097e:	2102      	movs	r1, #2
    rows = cfb_get_display_parameter(dev, CFB_DISPLAY_ROWS);
   10980:	4606      	mov	r6, r0
    ppt = cfb_get_display_parameter(dev, CFB_DISPLAY_PPT);
   10982:	4620      	mov	r0, r4
   10984:	f002 f902 	bl	12b8c <cfb_get_display_parameter>
        if (cfb_get_font_size(dev, idx, &font_width, &font_height)) {
   10988:	4629      	mov	r1, r5
    ppt = cfb_get_display_parameter(dev, CFB_DISPLAY_PPT);
   1098a:	4680      	mov	r8, r0
        if (cfb_get_font_size(dev, idx, &font_width, &font_height)) {
   1098c:	f10d 030b 	add.w	r3, sp, #11
   10990:	f10d 020a 	add.w	r2, sp, #10
   10994:	4620      	mov	r0, r4
   10996:	f002 f929 	bl	12bec <cfb_get_font_size>
   1099a:	4601      	mov	r1, r0
   1099c:	b948      	cbnz	r0, 109b2 <main+0x92>
        cfb_framebuffer_set_font(dev, idx);
   1099e:	4620      	mov	r0, r4
   109a0:	f002 f918 	bl	12bd4 <cfb_framebuffer_set_font>
        printk("font width %d, font height %d\n",
   109a4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   109a8:	f89d 100a 	ldrb.w	r1, [sp, #10]
   109ac:	4829      	ldr	r0, [pc, #164]	; (10a54 <main+0x134>)
   109ae:	f013 fea3 	bl	246f8 <printk>
    display_height = cfb_get_display_parameter(dev, CFB_DISPLAY_HEIGH);
   109b2:	2100      	movs	r1, #0
   109b4:	4620      	mov	r0, r4
   109b6:	f002 f8e9 	bl	12b8c <cfb_get_display_parameter>
    printk("x_res %d, y_res %d, ppt %d, rows %d, cols %d\n",
   109ba:	2101      	movs	r1, #1
    display_height = cfb_get_display_parameter(dev, CFB_DISPLAY_HEIGH);
   109bc:	4605      	mov	r5, r0
    printk("x_res %d, y_res %d, ppt %d, rows %d, cols %d\n",
   109be:	4620      	mov	r0, r4
   109c0:	f002 f8e4 	bl	12b8c <cfb_get_display_parameter>
   109c4:	2104      	movs	r1, #4
   109c6:	4607      	mov	r7, r0
   109c8:	4620      	mov	r0, r4
   109ca:	f002 f8df 	bl	12b8c <cfb_get_display_parameter>
   109ce:	b2ad      	uxth	r5, r5
   109d0:	b2b6      	uxth	r6, r6
   109d2:	9001      	str	r0, [sp, #4]
   109d4:	fa5f f388 	uxtb.w	r3, r8
   109d8:	4639      	mov	r1, r7
   109da:	481f      	ldr	r0, [pc, #124]	; (10a58 <main+0x138>)
   109dc:	9600      	str	r6, [sp, #0]
   109de:	462a      	mov	r2, r5
   109e0:	f013 fe8a 	bl	246f8 <printk>
        sprintf(tmpstr, "%d", tick++);
   109e4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 10a5c <main+0x13c>
                printk("Failed to print a string\n");
   109e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10a60 <main+0x140>
    printk("x_res %d, y_res %d, ppt %d, rows %d, cols %d\n",
   109ec:	2700      	movs	r7, #0
        cfb_framebuffer_clear(dev, false);
   109ee:	2100      	movs	r1, #0
   109f0:	4620      	mov	r0, r4
   109f2:	f002 f877 	bl	12ae4 <cfb_framebuffer_clear>
        sprintf(tmpstr, "%d", tick++);
   109f6:	b2ba      	uxth	r2, r7
   109f8:	4649      	mov	r1, r9
   109fa:	a803      	add	r0, sp, #12
   109fc:	f003 fdde 	bl	145bc <sprintf>
        for (int i = 0; i < (display_height / font_height); i++) {
   10a00:	2600      	movs	r6, #0
   10a02:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10a06:	fbb5 f2f3 	udiv	r2, r5, r3
   10a0a:	42b2      	cmp	r2, r6
   10a0c:	dc09      	bgt.n	10a22 <main+0x102>
        cfb_framebuffer_finalize(dev);
   10a0e:	4620      	mov	r0, r4
   10a10:	f002 f886 	bl	12b20 <cfb_framebuffer_finalize>
	return z_impl_k_sleep(timeout);
   10a14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10a18:	2100      	movs	r1, #0
   10a1a:	f012 feab 	bl	23774 <z_impl_k_sleep>
    while (1) {
   10a1e:	3701      	adds	r7, #1
   10a20:	e7e5      	b.n	109ee <main+0xce>
            if (cfb_print(dev,
   10a22:	fb13 f306 	smulbb	r3, r3, r6
   10a26:	b29b      	uxth	r3, r3
   10a28:	2200      	movs	r2, #0
   10a2a:	a903      	add	r1, sp, #12
   10a2c:	4620      	mov	r0, r4
   10a2e:	f001 ff8f 	bl	12950 <cfb_print>
   10a32:	b110      	cbz	r0, 10a3a <main+0x11a>
                printk("Failed to print a string\n");
   10a34:	4640      	mov	r0, r8
   10a36:	f013 fe5f 	bl	246f8 <printk>
        for (int i = 0; i < (display_height / font_height); i++) {
   10a3a:	3601      	adds	r6, #1
   10a3c:	e7e1      	b.n	10a02 <main+0xe2>
   10a3e:	bf00      	nop
   10a40:	00028feb 	.word	0x00028feb
   10a44:	00028ff3 	.word	0x00028ff3
   10a48:	00029005 	.word	0x00029005
   10a4c:	0002902a 	.word	0x0002902a
   10a50:	0002903a 	.word	0x0002903a
   10a54:	0002905e 	.word	0x0002905e
   10a58:	0002907d 	.word	0x0002907d
   10a5c:	0002fc83 	.word	0x0002fc83
   10a60:	000290ab 	.word	0x000290ab

00010a64 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10a64:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   10a66:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10a6a:	2b02      	cmp	r3, #2
{
   10a6c:	b570      	push	{r4, r5, r6, lr}
   10a6e:	4604      	mov	r4, r0
   10a70:	460e      	mov	r6, r1
	notify->result = res;
   10a72:	6081      	str	r1, [r0, #8]
	switch (method) {
   10a74:	d010      	beq.n	10a98 <sys_notify_finalize+0x34>
   10a76:	2b03      	cmp	r3, #3
   10a78:	d004      	beq.n	10a84 <sys_notify_finalize+0x20>
   10a7a:	2b01      	cmp	r3, #1
   10a7c:	d10f      	bne.n	10a9e <sys_notify_finalize+0x3a>
   10a7e:	2500      	movs	r5, #0
   10a80:	4628      	mov	r0, r5
   10a82:	e001      	b.n	10a88 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   10a84:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   10a86:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10a88:	2300      	movs	r3, #0
   10a8a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   10a8c:	b110      	cbz	r0, 10a94 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   10a8e:	4631      	mov	r1, r6
   10a90:	f013 fca6 	bl	243e0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10a94:	4628      	mov	r0, r5
   10a96:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   10a98:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   10a9a:	2500      	movs	r5, #0
		break;
   10a9c:	e7f4      	b.n	10a88 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   10a9e:	4a06      	ldr	r2, [pc, #24]	; (10ab8 <sys_notify_finalize+0x54>)
   10aa0:	4906      	ldr	r1, [pc, #24]	; (10abc <sys_notify_finalize+0x58>)
   10aa2:	4807      	ldr	r0, [pc, #28]	; (10ac0 <sys_notify_finalize+0x5c>)
   10aa4:	2345      	movs	r3, #69	; 0x45
   10aa6:	f013 fe27 	bl	246f8 <printk>
   10aaa:	4803      	ldr	r0, [pc, #12]	; (10ab8 <sys_notify_finalize+0x54>)
   10aac:	2145      	movs	r1, #69	; 0x45
   10aae:	f014 f814 	bl	24ada <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   10ab2:	2500      	movs	r5, #0
   10ab4:	e7e7      	b.n	10a86 <sys_notify_finalize+0x22>
   10ab6:	bf00      	nop
   10ab8:	000290d2 	.word	0x000290d2
   10abc:	0002cf26 	.word	0x0002cf26
   10ac0:	000290f5 	.word	0x000290f5

00010ac4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10ac4:	680b      	ldr	r3, [r1, #0]
   10ac6:	3301      	adds	r3, #1
   10ac8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10aca:	4b01      	ldr	r3, [pc, #4]	; (10ad0 <char_out+0xc>)
   10acc:	681b      	ldr	r3, [r3, #0]
   10ace:	4718      	bx	r3
   10ad0:	20000434 	.word	0x20000434

00010ad4 <__printk_hook_install>:
	_char_out = fn;
   10ad4:	4b01      	ldr	r3, [pc, #4]	; (10adc <__printk_hook_install+0x8>)
   10ad6:	6018      	str	r0, [r3, #0]
}
   10ad8:	4770      	bx	lr
   10ada:	bf00      	nop
   10adc:	20000434 	.word	0x20000434

00010ae0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10ae0:	b507      	push	{r0, r1, r2, lr}
   10ae2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10ae4:	2100      	movs	r1, #0
{
   10ae6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10ae8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10aea:	4803      	ldr	r0, [pc, #12]	; (10af8 <vprintk+0x18>)
   10aec:	a901      	add	r1, sp, #4
   10aee:	f000 fc41 	bl	11374 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10af2:	b003      	add	sp, #12
   10af4:	f85d fb04 	ldr.w	pc, [sp], #4
   10af8:	00010ac5 	.word	0x00010ac5

00010afc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10afc:	b530      	push	{r4, r5, lr}
   10afe:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   10b00:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   10b04:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10b06:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10b08:	a901      	add	r1, sp, #4
   10b0a:	4805      	ldr	r0, [pc, #20]	; (10b20 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10b0c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10b0e:	f000 fc31 	bl	11374 <cbvprintf>

	if (ctx.count < ctx.max) {
   10b12:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   10b16:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10b18:	bfb8      	it	lt
   10b1a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10b1c:	b005      	add	sp, #20
   10b1e:	bd30      	pop	{r4, r5, pc}
   10b20:	000246d3 	.word	0x000246d3

00010b24 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10b28:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   10b2c:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10b2e:	f019 0f08 	tst.w	r9, #8
{
   10b32:	4604      	mov	r4, r0
   10b34:	9203      	str	r2, [sp, #12]
	if (processing) {
   10b36:	d022      	beq.n	10b7e <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   10b38:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10b3a:	bf0c      	ite	eq
   10b3c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10b40:	f049 0920 	orrne.w	r9, r9, #32
   10b44:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   10b48:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b4a:	4620      	mov	r0, r4
   10b4c:	f010 fbd2 	bl	212f4 <z_spin_unlock_valid>
   10b50:	b968      	cbnz	r0, 10b6e <process_event+0x4a>
   10b52:	4a9f      	ldr	r2, [pc, #636]	; (10dd0 <process_event+0x2ac>)
   10b54:	499f      	ldr	r1, [pc, #636]	; (10dd4 <process_event+0x2b0>)
   10b56:	48a0      	ldr	r0, [pc, #640]	; (10dd8 <process_event+0x2b4>)
   10b58:	23ac      	movs	r3, #172	; 0xac
   10b5a:	f013 fdcd 	bl	246f8 <printk>
   10b5e:	489f      	ldr	r0, [pc, #636]	; (10ddc <process_event+0x2b8>)
   10b60:	4621      	mov	r1, r4
   10b62:	f013 fdc9 	bl	246f8 <printk>
   10b66:	489a      	ldr	r0, [pc, #616]	; (10dd0 <process_event+0x2ac>)
   10b68:	21ac      	movs	r1, #172	; 0xac
   10b6a:	f013 ffb6 	bl	24ada <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10b6e:	9b03      	ldr	r3, [sp, #12]
   10b70:	f383 8811 	msr	BASEPRI, r3
   10b74:	f3bf 8f6f 	isb	sy
}
   10b78:	b005      	add	sp, #20
   10b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   10b7e:	4f98      	ldr	r7, [pc, #608]	; (10de0 <process_event+0x2bc>)
   10b80:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10dd8 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10b84:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10b88:	2902      	cmp	r1, #2
   10b8a:	d106      	bne.n	10b9a <process_event+0x76>
			evt = process_recheck(mgr);
   10b8c:	4620      	mov	r0, r4
   10b8e:	f013 fdcd 	bl	2472c <process_recheck>
		if (evt == EVT_NOP) {
   10b92:	2800      	cmp	r0, #0
   10b94:	d0d8      	beq.n	10b48 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   10b96:	2801      	cmp	r0, #1
   10b98:	d168      	bne.n	10c6c <process_event+0x148>
			res = mgr->last_res;
   10b9a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10b9e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   10ba0:	f1bb 0f00 	cmp.w	fp, #0
   10ba4:	da0a      	bge.n	10bbc <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10ba6:	2600      	movs	r6, #0
		*clients = mgr->clients;
   10ba8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10baa:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   10bae:	e9c4 6600 	strd	r6, r6, [r4]
   10bb2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10bb6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10bb8:	9601      	str	r6, [sp, #4]
   10bba:	e027      	b.n	10c0c <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10bbc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10bc0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10bc2:	2901      	cmp	r1, #1
   10bc4:	d834      	bhi.n	10c30 <process_event+0x10c>
	list->head = NULL;
   10bc6:	2100      	movs	r1, #0
   10bc8:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   10bcc:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   10bce:	6825      	ldr	r5, [r4, #0]
   10bd0:	b29b      	uxth	r3, r3
	list->tail = NULL;
   10bd2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   10bd6:	d10c      	bne.n	10bf2 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10bd8:	428d      	cmp	r5, r1
   10bda:	462a      	mov	r2, r5
   10bdc:	bf38      	it	cc
   10bde:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10be0:	b12a      	cbz	r2, 10bee <process_event+0xca>
				mgr->refs += 1U;
   10be2:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10be4:	6812      	ldr	r2, [r2, #0]
   10be6:	3101      	adds	r1, #1
   10be8:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10bea:	2a00      	cmp	r2, #0
   10bec:	d1f8      	bne.n	10be0 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10bee:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10bf2:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10bf4:	4620      	mov	r0, r4
   10bf6:	f013 fd99 	bl	2472c <process_recheck>
   10bfa:	4606      	mov	r6, r0
   10bfc:	2800      	cmp	r0, #0
   10bfe:	d0db      	beq.n	10bb8 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c00:	8ba3      	ldrh	r3, [r4, #28]
   10c02:	f043 0320 	orr.w	r3, r3, #32
   10c06:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10c08:	2300      	movs	r3, #0
   10c0a:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10c0c:	8ba3      	ldrh	r3, [r4, #28]
   10c0e:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10c12:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10c14:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   10c16:	d003      	beq.n	10c20 <process_event+0xfc>
		if (do_monitors
   10c18:	68a2      	ldr	r2, [r4, #8]
   10c1a:	2a00      	cmp	r2, #0
   10c1c:	f040 80f0 	bne.w	10e00 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   10c20:	b91d      	cbnz	r5, 10c2a <process_event+0x106>
		    || (transit != NULL)) {
   10c22:	9a01      	ldr	r2, [sp, #4]
   10c24:	2a00      	cmp	r2, #0
   10c26:	f000 8136 	beq.w	10e96 <process_event+0x372>
   10c2a:	f04f 0900 	mov.w	r9, #0
   10c2e:	e0e9      	b.n	10e04 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10c30:	2a04      	cmp	r2, #4
   10c32:	d10e      	bne.n	10c52 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10c34:	f023 0307 	bic.w	r3, r3, #7
   10c38:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10c3a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10c3c:	4620      	mov	r0, r4
   10c3e:	f013 fd75 	bl	2472c <process_recheck>
   10c42:	4605      	mov	r5, r0
   10c44:	b118      	cbz	r0, 10c4e <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c46:	f042 0220 	orr.w	r2, r2, #32
   10c4a:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   10c4c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10c4e:	9501      	str	r5, [sp, #4]
   10c50:	e7dc      	b.n	10c0c <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   10c52:	4640      	mov	r0, r8
   10c54:	4963      	ldr	r1, [pc, #396]	; (10de4 <process_event+0x2c0>)
   10c56:	f240 131b 	movw	r3, #283	; 0x11b
   10c5a:	463a      	mov	r2, r7
   10c5c:	f013 fd4c 	bl	246f8 <printk>
   10c60:	f240 111b 	movw	r1, #283	; 0x11b
   10c64:	4638      	mov	r0, r7
   10c66:	f013 ff38 	bl	24ada <assert_post_action>
   10c6a:	e7ef      	b.n	10c4c <process_event+0x128>
		} else if (evt == EVT_START) {
   10c6c:	2803      	cmp	r0, #3
   10c6e:	d135      	bne.n	10cdc <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10c70:	f1b9 0f00 	cmp.w	r9, #0
   10c74:	d00b      	beq.n	10c8e <process_event+0x16a>
   10c76:	495c      	ldr	r1, [pc, #368]	; (10de8 <process_event+0x2c4>)
   10c78:	4640      	mov	r0, r8
   10c7a:	f44f 73ab 	mov.w	r3, #342	; 0x156
   10c7e:	463a      	mov	r2, r7
   10c80:	f013 fd3a 	bl	246f8 <printk>
   10c84:	f44f 71ab 	mov.w	r1, #342	; 0x156
   10c88:	4638      	mov	r0, r7
   10c8a:	f013 ff26 	bl	24ada <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10c8e:	6823      	ldr	r3, [r4, #0]
   10c90:	b95b      	cbnz	r3, 10caa <process_event+0x186>
   10c92:	4956      	ldr	r1, [pc, #344]	; (10dec <process_event+0x2c8>)
   10c94:	4640      	mov	r0, r8
   10c96:	f240 1357 	movw	r3, #343	; 0x157
   10c9a:	463a      	mov	r2, r7
   10c9c:	f013 fd2c 	bl	246f8 <printk>
   10ca0:	f240 1157 	movw	r1, #343	; 0x157
   10ca4:	4638      	mov	r0, r7
   10ca6:	f013 ff18 	bl	24ada <assert_post_action>
			transit = mgr->transitions->start;
   10caa:	6923      	ldr	r3, [r4, #16]
   10cac:	681b      	ldr	r3, [r3, #0]
   10cae:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10cb0:	b95b      	cbnz	r3, 10cca <process_event+0x1a6>
   10cb2:	494f      	ldr	r1, [pc, #316]	; (10df0 <process_event+0x2cc>)
   10cb4:	4640      	mov	r0, r8
   10cb6:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   10cba:	463a      	mov	r2, r7
   10cbc:	f013 fd1c 	bl	246f8 <printk>
   10cc0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   10cc4:	4638      	mov	r0, r7
   10cc6:	f013 ff08 	bl	24ada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10cca:	8ba3      	ldrh	r3, [r4, #28]
   10ccc:	f023 0307 	bic.w	r3, r3, #7
   10cd0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10cd4:	83a3      	strh	r3, [r4, #28]
}
   10cd6:	2500      	movs	r5, #0
		res = 0;
   10cd8:	46ab      	mov	fp, r5
}
   10cda:	e797      	b.n	10c0c <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   10cdc:	2804      	cmp	r0, #4
   10cde:	d132      	bne.n	10d46 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   10ce0:	f1b9 0f02 	cmp.w	r9, #2
   10ce4:	d00b      	beq.n	10cfe <process_event+0x1da>
   10ce6:	4943      	ldr	r1, [pc, #268]	; (10df4 <process_event+0x2d0>)
   10ce8:	4640      	mov	r0, r8
   10cea:	f240 135d 	movw	r3, #349	; 0x15d
   10cee:	463a      	mov	r2, r7
   10cf0:	f013 fd02 	bl	246f8 <printk>
   10cf4:	f240 115d 	movw	r1, #349	; 0x15d
   10cf8:	4638      	mov	r0, r7
   10cfa:	f013 feee 	bl	24ada <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   10cfe:	8be3      	ldrh	r3, [r4, #30]
   10d00:	b15b      	cbz	r3, 10d1a <process_event+0x1f6>
   10d02:	493d      	ldr	r1, [pc, #244]	; (10df8 <process_event+0x2d4>)
   10d04:	4640      	mov	r0, r8
   10d06:	f44f 73af 	mov.w	r3, #350	; 0x15e
   10d0a:	463a      	mov	r2, r7
   10d0c:	f013 fcf4 	bl	246f8 <printk>
   10d10:	f44f 71af 	mov.w	r1, #350	; 0x15e
   10d14:	4638      	mov	r0, r7
   10d16:	f013 fee0 	bl	24ada <assert_post_action>
			transit = mgr->transitions->stop;
   10d1a:	6923      	ldr	r3, [r4, #16]
   10d1c:	685b      	ldr	r3, [r3, #4]
   10d1e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10d20:	b95b      	cbnz	r3, 10d3a <process_event+0x216>
   10d22:	4933      	ldr	r1, [pc, #204]	; (10df0 <process_event+0x2cc>)
   10d24:	4640      	mov	r0, r8
   10d26:	f240 1361 	movw	r3, #353	; 0x161
   10d2a:	463a      	mov	r2, r7
   10d2c:	f013 fce4 	bl	246f8 <printk>
   10d30:	f240 1161 	movw	r1, #353	; 0x161
   10d34:	4638      	mov	r0, r7
   10d36:	f013 fed0 	bl	24ada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10d3a:	8ba3      	ldrh	r3, [r4, #28]
   10d3c:	f023 0307 	bic.w	r3, r3, #7
   10d40:	f043 0304 	orr.w	r3, r3, #4
   10d44:	e7c6      	b.n	10cd4 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   10d46:	2805      	cmp	r0, #5
   10d48:	d132      	bne.n	10db0 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10d4a:	f1b9 0f01 	cmp.w	r9, #1
   10d4e:	d00b      	beq.n	10d68 <process_event+0x244>
   10d50:	492a      	ldr	r1, [pc, #168]	; (10dfc <process_event+0x2d8>)
   10d52:	4640      	mov	r0, r8
   10d54:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10d58:	463a      	mov	r2, r7
   10d5a:	f013 fccd 	bl	246f8 <printk>
   10d5e:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10d62:	4638      	mov	r0, r7
   10d64:	f013 feb9 	bl	24ada <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10d68:	6823      	ldr	r3, [r4, #0]
   10d6a:	b95b      	cbnz	r3, 10d84 <process_event+0x260>
   10d6c:	491f      	ldr	r1, [pc, #124]	; (10dec <process_event+0x2c8>)
   10d6e:	4640      	mov	r0, r8
   10d70:	f240 1365 	movw	r3, #357	; 0x165
   10d74:	463a      	mov	r2, r7
   10d76:	f013 fcbf 	bl	246f8 <printk>
   10d7a:	f240 1165 	movw	r1, #357	; 0x165
   10d7e:	4638      	mov	r0, r7
   10d80:	f013 feab 	bl	24ada <assert_post_action>
			transit = mgr->transitions->reset;
   10d84:	6923      	ldr	r3, [r4, #16]
   10d86:	689b      	ldr	r3, [r3, #8]
   10d88:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10d8a:	b95b      	cbnz	r3, 10da4 <process_event+0x280>
   10d8c:	4918      	ldr	r1, [pc, #96]	; (10df0 <process_event+0x2cc>)
   10d8e:	4640      	mov	r0, r8
   10d90:	f44f 73b4 	mov.w	r3, #360	; 0x168
   10d94:	463a      	mov	r2, r7
   10d96:	f013 fcaf 	bl	246f8 <printk>
   10d9a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10d9e:	4638      	mov	r0, r7
   10da0:	f013 fe9b 	bl	24ada <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10da4:	8ba3      	ldrh	r3, [r4, #28]
   10da6:	f023 0307 	bic.w	r3, r3, #7
   10daa:	f043 0305 	orr.w	r3, r3, #5
   10dae:	e791      	b.n	10cd4 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   10db0:	490c      	ldr	r1, [pc, #48]	; (10de4 <process_event+0x2c0>)
   10db2:	f240 136b 	movw	r3, #363	; 0x16b
   10db6:	463a      	mov	r2, r7
   10db8:	4640      	mov	r0, r8
   10dba:	f013 fc9d 	bl	246f8 <printk>
   10dbe:	2500      	movs	r5, #0
   10dc0:	f240 116b 	movw	r1, #363	; 0x16b
   10dc4:	4638      	mov	r0, r7
   10dc6:	f013 fe88 	bl	24ada <assert_post_action>
		onoff_transition_fn transit = NULL;
   10dca:	9501      	str	r5, [sp, #4]
   10dcc:	e784      	b.n	10cd8 <process_event+0x1b4>
   10dce:	bf00      	nop
   10dd0:	000291b5 	.word	0x000291b5
   10dd4:	000291db 	.word	0x000291db
   10dd8:	000290f5 	.word	0x000290f5
   10ddc:	000291f2 	.word	0x000291f2
   10de0:	00029112 	.word	0x00029112
   10de4:	0002cf26 	.word	0x0002cf26
   10de8:	00029134 	.word	0x00029134
   10dec:	00029140 	.word	0x00029140
   10df0:	00029163 	.word	0x00029163
   10df4:	0002917a 	.word	0x0002917a
   10df8:	00029190 	.word	0x00029190
   10dfc:	0002919f 	.word	0x0002919f
				   && !sys_slist_is_empty(&mgr->monitors);
   10e00:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10e04:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   10e08:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   10e0c:	83a3      	strh	r3, [r4, #28]
   10e0e:	4650      	mov	r0, sl
   10e10:	f010 fa70 	bl	212f4 <z_spin_unlock_valid>
   10e14:	b968      	cbnz	r0, 10e32 <process_event+0x30e>
   10e16:	4a3a      	ldr	r2, [pc, #232]	; (10f00 <process_event+0x3dc>)
   10e18:	493a      	ldr	r1, [pc, #232]	; (10f04 <process_event+0x3e0>)
   10e1a:	23ac      	movs	r3, #172	; 0xac
   10e1c:	4640      	mov	r0, r8
   10e1e:	f013 fc6b 	bl	246f8 <printk>
   10e22:	4839      	ldr	r0, [pc, #228]	; (10f08 <process_event+0x3e4>)
   10e24:	4651      	mov	r1, sl
   10e26:	f013 fc67 	bl	246f8 <printk>
   10e2a:	4835      	ldr	r0, [pc, #212]	; (10f00 <process_event+0x3dc>)
   10e2c:	21ac      	movs	r1, #172	; 0xac
   10e2e:	f013 fe54 	bl	24ada <assert_post_action>
   10e32:	9b03      	ldr	r3, [sp, #12]
   10e34:	f383 8811 	msr	BASEPRI, r3
   10e38:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10e3c:	f1b9 0f00 	cmp.w	r9, #0
   10e40:	d138      	bne.n	10eb4 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   10e42:	2d00      	cmp	r5, #0
   10e44:	d14b      	bne.n	10ede <process_event+0x3ba>
			if (transit != NULL) {
   10e46:	9b01      	ldr	r3, [sp, #4]
   10e48:	b113      	cbz	r3, 10e50 <process_event+0x32c>
				transit(mgr, transition_complete);
   10e4a:	4930      	ldr	r1, [pc, #192]	; (10f0c <process_event+0x3e8>)
   10e4c:	4620      	mov	r0, r4
   10e4e:	4798      	blx	r3
	__asm__ volatile(
   10e50:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e54:	f3ef 8b11 	mrs	fp, BASEPRI
   10e58:	f383 8812 	msr	BASEPRI_MAX, r3
   10e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e60:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   10e62:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e66:	f010 fa37 	bl	212d8 <z_spin_lock_valid>
   10e6a:	b968      	cbnz	r0, 10e88 <process_event+0x364>
   10e6c:	4a24      	ldr	r2, [pc, #144]	; (10f00 <process_event+0x3dc>)
   10e6e:	4928      	ldr	r1, [pc, #160]	; (10f10 <process_event+0x3ec>)
   10e70:	2381      	movs	r3, #129	; 0x81
   10e72:	4640      	mov	r0, r8
   10e74:	f013 fc40 	bl	246f8 <printk>
   10e78:	4826      	ldr	r0, [pc, #152]	; (10f14 <process_event+0x3f0>)
   10e7a:	4651      	mov	r1, sl
   10e7c:	f013 fc3c 	bl	246f8 <printk>
   10e80:	481f      	ldr	r0, [pc, #124]	; (10f00 <process_event+0x3dc>)
   10e82:	2181      	movs	r1, #129	; 0x81
   10e84:	f013 fe29 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   10e88:	4650      	mov	r0, sl
   10e8a:	f010 fa43 	bl	21314 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10e8e:	8ba3      	ldrh	r3, [r4, #28]
   10e90:	f023 0308 	bic.w	r3, r3, #8
   10e94:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10e96:	8ba3      	ldrh	r3, [r4, #28]
   10e98:	06da      	lsls	r2, r3, #27
   10e9a:	d528      	bpl.n	10eee <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10e9c:	f023 0310 	bic.w	r3, r3, #16
   10ea0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   10ea2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10ea4:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   10ea8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   10eac:	2900      	cmp	r1, #0
   10eae:	f47f ae6b 	bne.w	10b88 <process_event+0x64>
out:
   10eb2:	e649      	b.n	10b48 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10eb4:	68a1      	ldr	r1, [r4, #8]
   10eb6:	2900      	cmp	r1, #0
   10eb8:	d0c3      	beq.n	10e42 <process_event+0x31e>
	return node->next;
   10eba:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   10ebc:	9a02      	ldr	r2, [sp, #8]
   10ebe:	2b00      	cmp	r3, #0
   10ec0:	bf38      	it	cc
   10ec2:	2300      	movcc	r3, #0
   10ec4:	4699      	mov	r9, r3
   10ec6:	684b      	ldr	r3, [r1, #4]
   10ec8:	4620      	mov	r0, r4
   10eca:	461e      	mov	r6, r3
   10ecc:	465b      	mov	r3, fp
   10ece:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10ed0:	f1b9 0f00 	cmp.w	r9, #0
   10ed4:	d0b5      	beq.n	10e42 <process_event+0x31e>
   10ed6:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10eda:	4649      	mov	r1, r9
   10edc:	e7ee      	b.n	10ebc <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10ede:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10ee0:	9a02      	ldr	r2, [sp, #8]
   10ee2:	682d      	ldr	r5, [r5, #0]
   10ee4:	465b      	mov	r3, fp
   10ee6:	4620      	mov	r0, r4
   10ee8:	f013 fc3c 	bl	24764 <notify_one>
   10eec:	e7a9      	b.n	10e42 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10eee:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10ef2:	bf1e      	ittt	ne
   10ef4:	f023 0320 	bicne.w	r3, r3, #32
   10ef8:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   10efa:	2102      	movne	r1, #2
   10efc:	e7d2      	b.n	10ea4 <process_event+0x380>
   10efe:	bf00      	nop
   10f00:	000291b5 	.word	0x000291b5
   10f04:	000291db 	.word	0x000291db
   10f08:	000291f2 	.word	0x000291f2
   10f0c:	00010f19 	.word	0x00010f19
   10f10:	00029207 	.word	0x00029207
   10f14:	0002921c 	.word	0x0002921c

00010f18 <transition_complete>:
{
   10f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f1a:	4604      	mov	r4, r0
   10f1c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10f1e:	f100 0614 	add.w	r6, r0, #20
   10f22:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f26:	f3ef 8711 	mrs	r7, BASEPRI
   10f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   10f2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f32:	4630      	mov	r0, r6
   10f34:	f010 f9d0 	bl	212d8 <z_spin_lock_valid>
   10f38:	b968      	cbnz	r0, 10f56 <transition_complete+0x3e>
   10f3a:	4a0c      	ldr	r2, [pc, #48]	; (10f6c <transition_complete+0x54>)
   10f3c:	490c      	ldr	r1, [pc, #48]	; (10f70 <transition_complete+0x58>)
   10f3e:	480d      	ldr	r0, [pc, #52]	; (10f74 <transition_complete+0x5c>)
   10f40:	2381      	movs	r3, #129	; 0x81
   10f42:	f013 fbd9 	bl	246f8 <printk>
   10f46:	480c      	ldr	r0, [pc, #48]	; (10f78 <transition_complete+0x60>)
   10f48:	4631      	mov	r1, r6
   10f4a:	f013 fbd5 	bl	246f8 <printk>
   10f4e:	4807      	ldr	r0, [pc, #28]	; (10f6c <transition_complete+0x54>)
   10f50:	2181      	movs	r1, #129	; 0x81
   10f52:	f013 fdc2 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   10f56:	4630      	mov	r0, r6
   10f58:	f010 f9dc 	bl	21314 <z_spin_lock_set_owner>
	mgr->last_res = res;
   10f5c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10f5e:	463a      	mov	r2, r7
   10f60:	4620      	mov	r0, r4
   10f62:	2101      	movs	r1, #1
}
   10f64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   10f68:	f7ff bddc 	b.w	10b24 <process_event>
   10f6c:	000291b5 	.word	0x000291b5
   10f70:	00029207 	.word	0x00029207
   10f74:	000290f5 	.word	0x000290f5
   10f78:	0002921c 	.word	0x0002921c

00010f7c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f80:	4604      	mov	r4, r0
   10f82:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10f84:	f013 fc04 	bl	24790 <validate_args>

	if (rv < 0) {
   10f88:	1e05      	subs	r5, r0, #0
   10f8a:	db5e      	blt.n	1104a <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10f8c:	f104 0914 	add.w	r9, r4, #20
   10f90:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f94:	f3ef 8a11 	mrs	sl, BASEPRI
   10f98:	f383 8812 	msr	BASEPRI_MAX, r3
   10f9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10fa0:	4648      	mov	r0, r9
   10fa2:	f010 f999 	bl	212d8 <z_spin_lock_valid>
   10fa6:	b968      	cbnz	r0, 10fc4 <onoff_request+0x48>
   10fa8:	4a38      	ldr	r2, [pc, #224]	; (1108c <onoff_request+0x110>)
   10faa:	4939      	ldr	r1, [pc, #228]	; (11090 <onoff_request+0x114>)
   10fac:	4839      	ldr	r0, [pc, #228]	; (11094 <onoff_request+0x118>)
   10fae:	2381      	movs	r3, #129	; 0x81
   10fb0:	f013 fba2 	bl	246f8 <printk>
   10fb4:	4838      	ldr	r0, [pc, #224]	; (11098 <onoff_request+0x11c>)
   10fb6:	4649      	mov	r1, r9
   10fb8:	f013 fb9e 	bl	246f8 <printk>
   10fbc:	4833      	ldr	r0, [pc, #204]	; (1108c <onoff_request+0x110>)
   10fbe:	2181      	movs	r1, #129	; 0x81
   10fc0:	f013 fd8b 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   10fc4:	4648      	mov	r0, r9
   10fc6:	f010 f9a5 	bl	21314 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10fca:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10fcc:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   10fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10fd2:	428b      	cmp	r3, r1
   10fd4:	f002 0607 	and.w	r6, r2, #7
   10fd8:	d050      	beq.n	1107c <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10fda:	2e02      	cmp	r6, #2
   10fdc:	d124      	bne.n	11028 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10fde:	3301      	adds	r3, #1
   10fe0:	83e3      	strh	r3, [r4, #30]
	rv = state;
   10fe2:	4635      	mov	r5, r6
		notify = true;
   10fe4:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10fe8:	4648      	mov	r0, r9
   10fea:	f010 f983 	bl	212f4 <z_spin_unlock_valid>
   10fee:	b968      	cbnz	r0, 1100c <onoff_request+0x90>
   10ff0:	4a26      	ldr	r2, [pc, #152]	; (1108c <onoff_request+0x110>)
   10ff2:	492a      	ldr	r1, [pc, #168]	; (1109c <onoff_request+0x120>)
   10ff4:	4827      	ldr	r0, [pc, #156]	; (11094 <onoff_request+0x118>)
   10ff6:	23ac      	movs	r3, #172	; 0xac
   10ff8:	f013 fb7e 	bl	246f8 <printk>
   10ffc:	4828      	ldr	r0, [pc, #160]	; (110a0 <onoff_request+0x124>)
   10ffe:	4649      	mov	r1, r9
   11000:	f013 fb7a 	bl	246f8 <printk>
   11004:	4821      	ldr	r0, [pc, #132]	; (1108c <onoff_request+0x110>)
   11006:	21ac      	movs	r1, #172	; 0xac
   11008:	f013 fd67 	bl	24ada <assert_post_action>
	__asm__ volatile(
   1100c:	f38a 8811 	msr	BASEPRI, sl
   11010:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11014:	f1b8 0f00 	cmp.w	r8, #0
   11018:	d017      	beq.n	1104a <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1101a:	2300      	movs	r3, #0
   1101c:	4632      	mov	r2, r6
   1101e:	4639      	mov	r1, r7
   11020:	4620      	mov	r0, r4
   11022:	f013 fb9f 	bl	24764 <notify_one>
   11026:	e010      	b.n	1104a <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   11028:	0793      	lsls	r3, r2, #30
   1102a:	d001      	beq.n	11030 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   1102c:	2e06      	cmp	r6, #6
   1102e:	d10f      	bne.n	11050 <onoff_request+0xd4>
	parent->next = child;
   11030:	2300      	movs	r3, #0
   11032:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   11034:	6863      	ldr	r3, [r4, #4]
   11036:	b9f3      	cbnz	r3, 11076 <onoff_request+0xfa>
	list->head = node;
   11038:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1103c:	4635      	mov	r5, r6
   1103e:	b9fe      	cbnz	r6, 11080 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   11040:	4652      	mov	r2, sl
   11042:	2102      	movs	r1, #2
   11044:	4620      	mov	r0, r4
   11046:	f7ff fd6d 	bl	10b24 <process_event>
		}
	}

	return rv;
}
   1104a:	4628      	mov	r0, r5
   1104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   11050:	2e05      	cmp	r6, #5
   11052:	d018      	beq.n	11086 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11054:	2e01      	cmp	r6, #1
   11056:	d00b      	beq.n	11070 <onoff_request+0xf4>
   11058:	4912      	ldr	r1, [pc, #72]	; (110a4 <onoff_request+0x128>)
   1105a:	480e      	ldr	r0, [pc, #56]	; (11094 <onoff_request+0x118>)
   1105c:	4a12      	ldr	r2, [pc, #72]	; (110a8 <onoff_request+0x12c>)
   1105e:	f240 13c9 	movw	r3, #457	; 0x1c9
   11062:	f013 fb49 	bl	246f8 <printk>
   11066:	4810      	ldr	r0, [pc, #64]	; (110a8 <onoff_request+0x12c>)
   11068:	f240 11c9 	movw	r1, #457	; 0x1c9
   1106c:	f013 fd35 	bl	24ada <assert_post_action>
		rv = -EIO;
   11070:	f06f 0504 	mvn.w	r5, #4
   11074:	e004      	b.n	11080 <onoff_request+0x104>
	parent->next = child;
   11076:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11078:	6067      	str	r7, [r4, #4]
}
   1107a:	e7df      	b.n	1103c <onoff_request+0xc0>
		rv = -EAGAIN;
   1107c:	f06f 050a 	mvn.w	r5, #10
   11080:	f04f 0800 	mov.w	r8, #0
   11084:	e7b0      	b.n	10fe8 <onoff_request+0x6c>
		rv = -ENOTSUP;
   11086:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1108a:	e7f9      	b.n	11080 <onoff_request+0x104>
   1108c:	000291b5 	.word	0x000291b5
   11090:	00029207 	.word	0x00029207
   11094:	000290f5 	.word	0x000290f5
   11098:	0002921c 	.word	0x0002921c
   1109c:	000291db 	.word	0x000291db
   110a0:	000291f2 	.word	0x000291f2
   110a4:	0002919f 	.word	0x0002919f
   110a8:	00029112 	.word	0x00029112

000110ac <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   110ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   110ae:	460d      	mov	r5, r1
   110b0:	2900      	cmp	r1, #0
   110b2:	d039      	beq.n	11128 <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   110b4:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   110b6:	1f0c      	subs	r4, r1, #4
   110b8:	1ba4      	subs	r4, r4, r6
   110ba:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   110bc:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   110c0:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   110c2:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   110c4:	07db      	lsls	r3, r3, #31
   110c6:	d40d      	bmi.n	110e4 <sys_heap_free+0x38>
   110c8:	4a18      	ldr	r2, [pc, #96]	; (1112c <sys_heap_free+0x80>)
   110ca:	4919      	ldr	r1, [pc, #100]	; (11130 <sys_heap_free+0x84>)
   110cc:	4819      	ldr	r0, [pc, #100]	; (11134 <sys_heap_free+0x88>)
   110ce:	23a3      	movs	r3, #163	; 0xa3
   110d0:	f013 fb12 	bl	246f8 <printk>
   110d4:	4818      	ldr	r0, [pc, #96]	; (11138 <sys_heap_free+0x8c>)
   110d6:	4629      	mov	r1, r5
   110d8:	f013 fb0e 	bl	246f8 <printk>
   110dc:	4813      	ldr	r0, [pc, #76]	; (1112c <sys_heap_free+0x80>)
   110de:	21a3      	movs	r1, #163	; 0xa3
   110e0:	f013 fcfb 	bl	24ada <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   110e4:	4639      	mov	r1, r7
   110e6:	4630      	mov	r0, r6
   110e8:	f013 fb7e 	bl	247e8 <chunk_size>
   110ec:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
   110ee:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   110f2:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   110f4:	4287      	cmp	r7, r0
   110f6:	d00d      	beq.n	11114 <sys_heap_free+0x68>
   110f8:	4a0c      	ldr	r2, [pc, #48]	; (1112c <sys_heap_free+0x80>)
   110fa:	4910      	ldr	r1, [pc, #64]	; (1113c <sys_heap_free+0x90>)
   110fc:	480d      	ldr	r0, [pc, #52]	; (11134 <sys_heap_free+0x88>)
   110fe:	23ab      	movs	r3, #171	; 0xab
   11100:	f013 fafa 	bl	246f8 <printk>
   11104:	480e      	ldr	r0, [pc, #56]	; (11140 <sys_heap_free+0x94>)
   11106:	4629      	mov	r1, r5
   11108:	f013 faf6 	bl	246f8 <printk>
   1110c:	4807      	ldr	r0, [pc, #28]	; (1112c <sys_heap_free+0x80>)
   1110e:	21ab      	movs	r1, #171	; 0xab
   11110:	f013 fce3 	bl	24ada <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11114:	8863      	ldrh	r3, [r4, #2]
   11116:	f023 0301 	bic.w	r3, r3, #1
   1111a:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   1111c:	4639      	mov	r1, r7
   1111e:	4630      	mov	r0, r6
}
   11120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   11124:	f013 bc1d 	b.w	24962 <free_chunk>
}
   11128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1112a:	bf00      	nop
   1112c:	00029234 	.word	0x00029234
   11130:	00029255 	.word	0x00029255
   11134:	000290f5 	.word	0x000290f5
   11138:	00029266 	.word	0x00029266
   1113c:	0002929e 	.word	0x0002929e
   11140:	000292c4 	.word	0x000292c4

00011144 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11144:	424b      	negs	r3, r1
{
   11146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1114a:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1114e:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   11152:	6806      	ldr	r6, [r0, #0]
{
   11154:	4614      	mov	r4, r2
	if (align != rew) {
   11156:	d01f      	beq.n	11198 <sys_heap_aligned_alloc+0x54>
		return false;
   11158:	2f04      	cmp	r7, #4
   1115a:	463d      	mov	r5, r7
   1115c:	46b9      	mov	r9, r7
   1115e:	bf28      	it	cs
   11160:	2504      	movcs	r5, #4
		align -= rew;
   11162:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11164:	f107 3aff 	add.w	sl, r7, #4294967295
   11168:	ea1a 0f07 	tst.w	sl, r7
   1116c:	d00e      	beq.n	1118c <sys_heap_aligned_alloc+0x48>
   1116e:	4933      	ldr	r1, [pc, #204]	; (1123c <sys_heap_aligned_alloc+0xf8>)
   11170:	4a33      	ldr	r2, [pc, #204]	; (11240 <sys_heap_aligned_alloc+0xfc>)
   11172:	4834      	ldr	r0, [pc, #208]	; (11244 <sys_heap_aligned_alloc+0x100>)
   11174:	f240 1327 	movw	r3, #295	; 0x127
   11178:	f013 fabe 	bl	246f8 <printk>
   1117c:	4832      	ldr	r0, [pc, #200]	; (11248 <sys_heap_aligned_alloc+0x104>)
   1117e:	f013 fabb 	bl	246f8 <printk>
   11182:	482f      	ldr	r0, [pc, #188]	; (11240 <sys_heap_aligned_alloc+0xfc>)
   11184:	f240 1127 	movw	r1, #295	; 0x127
   11188:	f013 fca7 	bl	24ada <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1118c:	b97c      	cbnz	r4, 111ae <sys_heap_aligned_alloc+0x6a>
		return NULL;
   1118e:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   11192:	4648      	mov	r0, r9
   11194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   11198:	2904      	cmp	r1, #4
   1119a:	d804      	bhi.n	111a6 <sys_heap_aligned_alloc+0x62>
}
   1119c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   111a0:	4611      	mov	r1, r2
   111a2:	f013 bc0f 	b.w	249c4 <sys_heap_alloc>
		rew = 0;
   111a6:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   111aa:	2504      	movs	r5, #4
   111ac:	e7da      	b.n	11164 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   111ae:	68b3      	ldr	r3, [r6, #8]
   111b0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   111b4:	d9eb      	bls.n	1118e <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   111b6:	f104 010b 	add.w	r1, r4, #11
   111ba:	4439      	add	r1, r7
   111bc:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   111be:	08c9      	lsrs	r1, r1, #3
   111c0:	4630      	mov	r0, r6
   111c2:	f013 fb67 	bl	24894 <alloc_chunk>
	if (c0 == 0) {
   111c6:	4680      	mov	r8, r0
   111c8:	2800      	cmp	r0, #0
   111ca:	d0e0      	beq.n	1118e <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   111cc:	f109 0504 	add.w	r5, r9, #4
   111d0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   111d4:	4435      	add	r5, r6
   111d6:	4455      	add	r5, sl
   111d8:	427f      	negs	r7, r7
   111da:	402f      	ands	r7, r5
   111dc:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   111e0:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   111e2:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   111e6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   111e8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   111ea:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   111ee:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   111f0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   111f4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   111f8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   111fc:	d208      	bcs.n	11210 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
   111fe:	4601      	mov	r1, r0
   11200:	463a      	mov	r2, r7
   11202:	4630      	mov	r0, r6
   11204:	f013 fb93 	bl	2492e <split_chunks>
		free_list_add(h, c0);
   11208:	4641      	mov	r1, r8
   1120a:	4630      	mov	r0, r6
   1120c:	f013 faf1 	bl	247f2 <free_list_add>
	return c + chunk_size(h, c);
   11210:	4639      	mov	r1, r7
   11212:	4630      	mov	r0, r6
   11214:	f013 fae8 	bl	247e8 <chunk_size>
   11218:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1121a:	4284      	cmp	r4, r0
   1121c:	d207      	bcs.n	1122e <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1121e:	4630      	mov	r0, r6
   11220:	4622      	mov	r2, r4
   11222:	f013 fb84 	bl	2492e <split_chunks>
		free_list_add(h, c_end);
   11226:	4621      	mov	r1, r4
   11228:	4630      	mov	r0, r6
   1122a:	f013 fae2 	bl	247f2 <free_list_add>
	void *cmem = &buf[c];
   1122e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11232:	8873      	ldrh	r3, [r6, #2]
   11234:	f043 0301 	orr.w	r3, r3, #1
   11238:	8073      	strh	r3, [r6, #2]
   1123a:	e7aa      	b.n	11192 <sys_heap_aligned_alloc+0x4e>
   1123c:	00029300 	.word	0x00029300
   11240:	00029234 	.word	0x00029234
   11244:	000290f5 	.word	0x000290f5
   11248:	0002931b 	.word	0x0002931b

0001124c <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1124c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   11250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11254:	4606      	mov	r6, r0
   11256:	460d      	mov	r5, r1
   11258:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1125a:	d369      	bcc.n	11330 <sys_heap_init+0xe4>
   1125c:	493d      	ldr	r1, [pc, #244]	; (11354 <sys_heap_init+0x108>)
   1125e:	4a3e      	ldr	r2, [pc, #248]	; (11358 <sys_heap_init+0x10c>)
   11260:	483e      	ldr	r0, [pc, #248]	; (1135c <sys_heap_init+0x110>)
   11262:	f240 13a5 	movw	r3, #421	; 0x1a5
   11266:	f013 fa47 	bl	246f8 <printk>
   1126a:	483d      	ldr	r0, [pc, #244]	; (11360 <sys_heap_init+0x114>)
   1126c:	f013 fa44 	bl	246f8 <printk>
   11270:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11274:	4838      	ldr	r0, [pc, #224]	; (11358 <sys_heap_init+0x10c>)
   11276:	f013 fc30 	bl	24ada <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1127a:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1127c:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1127e:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11280:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11284:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11288:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1128a:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1128c:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11290:	d80e      	bhi.n	112b0 <sys_heap_init+0x64>
   11292:	4934      	ldr	r1, [pc, #208]	; (11364 <sys_heap_init+0x118>)
   11294:	4a30      	ldr	r2, [pc, #192]	; (11358 <sys_heap_init+0x10c>)
   11296:	4831      	ldr	r0, [pc, #196]	; (1135c <sys_heap_init+0x110>)
   11298:	f240 13b5 	movw	r3, #437	; 0x1b5
   1129c:	f013 fa2c 	bl	246f8 <printk>
   112a0:	4831      	ldr	r0, [pc, #196]	; (11368 <sys_heap_init+0x11c>)
   112a2:	f013 fa29 	bl	246f8 <printk>
   112a6:	482c      	ldr	r0, [pc, #176]	; (11358 <sys_heap_init+0x10c>)
   112a8:	f240 11b5 	movw	r1, #437	; 0x1b5
   112ac:	f013 fc15 	bl	24ada <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   112b0:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   112b4:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   112b8:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   112bc:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   112be:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
   112c2:	2300      	movs	r3, #0
   112c4:	08f6      	lsrs	r6, r6, #3
   112c6:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   112c8:	1c73      	adds	r3, r6, #1
   112ca:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   112cc:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   112ce:	d90e      	bls.n	112ee <sys_heap_init+0xa2>
   112d0:	4926      	ldr	r1, [pc, #152]	; (1136c <sys_heap_init+0x120>)
   112d2:	4a21      	ldr	r2, [pc, #132]	; (11358 <sys_heap_init+0x10c>)
   112d4:	4821      	ldr	r0, [pc, #132]	; (1135c <sys_heap_init+0x110>)
   112d6:	f240 13c5 	movw	r3, #453	; 0x1c5
   112da:	f013 fa0d 	bl	246f8 <printk>
   112de:	4822      	ldr	r0, [pc, #136]	; (11368 <sys_heap_init+0x11c>)
   112e0:	f013 fa0a 	bl	246f8 <printk>
   112e4:	481c      	ldr	r0, [pc, #112]	; (11358 <sys_heap_init+0x10c>)
   112e6:	f240 11c5 	movw	r1, #453	; 0x1c5
   112ea:	f013 fbf6 	bl	24ada <assert_post_action>
   112ee:	f104 0210 	add.w	r2, r4, #16
   112f2:	44a0      	add	r8, r4
   112f4:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   112f6:	4590      	cmp	r8, r2
   112f8:	d129      	bne.n	1134e <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112fa:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   112fc:	f042 0201 	orr.w	r2, r2, #1
   11300:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
   11302:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11306:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11308:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   1130a:	8023      	strh	r3, [r4, #0]
   1130c:	8048      	strh	r0, [r1, #2]
   1130e:	1961      	adds	r1, r4, r5
   11310:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   11314:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   11318:	804b      	strh	r3, [r1, #2]
   1131a:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1131c:	887b      	ldrh	r3, [r7, #2]
   1131e:	f043 0301 	orr.w	r3, r3, #1
   11322:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11324:	4631      	mov	r1, r6
   11326:	4620      	mov	r0, r4
}
   11328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   1132c:	f013 ba61 	b.w	247f2 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11330:	2a04      	cmp	r2, #4
   11332:	d8a2      	bhi.n	1127a <sys_heap_init+0x2e>
   11334:	490e      	ldr	r1, [pc, #56]	; (11370 <sys_heap_init+0x124>)
   11336:	4a08      	ldr	r2, [pc, #32]	; (11358 <sys_heap_init+0x10c>)
   11338:	4808      	ldr	r0, [pc, #32]	; (1135c <sys_heap_init+0x110>)
   1133a:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   1133e:	f013 f9db 	bl	246f8 <printk>
   11342:	4809      	ldr	r0, [pc, #36]	; (11368 <sys_heap_init+0x11c>)
   11344:	f013 f9d8 	bl	246f8 <printk>
   11348:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   1134c:	e792      	b.n	11274 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
   1134e:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   11352:	e7d0      	b.n	112f6 <sys_heap_init+0xaa>
   11354:	00029338 	.word	0x00029338
   11358:	00029234 	.word	0x00029234
   1135c:	000290f5 	.word	0x000290f5
   11360:	0002934e 	.word	0x0002934e
   11364:	0002939f 	.word	0x0002939f
   11368:	00029386 	.word	0x00029386
   1136c:	000293c8 	.word	0x000293c8
   11370:	00029365 	.word	0x00029365

00011374 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11378:	b091      	sub	sp, #68	; 0x44
   1137a:	468b      	mov	fp, r1
   1137c:	9002      	str	r0, [sp, #8]
   1137e:	4692      	mov	sl, r2
   11380:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11382:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11384:	f89a 0000 	ldrb.w	r0, [sl]
   11388:	b908      	cbnz	r0, 1138e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1138a:	4628      	mov	r0, r5
   1138c:	e35e      	b.n	11a4c <cbvprintf+0x6d8>
		if (*fp != '%') {
   1138e:	2825      	cmp	r0, #37	; 0x25
   11390:	f10a 0701 	add.w	r7, sl, #1
   11394:	d007      	beq.n	113a6 <cbvprintf+0x32>
			OUTC('%');
   11396:	9b02      	ldr	r3, [sp, #8]
   11398:	4659      	mov	r1, fp
   1139a:	4798      	blx	r3
   1139c:	2800      	cmp	r0, #0
   1139e:	f2c0 8355 	blt.w	11a4c <cbvprintf+0x6d8>
   113a2:	3501      	adds	r5, #1
			break;
   113a4:	e210      	b.n	117c8 <cbvprintf+0x454>
		} state = {
   113a6:	2218      	movs	r2, #24
   113a8:	2100      	movs	r1, #0
   113aa:	a80a      	add	r0, sp, #40	; 0x28
   113ac:	f014 fae5 	bl	2597a <memset>
	if (*sp == '%') {
   113b0:	f89a 3001 	ldrb.w	r3, [sl, #1]
   113b4:	2b25      	cmp	r3, #37	; 0x25
   113b6:	d078      	beq.n	114aa <cbvprintf+0x136>
   113b8:	2200      	movs	r2, #0
   113ba:	4694      	mov	ip, r2
   113bc:	4616      	mov	r6, r2
   113be:	4696      	mov	lr, r2
   113c0:	4610      	mov	r0, r2
   113c2:	4639      	mov	r1, r7
		switch (*sp) {
   113c4:	f817 3b01 	ldrb.w	r3, [r7], #1
   113c8:	2b2b      	cmp	r3, #43	; 0x2b
   113ca:	f000 809d 	beq.w	11508 <cbvprintf+0x194>
   113ce:	f200 8094 	bhi.w	114fa <cbvprintf+0x186>
   113d2:	2b20      	cmp	r3, #32
   113d4:	f000 809b 	beq.w	1150e <cbvprintf+0x19a>
   113d8:	2b23      	cmp	r3, #35	; 0x23
   113da:	f000 809a 	beq.w	11512 <cbvprintf+0x19e>
   113de:	b128      	cbz	r0, 113ec <cbvprintf+0x78>
   113e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   113e4:	f040 0004 	orr.w	r0, r0, #4
   113e8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   113ec:	f1be 0f00 	cmp.w	lr, #0
   113f0:	d005      	beq.n	113fe <cbvprintf+0x8a>
   113f2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   113f6:	f040 0008 	orr.w	r0, r0, #8
   113fa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   113fe:	b12e      	cbz	r6, 1140c <cbvprintf+0x98>
   11400:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11404:	f040 0010 	orr.w	r0, r0, #16
   11408:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1140c:	f1bc 0f00 	cmp.w	ip, #0
   11410:	d005      	beq.n	1141e <cbvprintf+0xaa>
   11412:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11416:	f040 0020 	orr.w	r0, r0, #32
   1141a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1141e:	b12a      	cbz	r2, 1142c <cbvprintf+0xb8>
   11420:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11428:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   1142c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11430:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11434:	2844      	cmp	r0, #68	; 0x44
   11436:	d103      	bne.n	11440 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11438:	f36f 1286 	bfc	r2, #6, #1
   1143c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11440:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11444:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1144a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1144e:	d17b      	bne.n	11548 <cbvprintf+0x1d4>
		conv->width_star = true;
   11450:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11454:	f042 0201 	orr.w	r2, r2, #1
   11458:	1c4b      	adds	r3, r1, #1
   1145a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1145e:	781a      	ldrb	r2, [r3, #0]
   11460:	2a2e      	cmp	r2, #46	; 0x2e
   11462:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11466:	bf0c      	ite	eq
   11468:	2101      	moveq	r1, #1
   1146a:	2100      	movne	r1, #0
   1146c:	f361 0241 	bfi	r2, r1, #1, #1
   11470:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11474:	d174      	bne.n	11560 <cbvprintf+0x1ec>
	if (*sp == '*') {
   11476:	785a      	ldrb	r2, [r3, #1]
   11478:	2a2a      	cmp	r2, #42	; 0x2a
   1147a:	d06a      	beq.n	11552 <cbvprintf+0x1de>
   1147c:	3301      	adds	r3, #1
	size_t val = 0;
   1147e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11480:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11482:	4618      	mov	r0, r3
   11484:	f810 2b01 	ldrb.w	r2, [r0], #1
   11488:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1148c:	2f09      	cmp	r7, #9
   1148e:	f240 808e 	bls.w	115ae <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11492:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11496:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11498:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1149c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   114a0:	f361 0241 	bfi	r2, r1, #1, #1
   114a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   114a8:	e05a      	b.n	11560 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   114aa:	f10a 0702 	add.w	r7, sl, #2
   114ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   114b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   114b6:	07d9      	lsls	r1, r3, #31
   114b8:	f140 8149 	bpl.w	1174e <cbvprintf+0x3da>
			width = va_arg(ap, int);
   114bc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   114c0:	f1b9 0f00 	cmp.w	r9, #0
   114c4:	da07      	bge.n	114d6 <cbvprintf+0x162>
				conv->flag_dash = true;
   114c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   114ca:	f042 0204 	orr.w	r2, r2, #4
   114ce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   114d2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   114d6:	075a      	lsls	r2, r3, #29
   114d8:	f140 8142 	bpl.w	11760 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   114dc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   114e0:	f1b8 0f00 	cmp.w	r8, #0
   114e4:	f280 8141 	bge.w	1176a <cbvprintf+0x3f6>
				conv->prec_present = false;
   114e8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   114ec:	f36f 0341 	bfc	r3, #1, #1
   114f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   114f4:	f04f 38ff 	mov.w	r8, #4294967295
   114f8:	e137      	b.n	1176a <cbvprintf+0x3f6>
		switch (*sp) {
   114fa:	2b2d      	cmp	r3, #45	; 0x2d
   114fc:	d00c      	beq.n	11518 <cbvprintf+0x1a4>
   114fe:	2b30      	cmp	r3, #48	; 0x30
   11500:	f47f af6d 	bne.w	113de <cbvprintf+0x6a>
			conv->flag_zero = true;
   11504:	2201      	movs	r2, #1
	} while (loop);
   11506:	e75c      	b.n	113c2 <cbvprintf+0x4e>
			conv->flag_plus = true;
   11508:	f04f 0e01 	mov.w	lr, #1
   1150c:	e759      	b.n	113c2 <cbvprintf+0x4e>
			conv->flag_space = true;
   1150e:	2601      	movs	r6, #1
   11510:	e757      	b.n	113c2 <cbvprintf+0x4e>
			conv->flag_hash = true;
   11512:	f04f 0c01 	mov.w	ip, #1
   11516:	e754      	b.n	113c2 <cbvprintf+0x4e>
		switch (*sp) {
   11518:	2001      	movs	r0, #1
   1151a:	e752      	b.n	113c2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   1151c:	fb0c 0202 	mla	r2, ip, r2, r0
   11520:	3a30      	subs	r2, #48	; 0x30
   11522:	4633      	mov	r3, r6
   11524:	461e      	mov	r6, r3
   11526:	f816 0b01 	ldrb.w	r0, [r6], #1
   1152a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1152e:	2f09      	cmp	r7, #9
   11530:	d9f4      	bls.n	1151c <cbvprintf+0x1a8>
	if (sp != wp) {
   11532:	4299      	cmp	r1, r3
   11534:	d093      	beq.n	1145e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11536:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1153a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1153c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1153e:	f362 0141 	bfi	r1, r2, #1, #1
   11542:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11546:	e78a      	b.n	1145e <cbvprintf+0xea>
   11548:	460b      	mov	r3, r1
	size_t val = 0;
   1154a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1154c:	f04f 0c0a 	mov.w	ip, #10
   11550:	e7e8      	b.n	11524 <cbvprintf+0x1b0>
		conv->prec_star = true;
   11552:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11556:	f042 0204 	orr.w	r2, r2, #4
   1155a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1155e:	3302      	adds	r3, #2
	switch (*sp) {
   11560:	461f      	mov	r7, r3
   11562:	f817 2b01 	ldrb.w	r2, [r7], #1
   11566:	2a6c      	cmp	r2, #108	; 0x6c
   11568:	d041      	beq.n	115ee <cbvprintf+0x27a>
   1156a:	d825      	bhi.n	115b8 <cbvprintf+0x244>
   1156c:	2a68      	cmp	r2, #104	; 0x68
   1156e:	d02b      	beq.n	115c8 <cbvprintf+0x254>
   11570:	2a6a      	cmp	r2, #106	; 0x6a
   11572:	d046      	beq.n	11602 <cbvprintf+0x28e>
   11574:	2a4c      	cmp	r2, #76	; 0x4c
   11576:	d04c      	beq.n	11612 <cbvprintf+0x29e>
   11578:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1157a:	f817 2b01 	ldrb.w	r2, [r7], #1
   1157e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11582:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   11586:	2a78      	cmp	r2, #120	; 0x78
   11588:	f200 80d9 	bhi.w	1173e <cbvprintf+0x3ca>
   1158c:	2a57      	cmp	r2, #87	; 0x57
   1158e:	d84d      	bhi.n	1162c <cbvprintf+0x2b8>
   11590:	2a41      	cmp	r2, #65	; 0x41
   11592:	d003      	beq.n	1159c <cbvprintf+0x228>
   11594:	3a45      	subs	r2, #69	; 0x45
   11596:	2a02      	cmp	r2, #2
   11598:	f200 80d1 	bhi.w	1173e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   1159c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   115a0:	2204      	movs	r2, #4
   115a2:	f362 0302 	bfi	r3, r2, #0, #3
   115a6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   115aa:	2301      	movs	r3, #1
			break;
   115ac:	e09e      	b.n	116ec <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   115ae:	fb06 2101 	mla	r1, r6, r1, r2
   115b2:	3930      	subs	r1, #48	; 0x30
   115b4:	4603      	mov	r3, r0
   115b6:	e764      	b.n	11482 <cbvprintf+0x10e>
	switch (*sp) {
   115b8:	2a74      	cmp	r2, #116	; 0x74
   115ba:	d026      	beq.n	1160a <cbvprintf+0x296>
   115bc:	2a7a      	cmp	r2, #122	; 0x7a
   115be:	d1db      	bne.n	11578 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   115c0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   115c4:	2206      	movs	r2, #6
   115c6:	e00d      	b.n	115e4 <cbvprintf+0x270>
		if (*++sp == 'h') {
   115c8:	785a      	ldrb	r2, [r3, #1]
   115ca:	2a68      	cmp	r2, #104	; 0x68
   115cc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   115d0:	d106      	bne.n	115e0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   115d2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   115d4:	f361 02c6 	bfi	r2, r1, #3, #4
   115d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   115dc:	1c9f      	adds	r7, r3, #2
   115de:	e7cc      	b.n	1157a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   115e0:	4613      	mov	r3, r2
   115e2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   115e4:	f362 03c6 	bfi	r3, r2, #3, #4
   115e8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   115ec:	e7c5      	b.n	1157a <cbvprintf+0x206>
		if (*++sp == 'l') {
   115ee:	785a      	ldrb	r2, [r3, #1]
   115f0:	2a6c      	cmp	r2, #108	; 0x6c
   115f2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   115f6:	d101      	bne.n	115fc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   115f8:	2104      	movs	r1, #4
   115fa:	e7eb      	b.n	115d4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   115fc:	4613      	mov	r3, r2
   115fe:	2203      	movs	r2, #3
   11600:	e7f0      	b.n	115e4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   11602:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11606:	2205      	movs	r2, #5
   11608:	e7ec      	b.n	115e4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   1160a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1160e:	2207      	movs	r2, #7
   11610:	e7e8      	b.n	115e4 <cbvprintf+0x270>
		conv->unsupported = true;
   11612:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   11616:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1161a:	f023 0302 	bic.w	r3, r3, #2
   1161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11622:	f043 0302 	orr.w	r3, r3, #2
   11626:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1162a:	e7a6      	b.n	1157a <cbvprintf+0x206>
   1162c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11630:	2920      	cmp	r1, #32
   11632:	f200 8084 	bhi.w	1173e <cbvprintf+0x3ca>
   11636:	a001      	add	r0, pc, #4	; (adr r0, 1163c <cbvprintf+0x2c8>)
   11638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1163c:	00011701 	.word	0x00011701
   11640:	0001173f 	.word	0x0001173f
   11644:	0001173f 	.word	0x0001173f
   11648:	0001173f 	.word	0x0001173f
   1164c:	0001173f 	.word	0x0001173f
   11650:	0001173f 	.word	0x0001173f
   11654:	0001173f 	.word	0x0001173f
   11658:	0001173f 	.word	0x0001173f
   1165c:	0001173f 	.word	0x0001173f
   11660:	0001159d 	.word	0x0001159d
   11664:	0001173f 	.word	0x0001173f
   11668:	00011701 	.word	0x00011701
   1166c:	000116c1 	.word	0x000116c1
   11670:	0001159d 	.word	0x0001159d
   11674:	0001159d 	.word	0x0001159d
   11678:	0001159d 	.word	0x0001159d
   1167c:	0001173f 	.word	0x0001173f
   11680:	000116c1 	.word	0x000116c1
   11684:	0001173f 	.word	0x0001173f
   11688:	0001173f 	.word	0x0001173f
   1168c:	0001173f 	.word	0x0001173f
   11690:	0001173f 	.word	0x0001173f
   11694:	00011709 	.word	0x00011709
   11698:	00011701 	.word	0x00011701
   1169c:	00011725 	.word	0x00011725
   116a0:	0001173f 	.word	0x0001173f
   116a4:	0001173f 	.word	0x0001173f
   116a8:	00011725 	.word	0x00011725
   116ac:	0001173f 	.word	0x0001173f
   116b0:	00011701 	.word	0x00011701
   116b4:	0001173f 	.word	0x0001173f
   116b8:	0001173f 	.word	0x0001173f
   116bc:	00011701 	.word	0x00011701
		conv->specifier_cat = SPECIFIER_SINT;
   116c0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   116c4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   116c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   116ca:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   116ce:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   116d0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   116d4:	bf02      	ittt	eq
   116d6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   116da:	f041 0101 	orreq.w	r1, r1, #1
   116de:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   116e2:	2a63      	cmp	r2, #99	; 0x63
   116e4:	d131      	bne.n	1174a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   116e6:	3b00      	subs	r3, #0
   116e8:	bf18      	it	ne
   116ea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   116ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   116f0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   116f4:	430b      	orrs	r3, r1
   116f6:	f363 0241 	bfi	r2, r3, #1, #1
   116fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   116fe:	e6d8      	b.n	114b2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11700:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11704:	2002      	movs	r0, #2
   11706:	e7de      	b.n	116c6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   11708:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1170c:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11710:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11714:	2103      	movs	r1, #3
   11716:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1171a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1171c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11720:	4143      	adcs	r3, r0
   11722:	e7e3      	b.n	116ec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   11724:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11728:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1172a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1172e:	f361 0202 	bfi	r2, r1, #0, #3
   11732:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   11736:	bf14      	ite	ne
   11738:	2301      	movne	r3, #1
   1173a:	2300      	moveq	r3, #0
   1173c:	e7d6      	b.n	116ec <cbvprintf+0x378>
		conv->invalid = true;
   1173e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11742:	f043 0301 	orr.w	r3, r3, #1
   11746:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1174a:	2300      	movs	r3, #0
   1174c:	e7ce      	b.n	116ec <cbvprintf+0x378>
		} else if (conv->width_present) {
   1174e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   11752:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11754:	bfb4      	ite	lt
   11756:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1175a:	f04f 39ff 	movge.w	r9, #4294967295
   1175e:	e6ba      	b.n	114d6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   11760:	079b      	lsls	r3, r3, #30
   11762:	f57f aec7 	bpl.w	114f4 <cbvprintf+0x180>
			precision = conv->prec_value;
   11766:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1176a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   1176e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11770:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   11774:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   11778:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1177c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1177e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11782:	d136      	bne.n	117f2 <cbvprintf+0x47e>
			switch (length_mod) {
   11784:	1ed3      	subs	r3, r2, #3
   11786:	2b04      	cmp	r3, #4
   11788:	d820      	bhi.n	117cc <cbvprintf+0x458>
   1178a:	e8df f003 	tbb	[pc, r3]
   1178e:	0703      	.short	0x0703
   11790:	1f07      	.short	0x1f07
   11792:	1f          	.byte	0x1f
   11793:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11794:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   11798:	17c1      	asrs	r1, r0, #31
   1179a:	e004      	b.n	117a6 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   1179c:	3407      	adds	r4, #7
   1179e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   117a2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   117a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   117aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   117ae:	f013 0603 	ands.w	r6, r3, #3
   117b2:	d054      	beq.n	1185e <cbvprintf+0x4ea>
			OUTS(sp, fp);
   117b4:	9802      	ldr	r0, [sp, #8]
   117b6:	463b      	mov	r3, r7
   117b8:	4652      	mov	r2, sl
   117ba:	4659      	mov	r1, fp
   117bc:	f013 f977 	bl	24aae <outs>
   117c0:	2800      	cmp	r0, #0
   117c2:	f2c0 8143 	blt.w	11a4c <cbvprintf+0x6d8>
   117c6:	4405      	add	r5, r0
			continue;
   117c8:	46ba      	mov	sl, r7
   117ca:	e5db      	b.n	11384 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   117cc:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   117d0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   117d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
   117d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   117da:	d105      	bne.n	117e8 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   117dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   117e0:	930a      	str	r3, [sp, #40]	; 0x28
   117e2:	2300      	movs	r3, #0
   117e4:	930b      	str	r3, [sp, #44]	; 0x2c
   117e6:	e7e0      	b.n	117aa <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   117e8:	2a02      	cmp	r2, #2
   117ea:	d1de      	bne.n	117aa <cbvprintf+0x436>
				value->sint = (short)value->sint;
   117ec:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   117f0:	e7d2      	b.n	11798 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   117f2:	2b02      	cmp	r3, #2
   117f4:	d123      	bne.n	1183e <cbvprintf+0x4ca>
			switch (length_mod) {
   117f6:	1ed3      	subs	r3, r2, #3
   117f8:	2b04      	cmp	r3, #4
   117fa:	d813      	bhi.n	11824 <cbvprintf+0x4b0>
   117fc:	e8df f003 	tbb	[pc, r3]
   11800:	120a0a03 	.word	0x120a0a03
   11804:	12          	.byte	0x12
   11805:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   11806:	6820      	ldr	r0, [r4, #0]
   11808:	900a      	str	r0, [sp, #40]	; 0x28
   1180a:	2100      	movs	r1, #0
   1180c:	1d23      	adds	r3, r4, #4
   1180e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11810:	461c      	mov	r4, r3
   11812:	e7ca      	b.n	117aa <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   11814:	3407      	adds	r4, #7
   11816:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1181a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1181e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   11822:	e7f5      	b.n	11810 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   11824:	f854 3b04 	ldr.w	r3, [r4], #4
   11828:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1182a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   1182c:	f04f 0300 	mov.w	r3, #0
   11830:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   11832:	d0d3      	beq.n	117dc <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   11834:	2a02      	cmp	r2, #2
   11836:	d1b8      	bne.n	117aa <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   11838:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1183c:	e7d0      	b.n	117e0 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1183e:	2b04      	cmp	r3, #4
   11840:	d107      	bne.n	11852 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   11842:	3407      	adds	r4, #7
   11844:	f024 0407 	bic.w	r4, r4, #7
   11848:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1184c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11850:	e7ab      	b.n	117aa <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11852:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11854:	bf04      	itt	eq
   11856:	f854 3b04 	ldreq.w	r3, [r4], #4
   1185a:	930a      	streq	r3, [sp, #40]	; 0x28
   1185c:	e7a5      	b.n	117aa <cbvprintf+0x436>
		switch (conv->specifier) {
   1185e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11862:	2878      	cmp	r0, #120	; 0x78
   11864:	d8b0      	bhi.n	117c8 <cbvprintf+0x454>
   11866:	2862      	cmp	r0, #98	; 0x62
   11868:	d822      	bhi.n	118b0 <cbvprintf+0x53c>
   1186a:	2825      	cmp	r0, #37	; 0x25
   1186c:	f43f ad93 	beq.w	11396 <cbvprintf+0x22>
   11870:	2858      	cmp	r0, #88	; 0x58
   11872:	d1a9      	bne.n	117c8 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11874:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11878:	9300      	str	r3, [sp, #0]
   1187a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1187e:	ab04      	add	r3, sp, #16
   11880:	aa0c      	add	r2, sp, #48	; 0x30
   11882:	f013 f8c9 	bl	24a18 <encode_uint>
   11886:	4682      	mov	sl, r0
			if (precision >= 0) {
   11888:	f1b8 0f00 	cmp.w	r8, #0
   1188c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   11890:	db0c      	blt.n	118ac <cbvprintf+0x538>
				conv->flag_zero = false;
   11892:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   11896:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1189a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1189e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   118a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   118a4:	d902      	bls.n	118ac <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   118a6:	eba8 0303 	sub.w	r3, r8, r3
   118aa:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   118ac:	4680      	mov	r8, r0
   118ae:	e03d      	b.n	1192c <cbvprintf+0x5b8>
   118b0:	3863      	subs	r0, #99	; 0x63
   118b2:	2815      	cmp	r0, #21
   118b4:	d888      	bhi.n	117c8 <cbvprintf+0x454>
   118b6:	a101      	add	r1, pc, #4	; (adr r1, 118bc <cbvprintf+0x548>)
   118b8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   118bc:	0001193d 	.word	0x0001193d
   118c0:	000119a1 	.word	0x000119a1
   118c4:	000117c9 	.word	0x000117c9
   118c8:	000117c9 	.word	0x000117c9
   118cc:	000117c9 	.word	0x000117c9
   118d0:	000117c9 	.word	0x000117c9
   118d4:	000119a1 	.word	0x000119a1
   118d8:	000117c9 	.word	0x000117c9
   118dc:	000117c9 	.word	0x000117c9
   118e0:	000117c9 	.word	0x000117c9
   118e4:	000117c9 	.word	0x000117c9
   118e8:	000119ff 	.word	0x000119ff
   118ec:	000119cd 	.word	0x000119cd
   118f0:	000119d1 	.word	0x000119d1
   118f4:	000117c9 	.word	0x000117c9
   118f8:	000117c9 	.word	0x000117c9
   118fc:	00011915 	.word	0x00011915
   11900:	000117c9 	.word	0x000117c9
   11904:	000119cd 	.word	0x000119cd
   11908:	000117c9 	.word	0x000117c9
   1190c:	000117c9 	.word	0x000117c9
   11910:	000119cd 	.word	0x000119cd
			if (precision >= 0) {
   11914:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   11918:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   1191c:	db0a      	blt.n	11934 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   1191e:	4641      	mov	r1, r8
   11920:	4650      	mov	r0, sl
   11922:	f013 ffeb 	bl	258fc <strnlen>
			bpe = bps + len;
   11926:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1192a:	2600      	movs	r6, #0
		if (bps == NULL) {
   1192c:	f1ba 0f00 	cmp.w	sl, #0
   11930:	d10c      	bne.n	1194c <cbvprintf+0x5d8>
   11932:	e749      	b.n	117c8 <cbvprintf+0x454>
				len = strlen(bps);
   11934:	4650      	mov	r0, sl
   11936:	f013 ffda 	bl	258ee <strlen>
   1193a:	e7f4      	b.n	11926 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1193c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1193e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   11942:	2600      	movs	r6, #0
			bpe = buf + 1;
   11944:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   11948:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   1194c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11950:	b106      	cbz	r6, 11954 <cbvprintf+0x5e0>
			nj_len += 1U;
   11952:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11954:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11958:	06d0      	lsls	r0, r2, #27
   1195a:	d56b      	bpl.n	11a34 <cbvprintf+0x6c0>
			nj_len += 2U;
   1195c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1195e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11960:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   11962:	bf48      	it	mi
   11964:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   11966:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11968:	bf48      	it	mi
   1196a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1196c:	f1b9 0f00 	cmp.w	r9, #0
   11970:	dd79      	ble.n	11a66 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   11972:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   11976:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1197a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1197e:	9303      	str	r3, [sp, #12]
   11980:	0753      	lsls	r3, r2, #29
   11982:	d470      	bmi.n	11a66 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   11984:	0650      	lsls	r0, r2, #25
   11986:	d564      	bpl.n	11a52 <cbvprintf+0x6de>
					if (sign != 0) {
   11988:	b146      	cbz	r6, 1199c <cbvprintf+0x628>
						OUTC(sign);
   1198a:	9b02      	ldr	r3, [sp, #8]
   1198c:	4659      	mov	r1, fp
   1198e:	4630      	mov	r0, r6
   11990:	4798      	blx	r3
   11992:	2800      	cmp	r0, #0
   11994:	db5a      	blt.n	11a4c <cbvprintf+0x6d8>
						sign = 0;
   11996:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11998:	3501      	adds	r5, #1
						sign = 0;
   1199a:	461e      	mov	r6, r3
					pad = '0';
   1199c:	2330      	movs	r3, #48	; 0x30
   1199e:	e059      	b.n	11a54 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   119a0:	071e      	lsls	r6, r3, #28
   119a2:	d411      	bmi.n	119c8 <cbvprintf+0x654>
				sign = ' ';
   119a4:	f013 0610 	ands.w	r6, r3, #16
   119a8:	bf18      	it	ne
   119aa:	2620      	movne	r6, #32
			sint = value->sint;
   119ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   119b0:	2a00      	cmp	r2, #0
   119b2:	f173 0100 	sbcs.w	r1, r3, #0
   119b6:	f6bf af5d 	bge.w	11874 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   119ba:	4252      	negs	r2, r2
   119bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   119c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   119c4:	262d      	movs	r6, #45	; 0x2d
   119c6:	e755      	b.n	11874 <cbvprintf+0x500>
				sign = '+';
   119c8:	262b      	movs	r6, #43	; 0x2b
   119ca:	e7ef      	b.n	119ac <cbvprintf+0x638>
		switch (conv->specifier) {
   119cc:	2600      	movs	r6, #0
   119ce:	e751      	b.n	11874 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   119d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   119d2:	b348      	cbz	r0, 11a28 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   119d4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   119d8:	9300      	str	r3, [sp, #0]
   119da:	aa0c      	add	r2, sp, #48	; 0x30
   119dc:	ab04      	add	r3, sp, #16
   119de:	2100      	movs	r1, #0
   119e0:	f013 f81a 	bl	24a18 <encode_uint>
				conv->altform_0c = true;
   119e4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   119e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   119ec:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   119f0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   119f4:	4682      	mov	sl, r0
				conv->altform_0c = true;
   119f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   119fa:	2600      	movs	r6, #0
				goto prec_int_pad0;
   119fc:	e744      	b.n	11888 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   119fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   11a00:	2a07      	cmp	r2, #7
   11a02:	f63f aee1 	bhi.w	117c8 <cbvprintf+0x454>
   11a06:	e8df f002 	tbb	[pc, r2]
   11a0a:	040d      	.short	0x040d
   11a0c:	08080d06 	.word	0x08080d06
   11a10:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   11a12:	701d      	strb	r5, [r3, #0]
		break;
   11a14:	e6d8      	b.n	117c8 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   11a16:	801d      	strh	r5, [r3, #0]
		break;
   11a18:	e6d6      	b.n	117c8 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   11a1a:	4628      	mov	r0, r5
   11a1c:	17e9      	asrs	r1, r5, #31
   11a1e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   11a22:	e6d1      	b.n	117c8 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11a24:	601d      	str	r5, [r3, #0]
		break;
   11a26:	e6cf      	b.n	117c8 <cbvprintf+0x454>
			bpe = bps + 5;
   11a28:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11af0 <cbvprintf+0x77c>
   11a2c:	4606      	mov	r6, r0
			bps = "(nil)";
   11a2e:	f1a8 0a05 	sub.w	sl, r8, #5
   11a32:	e78b      	b.n	1194c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   11a34:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   11a36:	bf48      	it	mi
   11a38:	3301      	addmi	r3, #1
   11a3a:	e790      	b.n	1195e <cbvprintf+0x5ea>
					OUTC(pad);
   11a3c:	4618      	mov	r0, r3
   11a3e:	9303      	str	r3, [sp, #12]
   11a40:	4659      	mov	r1, fp
   11a42:	9b02      	ldr	r3, [sp, #8]
   11a44:	4798      	blx	r3
   11a46:	2800      	cmp	r0, #0
   11a48:	9b03      	ldr	r3, [sp, #12]
   11a4a:	da04      	bge.n	11a56 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   11a4c:	b011      	add	sp, #68	; 0x44
   11a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11a52:	2320      	movs	r3, #32
   11a54:	444d      	add	r5, r9
   11a56:	464a      	mov	r2, r9
				while (width-- > 0) {
   11a58:	2a00      	cmp	r2, #0
   11a5a:	eba5 0109 	sub.w	r1, r5, r9
   11a5e:	f109 39ff 	add.w	r9, r9, #4294967295
   11a62:	dceb      	bgt.n	11a3c <cbvprintf+0x6c8>
   11a64:	460d      	mov	r5, r1
		if (sign != 0) {
   11a66:	b136      	cbz	r6, 11a76 <cbvprintf+0x702>
			OUTC(sign);
   11a68:	9b02      	ldr	r3, [sp, #8]
   11a6a:	4659      	mov	r1, fp
   11a6c:	4630      	mov	r0, r6
   11a6e:	4798      	blx	r3
   11a70:	2800      	cmp	r0, #0
   11a72:	dbeb      	blt.n	11a4c <cbvprintf+0x6d8>
   11a74:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11a76:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11a7a:	06d9      	lsls	r1, r3, #27
   11a7c:	d401      	bmi.n	11a82 <cbvprintf+0x70e>
   11a7e:	071a      	lsls	r2, r3, #28
   11a80:	d506      	bpl.n	11a90 <cbvprintf+0x71c>
				OUTC('0');
   11a82:	9b02      	ldr	r3, [sp, #8]
   11a84:	4659      	mov	r1, fp
   11a86:	2030      	movs	r0, #48	; 0x30
   11a88:	4798      	blx	r3
   11a8a:	2800      	cmp	r0, #0
   11a8c:	dbde      	blt.n	11a4c <cbvprintf+0x6d8>
   11a8e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11a90:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11a94:	06db      	lsls	r3, r3, #27
   11a96:	d507      	bpl.n	11aa8 <cbvprintf+0x734>
				OUTC(conv->specifier);
   11a98:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11a9c:	9b02      	ldr	r3, [sp, #8]
   11a9e:	4659      	mov	r1, fp
   11aa0:	4798      	blx	r3
   11aa2:	2800      	cmp	r0, #0
   11aa4:	dbd2      	blt.n	11a4c <cbvprintf+0x6d8>
   11aa6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11aa8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11aaa:	442e      	add	r6, r5
   11aac:	1b73      	subs	r3, r6, r5
   11aae:	2b00      	cmp	r3, #0
   11ab0:	dc16      	bgt.n	11ae0 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   11ab2:	9802      	ldr	r0, [sp, #8]
   11ab4:	4643      	mov	r3, r8
   11ab6:	4652      	mov	r2, sl
   11ab8:	4659      	mov	r1, fp
   11aba:	f012 fff8 	bl	24aae <outs>
   11abe:	2800      	cmp	r0, #0
   11ac0:	dbc4      	blt.n	11a4c <cbvprintf+0x6d8>
   11ac2:	4405      	add	r5, r0
		while (width > 0) {
   11ac4:	44a9      	add	r9, r5
   11ac6:	eba9 0305 	sub.w	r3, r9, r5
   11aca:	2b00      	cmp	r3, #0
   11acc:	f77f ae7c 	ble.w	117c8 <cbvprintf+0x454>
			OUTC(' ');
   11ad0:	9b02      	ldr	r3, [sp, #8]
   11ad2:	4659      	mov	r1, fp
   11ad4:	2020      	movs	r0, #32
   11ad6:	4798      	blx	r3
   11ad8:	2800      	cmp	r0, #0
   11ada:	dbb7      	blt.n	11a4c <cbvprintf+0x6d8>
   11adc:	3501      	adds	r5, #1
			--width;
   11ade:	e7f2      	b.n	11ac6 <cbvprintf+0x752>
				OUTC('0');
   11ae0:	9b02      	ldr	r3, [sp, #8]
   11ae2:	4659      	mov	r1, fp
   11ae4:	2030      	movs	r0, #48	; 0x30
   11ae6:	4798      	blx	r3
   11ae8:	2800      	cmp	r0, #0
   11aea:	dbaf      	blt.n	11a4c <cbvprintf+0x6d8>
   11aec:	3501      	adds	r5, #1
   11aee:	e7dd      	b.n	11aac <cbvprintf+0x738>
   11af0:	000293f8 	.word	0x000293f8

00011af4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11af4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11af6:	4910      	ldr	r1, [pc, #64]	; (11b38 <enable_logger+0x44>)
   11af8:	4810      	ldr	r0, [pc, #64]	; (11b3c <enable_logger+0x48>)
{
   11afa:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11afc:	2200      	movs	r2, #0
   11afe:	f016 fb94 	bl	2822a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b02:	4d0f      	ldr	r5, [pc, #60]	; (11b40 <enable_logger+0x4c>)
   11b04:	490f      	ldr	r1, [pc, #60]	; (11b44 <enable_logger+0x50>)
   11b06:	2200      	movs	r2, #0
   11b08:	2300      	movs	r3, #0
   11b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11b0e:	2400      	movs	r4, #0
   11b10:	230e      	movs	r3, #14
   11b12:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11b16:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11b1a:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <enable_logger+0x54>)
   11b1c:	9400      	str	r4, [sp, #0]
   11b1e:	f44f 7240 	mov.w	r2, #768	; 0x300
   11b22:	4628      	mov	r0, r5
   11b24:	f00f fafa 	bl	2111c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11b28:	4908      	ldr	r1, [pc, #32]	; (11b4c <enable_logger+0x58>)
   11b2a:	4628      	mov	r0, r5
   11b2c:	f016 fa88 	bl	28040 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   11b30:	4620      	mov	r0, r4
   11b32:	b009      	add	sp, #36	; 0x24
   11b34:	bd30      	pop	{r4, r5, pc}
   11b36:	bf00      	nop
   11b38:	00011b51 	.word	0x00011b51
   11b3c:	20001598 	.word	0x20001598
   11b40:	200015d0 	.word	0x200015d0
   11b44:	20002fa0 	.word	0x20002fa0
   11b48:	00012009 	.word	0x00012009
   11b4c:	000293f9 	.word	0x000293f9

00011b50 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   11b50:	4801      	ldr	r0, [pc, #4]	; (11b58 <log_process_thread_timer_expiry_fn+0x8>)
   11b52:	f00f bf3f 	b.w	219d4 <z_impl_k_sem_give>
   11b56:	bf00      	nop
   11b58:	200006d4 	.word	0x200006d4

00011b5c <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11b5c:	2920      	cmp	r1, #32
{
   11b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b60:	4605      	mov	r5, r0
   11b62:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11b64:	d909      	bls.n	11b7a <z_log_get_s_mask+0x1e>
   11b66:	4914      	ldr	r1, [pc, #80]	; (11bb8 <z_log_get_s_mask+0x5c>)
   11b68:	4814      	ldr	r0, [pc, #80]	; (11bbc <z_log_get_s_mask+0x60>)
   11b6a:	4a15      	ldr	r2, [pc, #84]	; (11bc0 <z_log_get_s_mask+0x64>)
   11b6c:	2387      	movs	r3, #135	; 0x87
   11b6e:	f012 fdc3 	bl	246f8 <printk>
   11b72:	4813      	ldr	r0, [pc, #76]	; (11bc0 <z_log_get_s_mask+0x64>)
   11b74:	2187      	movs	r1, #135	; 0x87
   11b76:	f012 ffb0 	bl	24ada <assert_post_action>
			arm = false;
   11b7a:	2000      	movs	r0, #0
   11b7c:	4603      	mov	r3, r0
   11b7e:	4602      	mov	r2, r0
				mask |= BIT(arg);
   11b80:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   11b82:	f815 1b01 	ldrb.w	r1, [r5], #1
   11b86:	b109      	cbz	r1, 11b8c <z_log_get_s_mask+0x30>
   11b88:	42a3      	cmp	r3, r4
   11b8a:	d300      	bcc.n	11b8e <z_log_get_s_mask+0x32>
}
   11b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   11b8e:	2925      	cmp	r1, #37	; 0x25
   11b90:	d102      	bne.n	11b98 <z_log_get_s_mask+0x3c>
			arm = !arm;
   11b92:	f082 0201 	eor.w	r2, r2, #1
   11b96:	e7f4      	b.n	11b82 <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
   11b98:	2a00      	cmp	r2, #0
   11b9a:	d0f2      	beq.n	11b82 <z_log_get_s_mask+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11b9c:	f041 0620 	orr.w	r6, r1, #32
   11ba0:	3e61      	subs	r6, #97	; 0x61
   11ba2:	2e19      	cmp	r6, #25
   11ba4:	d8ed      	bhi.n	11b82 <z_log_get_s_mask+0x26>
			if (curr == 's') {
   11ba6:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   11ba8:	bf04      	itt	eq
   11baa:	fa07 f203 	lsleq.w	r2, r7, r3
   11bae:	4310      	orreq	r0, r2
			arg++;
   11bb0:	3301      	adds	r3, #1
			arm = false;
   11bb2:	2200      	movs	r2, #0
   11bb4:	e7e5      	b.n	11b82 <z_log_get_s_mask+0x26>
   11bb6:	bf00      	nop
   11bb8:	0002942e 	.word	0x0002942e
   11bbc:	000290f5 	.word	0x000290f5
   11bc0:	00029401 	.word	0x00029401

00011bc4 <log_core_init>:
	panic_mode = false;
   11bc4:	4a0c      	ldr	r2, [pc, #48]	; (11bf8 <log_core_init+0x34>)
   11bc6:	2300      	movs	r3, #0
{
   11bc8:	b510      	push	{r4, lr}
	panic_mode = false;
   11bca:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11bcc:	4a0b      	ldr	r2, [pc, #44]	; (11bfc <log_core_init+0x38>)
   11bce:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   11bd0:	4b0b      	ldr	r3, [pc, #44]	; (11c00 <log_core_init+0x3c>)
   11bd2:	4a0c      	ldr	r2, [pc, #48]	; (11c04 <log_core_init+0x40>)
   11bd4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   11bd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11bda:	f000 fdcf 	bl	1277c <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11bde:	f000 fac3 	bl	12168 <log_msg_pool_init>
		log_list_init(&list);
   11be2:	4809      	ldr	r0, [pc, #36]	; (11c08 <log_core_init+0x44>)
   11be4:	f012 ff81 	bl	24aea <log_list_init>
}
   11be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11bec:	4907      	ldr	r1, [pc, #28]	; (11c0c <log_core_init+0x48>)
   11bee:	4808      	ldr	r0, [pc, #32]	; (11c10 <log_core_init+0x4c>)
   11bf0:	2310      	movs	r3, #16
   11bf2:	2248      	movs	r2, #72	; 0x48
   11bf4:	f016 ba02 	b.w	27ffc <k_mem_slab_init>
   11bf8:	20002581 	.word	0x20002581
   11bfc:	20001f10 	.word	0x20001f10
   11c00:	20000438 	.word	0x20000438
   11c04:	00024b2f 	.word	0x00024b2f
   11c08:	20001f18 	.word	0x20001f18
   11c0c:	20005a18 	.word	0x20005a18
   11c10:	20001f20 	.word	0x20001f20

00011c14 <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   11c14:	4b1a      	ldr	r3, [pc, #104]	; (11c80 <log_init+0x6c>)
   11c16:	4a1b      	ldr	r2, [pc, #108]	; (11c84 <log_init+0x70>)
   11c18:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   11c1a:	2b9f      	cmp	r3, #159	; 0x9f
{
   11c1c:	b570      	push	{r4, r5, r6, lr}
   11c1e:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   11c22:	d90b      	bls.n	11c3c <log_init+0x28>
   11c24:	4918      	ldr	r1, [pc, #96]	; (11c88 <log_init+0x74>)
   11c26:	4819      	ldr	r0, [pc, #100]	; (11c8c <log_init+0x78>)
   11c28:	4a19      	ldr	r2, [pc, #100]	; (11c90 <log_init+0x7c>)
   11c2a:	f240 234a 	movw	r3, #586	; 0x24a
   11c2e:	f012 fd63 	bl	246f8 <printk>
   11c32:	4817      	ldr	r0, [pc, #92]	; (11c90 <log_init+0x7c>)
   11c34:	f240 214a 	movw	r1, #586	; 0x24a
   11c38:	f012 ff4f 	bl	24ada <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11c3c:	f3bf 8f5b 	dmb	ish
   11c40:	4b14      	ldr	r3, [pc, #80]	; (11c94 <log_init+0x80>)
   11c42:	e853 5f00 	ldrex	r5, [r3]
   11c46:	1c6a      	adds	r2, r5, #1
   11c48:	e843 2100 	strex	r1, r2, [r3]
   11c4c:	2900      	cmp	r1, #0
   11c4e:	d1f8      	bne.n	11c42 <log_init+0x2e>
   11c50:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11c54:	b915      	cbnz	r5, 11c5c <log_init+0x48>
   11c56:	4c0b      	ldr	r4, [pc, #44]	; (11c84 <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   11c58:	42b5      	cmp	r5, r6
   11c5a:	db00      	blt.n	11c5e <log_init+0x4a>
}
   11c5c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   11c5e:	7b23      	ldrb	r3, [r4, #12]
   11c60:	b153      	cbz	r3, 11c78 <log_init+0x64>
			if (backend->api->init != NULL) {
   11c62:	6823      	ldr	r3, [r4, #0]
   11c64:	699b      	ldr	r3, [r3, #24]
   11c66:	b10b      	cbz	r3, 11c6c <log_init+0x58>
				backend->api->init(backend);
   11c68:	4620      	mov	r0, r4
   11c6a:	4798      	blx	r3
			log_backend_enable(backend,
   11c6c:	6863      	ldr	r3, [r4, #4]
   11c6e:	2204      	movs	r2, #4
   11c70:	6819      	ldr	r1, [r3, #0]
   11c72:	4620      	mov	r0, r4
   11c74:	f000 fa54 	bl	12120 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11c78:	3501      	adds	r5, #1
   11c7a:	3410      	adds	r4, #16
   11c7c:	e7ec      	b.n	11c58 <log_init+0x44>
   11c7e:	bf00      	nop
   11c80:	00028760 	.word	0x00028760
   11c84:	00028750 	.word	0x00028750
   11c88:	00029446 	.word	0x00029446
   11c8c:	000290f5 	.word	0x000290f5
   11c90:	00029401 	.word	0x00029401
   11c94:	20001f14 	.word	0x20001f14

00011c98 <get_msg>:
{
   11c98:	b510      	push	{r4, lr}
	__asm__ volatile(
   11c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c9e:	f3ef 8411 	mrs	r4, BASEPRI
   11ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   11ca6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11caa:	4804      	ldr	r0, [pc, #16]	; (11cbc <get_msg+0x24>)
   11cac:	f012 ff2d 	bl	24b0a <log_list_head_get>
	__asm__ volatile(
   11cb0:	f384 8811 	msr	BASEPRI, r4
   11cb4:	f3bf 8f6f 	isb	sy
}
   11cb8:	bd10      	pop	{r4, pc}
   11cba:	bf00      	nop
   11cbc:	20001f18 	.word	0x20001f18

00011cc0 <z_log_notify_backend_enabled>:
{
   11cc0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11cc2:	4c04      	ldr	r4, [pc, #16]	; (11cd4 <z_log_notify_backend_enabled+0x14>)
   11cc4:	7822      	ldrb	r2, [r4, #0]
   11cc6:	b912      	cbnz	r2, 11cce <z_log_notify_backend_enabled+0xe>
   11cc8:	4803      	ldr	r0, [pc, #12]	; (11cd8 <z_log_notify_backend_enabled+0x18>)
   11cca:	f00f fe83 	bl	219d4 <z_impl_k_sem_give>
	backend_attached = true;
   11cce:	2301      	movs	r3, #1
   11cd0:	7023      	strb	r3, [r4, #0]
}
   11cd2:	bd10      	pop	{r4, pc}
   11cd4:	20002580 	.word	0x20002580
   11cd8:	200006d4 	.word	0x200006d4

00011cdc <z_log_dropped>:
   11cdc:	4b0c      	ldr	r3, [pc, #48]	; (11d10 <z_log_dropped+0x34>)
   11cde:	f3bf 8f5b 	dmb	ish
   11ce2:	e853 2f00 	ldrex	r2, [r3]
   11ce6:	3201      	adds	r2, #1
   11ce8:	e843 2100 	strex	r1, r2, [r3]
   11cec:	2900      	cmp	r1, #0
   11cee:	d1f8      	bne.n	11ce2 <z_log_dropped+0x6>
   11cf0:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11cf4:	f3bf 8f5b 	dmb	ish
   11cf8:	4b06      	ldr	r3, [pc, #24]	; (11d14 <z_log_dropped+0x38>)
   11cfa:	e853 2f00 	ldrex	r2, [r3]
   11cfe:	3a01      	subs	r2, #1
   11d00:	e843 2100 	strex	r1, r2, [r3]
   11d04:	2900      	cmp	r1, #0
   11d06:	d1f8      	bne.n	11cfa <z_log_dropped+0x1e>
   11d08:	f3bf 8f5b 	dmb	ish
}
   11d0c:	4770      	bx	lr
   11d0e:	bf00      	nop
   11d10:	20001f10 	.word	0x20001f10
   11d14:	20001f0c 	.word	0x20001f0c

00011d18 <z_log_dropped_read_and_clear>:
}
   11d18:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11d1a:	4b06      	ldr	r3, [pc, #24]	; (11d34 <z_log_dropped_read_and_clear+0x1c>)
   11d1c:	f3bf 8f5b 	dmb	ish
   11d20:	4602      	mov	r2, r0
   11d22:	e853 0f00 	ldrex	r0, [r3]
   11d26:	e843 2100 	strex	r1, r2, [r3]
   11d2a:	2900      	cmp	r1, #0
   11d2c:	d1f9      	bne.n	11d22 <z_log_dropped_read_and_clear+0xa>
   11d2e:	f3bf 8f5b 	dmb	ish
   11d32:	4770      	bx	lr
   11d34:	20001f10 	.word	0x20001f10

00011d38 <dropped_notify>:
{
   11d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11d3a:	f7ff ffed 	bl	11d18 <z_log_dropped_read_and_clear>
   11d3e:	4c0b      	ldr	r4, [pc, #44]	; (11d6c <dropped_notify+0x34>)
   11d40:	4d0b      	ldr	r5, [pc, #44]	; (11d70 <dropped_notify+0x38>)
   11d42:	1b2d      	subs	r5, r5, r4
   11d44:	4607      	mov	r7, r0
   11d46:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11d48:	2600      	movs	r6, #0
   11d4a:	42ae      	cmp	r6, r5
   11d4c:	db00      	blt.n	11d50 <dropped_notify+0x18>
}
   11d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   11d50:	4620      	mov	r0, r4
   11d52:	f012 fee0 	bl	24b16 <log_backend_is_active>
   11d56:	b128      	cbz	r0, 11d64 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   11d58:	6823      	ldr	r3, [r4, #0]
   11d5a:	691b      	ldr	r3, [r3, #16]
   11d5c:	b113      	cbz	r3, 11d64 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   11d5e:	4639      	mov	r1, r7
   11d60:	4620      	mov	r0, r4
   11d62:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11d64:	3601      	adds	r6, #1
   11d66:	3410      	adds	r4, #16
   11d68:	e7ef      	b.n	11d4a <dropped_notify+0x12>
   11d6a:	bf00      	nop
   11d6c:	00028750 	.word	0x00028750
   11d70:	00028760 	.word	0x00028760

00011d74 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11d74:	4b16      	ldr	r3, [pc, #88]	; (11dd0 <z_log_strdup+0x5c>)
   11d76:	4298      	cmp	r0, r3
{
   11d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11d7a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11d7c:	d302      	bcc.n	11d84 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11d7e:	4b15      	ldr	r3, [pc, #84]	; (11dd4 <z_log_strdup+0x60>)
   11d80:	4298      	cmp	r0, r3
   11d82:	d320      	bcc.n	11dc6 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11d84:	4814      	ldr	r0, [pc, #80]	; (11dd8 <z_log_strdup+0x64>)
   11d86:	2200      	movs	r2, #0
   11d88:	2300      	movs	r3, #0
   11d8a:	a901      	add	r1, sp, #4
   11d8c:	f00f f892 	bl	20eb4 <k_mem_slab_alloc>
	if (err != 0) {
   11d90:	4605      	mov	r5, r0
   11d92:	b9d8      	cbnz	r0, 11dcc <z_log_strdup+0x58>
   11d94:	2201      	movs	r2, #1
   11d96:	9b01      	ldr	r3, [sp, #4]
   11d98:	f3bf 8f5b 	dmb	ish
   11d9c:	e853 1f00 	ldrex	r1, [r3]
   11da0:	e843 2000 	strex	r0, r2, [r3]
   11da4:	2800      	cmp	r0, #0
   11da6:	d1f9      	bne.n	11d9c <z_log_strdup+0x28>
   11da8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11dac:	9801      	ldr	r0, [sp, #4]
   11dae:	4621      	mov	r1, r4
   11db0:	2241      	movs	r2, #65	; 0x41
   11db2:	3004      	adds	r0, #4
   11db4:	f013 fd88 	bl	258c8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11db8:	9c01      	ldr	r4, [sp, #4]
   11dba:	237e      	movs	r3, #126	; 0x7e
   11dbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11dc0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   11dc4:	3404      	adds	r4, #4
}
   11dc6:	4620      	mov	r0, r4
   11dc8:	b003      	add	sp, #12
   11dca:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   11dcc:	4c03      	ldr	r4, [pc, #12]	; (11ddc <z_log_strdup+0x68>)
   11dce:	e7fa      	b.n	11dc6 <z_log_strdup+0x52>
   11dd0:	000282e0 	.word	0x000282e0
   11dd4:	00030a2c 	.word	0x00030a2c
   11dd8:	20001f20 	.word	0x20001f20
   11ddc:	0002946a 	.word	0x0002946a

00011de0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11de0:	b150      	cbz	r0, 11df8 <log_is_strdup+0x18>
   11de2:	4b06      	ldr	r3, [pc, #24]	; (11dfc <log_is_strdup+0x1c>)
   11de4:	4298      	cmp	r0, r3
   11de6:	d306      	bcc.n	11df6 <log_is_strdup+0x16>
   11de8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
   11dec:	4298      	cmp	r0, r3
   11dee:	bf2c      	ite	cs
   11df0:	2000      	movcs	r0, #0
   11df2:	2001      	movcc	r0, #1
   11df4:	4770      	bx	lr
   11df6:	2000      	movs	r0, #0
}
   11df8:	4770      	bx	lr
   11dfa:	bf00      	nop
   11dfc:	20005a18 	.word	0x20005a18

00011e00 <z_impl_log_process>:
{
   11e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   11e04:	4b42      	ldr	r3, [pc, #264]	; (11f10 <z_impl_log_process+0x110>)
   11e06:	781b      	ldrb	r3, [r3, #0]
{
   11e08:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11e0a:	b903      	cbnz	r3, 11e0e <z_impl_log_process+0xe>
   11e0c:	b1a0      	cbz	r0, 11e38 <z_impl_log_process+0x38>
	msg = get_msg();
   11e0e:	f7ff ff43 	bl	11c98 <get_msg>
	if (msg.msg) {
   11e12:	4605      	mov	r5, r0
   11e14:	b118      	cbz	r0, 11e1e <z_impl_log_process+0x1e>
		if (!bypass) {
   11e16:	b194      	cbz	r4, 11e3e <z_impl_log_process+0x3e>
			log_msg_put(msg.msg);
   11e18:	4628      	mov	r0, r5
   11e1a:	f012 ff7f 	bl	24d1c <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   11e1e:	b92c      	cbnz	r4, 11e2c <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   11e20:	4b3c      	ldr	r3, [pc, #240]	; (11f14 <z_impl_log_process+0x114>)
	if (!bypass && z_log_dropped_pending()) {
   11e22:	681b      	ldr	r3, [r3, #0]
   11e24:	2b00      	cmp	r3, #0
   11e26:	dd01      	ble.n	11e2c <z_impl_log_process+0x2c>
		dropped_notify();
   11e28:	f7ff ff86 	bl	11d38 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   11e2c:	483a      	ldr	r0, [pc, #232]	; (11f18 <z_impl_log_process+0x118>)
   11e2e:	f012 fe6a 	bl	24b06 <log_list_head_peek>
   11e32:	1e04      	subs	r4, r0, #0
   11e34:	bf18      	it	ne
   11e36:	2401      	movne	r4, #1
}
   11e38:	4620      	mov	r0, r4
   11e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11e3e:	4b37      	ldr	r3, [pc, #220]	; (11f1c <z_impl_log_process+0x11c>)
   11e40:	f3bf 8f5b 	dmb	ish
   11e44:	e853 2f00 	ldrex	r2, [r3]
   11e48:	3a01      	subs	r2, #1
   11e4a:	e843 2100 	strex	r1, r2, [r3]
   11e4e:	2900      	cmp	r1, #0
   11e50:	d1f8      	bne.n	11e44 <z_impl_log_process+0x44>
   11e52:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   11e56:	4b32      	ldr	r3, [pc, #200]	; (11f20 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11e58:	781b      	ldrb	r3, [r3, #0]
   11e5a:	b993      	cbnz	r3, 11e82 <z_impl_log_process+0x82>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11e5c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   11e5e:	07db      	lsls	r3, r3, #31
   11e60:	d40f      	bmi.n	11e82 <z_impl_log_process+0x82>
	msg_str = log_msg_str_get(msg);
   11e62:	f012 ff6e 	bl	24d42 <log_msg_str_get>
   11e66:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11e68:	4628      	mov	r0, r5
   11e6a:	f012 ff35 	bl	24cd8 <log_msg_nargs_get>
   11e6e:	4601      	mov	r1, r0
   11e70:	4640      	mov	r0, r8
   11e72:	f7ff fe73 	bl	11b5c <z_log_get_s_mask>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11e76:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 11f40 <z_impl_log_process+0x140>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11e7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11f44 <z_impl_log_process+0x144>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11e7e:	4606      	mov	r6, r0
	while (mask) {
   11e80:	b936      	cbnz	r6, 11e90 <z_impl_log_process+0x90>
	return __log_backends_end - __log_backends_start;
   11e82:	4e28      	ldr	r6, [pc, #160]	; (11f24 <z_impl_log_process+0x124>)
   11e84:	4f28      	ldr	r7, [pc, #160]	; (11f28 <z_impl_log_process+0x128>)
   11e86:	1bbf      	subs	r7, r7, r6
   11e88:	113f      	asrs	r7, r7, #4
   11e8a:	f04f 0800 	mov.w	r8, #0
   11e8e:	e03c      	b.n	11f0a <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
   11e90:	fab6 f786 	clz	r7, r6
   11e94:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11e98:	4639      	mov	r1, r7
   11e9a:	4628      	mov	r0, r5
   11e9c:	f012 ff1f 	bl	24cde <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   11ea0:	4b22      	ldr	r3, [pc, #136]	; (11f2c <z_impl_log_process+0x12c>)
   11ea2:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   11ea4:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11ea6:	d302      	bcc.n	11eae <z_impl_log_process+0xae>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11ea8:	4b21      	ldr	r3, [pc, #132]	; (11f30 <z_impl_log_process+0x130>)
   11eaa:	4298      	cmp	r0, r3
   11eac:	d31b      	bcc.n	11ee6 <z_impl_log_process+0xe6>
   11eae:	4610      	mov	r0, r2
   11eb0:	f7ff ff96 	bl	11de0 <log_is_strdup>
   11eb4:	b9b8      	cbnz	r0, 11ee6 <z_impl_log_process+0xe6>
   11eb6:	455a      	cmp	r2, fp
   11eb8:	d015      	beq.n	11ee6 <z_impl_log_process+0xe6>
	return msg->hdr.ids.source_id;
   11eba:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11ebc:	f3c1 1189 	ubfx	r1, r1, #6, #10
   11ec0:	f000 f920 	bl	12104 <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11ec4:	491b      	ldr	r1, [pc, #108]	; (11f34 <z_impl_log_process+0x134>)
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11ec6:	4681      	mov	r9, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11ec8:	23d8      	movs	r3, #216	; 0xd8
   11eca:	481b      	ldr	r0, [pc, #108]	; (11f38 <z_impl_log_process+0x138>)
   11ecc:	4652      	mov	r2, sl
   11ece:	f012 fc13 	bl	246f8 <printk>
   11ed2:	481a      	ldr	r0, [pc, #104]	; (11f3c <z_impl_log_process+0x13c>)
   11ed4:	4639      	mov	r1, r7
   11ed6:	4643      	mov	r3, r8
   11ed8:	464a      	mov	r2, r9
   11eda:	f012 fc0d 	bl	246f8 <printk>
   11ede:	21d8      	movs	r1, #216	; 0xd8
   11ee0:	4650      	mov	r0, sl
   11ee2:	f012 fdfa 	bl	24ada <assert_post_action>
		mask &= ~BIT(idx);
   11ee6:	2301      	movs	r3, #1
   11ee8:	fa03 f707 	lsl.w	r7, r3, r7
   11eec:	ea26 0607 	bic.w	r6, r6, r7
   11ef0:	e7c6      	b.n	11e80 <z_impl_log_process+0x80>
			if (log_backend_is_active(backend) &&
   11ef2:	4630      	mov	r0, r6
   11ef4:	f012 fe0f 	bl	24b16 <log_backend_is_active>
   11ef8:	b120      	cbz	r0, 11f04 <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
   11efa:	6833      	ldr	r3, [r6, #0]
   11efc:	4629      	mov	r1, r5
   11efe:	685b      	ldr	r3, [r3, #4]
   11f00:	4630      	mov	r0, r6
   11f02:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   11f04:	f108 0801 	add.w	r8, r8, #1
   11f08:	3610      	adds	r6, #16
   11f0a:	45b8      	cmp	r8, r7
   11f0c:	dbf1      	blt.n	11ef2 <z_impl_log_process+0xf2>
   11f0e:	e783      	b.n	11e18 <z_impl_log_process+0x18>
   11f10:	20002580 	.word	0x20002580
   11f14:	20001f10 	.word	0x20001f10
   11f18:	20001f18 	.word	0x20001f18
   11f1c:	20001f0c 	.word	0x20001f0c
   11f20:	20002581 	.word	0x20002581
   11f24:	00028750 	.word	0x00028750
   11f28:	00028760 	.word	0x00028760
   11f2c:	000282e0 	.word	0x000282e0
   11f30:	00030a2c 	.word	0x00030a2c
   11f34:	0002cf26 	.word	0x0002cf26
   11f38:	000290f5 	.word	0x000290f5
   11f3c:	00029484 	.word	0x00029484
   11f40:	0002946a 	.word	0x0002946a
   11f44:	00029401 	.word	0x00029401

00011f48 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   11f48:	4b28      	ldr	r3, [pc, #160]	; (11fec <msg_finalize+0xa4>)
{
   11f4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   11f4c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   11f4e:	8141      	strh	r1, [r0, #10]
{
   11f50:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11f52:	4798      	blx	r3
   11f54:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11f56:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f5a:	f3ef 8511 	mrs	r5, BASEPRI
   11f5e:	f383 8812 	msr	BASEPRI_MAX, r3
   11f62:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11f66:	4822      	ldr	r0, [pc, #136]	; (11ff0 <msg_finalize+0xa8>)
   11f68:	4621      	mov	r1, r4
   11f6a:	f012 fdc2 	bl	24af2 <log_list_add_tail>
	__asm__ volatile(
   11f6e:	f385 8811 	msr	BASEPRI, r5
   11f72:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f76:	f3bf 8f5b 	dmb	ish
   11f7a:	4b1e      	ldr	r3, [pc, #120]	; (11ff4 <msg_finalize+0xac>)
   11f7c:	e853 2f00 	ldrex	r2, [r3]
   11f80:	1c51      	adds	r1, r2, #1
   11f82:	e843 1000 	strex	r0, r1, [r3]
   11f86:	2800      	cmp	r0, #0
   11f88:	d1f8      	bne.n	11f7c <msg_finalize+0x34>
   11f8a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11f8e:	4b1a      	ldr	r3, [pc, #104]	; (11ff8 <msg_finalize+0xb0>)
   11f90:	781b      	ldrb	r3, [r3, #0]
   11f92:	b183      	cbz	r3, 11fb6 <msg_finalize+0x6e>
	__asm__ volatile(
   11f94:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f98:	f3ef 8411 	mrs	r4, BASEPRI
   11f9c:	f383 8812 	msr	BASEPRI_MAX, r3
   11fa0:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11fa4:	2000      	movs	r0, #0
   11fa6:	f7ff ff2b 	bl	11e00 <z_impl_log_process>
	__asm__ volatile(
   11faa:	f384 8811 	msr	BASEPRI, r4
   11fae:	f3bf 8f6f 	isb	sy
}
   11fb2:	b003      	add	sp, #12
   11fb4:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   11fb6:	4b11      	ldr	r3, [pc, #68]	; (11ffc <msg_finalize+0xb4>)
   11fb8:	681b      	ldr	r3, [r3, #0]
   11fba:	2b00      	cmp	r3, #0
   11fbc:	d0f9      	beq.n	11fb2 <msg_finalize+0x6a>
   11fbe:	b952      	cbnz	r2, 11fd6 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   11fc0:	2200      	movs	r2, #0
   11fc2:	2300      	movs	r3, #0
   11fc4:	e9cd 2300 	strd	r2, r3, [sp]
   11fc8:	480d      	ldr	r0, [pc, #52]	; (12000 <msg_finalize+0xb8>)
   11fca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11fce:	2300      	movs	r3, #0
   11fd0:	f012 f930 	bl	24234 <z_impl_k_timer_start>
   11fd4:	e7ed      	b.n	11fb2 <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11fd6:	2a0a      	cmp	r2, #10
   11fd8:	d1eb      	bne.n	11fb2 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   11fda:	4809      	ldr	r0, [pc, #36]	; (12000 <msg_finalize+0xb8>)
   11fdc:	f016 f931 	bl	28242 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11fe0:	4808      	ldr	r0, [pc, #32]	; (12004 <msg_finalize+0xbc>)
}
   11fe2:	b003      	add	sp, #12
   11fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11fe8:	f00f bcf4 	b.w	219d4 <z_impl_k_sem_give>
   11fec:	20000438 	.word	0x20000438
   11ff0:	20001f18 	.word	0x20001f18
   11ff4:	20001f0c 	.word	0x20001f0c
   11ff8:	20002581 	.word	0x20002581
   11ffc:	20001f40 	.word	0x20001f40
   12000:	20001598 	.word	0x20001598
   12004:	200006d4 	.word	0x200006d4

00012008 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   12008:	4b16      	ldr	r3, [pc, #88]	; (12064 <log_process_thread_func+0x5c>)
   1200a:	4a17      	ldr	r2, [pc, #92]	; (12068 <log_process_thread_func+0x60>)
   1200c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   1200e:	2b00      	cmp	r3, #0
{
   12010:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   12012:	dc0b      	bgt.n	1202c <log_process_thread_func+0x24>
   12014:	4915      	ldr	r1, [pc, #84]	; (1206c <log_process_thread_func+0x64>)
   12016:	4816      	ldr	r0, [pc, #88]	; (12070 <log_process_thread_func+0x68>)
   12018:	4a16      	ldr	r2, [pc, #88]	; (12074 <log_process_thread_func+0x6c>)
   1201a:	f240 43f1 	movw	r3, #1265	; 0x4f1
   1201e:	f012 fb6b 	bl	246f8 <printk>
   12022:	4814      	ldr	r0, [pc, #80]	; (12074 <log_process_thread_func+0x6c>)
   12024:	f240 41f1 	movw	r1, #1265	; 0x4f1
   12028:	f012 fd57 	bl	24ada <assert_post_action>
	log_init();
   1202c:	f7ff fdf2 	bl	11c14 <log_init>
	return z_impl_z_current_get();
   12030:	f011 fbd8 	bl	237e4 <z_impl_z_current_get>
	proc_tid = process_tid;
   12034:	4b10      	ldr	r3, [pc, #64]	; (12078 <log_process_thread_func+0x70>)
   12036:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12038:	b130      	cbz	r0, 12048 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1203a:	4b10      	ldr	r3, [pc, #64]	; (1207c <log_process_thread_func+0x74>)
	    process_tid &&
   1203c:	681b      	ldr	r3, [r3, #0]
   1203e:	2b09      	cmp	r3, #9
   12040:	dd02      	ble.n	12048 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   12042:	480f      	ldr	r0, [pc, #60]	; (12080 <log_process_thread_func+0x78>)
   12044:	f00f fcc6 	bl	219d4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12048:	4c0d      	ldr	r4, [pc, #52]	; (12080 <log_process_thread_func+0x78>)
   1204a:	2000      	movs	r0, #0
   1204c:	f7ff fed8 	bl	11e00 <z_impl_log_process>
		if (log_process(false) == false) {
   12050:	2800      	cmp	r0, #0
   12052:	d1fa      	bne.n	1204a <log_process_thread_func+0x42>
   12054:	f04f 32ff 	mov.w	r2, #4294967295
   12058:	f04f 33ff 	mov.w	r3, #4294967295
   1205c:	4620      	mov	r0, r4
   1205e:	f00f fcfd 	bl	21a5c <z_impl_k_sem_take>
   12062:	e7f2      	b.n	1204a <log_process_thread_func+0x42>
   12064:	00028760 	.word	0x00028760
   12068:	00028750 	.word	0x00028750
   1206c:	000294c6 	.word	0x000294c6
   12070:	000290f5 	.word	0x000290f5
   12074:	00029401 	.word	0x00029401
   12078:	20001f40 	.word	0x20001f40
   1207c:	20001f0c 	.word	0x20001f0c
   12080:	200006d4 	.word	0x200006d4

00012084 <z_impl_log_panic>:
{
   12084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12086:	4f0f      	ldr	r7, [pc, #60]	; (120c4 <z_impl_log_panic+0x40>)
   12088:	783d      	ldrb	r5, [r7, #0]
   1208a:	b975      	cbnz	r5, 120aa <z_impl_log_panic+0x26>
   1208c:	4c0e      	ldr	r4, [pc, #56]	; (120c8 <z_impl_log_panic+0x44>)
   1208e:	4e0f      	ldr	r6, [pc, #60]	; (120cc <z_impl_log_panic+0x48>)
	log_init();
   12090:	f7ff fdc0 	bl	11c14 <log_init>
   12094:	1b36      	subs	r6, r6, r4
   12096:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12098:	42b5      	cmp	r5, r6
   1209a:	db07      	blt.n	120ac <z_impl_log_panic+0x28>
   1209c:	2000      	movs	r0, #0
   1209e:	f7ff feaf 	bl	11e00 <z_impl_log_process>
		while (log_process(false) == true) {
   120a2:	2800      	cmp	r0, #0
   120a4:	d1fa      	bne.n	1209c <z_impl_log_panic+0x18>
	panic_mode = true;
   120a6:	2301      	movs	r3, #1
   120a8:	703b      	strb	r3, [r7, #0]
}
   120aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   120ac:	4620      	mov	r0, r4
   120ae:	f012 fd32 	bl	24b16 <log_backend_is_active>
   120b2:	b118      	cbz	r0, 120bc <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   120b4:	6823      	ldr	r3, [r4, #0]
   120b6:	4620      	mov	r0, r4
   120b8:	695b      	ldr	r3, [r3, #20]
   120ba:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   120bc:	3501      	adds	r5, #1
   120be:	3410      	adds	r4, #16
   120c0:	e7ea      	b.n	12098 <z_impl_log_panic+0x14>
   120c2:	bf00      	nop
   120c4:	20002581 	.word	0x20002581
   120c8:	00028750 	.word	0x00028750
   120cc:	00028760 	.word	0x00028760

000120d0 <z_log_free>:
{
   120d0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   120d2:	3804      	subs	r0, #4
   120d4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   120d6:	f3bf 8f5b 	dmb	ish
   120da:	e850 3f00 	ldrex	r3, [r0]
   120de:	1e5a      	subs	r2, r3, #1
   120e0:	e840 2100 	strex	r1, r2, [r0]
   120e4:	2900      	cmp	r1, #0
   120e6:	d1f8      	bne.n	120da <z_log_free+0xa>
   120e8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   120ec:	2b01      	cmp	r3, #1
   120ee:	d103      	bne.n	120f8 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   120f0:	4803      	ldr	r0, [pc, #12]	; (12100 <z_log_free+0x30>)
   120f2:	a901      	add	r1, sp, #4
   120f4:	f00e ff4a 	bl	20f8c <k_mem_slab_free>
}
   120f8:	b003      	add	sp, #12
   120fa:	f85d fb04 	ldr.w	pc, [sp], #4
   120fe:	bf00      	nop
   12100:	20001f20 	.word	0x20001f20

00012104 <log_source_name_get>:
   12104:	4a04      	ldr	r2, [pc, #16]	; (12118 <log_source_name_get+0x14>)
   12106:	4b05      	ldr	r3, [pc, #20]	; (1211c <log_source_name_get+0x18>)
   12108:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1210a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1210e:	bf34      	ite	cc
   12110:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   12114:	2000      	movcs	r0, #0
}
   12116:	4770      	bx	lr
   12118:	00028618 	.word	0x00028618
   1211c:	00028750 	.word	0x00028750

00012120 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   12120:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   12122:	4c0d      	ldr	r4, [pc, #52]	; (12158 <log_backend_enable+0x38>)
   12124:	1b04      	subs	r4, r0, r4
   12126:	1124      	asrs	r4, r4, #4
   12128:	3401      	adds	r4, #1
{
   1212a:	4605      	mov	r5, r0
   1212c:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1212e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12130:	b948      	cbnz	r0, 12146 <log_backend_enable+0x26>
   12132:	490a      	ldr	r1, [pc, #40]	; (1215c <log_backend_enable+0x3c>)
   12134:	480a      	ldr	r0, [pc, #40]	; (12160 <log_backend_enable+0x40>)
   12136:	4a0b      	ldr	r2, [pc, #44]	; (12164 <log_backend_enable+0x44>)
   12138:	23d1      	movs	r3, #209	; 0xd1
   1213a:	f012 fadd 	bl	246f8 <printk>
   1213e:	4809      	ldr	r0, [pc, #36]	; (12164 <log_backend_enable+0x44>)
   12140:	21d1      	movs	r1, #209	; 0xd1
   12142:	f012 fcca 	bl	24ada <assert_post_action>
	backend->cb->id = id;
   12146:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12148:	2201      	movs	r2, #1
	backend->cb->id = id;
   1214a:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
   1214c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   1214e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   12150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   12154:	f7ff bdb4 	b.w	11cc0 <z_log_notify_backend_enabled>
   12158:	00028750 	.word	0x00028750
   1215c:	0002956f 	.word	0x0002956f
   12160:	000290f5 	.word	0x000290f5
   12164:	0002953e 	.word	0x0002953e

00012168 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12168:	2320      	movs	r3, #32
   1216a:	4902      	ldr	r1, [pc, #8]	; (12174 <log_msg_pool_init+0xc>)
   1216c:	4802      	ldr	r0, [pc, #8]	; (12178 <log_msg_pool_init+0x10>)
   1216e:	461a      	mov	r2, r3
   12170:	f015 bf44 	b.w	27ffc <k_mem_slab_init>
   12174:	20005e98 	.word	0x20005e98
   12178:	20001f44 	.word	0x20001f44

0001217c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   1217c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   1217e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12180:	4d09      	ldr	r5, [pc, #36]	; (121a8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12182:	9301      	str	r3, [sp, #4]
   12184:	2001      	movs	r0, #1
   12186:	f7ff fe3b 	bl	11e00 <z_impl_log_process>
   1218a:	4604      	mov	r4, r0
			z_log_dropped();
   1218c:	f7ff fda6 	bl	11cdc <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12190:	2200      	movs	r2, #0
   12192:	2300      	movs	r3, #0
   12194:	a901      	add	r1, sp, #4
   12196:	4628      	mov	r0, r5
   12198:	f00e fe8c 	bl	20eb4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1219c:	b108      	cbz	r0, 121a2 <log_msg_no_space_handle+0x26>
   1219e:	2c00      	cmp	r4, #0
   121a0:	d1f0      	bne.n	12184 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   121a2:	9801      	ldr	r0, [sp, #4]
   121a4:	b003      	add	sp, #12
   121a6:	bd30      	pop	{r4, r5, pc}
   121a8:	20001f44 	.word	0x20001f44

000121ac <log_msg_chunk_alloc>:
{
   121ac:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   121ae:	2300      	movs	r3, #0
   121b0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   121b2:	4807      	ldr	r0, [pc, #28]	; (121d0 <log_msg_chunk_alloc+0x24>)
   121b4:	2200      	movs	r2, #0
   121b6:	2300      	movs	r3, #0
   121b8:	a901      	add	r1, sp, #4
   121ba:	f00e fe7b 	bl	20eb4 <k_mem_slab_alloc>
	if (err != 0) {
   121be:	b110      	cbz	r0, 121c6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   121c0:	f7ff ffdc 	bl	1217c <log_msg_no_space_handle>
   121c4:	9001      	str	r0, [sp, #4]
}
   121c6:	9801      	ldr	r0, [sp, #4]
   121c8:	b003      	add	sp, #12
   121ca:	f85d fb04 	ldr.w	pc, [sp], #4
   121ce:	bf00      	nop
   121d0:	20001f44 	.word	0x20001f44

000121d4 <msg_free>:
{
   121d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   121d6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   121d8:	7a45      	ldrb	r5, [r0, #9]
{
   121da:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   121dc:	092d      	lsrs	r5, r5, #4
{
   121de:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   121e0:	07d8      	lsls	r0, r3, #31
   121e2:	d41c      	bmi.n	1221e <msg_free+0x4a>
   121e4:	b1dd      	cbz	r5, 1221e <msg_free+0x4a>
		uint32_t smask = 0U;
   121e6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   121e8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   121ea:	9801      	ldr	r0, [sp, #4]
   121ec:	4631      	mov	r1, r6
   121ee:	f012 fd76 	bl	24cde <log_msg_arg_get>
   121f2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   121f4:	f7ff fdf4 	bl	11de0 <log_is_strdup>
   121f8:	b170      	cbz	r0, 12218 <msg_free+0x44>
				if (smask == 0U) {
   121fa:	b934      	cbnz	r4, 1220a <msg_free+0x36>
					smask = z_log_get_s_mask(
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	4629      	mov	r1, r5
   12200:	6918      	ldr	r0, [r3, #16]
   12202:	f7ff fcab 	bl	11b5c <z_log_get_s_mask>
					if (smask == 0U) {
   12206:	4604      	mov	r4, r0
   12208:	b148      	cbz	r0, 1221e <msg_free+0x4a>
				if (smask & BIT(i)) {
   1220a:	fa24 f306 	lsr.w	r3, r4, r6
   1220e:	07d9      	lsls	r1, r3, #31
   12210:	d502      	bpl.n	12218 <msg_free+0x44>
					z_log_free(buf);
   12212:	4638      	mov	r0, r7
   12214:	f7ff ff5c 	bl	120d0 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   12218:	3601      	adds	r6, #1
   1221a:	42ae      	cmp	r6, r5
   1221c:	d3e5      	bcc.n	121ea <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   1221e:	9b01      	ldr	r3, [sp, #4]
   12220:	7a1a      	ldrb	r2, [r3, #8]
   12222:	0792      	lsls	r2, r2, #30
   12224:	d504      	bpl.n	12230 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   12226:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12228:	4c08      	ldr	r4, [pc, #32]	; (1224c <msg_free+0x78>)
   1222a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1222c:	9b03      	ldr	r3, [sp, #12]
   1222e:	b92b      	cbnz	r3, 1223c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12230:	4806      	ldr	r0, [pc, #24]	; (1224c <msg_free+0x78>)
   12232:	a901      	add	r1, sp, #4
   12234:	f00e feaa 	bl	20f8c <k_mem_slab_free>
}
   12238:	b005      	add	sp, #20
   1223a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1223c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1223e:	a903      	add	r1, sp, #12
   12240:	4620      	mov	r0, r4
   12242:	f00e fea3 	bl	20f8c <k_mem_slab_free>
		cont = next;
   12246:	9503      	str	r5, [sp, #12]
   12248:	e7f0      	b.n	1222c <msg_free+0x58>
   1224a:	bf00      	nop
   1224c:	20001f44 	.word	0x20001f44

00012250 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12250:	2a0e      	cmp	r2, #14
{
   12252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12256:	4681      	mov	r9, r0
   12258:	4688      	mov	r8, r1
   1225a:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   1225c:	d90b      	bls.n	12276 <log_msg_create_n+0x26>
   1225e:	492d      	ldr	r1, [pc, #180]	; (12314 <log_msg_create_n+0xc4>)
   12260:	482d      	ldr	r0, [pc, #180]	; (12318 <log_msg_create_n+0xc8>)
   12262:	4a2e      	ldr	r2, [pc, #184]	; (1231c <log_msg_create_n+0xcc>)
   12264:	f240 133b 	movw	r3, #315	; 0x13b
   12268:	f012 fa46 	bl	246f8 <printk>
   1226c:	482b      	ldr	r0, [pc, #172]	; (1231c <log_msg_create_n+0xcc>)
   1226e:	f240 113b 	movw	r1, #315	; 0x13b
   12272:	f012 fc32 	bl	24ada <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12276:	f7ff ff99 	bl	121ac <log_msg_chunk_alloc>

	if (msg != NULL) {
   1227a:	4604      	mov	r4, r0
   1227c:	b330      	cbz	r0, 122cc <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1227e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   12280:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   12282:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   12284:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12286:	8107      	strh	r7, [r0, #8]
   12288:	d909      	bls.n	1229e <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   1228a:	2202      	movs	r2, #2
   1228c:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1228e:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   12292:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   12296:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   12298:	f1ba 0f00 	cmp.w	sl, #0
   1229c:	dc0e      	bgt.n	122bc <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   1229e:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   122a0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   122a4:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   122a8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   122aa:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   122ac:	d818      	bhi.n	122e0 <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
   122ae:	00aa      	lsls	r2, r5, #2
   122b0:	4641      	mov	r1, r8
   122b2:	f104 0014 	add.w	r0, r4, #20
   122b6:	f013 fb55 	bl	25964 <memcpy>
	while (nargs != 0U) {
   122ba:	e007      	b.n	122cc <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   122bc:	f7ff ff76 	bl	121ac <log_msg_chunk_alloc>
		if (cont == NULL) {
   122c0:	4606      	mov	r6, r0
   122c2:	b930      	cbnz	r0, 122d2 <log_msg_create_n+0x82>
			msg_free(msg);
   122c4:	4620      	mov	r0, r4
   122c6:	f7ff ff85 	bl	121d4 <msg_free>
			return NULL;
   122ca:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   122cc:	4620      	mov	r0, r4
   122ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   122d2:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   122d6:	f1aa 0a07 	sub.w	sl, sl, #7
   122da:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   122dc:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   122de:	e7db      	b.n	12298 <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
   122e0:	4641      	mov	r1, r8
   122e2:	2208      	movs	r2, #8
   122e4:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   122e8:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   122ea:	f013 fb3b 	bl	25964 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   122ee:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   122f0:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   122f4:	2d07      	cmp	r5, #7
   122f6:	462e      	mov	r6, r5
   122f8:	bf28      	it	cs
   122fa:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   122fc:	ea4f 0986 	mov.w	r9, r6, lsl #2
   12300:	4641      	mov	r1, r8
   12302:	1d38      	adds	r0, r7, #4
   12304:	464a      	mov	r2, r9
   12306:	f013 fb2d 	bl	25964 <memcpy>
	while (nargs != 0U) {
   1230a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1230c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1230e:	44c8      	add	r8, r9
	while (nargs != 0U) {
   12310:	d1f0      	bne.n	122f4 <log_msg_create_n+0xa4>
   12312:	e7db      	b.n	122cc <log_msg_create_n+0x7c>
   12314:	000295b2 	.word	0x000295b2
   12318:	000290f5 	.word	0x000290f5
   1231c:	00029586 	.word	0x00029586

00012320 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12320:	b40e      	push	{r1, r2, r3}
   12322:	b503      	push	{r0, r1, lr}
   12324:	ab03      	add	r3, sp, #12
   12326:	4601      	mov	r1, r0
   12328:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1232c:	4804      	ldr	r0, [pc, #16]	; (12340 <print_formatted+0x20>)
	va_start(args, fmt);
   1232e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12330:	f7ff f820 	bl	11374 <cbvprintf>
	va_end(args);

	return length;
}
   12334:	b002      	add	sp, #8
   12336:	f85d eb04 	ldr.w	lr, [sp], #4
   1233a:	b003      	add	sp, #12
   1233c:	4770      	bx	lr
   1233e:	bf00      	nop
   12340:	000125a1 	.word	0x000125a1

00012344 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   12344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12348:	b087      	sub	sp, #28
   1234a:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1234c:	f001 0301 	and.w	r3, r1, #1
{
   12350:	9205      	str	r2, [sp, #20]
   12352:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   12356:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1235a:	9304      	str	r3, [sp, #16]
{
   1235c:	4606      	mov	r6, r0
   1235e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   12360:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12364:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   12368:	f012 fc51 	bl	24c0e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   1236c:	4602      	mov	r2, r0
   1236e:	2800      	cmp	r0, #0
   12370:	d044      	beq.n	123fc <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   12372:	4939      	ldr	r1, [pc, #228]	; (12458 <prefix_print+0x114>)
   12374:	4630      	mov	r0, r6
   12376:	f7ff ffd3 	bl	12320 <print_formatted>
   1237a:	4604      	mov	r4, r0
	}

	if (stamp) {
   1237c:	f1bb 0f00 	cmp.w	fp, #0
   12380:	d008      	beq.n	12394 <prefix_print+0x50>
	if (!format) {
   12382:	f018 0f44 	tst.w	r8, #68	; 0x44
   12386:	d13b      	bne.n	12400 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12388:	4934      	ldr	r1, [pc, #208]	; (1245c <prefix_print+0x118>)
   1238a:	463a      	mov	r2, r7
   1238c:	4630      	mov	r0, r6
   1238e:	f7ff ffc7 	bl	12320 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   12392:	4404      	add	r4, r0
	if (color) {
   12394:	9b04      	ldr	r3, [sp, #16]
   12396:	b153      	cbz	r3, 123ae <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   12398:	4b31      	ldr	r3, [pc, #196]	; (12460 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   1239a:	4932      	ldr	r1, [pc, #200]	; (12464 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   1239c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   123a0:	4b31      	ldr	r3, [pc, #196]	; (12468 <prefix_print+0x124>)
   123a2:	4630      	mov	r0, r6
   123a4:	2a00      	cmp	r2, #0
   123a6:	bf08      	it	eq
   123a8:	461a      	moveq	r2, r3
   123aa:	f7ff ffb9 	bl	12320 <print_formatted>
	if (level_on) {
   123ae:	b13d      	cbz	r5, 123c0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   123b0:	4b2e      	ldr	r3, [pc, #184]	; (1246c <prefix_print+0x128>)
   123b2:	492f      	ldr	r1, [pc, #188]	; (12470 <prefix_print+0x12c>)
   123b4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   123b8:	4630      	mov	r0, r6
   123ba:	f7ff ffb1 	bl	12320 <print_formatted>
   123be:	4605      	mov	r5, r0
	if (source_id >= 0) {
   123c0:	f1ba 0f00 	cmp.w	sl, #0
   123c4:	db16      	blt.n	123f4 <prefix_print+0xb0>
		total += print_formatted(output,
   123c6:	9b05      	ldr	r3, [sp, #20]
   123c8:	2b00      	cmp	r3, #0
   123ca:	d043      	beq.n	12454 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   123cc:	2301      	movs	r3, #1
   123ce:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   123d2:	4b28      	ldr	r3, [pc, #160]	; (12474 <prefix_print+0x130>)
   123d4:	4f28      	ldr	r7, [pc, #160]	; (12478 <prefix_print+0x134>)
   123d6:	f019 0f10 	tst.w	r9, #16
   123da:	bf18      	it	ne
   123dc:	461f      	movne	r7, r3
   123de:	4651      	mov	r1, sl
   123e0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   123e4:	f7ff fe8e 	bl	12104 <log_source_name_get>
   123e8:	4639      	mov	r1, r7
   123ea:	4602      	mov	r2, r0
   123ec:	4630      	mov	r0, r6
   123ee:	f7ff ff97 	bl	12320 <print_formatted>
   123f2:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   123f4:	1928      	adds	r0, r5, r4
   123f6:	b007      	add	sp, #28
   123f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   123fc:	4604      	mov	r4, r0
   123fe:	e7bd      	b.n	1237c <prefix_print+0x38>
	} else if (freq != 0U) {
   12400:	4b1e      	ldr	r3, [pc, #120]	; (1247c <prefix_print+0x138>)
   12402:	6818      	ldr	r0, [r3, #0]
   12404:	2800      	cmp	r0, #0
   12406:	d0c4      	beq.n	12392 <prefix_print+0x4e>
		timestamp /= timestamp_div;
   12408:	4b1d      	ldr	r3, [pc, #116]	; (12480 <prefix_print+0x13c>)
   1240a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1240e:	6819      	ldr	r1, [r3, #0]
   12410:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   12414:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   12418:	fb00 7711 	mls	r7, r0, r1, r7
   1241c:	fbb1 f2fc 	udiv	r2, r1, ip
   12420:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   12424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12428:	434f      	muls	r7, r1
		mins = seconds / 60U;
   1242a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1242e:	fbb7 f8f0 	udiv	r8, r7, r0
   12432:	fb00 7718 	mls	r7, r0, r8, r7
   12436:	434f      	muls	r7, r1
		mins = seconds / 60U;
   12438:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   1243c:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12440:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   12444:	9100      	str	r1, [sp, #0]
   12446:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1244a:	490e      	ldr	r1, [pc, #56]	; (12484 <prefix_print+0x140>)
   1244c:	4630      	mov	r0, r6
   1244e:	f7ff ff67 	bl	12320 <print_formatted>
   12452:	e79e      	b.n	12392 <prefix_print+0x4e>
		total += print_formatted(output,
   12454:	4f08      	ldr	r7, [pc, #32]	; (12478 <prefix_print+0x134>)
   12456:	e7c2      	b.n	123de <prefix_print+0x9a>
   12458:	000295cb 	.word	0x000295cb
   1245c:	000295cf 	.word	0x000295cf
   12460:	00028888 	.word	0x00028888
   12464:	00028f34 	.word	0x00028f34
   12468:	000295bd 	.word	0x000295bd
   1246c:	0002889c 	.word	0x0002889c
   12470:	000295f4 	.word	0x000295f4
   12474:	000295c7 	.word	0x000295c7
   12478:	000295c2 	.word	0x000295c2
   1247c:	20001f64 	.word	0x20001f64
   12480:	20001f68 	.word	0x20001f68
   12484:	000295d8 	.word	0x000295d8

00012488 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   12488:	b538      	push	{r3, r4, r5, lr}
   1248a:	460c      	mov	r4, r1
	if (color) {
   1248c:	07e1      	lsls	r1, r4, #31
{
   1248e:	4605      	mov	r5, r0
	if (color) {
   12490:	d503      	bpl.n	1249a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   12492:	4a08      	ldr	r2, [pc, #32]	; (124b4 <postfix_print+0x2c>)
   12494:	4908      	ldr	r1, [pc, #32]	; (124b8 <postfix_print+0x30>)
   12496:	f7ff ff43 	bl	12320 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1249a:	06e2      	lsls	r2, r4, #27
   1249c:	d408      	bmi.n	124b0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1249e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   124a0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   124a2:	bf4c      	ite	mi
   124a4:	4905      	ldrmi	r1, [pc, #20]	; (124bc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   124a6:	4906      	ldrpl	r1, [pc, #24]	; (124c0 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   124a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   124ac:	f7ff bf38 	b.w	12320 <print_formatted>
}
   124b0:	bd38      	pop	{r3, r4, r5, pc}
   124b2:	bf00      	nop
   124b4:	000295bd 	.word	0x000295bd
   124b8:	00028f34 	.word	0x00028f34
   124bc:	0002f380 	.word	0x0002f380
   124c0:	000295fa 	.word	0x000295fa

000124c4 <hexdump_line_print>:
{
   124c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   124c8:	461d      	mov	r5, r3
   124ca:	9b08      	ldr	r3, [sp, #32]
   124cc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   124ce:	06da      	lsls	r2, r3, #27
{
   124d0:	4604      	mov	r4, r0
   124d2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   124d4:	d405      	bmi.n	124e2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   124d6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   124d8:	bf4c      	ite	mi
   124da:	492a      	ldrmi	r1, [pc, #168]	; (12584 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   124dc:	492a      	ldrpl	r1, [pc, #168]	; (12588 <hexdump_line_print+0xc4>)
   124de:	f7ff ff1f 	bl	12320 <print_formatted>
		print_formatted(output, " ");
   124e2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12590 <hexdump_line_print+0xcc>
{
   124e6:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   124ea:	45a8      	cmp	r8, r5
   124ec:	db2a      	blt.n	12544 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   124ee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12594 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   124f2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12598 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   124f6:	f8df a098 	ldr.w	sl, [pc, #152]	; 12590 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   124fa:	2500      	movs	r5, #0
		if (i < length) {
   124fc:	42bd      	cmp	r5, r7
   124fe:	d22f      	bcs.n	12560 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   12500:	5d72      	ldrb	r2, [r6, r5]
   12502:	4649      	mov	r1, r9
   12504:	4620      	mov	r0, r4
   12506:	f7ff ff0b 	bl	12320 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1250a:	3501      	adds	r5, #1
   1250c:	2d10      	cmp	r5, #16
   1250e:	d120      	bne.n	12552 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   12510:	491e      	ldr	r1, [pc, #120]	; (1258c <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   12512:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12590 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   12516:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1259c <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   1251a:	4620      	mov	r0, r4
   1251c:	f7ff ff00 	bl	12320 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12520:	2500      	movs	r5, #0
		if (i < length) {
   12522:	42af      	cmp	r7, r5
   12524:	d928      	bls.n	12578 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   12526:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   12528:	f1a2 0320 	sub.w	r3, r2, #32
   1252c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   1252e:	bf28      	it	cs
   12530:	222e      	movcs	r2, #46	; 0x2e
   12532:	4649      	mov	r1, r9
   12534:	4620      	mov	r0, r4
   12536:	f7ff fef3 	bl	12320 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1253a:	3501      	adds	r5, #1
   1253c:	2d10      	cmp	r5, #16
   1253e:	d114      	bne.n	1256a <hexdump_line_print+0xa6>
}
   12540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   12544:	4649      	mov	r1, r9
   12546:	4620      	mov	r0, r4
   12548:	f7ff feea 	bl	12320 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1254c:	f108 0801 	add.w	r8, r8, #1
   12550:	e7cb      	b.n	124ea <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12552:	076a      	lsls	r2, r5, #29
   12554:	d1d2      	bne.n	124fc <hexdump_line_print+0x38>
			print_formatted(output, " ");
   12556:	4651      	mov	r1, sl
   12558:	4620      	mov	r0, r4
   1255a:	f7ff fee1 	bl	12320 <print_formatted>
   1255e:	e7cd      	b.n	124fc <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   12560:	4641      	mov	r1, r8
   12562:	4620      	mov	r0, r4
   12564:	f7ff fedc 	bl	12320 <print_formatted>
   12568:	e7cf      	b.n	1250a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1256a:	076b      	lsls	r3, r5, #29
   1256c:	d1d9      	bne.n	12522 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1256e:	4641      	mov	r1, r8
   12570:	4620      	mov	r0, r4
   12572:	f7ff fed5 	bl	12320 <print_formatted>
   12576:	e7d4      	b.n	12522 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   12578:	4641      	mov	r1, r8
   1257a:	4620      	mov	r0, r4
   1257c:	f7ff fed0 	bl	12320 <print_formatted>
   12580:	e7db      	b.n	1253a <hexdump_line_print+0x76>
   12582:	bf00      	nop
   12584:	0002f380 	.word	0x0002f380
   12588:	000295fa 	.word	0x000295fa
   1258c:	00029607 	.word	0x00029607
   12590:	00029605 	.word	0x00029605
   12594:	00029603 	.word	0x00029603
   12598:	000295fd 	.word	0x000295fd
   1259c:	00029609 	.word	0x00029609

000125a0 <out_func>:
{
   125a0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   125a2:	684b      	ldr	r3, [r1, #4]
   125a4:	681a      	ldr	r2, [r3, #0]
   125a6:	68cb      	ldr	r3, [r1, #12]
   125a8:	429a      	cmp	r2, r3
{
   125aa:	4605      	mov	r5, r0
   125ac:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   125ae:	d102      	bne.n	125b6 <out_func+0x16>
		log_output_flush(out_ctx);
   125b0:	4608      	mov	r0, r1
   125b2:	f012 fd8c 	bl	250ce <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   125b6:	6863      	ldr	r3, [r4, #4]
   125b8:	f3bf 8f5b 	dmb	ish
   125bc:	e853 2f00 	ldrex	r2, [r3]
   125c0:	1c51      	adds	r1, r2, #1
   125c2:	e843 1000 	strex	r0, r1, [r3]
   125c6:	2800      	cmp	r0, #0
   125c8:	d1f8      	bne.n	125bc <out_func+0x1c>
   125ca:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   125ce:	68a3      	ldr	r3, [r4, #8]
   125d0:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   125d2:	6863      	ldr	r3, [r4, #4]
   125d4:	681a      	ldr	r2, [r3, #0]
   125d6:	68e3      	ldr	r3, [r4, #12]
   125d8:	429a      	cmp	r2, r3
   125da:	d909      	bls.n	125f0 <out_func+0x50>
   125dc:	4905      	ldr	r1, [pc, #20]	; (125f4 <out_func+0x54>)
   125de:	4806      	ldr	r0, [pc, #24]	; (125f8 <out_func+0x58>)
   125e0:	4a06      	ldr	r2, [pc, #24]	; (125fc <out_func+0x5c>)
   125e2:	2374      	movs	r3, #116	; 0x74
   125e4:	f012 f888 	bl	246f8 <printk>
   125e8:	4804      	ldr	r0, [pc, #16]	; (125fc <out_func+0x5c>)
   125ea:	2174      	movs	r1, #116	; 0x74
   125ec:	f012 fa75 	bl	24ada <assert_post_action>
}
   125f0:	2000      	movs	r0, #0
   125f2:	bd38      	pop	{r3, r4, r5, pc}
   125f4:	0002963b 	.word	0x0002963b
   125f8:	000290f5 	.word	0x000290f5
   125fc:	0002960c 	.word	0x0002960c

00012600 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   12600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12604:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   12606:	f013 0707 	ands.w	r7, r3, #7
{
   1260a:	4616      	mov	r6, r2
   1260c:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1260e:	7a0a      	ldrb	r2, [r1, #8]
   12610:	4604      	mov	r4, r0
   12612:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   12614:	d020      	beq.n	12658 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
   12616:	8949      	ldrh	r1, [r1, #10]
   12618:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1261c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12620:	43d2      	mvns	r2, r2
   12622:	e9cd 7300 	strd	r7, r3, [sp]
   12626:	9102      	str	r1, [sp, #8]
   12628:	68eb      	ldr	r3, [r5, #12]
   1262a:	f002 0201 	and.w	r2, r2, #1
   1262e:	4631      	mov	r1, r6
   12630:	f7ff fe88 	bl	12344 <prefix_print>
   12634:	4681      	mov	r9, r0
   12636:	7a2b      	ldrb	r3, [r5, #8]
   12638:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1263a:	f013 0801 	ands.w	r8, r3, #1
   1263e:	d00d      	beq.n	1265c <log_output_msg_process+0x5c>
		std_print(msg, output);
   12640:	4621      	mov	r1, r4
   12642:	4628      	mov	r0, r5
   12644:	f012 fbe6 	bl	24e14 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   12648:	2f00      	cmp	r7, #0
   1264a:	d03c      	beq.n	126c6 <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   1264c:	463a      	mov	r2, r7
   1264e:	4631      	mov	r1, r6
   12650:	4620      	mov	r0, r4
   12652:	f7ff ff19 	bl	12488 <postfix_print>
   12656:	e036      	b.n	126c6 <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12658:	46b9      	mov	r9, r7
   1265a:	e7ec      	b.n	12636 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1265c:	2f00      	cmp	r7, #0
   1265e:	d138      	bne.n	126d2 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   12660:	68e3      	ldr	r3, [r4, #12]
   12662:	b95b      	cbnz	r3, 1267c <log_output_msg_process+0x7c>
   12664:	492a      	ldr	r1, [pc, #168]	; (12710 <log_output_msg_process+0x110>)
   12666:	482b      	ldr	r0, [pc, #172]	; (12714 <log_output_msg_process+0x114>)
   12668:	4a2b      	ldr	r2, [pc, #172]	; (12718 <log_output_msg_process+0x118>)
   1266a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1266e:	f012 f843 	bl	246f8 <printk>
   12672:	4829      	ldr	r0, [pc, #164]	; (12718 <log_output_msg_process+0x118>)
   12674:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   12678:	f012 fa2f 	bl	24ada <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   1267c:	2600      	movs	r6, #0
		length = output->size;
   1267e:	68e3      	ldr	r3, [r4, #12]
   12680:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   12682:	aa06      	add	r2, sp, #24
   12684:	4633      	mov	r3, r6
   12686:	68a1      	ldr	r1, [r4, #8]
   12688:	4628      	mov	r0, r5
   1268a:	f012 fbaf 	bl	24dec <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1268e:	9a06      	ldr	r2, [sp, #24]
   12690:	6863      	ldr	r3, [r4, #4]
   12692:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12694:	b14a      	cbz	r2, 126aa <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   12696:	68a3      	ldr	r3, [r4, #8]
   12698:	4413      	add	r3, r2
   1269a:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   1269e:	f1a8 030a 	sub.w	r3, r8, #10
   126a2:	f1d3 0800 	rsbs	r8, r3, #0
   126a6:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   126aa:	4620      	mov	r0, r4
   126ac:	f012 fd0f 	bl	250ce <log_output_flush>
		offset += length;
   126b0:	9b06      	ldr	r3, [sp, #24]
   126b2:	441e      	add	r6, r3
	} while (length > 0);
   126b4:	2b00      	cmp	r3, #0
   126b6:	d1e2      	bne.n	1267e <log_output_msg_process+0x7e>
	if (eol) {
   126b8:	f1b8 0f00 	cmp.w	r8, #0
   126bc:	d003      	beq.n	126c6 <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   126be:	4917      	ldr	r1, [pc, #92]	; (1271c <log_output_msg_process+0x11c>)
   126c0:	4620      	mov	r0, r4
   126c2:	f7ff fe2d 	bl	12320 <print_formatted>
	}

	log_output_flush(output);
   126c6:	4620      	mov	r0, r4
   126c8:	f012 fd01 	bl	250ce <log_output_flush>
}
   126cc:	b00a      	add	sp, #40	; 0x28
   126ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   126d2:	4628      	mov	r0, r5
   126d4:	f012 fb35 	bl	24d42 <log_msg_str_get>
   126d8:	4911      	ldr	r1, [pc, #68]	; (12720 <log_output_msg_process+0x120>)
   126da:	4602      	mov	r2, r0
   126dc:	4620      	mov	r0, r4
   126de:	f7ff fe1f 	bl	12320 <print_formatted>
		length = sizeof(buf);
   126e2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   126e6:	aa05      	add	r2, sp, #20
   126e8:	4643      	mov	r3, r8
   126ea:	a906      	add	r1, sp, #24
   126ec:	4628      	mov	r0, r5
		length = sizeof(buf);
   126ee:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   126f2:	f012 fb7b 	bl	24dec <log_msg_hexdump_data_get>
		if (length) {
   126f6:	9a05      	ldr	r2, [sp, #20]
   126f8:	2a00      	cmp	r2, #0
   126fa:	d0a7      	beq.n	1264c <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   126fc:	464b      	mov	r3, r9
   126fe:	9600      	str	r6, [sp, #0]
   12700:	a906      	add	r1, sp, #24
   12702:	4620      	mov	r0, r4
   12704:	f7ff fede 	bl	124c4 <hexdump_line_print>
			offset += length;
   12708:	9b05      	ldr	r3, [sp, #20]
   1270a:	4498      	add	r8, r3
		length = sizeof(buf);
   1270c:	e7eb      	b.n	126e6 <log_output_msg_process+0xe6>
   1270e:	bf00      	nop
   12710:	0002966b 	.word	0x0002966b
   12714:	000290f5 	.word	0x000290f5
   12718:	0002960c 	.word	0x0002960c
   1271c:	00029678 	.word	0x00029678
   12720:	00028f34 	.word	0x00028f34

00012724 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12724:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12726:	f242 730f 	movw	r3, #9999	; 0x270f
   1272a:	428b      	cmp	r3, r1
   1272c:	bf28      	it	cs
   1272e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12730:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12732:	4a0f      	ldr	r2, [pc, #60]	; (12770 <log_output_dropped_process+0x4c>)
{
   12734:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12736:	2105      	movs	r1, #5
   12738:	4668      	mov	r0, sp
   1273a:	f011 ffea 	bl	24712 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1273e:	6863      	ldr	r3, [r4, #4]
   12740:	490c      	ldr	r1, [pc, #48]	; (12774 <log_output_dropped_process+0x50>)
   12742:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12744:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12746:	220b      	movs	r2, #11
   12748:	4628      	mov	r0, r5
   1274a:	f012 fb56 	bl	24dfa <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1274e:	6863      	ldr	r3, [r4, #4]
   12750:	4632      	mov	r2, r6
   12752:	4669      	mov	r1, sp
   12754:	4628      	mov	r0, r5
   12756:	685b      	ldr	r3, [r3, #4]
   12758:	f012 fb4f 	bl	24dfa <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1275c:	6863      	ldr	r3, [r4, #4]
   1275e:	4906      	ldr	r1, [pc, #24]	; (12778 <log_output_dropped_process+0x54>)
   12760:	685b      	ldr	r3, [r3, #4]
   12762:	221b      	movs	r2, #27
   12764:	4628      	mov	r0, r5
   12766:	f012 fb48 	bl	24dfa <buffer_write>
		     output->control_block->ctx);
}
   1276a:	b002      	add	sp, #8
   1276c:	bd70      	pop	{r4, r5, r6, pc}
   1276e:	bf00      	nop
   12770:	0002fc83 	.word	0x0002fc83
   12774:	000296b6 	.word	0x000296b6
   12778:	0002969a 	.word	0x0002969a

0001277c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1277c:	4a08      	ldr	r2, [pc, #32]	; (127a0 <log_output_timestamp_freq_set+0x24>)
{
   1277e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   12780:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12782:	4c08      	ldr	r4, [pc, #32]	; (127a4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12784:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12786:	2100      	movs	r1, #0
   12788:	42a0      	cmp	r0, r4
   1278a:	d804      	bhi.n	12796 <log_output_timestamp_freq_set+0x1a>
   1278c:	b101      	cbz	r1, 12790 <log_output_timestamp_freq_set+0x14>
   1278e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12790:	4b05      	ldr	r3, [pc, #20]	; (127a8 <log_output_timestamp_freq_set+0x2c>)
   12792:	6018      	str	r0, [r3, #0]
}
   12794:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   12796:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12798:	005b      	lsls	r3, r3, #1
   1279a:	2101      	movs	r1, #1
   1279c:	e7f4      	b.n	12788 <log_output_timestamp_freq_set+0xc>
   1279e:	bf00      	nop
   127a0:	20001f68 	.word	0x20001f68
   127a4:	000f4240 	.word	0x000f4240
   127a8:	20001f64 	.word	0x20001f64

000127ac <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   127ac:	4b01      	ldr	r3, [pc, #4]	; (127b4 <log_backend_rtt_init+0x8>)
   127ae:	2201      	movs	r2, #1
   127b0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   127b2:	4770      	bx	lr
   127b4:	20002592 	.word	0x20002592

000127b8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   127b8:	4b02      	ldr	r3, [pc, #8]	; (127c4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   127ba:	4803      	ldr	r0, [pc, #12]	; (127c8 <panic+0x10>)
   127bc:	2201      	movs	r2, #1
   127be:	701a      	strb	r2, [r3, #0]
   127c0:	f012 bc85 	b.w	250ce <log_output_flush>
   127c4:	20002593 	.word	0x20002593
   127c8:	000288cc 	.word	0x000288cc

000127cc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   127cc:	4801      	ldr	r0, [pc, #4]	; (127d4 <dropped+0x8>)
   127ce:	f7ff bfa9 	b.w	12724 <log_output_dropped_process>
   127d2:	bf00      	nop
   127d4:	000288cc 	.word	0x000288cc

000127d8 <put>:
{
   127d8:	b510      	push	{r4, lr}
	log_msg_get(msg);
   127da:	4608      	mov	r0, r1
   127dc:	460c      	mov	r4, r1
   127de:	f012 fa6e 	bl	24cbe <log_msg_get>
	log_output_msg_process(output, msg, flags);
   127e2:	4805      	ldr	r0, [pc, #20]	; (127f8 <put+0x20>)
   127e4:	4621      	mov	r1, r4
   127e6:	220f      	movs	r2, #15
   127e8:	f7ff ff0a 	bl	12600 <log_output_msg_process>
	log_msg_put(msg);
   127ec:	4620      	mov	r0, r4
}
   127ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   127f2:	f012 ba93 	b.w	24d1c <log_msg_put>
   127f6:	bf00      	nop
   127f8:	000288cc 	.word	0x000288cc

000127fc <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   127fc:	4b05      	ldr	r3, [pc, #20]	; (12814 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   127fe:	781b      	ldrb	r3, [r3, #0]
   12800:	b11b      	cbz	r3, 1280a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   12802:	f241 3088 	movw	r0, #5000	; 0x1388
   12806:	f015 bce3 	b.w	281d0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1280a:	20a4      	movs	r0, #164	; 0xa4
   1280c:	2100      	movs	r1, #0
   1280e:	f010 bfb1 	b.w	23774 <z_impl_k_sleep>
   12812:	bf00      	nop
   12814:	20002593 	.word	0x20002593

00012818 <data_out_block_mode>:
{
   12818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   1281c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 128b4 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12820:	f8df a094 	ldr.w	sl, [pc, #148]	; 128b8 <data_out_block_mode+0xa0>
{
   12824:	4680      	mov	r8, r0
   12826:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   12828:	2404      	movs	r4, #4
   1282a:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   1282c:	f899 5000 	ldrb.w	r5, [r9]
   12830:	b9cd      	cbnz	r5, 12866 <data_out_block_mode+0x4e>
   12832:	f04f 33ff 	mov.w	r3, #4294967295
   12836:	f04f 32ff 	mov.w	r2, #4294967295
   1283a:	4650      	mov	r0, sl
   1283c:	f00e fd9e 	bl	2137c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12840:	463a      	mov	r2, r7
   12842:	4641      	mov	r1, r8
   12844:	4628      	mov	r0, r5
   12846:	f00d ffe7 	bl	20818 <SEGGER_RTT_WriteSkipNoLock>
   1284a:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1284c:	4650      	mov	r0, sl
   1284e:	f00e fe95 	bl	2157c <z_impl_k_mutex_unlock>
		if (ret) {
   12852:	4d17      	ldr	r5, [pc, #92]	; (128b0 <data_out_block_mode+0x98>)
   12854:	b1fe      	cbz	r6, 12896 <data_out_block_mode+0x7e>
	host_present = true;
   12856:	2301      	movs	r3, #1
   12858:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   1285a:	f89b 3000 	ldrb.w	r3, [fp]
   1285e:	b96b      	cbnz	r3, 1287c <data_out_block_mode+0x64>
}
   12860:	4638      	mov	r0, r7
   12862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12866:	463a      	mov	r2, r7
   12868:	4641      	mov	r1, r8
   1286a:	2000      	movs	r0, #0
   1286c:	f00d ffd4 	bl	20818 <SEGGER_RTT_WriteSkipNoLock>
   12870:	4606      	mov	r6, r0
   12872:	e7ee      	b.n	12852 <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   12874:	b95c      	cbnz	r4, 1288e <data_out_block_mode+0x76>
		host_present = false;
   12876:	702c      	strb	r4, [r5, #0]
   12878:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   1287c:	2000      	movs	r0, #0
   1287e:	f00e f817 	bl	208b0 <SEGGER_RTT_HasDataUp>
   12882:	2800      	cmp	r0, #0
   12884:	d0ec      	beq.n	12860 <data_out_block_mode+0x48>
   12886:	782b      	ldrb	r3, [r5, #0]
   12888:	2b00      	cmp	r3, #0
   1288a:	d1f3      	bne.n	12874 <data_out_block_mode+0x5c>
   1288c:	e7e8      	b.n	12860 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   1288e:	3c01      	subs	r4, #1
   12890:	f7ff ffb4 	bl	127fc <on_failed_write.part.0>
   12894:	e7f2      	b.n	1287c <data_out_block_mode+0x64>
		} else if (host_present) {
   12896:	782b      	ldrb	r3, [r5, #0]
   12898:	b113      	cbz	r3, 128a0 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   1289a:	3c01      	subs	r4, #1
   1289c:	d104      	bne.n	128a8 <data_out_block_mode+0x90>
		host_present = false;
   1289e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   128a0:	782b      	ldrb	r3, [r5, #0]
   128a2:	2b00      	cmp	r3, #0
   128a4:	d1c2      	bne.n	1282c <data_out_block_mode+0x14>
   128a6:	e7db      	b.n	12860 <data_out_block_mode+0x48>
   128a8:	f7ff ffa8 	bl	127fc <on_failed_write.part.0>
   128ac:	e7f8      	b.n	128a0 <data_out_block_mode+0x88>
   128ae:	bf00      	nop
   128b0:	20002592 	.word	0x20002592
   128b4:	20002593 	.word	0x20002593
   128b8:	200006ac 	.word	0x200006ac

000128bc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   128bc:	4b10      	ldr	r3, [pc, #64]	; (12900 <settings_save_one+0x44>)
{
   128be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   128c2:	681c      	ldr	r4, [r3, #0]
{
   128c4:	4605      	mov	r5, r0
   128c6:	460e      	mov	r6, r1
   128c8:	4617      	mov	r7, r2
	if (!cs) {
   128ca:	b1ac      	cbz	r4, 128f8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   128cc:	f04f 32ff 	mov.w	r2, #4294967295
   128d0:	f04f 33ff 	mov.w	r3, #4294967295
   128d4:	480b      	ldr	r0, [pc, #44]	; (12904 <settings_save_one+0x48>)
   128d6:	f00e fd51 	bl	2137c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   128da:	6863      	ldr	r3, [r4, #4]
   128dc:	4632      	mov	r2, r6
   128de:	f8d3 8008 	ldr.w	r8, [r3, #8]
   128e2:	4629      	mov	r1, r5
   128e4:	463b      	mov	r3, r7
   128e6:	4620      	mov	r0, r4
   128e8:	47c0      	blx	r8
   128ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   128ec:	4805      	ldr	r0, [pc, #20]	; (12904 <settings_save_one+0x48>)
   128ee:	f00e fe45 	bl	2157c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   128f2:	4620      	mov	r0, r4
   128f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   128f8:	f06f 0401 	mvn.w	r4, #1
   128fc:	e7f9      	b.n	128f2 <settings_save_one+0x36>
   128fe:	bf00      	nop
   12900:	20001f88 	.word	0x20001f88
   12904:	200006c0 	.word	0x200006c0

00012908 <settings_load_subtree_direct>:
{
   12908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1290a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1290e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   12910:	f04f 33ff 	mov.w	r3, #4294967295
   12914:	480c      	ldr	r0, [pc, #48]	; (12948 <settings_load_subtree_direct+0x40>)
   12916:	f04f 32ff 	mov.w	r2, #4294967295
   1291a:	f00e fd2f 	bl	2137c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1291e:	4b0b      	ldr	r3, [pc, #44]	; (1294c <settings_load_subtree_direct+0x44>)
   12920:	681c      	ldr	r4, [r3, #0]
   12922:	2c00      	cmp	r4, #0
   12924:	bf38      	it	cc
   12926:	2400      	movcc	r4, #0
   12928:	b13c      	cbz	r4, 1293a <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   1292a:	6863      	ldr	r3, [r4, #4]
   1292c:	4620      	mov	r0, r4
   1292e:	681b      	ldr	r3, [r3, #0]
   12930:	a901      	add	r1, sp, #4
   12932:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12934:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   12936:	2c00      	cmp	r4, #0
   12938:	d1f6      	bne.n	12928 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   1293a:	4803      	ldr	r0, [pc, #12]	; (12948 <settings_load_subtree_direct+0x40>)
   1293c:	f00e fe1e 	bl	2157c <z_impl_k_mutex_unlock>
}
   12940:	2000      	movs	r0, #0
   12942:	b004      	add	sp, #16
   12944:	bd10      	pop	{r4, pc}
   12946:	bf00      	nop
   12948:	200006c0 	.word	0x200006c0
   1294c:	20001f80 	.word	0x20001f80

00012950 <cfb_print>:

	return fptr->width;
}

int cfb_print(const struct device *dev, char *str, uint16_t x, uint16_t y)
{
   12950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct char_framebuffer *fb = &char_fb;
	const struct cfb_font *fptr;

	if (!fb->fonts || !fb->buf) {
   12954:	4c5e      	ldr	r4, [pc, #376]	; (12ad0 <cfb_print+0x180>)
{
   12956:	4615      	mov	r5, r2
	if (!fb->fonts || !fb->buf) {
   12958:	68a2      	ldr	r2, [r4, #8]
{
   1295a:	b087      	sub	sp, #28
   1295c:	4688      	mov	r8, r1
   1295e:	461e      	mov	r6, r3
	if (!fb->fonts || !fb->buf) {
   12960:	b1a2      	cbz	r2, 1298c <cfb_print+0x3c>
   12962:	6823      	ldr	r3, [r4, #0]
   12964:	b193      	cbz	r3, 1298c <cfb_print+0x3c>
		return -1;
	}

	fptr = &(fb->fonts[fb->font_idx]);
   12966:	7d23      	ldrb	r3, [r4, #20]
   12968:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1296c:	eb02 0983 	add.w	r9, r2, r3, lsl #2

	if (fptr->height % 8) {
   12970:	f899 3006 	ldrb.w	r3, [r9, #6]
   12974:	075a      	lsls	r2, r3, #29
   12976:	d00c      	beq.n	12992 <cfb_print+0x42>
   12978:	4956      	ldr	r1, [pc, #344]	; (12ad4 <cfb_print+0x184>)
   1297a:	4b57      	ldr	r3, [pc, #348]	; (12ad8 <cfb_print+0x188>)
		LOG_ERR("Wrong font size");
   1297c:	4857      	ldr	r0, [pc, #348]	; (12adc <cfb_print+0x18c>)
   1297e:	1ac9      	subs	r1, r1, r3
   12980:	08c9      	lsrs	r1, r1, #3
   12982:	0189      	lsls	r1, r1, #6
   12984:	f041 0101 	orr.w	r1, r1, #1
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
		}
		return 0;
	}

	LOG_ERR("Unsupported framebuffer configuration");
   12988:	f012 f8d5 	bl	24b36 <log_0>
		return -1;
   1298c:	f04f 30ff 	mov.w	r0, #4294967295
   12990:	e041      	b.n	12a16 <cfb_print+0xc6>
	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
   12992:	7b63      	ldrb	r3, [r4, #13]
   12994:	07db      	lsls	r3, r3, #31
   12996:	d502      	bpl.n	1299e <cfb_print+0x4e>
   12998:	f016 0707 	ands.w	r7, r6, #7
   1299c:	d035      	beq.n	12a0a <cfb_print+0xba>
   1299e:	494d      	ldr	r1, [pc, #308]	; (12ad4 <cfb_print+0x184>)
   129a0:	4b4d      	ldr	r3, [pc, #308]	; (12ad8 <cfb_print+0x188>)
	LOG_ERR("Unsupported framebuffer configuration");
   129a2:	484f      	ldr	r0, [pc, #316]	; (12ae0 <cfb_print+0x190>)
   129a4:	1ac9      	subs	r1, r1, r3
   129a6:	08c9      	lsrs	r1, r1, #3
   129a8:	0189      	lsls	r1, r1, #6
   129aa:	f041 0101 	orr.w	r1, r1, #1
   129ae:	e7eb      	b.n	12988 <cfb_print+0x38>
			if (x + fptr->width > fb->x_res) {
   129b0:	f899 3005 	ldrb.w	r3, [r9, #5]
   129b4:	89e2      	ldrh	r2, [r4, #14]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
   129b6:	f894 c014 	ldrb.w	ip, [r4, #20]
   129ba:	68a0      	ldr	r0, [r4, #8]
			if (x + fptr->width > fb->x_res) {
   129bc:	442b      	add	r3, r5
   129be:	4293      	cmp	r3, r2
				y += fptr->height;
   129c0:	bfc8      	it	gt
   129c2:	f899 3006 	ldrbgt.w	r3, [r9, #6]
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
   129c6:	f818 2007 	ldrb.w	r2, [r8, r7]
				y += fptr->height;
   129ca:	bfc8      	it	gt
   129cc:	18f6      	addgt	r6, r6, r3
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
   129ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
   129d2:	f994 3015 	ldrsb.w	r3, [r4, #21]
   129d6:	9302      	str	r3, [sp, #8]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
   129d8:	eb00 038c 	add.w	r3, r0, ip, lsl #2
				y += fptr->height;
   129dc:	bfc8      	it	gt
   129de:	b2b6      	uxthgt	r6, r6
	if (c < fptr->first_char || c > fptr->last_char) {
   129e0:	f893 a007 	ldrb.w	sl, [r3, #7]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
   129e4:	f893 e004 	ldrb.w	lr, [r3, #4]
				x = 0U;
   129e8:	bfc8      	it	gt
   129ea:	2500      	movgt	r5, #0
	if (c < fptr->first_char || c > fptr->last_char) {
   129ec:	4552      	cmp	r2, sl
   129ee:	d315      	bcc.n	12a1c <cfb_print+0xcc>
   129f0:	7a19      	ldrb	r1, [r3, #8]
		c = ' ';
   129f2:	4291      	cmp	r1, r2
   129f4:	bf38      	it	cc
   129f6:	2220      	movcc	r2, #32
	if (fptr->caps & CFB_FONT_MONO_VPACKED) {
   129f8:	f01e 0f01 	tst.w	lr, #1
   129fc:	d110      	bne.n	12a20 <cfb_print+0xd0>
		return 0;
   129fe:	2200      	movs	r2, #0
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
   12a00:	9b02      	ldr	r3, [sp, #8]
   12a02:	441a      	add	r2, r3
   12a04:	4415      	add	r5, r2
   12a06:	b2ad      	uxth	r5, r5
		for (size_t i = 0; i < strlen(str); i++) {
   12a08:	3701      	adds	r7, #1
   12a0a:	4640      	mov	r0, r8
   12a0c:	f012 ff6f 	bl	258ee <strlen>
   12a10:	42b8      	cmp	r0, r7
   12a12:	d8cd      	bhi.n	129b0 <cfb_print+0x60>
		return 0;
   12a14:	2000      	movs	r0, #0
	return -1;
}
   12a16:	b007      	add	sp, #28
   12a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		c = ' ';
   12a1c:	2220      	movs	r2, #32
   12a1e:	e7eb      	b.n	129f8 <cfb_print+0xa8>
		       (fptr->width * fptr->height / 8U);
   12a20:	7959      	ldrb	r1, [r3, #5]
   12a22:	f893 b006 	ldrb.w	fp, [r3, #6]
		return (uint8_t *)fptr->data +
   12a26:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
		       (fptr->width * fptr->height / 8U);
   12a2a:	fb11 f10b 	smulbb	r1, r1, fp
   12a2e:	08c9      	lsrs	r1, r1, #3
		       (c - fptr->first_char) *
   12a30:	eba2 020a 	sub.w	r2, r2, sl
		return (uint8_t *)fptr->data +
   12a34:	fb02 0201 	mla	r2, r2, r1, r0
   12a38:	9201      	str	r2, [sp, #4]
	if (!glyph_ptr) {
   12a3a:	2a00      	cmp	r2, #0
   12a3c:	d0df      	beq.n	129fe <cfb_print+0xae>
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
   12a3e:	7b62      	ldrb	r2, [r4, #13]
   12a40:	f3c2 0240 	ubfx	r2, r2, #1, #1
   12a44:	4692      	mov	sl, r2
   12a46:	f3ce 0280 	ubfx	r2, lr, #2, #1
   12a4a:	9203      	str	r2, [sp, #12]
		uint32_t y_segment = y / 8U;
   12a4c:	08f2      	lsrs	r2, r6, #3
   12a4e:	9204      	str	r2, [sp, #16]
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
   12a50:	2100      	movs	r1, #0
   12a52:	795a      	ldrb	r2, [r3, #5]
   12a54:	4291      	cmp	r1, r2
   12a56:	d2d3      	bcs.n	12a00 <cfb_print+0xb0>
			if ((fb_y + x + g_x) >= fb->size) {
   12a58:	186a      	adds	r2, r5, r1
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
   12a5a:	f04f 0c00 	mov.w	ip, #0
			if ((fb_y + x + g_x) >= fb->size) {
   12a5e:	9205      	str	r2, [sp, #20]
   12a60:	e02e      	b.n	12ac0 <cfb_print+0x170>
			uint32_t fb_y = (y_segment + g_y) * fb->x_res;
   12a62:	9a04      	ldr	r2, [sp, #16]
   12a64:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
   12a68:	4462      	add	r2, ip
   12a6a:	4610      	mov	r0, r2
			if ((fb_y + x + g_x) >= fb->size) {
   12a6c:	9a05      	ldr	r2, [sp, #20]
   12a6e:	fb00 2e0e 	mla	lr, r0, lr, r2
   12a72:	6862      	ldr	r2, [r4, #4]
   12a74:	4596      	cmp	lr, r2
   12a76:	d2c2      	bcs.n	129fe <cfb_print+0xae>
			byte = glyph_ptr[g_x * (fptr->height / 8U) + g_y];
   12a78:	9a01      	ldr	r2, [sp, #4]
   12a7a:	fb0b 2b01 	mla	fp, fp, r1, r2
			if (need_reverse) {
   12a7e:	9a03      	ldr	r2, [sp, #12]
			byte = glyph_ptr[g_x * (fptr->height / 8U) + g_y];
   12a80:	f81b b00c 	ldrb.w	fp, [fp, ip]
			if (need_reverse) {
   12a84:	4592      	cmp	sl, r2
   12a86:	d016      	beq.n	12ab6 <cfb_print+0x166>
	b = (b & 0xf0) >> 4 | (b & 0x0f) << 4;
   12a88:	ea4f 120b 	mov.w	r2, fp, lsl #4
   12a8c:	ea42 1b1b 	orr.w	fp, r2, fp, lsr #4
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
   12a90:	f3cb 0285 	ubfx	r2, fp, #2, #6
   12a94:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   12a98:	f00b 0bcc 	and.w	fp, fp, #204	; 0xcc
   12a9c:	f002 0233 	and.w	r2, r2, #51	; 0x33
	b = (b & 0xaa) >> 1 | (b & 0x55) << 1;
   12aa0:	ea4b 0202 	orr.w	r2, fp, r2
   12aa4:	ea4f 0b62 	mov.w	fp, r2, asr #1
   12aa8:	0052      	lsls	r2, r2, #1
   12aaa:	f00b 0b55 	and.w	fp, fp, #85	; 0x55
   12aae:	f002 02aa 	and.w	r2, r2, #170	; 0xaa
   12ab2:	ea42 0b0b 	orr.w	fp, r2, fp
			fb->buf[fb_y + x + g_x] = byte;
   12ab6:	6822      	ldr	r2, [r4, #0]
   12ab8:	f802 b00e 	strb.w	fp, [r2, lr]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
   12abc:	f10c 0c01 	add.w	ip, ip, #1
   12ac0:	799a      	ldrb	r2, [r3, #6]
   12ac2:	ebbc 0fd2 	cmp.w	ip, r2, lsr #3
   12ac6:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
   12aca:	d3ca      	bcc.n	12a62 <cfb_print+0x112>
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
   12acc:	3101      	adds	r1, #1
   12ace:	e7c0      	b.n	12a52 <cfb_print+0x102>
   12ad0:	20001f8c 	.word	0x20001f8c
   12ad4:	00028698 	.word	0x00028698
   12ad8:	00028618 	.word	0x00028618
   12adc:	000296d9 	.word	0x000296d9
   12ae0:	000296e9 	.word	0x000296e9

00012ae4 <cfb_framebuffer_clear>:

	return 0;
}

int cfb_framebuffer_clear(const struct device *dev, bool clear_display)
{
   12ae4:	b508      	push	{r3, lr}
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
   12ae6:	4b06      	ldr	r3, [pc, #24]	; (12b00 <cfb_framebuffer_clear+0x1c>)
   12ae8:	6818      	ldr	r0, [r3, #0]
   12aea:	b128      	cbz	r0, 12af8 <cfb_framebuffer_clear+0x14>

	desc.buf_size = fb->size;
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;
	memset(fb->buf, 0, fb->size);
   12aec:	685a      	ldr	r2, [r3, #4]
   12aee:	2100      	movs	r1, #0
   12af0:	f012 ff43 	bl	2597a <memset>

	return 0;
   12af4:	2000      	movs	r0, #0
}
   12af6:	bd08      	pop	{r3, pc}
		return -1;
   12af8:	f04f 30ff 	mov.w	r0, #4294967295
   12afc:	e7fb      	b.n	12af6 <cfb_framebuffer_clear+0x12>
   12afe:	bf00      	nop
   12b00:	20001f8c 	.word	0x20001f8c

00012b04 <cfb_framebuffer_invert>:

int cfb_framebuffer_invert(const struct device *dev)
{
	struct char_framebuffer *fb = &char_fb;

	if (!fb || !fb->buf) {
   12b04:	4b05      	ldr	r3, [pc, #20]	; (12b1c <cfb_framebuffer_invert+0x18>)
   12b06:	681a      	ldr	r2, [r3, #0]
   12b08:	b12a      	cbz	r2, 12b16 <cfb_framebuffer_invert+0x12>
		return -1;
	}

	fb->inverted = !fb->inverted;
   12b0a:	7d9a      	ldrb	r2, [r3, #22]
   12b0c:	f082 0201 	eor.w	r2, r2, #1
   12b10:	759a      	strb	r2, [r3, #22]

	return 0;
   12b12:	2000      	movs	r0, #0
   12b14:	4770      	bx	lr
		return -1;
   12b16:	f04f 30ff 	mov.w	r0, #4294967295
}
   12b1a:	4770      	bx	lr
   12b1c:	20001f8c 	.word	0x20001f8c

00012b20 <cfb_framebuffer_finalize>:

int cfb_framebuffer_finalize(const struct device *dev)
{
   12b20:	b570      	push	{r4, r5, r6, lr}
	const struct display_driver_api *api = dev->api;
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
   12b22:	4b19      	ldr	r3, [pc, #100]	; (12b88 <cfb_framebuffer_finalize+0x68>)
	const struct display_driver_api *api = dev->api;
   12b24:	6885      	ldr	r5, [r0, #8]
	if (!fb || !fb->buf) {
   12b26:	681a      	ldr	r2, [r3, #0]
{
   12b28:	b086      	sub	sp, #24
	if (!fb || !fb->buf) {
   12b2a:	b352      	cbz	r2, 12b82 <cfb_framebuffer_finalize+0x62>
		return -1;
	}

	desc.buf_size = fb->size;
   12b2c:	685a      	ldr	r2, [r3, #4]
   12b2e:	9203      	str	r2, [sp, #12]
	desc.width = fb->x_res;
   12b30:	89da      	ldrh	r2, [r3, #14]
	desc.height = fb->y_res;
   12b32:	8a19      	ldrh	r1, [r3, #16]
	desc.width = fb->x_res;
   12b34:	f8ad 2010 	strh.w	r2, [sp, #16]
	desc.pitch = fb->x_res;
   12b38:	f8ad 2014 	strh.w	r2, [sp, #20]

	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
   12b3c:	7b1a      	ldrb	r2, [r3, #12]
	desc.height = fb->y_res;
   12b3e:	f8ad 1012 	strh.w	r1, [sp, #18]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
   12b42:	7d99      	ldrb	r1, [r3, #22]
   12b44:	f082 0204 	eor.w	r2, r2, #4
   12b48:	f3c2 0280 	ubfx	r2, r2, #2, #1
   12b4c:	f081 0101 	eor.w	r1, r1, #1
   12b50:	428a      	cmp	r2, r1
   12b52:	d114      	bne.n	12b7e <cfb_framebuffer_finalize+0x5e>
		cfb_invert(fb);
	}

	return api->write(dev, 0, 0, &desc, fb->buf);
   12b54:	681b      	ldr	r3, [r3, #0]
   12b56:	9300      	str	r3, [sp, #0]
   12b58:	2200      	movs	r2, #0
   12b5a:	68ac      	ldr	r4, [r5, #8]
   12b5c:	ab03      	add	r3, sp, #12
   12b5e:	4611      	mov	r1, r2
   12b60:	47a0      	blx	r4
}
   12b62:	b006      	add	sp, #24
   12b64:	bd70      	pop	{r4, r5, r6, pc}
		fb->buf[i] = ~fb->buf[i];
   12b66:	5ca1      	ldrb	r1, [r4, r2]
   12b68:	43c9      	mvns	r1, r1
   12b6a:	54a1      	strb	r1, [r4, r2]
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
   12b6c:	3201      	adds	r2, #1
   12b6e:	89de      	ldrh	r6, [r3, #14]
   12b70:	8a19      	ldrh	r1, [r3, #16]
   12b72:	681c      	ldr	r4, [r3, #0]
   12b74:	4371      	muls	r1, r6
   12b76:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   12b7a:	d3f4      	bcc.n	12b66 <cfb_framebuffer_finalize+0x46>
   12b7c:	e7ea      	b.n	12b54 <cfb_framebuffer_finalize+0x34>
   12b7e:	2200      	movs	r2, #0
   12b80:	e7f5      	b.n	12b6e <cfb_framebuffer_finalize+0x4e>
		return -1;
   12b82:	f04f 30ff 	mov.w	r0, #4294967295
   12b86:	e7ec      	b.n	12b62 <cfb_framebuffer_finalize+0x42>
   12b88:	20001f8c 	.word	0x20001f8c

00012b8c <cfb_get_display_parameter>:
int cfb_get_display_parameter(const struct device *dev,
			       enum cfb_display_param param)
{
	const struct char_framebuffer *fb = &char_fb;

	switch (param) {
   12b8c:	2904      	cmp	r1, #4
   12b8e:	d81c      	bhi.n	12bca <cfb_get_display_parameter+0x3e>
   12b90:	e8df f001 	tbb	[pc, r1]
   12b94:	0c090603 	.word	0x0c090603
   12b98:	15          	.byte	0x15
   12b99:	00          	.byte	0x00
	case CFB_DISPLAY_HEIGH:
		return fb->y_res;
   12b9a:	4b0d      	ldr	r3, [pc, #52]	; (12bd0 <cfb_get_display_parameter+0x44>)
   12b9c:	8a18      	ldrh	r0, [r3, #16]
   12b9e:	4770      	bx	lr
	case CFB_DISPLAY_WIDTH:
		return fb->x_res;
   12ba0:	4b0b      	ldr	r3, [pc, #44]	; (12bd0 <cfb_get_display_parameter+0x44>)
   12ba2:	89d8      	ldrh	r0, [r3, #14]
   12ba4:	4770      	bx	lr
	case CFB_DISPLAY_PPT:
		return fb->ppt;
   12ba6:	4b0a      	ldr	r3, [pc, #40]	; (12bd0 <cfb_get_display_parameter+0x44>)
   12ba8:	7c98      	ldrb	r0, [r3, #18]
   12baa:	4770      	bx	lr
	case CFB_DISPLAY_ROWS:
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
   12bac:	4b08      	ldr	r3, [pc, #32]	; (12bd0 <cfb_get_display_parameter+0x44>)
   12bae:	7b5a      	ldrb	r2, [r3, #13]
   12bb0:	8a18      	ldrh	r0, [r3, #16]
   12bb2:	07d1      	lsls	r1, r2, #31
   12bb4:	d508      	bpl.n	12bc8 <cfb_get_display_parameter+0x3c>
		return fb->y_res;
	case CFB_DISPLAY_COLS:
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
			return fb->x_res;
		}
		return fb->x_res / fb->ppt;
   12bb6:	7c9b      	ldrb	r3, [r3, #18]
   12bb8:	fbb0 f0f3 	udiv	r0, r0, r3
   12bbc:	4770      	bx	lr
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
   12bbe:	4b04      	ldr	r3, [pc, #16]	; (12bd0 <cfb_get_display_parameter+0x44>)
   12bc0:	7b5a      	ldrb	r2, [r3, #13]
   12bc2:	89d8      	ldrh	r0, [r3, #14]
   12bc4:	07d2      	lsls	r2, r2, #31
   12bc6:	d5f6      	bpl.n	12bb6 <cfb_get_display_parameter+0x2a>
	}
	return 0;
}
   12bc8:	4770      	bx	lr
{
   12bca:	2000      	movs	r0, #0
   12bcc:	e7fc      	b.n	12bc8 <cfb_get_display_parameter+0x3c>
   12bce:	bf00      	nop
   12bd0:	20001f8c 	.word	0x20001f8c

00012bd4 <cfb_framebuffer_set_font>:

int cfb_framebuffer_set_font(const struct device *dev, uint8_t idx)
{
	struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
   12bd4:	4b04      	ldr	r3, [pc, #16]	; (12be8 <cfb_framebuffer_set_font+0x14>)
   12bd6:	7cda      	ldrb	r2, [r3, #19]
   12bd8:	428a      	cmp	r2, r1
		return -1;
	}

	fb->font_idx = idx;

	return 0;
   12bda:	bf86      	itte	hi
   12bdc:	2000      	movhi	r0, #0
	fb->font_idx = idx;
   12bde:	7519      	strbhi	r1, [r3, #20]
		return -1;
   12be0:	f04f 30ff 	movls.w	r0, #4294967295
}
   12be4:	4770      	bx	lr
   12be6:	bf00      	nop
   12be8:	20001f8c 	.word	0x20001f8c

00012bec <cfb_get_font_size>:

int cfb_get_font_size(const struct device *dev, uint8_t idx, uint8_t *width,
		      uint8_t *height)
{
   12bec:	b510      	push	{r4, lr}
   12bee:	4618      	mov	r0, r3
	const struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
   12bf0:	4b0b      	ldr	r3, [pc, #44]	; (12c20 <cfb_get_font_size+0x34>)
   12bf2:	7cdb      	ldrb	r3, [r3, #19]
   12bf4:	428b      	cmp	r3, r1
   12bf6:	d90f      	bls.n	12c18 <cfb_get_font_size+0x2c>
		return -1;
	}

	if (width) {
   12bf8:	b12a      	cbz	r2, 12c06 <cfb_get_font_size+0x1a>
		*width = __font_entry_start[idx].width;
   12bfa:	4c0a      	ldr	r4, [pc, #40]	; (12c24 <cfb_get_font_size+0x38>)
   12bfc:	230c      	movs	r3, #12
   12bfe:	fb03 4301 	mla	r3, r3, r1, r4
   12c02:	795b      	ldrb	r3, [r3, #5]
   12c04:	7013      	strb	r3, [r2, #0]
	}

	if (height) {
   12c06:	b130      	cbz	r0, 12c16 <cfb_get_font_size+0x2a>
		*height = __font_entry_start[idx].height;
   12c08:	4b06      	ldr	r3, [pc, #24]	; (12c24 <cfb_get_font_size+0x38>)
   12c0a:	220c      	movs	r2, #12
   12c0c:	fb02 3101 	mla	r1, r2, r1, r3
   12c10:	798b      	ldrb	r3, [r1, #6]
   12c12:	7003      	strb	r3, [r0, #0]
	}

	return 0;
   12c14:	2000      	movs	r0, #0
}
   12c16:	bd10      	pop	{r4, pc}
		return -1;
   12c18:	f04f 30ff 	mov.w	r0, #4294967295
   12c1c:	e7fb      	b.n	12c16 <cfb_get_font_size+0x2a>
   12c1e:	bf00      	nop
   12c20:	20001f8c 	.word	0x20001f8c
   12c24:	00028760 	.word	0x00028760

00012c28 <cfb_framebuffer_init>:

	return fb->numof_fonts;
}

int cfb_framebuffer_init(const struct device *dev)
{
   12c28:	b530      	push	{r4, r5, lr}
	const struct display_driver_api *api = dev->api;
	struct char_framebuffer *fb = &char_fb;
	struct display_capabilities cfg;

	api->get_capabilities(dev, &cfg);
   12c2a:	6883      	ldr	r3, [r0, #8]

	fb->numof_fonts = __font_entry_end - __font_entry_start;
   12c2c:	4d1f      	ldr	r5, [pc, #124]	; (12cac <cfb_framebuffer_init+0x84>)
	api->get_capabilities(dev, &cfg);
   12c2e:	69db      	ldr	r3, [r3, #28]
	fb->numof_fonts = __font_entry_end - __font_entry_start;
   12c30:	4c1f      	ldr	r4, [pc, #124]	; (12cb0 <cfb_framebuffer_init+0x88>)
{
   12c32:	b085      	sub	sp, #20
	api->get_capabilities(dev, &cfg);
   12c34:	4669      	mov	r1, sp
   12c36:	4798      	blx	r3
	fb->numof_fonts = __font_entry_end - __font_entry_start;
   12c38:	4a1e      	ldr	r2, [pc, #120]	; (12cb4 <cfb_framebuffer_init+0x8c>)
   12c3a:	4b1f      	ldr	r3, [pc, #124]	; (12cb8 <cfb_framebuffer_init+0x90>)
   12c3c:	491f      	ldr	r1, [pc, #124]	; (12cbc <cfb_framebuffer_init+0x94>)
	LOG_DBG("number of fonts %d", fb->numof_fonts);
   12c3e:	4820      	ldr	r0, [pc, #128]	; (12cc0 <cfb_framebuffer_init+0x98>)
	fb->numof_fonts = __font_entry_end - __font_entry_start;
   12c40:	1b52      	subs	r2, r2, r5
   12c42:	1092      	asrs	r2, r2, #2
   12c44:	435a      	muls	r2, r3
   12c46:	4b1f      	ldr	r3, [pc, #124]	; (12cc4 <cfb_framebuffer_init+0x9c>)
   12c48:	74e2      	strb	r2, [r4, #19]
   12c4a:	1a5b      	subs	r3, r3, r1
   12c4c:	08db      	lsrs	r3, r3, #3
	LOG_DBG("number of fonts %d", fb->numof_fonts);
   12c4e:	019b      	lsls	r3, r3, #6
   12c50:	f043 0304 	orr.w	r3, r3, #4
   12c54:	491c      	ldr	r1, [pc, #112]	; (12cc8 <cfb_framebuffer_init+0xa0>)
   12c56:	b2d2      	uxtb	r2, r2
   12c58:	f011 ff8e 	bl	24b78 <log_2>
	if (!fb->numof_fonts) {
   12c5c:	7ce3      	ldrb	r3, [r4, #19]
   12c5e:	b91b      	cbnz	r3, 12c68 <cfb_framebuffer_init+0x40>
		return -1;
   12c60:	f04f 30ff 	mov.w	r0, #4294967295
	}

	memset(fb->buf, 0, fb->size);

	return 0;
}
   12c64:	b005      	add	sp, #20
   12c66:	bd30      	pop	{r4, r5, pc}
	fb->x_res = cfg.x_resolution;
   12c68:	f8bd 3000 	ldrh.w	r3, [sp]
	fb->y_res = cfg.y_resolution;
   12c6c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   12c70:	8220      	strh	r0, [r4, #16]
	fb->ppt = 8U;
   12c72:	2208      	movs	r2, #8
	fb->size = fb->x_res * fb->y_res / fb->ppt;
   12c74:	4358      	muls	r0, r3
	fb->ppt = 8U;
   12c76:	74a2      	strb	r2, [r4, #18]
	fb->pixel_format = cfg.current_pixel_format;
   12c78:	f89d 200c 	ldrb.w	r2, [sp, #12]
   12c7c:	7322      	strb	r2, [r4, #12]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
   12c7e:	bf48      	it	mi
   12c80:	3007      	addmi	r0, #7
	fb->screen_info = cfg.screen_info;
   12c82:	9a02      	ldr	r2, [sp, #8]
   12c84:	7362      	strb	r2, [r4, #13]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
   12c86:	10c0      	asrs	r0, r0, #3
	fb->buf = NULL;
   12c88:	2200      	movs	r2, #0
	fb->x_res = cfg.x_resolution;
   12c8a:	81e3      	strh	r3, [r4, #14]
	fb->buf = NULL;
   12c8c:	6022      	str	r2, [r4, #0]
	fb->font_idx = 0U;
   12c8e:	82a2      	strh	r2, [r4, #20]
	fb->inverted = false;
   12c90:	75a2      	strb	r2, [r4, #22]
	fb->fonts = __font_entry_start;
   12c92:	60a5      	str	r5, [r4, #8]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
   12c94:	6060      	str	r0, [r4, #4]
	fb->buf = k_malloc(fb->size);
   12c96:	f015 fb06 	bl	282a6 <k_malloc>
   12c9a:	6020      	str	r0, [r4, #0]
	if (!fb->buf) {
   12c9c:	2800      	cmp	r0, #0
   12c9e:	d0df      	beq.n	12c60 <cfb_framebuffer_init+0x38>
	memset(fb->buf, 0, fb->size);
   12ca0:	6862      	ldr	r2, [r4, #4]
   12ca2:	2100      	movs	r1, #0
   12ca4:	f012 fe69 	bl	2597a <memset>
	return 0;
   12ca8:	2000      	movs	r0, #0
   12caa:	e7db      	b.n	12c64 <cfb_framebuffer_init+0x3c>
   12cac:	00028760 	.word	0x00028760
   12cb0:	20001f8c 	.word	0x20001f8c
   12cb4:	00028784 	.word	0x00028784
   12cb8:	aaaaaaab 	.word	0xaaaaaaab
   12cbc:	00028618 	.word	0x00028618
   12cc0:	0002970f 	.word	0x0002970f
   12cc4:	00028698 	.word	0x00028698
   12cc8:	0002972a 	.word	0x0002972a

00012ccc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12cd0:	4605      	mov	r5, r0
	__asm__ volatile(
   12cd2:	f04f 0340 	mov.w	r3, #64	; 0x40
   12cd6:	f3ef 8611 	mrs	r6, BASEPRI
   12cda:	f383 8812 	msr	BASEPRI_MAX, r3
   12cde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12ce2:	4823      	ldr	r0, [pc, #140]	; (12d70 <pm_state_notify+0xa4>)
   12ce4:	f00e faf8 	bl	212d8 <z_spin_lock_valid>
   12ce8:	b968      	cbnz	r0, 12d06 <pm_state_notify+0x3a>
   12cea:	4a22      	ldr	r2, [pc, #136]	; (12d74 <pm_state_notify+0xa8>)
   12cec:	4922      	ldr	r1, [pc, #136]	; (12d78 <pm_state_notify+0xac>)
   12cee:	4823      	ldr	r0, [pc, #140]	; (12d7c <pm_state_notify+0xb0>)
   12cf0:	2381      	movs	r3, #129	; 0x81
   12cf2:	f011 fd01 	bl	246f8 <printk>
   12cf6:	491e      	ldr	r1, [pc, #120]	; (12d70 <pm_state_notify+0xa4>)
   12cf8:	4821      	ldr	r0, [pc, #132]	; (12d80 <pm_state_notify+0xb4>)
   12cfa:	f011 fcfd 	bl	246f8 <printk>
   12cfe:	481d      	ldr	r0, [pc, #116]	; (12d74 <pm_state_notify+0xa8>)
   12d00:	2181      	movs	r1, #129	; 0x81
   12d02:	f011 feea 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   12d06:	481a      	ldr	r0, [pc, #104]	; (12d70 <pm_state_notify+0xa4>)
   12d08:	f00e fb04 	bl	21314 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12d0c:	4b1d      	ldr	r3, [pc, #116]	; (12d84 <pm_state_notify+0xb8>)
   12d0e:	681c      	ldr	r4, [r3, #0]
   12d10:	2c00      	cmp	r4, #0
   12d12:	bf38      	it	cc
   12d14:	2400      	movcc	r4, #0
   12d16:	b19c      	cbz	r4, 12d40 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   12d18:	4f1b      	ldr	r7, [pc, #108]	; (12d88 <pm_state_notify+0xbc>)
   12d1a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12d94 <pm_state_notify+0xc8>
   12d1e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   12d22:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12d26:	2d00      	cmp	r5, #0
   12d28:	bf08      	it	eq
   12d2a:	4613      	moveq	r3, r2
		if (callback) {
   12d2c:	b12b      	cbz	r3, 12d3a <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   12d2e:	f898 2014 	ldrb.w	r2, [r8, #20]
   12d32:	fb09 f202 	mul.w	r2, r9, r2
   12d36:	5cb8      	ldrb	r0, [r7, r2]
   12d38:	4798      	blx	r3
   12d3a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12d3c:	2c00      	cmp	r4, #0
   12d3e:	d1f0      	bne.n	12d22 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12d40:	480b      	ldr	r0, [pc, #44]	; (12d70 <pm_state_notify+0xa4>)
   12d42:	f00e fad7 	bl	212f4 <z_spin_unlock_valid>
   12d46:	b968      	cbnz	r0, 12d64 <pm_state_notify+0x98>
   12d48:	4a0a      	ldr	r2, [pc, #40]	; (12d74 <pm_state_notify+0xa8>)
   12d4a:	4910      	ldr	r1, [pc, #64]	; (12d8c <pm_state_notify+0xc0>)
   12d4c:	480b      	ldr	r0, [pc, #44]	; (12d7c <pm_state_notify+0xb0>)
   12d4e:	23ac      	movs	r3, #172	; 0xac
   12d50:	f011 fcd2 	bl	246f8 <printk>
   12d54:	4906      	ldr	r1, [pc, #24]	; (12d70 <pm_state_notify+0xa4>)
   12d56:	480e      	ldr	r0, [pc, #56]	; (12d90 <pm_state_notify+0xc4>)
   12d58:	f011 fcce 	bl	246f8 <printk>
   12d5c:	4805      	ldr	r0, [pc, #20]	; (12d74 <pm_state_notify+0xa8>)
   12d5e:	21ac      	movs	r1, #172	; 0xac
   12d60:	f011 febb 	bl	24ada <assert_post_action>
	__asm__ volatile(
   12d64:	f386 8811 	msr	BASEPRI, r6
   12d68:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d70:	20001fa4 	.word	0x20001fa4
   12d74:	000291b5 	.word	0x000291b5
   12d78:	00029207 	.word	0x00029207
   12d7c:	000290f5 	.word	0x000290f5
   12d80:	0002921c 	.word	0x0002921c
   12d84:	20001fa8 	.word	0x20001fa8
   12d88:	20001fb4 	.word	0x20001fb4
   12d8c:	000291db 	.word	0x000291db
   12d90:	000291f2 	.word	0x000291f2
   12d94:	20002508 	.word	0x20002508

00012d98 <atomic_test_and_set_bit.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   12d98:	f000 031f 	and.w	r3, r0, #31
   12d9c:	2201      	movs	r2, #1
   12d9e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12da0:	4b0a      	ldr	r3, [pc, #40]	; (12dcc <atomic_test_and_set_bit.constprop.0+0x34>)
   12da2:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12da6:	0940      	lsrs	r0, r0, #5
   12da8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12dac:	e850 3f00 	ldrex	r3, [r0]
   12db0:	ea43 0102 	orr.w	r1, r3, r2
   12db4:	e840 1c00 	strex	ip, r1, [r0]
   12db8:	f1bc 0f00 	cmp.w	ip, #0
   12dbc:	d1f6      	bne.n	12dac <atomic_test_and_set_bit.constprop.0+0x14>
   12dbe:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   12dc2:	421a      	tst	r2, r3
}
   12dc4:	bf14      	ite	ne
   12dc6:	2001      	movne	r0, #1
   12dc8:	2000      	moveq	r0, #0
   12dca:	4770      	bx	lr
   12dcc:	20001fc0 	.word	0x20001fc0

00012dd0 <pm_system_resume>:

void pm_system_resume(void)
{
   12dd0:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12dd2:	4b1d      	ldr	r3, [pc, #116]	; (12e48 <pm_system_resume+0x78>)
   12dd4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12dd6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12dda:	f005 031f 	and.w	r3, r5, #31
   12dde:	2201      	movs	r2, #1
   12de0:	409a      	lsls	r2, r3
   12de2:	4b1a      	ldr	r3, [pc, #104]	; (12e4c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12de4:	0969      	lsrs	r1, r5, #5
{
   12de6:	b085      	sub	sp, #20
   12de8:	43d0      	mvns	r0, r2
   12dea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12dee:	e853 1f00 	ldrex	r1, [r3]
   12df2:	ea01 0400 	and.w	r4, r1, r0
   12df6:	e843 4c00 	strex	ip, r4, [r3]
   12dfa:	f1bc 0f00 	cmp.w	ip, #0
   12dfe:	d1f6      	bne.n	12dee <pm_system_resume+0x1e>
   12e00:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12e04:	4211      	tst	r1, r2
   12e06:	d017      	beq.n	12e38 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   12e08:	4c11      	ldr	r4, [pc, #68]	; (12e50 <pm_system_resume+0x80>)
   12e0a:	220c      	movs	r2, #12
   12e0c:	fb02 4205 	mla	r2, r2, r5, r4
   12e10:	ca07      	ldmia	r2, {r0, r1, r2}
   12e12:	ab01      	add	r3, sp, #4
   12e14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12e18:	4a0e      	ldr	r2, [pc, #56]	; (12e54 <pm_system_resume+0x84>)
   12e1a:	b17a      	cbz	r2, 12e3c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   12e1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12e20:	f012 fdd7 	bl	259d2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   12e24:	2000      	movs	r0, #0
   12e26:	f7ff ff51 	bl	12ccc <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12e2a:	230c      	movs	r3, #12
   12e2c:	436b      	muls	r3, r5
   12e2e:	2200      	movs	r2, #0
   12e30:	18e1      	adds	r1, r4, r3
   12e32:	50e2      	str	r2, [r4, r3]
   12e34:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   12e38:	b005      	add	sp, #20
   12e3a:	bd30      	pop	{r4, r5, pc}
   12e3c:	f382 8811 	msr	BASEPRI, r2
   12e40:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12e44:	e7ee      	b.n	12e24 <pm_system_resume+0x54>
   12e46:	bf00      	nop
   12e48:	20002508 	.word	0x20002508
   12e4c:	20001fb0 	.word	0x20001fb0
   12e50:	20001fb4 	.word	0x20001fb4
   12e54:	000259d3 	.word	0x000259d3

00012e58 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12e5c:	4b37      	ldr	r3, [pc, #220]	; (12f3c <pm_system_suspend+0xe4>)
   12e5e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 12f54 <pm_system_suspend+0xfc>
   12e62:	7d1c      	ldrb	r4, [r3, #20]
{
   12e64:	b088      	sub	sp, #32
   12e66:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   12e68:	4620      	mov	r0, r4
   12e6a:	f7ff ff95 	bl	12d98 <atomic_test_and_set_bit.constprop.0>
   12e6e:	b960      	cbnz	r0, 12e8a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12e70:	466e      	mov	r6, sp
   12e72:	463a      	mov	r2, r7
   12e74:	4621      	mov	r1, r4
   12e76:	4630      	mov	r0, r6
   12e78:	f012 f973 	bl	25162 <pm_policy_next_state>
   12e7c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12e80:	250c      	movs	r5, #12
   12e82:	fb05 8504 	mla	r5, r5, r4, r8
   12e86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   12e8a:	230c      	movs	r3, #12
   12e8c:	4363      	muls	r3, r4
   12e8e:	eb08 0203 	add.w	r2, r8, r3
   12e92:	f818 0003 	ldrb.w	r0, [r8, r3]
   12e96:	0965      	lsrs	r5, r4, #5
   12e98:	f004 061f 	and.w	r6, r4, #31
   12e9c:	b3c8      	cbz	r0, 12f12 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   12e9e:	1c7b      	adds	r3, r7, #1
   12ea0:	d00f      	beq.n	12ec2 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12ea2:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12ea6:	4826      	ldr	r0, [pc, #152]	; (12f40 <pm_system_suspend+0xe8>)
   12ea8:	4a26      	ldr	r2, [pc, #152]	; (12f44 <pm_system_suspend+0xec>)
   12eaa:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   12eae:	2100      	movs	r1, #0
   12eb0:	2300      	movs	r3, #0
   12eb2:	fbec 010e 	umlal	r0, r1, ip, lr
   12eb6:	f7ed f913 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12eba:	2101      	movs	r1, #1
   12ebc:	1a38      	subs	r0, r7, r0
   12ebe:	f010 ff99 	bl	23df4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12ec2:	f00f fc9d 	bl	22800 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12ec6:	2001      	movs	r0, #1
   12ec8:	f7ff ff00 	bl	12ccc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ecc:	f3bf 8f5b 	dmb	ish
   12ed0:	4b1d      	ldr	r3, [pc, #116]	; (12f48 <pm_system_suspend+0xf0>)
	atomic_val_t mask = ATOMIC_MASK(bit);
   12ed2:	2201      	movs	r2, #1
   12ed4:	40b2      	lsls	r2, r6
   12ed6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   12eda:	e853 1f00 	ldrex	r1, [r3]
   12ede:	4311      	orrs	r1, r2
   12ee0:	e843 1000 	strex	r0, r1, [r3]
   12ee4:	2800      	cmp	r0, #0
   12ee6:	d1f8      	bne.n	12eda <pm_system_suspend+0x82>
   12ee8:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12eec:	230c      	movs	r3, #12
   12eee:	fb03 8404 	mla	r4, r3, r4, r8
   12ef2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12ef6:	ab05      	add	r3, sp, #20
   12ef8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12efc:	4a13      	ldr	r2, [pc, #76]	; (12f4c <pm_system_suspend+0xf4>)
   12efe:	b11a      	cbz	r2, 12f08 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   12f00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12f04:	f012 fd52 	bl	259ac <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   12f08:	f7ff ff62 	bl	12dd0 <pm_system_resume>
	k_sched_unlock();
   12f0c:	f010 f9bc 	bl	23288 <k_sched_unlock>
	bool ret = true;
   12f10:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f12:	4a0f      	ldr	r2, [pc, #60]	; (12f50 <pm_system_suspend+0xf8>)
   12f14:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f18:	2301      	movs	r3, #1
   12f1a:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f1c:	43db      	mvns	r3, r3
   12f1e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   12f22:	e855 2f00 	ldrex	r2, [r5]
   12f26:	401a      	ands	r2, r3
   12f28:	e845 2100 	strex	r1, r2, [r5]
   12f2c:	2900      	cmp	r1, #0
   12f2e:	d1f8      	bne.n	12f22 <pm_system_suspend+0xca>
   12f30:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12f34:	b008      	add	sp, #32
   12f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f3a:	bf00      	nop
   12f3c:	20002508 	.word	0x20002508
   12f40:	000f423f 	.word	0x000f423f
   12f44:	000f4240 	.word	0x000f4240
   12f48:	20001fb0 	.word	0x20001fb0
   12f4c:	000259ad 	.word	0x000259ad
   12f50:	20001fc0 	.word	0x20001fc0
   12f54:	20001fb4 	.word	0x20001fb4

00012f58 <get_uuid_size.isra.0.part.0>:

	dm->cur_chunk_len = 0;
}

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
   12f58:	b508      	push	{r3, lr}
   12f5a:	4906      	ldr	r1, [pc, #24]	; (12f74 <get_uuid_size.isra.0.part.0+0x1c>)
   12f5c:	4b06      	ldr	r3, [pc, #24]	; (12f78 <get_uuid_size.isra.0.part.0+0x20>)
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
   12f5e:	4807      	ldr	r0, [pc, #28]	; (12f7c <get_uuid_size.isra.0.part.0+0x24>)
   12f60:	1ac9      	subs	r1, r1, r3
   12f62:	08c9      	lsrs	r1, r1, #3
   12f64:	0189      	lsls	r1, r1, #6
   12f66:	f041 0101 	orr.w	r1, r1, #1
   12f6a:	f011 fde4 	bl	24b36 <log_0>
		return 0;
	}
}
   12f6e:	2000      	movs	r0, #0
   12f70:	bd08      	pop	{r3, pc}
   12f72:	bf00      	nop
   12f74:	00028640 	.word	0x00028640
   12f78:	00028618 	.word	0x00028618
   12f7c:	0002cd11 	.word	0x0002cd11

00012f80 <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
   12f80:	b538      	push	{r3, r4, r5, lr}
	len = ROUND_UP(len, DATA_ALIGN);
   12f82:	1cc5      	adds	r5, r0, #3
   12f84:	f025 0503 	bic.w	r5, r5, #3
	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   12f88:	2d74      	cmp	r5, #116	; 0x74
   12f8a:	d909      	bls.n	12fa0 <user_data_alloc.constprop.0+0x20>
   12f8c:	4919      	ldr	r1, [pc, #100]	; (12ff4 <user_data_alloc.constprop.0+0x74>)
   12f8e:	481a      	ldr	r0, [pc, #104]	; (12ff8 <user_data_alloc.constprop.0+0x78>)
   12f90:	4a1a      	ldr	r2, [pc, #104]	; (12ffc <user_data_alloc.constprop.0+0x7c>)
   12f92:	2350      	movs	r3, #80	; 0x50
   12f94:	f011 fbb0 	bl	246f8 <printk>
   12f98:	4818      	ldr	r0, [pc, #96]	; (12ffc <user_data_alloc.constprop.0+0x7c>)
   12f9a:	2150      	movs	r1, #80	; 0x50
   12f9c:	f011 fd9d 	bl	24ada <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   12fa0:	4c17      	ldr	r4, [pc, #92]	; (13000 <user_data_alloc.constprop.0+0x80>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
   12fa2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12fa6:	b123      	cbz	r3, 12fb2 <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   12fa8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   12fac:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   12fae:	2b74      	cmp	r3, #116	; 0x74
   12fb0:	d919      	bls.n	12fe6 <user_data_alloc.constprop.0+0x66>
		item = k_calloc(1, sizeof(struct data_chunk_item));
   12fb2:	2178      	movs	r1, #120	; 0x78
   12fb4:	2001      	movs	r0, #1
   12fb6:	f015 f97a 	bl	282ae <k_calloc>
		if (!item) {
   12fba:	b178      	cbz	r0, 12fdc <user_data_alloc.constprop.0+0x5c>
	parent->next = child;
   12fbc:	2300      	movs	r3, #0
   12fbe:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   12fc0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   12fc4:	b95a      	cbnz	r2, 12fde <user_data_alloc.constprop.0+0x5e>
	list->head = node;
   12fc6:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
		dm->cur_chunk_len = 0;
   12fca:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	user_data_loc = &item->data[dm->cur_chunk_len];
   12fce:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   12fd2:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   12fd4:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   12fd6:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   12fd8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
}
   12fdc:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   12fde:	6010      	str	r0, [r2, #0]
	list->tail = node;
   12fe0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
   12fe4:	e7f1      	b.n	12fca <user_data_alloc.constprop.0+0x4a>
	return list->tail;
   12fe6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
   12fea:	2800      	cmp	r0, #0
   12fec:	bf38      	it	cc
   12fee:	2000      	movcc	r0, #0
   12ff0:	e7ed      	b.n	12fce <user_data_alloc.constprop.0+0x4e>
   12ff2:	bf00      	nop
   12ff4:	0002cd53 	.word	0x0002cd53
   12ff8:	000290f5 	.word	0x000290f5
   12ffc:	0002cd28 	.word	0x0002cd28
   13000:	20001fc4 	.word	0x20001fc4

00013004 <attr_store.constprop.0>:
 * @param[in] attr           Service attribute
 * @param[in] additional_len Additional buffer length
 *
 * @return Pointer to newly stored attribute.
 */
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   13004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_dm_attr *cur_attr;

	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
		dm->cur_attr_id,
		attr->handle);
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   13008:	4c23      	ldr	r4, [pc, #140]	; (13098 <attr_store.constprop.0+0x94>)
   1300a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   1300e:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   13010:	4607      	mov	r7, r0
   13012:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   13014:	d90d      	bls.n	13032 <attr_store.constprop.0+0x2e>
   13016:	4b21      	ldr	r3, [pc, #132]	; (1309c <attr_store.constprop.0+0x98>)
   13018:	4921      	ldr	r1, [pc, #132]	; (130a0 <attr_store.constprop.0+0x9c>)
		LOG_ERR("No space for new attribute.");
   1301a:	4822      	ldr	r0, [pc, #136]	; (130a4 <attr_store.constprop.0+0xa0>)
   1301c:	1ac9      	subs	r1, r1, r3
   1301e:	08c9      	lsrs	r1, r1, #3
   13020:	0189      	lsls	r1, r1, #6
   13022:	f041 0101 	orr.w	r1, r1, #1
   13026:	f011 fd86 	bl	24b36 <log_0>
		return NULL;
   1302a:	2500      	movs	r5, #0
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];

	memcpy(cur_attr->uuid, attr->uuid, uuid_size);

	return cur_attr;
}
   1302c:	4628      	mov	r0, r5
   1302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   13032:	6803      	ldr	r3, [r0, #0]
   13034:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
   13036:	2b02      	cmp	r3, #2
   13038:	d813      	bhi.n	13062 <attr_store.constprop.0+0x5e>
   1303a:	4a1b      	ldr	r2, [pc, #108]	; (130a8 <attr_store.constprop.0+0xa4>)
   1303c:	f812 8003 	ldrb.w	r8, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   13040:	eb06 0008 	add.w	r0, r6, r8
   13044:	f7ff ff9c 	bl	12f80 <user_data_alloc.constprop.0>
	if (!attr_data) {
   13048:	4605      	mov	r5, r0
   1304a:	b970      	cbnz	r0, 1306a <attr_store.constprop.0+0x66>
   1304c:	4b13      	ldr	r3, [pc, #76]	; (1309c <attr_store.constprop.0+0x98>)
   1304e:	4914      	ldr	r1, [pc, #80]	; (130a0 <attr_store.constprop.0+0x9c>)
		LOG_ERR("No space for attribute data.");
   13050:	4816      	ldr	r0, [pc, #88]	; (130ac <attr_store.constprop.0+0xa8>)
   13052:	1ac9      	subs	r1, r1, r3
   13054:	08c9      	lsrs	r1, r1, #3
   13056:	0189      	lsls	r1, r1, #6
   13058:	f041 0101 	orr.w	r1, r1, #1
   1305c:	f011 fd6b 	bl	24b36 <log_0>
		return NULL;
   13060:	e7e4      	b.n	1302c <attr_store.constprop.0+0x28>
   13062:	f7ff ff79 	bl	12f58 <get_uuid_size.isra.0.part.0>
   13066:	4680      	mov	r8, r0
   13068:	e7ea      	b.n	13040 <attr_store.constprop.0+0x3c>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   1306a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   1306e:	6839      	ldr	r1, [r7, #0]
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   13070:	1c5a      	adds	r2, r3, #1
   13072:	3303      	adds	r3, #3
   13074:	00db      	lsls	r3, r3, #3
   13076:	f103 0904 	add.w	r9, r3, #4
   1307a:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   1307e:	44a1      	add	r9, r4
	cur_attr->handle = attr->handle;
   13080:	441c      	add	r4, r3
   13082:	8a3b      	ldrh	r3, [r7, #16]
   13084:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
   13086:	7cbb      	ldrb	r3, [r7, #18]
   13088:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   1308a:	4430      	add	r0, r6
   1308c:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   1308e:	4642      	mov	r2, r8
   13090:	f012 fc68 	bl	25964 <memcpy>
	return cur_attr;
   13094:	464d      	mov	r5, r9
   13096:	e7c9      	b.n	1302c <attr_store.constprop.0+0x28>
   13098:	20001fc4 	.word	0x20001fc4
   1309c:	00028618 	.word	0x00028618
   130a0:	00028640 	.word	0x00028640
   130a4:	0002cda3 	.word	0x0002cda3
   130a8:	0002d107 	.word	0x0002d107
   130ac:	0002cdbf 	.word	0x0002cdbf

000130b0 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   130b0:	480a      	ldr	r0, [pc, #40]	; (130dc <discovery_complete.constprop.0+0x2c>)
   130b2:	f3bf 8f5b 	dmb	ish
   130b6:	f500 739c 	add.w	r3, r0, #312	; 0x138
   130ba:	e853 2f00 	ldrex	r2, [r3]
   130be:	f042 0202 	orr.w	r2, r2, #2
   130c2:	e843 2100 	strex	r1, r2, [r3]
   130c6:	2900      	cmp	r1, #0
   130c8:	d1f7      	bne.n	130ba <discovery_complete.constprop.0+0xa>
   130ca:	f3bf 8f5b 	dmb	ish

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   130ce:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   130d2:	681b      	ldr	r3, [r3, #0]
   130d4:	b10b      	cbz	r3, 130da <discovery_complete.constprop.0+0x2a>
		dm->callback->completed(dm, dm->context);
   130d6:	6841      	ldr	r1, [r0, #4]
   130d8:	4718      	bx	r3
	}
}
   130da:	4770      	bx	lr
   130dc:	20001fc4 	.word	0x20001fc4

000130e0 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   130e0:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   130e2:	4604      	mov	r4, r0
   130e4:	b960      	cbnz	r0, 13100 <uuid_store.constprop.0+0x20>
   130e6:	4b15      	ldr	r3, [pc, #84]	; (1313c <uuid_store.constprop.0+0x5c>)
   130e8:	4915      	ldr	r1, [pc, #84]	; (13140 <uuid_store.constprop.0+0x60>)
		LOG_ERR("Uninitialized UUID.");
   130ea:	4816      	ldr	r0, [pc, #88]	; (13144 <uuid_store.constprop.0+0x64>)
   130ec:	1ac9      	subs	r1, r1, r3
   130ee:	08c9      	lsrs	r1, r1, #3
   130f0:	0189      	lsls	r1, r1, #6
   130f2:	f041 0101 	orr.w	r1, r1, #1
   130f6:	f011 fd1e 	bl	24b36 <log_0>
		return NULL;
   130fa:	4625      	mov	r5, r4
}
   130fc:	4628      	mov	r0, r5
   130fe:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   13100:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
   13102:	2b02      	cmp	r3, #2
   13104:	d811      	bhi.n	1312a <uuid_store.constprop.0+0x4a>
   13106:	4a10      	ldr	r2, [pc, #64]	; (13148 <uuid_store.constprop.0+0x68>)
   13108:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
   1310a:	4630      	mov	r0, r6
   1310c:	f7ff ff38 	bl	12f80 <user_data_alloc.constprop.0>
	if (!buffer) {
   13110:	4605      	mov	r5, r0
   13112:	b970      	cbnz	r0, 13132 <uuid_store.constprop.0+0x52>
   13114:	4b09      	ldr	r3, [pc, #36]	; (1313c <uuid_store.constprop.0+0x5c>)
   13116:	490a      	ldr	r1, [pc, #40]	; (13140 <uuid_store.constprop.0+0x60>)
		LOG_ERR("No space for a UUID.");
   13118:	480c      	ldr	r0, [pc, #48]	; (1314c <uuid_store.constprop.0+0x6c>)
   1311a:	1ac9      	subs	r1, r1, r3
   1311c:	08c9      	lsrs	r1, r1, #3
   1311e:	0189      	lsls	r1, r1, #6
   13120:	f041 0101 	orr.w	r1, r1, #1
   13124:	f011 fd07 	bl	24b36 <log_0>
		return NULL;
   13128:	e7e8      	b.n	130fc <uuid_store.constprop.0+0x1c>
   1312a:	f7ff ff15 	bl	12f58 <get_uuid_size.isra.0.part.0>
   1312e:	4606      	mov	r6, r0
   13130:	e7eb      	b.n	1310a <uuid_store.constprop.0+0x2a>
	memcpy(buffer, uuid, size);
   13132:	4632      	mov	r2, r6
   13134:	4621      	mov	r1, r4
   13136:	f012 fc15 	bl	25964 <memcpy>
	return (struct bt_uuid *)buffer;
   1313a:	e7df      	b.n	130fc <uuid_store.constprop.0+0x1c>
   1313c:	00028618 	.word	0x00028618
   13140:	00028640 	.word	0x00028640
   13144:	0002cddc 	.word	0x0002cddc
   13148:	0002d107 	.word	0x0002d107
   1314c:	0002cdf0 	.word	0x0002cdf0

00013150 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   13150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   13154:	4ea6      	ldr	r6, [pc, #664]	; (133f0 <discovery_callback+0x2a0>)
   13156:	6833      	ldr	r3, [r6, #0]
   13158:	4283      	cmp	r3, r0
{
   1315a:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   1315c:	4637      	mov	r7, r6
   1315e:	d00d      	beq.n	1317c <discovery_callback+0x2c>
   13160:	4ba4      	ldr	r3, [pc, #656]	; (133f4 <discovery_callback+0x2a4>)
   13162:	49a5      	ldr	r1, [pc, #660]	; (133f8 <discovery_callback+0x2a8>)
		LOG_ERR("Unexpected conn object. Aborting.");
   13164:	48a5      	ldr	r0, [pc, #660]	; (133fc <discovery_callback+0x2ac>)
   13166:	1ac9      	subs	r1, r1, r3
   13168:	08c9      	lsrs	r1, r1, #3
   1316a:	0189      	lsls	r1, r1, #6
   1316c:	f041 0101 	orr.w	r1, r1, #1
   13170:	f011 fce1 	bl	24b36 <log_0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   13174:	f06f 010d 	mvn.w	r1, #13
				discovery_complete_error(dm, err);
   13178:	4630      	mov	r0, r6
   1317a:	e076      	b.n	1326a <discovery_callback+0x11a>
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
   1317c:	7c13      	ldrb	r3, [r2, #16]
   1317e:	2b03      	cmp	r3, #3
   13180:	f000 80f3 	beq.w	1336a <discovery_callback+0x21a>
   13184:	d811      	bhi.n	131aa <discovery_callback+0x5a>
   13186:	2b02      	cmp	r3, #2
   13188:	d131      	bne.n	131ee <discovery_callback+0x9e>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
   1318a:	4a9d      	ldr	r2, [pc, #628]	; (13400 <discovery_callback+0x2b0>)
   1318c:	499d      	ldr	r1, [pc, #628]	; (13404 <discovery_callback+0x2b4>)
   1318e:	489e      	ldr	r0, [pc, #632]	; (13408 <discovery_callback+0x2b8>)
   13190:	f240 13c1 	movw	r3, #449	; 0x1c1
   13194:	f011 fab0 	bl	246f8 <printk>
   13198:	489c      	ldr	r0, [pc, #624]	; (1340c <discovery_callback+0x2bc>)
   1319a:	f011 faad 	bl	246f8 <printk>
   1319e:	4898      	ldr	r0, [pc, #608]	; (13400 <discovery_callback+0x2b0>)
   131a0:	f240 11c1 	movw	r1, #449	; 0x1c1
   131a4:	f011 fc99 	bl	24ada <assert_post_action>
   131a8:	e025      	b.n	131f6 <discovery_callback+0xa6>
	switch (params->type) {
   131aa:	2b05      	cmp	r3, #5
   131ac:	d1ed      	bne.n	1318a <discovery_callback+0x3a>
	if (!attr) {
   131ae:	2900      	cmp	r1, #0
   131b0:	f040 80ad 	bne.w	1330e <discovery_callback+0x1be>
		if (dm->cur_attr_id > 1) {
   131b4:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
   131b8:	2b01      	cmp	r3, #1
   131ba:	f240 80a5 	bls.w	13308 <discovery_callback+0x1b8>
				dm->attrs[0].handle + 1;
   131be:	8c33      	ldrh	r3, [r6, #32]
   131c0:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   131c2:	8233      	strh	r3, [r6, #16]
			int err = bt_gatt_discover(dm->conn,
   131c4:	f106 0108 	add.w	r1, r6, #8
			dm->discover_params.type =
   131c8:	2303      	movs	r3, #3
   131ca:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
   131cc:	f005 fe24 	bl	18e18 <bt_gatt_discover>
			if (err) {
   131d0:	4604      	mov	r4, r0
   131d2:	b180      	cbz	r0, 131f6 <discovery_callback+0xa6>
   131d4:	4b87      	ldr	r3, [pc, #540]	; (133f4 <discovery_callback+0x2a4>)
   131d6:	4a88      	ldr	r2, [pc, #544]	; (133f8 <discovery_callback+0x2a8>)
   131d8:	1ad2      	subs	r2, r2, r3
   131da:	08d2      	lsrs	r2, r2, #3
				LOG_ERR("Characteristic discover failed,"
   131dc:	0192      	lsls	r2, r2, #6
   131de:	4601      	mov	r1, r0
   131e0:	f042 0201 	orr.w	r2, r2, #1
   131e4:	488a      	ldr	r0, [pc, #552]	; (13410 <discovery_callback+0x2c0>)
   131e6:	f011 fcb3 	bl	24b50 <log_1>
				discovery_complete_error(dm, err);
   131ea:	4621      	mov	r1, r4
   131ec:	e7c4      	b.n	13178 <discovery_callback+0x28>
	if (!attr) {
   131ee:	b921      	cbnz	r1, 131fa <discovery_callback+0xaa>
		discovery_complete_not_found(dm);
   131f0:	4630      	mov	r0, r6
   131f2:	f011 ffff 	bl	251f4 <discovery_complete_not_found>
		__ASSERT(false, "Unknown param type.");
   131f6:	2400      	movs	r4, #0
   131f8:	e068      	b.n	132cc <discovery_callback+0x17c>
	struct bt_gatt_service_val *service_val = attr->user_data;
   131fa:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   131fe:	4628      	mov	r0, r5
   13200:	2108      	movs	r1, #8
   13202:	f7ff feff 	bl	13004 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   13206:	2400      	movs	r4, #0
		attr_store(dm, attr, sizeof(*service_val));
   13208:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   1320a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1320e:	6828      	ldr	r0, [r5, #0]
   13210:	f88d 4004 	strb.w	r4, [sp, #4]
   13214:	a901      	add	r1, sp, #4
   13216:	f8ad 3006 	strh.w	r3, [sp, #6]
   1321a:	f012 fc16 	bl	25a4a <bt_uuid_cmp>
   1321e:	b1b0      	cbz	r0, 1324e <discovery_callback+0xfe>
   13220:	f642 0301 	movw	r3, #10241	; 0x2801
   13224:	6828      	ldr	r0, [r5, #0]
   13226:	f88d 4000 	strb.w	r4, [sp]
   1322a:	4669      	mov	r1, sp
   1322c:	f8ad 3002 	strh.w	r3, [sp, #2]
   13230:	f012 fc0b 	bl	25a4a <bt_uuid_cmp>
   13234:	b158      	cbz	r0, 1324e <discovery_callback+0xfe>
   13236:	4977      	ldr	r1, [pc, #476]	; (13414 <discovery_callback+0x2c4>)
   13238:	4873      	ldr	r0, [pc, #460]	; (13408 <discovery_callback+0x2b8>)
   1323a:	4a71      	ldr	r2, [pc, #452]	; (13400 <discovery_callback+0x2b0>)
   1323c:	f44f 738e 	mov.w	r3, #284	; 0x11c
   13240:	f011 fa5a 	bl	246f8 <printk>
   13244:	486e      	ldr	r0, [pc, #440]	; (13400 <discovery_callback+0x2b0>)
   13246:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1324a:	f011 fc46 	bl	24ada <assert_post_action>
	if (!cur_attr) {
   1324e:	b97e      	cbnz	r6, 13270 <discovery_callback+0x120>
   13250:	4b68      	ldr	r3, [pc, #416]	; (133f4 <discovery_callback+0x2a4>)
   13252:	4969      	ldr	r1, [pc, #420]	; (133f8 <discovery_callback+0x2a8>)
		LOG_ERR("Not enough memory for service attribute.");
   13254:	4870      	ldr	r0, [pc, #448]	; (13418 <discovery_callback+0x2c8>)
   13256:	1ac9      	subs	r1, r1, r3
   13258:	08c9      	lsrs	r1, r1, #3
   1325a:	0189      	lsls	r1, r1, #6
   1325c:	f041 0101 	orr.w	r1, r1, #1
   13260:	f011 fc69 	bl	24b36 <log_0>
		discovery_complete_error(dm, -ENOMEM);
   13264:	4862      	ldr	r0, [pc, #392]	; (133f0 <discovery_callback+0x2a0>)
   13266:	f06f 010b 	mvn.w	r1, #11
				discovery_complete_error(dm, err);
   1326a:	f011 ffd7 	bl	2521c <discovery_complete_error>
   1326e:	e7c2      	b.n	131f6 <discovery_callback+0xa6>
		bt_gatt_dm_attr_service_val(cur_attr);
   13270:	4630      	mov	r0, r6
   13272:	f011 ffe9 	bl	25248 <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   13276:	4605      	mov	r5, r0
   13278:	b958      	cbnz	r0, 13292 <discovery_callback+0x142>
   1327a:	4968      	ldr	r1, [pc, #416]	; (1341c <discovery_callback+0x2cc>)
   1327c:	4862      	ldr	r0, [pc, #392]	; (13408 <discovery_callback+0x2b8>)
   1327e:	4a60      	ldr	r2, [pc, #384]	; (13400 <discovery_callback+0x2b0>)
   13280:	f44f 7396 	mov.w	r3, #300	; 0x12c
   13284:	f011 fa38 	bl	246f8 <printk>
   13288:	485d      	ldr	r0, [pc, #372]	; (13400 <discovery_callback+0x2b0>)
   1328a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1328e:	f011 fc24 	bl	24ada <assert_post_action>
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
   13292:	2208      	movs	r2, #8
   13294:	4641      	mov	r1, r8
   13296:	4628      	mov	r0, r5
   13298:	f012 fb64 	bl	25964 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   1329c:	6828      	ldr	r0, [r5, #0]
   1329e:	f7ff ff1f 	bl	130e0 <uuid_store.constprop.0>
   132a2:	4604      	mov	r4, r0
   132a4:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   132a6:	b960      	cbnz	r0, 132c2 <discovery_callback+0x172>
   132a8:	4953      	ldr	r1, [pc, #332]	; (133f8 <discovery_callback+0x2a8>)
   132aa:	4b52      	ldr	r3, [pc, #328]	; (133f4 <discovery_callback+0x2a4>)
		LOG_ERR("Not enough memory for service attribute data.");
   132ac:	485c      	ldr	r0, [pc, #368]	; (13420 <discovery_callback+0x2d0>)
   132ae:	1ac9      	subs	r1, r1, r3
   132b0:	08c9      	lsrs	r1, r1, #3
   132b2:	0189      	lsls	r1, r1, #6
   132b4:	f041 0101 	orr.w	r1, r1, #1
   132b8:	f011 fc3d 	bl	24b36 <log_0>
		discovery_complete_error(dm, -ENOMEM);
   132bc:	f06f 010b 	mvn.w	r1, #11
   132c0:	e075      	b.n	133ae <discovery_callback+0x25e>
	if (cur_attr->handle == cur_service_val->end_handle) {
   132c2:	88aa      	ldrh	r2, [r5, #4]
   132c4:	88b3      	ldrh	r3, [r6, #4]
   132c6:	4293      	cmp	r3, r2
   132c8:	d104      	bne.n	132d4 <discovery_callback+0x184>
	return BT_GATT_ITER_CONTINUE;
   132ca:	2401      	movs	r4, #1
		break;
	}

	return BT_GATT_ITER_STOP;
}
   132cc:	4620      	mov	r0, r4
   132ce:	b002      	add	sp, #8
   132d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   132d4:	2305      	movs	r3, #5
   132d6:	763b      	strb	r3, [r7, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   132d8:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   132da:	4952      	ldr	r1, [pc, #328]	; (13424 <discovery_callback+0x2d4>)
   132dc:	6838      	ldr	r0, [r7, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
   132de:	82fa      	strh	r2, [r7, #22]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   132e0:	3301      	adds	r3, #1
	dm->discover_params.uuid         = NULL;
   132e2:	2400      	movs	r4, #0
   132e4:	60bc      	str	r4, [r7, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   132e6:	823b      	strh	r3, [r7, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   132e8:	f005 fd96 	bl	18e18 <bt_gatt_discover>
	if (err) {
   132ec:	4601      	mov	r1, r0
   132ee:	2800      	cmp	r0, #0
   132f0:	d081      	beq.n	131f6 <discovery_callback+0xa6>
   132f2:	4b40      	ldr	r3, [pc, #256]	; (133f4 <discovery_callback+0x2a4>)
   132f4:	4a40      	ldr	r2, [pc, #256]	; (133f8 <discovery_callback+0x2a8>)
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   132f6:	484c      	ldr	r0, [pc, #304]	; (13428 <discovery_callback+0x2d8>)
   132f8:	1ad2      	subs	r2, r2, r3
   132fa:	08d2      	lsrs	r2, r2, #3
   132fc:	0192      	lsls	r2, r2, #6
   132fe:	f042 0201 	orr.w	r2, r2, #1
   13302:	f011 fc25 	bl	24b50 <log_1>
		discovery_complete_error(dm, -ENOMEM);
   13306:	e7d9      	b.n	132bc <discovery_callback+0x16c>
			discovery_complete(dm);
   13308:	f7ff fed2 	bl	130b0 <discovery_complete.constprop.0>
   1330c:	e773      	b.n	131f6 <discovery_callback+0xa6>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1330e:	2400      	movs	r4, #0
   13310:	f642 0303 	movw	r3, #10243	; 0x2803
   13314:	6828      	ldr	r0, [r5, #0]
   13316:	f88d 4004 	strb.w	r4, [sp, #4]
   1331a:	a901      	add	r1, sp, #4
   1331c:	f8ad 3006 	strh.w	r3, [sp, #6]
   13320:	f012 fb93 	bl	25a4a <bt_uuid_cmp>
   13324:	b948      	cbnz	r0, 1333a <discovery_callback+0x1ea>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   13326:	2108      	movs	r1, #8
   13328:	4628      	mov	r0, r5
   1332a:	f7ff fe6b 	bl	13004 <attr_store.constprop.0>
   1332e:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   13330:	f011 ffaa 	bl	25288 <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   13334:	6823      	ldr	r3, [r4, #0]
   13336:	6003      	str	r3, [r0, #0]
   13338:	e7c7      	b.n	132ca <discovery_callback+0x17a>
		cur_attr = attr_store(dm, attr, 0);
   1333a:	4621      	mov	r1, r4
   1333c:	4628      	mov	r0, r5
   1333e:	f7ff fe61 	bl	13004 <attr_store.constprop.0>
	if (!cur_attr) {
   13342:	4604      	mov	r4, r0
   13344:	2800      	cmp	r0, #0
   13346:	d1c0      	bne.n	132ca <discovery_callback+0x17a>
   13348:	4b2a      	ldr	r3, [pc, #168]	; (133f4 <discovery_callback+0x2a4>)
   1334a:	4a2b      	ldr	r2, [pc, #172]	; (133f8 <discovery_callback+0x2a8>)
		LOG_ERR("Not enough memory for next attribute descriptor"
   1334c:	8a29      	ldrh	r1, [r5, #16]
   1334e:	4837      	ldr	r0, [pc, #220]	; (1342c <discovery_callback+0x2dc>)
   13350:	1ad2      	subs	r2, r2, r3
   13352:	08d2      	lsrs	r2, r2, #3
   13354:	0192      	lsls	r2, r2, #6
   13356:	f042 0201 	orr.w	r2, r2, #1
   1335a:	f011 fbf9 	bl	24b50 <log_1>
		discovery_complete_error(dm, -ENOMEM);
   1335e:	f06f 010b 	mvn.w	r1, #11
   13362:	4630      	mov	r0, r6
		discovery_complete_error(dm, -ENOMEM);
   13364:	f011 ff5a 	bl	2521c <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   13368:	e7b0      	b.n	132cc <discovery_callback+0x17c>
	if (!attr) {
   1336a:	2900      	cmp	r1, #0
   1336c:	d0cc      	beq.n	13308 <discovery_callback+0x1b8>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   1336e:	2300      	movs	r3, #0
   13370:	f88d 3004 	strb.w	r3, [sp, #4]
   13374:	6828      	ldr	r0, [r5, #0]
   13376:	f642 0303 	movw	r3, #10243	; 0x2803
   1337a:	a901      	add	r1, sp, #4
   1337c:	f8ad 3006 	strh.w	r3, [sp, #6]
   13380:	f012 fb63 	bl	25a4a <bt_uuid_cmp>
   13384:	b158      	cbz	r0, 1339e <discovery_callback+0x24e>
   13386:	492a      	ldr	r1, [pc, #168]	; (13430 <discovery_callback+0x2e0>)
   13388:	481f      	ldr	r0, [pc, #124]	; (13408 <discovery_callback+0x2b8>)
   1338a:	4a1d      	ldr	r2, [pc, #116]	; (13400 <discovery_callback+0x2b0>)
   1338c:	f240 138b 	movw	r3, #395	; 0x18b
   13390:	f011 f9b2 	bl	246f8 <printk>
   13394:	481a      	ldr	r0, [pc, #104]	; (13400 <discovery_callback+0x2b0>)
   13396:	f240 118b 	movw	r1, #395	; 0x18b
   1339a:	f011 fb9e 	bl	24ada <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   1339e:	8a29      	ldrh	r1, [r5, #16]
   133a0:	4813      	ldr	r0, [pc, #76]	; (133f0 <discovery_callback+0x2a0>)
   133a2:	f011 fee3 	bl	2516c <attr_find_by_handle>
	if (!cur_attr) {
   133a6:	4604      	mov	r4, r0
   133a8:	b918      	cbnz	r0, 133b2 <discovery_callback+0x262>
		discovery_complete_error(dm, -ESRCH);
   133aa:	f06f 0102 	mvn.w	r1, #2
		discovery_complete_error(dm, -ENOMEM);
   133ae:	4810      	ldr	r0, [pc, #64]	; (133f0 <discovery_callback+0x2a0>)
   133b0:	e7d8      	b.n	13364 <discovery_callback+0x214>
	gatt_chrc = attr->user_data;
   133b2:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   133b4:	f011 ff68 	bl	25288 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   133b8:	4605      	mov	r5, r0
   133ba:	b958      	cbnz	r0, 133d4 <discovery_callback+0x284>
   133bc:	491d      	ldr	r1, [pc, #116]	; (13434 <discovery_callback+0x2e4>)
   133be:	4812      	ldr	r0, [pc, #72]	; (13408 <discovery_callback+0x2b8>)
   133c0:	4a0f      	ldr	r2, [pc, #60]	; (13400 <discovery_callback+0x2b0>)
   133c2:	f240 1397 	movw	r3, #407	; 0x197
   133c6:	f011 f997 	bl	246f8 <printk>
   133ca:	480d      	ldr	r0, [pc, #52]	; (13400 <discovery_callback+0x2b0>)
   133cc:	f240 1197 	movw	r1, #407	; 0x197
   133d0:	f011 fb83 	bl	24ada <assert_post_action>
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
   133d4:	4621      	mov	r1, r4
   133d6:	2208      	movs	r2, #8
   133d8:	4628      	mov	r0, r5
   133da:	f012 fac3 	bl	25964 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   133de:	6828      	ldr	r0, [r5, #0]
   133e0:	f7ff fe7e 	bl	130e0 <uuid_store.constprop.0>
   133e4:	4604      	mov	r4, r0
   133e6:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   133e8:	2800      	cmp	r0, #0
   133ea:	f47f af6e 	bne.w	132ca <discovery_callback+0x17a>
   133ee:	e765      	b.n	132bc <discovery_callback+0x16c>
   133f0:	20001fc4 	.word	0x20001fc4
   133f4:	00028618 	.word	0x00028618
   133f8:	00028640 	.word	0x00028640
   133fc:	0002ce05 	.word	0x0002ce05
   13400:	0002cd28 	.word	0x0002cd28
   13404:	0002cf26 	.word	0x0002cf26
   13408:	000290f5 	.word	0x000290f5
   1340c:	0002d0ca 	.word	0x0002d0ca
   13410:	0002cfc5 	.word	0x0002cfc5
   13414:	0002ce27 	.word	0x0002ce27
   13418:	0002cf28 	.word	0x0002cf28
   1341c:	0002cf51 	.word	0x0002cf51
   13420:	0002cf70 	.word	0x0002cf70
   13424:	20001fcc 	.word	0x20001fcc
   13428:	0002cf9e 	.word	0x0002cf9e
   1342c:	0002cff0 	.word	0x0002cff0
   13430:	0002d02e 	.word	0x0002d02e
   13434:	0002d0ad 	.word	0x0002d0ad

00013438 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   13438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct bt_gatt_dm_attr *curr = NULL;

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
   1343c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1348c <bt_gatt_dm_char_by_uuid+0x54>
   13440:	f8df 904c 	ldr.w	r9, [pc, #76]	; 13490 <bt_gatt_dm_char_by_uuid+0x58>
   13444:	f8df a04c 	ldr.w	sl, [pc, #76]	; 13494 <bt_gatt_dm_char_by_uuid+0x5c>
{
   13448:	4606      	mov	r6, r0
   1344a:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   1344c:	2400      	movs	r4, #0
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   1344e:	4621      	mov	r1, r4
   13450:	4630      	mov	r0, r6
   13452:	f011 ff31 	bl	252b8 <bt_gatt_dm_char_next>
   13456:	4604      	mov	r4, r0
   13458:	b1a8      	cbz	r0, 13486 <bt_gatt_dm_char_by_uuid+0x4e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   1345a:	f011 ff15 	bl	25288 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
   1345e:	4605      	mov	r5, r0
   13460:	b958      	cbnz	r0, 1347a <bt_gatt_dm_char_by_uuid+0x42>
   13462:	4649      	mov	r1, r9
   13464:	4650      	mov	r0, sl
   13466:	f240 2309 	movw	r3, #521	; 0x209
   1346a:	4642      	mov	r2, r8
   1346c:	f011 f944 	bl	246f8 <printk>
   13470:	f240 2109 	movw	r1, #521	; 0x209
   13474:	4640      	mov	r0, r8
   13476:	f011 fb30 	bl	24ada <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   1347a:	6829      	ldr	r1, [r5, #0]
   1347c:	4638      	mov	r0, r7
   1347e:	f012 fae4 	bl	25a4a <bt_uuid_cmp>
   13482:	2800      	cmp	r0, #0
   13484:	d1e3      	bne.n	1344e <bt_gatt_dm_char_by_uuid+0x16>
			return curr;
		}
	}

	return NULL;
}
   13486:	4620      	mov	r0, r4
   13488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1348c:	0002cd28 	.word	0x0002cd28
   13490:	0002d0b6 	.word	0x0002d0b6
   13494:	000290f5 	.word	0x000290f5

00013498 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   13498:	b570      	push	{r4, r5, r6, lr}
   1349a:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   1349c:	4608      	mov	r0, r1
   1349e:	b119      	cbz	r1, 134a8 <bt_gatt_dm_start+0x10>
   134a0:	7809      	ldrb	r1, [r1, #0]
   134a2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   134a6:	d143      	bne.n	13530 <bt_gatt_dm_start+0x98>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   134a8:	2a00      	cmp	r2, #0
   134aa:	d041      	beq.n	13530 <bt_gatt_dm_start+0x98>
   134ac:	f3bf 8f5b 	dmb	ish
   134b0:	4c22      	ldr	r4, [pc, #136]	; (1353c <bt_gatt_dm_start+0xa4>)
   134b2:	f504 769c 	add.w	r6, r4, #312	; 0x138
   134b6:	e856 1f00 	ldrex	r1, [r6]
   134ba:	f041 0c01 	orr.w	ip, r1, #1
   134be:	e846 ce00 	strex	lr, ip, [r6]
   134c2:	f1be 0f00 	cmp.w	lr, #0
   134c6:	d1f6      	bne.n	134b6 <bt_gatt_dm_start+0x1e>
   134c8:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   134cc:	f011 0101 	ands.w	r1, r1, #1
   134d0:	d131      	bne.n	13536 <bt_gatt_dm_start+0x9e>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
   134d2:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
   134d6:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
   134da:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
   134de:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
   134e2:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
   134e6:	b108      	cbz	r0, 134ec <bt_gatt_dm_start+0x54>
   134e8:	f7ff fdfa 	bl	130e0 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
   134ec:	4b14      	ldr	r3, [pc, #80]	; (13540 <bt_gatt_dm_start+0xa8>)
   134ee:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   134f0:	2301      	movs	r3, #1
   134f2:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   134f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
   134f8:	60a0      	str	r0, [r4, #8]
	dm->discover_params.end_handle = 0xffff;
   134fa:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   134fc:	4911      	ldr	r1, [pc, #68]	; (13544 <bt_gatt_dm_start+0xac>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   134fe:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   13500:	4628      	mov	r0, r5
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   13502:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   13504:	f005 fc88 	bl	18e18 <bt_gatt_discover>
	if (err) {
   13508:	4604      	mov	r4, r0
   1350a:	b178      	cbz	r0, 1352c <bt_gatt_dm_start+0x94>
   1350c:	4b0e      	ldr	r3, [pc, #56]	; (13548 <bt_gatt_dm_start+0xb0>)
   1350e:	4a0f      	ldr	r2, [pc, #60]	; (1354c <bt_gatt_dm_start+0xb4>)
   13510:	1ad2      	subs	r2, r2, r3
   13512:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Discover failed, error: %d.", err);
   13514:	0192      	lsls	r2, r2, #6
   13516:	4601      	mov	r1, r0
   13518:	f042 0201 	orr.w	r2, r2, #1
   1351c:	480c      	ldr	r0, [pc, #48]	; (13550 <bt_gatt_dm_start+0xb8>)
   1351e:	f011 fb17 	bl	24b50 <log_1>
   13522:	480c      	ldr	r0, [pc, #48]	; (13554 <bt_gatt_dm_start+0xbc>)
   13524:	f06f 0101 	mvn.w	r1, #1
   13528:	f011 fe55 	bl	251d6 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   1352c:	4620      	mov	r0, r4
   1352e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13530:	f06f 0415 	mvn.w	r4, #21
   13534:	e7fa      	b.n	1352c <bt_gatt_dm_start+0x94>
		return -EALREADY;
   13536:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1353a:	e7f7      	b.n	1352c <bt_gatt_dm_start+0x94>
   1353c:	20001fc4 	.word	0x20001fc4
   13540:	00013151 	.word	0x00013151
   13544:	20001fcc 	.word	0x20001fcc
   13548:	00028618 	.word	0x00028618
   1354c:	00028640 	.word	0x00028640
   13550:	0002d0e0 	.word	0x0002d0e0
   13554:	200020fc 	.word	0x200020fc

00013558 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   13558:	b108      	cbz	r0, 1355e <bt_scan_start+0x6>
   1355a:	2801      	cmp	r0, #1
   1355c:	d106      	bne.n	1356c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   1355e:	4b05      	ldr	r3, [pc, #20]	; (13574 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   13560:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   13562:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   13566:	4804      	ldr	r0, [pc, #16]	; (13578 <bt_scan_start+0x20>)
   13568:	f002 ba20 	b.w	159ac <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   1356c:	f06f 0015 	mvn.w	r0, #21
   13570:	4770      	bx	lr
   13572:	bf00      	nop
   13574:	20002110 	.word	0x20002110
   13578:	20002140 	.word	0x20002140

0001357c <bt_nus_handles_assign>:
	return err;
}

int bt_nus_handles_assign(struct bt_gatt_dm *dm,
			  struct bt_nus_client *nus_c)
{
   1357c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13580:	b097      	sub	sp, #92	; 0x5c
   13582:	460e      	mov	r6, r1
   13584:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   13586:	f011 fe95 	bl	252b4 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   1358a:	f011 fe5d 	bl	25248 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_NUS_SERVICE)) {
   1358e:	4b62      	ldr	r3, [pc, #392]	; (13718 <bt_nus_handles_assign+0x19c>)
   13590:	f8d0 c000 	ldr.w	ip, [r0]
   13594:	aa11      	add	r2, sp, #68	; 0x44
   13596:	f103 0e10 	add.w	lr, r3, #16
   1359a:	4617      	mov	r7, r2
   1359c:	6818      	ldr	r0, [r3, #0]
   1359e:	6859      	ldr	r1, [r3, #4]
   135a0:	4614      	mov	r4, r2
   135a2:	c403      	stmia	r4!, {r0, r1}
   135a4:	3308      	adds	r3, #8
   135a6:	4573      	cmp	r3, lr
   135a8:	4622      	mov	r2, r4
   135aa:	d1f7      	bne.n	1359c <bt_nus_handles_assign+0x20>
   135ac:	781b      	ldrb	r3, [r3, #0]
   135ae:	7023      	strb	r3, [r4, #0]
   135b0:	4639      	mov	r1, r7
   135b2:	4660      	mov	r0, ip
   135b4:	f012 fa49 	bl	25a4a <bt_uuid_cmp>
   135b8:	4604      	mov	r4, r0
   135ba:	b128      	cbz	r0, 135c8 <bt_nus_handles_assign+0x4c>
		return -ENOTSUP;
   135bc:	f06f 0485 	mvn.w	r4, #133	; 0x85
	nus_c->handles.rx = gatt_desc->handle;

	/* Assign connection instance. */
	nus_c->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   135c0:	4620      	mov	r0, r4
   135c2:	b017      	add	sp, #92	; 0x5c
   135c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(&nus_c->handles, 0xFF, sizeof(nus_c->handles));
   135c8:	2206      	movs	r2, #6
   135ca:	21ff      	movs	r1, #255	; 0xff
   135cc:	f106 0008 	add.w	r0, r6, #8
   135d0:	f012 f9d3 	bl	2597a <memset>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_TX);
   135d4:	4b51      	ldr	r3, [pc, #324]	; (1371c <bt_nus_handles_assign+0x1a0>)
   135d6:	aa02      	add	r2, sp, #8
   135d8:	f103 0e10 	add.w	lr, r3, #16
   135dc:	4690      	mov	r8, r2
   135de:	46f1      	mov	r9, lr
   135e0:	6818      	ldr	r0, [r3, #0]
   135e2:	6859      	ldr	r1, [r3, #4]
   135e4:	4694      	mov	ip, r2
   135e6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   135ea:	3308      	adds	r3, #8
   135ec:	4573      	cmp	r3, lr
   135ee:	4662      	mov	r2, ip
   135f0:	d1f6      	bne.n	135e0 <bt_nus_handles_assign+0x64>
   135f2:	781b      	ldrb	r3, [r3, #0]
   135f4:	f88c 3000 	strb.w	r3, [ip]
   135f8:	4641      	mov	r1, r8
   135fa:	4628      	mov	r0, r5
   135fc:	f7ff ff1c 	bl	13438 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   13600:	4680      	mov	r8, r0
   13602:	b960      	cbnz	r0, 1361e <bt_nus_handles_assign+0xa2>
   13604:	4946      	ldr	r1, [pc, #280]	; (13720 <bt_nus_handles_assign+0x1a4>)
   13606:	4b47      	ldr	r3, [pc, #284]	; (13724 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX characteristic.");
   13608:	4847      	ldr	r0, [pc, #284]	; (13728 <bt_nus_handles_assign+0x1ac>)
   1360a:	1ac9      	subs	r1, r1, r3
   1360c:	08c9      	lsrs	r1, r1, #3
   1360e:	0189      	lsls	r1, r1, #6
   13610:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
   13614:	f011 fa8f 	bl	24b36 <log_0>
		return -EINVAL;
   13618:	f06f 0415 	mvn.w	r4, #21
   1361c:	e7d0      	b.n	135c0 <bt_nus_handles_assign+0x44>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
   1361e:	f10d 0c1c 	add.w	ip, sp, #28
   13622:	4b3e      	ldr	r3, [pc, #248]	; (1371c <bt_nus_handles_assign+0x1a0>)
   13624:	4662      	mov	r2, ip
   13626:	6818      	ldr	r0, [r3, #0]
   13628:	6859      	ldr	r1, [r3, #4]
   1362a:	46e6      	mov	lr, ip
   1362c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   13630:	3308      	adds	r3, #8
   13632:	454b      	cmp	r3, r9
   13634:	46f4      	mov	ip, lr
   13636:	d1f6      	bne.n	13626 <bt_nus_handles_assign+0xaa>
   13638:	781b      	ldrb	r3, [r3, #0]
   1363a:	f88e 3000 	strb.w	r3, [lr]
   1363e:	4641      	mov	r1, r8
   13640:	4628      	mov	r0, r5
   13642:	f011 fe84 	bl	2534e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   13646:	b940      	cbnz	r0, 1365a <bt_nus_handles_assign+0xde>
   13648:	4935      	ldr	r1, [pc, #212]	; (13720 <bt_nus_handles_assign+0x1a4>)
   1364a:	4b36      	ldr	r3, [pc, #216]	; (13724 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
   1364c:	4837      	ldr	r0, [pc, #220]	; (1372c <bt_nus_handles_assign+0x1b0>)
   1364e:	1ac9      	subs	r1, r1, r3
   13650:	08c9      	lsrs	r1, r1, #3
   13652:	0189      	lsls	r1, r1, #6
   13654:	f041 0101 	orr.w	r1, r1, #1
   13658:	e7dc      	b.n	13614 <bt_nus_handles_assign+0x98>
	nus_c->handles.tx = gatt_desc->handle;
   1365a:	8883      	ldrh	r3, [r0, #4]
   1365c:	8173      	strh	r3, [r6, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   1365e:	2300      	movs	r3, #0
   13660:	f88d 3004 	strb.w	r3, [sp, #4]
   13664:	aa01      	add	r2, sp, #4
   13666:	f642 1302 	movw	r3, #10498	; 0x2902
   1366a:	4641      	mov	r1, r8
   1366c:	4628      	mov	r0, r5
   1366e:	f8ad 3006 	strh.w	r3, [sp, #6]
   13672:	f011 fe6c 	bl	2534e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   13676:	b940      	cbnz	r0, 1368a <bt_nus_handles_assign+0x10e>
   13678:	4929      	ldr	r1, [pc, #164]	; (13720 <bt_nus_handles_assign+0x1a4>)
   1367a:	4b2a      	ldr	r3, [pc, #168]	; (13724 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX CCC in characteristic.");
   1367c:	482c      	ldr	r0, [pc, #176]	; (13730 <bt_nus_handles_assign+0x1b4>)
   1367e:	1ac9      	subs	r1, r1, r3
   13680:	08c9      	lsrs	r1, r1, #3
   13682:	0189      	lsls	r1, r1, #6
   13684:	f041 0101 	orr.w	r1, r1, #1
   13688:	e7c4      	b.n	13614 <bt_nus_handles_assign+0x98>
	nus_c->handles.tx_ccc = gatt_desc->handle;
   1368a:	8883      	ldrh	r3, [r0, #4]
   1368c:	81b3      	strh	r3, [r6, #12]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
   1368e:	4b29      	ldr	r3, [pc, #164]	; (13734 <bt_nus_handles_assign+0x1b8>)
   13690:	aa0c      	add	r2, sp, #48	; 0x30
   13692:	f103 0e10 	add.w	lr, r3, #16
   13696:	4691      	mov	r9, r2
   13698:	46f0      	mov	r8, lr
   1369a:	6818      	ldr	r0, [r3, #0]
   1369c:	6859      	ldr	r1, [r3, #4]
   1369e:	4694      	mov	ip, r2
   136a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   136a4:	3308      	adds	r3, #8
   136a6:	4573      	cmp	r3, lr
   136a8:	4662      	mov	r2, ip
   136aa:	d1f6      	bne.n	1369a <bt_nus_handles_assign+0x11e>
   136ac:	781b      	ldrb	r3, [r3, #0]
   136ae:	f88c 3000 	strb.w	r3, [ip]
   136b2:	4649      	mov	r1, r9
   136b4:	4628      	mov	r0, r5
   136b6:	f7ff febf 	bl	13438 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   136ba:	4684      	mov	ip, r0
   136bc:	b940      	cbnz	r0, 136d0 <bt_nus_handles_assign+0x154>
   136be:	4918      	ldr	r1, [pc, #96]	; (13720 <bt_nus_handles_assign+0x1a4>)
   136c0:	4b18      	ldr	r3, [pc, #96]	; (13724 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS RX characteristic.");
   136c2:	481d      	ldr	r0, [pc, #116]	; (13738 <bt_nus_handles_assign+0x1bc>)
   136c4:	1ac9      	subs	r1, r1, r3
   136c6:	08c9      	lsrs	r1, r1, #3
   136c8:	0189      	lsls	r1, r1, #6
   136ca:	f041 0101 	orr.w	r1, r1, #1
   136ce:	e7a1      	b.n	13614 <bt_nus_handles_assign+0x98>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
   136d0:	4b18      	ldr	r3, [pc, #96]	; (13734 <bt_nus_handles_assign+0x1b8>)
   136d2:	463a      	mov	r2, r7
   136d4:	6818      	ldr	r0, [r3, #0]
   136d6:	6859      	ldr	r1, [r3, #4]
   136d8:	4696      	mov	lr, r2
   136da:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   136de:	3308      	adds	r3, #8
   136e0:	4543      	cmp	r3, r8
   136e2:	4672      	mov	r2, lr
   136e4:	d1f6      	bne.n	136d4 <bt_nus_handles_assign+0x158>
   136e6:	781b      	ldrb	r3, [r3, #0]
   136e8:	f88e 3000 	strb.w	r3, [lr]
   136ec:	463a      	mov	r2, r7
   136ee:	4661      	mov	r1, ip
   136f0:	4628      	mov	r0, r5
   136f2:	f011 fe2c 	bl	2534e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   136f6:	b940      	cbnz	r0, 1370a <bt_nus_handles_assign+0x18e>
   136f8:	4909      	ldr	r1, [pc, #36]	; (13720 <bt_nus_handles_assign+0x1a4>)
   136fa:	4b0a      	ldr	r3, [pc, #40]	; (13724 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
   136fc:	480f      	ldr	r0, [pc, #60]	; (1373c <bt_nus_handles_assign+0x1c0>)
   136fe:	1ac9      	subs	r1, r1, r3
   13700:	08c9      	lsrs	r1, r1, #3
   13702:	0189      	lsls	r1, r1, #6
   13704:	f041 0101 	orr.w	r1, r1, #1
   13708:	e784      	b.n	13614 <bt_nus_handles_assign+0x98>
	nus_c->handles.rx = gatt_desc->handle;
   1370a:	8883      	ldrh	r3, [r0, #4]
   1370c:	8133      	strh	r3, [r6, #8]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
   1370e:	4628      	mov	r0, r5
   13710:	f011 fdce 	bl	252b0 <bt_gatt_dm_conn_get>
   13714:	6030      	str	r0, [r6, #0]
	return 0;
   13716:	e753      	b.n	135c0 <bt_nus_handles_assign+0x44>
   13718:	00028809 	.word	0x00028809
   1371c:	0002881a 	.word	0x0002881a
   13720:	00028700 	.word	0x00028700
   13724:	00028618 	.word	0x00028618
   13728:	0002d116 	.word	0x0002d116
   1372c:	0002d135 	.word	0x0002d135
   13730:	0002d168 	.word	0x0002d168
   13734:	0002882b 	.word	0x0002882b
   13738:	0002d18e 	.word	0x0002d18e
   1373c:	0002d1ad 	.word	0x0002d1ad

00013740 <bt_nus_subscribe_receive>:

int bt_nus_subscribe_receive(struct bt_nus_client *nus_c)
{
   13740:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
   13742:	1d05      	adds	r5, r0, #4
   13744:	f3bf 8f5b 	dmb	ish
   13748:	e855 3f00 	ldrex	r3, [r5]
   1374c:	f043 0202 	orr.w	r2, r3, #2
   13750:	e845 2100 	strex	r1, r2, [r5]
   13754:	2900      	cmp	r1, #0
   13756:	d1f7      	bne.n	13748 <bt_nus_subscribe_receive+0x8>
   13758:	f3bf 8f5b 	dmb	ish
   1375c:	079b      	lsls	r3, r3, #30
   1375e:	d435      	bmi.n	137cc <bt_nus_subscribe_receive+0x8c>
		return -EALREADY;
	}

	nus_c->tx_notif_params.notify = on_received;
   13760:	4b1c      	ldr	r3, [pc, #112]	; (137d4 <bt_nus_subscribe_receive+0x94>)
   13762:	6103      	str	r3, [r0, #16]
	nus_c->tx_notif_params.value = BT_GATT_CCC_NOTIFY;
   13764:	2301      	movs	r3, #1
   13766:	8383      	strh	r3, [r0, #28]
	nus_c->tx_notif_params.value_handle = nus_c->handles.tx;
   13768:	8943      	ldrh	r3, [r0, #10]
   1376a:	8303      	strh	r3, [r0, #24]
	nus_c->tx_notif_params.ccc_handle = nus_c->handles.tx_ccc;
   1376c:	8983      	ldrh	r3, [r0, #12]
   1376e:	8343      	strh	r3, [r0, #26]
   13770:	f100 0320 	add.w	r3, r0, #32
   13774:	f3bf 8f5b 	dmb	ish
   13778:	e853 2f00 	ldrex	r2, [r3]
   1377c:	f042 0201 	orr.w	r2, r2, #1
   13780:	e843 2100 	strex	r1, r2, [r3]
   13784:	2900      	cmp	r1, #0
   13786:	d1f7      	bne.n	13778 <bt_nus_subscribe_receive+0x38>
   13788:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(nus_c->tx_notif_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	err = bt_gatt_subscribe(nus_c->conn, &nus_c->tx_notif_params);
   1378c:	f100 0110 	add.w	r1, r0, #16
   13790:	6800      	ldr	r0, [r0, #0]
   13792:	f005 ff5b 	bl	1964c <bt_gatt_subscribe>
	if (err) {
   13796:	4604      	mov	r4, r0
   13798:	b1b0      	cbz	r0, 137c8 <bt_nus_subscribe_receive+0x88>
   1379a:	4b0f      	ldr	r3, [pc, #60]	; (137d8 <bt_nus_subscribe_receive+0x98>)
   1379c:	4a0f      	ldr	r2, [pc, #60]	; (137dc <bt_nus_subscribe_receive+0x9c>)
   1379e:	1ad2      	subs	r2, r2, r3
   137a0:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Subscribe failed (err %d)", err);
   137a2:	0192      	lsls	r2, r2, #6
   137a4:	4601      	mov	r1, r0
   137a6:	f042 0201 	orr.w	r2, r2, #1
   137aa:	480d      	ldr	r0, [pc, #52]	; (137e0 <bt_nus_subscribe_receive+0xa0>)
   137ac:	f011 f9d0 	bl	24b50 <log_1>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   137b0:	f3bf 8f5b 	dmb	ish
   137b4:	e855 3f00 	ldrex	r3, [r5]
   137b8:	f023 0302 	bic.w	r3, r3, #2
   137bc:	e845 3200 	strex	r2, r3, [r5]
   137c0:	2a00      	cmp	r2, #0
   137c2:	d1f7      	bne.n	137b4 <bt_nus_subscribe_receive+0x74>
   137c4:	f3bf 8f5b 	dmb	ish
	} else {
		LOG_DBG("[SUBSCRIBED]");
	}

	return err;
}
   137c8:	4620      	mov	r0, r4
   137ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   137cc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   137d0:	e7fa      	b.n	137c8 <bt_nus_subscribe_receive+0x88>
   137d2:	bf00      	nop
   137d4:	000253b1 	.word	0x000253b1
   137d8:	00028618 	.word	0x00028618
   137dc:	00028700 	.word	0x00028700
   137e0:	0002d1e0 	.word	0x0002d1e0

000137e4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   137e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   137e6:	4e26      	ldr	r6, [pc, #152]	; (13880 <tc_aes128_set_encrypt_key+0x9c>)
{
   137e8:	4607      	mov	r7, r0
   137ea:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   137ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   137ee:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   137f0:	ad01      	add	r5, sp, #4
   137f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   137f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   137f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   137f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   137fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   13800:	4638      	mov	r0, r7
   13802:	2f00      	cmp	r7, #0
   13804:	d038      	beq.n	13878 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   13806:	2c00      	cmp	r4, #0
   13808:	d038      	beq.n	1387c <tc_aes128_set_encrypt_key+0x98>
   1380a:	1f38      	subs	r0, r7, #4
   1380c:	4621      	mov	r1, r4
   1380e:	4602      	mov	r2, r0
   13810:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13812:	784b      	ldrb	r3, [r1, #1]
   13814:	780d      	ldrb	r5, [r1, #0]
   13816:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13818:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1381c:	78cd      	ldrb	r5, [r1, #3]
   1381e:	432b      	orrs	r3, r5
   13820:	788d      	ldrb	r5, [r1, #2]
   13822:	3104      	adds	r1, #4
   13824:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13828:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1382a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1382e:	d1f0      	bne.n	13812 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13830:	4c14      	ldr	r4, [pc, #80]	; (13884 <tc_aes128_set_encrypt_key+0xa0>)
   13832:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13834:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13836:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13838:	d116      	bne.n	13868 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1383a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1383e:	5ca5      	ldrb	r5, [r4, r2]
   13840:	0e1a      	lsrs	r2, r3, #24
   13842:	5ca2      	ldrb	r2, [r4, r2]
   13844:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13848:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1384c:	b2db      	uxtb	r3, r3
   1384e:	5d65      	ldrb	r5, [r4, r5]
   13850:	5ce3      	ldrb	r3, [r4, r3]
   13852:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13856:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1385a:	ad0c      	add	r5, sp, #48	; 0x30
   1385c:	f021 0303 	bic.w	r3, r1, #3
   13860:	442b      	add	r3, r5
   13862:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13866:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   13868:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1386c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1386e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13870:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13872:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13874:	d1de      	bne.n	13834 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   13876:	2001      	movs	r0, #1
}
   13878:	b00d      	add	sp, #52	; 0x34
   1387a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1387c:	4620      	mov	r0, r4
   1387e:	e7fb      	b.n	13878 <tc_aes128_set_encrypt_key+0x94>
   13880:	000287c0 	.word	0x000287c0
   13884:	0002d200 	.word	0x0002d200

00013888 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   13888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1388c:	4615      	mov	r5, r2
   1388e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13890:	4606      	mov	r6, r0
   13892:	2800      	cmp	r0, #0
   13894:	d058      	beq.n	13948 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13896:	2900      	cmp	r1, #0
   13898:	d059      	beq.n	1394e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1389a:	2a00      	cmp	r2, #0
   1389c:	d059      	beq.n	13952 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1389e:	2310      	movs	r3, #16
   138a0:	460a      	mov	r2, r1
   138a2:	4668      	mov	r0, sp
   138a4:	4619      	mov	r1, r3
   138a6:	f011 fda8 	bl	253fa <_copy>
	add_round_key(state, s->words);
   138aa:	4629      	mov	r1, r5
   138ac:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   138ae:	4c2a      	ldr	r4, [pc, #168]	; (13958 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   138b0:	f011 fdbb 	bl	2542a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   138b4:	f105 0710 	add.w	r7, r5, #16
   138b8:	46a1      	mov	r9, r4
   138ba:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   138bc:	46e8      	mov	r8, sp
{
   138be:	466a      	mov	r2, sp
   138c0:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   138c2:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   138c4:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   138c6:	5c61      	ldrb	r1, [r4, r1]
   138c8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   138cc:	d1f9      	bne.n	138c2 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   138ce:	4668      	mov	r0, sp
   138d0:	f011 fdf0 	bl	254b4 <shift_rows>
	mult_row_column(t, s);
   138d4:	4669      	mov	r1, sp
   138d6:	a804      	add	r0, sp, #16
   138d8:	f011 fe25 	bl	25526 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   138dc:	a901      	add	r1, sp, #4
   138de:	a805      	add	r0, sp, #20
   138e0:	f011 fe21 	bl	25526 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   138e4:	a902      	add	r1, sp, #8
   138e6:	a806      	add	r0, sp, #24
   138e8:	f011 fe1d 	bl	25526 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   138ec:	a903      	add	r1, sp, #12
   138ee:	a807      	add	r0, sp, #28
   138f0:	f011 fe19 	bl	25526 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   138f4:	2310      	movs	r3, #16
   138f6:	4619      	mov	r1, r3
   138f8:	eb0d 0203 	add.w	r2, sp, r3
   138fc:	4668      	mov	r0, sp
   138fe:	f011 fd7c 	bl	253fa <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   13902:	4639      	mov	r1, r7
   13904:	4668      	mov	r0, sp
   13906:	3710      	adds	r7, #16
   13908:	f011 fd8f 	bl	2542a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1390c:	42af      	cmp	r7, r5
   1390e:	d1d5      	bne.n	138bc <tc_aes_encrypt+0x34>
   13910:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   13912:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   13916:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   13918:	f819 3003 	ldrb.w	r3, [r9, r3]
   1391c:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   13920:	d1f7      	bne.n	13912 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   13922:	4668      	mov	r0, sp
   13924:	f011 fdc6 	bl	254b4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   13928:	4629      	mov	r1, r5
   1392a:	4668      	mov	r0, sp
   1392c:	f011 fd7d 	bl	2542a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   13930:	2310      	movs	r3, #16
   13932:	4619      	mov	r1, r3
   13934:	466a      	mov	r2, sp
   13936:	4630      	mov	r0, r6
   13938:	f011 fd5f 	bl	253fa <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1393c:	4668      	mov	r0, sp
   1393e:	2210      	movs	r2, #16
   13940:	4621      	mov	r1, r4
   13942:	f011 fd67 	bl	25414 <_set>

	return TC_CRYPTO_SUCCESS;
   13946:	2001      	movs	r0, #1
}
   13948:	b009      	add	sp, #36	; 0x24
   1394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1394e:	4608      	mov	r0, r1
   13950:	e7fa      	b.n	13948 <tc_aes_encrypt+0xc0>
   13952:	4610      	mov	r0, r2
   13954:	e7f8      	b.n	13948 <tc_aes_encrypt+0xc0>
   13956:	bf00      	nop
   13958:	0002d200 	.word	0x0002d200

0001395c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1395c:	4901      	ldr	r1, [pc, #4]	; (13964 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1395e:	2210      	movs	r2, #16
	str	r2, [r1]
   13960:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13962:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13964:	e000ed10 	.word	0xe000ed10

00013968 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13968:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1396a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1396c:	f380 8811 	msr	BASEPRI, r0
	isb
   13970:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13974:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13978:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1397a:	b662      	cpsie	i
	isb
   1397c:	f3bf 8f6f 	isb	sy

	bx	lr
   13980:	4770      	bx	lr
   13982:	bf00      	nop

00013984 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13984:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13986:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13988:	f381 8811 	msr	BASEPRI, r1

	wfe
   1398c:	bf20      	wfe

	msr	BASEPRI, r0
   1398e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13992:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13994:	4770      	bx	lr
   13996:	bf00      	nop

00013998 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13998:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1399a:	4606      	mov	r6, r0

	if (esf != NULL) {
   1399c:	460c      	mov	r4, r1
   1399e:	b301      	cbz	r1, 139e2 <z_arm_fatal_error+0x4a>
   139a0:	4b13      	ldr	r3, [pc, #76]	; (139f0 <z_arm_fatal_error+0x58>)
   139a2:	4d14      	ldr	r5, [pc, #80]	; (139f4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   139a4:	4814      	ldr	r0, [pc, #80]	; (139f8 <z_arm_fatal_error+0x60>)
   139a6:	1aed      	subs	r5, r5, r3
   139a8:	08ed      	lsrs	r5, r5, #3
   139aa:	01ad      	lsls	r5, r5, #6
   139ac:	f045 0501 	orr.w	r5, r5, #1
   139b0:	f8ad 5000 	strh.w	r5, [sp]
   139b4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   139b8:	6809      	ldr	r1, [r1, #0]
   139ba:	f011 f8f6 	bl	24baa <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   139be:	f8ad 5000 	strh.w	r5, [sp]
   139c2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   139c6:	68e1      	ldr	r1, [r4, #12]
   139c8:	480c      	ldr	r0, [pc, #48]	; (139fc <z_arm_fatal_error+0x64>)
   139ca:	f011 f8ee 	bl	24baa <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   139ce:	69e1      	ldr	r1, [r4, #28]
   139d0:	480b      	ldr	r0, [pc, #44]	; (13a00 <z_arm_fatal_error+0x68>)
   139d2:	462a      	mov	r2, r5
   139d4:	f011 f8bc 	bl	24b50 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   139d8:	69a1      	ldr	r1, [r4, #24]
   139da:	480a      	ldr	r0, [pc, #40]	; (13a04 <z_arm_fatal_error+0x6c>)
   139dc:	462a      	mov	r2, r5
   139de:	f011 f8b7 	bl	24b50 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   139e2:	4621      	mov	r1, r4
   139e4:	4630      	mov	r0, r6
}
   139e6:	b002      	add	sp, #8
   139e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   139ec:	f00c bfbc 	b.w	20968 <z_fatal_error>
   139f0:	00028618 	.word	0x00028618
   139f4:	00028708 	.word	0x00028708
   139f8:	0002d300 	.word	0x0002d300
   139fc:	0002d32f 	.word	0x0002d32f
   13a00:	0002d35e 	.word	0x0002d35e
   13a04:	0002d36d 	.word	0x0002d36d

00013a08 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13a08:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	db08      	blt.n	13a20 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a0e:	2201      	movs	r2, #1
   13a10:	f000 001f 	and.w	r0, r0, #31
   13a14:	fa02 f000 	lsl.w	r0, r2, r0
   13a18:	095b      	lsrs	r3, r3, #5
   13a1a:	4a02      	ldr	r2, [pc, #8]	; (13a24 <arch_irq_enable+0x1c>)
   13a1c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13a20:	4770      	bx	lr
   13a22:	bf00      	nop
   13a24:	e000e100 	.word	0xe000e100

00013a28 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13a28:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	db0d      	blt.n	13a4a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a2e:	2201      	movs	r2, #1
   13a30:	095b      	lsrs	r3, r3, #5
   13a32:	f000 001f 	and.w	r0, r0, #31
   13a36:	fa02 f000 	lsl.w	r0, r2, r0
   13a3a:	3320      	adds	r3, #32
   13a3c:	4a03      	ldr	r2, [pc, #12]	; (13a4c <arch_irq_disable+0x24>)
   13a3e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a46:	f3bf 8f6f 	isb	sy
}
   13a4a:	4770      	bx	lr
   13a4c:	e000e100 	.word	0xe000e100

00013a50 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13a50:	4b05      	ldr	r3, [pc, #20]	; (13a68 <arch_irq_is_enabled+0x18>)
   13a52:	0942      	lsrs	r2, r0, #5
   13a54:	f000 001f 	and.w	r0, r0, #31
   13a58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13a5c:	2301      	movs	r3, #1
   13a5e:	fa03 f000 	lsl.w	r0, r3, r0
}
   13a62:	4010      	ands	r0, r2
   13a64:	4770      	bx	lr
   13a66:	bf00      	nop
   13a68:	e000e100 	.word	0xe000e100

00013a6c <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13a6c:	07d3      	lsls	r3, r2, #31
{
   13a6e:	b570      	push	{r4, r5, r6, lr}
   13a70:	4605      	mov	r5, r0
   13a72:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13a74:	d425      	bmi.n	13ac2 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13a76:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   13a78:	2c07      	cmp	r4, #7
   13a7a:	d90f      	bls.n	13a9c <z_arm_irq_priority_set+0x30>
   13a7c:	4a12      	ldr	r2, [pc, #72]	; (13ac8 <z_arm_irq_priority_set+0x5c>)
   13a7e:	4913      	ldr	r1, [pc, #76]	; (13acc <z_arm_irq_priority_set+0x60>)
   13a80:	4813      	ldr	r0, [pc, #76]	; (13ad0 <z_arm_irq_priority_set+0x64>)
   13a82:	2359      	movs	r3, #89	; 0x59
   13a84:	f010 fe38 	bl	246f8 <printk>
   13a88:	4812      	ldr	r0, [pc, #72]	; (13ad4 <z_arm_irq_priority_set+0x68>)
   13a8a:	4631      	mov	r1, r6
   13a8c:	2306      	movs	r3, #6
   13a8e:	462a      	mov	r2, r5
   13a90:	f010 fe32 	bl	246f8 <printk>
   13a94:	480c      	ldr	r0, [pc, #48]	; (13ac8 <z_arm_irq_priority_set+0x5c>)
   13a96:	2159      	movs	r1, #89	; 0x59
   13a98:	f011 f81f 	bl	24ada <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13a9c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13a9e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13aa0:	bfac      	ite	ge
   13aa2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13aa6:	4b0c      	ldrlt	r3, [pc, #48]	; (13ad8 <z_arm_irq_priority_set+0x6c>)
   13aa8:	ea4f 1444 	mov.w	r4, r4, lsl #5
   13aac:	bfb8      	it	lt
   13aae:	f005 050f 	andlt.w	r5, r5, #15
   13ab2:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ab4:	bfaa      	itet	ge
   13ab6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13aba:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13abc:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   13ac0:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13ac2:	2400      	movs	r4, #0
   13ac4:	e7ea      	b.n	13a9c <z_arm_irq_priority_set+0x30>
   13ac6:	bf00      	nop
   13ac8:	0002d39b 	.word	0x0002d39b
   13acc:	0002d3d1 	.word	0x0002d3d1
   13ad0:	000290f5 	.word	0x000290f5
   13ad4:	0002d3ec 	.word	0x0002d3ec
   13ad8:	e000ed14 	.word	0xe000ed14

00013adc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13adc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13ade:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13ae0:	4b04      	ldr	r3, [pc, #16]	; (13af4 <_arch_isr_direct_pm+0x18>)
   13ae2:	699a      	ldr	r2, [r3, #24]
   13ae4:	b11a      	cbz	r2, 13aee <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13ae6:	2200      	movs	r2, #0
   13ae8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13aea:	f014 fab0 	bl	2804e <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13aee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13af0:	bd08      	pop	{r3, pc}
   13af2:	bf00      	nop
   13af4:	20002508 	.word	0x20002508

00013af8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13af8:	bf30      	wfi
    b z_SysNmiOnReset
   13afa:	f7ff bffd 	b.w	13af8 <z_SysNmiOnReset>
   13afe:	bf00      	nop

00013b00 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13b00:	4a0b      	ldr	r2, [pc, #44]	; (13b30 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13b02:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13b04:	4b0b      	ldr	r3, [pc, #44]	; (13b34 <z_arm_prep_c+0x34>)
   13b06:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13b0a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13b10:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13b14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13b18:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13b20:	f00c ffde 	bl	20ae0 <z_bss_zero>
	z_data_copy();
   13b24:	f00f ff92 	bl	23a4c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13b28:	f000 fb76 	bl	14218 <z_arm_interrupt_init>
	z_cstart();
   13b2c:	f00c ffe2 	bl	20af4 <z_cstart>
   13b30:	00000000 	.word	0x00000000
   13b34:	e000ed00 	.word	0xe000ed00

00013b38 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13b38:	4a09      	ldr	r2, [pc, #36]	; (13b60 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13b3a:	490a      	ldr	r1, [pc, #40]	; (13b64 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13b3c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13b3e:	6809      	ldr	r1, [r1, #0]
   13b40:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13b42:	4909      	ldr	r1, [pc, #36]	; (13b68 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13b44:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13b46:	684b      	ldr	r3, [r1, #4]
   13b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13b4c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   13b4e:	2300      	movs	r3, #0
   13b50:	f383 8811 	msr	BASEPRI, r3
   13b54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13b58:	6893      	ldr	r3, [r2, #8]
}
   13b5a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13b5c:	4770      	bx	lr
   13b5e:	bf00      	nop
   13b60:	20002508 	.word	0x20002508
   13b64:	00028dcc 	.word	0x00028dcc
   13b68:	e000ed00 	.word	0xe000ed00

00013b6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13b6c:	4912      	ldr	r1, [pc, #72]	; (13bb8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13b6e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13b70:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13b74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13b76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13b7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13b7e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13b80:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13b84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13b88:	4f0c      	ldr	r7, [pc, #48]	; (13bbc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13b8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13b8e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13b90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13b92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13b94:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13b96:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13b98:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13b9a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13b9e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13ba0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13ba2:	f000 fbcf 	bl	14344 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13ba6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13baa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13bae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13bb2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13bb6:	4770      	bx	lr
    ldr r1, =_kernel
   13bb8:	20002508 	.word	0x20002508
    ldr v4, =_SCS_ICSR
   13bbc:	e000ed04 	.word	0xe000ed04

00013bc0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13bc0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13bc4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13bc6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13bca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13bce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13bd0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13bd4:	2902      	cmp	r1, #2
    beq _oops
   13bd6:	d0ff      	beq.n	13bd8 <_oops>

00013bd8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13bd8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13bda:	f011 fde3 	bl	257a4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13bde:	bd01      	pop	{r0, pc}

00013be0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13be0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13be4:	9b00      	ldr	r3, [sp, #0]
   13be6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13bea:	490a      	ldr	r1, [pc, #40]	; (13c14 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13bec:	9b01      	ldr	r3, [sp, #4]
   13bee:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13bf2:	9b02      	ldr	r3, [sp, #8]
   13bf4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13bf8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13c00:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13c04:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13c08:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13c0a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13c0c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13c0e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13c10:	4770      	bx	lr
   13c12:	bf00      	nop
   13c14:	000247d5 	.word	0x000247d5

00013c18 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13c18:	4a0b      	ldr	r2, [pc, #44]	; (13c48 <z_check_thread_stack_fail+0x30>)
{
   13c1a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13c1c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   13c1e:	b190      	cbz	r0, 13c46 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13c20:	f113 0f16 	cmn.w	r3, #22
   13c24:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13c26:	d005      	beq.n	13c34 <z_check_thread_stack_fail+0x1c>
   13c28:	f1a0 0220 	sub.w	r2, r0, #32
   13c2c:	429a      	cmp	r2, r3
   13c2e:	d806      	bhi.n	13c3e <z_check_thread_stack_fail+0x26>
   13c30:	4283      	cmp	r3, r0
   13c32:	d204      	bcs.n	13c3e <z_check_thread_stack_fail+0x26>
   13c34:	4281      	cmp	r1, r0
   13c36:	bf2c      	ite	cs
   13c38:	2100      	movcs	r1, #0
   13c3a:	2101      	movcc	r1, #1
   13c3c:	e000      	b.n	13c40 <z_check_thread_stack_fail+0x28>
   13c3e:	2100      	movs	r1, #0
   13c40:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13c42:	bf08      	it	eq
   13c44:	2000      	moveq	r0, #0
}
   13c46:	4770      	bx	lr
   13c48:	20002508 	.word	0x20002508

00013c4c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13c4c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13c4e:	4b09      	ldr	r3, [pc, #36]	; (13c74 <arch_switch_to_main_thread+0x28>)
   13c50:	6098      	str	r0, [r3, #8]
{
   13c52:	460d      	mov	r5, r1
   13c54:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13c56:	f000 fb75 	bl	14344 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13c5a:	4620      	mov	r0, r4
   13c5c:	f385 8809 	msr	PSP, r5
   13c60:	2100      	movs	r1, #0
   13c62:	b663      	cpsie	if
   13c64:	f381 8811 	msr	BASEPRI, r1
   13c68:	f3bf 8f6f 	isb	sy
   13c6c:	2200      	movs	r2, #0
   13c6e:	2300      	movs	r3, #0
   13c70:	f010 fdb0 	bl	247d4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13c74:	20002508 	.word	0x20002508

00013c78 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13c78:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13c7a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13c7c:	4a0b      	ldr	r2, [pc, #44]	; (13cac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13c7e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13c80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13c82:	bf1e      	ittt	ne
	movne	r1, #0
   13c84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13c86:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13c88:	f014 f9e1 	blne	2804e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13c8c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13c8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13c92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13c96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13c9a:	4905      	ldr	r1, [pc, #20]	; (13cb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13c9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13c9e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13ca0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13ca2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13ca6:	4903      	ldr	r1, [pc, #12]	; (13cb4 <_isr_wrapper+0x3c>)
	bx r1
   13ca8:	4708      	bx	r1
   13caa:	0000      	.short	0x0000
	ldr r2, =_kernel
   13cac:	20002508 	.word	0x20002508
	ldr r1, =_sw_isr_table
   13cb0:	00028418 	.word	0x00028418
	ldr r1, =z_arm_int_exit
   13cb4:	00013cb9 	.word	0x00013cb9

00013cb8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13cb8:	4b04      	ldr	r3, [pc, #16]	; (13ccc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13cba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13cbc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13cbe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13cc0:	d003      	beq.n	13cca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13cc2:	4903      	ldr	r1, [pc, #12]	; (13cd0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13cc8:	600a      	str	r2, [r1, #0]

00013cca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13cca:	4770      	bx	lr
	ldr r3, =_kernel
   13ccc:	20002508 	.word	0x20002508
	ldr r1, =_SCS_ICSR
   13cd0:	e000ed04 	.word	0xe000ed04

00013cd4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13cd8:	4b3f      	ldr	r3, [pc, #252]	; (13dd8 <mem_manage_fault+0x104>)
   13cda:	4c40      	ldr	r4, [pc, #256]	; (13ddc <mem_manage_fault+0x108>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13cdc:	4d40      	ldr	r5, [pc, #256]	; (13de0 <mem_manage_fault+0x10c>)
   13cde:	1ae4      	subs	r4, r4, r3
   13ce0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   13ce2:	01a4      	lsls	r4, r4, #6
   13ce4:	f044 0901 	orr.w	r9, r4, #1
{
   13ce8:	4607      	mov	r7, r0
   13cea:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13cec:	483d      	ldr	r0, [pc, #244]	; (13de4 <mem_manage_fault+0x110>)
   13cee:	4649      	mov	r1, r9
{
   13cf0:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   13cf2:	f010 ff20 	bl	24b36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13cf6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13cf8:	06d3      	lsls	r3, r2, #27
   13cfa:	d503      	bpl.n	13d04 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13cfc:	483a      	ldr	r0, [pc, #232]	; (13de8 <mem_manage_fault+0x114>)
   13cfe:	4649      	mov	r1, r9
   13d00:	f010 ff19 	bl	24b36 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13d04:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d06:	0718      	lsls	r0, r3, #28
   13d08:	d504      	bpl.n	13d14 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   13d0a:	4838      	ldr	r0, [pc, #224]	; (13dec <mem_manage_fault+0x118>)
   13d0c:	f044 0101 	orr.w	r1, r4, #1
   13d10:	f010 ff11 	bl	24b36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13d14:	4d32      	ldr	r5, [pc, #200]	; (13de0 <mem_manage_fault+0x10c>)
   13d16:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d18:	0799      	lsls	r1, r3, #30
   13d1a:	d424      	bmi.n	13d66 <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
   13d1c:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13d20:	4d2f      	ldr	r5, [pc, #188]	; (13de0 <mem_manage_fault+0x10c>)
   13d22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13d24:	07d3      	lsls	r3, r2, #31
   13d26:	d504      	bpl.n	13d32 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   13d28:	4831      	ldr	r0, [pc, #196]	; (13df0 <mem_manage_fault+0x11c>)
   13d2a:	f044 0101 	orr.w	r1, r4, #1
   13d2e:	f010 ff02 	bl	24b36 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13d32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d34:	069d      	lsls	r5, r3, #26
   13d36:	d504      	bpl.n	13d42 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   13d38:	482e      	ldr	r0, [pc, #184]	; (13df4 <mem_manage_fault+0x120>)
   13d3a:	f044 0101 	orr.w	r1, r4, #1
   13d3e:	f010 fefa 	bl	24b36 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13d42:	4d27      	ldr	r5, [pc, #156]	; (13de0 <mem_manage_fault+0x10c>)
   13d44:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d46:	06d8      	lsls	r0, r3, #27
   13d48:	d425      	bmi.n	13d96 <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13d4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13d4c:	0799      	lsls	r1, r3, #30
   13d4e:	d422      	bmi.n	13d96 <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13d50:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13d52:	4a23      	ldr	r2, [pc, #140]	; (13de0 <mem_manage_fault+0x10c>)
   13d54:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13d56:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13d5a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13d5c:	2300      	movs	r3, #0
   13d5e:	7033      	strb	r3, [r6, #0]

	return reason;
}
   13d60:	4620      	mov	r0, r4
   13d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   13d66:	f044 0a01 	orr.w	sl, r4, #1
   13d6a:	4823      	ldr	r0, [pc, #140]	; (13df8 <mem_manage_fault+0x124>)
   13d6c:	4651      	mov	r1, sl
   13d6e:	f010 fee2 	bl	24b36 <log_0>
		uint32_t temp = SCB->MMFAR;
   13d72:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13d76:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d78:	061a      	lsls	r2, r3, #24
   13d7a:	d5cf      	bpl.n	13d1c <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13d7c:	481f      	ldr	r0, [pc, #124]	; (13dfc <mem_manage_fault+0x128>)
   13d7e:	4652      	mov	r2, sl
   13d80:	4649      	mov	r1, r9
   13d82:	f010 fee5 	bl	24b50 <log_1>
			if (from_hard_fault != 0) {
   13d86:	f1b8 0f00 	cmp.w	r8, #0
   13d8a:	d0c9      	beq.n	13d20 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13d8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13d92:	62ab      	str	r3, [r5, #40]	; 0x28
   13d94:	e7c4      	b.n	13d20 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13d96:	686b      	ldr	r3, [r5, #4]
   13d98:	051a      	lsls	r2, r3, #20
   13d9a:	d5d9      	bpl.n	13d50 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13d9c:	4639      	mov	r1, r7
   13d9e:	4648      	mov	r0, r9
   13da0:	f7ff ff3a 	bl	13c18 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13da4:	4604      	mov	r4, r0
   13da6:	b118      	cbz	r0, 13db0 <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13da8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13dac:	2402      	movs	r4, #2
   13dae:	e7d0      	b.n	13d52 <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   13db0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13db2:	06db      	lsls	r3, r3, #27
   13db4:	d5cc      	bpl.n	13d50 <mem_manage_fault+0x7c>
   13db6:	4a12      	ldr	r2, [pc, #72]	; (13e00 <mem_manage_fault+0x12c>)
   13db8:	4912      	ldr	r1, [pc, #72]	; (13e04 <mem_manage_fault+0x130>)
   13dba:	4813      	ldr	r0, [pc, #76]	; (13e08 <mem_manage_fault+0x134>)
   13dbc:	f240 1349 	movw	r3, #329	; 0x149
   13dc0:	f010 fc9a 	bl	246f8 <printk>
   13dc4:	4811      	ldr	r0, [pc, #68]	; (13e0c <mem_manage_fault+0x138>)
   13dc6:	f010 fc97 	bl	246f8 <printk>
   13dca:	480d      	ldr	r0, [pc, #52]	; (13e00 <mem_manage_fault+0x12c>)
   13dcc:	f240 1149 	movw	r1, #329	; 0x149
   13dd0:	f010 fe83 	bl	24ada <assert_post_action>
   13dd4:	e7bd      	b.n	13d52 <mem_manage_fault+0x7e>
   13dd6:	bf00      	nop
   13dd8:	00028618 	.word	0x00028618
   13ddc:	00028708 	.word	0x00028708
   13de0:	e000ed00 	.word	0xe000ed00
   13de4:	0002d42c 	.word	0x0002d42c
   13de8:	0002d442 	.word	0x0002d442
   13dec:	0002d475 	.word	0x0002d475
   13df0:	0002d4b6 	.word	0x0002d4b6
   13df4:	0002d4d5 	.word	0x0002d4d5
   13df8:	0002d488 	.word	0x0002d488
   13dfc:	0002d4a0 	.word	0x0002d4a0
   13e00:	0002d504 	.word	0x0002d504
   13e04:	0002d53e 	.word	0x0002d53e
   13e08:	000290f5 	.word	0x000290f5
   13e0c:	0002d588 	.word	0x0002d588

00013e10 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13e10:	b570      	push	{r4, r5, r6, lr}
   13e12:	4b23      	ldr	r3, [pc, #140]	; (13ea0 <usage_fault.isra.0+0x90>)
   13e14:	4c23      	ldr	r4, [pc, #140]	; (13ea4 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13e16:	4d24      	ldr	r5, [pc, #144]	; (13ea8 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   13e18:	4824      	ldr	r0, [pc, #144]	; (13eac <usage_fault.isra.0+0x9c>)
   13e1a:	1ae4      	subs	r4, r4, r3
   13e1c:	08e4      	lsrs	r4, r4, #3
   13e1e:	01a4      	lsls	r4, r4, #6
   13e20:	f044 0601 	orr.w	r6, r4, #1
   13e24:	4631      	mov	r1, r6
   13e26:	f010 fe86 	bl	24b36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13e2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13e2c:	0193      	lsls	r3, r2, #6
   13e2e:	d503      	bpl.n	13e38 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13e30:	481f      	ldr	r0, [pc, #124]	; (13eb0 <usage_fault.isra.0+0xa0>)
   13e32:	4631      	mov	r1, r6
   13e34:	f010 fe7f 	bl	24b36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13e38:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e3a:	01dd      	lsls	r5, r3, #7
   13e3c:	d504      	bpl.n	13e48 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   13e3e:	481d      	ldr	r0, [pc, #116]	; (13eb4 <usage_fault.isra.0+0xa4>)
   13e40:	f044 0101 	orr.w	r1, r4, #1
   13e44:	f010 fe77 	bl	24b36 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13e48:	4d17      	ldr	r5, [pc, #92]	; (13ea8 <usage_fault.isra.0+0x98>)
   13e4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13e4c:	0310      	lsls	r0, r2, #12
   13e4e:	d504      	bpl.n	13e5a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   13e50:	4819      	ldr	r0, [pc, #100]	; (13eb8 <usage_fault.isra.0+0xa8>)
   13e52:	f044 0101 	orr.w	r1, r4, #1
   13e56:	f010 fe6e 	bl	24b36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13e5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e5c:	0359      	lsls	r1, r3, #13
   13e5e:	d504      	bpl.n	13e6a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13e60:	4816      	ldr	r0, [pc, #88]	; (13ebc <usage_fault.isra.0+0xac>)
   13e62:	f044 0101 	orr.w	r1, r4, #1
   13e66:	f010 fe66 	bl	24b36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13e6a:	4d0f      	ldr	r5, [pc, #60]	; (13ea8 <usage_fault.isra.0+0x98>)
   13e6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13e6e:	0392      	lsls	r2, r2, #14
   13e70:	d504      	bpl.n	13e7c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13e72:	4813      	ldr	r0, [pc, #76]	; (13ec0 <usage_fault.isra.0+0xb0>)
   13e74:	f044 0101 	orr.w	r1, r4, #1
   13e78:	f010 fe5d 	bl	24b36 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13e7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e7e:	03db      	lsls	r3, r3, #15
   13e80:	d504      	bpl.n	13e8c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13e82:	4810      	ldr	r0, [pc, #64]	; (13ec4 <usage_fault.isra.0+0xb4>)
   13e84:	f044 0101 	orr.w	r1, r4, #1
   13e88:	f010 fe55 	bl	24b36 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13e8c:	4a06      	ldr	r2, [pc, #24]	; (13ea8 <usage_fault.isra.0+0x98>)
   13e8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13e90:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13e94:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13e98:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13e9a:	2000      	movs	r0, #0
   13e9c:	bd70      	pop	{r4, r5, r6, pc}
   13e9e:	bf00      	nop
   13ea0:	00028618 	.word	0x00028618
   13ea4:	00028708 	.word	0x00028708
   13ea8:	e000ed00 	.word	0xe000ed00
   13eac:	0002d5ab 	.word	0x0002d5ab
   13eb0:	0002d5c3 	.word	0x0002d5c3
   13eb4:	0002d5d6 	.word	0x0002d5d6
   13eb8:	0002d5f0 	.word	0x0002d5f0
   13ebc:	0002d60e 	.word	0x0002d60e
   13ec0:	0002d633 	.word	0x0002d633
   13ec4:	0002d64d 	.word	0x0002d64d

00013ec8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ecc:	4b2a      	ldr	r3, [pc, #168]	; (13f78 <bus_fault.isra.0+0xb0>)
   13ece:	4c2b      	ldr	r4, [pc, #172]	; (13f7c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13ed0:	4d2b      	ldr	r5, [pc, #172]	; (13f80 <bus_fault.isra.0+0xb8>)
   13ed2:	1ae4      	subs	r4, r4, r3
   13ed4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13ed6:	01a4      	lsls	r4, r4, #6
   13ed8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13edc:	4607      	mov	r7, r0
   13ede:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13ee0:	4828      	ldr	r0, [pc, #160]	; (13f84 <bus_fault.isra.0+0xbc>)
   13ee2:	4641      	mov	r1, r8
   13ee4:	f010 fe27 	bl	24b36 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13ee8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13eea:	04d1      	lsls	r1, r2, #19
   13eec:	d503      	bpl.n	13ef6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13eee:	4826      	ldr	r0, [pc, #152]	; (13f88 <bus_fault.isra.0+0xc0>)
   13ef0:	4641      	mov	r1, r8
   13ef2:	f010 fe20 	bl	24b36 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13ef6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ef8:	051a      	lsls	r2, r3, #20
   13efa:	d504      	bpl.n	13f06 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13efc:	4823      	ldr	r0, [pc, #140]	; (13f8c <bus_fault.isra.0+0xc4>)
   13efe:	f044 0101 	orr.w	r1, r4, #1
   13f02:	f010 fe18 	bl	24b36 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13f06:	4d1e      	ldr	r5, [pc, #120]	; (13f80 <bus_fault.isra.0+0xb8>)
   13f08:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f0a:	059b      	lsls	r3, r3, #22
   13f0c:	d512      	bpl.n	13f34 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13f0e:	f044 0801 	orr.w	r8, r4, #1
   13f12:	481f      	ldr	r0, [pc, #124]	; (13f90 <bus_fault.isra.0+0xc8>)
   13f14:	4641      	mov	r1, r8
   13f16:	f010 fe0e 	bl	24b36 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13f1a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13f1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f1e:	0418      	lsls	r0, r3, #16
   13f20:	d508      	bpl.n	13f34 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13f22:	481c      	ldr	r0, [pc, #112]	; (13f94 <bus_fault.isra.0+0xcc>)
   13f24:	4642      	mov	r2, r8
   13f26:	f010 fe13 	bl	24b50 <log_1>
			if (from_hard_fault != 0) {
   13f2a:	b11f      	cbz	r7, 13f34 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13f2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13f32:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13f34:	4d12      	ldr	r5, [pc, #72]	; (13f80 <bus_fault.isra.0+0xb8>)
   13f36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f38:	0559      	lsls	r1, r3, #21
   13f3a:	d504      	bpl.n	13f46 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13f3c:	4816      	ldr	r0, [pc, #88]	; (13f98 <bus_fault.isra.0+0xd0>)
   13f3e:	f044 0101 	orr.w	r1, r4, #1
   13f42:	f010 fdf8 	bl	24b36 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13f46:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f48:	05da      	lsls	r2, r3, #23
   13f4a:	d50d      	bpl.n	13f68 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13f4c:	4813      	ldr	r0, [pc, #76]	; (13f9c <bus_fault.isra.0+0xd4>)
   13f4e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13f52:	f010 fdf0 	bl	24b36 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13f56:	4a0a      	ldr	r2, [pc, #40]	; (13f80 <bus_fault.isra.0+0xb8>)
   13f58:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13f5a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13f5c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13f60:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13f62:	7030      	strb	r0, [r6, #0]
}
   13f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13f68:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13f6a:	049b      	lsls	r3, r3, #18
   13f6c:	d5f3      	bpl.n	13f56 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13f6e:	480c      	ldr	r0, [pc, #48]	; (13fa0 <bus_fault.isra.0+0xd8>)
   13f70:	f044 0101 	orr.w	r1, r4, #1
   13f74:	e7ed      	b.n	13f52 <bus_fault.isra.0+0x8a>
   13f76:	bf00      	nop
   13f78:	00028618 	.word	0x00028618
   13f7c:	00028708 	.word	0x00028708
   13f80:	e000ed00 	.word	0xe000ed00
   13f84:	0002d678 	.word	0x0002d678
   13f88:	0002d68e 	.word	0x0002d68e
   13f8c:	0002d475 	.word	0x0002d475
   13f90:	0002d69f 	.word	0x0002d69f
   13f94:	0002d6b8 	.word	0x0002d6b8
   13f98:	0002d6cd 	.word	0x0002d6cd
   13f9c:	0002d6e8 	.word	0x0002d6e8
   13fa0:	0002d4d5 	.word	0x0002d4d5

00013fa4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13fa8:	4b7c      	ldr	r3, [pc, #496]	; (1419c <z_arm_fault+0x1f8>)
   13faa:	685e      	ldr	r6, [r3, #4]
{
   13fac:	b08a      	sub	sp, #40	; 0x28
   13fae:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13fb0:	f3c6 0408 	ubfx	r4, r6, #0, #9
   13fb4:	2700      	movs	r7, #0
   13fb6:	f387 8811 	msr	BASEPRI, r7
   13fba:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13fbe:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13fc2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13fc6:	d10d      	bne.n	13fe4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13fc8:	f002 030c 	and.w	r3, r2, #12
   13fcc:	2b08      	cmp	r3, #8
   13fce:	d11a      	bne.n	14006 <z_arm_fault+0x62>
   13fd0:	4973      	ldr	r1, [pc, #460]	; (141a0 <z_arm_fault+0x1fc>)
   13fd2:	4b74      	ldr	r3, [pc, #464]	; (141a4 <z_arm_fault+0x200>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13fd4:	4874      	ldr	r0, [pc, #464]	; (141a8 <z_arm_fault+0x204>)
   13fd6:	1ac9      	subs	r1, r1, r3
   13fd8:	08c9      	lsrs	r1, r1, #3
   13fda:	0189      	lsls	r1, r1, #6
   13fdc:	f041 0101 	orr.w	r1, r1, #1
   13fe0:	f010 fda9 	bl	24b36 <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   13fe4:	4a71      	ldr	r2, [pc, #452]	; (141ac <z_arm_fault+0x208>)
   13fe6:	4972      	ldr	r1, [pc, #456]	; (141b0 <z_arm_fault+0x20c>)
   13fe8:	4872      	ldr	r0, [pc, #456]	; (141b4 <z_arm_fault+0x210>)
   13fea:	f240 33f2 	movw	r3, #1010	; 0x3f2
   13fee:	f010 fb83 	bl	246f8 <printk>
   13ff2:	4871      	ldr	r0, [pc, #452]	; (141b8 <z_arm_fault+0x214>)
   13ff4:	f010 fb80 	bl	246f8 <printk>
   13ff8:	486c      	ldr	r0, [pc, #432]	; (141ac <z_arm_fault+0x208>)
   13ffa:	f240 31f2 	movw	r1, #1010	; 0x3f2
   13ffe:	f010 fd6c 	bl	24ada <assert_post_action>
   14002:	2500      	movs	r5, #0
   14004:	e005      	b.n	14012 <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14006:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   14008:	bf5c      	itt	pl
   1400a:	4605      	movpl	r5, r0
			*nested_exc = true;
   1400c:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   1400e:	2d00      	cmp	r5, #0
   14010:	d0e8      	beq.n	13fe4 <z_arm_fault+0x40>
	*recoverable = false;
   14012:	2300      	movs	r3, #0
   14014:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14018:	1ee3      	subs	r3, r4, #3
   1401a:	2b09      	cmp	r3, #9
   1401c:	f200 80a4 	bhi.w	14168 <z_arm_fault+0x1c4>
   14020:	e8df f003 	tbb	[pc, r3]
   14024:	71959105 	.word	0x71959105
   14028:	a2a2a2a2 	.word	0xa2a2a2a2
   1402c:	99a2      	.short	0x99a2
   1402e:	4a5d      	ldr	r2, [pc, #372]	; (141a4 <z_arm_fault+0x200>)
   14030:	4e5b      	ldr	r6, [pc, #364]	; (141a0 <z_arm_fault+0x1fc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14032:	4862      	ldr	r0, [pc, #392]	; (141bc <z_arm_fault+0x218>)
   14034:	1ab6      	subs	r6, r6, r2
   14036:	08f6      	lsrs	r6, r6, #3
   14038:	01b6      	lsls	r6, r6, #6
   1403a:	f046 0601 	orr.w	r6, r6, #1
   1403e:	4631      	mov	r1, r6
   14040:	f010 fd79 	bl	24b36 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14044:	4b55      	ldr	r3, [pc, #340]	; (1419c <z_arm_fault+0x1f8>)
   14046:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   14048:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1404c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   14050:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14054:	d005      	beq.n	14062 <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
   14056:	485a      	ldr	r0, [pc, #360]	; (141c0 <z_arm_fault+0x21c>)
   14058:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   1405a:	f010 fd6c 	bl	24b36 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1405e:	2400      	movs	r4, #0
}
   14060:	e006      	b.n	14070 <z_arm_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14064:	2a00      	cmp	r2, #0
   14066:	da1e      	bge.n	140a6 <z_arm_fault+0x102>
		PR_EXC("  Debug event");
   14068:	4856      	ldr	r0, [pc, #344]	; (141c4 <z_arm_fault+0x220>)
   1406a:	4631      	mov	r1, r6
   1406c:	f010 fd63 	bl	24b36 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14070:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14074:	b9a3      	cbnz	r3, 140a0 <z_arm_fault+0xfc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14076:	2220      	movs	r2, #32
   14078:	4629      	mov	r1, r5
   1407a:	a802      	add	r0, sp, #8
   1407c:	f011 fc72 	bl	25964 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14080:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14082:	2f00      	cmp	r7, #0
   14084:	f000 8084 	beq.w	14190 <z_arm_fault+0x1ec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14088:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1408c:	b922      	cbnz	r2, 14098 <z_arm_fault+0xf4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1408e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14092:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14096:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14098:	a902      	add	r1, sp, #8
   1409a:	4620      	mov	r0, r4
   1409c:	f7ff fc7c 	bl	13998 <z_arm_fatal_error>
}
   140a0:	b00a      	add	sp, #40	; 0x28
   140a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   140a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   140a8:	005b      	lsls	r3, r3, #1
   140aa:	d53f      	bpl.n	1412c <z_arm_fault+0x188>
		PR_EXC("  Fault escalation (see below)");
   140ac:	4846      	ldr	r0, [pc, #280]	; (141c8 <z_arm_fault+0x224>)
   140ae:	4631      	mov	r1, r6
   140b0:	f010 fd41 	bl	24b36 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   140b4:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   140b6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   140ba:	f64d 7302 	movw	r3, #57090	; 0xdf02
   140be:	429a      	cmp	r2, r3
   140c0:	d00d      	beq.n	140de <z_arm_fault+0x13a>
		} else if (SCB_MMFSR != 0) {
   140c2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   140c6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   140ca:	781b      	ldrb	r3, [r3, #0]
   140cc:	b173      	cbz	r3, 140ec <z_arm_fault+0x148>
			reason = mem_manage_fault(esf, 1, recoverable);
   140ce:	f10d 0207 	add.w	r2, sp, #7
   140d2:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   140d4:	4628      	mov	r0, r5
   140d6:	f7ff fdfd 	bl	13cd4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   140da:	4604      	mov	r4, r0
		break;
   140dc:	e7c8      	b.n	14070 <z_arm_fault+0xcc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   140de:	6829      	ldr	r1, [r5, #0]
   140e0:	483a      	ldr	r0, [pc, #232]	; (141cc <z_arm_fault+0x228>)
   140e2:	4632      	mov	r2, r6
   140e4:	f010 fd34 	bl	24b50 <log_1>
			reason = esf->basic.r0;
   140e8:	682c      	ldr	r4, [r5, #0]
   140ea:	e7c1      	b.n	14070 <z_arm_fault+0xcc>
		} else if (SCB_BFSR != 0) {
   140ec:	4b38      	ldr	r3, [pc, #224]	; (141d0 <z_arm_fault+0x22c>)
   140ee:	781b      	ldrb	r3, [r3, #0]
   140f0:	b12b      	cbz	r3, 140fe <z_arm_fault+0x15a>
			reason = bus_fault(esf, 1, recoverable);
   140f2:	f10d 0107 	add.w	r1, sp, #7
   140f6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   140f8:	f7ff fee6 	bl	13ec8 <bus_fault.isra.0>
   140fc:	e7ed      	b.n	140da <z_arm_fault+0x136>
		} else if (SCB_UFSR != 0) {
   140fe:	4b35      	ldr	r3, [pc, #212]	; (141d4 <z_arm_fault+0x230>)
   14100:	881b      	ldrh	r3, [r3, #0]
   14102:	b29b      	uxth	r3, r3
   14104:	b113      	cbz	r3, 1410c <z_arm_fault+0x168>
		reason = usage_fault(esf);
   14106:	f7ff fe83 	bl	13e10 <usage_fault.isra.0>
   1410a:	e7e6      	b.n	140da <z_arm_fault+0x136>
			__ASSERT(0,
   1410c:	4932      	ldr	r1, [pc, #200]	; (141d8 <z_arm_fault+0x234>)
   1410e:	4a27      	ldr	r2, [pc, #156]	; (141ac <z_arm_fault+0x208>)
   14110:	4828      	ldr	r0, [pc, #160]	; (141b4 <z_arm_fault+0x210>)
   14112:	f240 23c3 	movw	r3, #707	; 0x2c3
   14116:	f010 faef 	bl	246f8 <printk>
   1411a:	4830      	ldr	r0, [pc, #192]	; (141dc <z_arm_fault+0x238>)
   1411c:	f010 faec 	bl	246f8 <printk>
   14120:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   14124:	4821      	ldr	r0, [pc, #132]	; (141ac <z_arm_fault+0x208>)
   14126:	f010 fcd8 	bl	24ada <assert_post_action>
   1412a:	e7a1      	b.n	14070 <z_arm_fault+0xcc>
   1412c:	492a      	ldr	r1, [pc, #168]	; (141d8 <z_arm_fault+0x234>)
   1412e:	4a1f      	ldr	r2, [pc, #124]	; (141ac <z_arm_fault+0x208>)
   14130:	4820      	ldr	r0, [pc, #128]	; (141b4 <z_arm_fault+0x210>)
   14132:	f240 23c7 	movw	r3, #711	; 0x2c7
   14136:	f010 fadf 	bl	246f8 <printk>
   1413a:	4829      	ldr	r0, [pc, #164]	; (141e0 <z_arm_fault+0x23c>)
   1413c:	f010 fadc 	bl	246f8 <printk>
   14140:	f240 21c7 	movw	r1, #711	; 0x2c7
   14144:	e7ee      	b.n	14124 <z_arm_fault+0x180>
		reason = mem_manage_fault(esf, 0, recoverable);
   14146:	f10d 0207 	add.w	r2, sp, #7
   1414a:	2100      	movs	r1, #0
   1414c:	e7c2      	b.n	140d4 <z_arm_fault+0x130>
		reason = bus_fault(esf, 0, recoverable);
   1414e:	f10d 0107 	add.w	r1, sp, #7
   14152:	2000      	movs	r0, #0
   14154:	e7d0      	b.n	140f8 <z_arm_fault+0x154>
   14156:	4912      	ldr	r1, [pc, #72]	; (141a0 <z_arm_fault+0x1fc>)
   14158:	4b12      	ldr	r3, [pc, #72]	; (141a4 <z_arm_fault+0x200>)
	PR_FAULT_INFO(
   1415a:	4822      	ldr	r0, [pc, #136]	; (141e4 <z_arm_fault+0x240>)
   1415c:	1ac9      	subs	r1, r1, r3
   1415e:	08c9      	lsrs	r1, r1, #3
   14160:	0189      	lsls	r1, r1, #6
   14162:	f041 0101 	orr.w	r1, r1, #1
   14166:	e778      	b.n	1405a <z_arm_fault+0xb6>
   14168:	4a0e      	ldr	r2, [pc, #56]	; (141a4 <z_arm_fault+0x200>)
   1416a:	4b0d      	ldr	r3, [pc, #52]	; (141a0 <z_arm_fault+0x1fc>)
	PR_FAULT_INFO("***** %s %d) *****",
   1416c:	481e      	ldr	r0, [pc, #120]	; (141e8 <z_arm_fault+0x244>)
   1416e:	491f      	ldr	r1, [pc, #124]	; (141ec <z_arm_fault+0x248>)
   14170:	1a9b      	subs	r3, r3, r2
   14172:	08db      	lsrs	r3, r3, #3
   14174:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   14178:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1417c:	bf18      	it	ne
   1417e:	4601      	movne	r1, r0
   14180:	f043 0301 	orr.w	r3, r3, #1
   14184:	481a      	ldr	r0, [pc, #104]	; (141f0 <z_arm_fault+0x24c>)
   14186:	f1a4 0210 	sub.w	r2, r4, #16
   1418a:	f010 fcf5 	bl	24b78 <log_2>
   1418e:	e766      	b.n	1405e <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14190:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14194:	f023 0301 	bic.w	r3, r3, #1
   14198:	e77d      	b.n	14096 <z_arm_fault+0xf2>
   1419a:	bf00      	nop
   1419c:	e000ed00 	.word	0xe000ed00
   141a0:	00028708 	.word	0x00028708
   141a4:	00028618 	.word	0x00028618
   141a8:	0002d700 	.word	0x0002d700
   141ac:	0002d504 	.word	0x0002d504
   141b0:	0002d72b 	.word	0x0002d72b
   141b4:	000290f5 	.word	0x000290f5
   141b8:	0002d73e 	.word	0x0002d73e
   141bc:	0002d77c 	.word	0x0002d77c
   141c0:	0002d793 	.word	0x0002d793
   141c4:	0002d7b4 	.word	0x0002d7b4
   141c8:	0002d7c2 	.word	0x0002d7c2
   141cc:	0002d7e1 	.word	0x0002d7e1
   141d0:	e000ed29 	.word	0xe000ed29
   141d4:	e000ed2a 	.word	0xe000ed2a
   141d8:	0002cf26 	.word	0x0002cf26
   141dc:	0002d7fd 	.word	0x0002d7fd
   141e0:	0002d821 	.word	0x0002d821
   141e4:	0002d851 	.word	0x0002d851
   141e8:	0002d88a 	.word	0x0002d88a
   141ec:	0002d875 	.word	0x0002d875
   141f0:	0002d8a3 	.word	0x0002d8a3

000141f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   141f4:	4a02      	ldr	r2, [pc, #8]	; (14200 <z_arm_fault_init+0xc>)
   141f6:	6953      	ldr	r3, [r2, #20]
   141f8:	f043 0310 	orr.w	r3, r3, #16
   141fc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   141fe:	4770      	bx	lr
   14200:	e000ed00 	.word	0xe000ed00

00014204 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14204:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14208:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1420c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1420e:	4672      	mov	r2, lr
	bl z_arm_fault
   14210:	f7ff fec8 	bl	13fa4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14214:	bd01      	pop	{r0, pc}
   14216:	bf00      	nop

00014218 <z_arm_interrupt_init>:
   14218:	4804      	ldr	r0, [pc, #16]	; (1422c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1421a:	2300      	movs	r3, #0
   1421c:	2140      	movs	r1, #64	; 0x40
   1421e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14220:	3301      	adds	r3, #1
   14222:	2b27      	cmp	r3, #39	; 0x27
   14224:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14228:	d1f9      	bne.n	1421e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1422a:	4770      	bx	lr
   1422c:	e000e100 	.word	0xe000e100

00014230 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14230:	2000      	movs	r0, #0
    msr CONTROL, r0
   14232:	f380 8814 	msr	CONTROL, r0
    isb
   14236:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1423a:	f014 f84b 	bl	282d4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1423e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14240:	490d      	ldr	r1, [pc, #52]	; (14278 <__start+0x48>)
    str r0, [r1]
   14242:	6008      	str	r0, [r1, #0]
    dsb
   14244:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14248:	480c      	ldr	r0, [pc, #48]	; (1427c <__start+0x4c>)
    msr msp, r0
   1424a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1424e:	f000 f829 	bl	142a4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14252:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14254:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14258:	4809      	ldr	r0, [pc, #36]	; (14280 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1425a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1425e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14260:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14264:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14268:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1426a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1426c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14270:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14274:	f7ff fc44 	bl	13b00 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14278:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1427c:	20003f00 	.word	0x20003f00
    ldr r0, =z_interrupt_stacks
   14280:	20004080 	.word	0x20004080

00014284 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14284:	4a06      	ldr	r2, [pc, #24]	; (142a0 <z_arm_clear_arm_mpu_config+0x1c>)
   14286:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   14288:	2300      	movs	r3, #0
	int num_regions =
   1428a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1428e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14290:	428b      	cmp	r3, r1
   14292:	d100      	bne.n	14296 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   14294:	4770      	bx	lr
  MPU->RNR = rnr;
   14296:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   14298:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   1429a:	3301      	adds	r3, #1
   1429c:	e7f8      	b.n	14290 <z_arm_clear_arm_mpu_config+0xc>
   1429e:	bf00      	nop
   142a0:	e000ed90 	.word	0xe000ed90

000142a4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   142a4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   142a6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   142a8:	2300      	movs	r3, #0
   142aa:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   142ae:	f7ff ffe9 	bl	14284 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   142b2:	4b14      	ldr	r3, [pc, #80]	; (14304 <z_arm_init_arch_hw_at_boot+0x60>)
   142b4:	f04f 32ff 	mov.w	r2, #4294967295
   142b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   142bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   142c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   142c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   142c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   142cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   142d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   142d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   142d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   142dc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   142e0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   142e4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   142e8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   142ec:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   142f0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   142f4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   142f8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   142fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   142fe:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14302:	bd08      	pop	{r3, pc}
   14304:	e000e100 	.word	0xe000e100

00014308 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14308:	4b06      	ldr	r3, [pc, #24]	; (14324 <z_impl_k_thread_abort+0x1c>)
   1430a:	689b      	ldr	r3, [r3, #8]
   1430c:	4283      	cmp	r3, r0
   1430e:	d107      	bne.n	14320 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14310:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14314:	b123      	cbz	r3, 14320 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14316:	4a04      	ldr	r2, [pc, #16]	; (14328 <z_impl_k_thread_abort+0x20>)
   14318:	6853      	ldr	r3, [r2, #4]
   1431a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1431e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14320:	f00f ba76 	b.w	23810 <z_thread_abort>
   14324:	20002508 	.word	0x20002508
   14328:	e000ed00 	.word	0xe000ed00

0001432c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1432c:	4b02      	ldr	r3, [pc, #8]	; (14338 <z_arm_configure_static_mpu_regions+0xc>)
   1432e:	4a03      	ldr	r2, [pc, #12]	; (1433c <z_arm_configure_static_mpu_regions+0x10>)
   14330:	4803      	ldr	r0, [pc, #12]	; (14340 <z_arm_configure_static_mpu_regions+0x14>)
   14332:	2101      	movs	r1, #1
   14334:	f000 b884 	b.w	14440 <arm_core_mpu_configure_static_mpu_regions>
   14338:	20010000 	.word	0x20010000
   1433c:	20000000 	.word	0x20000000
   14340:	000288dc 	.word	0x000288dc

00014344 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14344:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14346:	4b05      	ldr	r3, [pc, #20]	; (1435c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14348:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1434a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1434c:	4a04      	ldr	r2, [pc, #16]	; (14360 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1434e:	2120      	movs	r1, #32
   14350:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14354:	4618      	mov	r0, r3
   14356:	2101      	movs	r1, #1
   14358:	f000 b89a 	b.w	14490 <arm_core_mpu_configure_dynamic_mpu_regions>
   1435c:	2000215c 	.word	0x2000215c
   14360:	150b0000 	.word	0x150b0000

00014364 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14366:	4f28      	ldr	r7, [pc, #160]	; (14408 <mpu_configure_regions+0xa4>)
   14368:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1436a:	2100      	movs	r1, #0
   1436c:	42b1      	cmp	r1, r6
   1436e:	da14      	bge.n	1439a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   14370:	6844      	ldr	r4, [r0, #4]
   14372:	2c00      	cmp	r4, #0
   14374:	d045      	beq.n	14402 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14376:	b1c3      	cbz	r3, 143aa <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14378:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1437c:	ea14 0f0c 	tst.w	r4, ip
   14380:	d00d      	beq.n	1439e <mpu_configure_regions+0x3a>
   14382:	4a22      	ldr	r2, [pc, #136]	; (1440c <mpu_configure_regions+0xa8>)
   14384:	4b22      	ldr	r3, [pc, #136]	; (14410 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14386:	4823      	ldr	r0, [pc, #140]	; (14414 <mpu_configure_regions+0xb0>)
   14388:	1ad2      	subs	r2, r2, r3
   1438a:	08d2      	lsrs	r2, r2, #3
   1438c:	0192      	lsls	r2, r2, #6
   1438e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14392:	f010 fbdd 	bl	24b50 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14396:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1439a:	4610      	mov	r0, r2
   1439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   1439e:	2c1f      	cmp	r4, #31
   143a0:	d9ef      	bls.n	14382 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   143a2:	6805      	ldr	r5, [r0, #0]
		&&
   143a4:	ea1c 0f05 	tst.w	ip, r5
   143a8:	d1eb      	bne.n	14382 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   143aa:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   143ac:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   143ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   143b2:	6802      	ldr	r2, [r0, #0]
   143b4:	d916      	bls.n	143e4 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   143b6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   143ba:	d815      	bhi.n	143e8 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   143bc:	3c01      	subs	r4, #1
   143be:	fab4 f484 	clz	r4, r4
   143c2:	f1c4 041f 	rsb	r4, r4, #31
   143c6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   143c8:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   143ca:	ea4c 0404 	orr.w	r4, ip, r4
   143ce:	d90d      	bls.n	143ec <mpu_configure_regions+0x88>
   143d0:	4a0e      	ldr	r2, [pc, #56]	; (1440c <mpu_configure_regions+0xa8>)
   143d2:	4b0f      	ldr	r3, [pc, #60]	; (14410 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   143d4:	4810      	ldr	r0, [pc, #64]	; (14418 <mpu_configure_regions+0xb4>)
   143d6:	1ad2      	subs	r2, r2, r3
   143d8:	08d2      	lsrs	r2, r2, #3
   143da:	0192      	lsls	r2, r2, #6
   143dc:	f042 0201 	orr.w	r2, r2, #1
   143e0:	4629      	mov	r1, r5
   143e2:	e7d6      	b.n	14392 <mpu_configure_regions+0x2e>
		return REGION_32B;
   143e4:	2408      	movs	r4, #8
   143e6:	e7ef      	b.n	143c8 <mpu_configure_regions+0x64>
		return REGION_4G;
   143e8:	243e      	movs	r4, #62	; 0x3e
   143ea:	e7ed      	b.n	143c8 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   143ec:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   143f0:	432a      	orrs	r2, r5
   143f2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   143f6:	f044 0401 	orr.w	r4, r4, #1
   143fa:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   143fc:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   143fe:	613c      	str	r4, [r7, #16]
		reg_index++;
   14400:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   14402:	3101      	adds	r1, #1
   14404:	300c      	adds	r0, #12
   14406:	e7b1      	b.n	1436c <mpu_configure_regions+0x8>
   14408:	e000ed90 	.word	0xe000ed90
   1440c:	000286e8 	.word	0x000286e8
   14410:	00028618 	.word	0x00028618
   14414:	0002d8ba 	.word	0x0002d8ba
   14418:	0002d8dd 	.word	0x0002d8dd

0001441c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1441c:	4b03      	ldr	r3, [pc, #12]	; (1442c <arm_core_mpu_enable+0x10>)
   1441e:	2205      	movs	r2, #5
   14420:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14426:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1442a:	4770      	bx	lr
   1442c:	e000ed90 	.word	0xe000ed90

00014430 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14430:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14434:	4b01      	ldr	r3, [pc, #4]	; (1443c <arm_core_mpu_disable+0xc>)
   14436:	2200      	movs	r2, #0
   14438:	605a      	str	r2, [r3, #4]
}
   1443a:	4770      	bx	lr
   1443c:	e000ed90 	.word	0xe000ed90

00014440 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14440:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14442:	4d0e      	ldr	r5, [pc, #56]	; (1447c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14444:	2301      	movs	r3, #1
   14446:	782a      	ldrb	r2, [r5, #0]
   14448:	460c      	mov	r4, r1
   1444a:	f7ff ff8b 	bl	14364 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1444e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14450:	3016      	adds	r0, #22
   14452:	d111      	bne.n	14478 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14454:	f240 1311 	movw	r3, #273	; 0x111
   14458:	4a09      	ldr	r2, [pc, #36]	; (14480 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1445a:	490a      	ldr	r1, [pc, #40]	; (14484 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   1445c:	480a      	ldr	r0, [pc, #40]	; (14488 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   1445e:	f010 f94b 	bl	246f8 <printk>
   14462:	4621      	mov	r1, r4
   14464:	4809      	ldr	r0, [pc, #36]	; (1448c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   14466:	f010 f947 	bl	246f8 <printk>
			regions_num);
	}
}
   1446a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1446e:	4804      	ldr	r0, [pc, #16]	; (14480 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14470:	f240 1111 	movw	r1, #273	; 0x111
   14474:	f010 bb31 	b.w	24ada <assert_post_action>
}
   14478:	bd38      	pop	{r3, r4, r5, pc}
   1447a:	bf00      	nop
   1447c:	20002594 	.word	0x20002594
   14480:	0002d903 	.word	0x0002d903
   14484:	0002cf26 	.word	0x0002cf26
   14488:	000290f5 	.word	0x000290f5
   1448c:	0002d93a 	.word	0x0002d93a

00014490 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14490:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14492:	4a12      	ldr	r2, [pc, #72]	; (144dc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14494:	2300      	movs	r3, #0
   14496:	7812      	ldrb	r2, [r2, #0]
   14498:	460c      	mov	r4, r1
   1449a:	f7ff ff63 	bl	14364 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1449e:	f110 0f16 	cmn.w	r0, #22
   144a2:	d008      	beq.n	144b6 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   144a4:	4b0e      	ldr	r3, [pc, #56]	; (144e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   144a6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   144a8:	2807      	cmp	r0, #7
   144aa:	dd00      	ble.n	144ae <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   144ac:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   144ae:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   144b0:	611a      	str	r2, [r3, #16]
   144b2:	3001      	adds	r0, #1
   144b4:	e7f8      	b.n	144a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   144b6:	4a0b      	ldr	r2, [pc, #44]	; (144e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   144b8:	490b      	ldr	r1, [pc, #44]	; (144e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   144ba:	480c      	ldr	r0, [pc, #48]	; (144ec <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   144bc:	f44f 7398 	mov.w	r3, #304	; 0x130
   144c0:	f010 f91a 	bl	246f8 <printk>
   144c4:	4621      	mov	r1, r4
   144c6:	480a      	ldr	r0, [pc, #40]	; (144f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   144c8:	f010 f916 	bl	246f8 <printk>
}
   144cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   144d0:	4804      	ldr	r0, [pc, #16]	; (144e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   144d2:	f44f 7198 	mov.w	r1, #304	; 0x130
   144d6:	f010 bb00 	b.w	24ada <assert_post_action>
   144da:	bf00      	nop
   144dc:	20002594 	.word	0x20002594
   144e0:	e000ed90 	.word	0xe000ed90
   144e4:	0002d903 	.word	0x0002d903
   144e8:	0002cf26 	.word	0x0002cf26
   144ec:	000290f5 	.word	0x000290f5
   144f0:	0002d966 	.word	0x0002d966

000144f4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   144f4:	4925      	ldr	r1, [pc, #148]	; (1458c <z_arm_mpu_init+0x98>)
{
   144f6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   144f8:	680c      	ldr	r4, [r1, #0]
   144fa:	2c08      	cmp	r4, #8
   144fc:	d913      	bls.n	14526 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   144fe:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14502:	4a23      	ldr	r2, [pc, #140]	; (14590 <z_arm_mpu_init+0x9c>)
   14504:	4923      	ldr	r1, [pc, #140]	; (14594 <z_arm_mpu_init+0xa0>)
   14506:	4824      	ldr	r0, [pc, #144]	; (14598 <z_arm_mpu_init+0xa4>)
   14508:	f010 f8f6 	bl	246f8 <printk>
   1450c:	4823      	ldr	r0, [pc, #140]	; (1459c <z_arm_mpu_init+0xa8>)
   1450e:	2208      	movs	r2, #8
   14510:	4621      	mov	r1, r4
   14512:	f010 f8f1 	bl	246f8 <printk>
   14516:	481e      	ldr	r0, [pc, #120]	; (14590 <z_arm_mpu_init+0x9c>)
   14518:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1451c:	f010 fadd 	bl	24ada <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14520:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14524:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14526:	f7ff ff83 	bl	14430 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1452a:	6848      	ldr	r0, [r1, #4]
   1452c:	491c      	ldr	r1, [pc, #112]	; (145a0 <z_arm_mpu_init+0xac>)
   1452e:	2200      	movs	r2, #0
   14530:	4294      	cmp	r4, r2
   14532:	f100 000c 	add.w	r0, r0, #12
   14536:	d119      	bne.n	1456c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   14538:	4b1a      	ldr	r3, [pc, #104]	; (145a4 <z_arm_mpu_init+0xb0>)
   1453a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1453c:	f7ff ff6e 	bl	1441c <arm_core_mpu_enable>
	__ASSERT(
   14540:	680b      	ldr	r3, [r1, #0]
   14542:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14546:	2b08      	cmp	r3, #8
   14548:	d00e      	beq.n	14568 <z_arm_mpu_init+0x74>
   1454a:	4917      	ldr	r1, [pc, #92]	; (145a8 <z_arm_mpu_init+0xb4>)
   1454c:	4a10      	ldr	r2, [pc, #64]	; (14590 <z_arm_mpu_init+0x9c>)
   1454e:	4812      	ldr	r0, [pc, #72]	; (14598 <z_arm_mpu_init+0xa4>)
   14550:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   14554:	f010 f8d0 	bl	246f8 <printk>
   14558:	4814      	ldr	r0, [pc, #80]	; (145ac <z_arm_mpu_init+0xb8>)
   1455a:	f010 f8cd 	bl	246f8 <printk>
   1455e:	480c      	ldr	r0, [pc, #48]	; (14590 <z_arm_mpu_init+0x9c>)
   14560:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   14564:	f010 fab9 	bl	24ada <assert_post_action>
	return 0;
   14568:	2000      	movs	r0, #0
   1456a:	e7db      	b.n	14524 <z_arm_mpu_init+0x30>
   1456c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1456e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14572:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14576:	4313      	orrs	r3, r2
   14578:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1457c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1457e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14582:	f043 0301 	orr.w	r3, r3, #1
   14586:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14588:	3201      	adds	r2, #1
   1458a:	e7d1      	b.n	14530 <z_arm_mpu_init+0x3c>
   1458c:	000288e8 	.word	0x000288e8
   14590:	0002d903 	.word	0x0002d903
   14594:	0002cf26 	.word	0x0002cf26
   14598:	000290f5 	.word	0x000290f5
   1459c:	0002d993 	.word	0x0002d993
   145a0:	e000ed90 	.word	0xe000ed90
   145a4:	20002594 	.word	0x20002594
   145a8:	0002d9c7 	.word	0x0002d9c7
   145ac:	0002da17 	.word	0x0002da17

000145b0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   145b0:	4b01      	ldr	r3, [pc, #4]	; (145b8 <__stdout_hook_install+0x8>)
   145b2:	6018      	str	r0, [r3, #0]
}
   145b4:	4770      	bx	lr
   145b6:	bf00      	nop
   145b8:	2000043c 	.word	0x2000043c

000145bc <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   145bc:	b40e      	push	{r1, r2, r3}
   145be:	b50f      	push	{r0, r1, r2, r3, lr}
   145c0:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   145c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   145c6:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   145ca:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   145cc:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   145ce:	4806      	ldr	r0, [pc, #24]	; (145e8 <sprintf+0x2c>)
	va_start(vargs, format);
   145d0:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   145d2:	a902      	add	r1, sp, #8
   145d4:	f7fc fece 	bl	11374 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   145d8:	9b02      	ldr	r3, [sp, #8]
   145da:	2200      	movs	r2, #0
   145dc:	701a      	strb	r2, [r3, #0]
	return r;
}
   145de:	b004      	add	sp, #16
   145e0:	f85d eb04 	ldr.w	lr, [sp], #4
   145e4:	b003      	add	sp, #12
   145e6:	4770      	bx	lr
   145e8:	00025993 	.word	0x00025993

000145ec <nordicsemi_nrf52_init>:
	__asm__ volatile(
   145ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   145f0:	f3ef 8211 	mrs	r2, BASEPRI
   145f4:	f383 8812 	msr	BASEPRI_MAX, r3
   145f8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   145fc:	4906      	ldr	r1, [pc, #24]	; (14618 <nordicsemi_nrf52_init+0x2c>)
   145fe:	2301      	movs	r3, #1
   14600:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14604:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14608:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   1460c:	f382 8811 	msr	BASEPRI, r2
   14610:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14614:	2000      	movs	r0, #0
   14616:	4770      	bx	lr
   14618:	4001e000 	.word	0x4001e000

0001461c <sys_arch_reboot>:
    *p_gpregret = val;
   1461c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14620:	b2c0      	uxtb	r0, r0
   14622:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14626:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1462a:	4905      	ldr	r1, [pc, #20]	; (14640 <sys_arch_reboot+0x24>)
   1462c:	4b05      	ldr	r3, [pc, #20]	; (14644 <sys_arch_reboot+0x28>)
   1462e:	68ca      	ldr	r2, [r1, #12]
   14630:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14634:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14636:	60cb      	str	r3, [r1, #12]
   14638:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1463c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1463e:	e7fd      	b.n	1463c <sys_arch_reboot+0x20>
   14640:	e000ed00 	.word	0xe000ed00
   14644:	05fa0004 	.word	0x05fa0004

00014648 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14648:	b120      	cbz	r0, 14654 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1464a:	4b03      	ldr	r3, [pc, #12]	; (14658 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1464c:	0180      	lsls	r0, r0, #6
   1464e:	f043 0301 	orr.w	r3, r3, #1
   14652:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14654:	4770      	bx	lr
   14656:	bf00      	nop
   14658:	00028880 	.word	0x00028880

0001465c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1465c:	4b0e      	ldr	r3, [pc, #56]	; (14698 <bt_hex_real+0x3c>)
   1465e:	2940      	cmp	r1, #64	; 0x40
{
   14660:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14662:	bf28      	it	cs
   14664:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   14666:	4c0d      	ldr	r4, [pc, #52]	; (1469c <bt_hex_real+0x40>)
   14668:	1846      	adds	r6, r0, r1
   1466a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   1466c:	42b0      	cmp	r0, r6
   1466e:	f103 0302 	add.w	r3, r3, #2
   14672:	d104      	bne.n	1467e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14674:	2300      	movs	r3, #0
   14676:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1467a:	4807      	ldr	r0, [pc, #28]	; (14698 <bt_hex_real+0x3c>)
   1467c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1467e:	7802      	ldrb	r2, [r0, #0]
   14680:	0912      	lsrs	r2, r2, #4
   14682:	5ca2      	ldrb	r2, [r4, r2]
   14684:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14688:	f810 2b01 	ldrb.w	r2, [r0], #1
   1468c:	f002 020f 	and.w	r2, r2, #15
   14690:	5ca2      	ldrb	r2, [r4, r2]
   14692:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14696:	e7e9      	b.n	1466c <bt_hex_real+0x10>
   14698:	20002595 	.word	0x20002595
   1469c:	0002da4b 	.word	0x0002da4b

000146a0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   146a0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   146a2:	7803      	ldrb	r3, [r0, #0]
   146a4:	b08b      	sub	sp, #44	; 0x2c
   146a6:	4604      	mov	r4, r0
   146a8:	ad07      	add	r5, sp, #28
   146aa:	2b03      	cmp	r3, #3
   146ac:	d821      	bhi.n	146f2 <bt_addr_le_str_real+0x52>
   146ae:	e8df f003 	tbb	[pc, r3]
   146b2:	1a02      	.short	0x1a02
   146b4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   146b6:	4912      	ldr	r1, [pc, #72]	; (14700 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   146b8:	4628      	mov	r0, r5
   146ba:	f011 f8fb 	bl	258b4 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   146be:	7863      	ldrb	r3, [r4, #1]
   146c0:	9304      	str	r3, [sp, #16]
   146c2:	78a3      	ldrb	r3, [r4, #2]
   146c4:	9303      	str	r3, [sp, #12]
   146c6:	78e3      	ldrb	r3, [r4, #3]
   146c8:	9302      	str	r3, [sp, #8]
   146ca:	7923      	ldrb	r3, [r4, #4]
   146cc:	9301      	str	r3, [sp, #4]
   146ce:	7963      	ldrb	r3, [r4, #5]
   146d0:	9300      	str	r3, [sp, #0]
   146d2:	4a0c      	ldr	r2, [pc, #48]	; (14704 <bt_addr_le_str_real+0x64>)
   146d4:	79a3      	ldrb	r3, [r4, #6]
   146d6:	9505      	str	r5, [sp, #20]
   146d8:	211e      	movs	r1, #30
   146da:	480b      	ldr	r0, [pc, #44]	; (14708 <bt_addr_le_str_real+0x68>)
   146dc:	f010 f819 	bl	24712 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   146e0:	4809      	ldr	r0, [pc, #36]	; (14708 <bt_addr_le_str_real+0x68>)
   146e2:	b00b      	add	sp, #44	; 0x2c
   146e4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   146e6:	4909      	ldr	r1, [pc, #36]	; (1470c <bt_addr_le_str_real+0x6c>)
   146e8:	e7e6      	b.n	146b8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   146ea:	4909      	ldr	r1, [pc, #36]	; (14710 <bt_addr_le_str_real+0x70>)
   146ec:	e7e4      	b.n	146b8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   146ee:	4909      	ldr	r1, [pc, #36]	; (14714 <bt_addr_le_str_real+0x74>)
   146f0:	e7e2      	b.n	146b8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   146f2:	4a09      	ldr	r2, [pc, #36]	; (14718 <bt_addr_le_str_real+0x78>)
   146f4:	210a      	movs	r1, #10
   146f6:	4628      	mov	r0, r5
   146f8:	f010 f80b 	bl	24712 <snprintk>
		break;
   146fc:	e7df      	b.n	146be <bt_addr_le_str_real+0x1e>
   146fe:	bf00      	nop
   14700:	00028ea5 	.word	0x00028ea5
   14704:	00028ec7 	.word	0x00028ec7
   14708:	20002616 	.word	0x20002616
   1470c:	00028eac 	.word	0x00028eac
   14710:	00028eb3 	.word	0x00028eb3
   14714:	00028ebd 	.word	0x00028ebd
   14718:	0002f158 	.word	0x0002f158

0001471c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   1471c:	b510      	push	{r4, lr}
   1471e:	4b0d      	ldr	r3, [pc, #52]	; (14754 <save_id+0x38>)
   14720:	4c0d      	ldr	r4, [pc, #52]	; (14758 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   14722:	480e      	ldr	r0, [pc, #56]	; (1475c <save_id+0x40>)
   14724:	1ae4      	subs	r4, r4, r3
   14726:	08e4      	lsrs	r4, r4, #3
   14728:	01a4      	lsls	r4, r4, #6
   1472a:	f044 0103 	orr.w	r1, r4, #3
   1472e:	f010 fa02 	bl	24b36 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   14732:	490b      	ldr	r1, [pc, #44]	; (14760 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   14734:	480b      	ldr	r0, [pc, #44]	; (14764 <save_id+0x48>)
   14736:	79ca      	ldrb	r2, [r1, #7]
   14738:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1473c:	f7fe f8be 	bl	128bc <settings_save_one>
	if (err) {
   14740:	4601      	mov	r1, r0
   14742:	b130      	cbz	r0, 14752 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   14744:	f044 0201 	orr.w	r2, r4, #1
   14748:	4807      	ldr	r0, [pc, #28]	; (14768 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   1474e:	f010 b9ff 	b.w	24b50 <log_1>
}
   14752:	bd10      	pop	{r4, pc}
   14754:	00028618 	.word	0x00028618
   14758:	00028680 	.word	0x00028680
   1475c:	0002da6e 	.word	0x0002da6e
   14760:	200002b0 	.word	0x200002b0
   14764:	0002da78 	.word	0x0002da78
   14768:	0002da7e 	.word	0x0002da7e

0001476c <set>:
{
   1476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1476e:	4616      	mov	r6, r2
   14770:	461f      	mov	r7, r3
	if (!name) {
   14772:	4604      	mov	r4, r0
   14774:	b960      	cbnz	r0, 14790 <set+0x24>
   14776:	4925      	ldr	r1, [pc, #148]	; (1480c <set+0xa0>)
   14778:	4b25      	ldr	r3, [pc, #148]	; (14810 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
   1477a:	4826      	ldr	r0, [pc, #152]	; (14814 <set+0xa8>)
   1477c:	1ac9      	subs	r1, r1, r3
   1477e:	08c9      	lsrs	r1, r1, #3
   14780:	0189      	lsls	r1, r1, #6
   14782:	f041 0101 	orr.w	r1, r1, #1
   14786:	f010 f9d6 	bl	24b36 <log_0>
	return -ENOENT;
   1478a:	f06f 0401 	mvn.w	r4, #1
   1478e:	e01c      	b.n	147ca <set+0x5e>
	len = settings_name_next(name, &next);
   14790:	a901      	add	r1, sp, #4
   14792:	f010 fcd0 	bl	25136 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   14796:	4920      	ldr	r1, [pc, #128]	; (14818 <set+0xac>)
	len = settings_name_next(name, &next);
   14798:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1479a:	4620      	mov	r0, r4
   1479c:	f011 f8c3 	bl	25926 <strncmp>
   147a0:	4604      	mov	r4, r0
   147a2:	2800      	cmp	r0, #0
   147a4:	d1f1      	bne.n	1478a <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147a6:	f3bf 8f5b 	dmb	ish
   147aa:	4d1c      	ldr	r5, [pc, #112]	; (1481c <set+0xb0>)
   147ac:	682b      	ldr	r3, [r5, #0]
   147ae:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   147b2:	075b      	lsls	r3, r3, #29
   147b4:	d50c      	bpl.n	147d0 <set+0x64>
   147b6:	4915      	ldr	r1, [pc, #84]	; (1480c <set+0xa0>)
   147b8:	4b15      	ldr	r3, [pc, #84]	; (14810 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
   147ba:	4819      	ldr	r0, [pc, #100]	; (14820 <set+0xb4>)
   147bc:	1ac9      	subs	r1, r1, r3
   147be:	08c9      	lsrs	r1, r1, #3
   147c0:	0189      	lsls	r1, r1, #6
   147c2:	f041 0102 	orr.w	r1, r1, #2
   147c6:	f010 f9b6 	bl	24b36 <log_0>
}
   147ca:	4620      	mov	r0, r4
   147cc:	b003      	add	sp, #12
   147ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   147d0:	3dcc      	subs	r5, #204	; 0xcc
   147d2:	2207      	movs	r2, #7
   147d4:	4629      	mov	r1, r5
   147d6:	4638      	mov	r0, r7
   147d8:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   147da:	2806      	cmp	r0, #6
   147dc:	d810      	bhi.n	14800 <set+0x94>
   147de:	4b0c      	ldr	r3, [pc, #48]	; (14810 <set+0xa4>)
   147e0:	490a      	ldr	r1, [pc, #40]	; (1480c <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
   147e2:	4810      	ldr	r0, [pc, #64]	; (14824 <set+0xb8>)
   147e4:	1ac9      	subs	r1, r1, r3
   147e6:	08c9      	lsrs	r1, r1, #3
   147e8:	0189      	lsls	r1, r1, #6
   147ea:	f041 0101 	orr.w	r1, r1, #1
   147ee:	f010 f9a2 	bl	24b36 <log_0>
			(void)memset(bt_dev.id_addr, 0,
   147f2:	2207      	movs	r2, #7
   147f4:	4621      	mov	r1, r4
   147f6:	4628      	mov	r0, r5
   147f8:	f011 f8bf 	bl	2597a <memset>
			bt_dev.id_count = 0U;
   147fc:	71ec      	strb	r4, [r5, #7]
   147fe:	e7e4      	b.n	147ca <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   14800:	2307      	movs	r3, #7
   14802:	fbb0 f0f3 	udiv	r0, r0, r3
   14806:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   14808:	e7df      	b.n	147ca <set+0x5e>
   1480a:	bf00      	nop
   1480c:	00028680 	.word	0x00028680
   14810:	00028618 	.word	0x00028618
   14814:	0002da99 	.word	0x0002da99
   14818:	00028eba 	.word	0x00028eba
   1481c:	2000037c 	.word	0x2000037c
   14820:	0002daba 	.word	0x0002daba
   14824:	0002dade 	.word	0x0002dade

00014828 <bt_settings_encode_key>:
{
   14828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1482c:	b088      	sub	sp, #32
   1482e:	799c      	ldrb	r4, [r3, #6]
   14830:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   14834:	795d      	ldrb	r5, [r3, #5]
   14836:	791e      	ldrb	r6, [r3, #4]
   14838:	78df      	ldrb	r7, [r3, #3]
   1483a:	f893 c002 	ldrb.w	ip, [r3, #2]
   1483e:	f893 e001 	ldrb.w	lr, [r3, #1]
   14842:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   14844:	f1b8 0f00 	cmp.w	r8, #0
   14848:	d00e      	beq.n	14868 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   1484a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1484e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   14852:	4613      	mov	r3, r2
   14854:	e9cd 6702 	strd	r6, r7, [sp, #8]
   14858:	e9cd 4500 	strd	r4, r5, [sp]
   1485c:	4a08      	ldr	r2, [pc, #32]	; (14880 <bt_settings_encode_key+0x58>)
   1485e:	f00f ff58 	bl	24712 <snprintk>
}
   14862:	b008      	add	sp, #32
   14864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   14868:	e9cd e305 	strd	lr, r3, [sp, #20]
   1486c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   14870:	4613      	mov	r3, r2
   14872:	e9cd 5601 	strd	r5, r6, [sp, #4]
   14876:	4a03      	ldr	r2, [pc, #12]	; (14884 <bt_settings_encode_key+0x5c>)
   14878:	9400      	str	r4, [sp, #0]
   1487a:	f00f ff4a 	bl	24712 <snprintk>
}
   1487e:	e7f0      	b.n	14862 <bt_settings_encode_key+0x3a>
   14880:	0002db03 	.word	0x0002db03
   14884:	0002db27 	.word	0x0002db27

00014888 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   14888:	4801      	ldr	r0, [pc, #4]	; (14890 <bt_settings_save_id+0x8>)
   1488a:	f00d bc1b 	b.w	220c4 <k_work_submit>
   1488e:	bf00      	nop
   14890:	20000440 	.word	0x20000440

00014894 <commit>:
}

static int commit(void)
{
   14894:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   14896:	4d1b      	ldr	r5, [pc, #108]	; (14904 <commit+0x70>)
   14898:	79eb      	ldrb	r3, [r5, #7]
   1489a:	b9b3      	cbnz	r3, 148ca <commit+0x36>
		err = bt_setup_public_id_addr();
   1489c:	f000 ff0c 	bl	156b8 <bt_setup_public_id_addr>
		if (err) {
   148a0:	4604      	mov	r4, r0
   148a2:	b158      	cbz	r0, 148bc <commit+0x28>
   148a4:	4918      	ldr	r1, [pc, #96]	; (14908 <commit+0x74>)
   148a6:	4b19      	ldr	r3, [pc, #100]	; (1490c <commit+0x78>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   148a8:	4819      	ldr	r0, [pc, #100]	; (14910 <commit+0x7c>)
   148aa:	1ac9      	subs	r1, r1, r3
   148ac:	08c9      	lsrs	r1, r1, #3
   148ae:	0189      	lsls	r1, r1, #6
   148b0:	f041 0101 	orr.w	r1, r1, #1
   148b4:	f010 f93f 	bl	24b36 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   148b8:	4620      	mov	r0, r4
   148ba:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
   148bc:	79eb      	ldrb	r3, [r5, #7]
   148be:	b923      	cbnz	r3, 148ca <commit+0x36>
		err = bt_setup_random_id_addr();
   148c0:	f000 ff64 	bl	1578c <bt_setup_random_id_addr>
		if (err) {
   148c4:	4604      	mov	r4, r0
   148c6:	2800      	cmp	r0, #0
   148c8:	d1ec      	bne.n	148a4 <commit+0x10>
   148ca:	f3bf 8f5b 	dmb	ish
   148ce:	4d11      	ldr	r5, [pc, #68]	; (14914 <commit+0x80>)
   148d0:	682b      	ldr	r3, [r5, #0]
   148d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   148d6:	079b      	lsls	r3, r3, #30
   148d8:	d401      	bmi.n	148de <commit+0x4a>
		bt_finalize_init();
   148da:	f000 fc29 	bl	15130 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   148de:	f3bf 8f5b 	dmb	ish
   148e2:	e855 4f00 	ldrex	r4, [r5]
   148e6:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   148ea:	e845 3200 	strex	r2, r3, [r5]
   148ee:	2a00      	cmp	r2, #0
   148f0:	d1f7      	bne.n	148e2 <commit+0x4e>
   148f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   148f6:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   148fa:	d0dd      	beq.n	148b8 <commit+0x24>
		bt_settings_save_id();
   148fc:	f7ff ffc4 	bl	14888 <bt_settings_save_id>
	return 0;
   14900:	2400      	movs	r4, #0
   14902:	e7d9      	b.n	148b8 <commit+0x24>
   14904:	200002b0 	.word	0x200002b0
   14908:	00028680 	.word	0x00028680
   1490c:	00028618 	.word	0x00028618
   14910:	0002db48 	.word	0x0002db48
   14914:	2000037c 	.word	0x2000037c

00014918 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14918:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1491a:	7802      	ldrb	r2, [r0, #0]
   1491c:	2a01      	cmp	r2, #1
{
   1491e:	4604      	mov	r4, r0
   14920:	460b      	mov	r3, r1
	switch (src->type) {
   14922:	d016      	beq.n	14952 <uuid_to_uuid128+0x3a>
   14924:	2a02      	cmp	r2, #2
   14926:	d02c      	beq.n	14982 <uuid_to_uuid128+0x6a>
   14928:	b98a      	cbnz	r2, 1494e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1492a:	4a19      	ldr	r2, [pc, #100]	; (14990 <uuid_to_uuid128+0x78>)
   1492c:	460d      	mov	r5, r1
   1492e:	f102 0710 	add.w	r7, r2, #16
   14932:	6810      	ldr	r0, [r2, #0]
   14934:	6851      	ldr	r1, [r2, #4]
   14936:	462e      	mov	r6, r5
   14938:	c603      	stmia	r6!, {r0, r1}
   1493a:	3208      	adds	r2, #8
   1493c:	42ba      	cmp	r2, r7
   1493e:	4635      	mov	r5, r6
   14940:	d1f7      	bne.n	14932 <uuid_to_uuid128+0x1a>
   14942:	7812      	ldrb	r2, [r2, #0]
   14944:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   14946:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   14948:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1494a:	0a12      	lsrs	r2, r2, #8
   1494c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1494e:	bcf0      	pop	{r4, r5, r6, r7}
   14950:	4770      	bx	lr
		*dst = uuid128_base;
   14952:	4a0f      	ldr	r2, [pc, #60]	; (14990 <uuid_to_uuid128+0x78>)
   14954:	460d      	mov	r5, r1
   14956:	f102 0710 	add.w	r7, r2, #16
   1495a:	6810      	ldr	r0, [r2, #0]
   1495c:	6851      	ldr	r1, [r2, #4]
   1495e:	462e      	mov	r6, r5
   14960:	c603      	stmia	r6!, {r0, r1}
   14962:	3208      	adds	r2, #8
   14964:	42ba      	cmp	r2, r7
   14966:	4635      	mov	r5, r6
   14968:	d1f7      	bne.n	1495a <uuid_to_uuid128+0x42>
   1496a:	7812      	ldrb	r2, [r2, #0]
   1496c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1496e:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   14970:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   14972:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   14976:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   14978:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1497a:	0a12      	lsrs	r2, r2, #8
   1497c:	7399      	strb	r1, [r3, #14]
   1497e:	741a      	strb	r2, [r3, #16]
}
   14980:	e7e5      	b.n	1494e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   14982:	4601      	mov	r1, r0
}
   14984:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   14986:	2211      	movs	r2, #17
   14988:	4618      	mov	r0, r3
   1498a:	f010 bfeb 	b.w	25964 <memcpy>
   1498e:	bf00      	nop
   14990:	0002db7b 	.word	0x0002db7b

00014994 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14994:	b570      	push	{r4, r5, r6, lr}
   14996:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14998:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   1499c:	2b01      	cmp	r3, #1
{
   1499e:	4605      	mov	r5, r0
   149a0:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   149a2:	d00e      	beq.n	149c2 <bt_buf_get_rx+0x2e>
   149a4:	2805      	cmp	r0, #5
   149a6:	d00c      	beq.n	149c2 <bt_buf_get_rx+0x2e>
   149a8:	490d      	ldr	r1, [pc, #52]	; (149e0 <bt_buf_get_rx+0x4c>)
   149aa:	4a0e      	ldr	r2, [pc, #56]	; (149e4 <bt_buf_get_rx+0x50>)
   149ac:	480e      	ldr	r0, [pc, #56]	; (149e8 <bt_buf_get_rx+0x54>)
   149ae:	2341      	movs	r3, #65	; 0x41
   149b0:	f00f fea2 	bl	246f8 <printk>
   149b4:	480d      	ldr	r0, [pc, #52]	; (149ec <bt_buf_get_rx+0x58>)
   149b6:	f00f fe9f 	bl	246f8 <printk>
   149ba:	480a      	ldr	r0, [pc, #40]	; (149e4 <bt_buf_get_rx+0x50>)
   149bc:	2141      	movs	r1, #65	; 0x41
   149be:	f010 f88c 	bl	24ada <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   149c2:	4623      	mov	r3, r4
   149c4:	480a      	ldr	r0, [pc, #40]	; (149f0 <bt_buf_get_rx+0x5c>)
   149c6:	4632      	mov	r2, r6
   149c8:	f012 fe44 	bl	27654 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   149cc:	4604      	mov	r4, r0
   149ce:	b120      	cbz	r0, 149da <bt_buf_get_rx+0x46>
	net_buf_simple_reserve(&buf->b, reserve);
   149d0:	2100      	movs	r1, #0
   149d2:	3008      	adds	r0, #8
   149d4:	f007 f94a 	bl	1bc6c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   149d8:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   149da:	4620      	mov	r0, r4
   149dc:	bd70      	pop	{r4, r5, r6, pc}
   149de:	bf00      	nop
   149e0:	0002dbbb 	.word	0x0002dbbb
   149e4:	0002db8c 	.word	0x0002db8c
   149e8:	000290f5 	.word	0x000290f5
   149ec:	0002dc00 	.word	0x0002dc00
   149f0:	20000820 	.word	0x20000820

000149f4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   149f4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   149f6:	490b      	ldr	r1, [pc, #44]	; (14a24 <bt_buf_get_cmd_complete+0x30>)
{
   149f8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   149fa:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   149fe:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   14a00:	b920      	cbnz	r0, 14a0c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14a06:	2001      	movs	r0, #1
   14a08:	f7ff bfc4 	b.w	14994 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14a0c:	f007 f9d2 	bl	1bdb4 <net_buf_ref>
   14a10:	2301      	movs	r3, #1
		buf->len = 0U;
   14a12:	2100      	movs	r1, #0
   14a14:	7503      	strb	r3, [r0, #20]
   14a16:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   14a18:	4604      	mov	r4, r0
   14a1a:	3008      	adds	r0, #8
   14a1c:	f007 f926 	bl	1bc6c <net_buf_simple_reserve>
}
   14a20:	4620      	mov	r0, r4
   14a22:	bd10      	pop	{r4, pc}
   14a24:	200002b0 	.word	0x200002b0

00014a28 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14a28:	b570      	push	{r4, r5, r6, lr}
   14a2a:	4604      	mov	r4, r0
	switch (evt) {
   14a2c:	2c0f      	cmp	r4, #15
{
   14a2e:	460d      	mov	r5, r1
   14a30:	4610      	mov	r0, r2
   14a32:	4619      	mov	r1, r3
	switch (evt) {
   14a34:	d805      	bhi.n	14a42 <bt_buf_get_evt+0x1a>
   14a36:	2c0d      	cmp	r4, #13
   14a38:	d912      	bls.n	14a60 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   14a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14a3e:	f7ff bfd9 	b.w	149f4 <bt_buf_get_cmd_complete>
	switch (evt) {
   14a42:	2c13      	cmp	r4, #19
   14a44:	d10c      	bne.n	14a60 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   14a46:	480b      	ldr	r0, [pc, #44]	; (14a74 <bt_buf_get_evt+0x4c>)
   14a48:	f012 fe04 	bl	27654 <net_buf_alloc_fixed>
			if (buf) {
   14a4c:	4604      	mov	r4, r0
   14a4e:	b128      	cbz	r0, 14a5c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   14a50:	2100      	movs	r1, #0
   14a52:	3008      	adds	r0, #8
   14a54:	f007 f90a 	bl	1bc6c <net_buf_simple_reserve>
   14a58:	2301      	movs	r3, #1
   14a5a:	7523      	strb	r3, [r4, #20]
}
   14a5c:	4620      	mov	r0, r4
   14a5e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14a60:	4602      	mov	r2, r0
   14a62:	460b      	mov	r3, r1
		if (discardable) {
   14a64:	b10d      	cbz	r5, 14a6a <bt_buf_get_evt+0x42>
   14a66:	4804      	ldr	r0, [pc, #16]	; (14a78 <bt_buf_get_evt+0x50>)
   14a68:	e7ee      	b.n	14a48 <bt_buf_get_evt+0x20>
}
   14a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14a6e:	2001      	movs	r0, #1
   14a70:	f7ff bf90 	b.w	14994 <bt_buf_get_rx>
   14a74:	20000854 	.word	0x20000854
   14a78:	20000784 	.word	0x20000784

00014a7c <hci_data_buf_overflow>:
   14a7c:	4905      	ldr	r1, [pc, #20]	; (14a94 <hci_data_buf_overflow+0x18>)
   14a7e:	4a06      	ldr	r2, [pc, #24]	; (14a98 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   14a80:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14a82:	4806      	ldr	r0, [pc, #24]	; (14a9c <hci_data_buf_overflow+0x20>)
   14a84:	1a52      	subs	r2, r2, r1
   14a86:	08d2      	lsrs	r2, r2, #3
   14a88:	0192      	lsls	r2, r2, #6
   14a8a:	7819      	ldrb	r1, [r3, #0]
   14a8c:	f042 0202 	orr.w	r2, r2, #2
   14a90:	f010 b85e 	b.w	24b50 <log_1>
   14a94:	00028618 	.word	0x00028618
   14a98:	00028648 	.word	0x00028648
   14a9c:	0002dc27 	.word	0x0002dc27

00014aa0 <hci_disconn_complete_prio>:
{
   14aa0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14aa2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   14aa4:	781a      	ldrb	r2, [r3, #0]
   14aa6:	b972      	cbnz	r2, 14ac6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14aa8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   14aac:	4620      	mov	r0, r4
   14aae:	f001 f9fd 	bl	15eac <bt_conn_lookup_handle>
	if (!conn) {
   14ab2:	4605      	mov	r5, r0
   14ab4:	b940      	cbnz	r0, 14ac8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   14ab6:	4b08      	ldr	r3, [pc, #32]	; (14ad8 <hci_disconn_complete_prio+0x38>)
   14ab8:	881a      	ldrh	r2, [r3, #0]
   14aba:	b922      	cbnz	r2, 14ac6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14abc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   14ac0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   14ac4:	8018      	strh	r0, [r3, #0]
}
   14ac6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14ac8:	2101      	movs	r1, #1
   14aca:	f001 f9fb 	bl	15ec4 <bt_conn_set_state>
	bt_conn_unref(conn);
   14ace:	4628      	mov	r0, r5
}
   14ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14ad4:	f001 b9c0 	b.w	15e58 <bt_conn_unref>
   14ad8:	20002564 	.word	0x20002564

00014adc <handle_event>:
{
   14adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14ade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14ae2:	4605      	mov	r5, r0
   14ae4:	4608      	mov	r0, r1
		if (handler->event != event) {
   14ae6:	7811      	ldrb	r1, [r2, #0]
   14ae8:	42a9      	cmp	r1, r5
   14aea:	d01a      	beq.n	14b22 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   14aec:	3208      	adds	r2, #8
   14aee:	429a      	cmp	r2, r3
   14af0:	d1f9      	bne.n	14ae6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14af2:	8986      	ldrh	r6, [r0, #12]
   14af4:	4b16      	ldr	r3, [pc, #88]	; (14b50 <handle_event+0x74>)
   14af6:	4c17      	ldr	r4, [pc, #92]	; (14b54 <handle_event+0x78>)
   14af8:	6880      	ldr	r0, [r0, #8]
   14afa:	4631      	mov	r1, r6
   14afc:	1ae4      	subs	r4, r4, r3
   14afe:	f7ff fdad 	bl	1465c <bt_hex_real>
   14b02:	f7fd f937 	bl	11d74 <z_log_strdup>
   14b06:	08e4      	lsrs	r4, r4, #3
   14b08:	01a4      	lsls	r4, r4, #6
   14b0a:	f044 0402 	orr.w	r4, r4, #2
   14b0e:	4603      	mov	r3, r0
   14b10:	f8ad 4000 	strh.w	r4, [sp]
   14b14:	4810      	ldr	r0, [pc, #64]	; (14b58 <handle_event+0x7c>)
   14b16:	4632      	mov	r2, r6
   14b18:	4629      	mov	r1, r5
   14b1a:	f010 f846 	bl	24baa <log_3>
}
   14b1e:	b002      	add	sp, #8
   14b20:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   14b22:	8981      	ldrh	r1, [r0, #12]
   14b24:	7853      	ldrb	r3, [r2, #1]
   14b26:	428b      	cmp	r3, r1
   14b28:	d90d      	bls.n	14b46 <handle_event+0x6a>
   14b2a:	4a09      	ldr	r2, [pc, #36]	; (14b50 <handle_event+0x74>)
   14b2c:	4b09      	ldr	r3, [pc, #36]	; (14b54 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14b2e:	480b      	ldr	r0, [pc, #44]	; (14b5c <handle_event+0x80>)
   14b30:	1a9b      	subs	r3, r3, r2
   14b32:	08db      	lsrs	r3, r3, #3
   14b34:	019b      	lsls	r3, r3, #6
   14b36:	f043 0301 	orr.w	r3, r3, #1
   14b3a:	462a      	mov	r2, r5
}
   14b3c:	b002      	add	sp, #8
   14b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14b42:	f010 b819 	b.w	24b78 <log_2>
		handler->handler(buf);
   14b46:	6853      	ldr	r3, [r2, #4]
}
   14b48:	b002      	add	sp, #8
   14b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   14b4e:	4718      	bx	r3
   14b50:	00028618 	.word	0x00028618
   14b54:	00028648 	.word	0x00028648
   14b58:	0002dc71 	.word	0x0002dc71
   14b5c:	0002dc4f 	.word	0x0002dc4f

00014b60 <hci_num_completed_packets>:
{
   14b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b64:	4d39      	ldr	r5, [pc, #228]	; (14c4c <hci_num_completed_packets+0xec>)
   14b66:	4b3a      	ldr	r3, [pc, #232]	; (14c50 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14b68:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   14b6c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 14c58 <hci_num_completed_packets+0xf8>
   14b70:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   14b72:	2600      	movs	r6, #0
   14b74:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   14b76:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   14b78:	f898 3000 	ldrb.w	r3, [r8]
   14b7c:	429e      	cmp	r6, r3
   14b7e:	db01      	blt.n	14b84 <hci_num_completed_packets+0x24>
}
   14b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14b84:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   14b88:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14b8c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14b90:	4658      	mov	r0, fp
   14b92:	f001 f98b 	bl	15eac <bt_conn_lookup_handle>
		if (!conn) {
   14b96:	4604      	mov	r4, r0
   14b98:	b1d8      	cbz	r0, 14bd2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   14b9a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   14b9e:	2f00      	cmp	r7, #0
   14ba0:	d033      	beq.n	14c0a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   14ba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ba6:	f3ef 8211 	mrs	r2, BASEPRI
   14baa:	f383 8812 	msr	BASEPRI_MAX, r3
   14bae:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14bb2:	69e3      	ldr	r3, [r4, #28]
   14bb4:	b1b3      	cbz	r3, 14be4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   14bb6:	3b01      	subs	r3, #1
   14bb8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14bba:	f382 8811 	msr	BASEPRI, r2
   14bbe:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14bc2:	4620      	mov	r0, r4
   14bc4:	f001 f8e0 	bl	15d88 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   14bc8:	3f01      	subs	r7, #1
   14bca:	f00c ff03 	bl	219d4 <z_impl_k_sem_give>
   14bce:	b2bf      	uxth	r7, r7
   14bd0:	e7e5      	b.n	14b9e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   14bd2:	01aa      	lsls	r2, r5, #6
   14bd4:	481f      	ldr	r0, [pc, #124]	; (14c54 <hci_num_completed_packets+0xf4>)
   14bd6:	f042 0201 	orr.w	r2, r2, #1
   14bda:	4659      	mov	r1, fp
   14bdc:	f00f ffb8 	bl	24b50 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   14be0:	3601      	adds	r6, #1
   14be2:	e7c9      	b.n	14b78 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   14be4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14be6:	b12b      	cbz	r3, 14bf4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14be8:	69a1      	ldr	r1, [r4, #24]
   14bea:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14bec:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14bee:	428b      	cmp	r3, r1
	list->tail = node;
   14bf0:	bf08      	it	eq
   14bf2:	61a0      	streq	r0, [r4, #24]
   14bf4:	f382 8811 	msr	BASEPRI, r2
   14bf8:	f3bf 8f6f 	isb	sy
			if (!node) {
   14bfc:	b94b      	cbnz	r3, 14c12 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   14bfe:	01a9      	lsls	r1, r5, #6
   14c00:	f041 0101 	orr.w	r1, r1, #1
   14c04:	4650      	mov	r0, sl
   14c06:	f00f ff96 	bl	24b36 <log_0>
		bt_conn_unref(conn);
   14c0a:	4620      	mov	r0, r4
   14c0c:	f001 f924 	bl	15e58 <bt_conn_unref>
   14c10:	e7e6      	b.n	14be0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   14c12:	f04f 0240 	mov.w	r2, #64	; 0x40
   14c16:	f3ef 8111 	mrs	r1, BASEPRI
   14c1a:	f382 8812 	msr	BASEPRI_MAX, r2
   14c1e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14c22:	68da      	ldr	r2, [r3, #12]
   14c24:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   14c26:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   14c2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   14c2c:	f8c3 900c 	str.w	r9, [r3, #12]
   14c30:	b94a      	cbnz	r2, 14c46 <hci_num_completed_packets+0xe6>
	list->head = node;
   14c32:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   14c36:	f381 8811 	msr	BASEPRI, r1
   14c3a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14c3e:	4658      	mov	r0, fp
   14c40:	f00d fa40 	bl	220c4 <k_work_submit>
   14c44:	e7bd      	b.n	14bc2 <hci_num_completed_packets+0x62>
	parent->next = child;
   14c46:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14c48:	6263      	str	r3, [r4, #36]	; 0x24
}
   14c4a:	e7f4      	b.n	14c36 <hci_num_completed_packets+0xd6>
   14c4c:	00028648 	.word	0x00028648
   14c50:	00028618 	.word	0x00028618
   14c54:	0002dd68 	.word	0x0002dd68
   14c58:	0002dd84 	.word	0x0002dd84

00014c5c <hci_cmd_done>:
{
   14c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c60:	4606      	mov	r6, r0
   14c62:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c64:	7990      	ldrb	r0, [r2, #6]
   14c66:	f8df 8128 	ldr.w	r8, [pc, #296]	; 14d90 <hci_cmd_done+0x134>
{
   14c6a:	460f      	mov	r7, r1
   14c6c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c6e:	f006 fe59 	bl	1b924 <net_buf_pool_get>
   14c72:	4580      	cmp	r8, r0
   14c74:	d016      	beq.n	14ca4 <hci_cmd_done+0x48>
   14c76:	4b41      	ldr	r3, [pc, #260]	; (14d7c <hci_cmd_done+0x120>)
   14c78:	4d41      	ldr	r5, [pc, #260]	; (14d80 <hci_cmd_done+0x124>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   14c7a:	79a0      	ldrb	r0, [r4, #6]
   14c7c:	9600      	str	r6, [sp, #0]
   14c7e:	1aed      	subs	r5, r5, r3
   14c80:	08ed      	lsrs	r5, r5, #3
   14c82:	9001      	str	r0, [sp, #4]
   14c84:	f006 fe4e 	bl	1b924 <net_buf_pool_get>
   14c88:	01ad      	lsls	r5, r5, #6
   14c8a:	f045 0502 	orr.w	r5, r5, #2
   14c8e:	e9cd 0802 	strd	r0, r8, [sp, #8]
   14c92:	462b      	mov	r3, r5
   14c94:	483b      	ldr	r0, [pc, #236]	; (14d84 <hci_cmd_done+0x128>)
   14c96:	2204      	movs	r2, #4
   14c98:	4669      	mov	r1, sp
   14c9a:	f00f ffa2 	bl	24be2 <log_n>
}
   14c9e:	b005      	add	sp, #20
   14ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   14ca4:	4620      	mov	r0, r4
   14ca6:	f006 fe45 	bl	1b934 <net_buf_id>
   14caa:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 14d94 <hci_cmd_done+0x138>
   14cae:	f04f 090c 	mov.w	r9, #12
   14cb2:	fb09 8000 	mla	r0, r9, r0, r8
   14cb6:	4645      	mov	r5, r8
   14cb8:	8843      	ldrh	r3, [r0, #2]
   14cba:	42b3      	cmp	r3, r6
   14cbc:	d012      	beq.n	14ce4 <hci_cmd_done+0x88>
   14cbe:	4b2f      	ldr	r3, [pc, #188]	; (14d7c <hci_cmd_done+0x120>)
   14cc0:	4d2f      	ldr	r5, [pc, #188]	; (14d80 <hci_cmd_done+0x124>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   14cc2:	4620      	mov	r0, r4
   14cc4:	1aed      	subs	r5, r5, r3
   14cc6:	f006 fe35 	bl	1b934 <net_buf_id>
   14cca:	08ed      	lsrs	r5, r5, #3
   14ccc:	fb09 8000 	mla	r0, r9, r0, r8
   14cd0:	01ad      	lsls	r5, r5, #6
   14cd2:	f045 0502 	orr.w	r5, r5, #2
   14cd6:	8842      	ldrh	r2, [r0, #2]
   14cd8:	482b      	ldr	r0, [pc, #172]	; (14d88 <hci_cmd_done+0x12c>)
   14cda:	462b      	mov	r3, r5
   14cdc:	4631      	mov	r1, r6
   14cde:	f00f ff4b 	bl	24b78 <log_2>
		return;
   14ce2:	e7dc      	b.n	14c9e <hci_cmd_done+0x42>
	if (bt_dev.sent_cmd) {
   14ce4:	4e29      	ldr	r6, [pc, #164]	; (14d8c <hci_cmd_done+0x130>)
   14ce6:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   14cea:	b120      	cbz	r0, 14cf6 <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   14cec:	f007 f81c 	bl	1bd28 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14cf0:	2300      	movs	r3, #0
   14cf2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   14cf6:	4620      	mov	r0, r4
   14cf8:	f006 fe1c 	bl	1b934 <net_buf_id>
   14cfc:	260c      	movs	r6, #12
   14cfe:	fb06 5000 	mla	r0, r6, r0, r5
   14d02:	6843      	ldr	r3, [r0, #4]
   14d04:	b1a3      	cbz	r3, 14d30 <hci_cmd_done+0xd4>
   14d06:	b99f      	cbnz	r7, 14d30 <hci_cmd_done+0xd4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14d08:	4620      	mov	r0, r4
   14d0a:	f006 fe13 	bl	1b934 <net_buf_id>
   14d0e:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14d12:	2301      	movs	r3, #1
   14d14:	6846      	ldr	r6, [r0, #4]
   14d16:	e9d6 2000 	ldrd	r2, r0, [r6]
   14d1a:	f000 011f 	and.w	r1, r0, #31
   14d1e:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
   14d22:	7a33      	ldrb	r3, [r6, #8]
   14d24:	0940      	lsrs	r0, r0, #5
   14d26:	b1d3      	cbz	r3, 14d5e <hci_cmd_done+0x102>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14d28:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   14d2c:	f010 feff 	bl	25b2e <atomic_or>
	if (cmd(buf)->sync) {
   14d30:	4620      	mov	r0, r4
   14d32:	f006 fdff 	bl	1b934 <net_buf_id>
   14d36:	260c      	movs	r6, #12
   14d38:	fb06 5000 	mla	r0, r6, r0, r5
   14d3c:	6883      	ldr	r3, [r0, #8]
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d0ad      	beq.n	14c9e <hci_cmd_done+0x42>
		cmd(buf)->status = status;
   14d42:	4620      	mov	r0, r4
   14d44:	f006 fdf6 	bl	1b934 <net_buf_id>
   14d48:	4370      	muls	r0, r6
   14d4a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14d4c:	4620      	mov	r0, r4
   14d4e:	f006 fdf1 	bl	1b934 <net_buf_id>
   14d52:	fb06 5500 	mla	r5, r6, r0, r5
   14d56:	68a8      	ldr	r0, [r5, #8]
   14d58:	f00c fe3c 	bl	219d4 <z_impl_k_sem_give>
}
   14d5c:	e79f      	b.n	14c9e <hci_cmd_done+0x42>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d5e:	43cb      	mvns	r3, r1
   14d60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   14d64:	f3bf 8f5b 	dmb	ish
   14d68:	e852 1f00 	ldrex	r1, [r2]
   14d6c:	4019      	ands	r1, r3
   14d6e:	e842 1000 	strex	r0, r1, [r2]
   14d72:	2800      	cmp	r0, #0
   14d74:	d1f8      	bne.n	14d68 <hci_cmd_done+0x10c>
   14d76:	f3bf 8f5b 	dmb	ish
   14d7a:	e7d9      	b.n	14d30 <hci_cmd_done+0xd4>
   14d7c:	00028618 	.word	0x00028618
   14d80:	00028648 	.word	0x00028648
   14d84:	0002dd9b 	.word	0x0002dd9b
   14d88:	0002ddd0 	.word	0x0002ddd0
   14d8c:	200002b0 	.word	0x200002b0
   14d90:	200007ec 	.word	0x200007ec
   14d94:	20002168 	.word	0x20002168

00014d98 <hci_cmd_status>:
{
   14d98:	b538      	push	{r3, r4, r5, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14d9a:	2104      	movs	r1, #4
   14d9c:	4604      	mov	r4, r0
   14d9e:	3008      	adds	r0, #8
   14da0:	f007 f8d0 	bl	1bf44 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14da4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14da6:	7801      	ldrb	r1, [r0, #0]
   14da8:	8840      	ldrh	r0, [r0, #2]
   14daa:	4622      	mov	r2, r4
   14dac:	f7ff ff56 	bl	14c5c <hci_cmd_done>
	if (ncmd) {
   14db0:	b125      	cbz	r5, 14dbc <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   14db2:	4803      	ldr	r0, [pc, #12]	; (14dc0 <hci_cmd_status+0x28>)
}
   14db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14db8:	f00c be0c 	b.w	219d4 <z_impl_k_sem_give>
   14dbc:	bd38      	pop	{r3, r4, r5, pc}
   14dbe:	bf00      	nop
   14dc0:	200003d0 	.word	0x200003d0

00014dc4 <hci_cmd_complete>:
{
   14dc4:	b538      	push	{r3, r4, r5, lr}
   14dc6:	2103      	movs	r1, #3
   14dc8:	4604      	mov	r4, r0
   14dca:	3008      	adds	r0, #8
   14dcc:	f007 f8ba 	bl	1bf44 <net_buf_simple_pull_mem>
	status = buf->data[0];
   14dd0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   14dd2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   14dd4:	7819      	ldrb	r1, [r3, #0]
   14dd6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14dda:	4622      	mov	r2, r4
   14ddc:	f7ff ff3e 	bl	14c5c <hci_cmd_done>
	if (ncmd) {
   14de0:	b125      	cbz	r5, 14dec <hci_cmd_complete+0x28>
   14de2:	4803      	ldr	r0, [pc, #12]	; (14df0 <hci_cmd_complete+0x2c>)
}
   14de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14de8:	f00c bdf4 	b.w	219d4 <z_impl_k_sem_give>
   14dec:	bd38      	pop	{r3, r4, r5, pc}
   14dee:	bf00      	nop
   14df0:	200003d0 	.word	0x200003d0

00014df4 <bt_hci_cmd_state_set_init>:
{
   14df4:	b510      	push	{r4, lr}
	state->bit = bit;
   14df6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   14dfa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14dfe:	720b      	strb	r3, [r1, #8]
{
   14e00:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   14e02:	f006 fd97 	bl	1b934 <net_buf_id>
   14e06:	4b03      	ldr	r3, [pc, #12]	; (14e14 <bt_hci_cmd_state_set_init+0x20>)
   14e08:	220c      	movs	r2, #12
   14e0a:	fb02 3000 	mla	r0, r2, r0, r3
   14e0e:	6044      	str	r4, [r0, #4]
}
   14e10:	bd10      	pop	{r4, pc}
   14e12:	bf00      	nop
   14e14:	20002168 	.word	0x20002168

00014e18 <bt_hci_cmd_create>:
{
   14e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   14e1c:	f04f 32ff 	mov.w	r2, #4294967295
   14e20:	4605      	mov	r5, r0
   14e22:	f04f 33ff 	mov.w	r3, #4294967295
   14e26:	481b      	ldr	r0, [pc, #108]	; (14e94 <bt_hci_cmd_create+0x7c>)
   14e28:	460e      	mov	r6, r1
   14e2a:	f012 fc13 	bl	27654 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   14e2e:	4604      	mov	r4, r0
   14e30:	b948      	cbnz	r0, 14e46 <bt_hci_cmd_create+0x2e>
   14e32:	4919      	ldr	r1, [pc, #100]	; (14e98 <bt_hci_cmd_create+0x80>)
   14e34:	4819      	ldr	r0, [pc, #100]	; (14e9c <bt_hci_cmd_create+0x84>)
   14e36:	4a1a      	ldr	r2, [pc, #104]	; (14ea0 <bt_hci_cmd_create+0x88>)
   14e38:	23e9      	movs	r3, #233	; 0xe9
   14e3a:	f00f fc5d 	bl	246f8 <printk>
   14e3e:	4818      	ldr	r0, [pc, #96]	; (14ea0 <bt_hci_cmd_create+0x88>)
   14e40:	21e9      	movs	r1, #233	; 0xe9
   14e42:	f00f fe4a 	bl	24ada <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   14e46:	f104 0b08 	add.w	fp, r4, #8
   14e4a:	2100      	movs	r1, #0
   14e4c:	2700      	movs	r7, #0
   14e4e:	4658      	mov	r0, fp
   14e50:	f006 ff0c 	bl	1bc6c <net_buf_simple_reserve>
   14e54:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14e56:	4620      	mov	r0, r4
   14e58:	f006 fd6c 	bl	1b934 <net_buf_id>
   14e5c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 14ea4 <bt_hci_cmd_create+0x8c>
   14e60:	f04f 0a0c 	mov.w	sl, #12
   14e64:	fb0a 8000 	mla	r0, sl, r0, r8
   14e68:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   14e6a:	4620      	mov	r0, r4
   14e6c:	f006 fd62 	bl	1b934 <net_buf_id>
   14e70:	fb0a 8000 	mla	r0, sl, r0, r8
   14e74:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14e76:	4620      	mov	r0, r4
   14e78:	f006 fd5c 	bl	1b934 <net_buf_id>
   14e7c:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   14e80:	2103      	movs	r1, #3
   14e82:	6047      	str	r7, [r0, #4]
   14e84:	4658      	mov	r0, fp
   14e86:	f007 f87f 	bl	1bf88 <net_buf_simple_add>
	hdr->param_len = param_len;
   14e8a:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   14e8c:	8005      	strh	r5, [r0, #0]
}
   14e8e:	4620      	mov	r0, r4
   14e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e94:	200007ec 	.word	0x200007ec
   14e98:	0002dc23 	.word	0x0002dc23
   14e9c:	000290f5 	.word	0x000290f5
   14ea0:	0002dc93 	.word	0x0002dc93
   14ea4:	20002168 	.word	0x20002168

00014ea8 <bt_hci_cmd_send_sync>:
{
   14ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14eac:	4607      	mov	r7, r0
   14eae:	b086      	sub	sp, #24
   14eb0:	4615      	mov	r5, r2
	if (!buf) {
   14eb2:	460c      	mov	r4, r1
   14eb4:	b921      	cbnz	r1, 14ec0 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   14eb6:	f7ff ffaf 	bl	14e18 <bt_hci_cmd_create>
		if (!buf) {
   14eba:	4604      	mov	r4, r0
   14ebc:	2800      	cmp	r0, #0
   14ebe:	d055      	beq.n	14f6c <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14ec0:	2201      	movs	r2, #1
   14ec2:	2100      	movs	r1, #0
   14ec4:	4668      	mov	r0, sp
   14ec6:	f013 f8f7 	bl	280b8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14eca:	4620      	mov	r0, r4
   14ecc:	f006 fd32 	bl	1b934 <net_buf_id>
   14ed0:	4e28      	ldr	r6, [pc, #160]	; (14f74 <bt_hci_cmd_send_sync+0xcc>)
   14ed2:	230c      	movs	r3, #12
   14ed4:	fb03 6000 	mla	r0, r3, r0, r6
   14ed8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14edc:	4620      	mov	r0, r4
   14ede:	f006 ff69 	bl	1bdb4 <net_buf_ref>
   14ee2:	4601      	mov	r1, r0
   14ee4:	4824      	ldr	r0, [pc, #144]	; (14f78 <bt_hci_cmd_send_sync+0xd0>)
   14ee6:	f006 feeb 	bl	1bcc0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14eea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14eee:	2300      	movs	r3, #0
   14ef0:	4668      	mov	r0, sp
   14ef2:	f00c fdb3 	bl	21a5c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14ef6:	4680      	mov	r8, r0
   14ef8:	b180      	cbz	r0, 14f1c <bt_hci_cmd_send_sync+0x74>
   14efa:	4a20      	ldr	r2, [pc, #128]	; (14f7c <bt_hci_cmd_send_sync+0xd4>)
   14efc:	4920      	ldr	r1, [pc, #128]	; (14f80 <bt_hci_cmd_send_sync+0xd8>)
   14efe:	4821      	ldr	r0, [pc, #132]	; (14f84 <bt_hci_cmd_send_sync+0xdc>)
   14f00:	f240 1331 	movw	r3, #305	; 0x131
   14f04:	f00f fbf8 	bl	246f8 <printk>
   14f08:	481f      	ldr	r0, [pc, #124]	; (14f88 <bt_hci_cmd_send_sync+0xe0>)
   14f0a:	4641      	mov	r1, r8
   14f0c:	f00f fbf4 	bl	246f8 <printk>
   14f10:	4040      	eors	r0, r0
   14f12:	f380 8811 	msr	BASEPRI, r0
   14f16:	f04f 0003 	mov.w	r0, #3
   14f1a:	df02      	svc	2
	status = cmd(buf)->status;
   14f1c:	4620      	mov	r0, r4
   14f1e:	f006 fd09 	bl	1b934 <net_buf_id>
   14f22:	230c      	movs	r3, #12
   14f24:	4343      	muls	r3, r0
   14f26:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   14f28:	b1be      	cbz	r6, 14f5a <bt_hci_cmd_send_sync+0xb2>
   14f2a:	4a18      	ldr	r2, [pc, #96]	; (14f8c <bt_hci_cmd_send_sync+0xe4>)
   14f2c:	4b18      	ldr	r3, [pc, #96]	; (14f90 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   14f2e:	4819      	ldr	r0, [pc, #100]	; (14f94 <bt_hci_cmd_send_sync+0xec>)
   14f30:	1a9b      	subs	r3, r3, r2
   14f32:	08db      	lsrs	r3, r3, #3
   14f34:	019b      	lsls	r3, r3, #6
   14f36:	f043 0302 	orr.w	r3, r3, #2
   14f3a:	4632      	mov	r2, r6
   14f3c:	4639      	mov	r1, r7
   14f3e:	f00f fe1b 	bl	24b78 <log_2>
		net_buf_unref(buf);
   14f42:	4620      	mov	r0, r4
   14f44:	f006 fef0 	bl	1bd28 <net_buf_unref>
			return -EIO;
   14f48:	2e09      	cmp	r6, #9
   14f4a:	bf0c      	ite	eq
   14f4c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   14f50:	f06f 0004 	mvnne.w	r0, #4
}
   14f54:	b006      	add	sp, #24
   14f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   14f5a:	b115      	cbz	r5, 14f62 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   14f5c:	602c      	str	r4, [r5, #0]
	return 0;
   14f5e:	4630      	mov	r0, r6
   14f60:	e7f8      	b.n	14f54 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   14f62:	4620      	mov	r0, r4
   14f64:	f006 fee0 	bl	1bd28 <net_buf_unref>
	return 0;
   14f68:	4628      	mov	r0, r5
   14f6a:	e7f3      	b.n	14f54 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   14f6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14f70:	e7f0      	b.n	14f54 <bt_hci_cmd_send_sync+0xac>
   14f72:	bf00      	nop
   14f74:	20002168 	.word	0x20002168
   14f78:	20000408 	.word	0x20000408
   14f7c:	0002dc93 	.word	0x0002dc93
   14f80:	0002de03 	.word	0x0002de03
   14f84:	000290f5 	.word	0x000290f5
   14f88:	0002de6a 	.word	0x0002de6a
   14f8c:	00028618 	.word	0x00028618
   14f90:	00028648 	.word	0x00028648
   14f94:	0002de8a 	.word	0x0002de8a

00014f98 <hci_le_read_max_data_len>:
{
   14f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14f9a:	4606      	mov	r6, r0
   14f9c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   14f9e:	aa01      	add	r2, sp, #4
   14fa0:	2100      	movs	r1, #0
   14fa2:	f242 002f 	movw	r0, #8239	; 0x202f
   14fa6:	f7ff ff7f 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   14faa:	4604      	mov	r4, r0
   14fac:	b160      	cbz	r0, 14fc8 <hci_le_read_max_data_len+0x30>
   14fae:	490c      	ldr	r1, [pc, #48]	; (14fe0 <hci_le_read_max_data_len+0x48>)
   14fb0:	4b0c      	ldr	r3, [pc, #48]	; (14fe4 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   14fb2:	480d      	ldr	r0, [pc, #52]	; (14fe8 <hci_le_read_max_data_len+0x50>)
   14fb4:	1ac9      	subs	r1, r1, r3
   14fb6:	08c9      	lsrs	r1, r1, #3
   14fb8:	0189      	lsls	r1, r1, #6
   14fba:	f041 0101 	orr.w	r1, r1, #1
   14fbe:	f00f fdba 	bl	24b36 <log_0>
}
   14fc2:	4620      	mov	r0, r4
   14fc4:	b002      	add	sp, #8
   14fc6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   14fc8:	9801      	ldr	r0, [sp, #4]
   14fca:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   14fcc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14fd0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   14fd2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   14fd6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   14fd8:	f006 fea6 	bl	1bd28 <net_buf_unref>
	return 0;
   14fdc:	e7f1      	b.n	14fc2 <hci_le_read_max_data_len+0x2a>
   14fde:	bf00      	nop
   14fe0:	00028648 	.word	0x00028648
   14fe4:	00028618 	.word	0x00028618
   14fe8:	0002dea6 	.word	0x0002dea6

00014fec <bt_security_err_get>:
	switch (hci_err) {
   14fec:	2829      	cmp	r0, #41	; 0x29
   14fee:	bf9a      	itte	ls
   14ff0:	4b01      	ldrls	r3, [pc, #4]	; (14ff8 <bt_security_err_get+0xc>)
   14ff2:	5c18      	ldrbls	r0, [r3, r0]
{
   14ff4:	2009      	movhi	r0, #9
}
   14ff6:	4770      	bx	lr
   14ff8:	0002dff0 	.word	0x0002dff0

00014ffc <hci_event_prio>:
{
   14ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15000:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15002:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15006:	4630      	mov	r0, r6
   15008:	f012 fb37 	bl	2767a <net_buf_simple_headroom>
	state->len = buf->len;
   1500c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15010:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   15014:	4605      	mov	r5, r0
   15016:	d80c      	bhi.n	15032 <hci_event_prio+0x36>
   15018:	4a1c      	ldr	r2, [pc, #112]	; (1508c <hci_event_prio+0x90>)
   1501a:	491d      	ldr	r1, [pc, #116]	; (15090 <hci_event_prio+0x94>)
   1501c:	481d      	ldr	r0, [pc, #116]	; (15094 <hci_event_prio+0x98>)
   1501e:	f640 5327 	movw	r3, #3367	; 0xd27
   15022:	f00f fb69 	bl	246f8 <printk>
   15026:	4040      	eors	r0, r0
   15028:	f380 8811 	msr	BASEPRI, r0
   1502c:	f04f 0003 	mov.w	r0, #3
   15030:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15032:	2102      	movs	r1, #2
   15034:	4630      	mov	r0, r6
   15036:	f006 ff85 	bl	1bf44 <net_buf_simple_pull_mem>
   1503a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1503c:	7800      	ldrb	r0, [r0, #0]
   1503e:	f010 fd64 	bl	25b0a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15042:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15044:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15046:	d40c      	bmi.n	15062 <hci_event_prio+0x66>
   15048:	4a10      	ldr	r2, [pc, #64]	; (1508c <hci_event_prio+0x90>)
   1504a:	4913      	ldr	r1, [pc, #76]	; (15098 <hci_event_prio+0x9c>)
   1504c:	4811      	ldr	r0, [pc, #68]	; (15094 <hci_event_prio+0x98>)
   1504e:	f640 532b 	movw	r3, #3371	; 0xd2b
   15052:	f00f fb51 	bl	246f8 <printk>
   15056:	4040      	eors	r0, r0
   15058:	f380 8811 	msr	BASEPRI, r0
   1505c:	f04f 0003 	mov.w	r0, #3
   15060:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15062:	2305      	movs	r3, #5
   15064:	4a0d      	ldr	r2, [pc, #52]	; (1509c <hci_event_prio+0xa0>)
   15066:	7838      	ldrb	r0, [r7, #0]
   15068:	4621      	mov	r1, r4
   1506a:	f7ff fd37 	bl	14adc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1506e:	07b3      	lsls	r3, r6, #30
   15070:	d507      	bpl.n	15082 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   15072:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15074:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15078:	fa10 f585 	uxtah	r5, r0, r5
   1507c:	60a5      	str	r5, [r4, #8]
}
   1507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   15082:	4620      	mov	r0, r4
}
   15084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   15088:	f006 be4e 	b.w	1bd28 <net_buf_unref>
   1508c:	0002dc93 	.word	0x0002dc93
   15090:	0002dcc7 	.word	0x0002dcc7
   15094:	000290f5 	.word	0x000290f5
   15098:	0002dec6 	.word	0x0002dec6
   1509c:	00028948 	.word	0x00028948

000150a0 <bt_recv>:
{
   150a0:	b538      	push	{r3, r4, r5, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   150a2:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   150a4:	2901      	cmp	r1, #1
{
   150a6:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   150a8:	d007      	beq.n	150ba <bt_recv+0x1a>
   150aa:	2903      	cmp	r1, #3
   150ac:	d113      	bne.n	150d6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   150ae:	4812      	ldr	r0, [pc, #72]	; (150f8 <bt_recv+0x58>)
   150b0:	4629      	mov	r1, r5
   150b2:	f006 fe05 	bl	1bcc0 <net_buf_put>
		return 0;
   150b6:	2000      	movs	r0, #0
   150b8:	e00c      	b.n	150d4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   150ba:	6883      	ldr	r3, [r0, #8]
   150bc:	7818      	ldrb	r0, [r3, #0]
   150be:	f010 fd24 	bl	25b0a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   150c2:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   150c4:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   150c6:	d502      	bpl.n	150ce <bt_recv+0x2e>
			hci_event_prio(buf);
   150c8:	4628      	mov	r0, r5
   150ca:	f7ff ff97 	bl	14ffc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   150ce:	f014 0002 	ands.w	r0, r4, #2
   150d2:	d1ec      	bne.n	150ae <bt_recv+0xe>
}
   150d4:	bd38      	pop	{r3, r4, r5, pc}
   150d6:	4b09      	ldr	r3, [pc, #36]	; (150fc <bt_recv+0x5c>)
   150d8:	4a09      	ldr	r2, [pc, #36]	; (15100 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   150da:	480a      	ldr	r0, [pc, #40]	; (15104 <bt_recv+0x64>)
   150dc:	1ad2      	subs	r2, r2, r3
   150de:	08d2      	lsrs	r2, r2, #3
   150e0:	0192      	lsls	r2, r2, #6
   150e2:	f042 0201 	orr.w	r2, r2, #1
   150e6:	f00f fd33 	bl	24b50 <log_1>
		net_buf_unref(buf);
   150ea:	4628      	mov	r0, r5
   150ec:	f006 fe1c 	bl	1bd28 <net_buf_unref>
		return -EINVAL;
   150f0:	f06f 0015 	mvn.w	r0, #21
   150f4:	e7ee      	b.n	150d4 <bt_recv+0x34>
   150f6:	bf00      	nop
   150f8:	200003ec 	.word	0x200003ec
   150fc:	00028618 	.word	0x00028618
   15100:	00028648 	.word	0x00028648
   15104:	0002dedf 	.word	0x0002dedf

00015108 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15108:	4a08      	ldr	r2, [pc, #32]	; (1512c <bt_hci_driver_register+0x24>)
{
   1510a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1510c:	f8d2 0174 	ldr.w	r0, [r2, #372]	; 0x174
   15110:	b930      	cbnz	r0, 15120 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   15112:	68d9      	ldr	r1, [r3, #12]
   15114:	b139      	cbz	r1, 15126 <bt_hci_driver_register+0x1e>
   15116:	6919      	ldr	r1, [r3, #16]
   15118:	b129      	cbz	r1, 15126 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1511a:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
	return 0;
   1511e:	4770      	bx	lr
		return -EALREADY;
   15120:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15124:	4770      	bx	lr
		return -EINVAL;
   15126:	f06f 0015 	mvn.w	r0, #21
}
   1512a:	4770      	bx	lr
   1512c:	200002b0 	.word	0x200002b0

00015130 <bt_finalize_init>:
{
   15130:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15132:	4804      	ldr	r0, [pc, #16]	; (15144 <bt_finalize_init+0x14>)
   15134:	2102      	movs	r1, #2
   15136:	f010 fcfa 	bl	25b2e <atomic_or>
}
   1513a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1513e:	2000      	movs	r0, #0
   15140:	f000 bbf2 	b.w	15928 <bt_le_scan_update>
   15144:	2000037c 	.word	0x2000037c

00015148 <init_work>:

static void init_work(struct k_work *work)
{
   15148:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   1514a:	f7fa ffd1 	bl	100f0 <bt_init>
	if (ready_cb) {
   1514e:	4b03      	ldr	r3, [pc, #12]	; (1515c <init_work+0x14>)
   15150:	681b      	ldr	r3, [r3, #0]
   15152:	b113      	cbz	r3, 1515a <init_work+0x12>
		ready_cb(err);
	}
}
   15154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15158:	4718      	bx	r3
}
   1515a:	bd10      	pop	{r4, pc}
   1515c:	20002180 	.word	0x20002180

00015160 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15160:	4800      	ldr	r0, [pc, #0]	; (15164 <bt_get_name+0x4>)
   15162:	4770      	bx	lr
   15164:	0002dfdd 	.word	0x0002dfdd

00015168 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15168:	4b03      	ldr	r3, [pc, #12]	; (15178 <atomic_get.constprop.0+0x10>)
   1516a:	f3bf 8f5b 	dmb	ish
   1516e:	6818      	ldr	r0, [r3, #0]
   15170:	f3bf 8f5b 	dmb	ish
}
   15174:	4770      	bx	lr
   15176:	bf00      	nop
   15178:	2000037c 	.word	0x2000037c

0001517c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1517e:	4f0b      	ldr	r7, [pc, #44]	; (151ac <id_find+0x30>)
{
   15180:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   15182:	2500      	movs	r5, #0
   15184:	79fb      	ldrb	r3, [r7, #7]
   15186:	b2ec      	uxtb	r4, r5
   15188:	42a3      	cmp	r3, r4
   1518a:	d802      	bhi.n	15192 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1518c:	f06f 0401 	mvn.w	r4, #1
   15190:	e009      	b.n	151a6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   15192:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   15196:	2207      	movs	r2, #7
   15198:	4439      	add	r1, r7
   1519a:	4630      	mov	r0, r6
   1519c:	f010 fbd2 	bl	25944 <memcmp>
   151a0:	3501      	adds	r5, #1
   151a2:	2800      	cmp	r0, #0
   151a4:	d1ee      	bne.n	15184 <id_find+0x8>
}
   151a6:	4620      	mov	r0, r4
   151a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   151aa:	bf00      	nop
   151ac:	200002b0 	.word	0x200002b0

000151b0 <set_random_address>:
{
   151b0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   151b2:	4914      	ldr	r1, [pc, #80]	; (15204 <set_random_address+0x54>)
   151b4:	2206      	movs	r2, #6
   151b6:	4605      	mov	r5, r0
   151b8:	f010 fbc4 	bl	25944 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   151bc:	4604      	mov	r4, r0
   151be:	b1e0      	cbz	r0, 151fa <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   151c0:	2106      	movs	r1, #6
   151c2:	f242 0005 	movw	r0, #8197	; 0x2005
   151c6:	f7ff fe27 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   151ca:	4604      	mov	r4, r0
   151cc:	b1b8      	cbz	r0, 151fe <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   151ce:	2206      	movs	r2, #6
   151d0:	4629      	mov	r1, r5
   151d2:	3008      	adds	r0, #8
   151d4:	f012 fa5d 	bl	27692 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   151d8:	4621      	mov	r1, r4
   151da:	2200      	movs	r2, #0
   151dc:	f242 0005 	movw	r0, #8197	; 0x2005
   151e0:	f7ff fe62 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   151e4:	4604      	mov	r4, r0
   151e6:	b940      	cbnz	r0, 151fa <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   151e8:	2206      	movs	r2, #6
   151ea:	4806      	ldr	r0, [pc, #24]	; (15204 <set_random_address+0x54>)
   151ec:	4629      	mov	r1, r5
   151ee:	f010 fbb9 	bl	25964 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   151f2:	4b05      	ldr	r3, [pc, #20]	; (15208 <set_random_address+0x58>)
   151f4:	2201      	movs	r2, #1
   151f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   151fa:	4620      	mov	r0, r4
   151fc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   151fe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15202:	e7fa      	b.n	151fa <set_random_address+0x4a>
   15204:	20000311 	.word	0x20000311
   15208:	200002b0 	.word	0x200002b0

0001520c <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1520c:	b530      	push	{r4, r5, lr}
   1520e:	4604      	mov	r4, r0
   15210:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15212:	460d      	mov	r5, r1
   15214:	b1d9      	cbz	r1, 1524e <id_create.isra.0+0x42>
   15216:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15218:	2207      	movs	r2, #7
   1521a:	a902      	add	r1, sp, #8
   1521c:	4628      	mov	r0, r5
   1521e:	9302      	str	r3, [sp, #8]
   15220:	f8cd 300b 	str.w	r3, [sp, #11]
   15224:	f010 fb8e 	bl	25944 <memcmp>
   15228:	b188      	cbz	r0, 1524e <id_create.isra.0+0x42>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1522a:	4815      	ldr	r0, [pc, #84]	; (15280 <id_create.isra.0+0x74>)
   1522c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15230:	4629      	mov	r1, r5
   15232:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15234:	f010 fcc3 	bl	25bbe <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15238:	f7ff ff96 	bl	15168 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1523c:	0782      	lsls	r2, r0, #30
   1523e:	f3c0 0340 	ubfx	r3, r0, #1, #1
   15242:	d51b      	bpl.n	1527c <id_create.isra.0+0x70>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   15244:	f7ff fb20 	bl	14888 <bt_settings_save_id>
   15248:	2000      	movs	r0, #0
	}

	return 0;
}
   1524a:	b005      	add	sp, #20
   1524c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1524e:	4668      	mov	r0, sp
   15250:	f010 fc4d 	bl	25aee <bt_addr_le_create_static>
			if (err) {
   15254:	2800      	cmp	r0, #0
   15256:	d1f8      	bne.n	1524a <id_create.isra.0+0x3e>
		} while (id_find(&new_addr) >= 0);
   15258:	4668      	mov	r0, sp
   1525a:	f7ff ff8f 	bl	1517c <id_find>
   1525e:	2800      	cmp	r0, #0
   15260:	daf5      	bge.n	1524e <id_create.isra.0+0x42>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15262:	4807      	ldr	r0, [pc, #28]	; (15280 <id_create.isra.0+0x74>)
   15264:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15268:	4404      	add	r4, r0
   1526a:	4669      	mov	r1, sp
   1526c:	4620      	mov	r0, r4
   1526e:	f010 fca6 	bl	25bbe <bt_addr_le_copy>
		if (addr) {
   15272:	2d00      	cmp	r5, #0
   15274:	d0e0      	beq.n	15238 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15276:	4621      	mov	r1, r4
   15278:	4628      	mov	r0, r5
   1527a:	e7db      	b.n	15234 <id_create.isra.0+0x28>
   1527c:	4618      	mov	r0, r3
   1527e:	e7e4      	b.n	1524a <id_create.isra.0+0x3e>
   15280:	200002b0 	.word	0x200002b0

00015284 <bt_id_add>:
{
   15284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15288:	4e61      	ldr	r6, [pc, #388]	; (15410 <bt_id_add+0x18c>)
   1528a:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   1528e:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   15292:	4604      	mov	r4, r0
   15294:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   15296:	b10a      	cbz	r2, 1529c <bt_id_add+0x18>
   15298:	429a      	cmp	r2, r3
   1529a:	d209      	bcs.n	152b0 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   1529c:	3301      	adds	r3, #1
   1529e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   152a2:	7a23      	ldrb	r3, [r4, #8]
   152a4:	f043 0304 	orr.w	r3, r3, #4
   152a8:	7223      	strb	r3, [r4, #8]
}
   152aa:	b002      	add	sp, #8
   152ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   152b0:	2100      	movs	r1, #0
   152b2:	2206      	movs	r2, #6
   152b4:	4608      	mov	r0, r1
   152b6:	f001 f871 	bl	1639c <bt_conn_lookup_state_le>
	if (conn) {
   152ba:	4602      	mov	r2, r0
   152bc:	b198      	cbz	r0, 152e6 <bt_id_add+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   152be:	f3bf 8f5b 	dmb	ish
   152c2:	36cc      	adds	r6, #204	; 0xcc
   152c4:	e856 3f00 	ldrex	r3, [r6]
   152c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   152cc:	e846 3200 	strex	r2, r3, [r6]
   152d0:	2a00      	cmp	r2, #0
   152d2:	d1f7      	bne.n	152c4 <bt_id_add+0x40>
   152d4:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   152d8:	7a23      	ldrb	r3, [r4, #8]
   152da:	f043 0301 	orr.w	r3, r3, #1
   152de:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   152e0:	f000 fdba 	bl	15e58 <bt_conn_unref>
		return;
   152e4:	e7e1      	b.n	152aa <bt_id_add+0x26>
   152e6:	f7ff ff3f 	bl	15168 <atomic_get.constprop.0>
	if (scan_enabled) {
   152ea:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   152ec:	f3c0 1740 	ubfx	r7, r0, #5, #1
   152f0:	d502      	bpl.n	152f8 <bt_id_add+0x74>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   152f2:	4610      	mov	r0, r2
   152f4:	f010 fcd4 	bl	25ca0 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   152f8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   152fc:	b173      	cbz	r3, 1531c <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   152fe:	2000      	movs	r0, #0
   15300:	f010 fc60 	bl	25bc4 <addr_res_enable>
		if (err) {
   15304:	b150      	cbz	r0, 1531c <bt_id_add+0x98>
   15306:	4943      	ldr	r1, [pc, #268]	; (15414 <bt_id_add+0x190>)
   15308:	4b43      	ldr	r3, [pc, #268]	; (15418 <bt_id_add+0x194>)
			BT_WARN("Failed to disable address resolution");
   1530a:	4844      	ldr	r0, [pc, #272]	; (1541c <bt_id_add+0x198>)
   1530c:	1ac9      	subs	r1, r1, r3
   1530e:	08c9      	lsrs	r1, r1, #3
   15310:	0189      	lsls	r1, r1, #6
   15312:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   15316:	f00f fc0e 	bl	24b36 <log_0>
	if (err) {
   1531a:	e023      	b.n	15364 <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1531c:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   15320:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   15324:	429a      	cmp	r2, r3
   15326:	d126      	bne.n	15376 <bt_id_add+0xf2>
   15328:	4b3b      	ldr	r3, [pc, #236]	; (15418 <bt_id_add+0x194>)
   1532a:	4e3a      	ldr	r6, [pc, #232]	; (15414 <bt_id_add+0x190>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   1532c:	483c      	ldr	r0, [pc, #240]	; (15420 <bt_id_add+0x19c>)
   1532e:	1af6      	subs	r6, r6, r3
   15330:	08f6      	lsrs	r6, r6, #3
   15332:	01b6      	lsls	r6, r6, #6
   15334:	f046 0102 	orr.w	r1, r6, #2
   15338:	f00f fbfd 	bl	24b36 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1533c:	2200      	movs	r2, #0
   1533e:	4611      	mov	r1, r2
   15340:	f242 0029 	movw	r0, #8233	; 0x2029
   15344:	f7ff fdb0 	bl	14ea8 <bt_hci_cmd_send_sync>
		if (err) {
   15348:	b118      	cbz	r0, 15352 <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
   1534a:	4836      	ldr	r0, [pc, #216]	; (15424 <bt_id_add+0x1a0>)
   1534c:	f046 0101 	orr.w	r1, r6, #1
   15350:	e7e1      	b.n	15316 <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
   15352:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   15356:	3301      	adds	r3, #1
   15358:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1535c:	7a23      	ldrb	r3, [r4, #8]
   1535e:	f043 0304 	orr.w	r3, r3, #4
   15362:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   15364:	2001      	movs	r0, #1
   15366:	f010 fc2d 	bl	25bc4 <addr_res_enable>
	if (scan_enabled) {
   1536a:	2f00      	cmp	r7, #0
   1536c:	d09d      	beq.n	152aa <bt_id_add+0x26>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1536e:	2001      	movs	r0, #1
   15370:	f010 fc96 	bl	25ca0 <bt_le_scan_set_enable>
   15374:	e799      	b.n	152aa <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   15376:	f104 0801 	add.w	r8, r4, #1
   1537a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   1537e:	4640      	mov	r0, r8
   15380:	f010 fc38 	bl	25bf4 <hci_id_add.isra.0>
	if (err) {
   15384:	4606      	mov	r6, r0
   15386:	b140      	cbz	r0, 1539a <bt_id_add+0x116>
   15388:	4922      	ldr	r1, [pc, #136]	; (15414 <bt_id_add+0x190>)
   1538a:	4b23      	ldr	r3, [pc, #140]	; (15418 <bt_id_add+0x194>)
		BT_ERR("Failed to add IRK to controller");
   1538c:	4826      	ldr	r0, [pc, #152]	; (15428 <bt_id_add+0x1a4>)
   1538e:	1ac9      	subs	r1, r1, r3
   15390:	08c9      	lsrs	r1, r1, #3
   15392:	0189      	lsls	r1, r1, #6
   15394:	f041 0101 	orr.w	r1, r1, #1
   15398:	e7bd      	b.n	15316 <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
   1539a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1539e:	3301      	adds	r3, #1
   153a0:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   153a4:	7a23      	ldrb	r3, [r4, #8]
   153a6:	f043 0304 	orr.w	r3, r3, #4
   153aa:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   153ac:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   153b0:	075b      	lsls	r3, r3, #29
   153b2:	d408      	bmi.n	153c6 <bt_id_add+0x142>
   153b4:	4917      	ldr	r1, [pc, #92]	; (15414 <bt_id_add+0x190>)
   153b6:	4b18      	ldr	r3, [pc, #96]	; (15418 <bt_id_add+0x194>)
		BT_WARN("Set privacy mode command is not supported");
   153b8:	481c      	ldr	r0, [pc, #112]	; (1542c <bt_id_add+0x1a8>)
   153ba:	1ac9      	subs	r1, r1, r3
   153bc:	08c9      	lsrs	r1, r1, #3
   153be:	0189      	lsls	r1, r1, #6
   153c0:	f041 0102 	orr.w	r1, r1, #2
   153c4:	e7a7      	b.n	15316 <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
   153c6:	4641      	mov	r1, r8
   153c8:	4668      	mov	r0, sp
   153ca:	f010 fbf8 	bl	25bbe <bt_addr_le_copy>
	cp.mode = mode;
   153ce:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   153d0:	2108      	movs	r1, #8
   153d2:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   153d6:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   153da:	f7ff fd1d 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   153de:	4604      	mov	r4, r0
   153e0:	b940      	cbnz	r0, 153f4 <bt_id_add+0x170>
   153e2:	490c      	ldr	r1, [pc, #48]	; (15414 <bt_id_add+0x190>)
   153e4:	4b0c      	ldr	r3, [pc, #48]	; (15418 <bt_id_add+0x194>)
		BT_ERR("Failed to set privacy mode");
   153e6:	4812      	ldr	r0, [pc, #72]	; (15430 <bt_id_add+0x1ac>)
   153e8:	1ac9      	subs	r1, r1, r3
   153ea:	08c9      	lsrs	r1, r1, #3
   153ec:	0189      	lsls	r1, r1, #6
   153ee:	f041 0101 	orr.w	r1, r1, #1
   153f2:	e790      	b.n	15316 <bt_id_add+0x92>
   153f4:	2208      	movs	r2, #8
   153f6:	4669      	mov	r1, sp
   153f8:	4410      	add	r0, r2
   153fa:	f012 f94a 	bl	27692 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   153fe:	4632      	mov	r2, r6
   15400:	4621      	mov	r1, r4
   15402:	f242 004e 	movw	r0, #8270	; 0x204e
   15406:	f7ff fd4f 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1540a:	2800      	cmp	r0, #0
   1540c:	d0aa      	beq.n	15364 <bt_id_add+0xe0>
   1540e:	e7e8      	b.n	153e2 <bt_id_add+0x15e>
   15410:	200002b0 	.word	0x200002b0
   15414:	00028658 	.word	0x00028658
   15418:	00028618 	.word	0x00028618
   1541c:	0002e01a 	.word	0x0002e01a
   15420:	0002e03f 	.word	0x0002e03f
   15424:	0002e070 	.word	0x0002e070
   15428:	0002e090 	.word	0x0002e090
   1542c:	0002e0b0 	.word	0x0002e0b0
   15430:	0002e0da 	.word	0x0002e0da

00015434 <bt_id_del>:
{
   15434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   15438:	4e4a      	ldr	r6, [pc, #296]	; (15564 <bt_id_del+0x130>)
   1543a:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   1543e:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   15442:	4604      	mov	r4, r0
   15444:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   15446:	b112      	cbz	r2, 1544e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   15448:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1544a:	4293      	cmp	r3, r2
   1544c:	dd08      	ble.n	15460 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   1544e:	3b01      	subs	r3, #1
   15450:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   15454:	7a23      	ldrb	r3, [r4, #8]
   15456:	f023 0304 	bic.w	r3, r3, #4
   1545a:	7223      	strb	r3, [r4, #8]
}
   1545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   15460:	2100      	movs	r1, #0
   15462:	2206      	movs	r2, #6
   15464:	4608      	mov	r0, r1
   15466:	f000 ff99 	bl	1639c <bt_conn_lookup_state_le>
	if (conn) {
   1546a:	4602      	mov	r2, r0
   1546c:	b1a0      	cbz	r0, 15498 <bt_id_del+0x64>
   1546e:	f3bf 8f5b 	dmb	ish
   15472:	36cc      	adds	r6, #204	; 0xcc
   15474:	e856 3f00 	ldrex	r3, [r6]
   15478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1547c:	e846 3200 	strex	r2, r3, [r6]
   15480:	2a00      	cmp	r2, #0
   15482:	d1f7      	bne.n	15474 <bt_id_del+0x40>
   15484:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   15488:	7a23      	ldrb	r3, [r4, #8]
   1548a:	f043 0302 	orr.w	r3, r3, #2
   1548e:	7223      	strb	r3, [r4, #8]
}
   15490:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   15494:	f000 bce0 	b.w	15e58 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15498:	f7ff fe66 	bl	15168 <atomic_get.constprop.0>
	if (scan_enabled) {
   1549c:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1549e:	f3c0 1640 	ubfx	r6, r0, #5, #1
   154a2:	d502      	bpl.n	154aa <bt_id_del+0x76>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   154a4:	4610      	mov	r0, r2
   154a6:	f010 fbfb 	bl	25ca0 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   154aa:	2000      	movs	r0, #0
   154ac:	f010 fb8a 	bl	25bc4 <addr_res_enable>
	if (err) {
   154b0:	4607      	mov	r7, r0
   154b2:	b1b8      	cbz	r0, 154e4 <bt_id_del+0xb0>
   154b4:	4a2c      	ldr	r2, [pc, #176]	; (15568 <bt_id_del+0x134>)
   154b6:	4b2d      	ldr	r3, [pc, #180]	; (1556c <bt_id_del+0x138>)
   154b8:	1ad2      	subs	r2, r2, r3
   154ba:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   154bc:	0192      	lsls	r2, r2, #6
   154be:	4601      	mov	r1, r0
   154c0:	f042 0201 	orr.w	r2, r2, #1
   154c4:	482a      	ldr	r0, [pc, #168]	; (15570 <bt_id_del+0x13c>)
   154c6:	f00f fb43 	bl	24b50 <log_1>
	if (bt_dev.le.rl_entries) {
   154ca:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   154ce:	b113      	cbz	r3, 154d6 <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   154d0:	2001      	movs	r0, #1
   154d2:	f010 fb77 	bl	25bc4 <addr_res_enable>
	if (scan_enabled) {
   154d6:	2e00      	cmp	r6, #0
   154d8:	d0c0      	beq.n	1545c <bt_id_del+0x28>
}
   154da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   154de:	2001      	movs	r0, #1
   154e0:	f010 bbde 	b.w	25ca0 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   154e4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   154e8:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   154ec:	429a      	cmp	r2, r3
   154ee:	d20c      	bcs.n	1550a <bt_id_del+0xd6>
		bt_dev.le.rl_entries--;
   154f0:	3b01      	subs	r3, #1
   154f2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   154f6:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   154f8:	491e      	ldr	r1, [pc, #120]	; (15574 <bt_id_del+0x140>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   154fa:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   154fe:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   15500:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   15502:	2002      	movs	r0, #2
   15504:	f006 f8c8 	bl	1b698 <bt_keys_foreach>
		goto done;
   15508:	e7df      	b.n	154ca <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1550a:	2107      	movs	r1, #7
   1550c:	f242 0028 	movw	r0, #8232	; 0x2028
   15510:	f7ff fc82 	bl	14e18 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   15514:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   15518:	4680      	mov	r8, r0
   1551a:	b950      	cbnz	r0, 15532 <bt_id_del+0xfe>
   1551c:	4b13      	ldr	r3, [pc, #76]	; (1556c <bt_id_del+0x138>)
   1551e:	4912      	ldr	r1, [pc, #72]	; (15568 <bt_id_del+0x134>)
		BT_ERR("Failed to remove IRK from controller");
   15520:	4815      	ldr	r0, [pc, #84]	; (15578 <bt_id_del+0x144>)
   15522:	1ac9      	subs	r1, r1, r3
   15524:	08c9      	lsrs	r1, r1, #3
   15526:	0189      	lsls	r1, r1, #6
   15528:	f041 0101 	orr.w	r1, r1, #1
   1552c:	f00f fb03 	bl	24b36 <log_0>
		goto done;
   15530:	e7cb      	b.n	154ca <bt_id_del+0x96>
	return net_buf_simple_add(&buf->b, len);
   15532:	2107      	movs	r1, #7
   15534:	3008      	adds	r0, #8
   15536:	f006 fd27 	bl	1bf88 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1553a:	4649      	mov	r1, r9
   1553c:	f010 fb3f 	bl	25bbe <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   15540:	463a      	mov	r2, r7
   15542:	4641      	mov	r1, r8
   15544:	f242 0028 	movw	r0, #8232	; 0x2028
   15548:	f7ff fcae 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1554c:	2800      	cmp	r0, #0
   1554e:	d1e5      	bne.n	1551c <bt_id_del+0xe8>
	bt_dev.le.rl_entries--;
   15550:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   15554:	3b01      	subs	r3, #1
   15556:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1555a:	7a23      	ldrb	r3, [r4, #8]
   1555c:	f023 0304 	bic.w	r3, r3, #4
   15560:	7223      	strb	r3, [r4, #8]
   15562:	e7b2      	b.n	154ca <bt_id_del+0x96>
   15564:	200002b0 	.word	0x200002b0
   15568:	00028658 	.word	0x00028658
   1556c:	00028618 	.word	0x00028618
   15570:	0002e0f5 	.word	0x0002e0f5
   15574:	00025c45 	.word	0x00025c45
   15578:	0002e122 	.word	0x0002e122

0001557c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1557c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1557e:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15580:	4604      	mov	r4, r0
   15582:	b918      	cbnz	r0, 1558c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15584:	b346      	cbz	r6, 155d8 <bt_id_create+0x5c>
		return -EINVAL;
   15586:	f06f 0015 	mvn.w	r0, #21
   1558a:	e023      	b.n	155d4 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1558c:	2300      	movs	r3, #0
   1558e:	2207      	movs	r2, #7
   15590:	4669      	mov	r1, sp
   15592:	9300      	str	r3, [sp, #0]
   15594:	f8cd 3003 	str.w	r3, [sp, #3]
   15598:	f010 f9d4 	bl	25944 <memcmp>
   1559c:	2800      	cmp	r0, #0
   1559e:	d0f1      	beq.n	15584 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   155a0:	7823      	ldrb	r3, [r4, #0]
   155a2:	2b01      	cmp	r3, #1
   155a4:	d104      	bne.n	155b0 <bt_id_create+0x34>
   155a6:	79a3      	ldrb	r3, [r4, #6]
   155a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   155ac:	2bc0      	cmp	r3, #192	; 0xc0
   155ae:	d00a      	beq.n	155c6 <bt_id_create+0x4a>
   155b0:	4b1a      	ldr	r3, [pc, #104]	; (1561c <bt_id_create+0xa0>)
   155b2:	491b      	ldr	r1, [pc, #108]	; (15620 <bt_id_create+0xa4>)
			BT_ERR("Only static random identity address supported");
   155b4:	481b      	ldr	r0, [pc, #108]	; (15624 <bt_id_create+0xa8>)
   155b6:	1ac9      	subs	r1, r1, r3
   155b8:	08c9      	lsrs	r1, r1, #3
   155ba:	0189      	lsls	r1, r1, #6
   155bc:	f041 0101 	orr.w	r1, r1, #1
   155c0:	f00f fab9 	bl	24b36 <log_0>
			return -EINVAL;
   155c4:	e7df      	b.n	15586 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   155c6:	4620      	mov	r0, r4
   155c8:	f7ff fdd8 	bl	1517c <id_find>
   155cc:	2800      	cmp	r0, #0
   155ce:	dbd9      	blt.n	15584 <bt_id_create+0x8>
			return -EALREADY;
   155d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   155d4:	b002      	add	sp, #8
   155d6:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   155d8:	4d13      	ldr	r5, [pc, #76]	; (15628 <bt_id_create+0xac>)
   155da:	79eb      	ldrb	r3, [r5, #7]
   155dc:	2b01      	cmp	r3, #1
   155de:	d01a      	beq.n	15616 <bt_id_create+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   155e0:	f7ff fdc2 	bl	15168 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   155e4:	07c3      	lsls	r3, r0, #31
   155e6:	d40b      	bmi.n	15600 <bt_id_create+0x84>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   155e8:	2c00      	cmp	r4, #0
   155ea:	d0cc      	beq.n	15586 <bt_id_create+0xa>
   155ec:	2207      	movs	r2, #7
   155ee:	4669      	mov	r1, sp
   155f0:	4620      	mov	r0, r4
   155f2:	9600      	str	r6, [sp, #0]
   155f4:	f8cd 6003 	str.w	r6, [sp, #3]
   155f8:	f010 f9a4 	bl	25944 <memcmp>
   155fc:	2800      	cmp	r0, #0
   155fe:	d0c2      	beq.n	15586 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   15600:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   15602:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   15604:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   15606:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   15608:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   1560a:	f7ff fdff 	bl	1520c <id_create.isra.0>
	new_id = bt_dev.id_count++;
   1560e:	2800      	cmp	r0, #0
   15610:	bf08      	it	eq
   15612:	4630      	moveq	r0, r6
   15614:	e7de      	b.n	155d4 <bt_id_create+0x58>
		return -ENOMEM;
   15616:	f06f 000b 	mvn.w	r0, #11
   1561a:	e7db      	b.n	155d4 <bt_id_create+0x58>
   1561c:	00028618 	.word	0x00028618
   15620:	00028658 	.word	0x00028658
   15624:	0002e147 	.word	0x0002e147
   15628:	200002b0 	.word	0x200002b0

0001562c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1562c:	b570      	push	{r4, r5, r6, lr}
   1562e:	b086      	sub	sp, #24
   15630:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   15632:	aa01      	add	r2, sp, #4
   15634:	2100      	movs	r1, #0
   15636:	f241 0009 	movw	r0, #4105	; 0x1009
   1563a:	f7ff fc35 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1563e:	4604      	mov	r4, r0
   15640:	b160      	cbz	r0, 1565c <bt_id_read_public_addr+0x30>
   15642:	491a      	ldr	r1, [pc, #104]	; (156ac <bt_id_read_public_addr+0x80>)
   15644:	4b1a      	ldr	r3, [pc, #104]	; (156b0 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   15646:	481b      	ldr	r0, [pc, #108]	; (156b4 <bt_id_read_public_addr+0x88>)
   15648:	1ac9      	subs	r1, r1, r3
   1564a:	08c9      	lsrs	r1, r1, #3
   1564c:	0189      	lsls	r1, r1, #6
   1564e:	f041 0102 	orr.w	r1, r1, #2
   15652:	f00f fa70 	bl	24b36 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   15656:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15658:	b006      	add	sp, #24
   1565a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1565c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1565e:	9002      	str	r0, [sp, #8]
   15660:	689d      	ldr	r5, [r3, #8]
   15662:	f8ad 000c 	strh.w	r0, [sp, #12]
   15666:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   15668:	2206      	movs	r2, #6
   1566a:	a902      	add	r1, sp, #8
   1566c:	4628      	mov	r0, r5
   1566e:	f010 f969 	bl	25944 <memcmp>
   15672:	b918      	cbnz	r0, 1567c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   15674:	9801      	ldr	r0, [sp, #4]
   15676:	f006 fb57 	bl	1bd28 <net_buf_unref>
   1567a:	e7ec      	b.n	15656 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1567c:	f04f 33ff 	mov.w	r3, #4294967295
   15680:	2206      	movs	r2, #6
   15682:	a904      	add	r1, sp, #16
   15684:	4628      	mov	r0, r5
   15686:	9304      	str	r3, [sp, #16]
   15688:	f8ad 3014 	strh.w	r3, [sp, #20]
   1568c:	f010 f95a 	bl	25944 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15690:	2800      	cmp	r0, #0
   15692:	d0ef      	beq.n	15674 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   15694:	2206      	movs	r2, #6
   15696:	4629      	mov	r1, r5
   15698:	1c70      	adds	r0, r6, #1
   1569a:	f010 f963 	bl	25964 <memcpy>
	net_buf_unref(rsp);
   1569e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   156a0:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   156a2:	f006 fb41 	bl	1bd28 <net_buf_unref>
	return 1U;
   156a6:	2001      	movs	r0, #1
   156a8:	e7d6      	b.n	15658 <bt_id_read_public_addr+0x2c>
   156aa:	bf00      	nop
   156ac:	00028658 	.word	0x00028658
   156b0:	00028618 	.word	0x00028618
   156b4:	0002e175 	.word	0x0002e175

000156b8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   156b8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   156ba:	4668      	mov	r0, sp
   156bc:	f7ff ffb6 	bl	1562c <bt_id_read_public_addr>
   156c0:	4b04      	ldr	r3, [pc, #16]	; (156d4 <bt_setup_public_id_addr+0x1c>)
   156c2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   156c4:	b118      	cbz	r0, 156ce <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   156c6:	4669      	mov	r1, sp
   156c8:	2000      	movs	r0, #0
   156ca:	f7ff fd9f 	bl	1520c <id_create.isra.0>
}
   156ce:	b003      	add	sp, #12
   156d0:	f85d fb04 	ldr.w	pc, [sp], #4
   156d4:	200002b0 	.word	0x200002b0

000156d8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   156d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   156dc:	4b25      	ldr	r3, [pc, #148]	; (15774 <bt_read_static_addr+0x9c>)
   156de:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   156e2:	f014 0401 	ands.w	r4, r4, #1
{
   156e6:	4607      	mov	r7, r0
   156e8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   156ea:	d10a      	bne.n	15702 <bt_read_static_addr+0x2a>
   156ec:	4922      	ldr	r1, [pc, #136]	; (15778 <bt_read_static_addr+0xa0>)
   156ee:	4b23      	ldr	r3, [pc, #140]	; (1577c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   156f0:	4823      	ldr	r0, [pc, #140]	; (15780 <bt_read_static_addr+0xa8>)
   156f2:	1ac9      	subs	r1, r1, r3
   156f4:	08c9      	lsrs	r1, r1, #3
   156f6:	0189      	lsls	r1, r1, #6
   156f8:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   156fc:	f00f fa1b 	bl	24b36 <log_0>
   15700:	e012      	b.n	15728 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   15702:	aa01      	add	r2, sp, #4
   15704:	2100      	movs	r1, #0
   15706:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1570a:	f7ff fbcd 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   1570e:	4605      	mov	r5, r0
   15710:	b170      	cbz	r0, 15730 <bt_read_static_addr+0x58>
   15712:	4b1a      	ldr	r3, [pc, #104]	; (1577c <bt_read_static_addr+0xa4>)
   15714:	4918      	ldr	r1, [pc, #96]	; (15778 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   15716:	481b      	ldr	r0, [pc, #108]	; (15784 <bt_read_static_addr+0xac>)
   15718:	1ac9      	subs	r1, r1, r3
   1571a:	08c9      	lsrs	r1, r1, #3
   1571c:	0189      	lsls	r1, r1, #6
   1571e:	f041 0102 	orr.w	r1, r1, #2
   15722:	f00f fa08 	bl	24b36 <log_0>
		return 0;
   15726:	2400      	movs	r4, #0
	}

	return cnt;
}
   15728:	4620      	mov	r0, r4
   1572a:	b002      	add	sp, #8
   1572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   15734:	785c      	ldrb	r4, [r3, #1]
   15736:	42b4      	cmp	r4, r6
   15738:	bf28      	it	cs
   1573a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1573c:	f04f 0816 	mov.w	r8, #22
   15740:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   15742:	42a5      	cmp	r5, r4
   15744:	db0d      	blt.n	15762 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   15746:	9801      	ldr	r0, [sp, #4]
   15748:	f006 faee 	bl	1bd28 <net_buf_unref>
	if (!cnt) {
   1574c:	2c00      	cmp	r4, #0
   1574e:	d1eb      	bne.n	15728 <bt_read_static_addr+0x50>
   15750:	4909      	ldr	r1, [pc, #36]	; (15778 <bt_read_static_addr+0xa0>)
   15752:	4b0a      	ldr	r3, [pc, #40]	; (1577c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   15754:	480c      	ldr	r0, [pc, #48]	; (15788 <bt_read_static_addr+0xb0>)
   15756:	1ac9      	subs	r1, r1, r3
   15758:	08c9      	lsrs	r1, r1, #3
   1575a:	0189      	lsls	r1, r1, #6
   1575c:	f041 0102 	orr.w	r1, r1, #2
   15760:	e7cc      	b.n	156fc <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   15762:	fb08 7005 	mla	r0, r8, r5, r7
   15766:	2216      	movs	r2, #22
   15768:	4631      	mov	r1, r6
   1576a:	f010 f8fb 	bl	25964 <memcpy>
	for (i = 0; i < cnt; i++) {
   1576e:	3501      	adds	r5, #1
   15770:	e7e7      	b.n	15742 <bt_read_static_addr+0x6a>
   15772:	bf00      	nop
   15774:	200002b0 	.word	0x200002b0
   15778:	00028658 	.word	0x00028658
   1577c:	00028618 	.word	0x00028618
   15780:	0002e193 	.word	0x0002e193
   15784:	0002e1bf 	.word	0x0002e1bf
   15788:	0002e1df 	.word	0x0002e1df

0001578c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1578c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1578e:	4d14      	ldr	r5, [pc, #80]	; (157e0 <bt_setup_random_id_addr+0x54>)
   15790:	79ec      	ldrb	r4, [r5, #7]
{
   15792:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   15794:	b92c      	cbnz	r4, 157a2 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   15796:	2101      	movs	r1, #1
   15798:	a802      	add	r0, sp, #8
   1579a:	f7ff ff9d 	bl	156d8 <bt_read_static_addr>
   1579e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   157a0:	b9b8      	cbnz	r0, 157d2 <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   157a2:	2100      	movs	r1, #0
   157a4:	4608      	mov	r0, r1
   157a6:	f7ff fee9 	bl	1557c <bt_id_create>
   157aa:	e010      	b.n	157ce <bt_setup_random_id_addr+0x42>
   157ac:	ab02      	add	r3, sp, #8
   157ae:	fb07 3106 	mla	r1, r7, r6, r3
   157b2:	2206      	movs	r2, #6
   157b4:	f10d 0001 	add.w	r0, sp, #1
   157b8:	f010 f8d4 	bl	25964 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   157bc:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   157be:	4669      	mov	r1, sp
   157c0:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   157c2:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   157c6:	f7ff fd21 	bl	1520c <id_create.isra.0>
				if (err) {
   157ca:	3401      	adds	r4, #1
   157cc:	b110      	cbz	r0, 157d4 <bt_setup_random_id_addr+0x48>
}
   157ce:	b009      	add	sp, #36	; 0x24
   157d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   157d2:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   157d4:	79eb      	ldrb	r3, [r5, #7]
   157d6:	b2e6      	uxtb	r6, r4
   157d8:	42b3      	cmp	r3, r6
   157da:	d8e7      	bhi.n	157ac <bt_setup_random_id_addr+0x20>
			return 0;
   157dc:	2000      	movs	r0, #0
   157de:	e7f6      	b.n	157ce <bt_setup_random_id_addr+0x42>
   157e0:	200002b0 	.word	0x200002b0

000157e4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   157e4:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   157e6:	4b05      	ldr	r3, [pc, #20]	; (157fc <bt_id_set_scan_own_addr+0x18>)
   157e8:	781b      	ldrb	r3, [r3, #0]
   157ea:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   157ec:	2000      	movs	r0, #0
{
   157ee:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   157f0:	f010 fa31 	bl	25c56 <bt_id_set_private_addr>
			if (err) {
   157f4:	b908      	cbnz	r0, 157fa <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   157f6:	2301      	movs	r3, #1
   157f8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   157fa:	bd10      	pop	{r4, pc}
   157fc:	200002b0 	.word	0x200002b0

00015800 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15800:	4b03      	ldr	r3, [pc, #12]	; (15810 <atomic_get.constprop.0+0x10>)
   15802:	f3bf 8f5b 	dmb	ish
   15806:	6818      	ldr	r0, [r3, #0]
   15808:	f3bf 8f5b 	dmb	ish
}
   1580c:	4770      	bx	lr
   1580e:	bf00      	nop
   15810:	2000037c 	.word	0x2000037c

00015814 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15814:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15816:	2102      	movs	r1, #2
{
   15818:	b087      	sub	sp, #28
   1581a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1581c:	f242 000c 	movw	r0, #8204	; 0x200c
   15820:	f7ff fafa 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   15824:	4605      	mov	r5, r0
   15826:	b308      	cbz	r0, 1586c <bt_le_scan_set_enable_legacy+0x58>
   15828:	2102      	movs	r1, #2
   1582a:	3008      	adds	r0, #8
   1582c:	f006 fbac 	bl	1bf88 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   15830:	2c01      	cmp	r4, #1
   15832:	4602      	mov	r2, r0
   15834:	d117      	bne.n	15866 <bt_le_scan_set_enable_legacy+0x52>
   15836:	f7ff ffe3 	bl	15800 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1583a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1583e:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15840:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   15842:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15844:	425c      	negs	r4, r3
   15846:	415c      	adcs	r4, r3
   15848:	4a0a      	ldr	r2, [pc, #40]	; (15874 <bt_le_scan_set_enable_legacy+0x60>)
   1584a:	9400      	str	r4, [sp, #0]
   1584c:	a903      	add	r1, sp, #12
   1584e:	4628      	mov	r0, r5
   15850:	2305      	movs	r3, #5
   15852:	f7ff facf 	bl	14df4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15856:	2200      	movs	r2, #0
   15858:	4629      	mov	r1, r5
   1585a:	f242 000c 	movw	r0, #8204	; 0x200c
   1585e:	f7ff fb23 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   15862:	b007      	add	sp, #28
   15864:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   15866:	2300      	movs	r3, #0
   15868:	7043      	strb	r3, [r0, #1]
   1586a:	e7e9      	b.n	15840 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   1586c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15870:	e7f7      	b.n	15862 <bt_le_scan_set_enable_legacy+0x4e>
   15872:	bf00      	nop
   15874:	2000037c 	.word	0x2000037c

00015878 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   15878:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1587a:	4605      	mov	r5, r0
   1587c:	4614      	mov	r4, r2
   1587e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   15880:	2207      	movs	r2, #7
   15882:	2100      	movs	r1, #0
   15884:	4668      	mov	r0, sp
   15886:	f010 f878 	bl	2597a <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1588a:	2300      	movs	r3, #0
   1588c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   15890:	1e6b      	subs	r3, r5, #1
   15892:	4258      	negs	r0, r3
   15894:	f10d 0105 	add.w	r1, sp, #5
   15898:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   1589a:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   1589e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   158a2:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   158a6:	f7ff ff9d 	bl	157e4 <bt_id_set_scan_own_addr>
	if (err) {
   158aa:	4604      	mov	r4, r0
   158ac:	bb38      	cbnz	r0, 158fe <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   158ae:	2107      	movs	r1, #7
   158b0:	f242 000b 	movw	r0, #8203	; 0x200b
   158b4:	f7ff fab0 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   158b8:	4606      	mov	r6, r0
   158ba:	b348      	cbz	r0, 15910 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   158bc:	2207      	movs	r2, #7
   158be:	4669      	mov	r1, sp
   158c0:	3008      	adds	r0, #8
   158c2:	f011 fee6 	bl	27692 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   158c6:	4622      	mov	r2, r4
   158c8:	4631      	mov	r1, r6
   158ca:	f242 000b 	movw	r0, #8203	; 0x200b
   158ce:	f7ff faeb 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   158d2:	4604      	mov	r4, r0
   158d4:	b998      	cbnz	r0, 158fe <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   158d6:	2001      	movs	r0, #1
   158d8:	f7ff ff9c 	bl	15814 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   158dc:	4604      	mov	r4, r0
   158de:	b970      	cbnz	r0, 158fe <start_le_scan_legacy+0x86>
	if (val) {
   158e0:	2d01      	cmp	r5, #1
   158e2:	d10f      	bne.n	15904 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158e4:	f3bf 8f5b 	dmb	ish
   158e8:	4b0b      	ldr	r3, [pc, #44]	; (15918 <start_le_scan_legacy+0xa0>)
   158ea:	e853 2f00 	ldrex	r2, [r3]
   158ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   158f2:	e843 2100 	strex	r1, r2, [r3]
   158f6:	2900      	cmp	r1, #0
   158f8:	d1f7      	bne.n	158ea <start_le_scan_legacy+0x72>
   158fa:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   158fe:	4620      	mov	r0, r4
   15900:	b002      	add	sp, #8
   15902:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15904:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15908:	4803      	ldr	r0, [pc, #12]	; (15918 <start_le_scan_legacy+0xa0>)
   1590a:	f010 f9ba 	bl	25c82 <atomic_and>
   1590e:	e7f6      	b.n	158fe <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   15910:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15914:	e7f3      	b.n	158fe <start_le_scan_legacy+0x86>
   15916:	bf00      	nop
   15918:	2000037c 	.word	0x2000037c

0001591c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1591c:	4b01      	ldr	r3, [pc, #4]	; (15924 <bt_scan_reset+0x8>)
   1591e:	2200      	movs	r2, #0
   15920:	601a      	str	r2, [r3, #0]
}
   15922:	4770      	bx	lr
   15924:	20002184 	.word	0x20002184

00015928 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   15928:	b538      	push	{r3, r4, r5, lr}
   1592a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1592c:	f7ff ff68 	bl	15800 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15930:	0641      	lsls	r1, r0, #25
   15932:	f3c0 1280 	ubfx	r2, r0, #6, #1
   15936:	d501      	bpl.n	1593c <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   15938:	2000      	movs	r0, #0
   1593a:	e031      	b.n	159a0 <bt_le_scan_update+0x78>
   1593c:	f7ff ff60 	bl	15800 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15940:	0683      	lsls	r3, r0, #26
   15942:	d428      	bmi.n	15996 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15944:	2100      	movs	r1, #0
   15946:	2206      	movs	r2, #6
   15948:	4608      	mov	r0, r1
   1594a:	f000 fd27 	bl	1639c <bt_conn_lookup_state_le>
		if (conn) {
   1594e:	4604      	mov	r4, r0
   15950:	bb38      	cbnz	r0, 159a2 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   15952:	2202      	movs	r2, #2
   15954:	4601      	mov	r1, r0
   15956:	f000 fd21 	bl	1639c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   1595a:	2800      	cmp	r0, #0
   1595c:	d0ec      	beq.n	15938 <bt_le_scan_update+0x10>
   1595e:	f3bf 8f5b 	dmb	ish
   15962:	4b11      	ldr	r3, [pc, #68]	; (159a8 <bt_le_scan_update+0x80>)
   15964:	e853 2f00 	ldrex	r2, [r3]
   15968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1596c:	e843 2100 	strex	r1, r2, [r3]
   15970:	2900      	cmp	r1, #0
   15972:	d1f7      	bne.n	15964 <bt_le_scan_update+0x3c>
   15974:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   15978:	f000 fa6e 	bl	15e58 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   1597c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1597e:	4620      	mov	r0, r4
   15980:	bf18      	it	ne
   15982:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   15984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   15988:	bf0a      	itet	eq
   1598a:	2212      	moveq	r2, #18
   1598c:	2160      	movne	r1, #96	; 0x60
   1598e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   15992:	f7ff bf71 	b.w	15878 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   15996:	4610      	mov	r0, r2
   15998:	f7ff ff3c 	bl	15814 <bt_le_scan_set_enable_legacy>
		if (err) {
   1599c:	2800      	cmp	r0, #0
   1599e:	d0d1      	beq.n	15944 <bt_le_scan_update+0x1c>
}
   159a0:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   159a2:	f000 fa59 	bl	15e58 <bt_conn_unref>
   159a6:	e7c7      	b.n	15938 <bt_le_scan_update+0x10>
   159a8:	2000037c 	.word	0x2000037c

000159ac <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   159ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159b0:	4605      	mov	r5, r0
   159b2:	460f      	mov	r7, r1
   159b4:	f7ff ff24 	bl	15800 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   159b8:	0780      	lsls	r0, r0, #30
   159ba:	d56f      	bpl.n	15a9c <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   159bc:	782a      	ldrb	r2, [r5, #0]
   159be:	2a01      	cmp	r2, #1
   159c0:	d904      	bls.n	159cc <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   159c2:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   159c6:	4620      	mov	r0, r4
   159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   159cc:	686b      	ldr	r3, [r5, #4]
   159ce:	f033 030f 	bics.w	r3, r3, #15
   159d2:	d1f6      	bne.n	159c2 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   159d4:	8928      	ldrh	r0, [r5, #8]
   159d6:	1f03      	subs	r3, r0, #4
   159d8:	b29b      	uxth	r3, r3
   159da:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   159de:	42a3      	cmp	r3, r4
   159e0:	d8ef      	bhi.n	159c2 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   159e2:	8969      	ldrh	r1, [r5, #10]
   159e4:	1f0b      	subs	r3, r1, #4
   159e6:	b29b      	uxth	r3, r3
   159e8:	42a3      	cmp	r3, r4
   159ea:	d8ea      	bhi.n	159c2 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   159ec:	4288      	cmp	r0, r1
   159ee:	d3e8      	bcc.n	159c2 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   159f0:	b99a      	cbnz	r2, 15a1a <bt_le_scan_start+0x6e>
   159f2:	f3bf 8f5b 	dmb	ish
   159f6:	4e2b      	ldr	r6, [pc, #172]	; (15aa4 <bt_le_scan_start+0xf8>)
   159f8:	e856 0f00 	ldrex	r0, [r6]
   159fc:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   15a00:	e846 3200 	strex	r2, r3, [r6]
   15a04:	2a00      	cmp	r2, #0
   15a06:	d1f7      	bne.n	159f8 <bt_le_scan_start+0x4c>
   15a08:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15a0c:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   15a10:	46b0      	mov	r8, r6
   15a12:	d007      	beq.n	15a24 <bt_le_scan_start+0x78>
		return -EALREADY;
   15a14:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15a18:	e7d5      	b.n	159c6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   15a1a:	f010 f92e 	bl	25c7a <bt_id_scan_random_addr_check>
   15a1e:	2800      	cmp	r0, #0
   15a20:	d1e7      	bne.n	159f2 <bt_le_scan_start+0x46>
   15a22:	e7ce      	b.n	159c2 <bt_le_scan_start+0x16>
   15a24:	f7ff feec 	bl	15800 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15a28:	0681      	lsls	r1, r0, #26
   15a2a:	d50a      	bpl.n	15a42 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   15a2c:	4610      	mov	r0, r2
   15a2e:	f7ff fef1 	bl	15814 <bt_le_scan_set_enable_legacy>
		if (err) {
   15a32:	4604      	mov	r4, r0
   15a34:	b128      	cbz	r0, 15a42 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15a36:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15a3a:	4630      	mov	r0, r6
   15a3c:	f010 f921 	bl	25c82 <atomic_and>
		return err;
   15a40:	e7c1      	b.n	159c6 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   15a42:	686b      	ldr	r3, [r5, #4]
	if (val) {
   15a44:	07db      	lsls	r3, r3, #31
   15a46:	d515      	bpl.n	15a74 <bt_le_scan_start+0xc8>
   15a48:	f3bf 8f5b 	dmb	ish
   15a4c:	e858 3f00 	ldrex	r3, [r8]
   15a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15a54:	e848 3200 	strex	r2, r3, [r8]
   15a58:	2a00      	cmp	r2, #0
   15a5a:	d1f7      	bne.n	15a4c <bt_le_scan_start+0xa0>
   15a5c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   15a60:	89ab      	ldrh	r3, [r5, #12]
   15a62:	b16b      	cbz	r3, 15a80 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15a64:	480f      	ldr	r0, [pc, #60]	; (15aa4 <bt_le_scan_start+0xf8>)
   15a66:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15a6a:	f010 f90a 	bl	25c82 <atomic_and>
			return -ENOTSUP;
   15a6e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   15a72:	e7a8      	b.n	159c6 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15a74:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15a78:	480a      	ldr	r0, [pc, #40]	; (15aa4 <bt_le_scan_start+0xf8>)
   15a7a:	f010 f902 	bl	25c82 <atomic_and>
   15a7e:	e7ef      	b.n	15a60 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   15a80:	896a      	ldrh	r2, [r5, #10]
   15a82:	8929      	ldrh	r1, [r5, #8]
   15a84:	7828      	ldrb	r0, [r5, #0]
   15a86:	f7ff fef7 	bl	15878 <start_le_scan_legacy>
	if (err) {
   15a8a:	4604      	mov	r4, r0
   15a8c:	b118      	cbz	r0, 15a96 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15a8e:	4805      	ldr	r0, [pc, #20]	; (15aa4 <bt_le_scan_start+0xf8>)
   15a90:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15a94:	e7d2      	b.n	15a3c <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   15a96:	4b04      	ldr	r3, [pc, #16]	; (15aa8 <bt_le_scan_start+0xfc>)
   15a98:	601f      	str	r7, [r3, #0]
	return 0;
   15a9a:	e794      	b.n	159c6 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   15a9c:	f06f 040a 	mvn.w	r4, #10
   15aa0:	e791      	b.n	159c6 <bt_le_scan_start+0x1a>
   15aa2:	bf00      	nop
   15aa4:	2000037c 	.word	0x2000037c
   15aa8:	20002184 	.word	0x20002184

00015aac <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   15aac:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15aae:	4808      	ldr	r0, [pc, #32]	; (15ad0 <bt_le_scan_stop+0x24>)
   15ab0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   15ab4:	f010 f8e5 	bl	25c82 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   15ab8:	0643      	lsls	r3, r0, #25
   15aba:	d506      	bpl.n	15aca <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   15abc:	4b05      	ldr	r3, [pc, #20]	; (15ad4 <bt_le_scan_stop+0x28>)
   15abe:	2000      	movs	r0, #0
   15ac0:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   15ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   15ac6:	f7ff bf2f 	b.w	15928 <bt_le_scan_update>
}
   15aca:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15ace:	bd08      	pop	{r3, pc}
   15ad0:	2000037c 	.word	0x2000037c
   15ad4:	20002184 	.word	0x20002184

00015ad8 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   15ad8:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   15ada:	4904      	ldr	r1, [pc, #16]	; (15aec <bt_pub_key_is_debug+0x14>)
   15adc:	2240      	movs	r2, #64	; 0x40
   15ade:	f00f ff31 	bl	25944 <memcmp>
}
   15ae2:	fab0 f080 	clz	r0, r0
   15ae6:	0940      	lsrs	r0, r0, #5
   15ae8:	bd08      	pop	{r3, pc}
   15aea:	bf00      	nop
   15aec:	0002e29c 	.word	0x0002e29c

00015af0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   15af0:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   15af2:	4b44      	ldr	r3, [pc, #272]	; (15c04 <bt_pub_key_gen+0x114>)
   15af4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   15af8:	f003 0306 	and.w	r3, r3, #6
   15afc:	2b06      	cmp	r3, #6
   15afe:	d00d      	beq.n	15b1c <bt_pub_key_gen+0x2c>
   15b00:	4b41      	ldr	r3, [pc, #260]	; (15c08 <bt_pub_key_gen+0x118>)
   15b02:	4942      	ldr	r1, [pc, #264]	; (15c0c <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   15b04:	4842      	ldr	r0, [pc, #264]	; (15c10 <bt_pub_key_gen+0x120>)
   15b06:	1ac9      	subs	r1, r1, r3
   15b08:	08c9      	lsrs	r1, r1, #3
   15b0a:	0189      	lsls	r1, r1, #6
   15b0c:	f041 0102 	orr.w	r1, r1, #2
   15b10:	f00f f811 	bl	24b36 <log_0>
		return -ENOTSUP;
   15b14:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   15b18:	4630      	mov	r0, r6
   15b1a:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   15b1c:	2800      	cmp	r0, #0
   15b1e:	d06d      	beq.n	15bfc <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15b20:	4d3c      	ldr	r5, [pc, #240]	; (15c14 <bt_pub_key_gen+0x124>)
   15b22:	682a      	ldr	r2, [r5, #0]
   15b24:	b10a      	cbz	r2, 15b2a <bt_pub_key_gen+0x3a>
   15b26:	1f13      	subs	r3, r2, #4
   15b28:	b9bb      	cbnz	r3, 15b5a <bt_pub_key_gen+0x6a>
	parent->next = child;
   15b2a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   15b2c:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   15b2e:	1d03      	adds	r3, r0, #4
	list->head = node;
   15b30:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   15b32:	b902      	cbnz	r2, 15b36 <bt_pub_key_gen+0x46>
	list->tail = node;
   15b34:	606b      	str	r3, [r5, #4]
   15b36:	4c38      	ldr	r4, [pc, #224]	; (15c18 <bt_pub_key_gen+0x128>)
   15b38:	f3bf 8f5b 	dmb	ish
   15b3c:	e854 2f00 	ldrex	r2, [r4]
   15b40:	f042 0310 	orr.w	r3, r2, #16
   15b44:	e844 3100 	strex	r1, r3, [r4]
   15b48:	2900      	cmp	r1, #0
   15b4a:	d1f7      	bne.n	15b3c <bt_pub_key_gen+0x4c>
   15b4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15b50:	f012 0210 	ands.w	r2, r2, #16
   15b54:	d017      	beq.n	15b86 <bt_pub_key_gen+0x96>
		return 0;
   15b56:	2600      	movs	r6, #0
   15b58:	e7de      	b.n	15b18 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   15b5a:	4298      	cmp	r0, r3
   15b5c:	d10c      	bne.n	15b78 <bt_pub_key_gen+0x88>
   15b5e:	4b2a      	ldr	r3, [pc, #168]	; (15c08 <bt_pub_key_gen+0x118>)
   15b60:	492a      	ldr	r1, [pc, #168]	; (15c0c <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   15b62:	482e      	ldr	r0, [pc, #184]	; (15c1c <bt_pub_key_gen+0x12c>)
   15b64:	1ac9      	subs	r1, r1, r3
   15b66:	08c9      	lsrs	r1, r1, #3
   15b68:	0189      	lsls	r1, r1, #6
   15b6a:	f041 0102 	orr.w	r1, r1, #2
   15b6e:	f00e ffe2 	bl	24b36 <log_0>
			return -EALREADY;
   15b72:	f06f 0677 	mvn.w	r6, #119	; 0x77
   15b76:	e7cf      	b.n	15b18 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b78:	1d19      	adds	r1, r3, #4
   15b7a:	d0d6      	beq.n	15b2a <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b7c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15b7e:	2b00      	cmp	r3, #0
   15b80:	d0d3      	beq.n	15b2a <bt_pub_key_gen+0x3a>
   15b82:	3b04      	subs	r3, #4
   15b84:	e7d0      	b.n	15b28 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b86:	f3bf 8f5b 	dmb	ish
   15b8a:	e854 3f00 	ldrex	r3, [r4]
   15b8e:	f023 0308 	bic.w	r3, r3, #8
   15b92:	e844 3100 	strex	r1, r3, [r4]
   15b96:	2900      	cmp	r1, #0
   15b98:	d1f7      	bne.n	15b8a <bt_pub_key_gen+0x9a>
   15b9a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   15b9e:	4611      	mov	r1, r2
   15ba0:	f242 0025 	movw	r0, #8229	; 0x2025
   15ba4:	f7ff f980 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   15ba8:	4606      	mov	r6, r0
   15baa:	2800      	cmp	r0, #0
   15bac:	d0d3      	beq.n	15b56 <bt_pub_key_gen+0x66>
   15bae:	4b16      	ldr	r3, [pc, #88]	; (15c08 <bt_pub_key_gen+0x118>)
   15bb0:	4916      	ldr	r1, [pc, #88]	; (15c0c <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   15bb2:	481b      	ldr	r0, [pc, #108]	; (15c20 <bt_pub_key_gen+0x130>)
   15bb4:	1ac9      	subs	r1, r1, r3
   15bb6:	08c9      	lsrs	r1, r1, #3
   15bb8:	0189      	lsls	r1, r1, #6
   15bba:	f041 0101 	orr.w	r1, r1, #1
   15bbe:	f00e ffba 	bl	24b36 <log_0>
   15bc2:	f3bf 8f5b 	dmb	ish
   15bc6:	e854 3f00 	ldrex	r3, [r4]
   15bca:	f023 0310 	bic.w	r3, r3, #16
   15bce:	e844 3200 	strex	r2, r3, [r4]
   15bd2:	2a00      	cmp	r2, #0
   15bd4:	d1f7      	bne.n	15bc6 <bt_pub_key_gen+0xd6>
   15bd6:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15bda:	682c      	ldr	r4, [r5, #0]
   15bdc:	b91c      	cbnz	r4, 15be6 <bt_pub_key_gen+0xf6>
	list->head = NULL;
   15bde:	2300      	movs	r3, #0
	list->tail = NULL;
   15be0:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   15be4:	e798      	b.n	15b18 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15be6:	3c04      	subs	r4, #4
   15be8:	2c00      	cmp	r4, #0
   15bea:	d0f8      	beq.n	15bde <bt_pub_key_gen+0xee>
			if (cb->func) {
   15bec:	6823      	ldr	r3, [r4, #0]
   15bee:	b10b      	cbz	r3, 15bf4 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   15bf0:	2000      	movs	r0, #0
   15bf2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15bf4:	1d23      	adds	r3, r4, #4
   15bf6:	d0f2      	beq.n	15bde <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15bf8:	6864      	ldr	r4, [r4, #4]
	return node->next;
   15bfa:	e7ef      	b.n	15bdc <bt_pub_key_gen+0xec>
		return -EINVAL;
   15bfc:	f06f 0615 	mvn.w	r6, #21
   15c00:	e78a      	b.n	15b18 <bt_pub_key_gen+0x28>
   15c02:	bf00      	nop
   15c04:	200002b0 	.word	0x200002b0
   15c08:	00028618 	.word	0x00028618
   15c0c:	00028630 	.word	0x00028630
   15c10:	0002e20e 	.word	0x0002e20e
   15c14:	2000218c 	.word	0x2000218c
   15c18:	2000037c 	.word	0x2000037c
   15c1c:	0002e22d 	.word	0x0002e22d
   15c20:	0002e249 	.word	0x0002e249

00015c24 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c24:	4b05      	ldr	r3, [pc, #20]	; (15c3c <bt_pub_key_get+0x18>)
   15c26:	f3bf 8f5b 	dmb	ish
   15c2a:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   15c2c:	4804      	ldr	r0, [pc, #16]	; (15c40 <bt_pub_key_get+0x1c>)
   15c2e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15c32:	f013 0f08 	tst.w	r3, #8
}
   15c36:	bf08      	it	eq
   15c38:	2000      	moveq	r0, #0
   15c3a:	4770      	bx	lr
   15c3c:	2000037c 	.word	0x2000037c
   15c40:	20002634 	.word	0x20002634

00015c44 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   15c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   15c46:	4d25      	ldr	r5, [pc, #148]	; (15cdc <bt_dh_key_gen+0x98>)
   15c48:	682b      	ldr	r3, [r5, #0]
   15c4a:	428b      	cmp	r3, r1
{
   15c4c:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   15c4e:	d03f      	beq.n	15cd0 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15c50:	b11b      	cbz	r3, 15c5a <bt_dh_key_gen+0x16>
		return -EBUSY;
   15c52:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   15c56:	4620      	mov	r0, r4
   15c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15c5a:	4b21      	ldr	r3, [pc, #132]	; (15ce0 <bt_dh_key_gen+0x9c>)
   15c5c:	f3bf 8f5b 	dmb	ish
   15c60:	681a      	ldr	r2, [r3, #0]
   15c62:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   15c66:	f3c2 1700 	ubfx	r7, r2, #4, #1
   15c6a:	06d2      	lsls	r2, r2, #27
   15c6c:	d4f1      	bmi.n	15c52 <bt_dh_key_gen+0xe>
   15c6e:	f3bf 8f5b 	dmb	ish
   15c72:	681b      	ldr	r3, [r3, #0]
   15c74:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   15c78:	071b      	lsls	r3, r3, #28
   15c7a:	d52c      	bpl.n	15cd6 <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   15c7c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   15c7e:	f242 0026 	movw	r0, #8230	; 0x2026
   15c82:	2140      	movs	r1, #64	; 0x40
   15c84:	f7ff f8c8 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   15c88:	4604      	mov	r4, r0
   15c8a:	b1f0      	cbz	r0, 15cca <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   15c8c:	2140      	movs	r1, #64	; 0x40
   15c8e:	3008      	adds	r0, #8
   15c90:	f006 f97a 	bl	1bf88 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   15c94:	2240      	movs	r2, #64	; 0x40
   15c96:	4631      	mov	r1, r6
   15c98:	f00f fe64 	bl	25964 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   15c9c:	4621      	mov	r1, r4
   15c9e:	463a      	mov	r2, r7
   15ca0:	f242 0026 	movw	r0, #8230	; 0x2026
   15ca4:	f7ff f900 	bl	14ea8 <bt_hci_cmd_send_sync>
	if (err) {
   15ca8:	4604      	mov	r4, r0
   15caa:	2800      	cmp	r0, #0
   15cac:	d0d3      	beq.n	15c56 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   15cae:	2300      	movs	r3, #0
   15cb0:	602b      	str	r3, [r5, #0]
   15cb2:	4a0c      	ldr	r2, [pc, #48]	; (15ce4 <bt_dh_key_gen+0xa0>)
   15cb4:	4b0c      	ldr	r3, [pc, #48]	; (15ce8 <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   15cb6:	480d      	ldr	r0, [pc, #52]	; (15cec <bt_dh_key_gen+0xa8>)
   15cb8:	1ad2      	subs	r2, r2, r3
   15cba:	08d2      	lsrs	r2, r2, #3
   15cbc:	0192      	lsls	r2, r2, #6
   15cbe:	f042 0202 	orr.w	r2, r2, #2
   15cc2:	4621      	mov	r1, r4
   15cc4:	f00e ff44 	bl	24b50 <log_1>
		return err;
   15cc8:	e7c5      	b.n	15c56 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   15cca:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15cce:	e7ee      	b.n	15cae <bt_dh_key_gen+0x6a>
		return -EALREADY;
   15cd0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15cd4:	e7bf      	b.n	15c56 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   15cd6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   15cda:	e7bc      	b.n	15c56 <bt_dh_key_gen+0x12>
   15cdc:	20002188 	.word	0x20002188
   15ce0:	2000037c 	.word	0x2000037c
   15ce4:	00028630 	.word	0x00028630
   15ce8:	00028618 	.word	0x00028618
   15cec:	0002e273 	.word	0x0002e273

00015cf0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   15cf0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   15cf2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   15cf6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15cf8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15cfa:	4801      	ldr	r0, [pc, #4]	; (15d00 <tx_free+0x10>)
   15cfc:	f012 b9c7 	b.w	2808e <k_queue_append>
   15d00:	20000734 	.word	0x20000734

00015d04 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15d04:	4b19      	ldr	r3, [pc, #100]	; (15d6c <notify_connected+0x68>)
{
   15d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   15d0a:	681d      	ldr	r5, [r3, #0]
{
   15d0c:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15d0e:	b9ed      	cbnz	r5, 15d4c <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d10:	4e17      	ldr	r6, [pc, #92]	; (15d70 <notify_connected+0x6c>)
   15d12:	4d18      	ldr	r5, [pc, #96]	; (15d74 <notify_connected+0x70>)
   15d14:	4f18      	ldr	r7, [pc, #96]	; (15d78 <notify_connected+0x74>)
   15d16:	46b0      	mov	r8, r6
   15d18:	42b5      	cmp	r5, r6
   15d1a:	d90e      	bls.n	15d3a <notify_connected+0x36>
   15d1c:	4917      	ldr	r1, [pc, #92]	; (15d7c <notify_connected+0x78>)
   15d1e:	4818      	ldr	r0, [pc, #96]	; (15d80 <notify_connected+0x7c>)
   15d20:	f240 5311 	movw	r3, #1297	; 0x511
   15d24:	463a      	mov	r2, r7
   15d26:	f00e fce7 	bl	246f8 <printk>
   15d2a:	4816      	ldr	r0, [pc, #88]	; (15d84 <notify_connected+0x80>)
   15d2c:	f00e fce4 	bl	246f8 <printk>
   15d30:	f240 5111 	movw	r1, #1297	; 0x511
   15d34:	4638      	mov	r0, r7
   15d36:	f00e fed0 	bl	24ada <assert_post_action>
   15d3a:	4545      	cmp	r5, r8
   15d3c:	d30d      	bcc.n	15d5a <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   15d3e:	7b23      	ldrb	r3, [r4, #12]
   15d40:	b993      	cbnz	r3, 15d68 <notify_connected+0x64>
		bt_gatt_connected(conn);
   15d42:	4620      	mov	r0, r4
	}
}
   15d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   15d48:	f003 be30 	b.w	199ac <bt_gatt_connected>
		if (cb->connected) {
   15d4c:	682b      	ldr	r3, [r5, #0]
   15d4e:	b113      	cbz	r3, 15d56 <notify_connected+0x52>
			cb->connected(conn, conn->err);
   15d50:	7b21      	ldrb	r1, [r4, #12]
   15d52:	4620      	mov	r0, r4
   15d54:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15d56:	69ad      	ldr	r5, [r5, #24]
   15d58:	e7d9      	b.n	15d0e <notify_connected+0xa>
		if (cb->connected) {
   15d5a:	682b      	ldr	r3, [r5, #0]
   15d5c:	b113      	cbz	r3, 15d64 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   15d5e:	7b21      	ldrb	r1, [r4, #12]
   15d60:	4620      	mov	r0, r4
   15d62:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d64:	351c      	adds	r5, #28
   15d66:	e7d7      	b.n	15d18 <notify_connected+0x14>
}
   15d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d6c:	20002198 	.word	0x20002198
   15d70:	00028590 	.word	0x00028590
   15d74:	00028574 	.word	0x00028574
   15d78:	0002e2dc 	.word	0x0002e2dc
   15d7c:	0002e30c 	.word	0x0002e30c
   15d80:	000290f5 	.word	0x000290f5
   15d84:	0002e327 	.word	0x0002e327

00015d88 <bt_conn_get_pkts>:
}
   15d88:	4800      	ldr	r0, [pc, #0]	; (15d8c <bt_conn_get_pkts+0x4>)
   15d8a:	4770      	bx	lr
   15d8c:	200003b0 	.word	0x200003b0

00015d90 <bt_conn_send_cb>:
{
   15d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d94:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   15d96:	7b43      	ldrb	r3, [r0, #13]
   15d98:	2b07      	cmp	r3, #7
{
   15d9a:	4605      	mov	r5, r0
   15d9c:	460e      	mov	r6, r1
   15d9e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   15da0:	d00c      	beq.n	15dbc <bt_conn_send_cb+0x2c>
   15da2:	4926      	ldr	r1, [pc, #152]	; (15e3c <bt_conn_send_cb+0xac>)
   15da4:	4b26      	ldr	r3, [pc, #152]	; (15e40 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   15da6:	4827      	ldr	r0, [pc, #156]	; (15e44 <bt_conn_send_cb+0xb4>)
   15da8:	1ac9      	subs	r1, r1, r3
   15daa:	08c9      	lsrs	r1, r1, #3
   15dac:	0189      	lsls	r1, r1, #6
   15dae:	f041 0101 	orr.w	r1, r1, #1
   15db2:	f00e fec0 	bl	24b36 <log_0>
			return -ENOTCONN;
   15db6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15dba:	e01d      	b.n	15df8 <bt_conn_send_cb+0x68>
	if (cb) {
   15dbc:	2a00      	cmp	r2, #0
   15dbe:	d03a      	beq.n	15e36 <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
   15dc0:	f00d fd10 	bl	237e4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15dc4:	4b20      	ldr	r3, [pc, #128]	; (15e48 <bt_conn_send_cb+0xb8>)
   15dc6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15dc8:	4820      	ldr	r0, [pc, #128]	; (15e4c <bt_conn_send_cb+0xbc>)
   15dca:	bf07      	ittee	eq
   15dcc:	2200      	moveq	r2, #0
   15dce:	2300      	moveq	r3, #0
   15dd0:	f04f 32ff 	movne.w	r2, #4294967295
   15dd4:	f04f 33ff 	movne.w	r3, #4294967295
   15dd8:	f00b fd90 	bl	218fc <z_impl_k_queue_get>
   15ddc:	4604      	mov	r4, r0
		if (!tx) {
   15dde:	b968      	cbnz	r0, 15dfc <bt_conn_send_cb+0x6c>
   15de0:	4b17      	ldr	r3, [pc, #92]	; (15e40 <bt_conn_send_cb+0xb0>)
   15de2:	4916      	ldr	r1, [pc, #88]	; (15e3c <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   15de4:	481a      	ldr	r0, [pc, #104]	; (15e50 <bt_conn_send_cb+0xc0>)
   15de6:	1ac9      	subs	r1, r1, r3
   15de8:	08c9      	lsrs	r1, r1, #3
   15dea:	0189      	lsls	r1, r1, #6
   15dec:	f041 0101 	orr.w	r1, r1, #1
   15df0:	f00e fea1 	bl	24b36 <log_0>
			return -ENOBUFS;
   15df4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15dfc:	7b6b      	ldrb	r3, [r5, #13]
   15dfe:	2b07      	cmp	r3, #7
   15e00:	d00d      	beq.n	15e1e <bt_conn_send_cb+0x8e>
   15e02:	4b0f      	ldr	r3, [pc, #60]	; (15e40 <bt_conn_send_cb+0xb0>)
   15e04:	490d      	ldr	r1, [pc, #52]	; (15e3c <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   15e06:	4813      	ldr	r0, [pc, #76]	; (15e54 <bt_conn_send_cb+0xc4>)
   15e08:	1ac9      	subs	r1, r1, r3
   15e0a:	08c9      	lsrs	r1, r1, #3
   15e0c:	0189      	lsls	r1, r1, #6
   15e0e:	f041 0102 	orr.w	r1, r1, #2
   15e12:	f00e fe90 	bl	24b36 <log_0>
			tx_free(tx);
   15e16:	4620      	mov	r0, r4
   15e18:	f7ff ff6a 	bl	15cf0 <tx_free>
   15e1c:	e7cb      	b.n	15db6 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   15e1e:	2300      	movs	r3, #0
		tx->user_data = user_data;
   15e20:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   15e24:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15e26:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   15e28:	f105 0038 	add.w	r0, r5, #56	; 0x38
   15e2c:	4631      	mov	r1, r6
   15e2e:	f005 ff47 	bl	1bcc0 <net_buf_put>
	return 0;
   15e32:	2000      	movs	r0, #0
   15e34:	e7e0      	b.n	15df8 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   15e36:	614a      	str	r2, [r1, #20]
   15e38:	e7f6      	b.n	15e28 <bt_conn_send_cb+0x98>
   15e3a:	bf00      	nop
   15e3c:	00028628 	.word	0x00028628
   15e40:	00028618 	.word	0x00028618
   15e44:	0002e346 	.word	0x0002e346
   15e48:	20001e18 	.word	0x20001e18
   15e4c:	20000734 	.word	0x20000734
   15e50:	0002e355 	.word	0x0002e355
   15e54:	0002e373 	.word	0x0002e373

00015e58 <bt_conn_unref>:
{
   15e58:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15e5a:	30c0      	adds	r0, #192	; 0xc0
   15e5c:	f3bf 8f5b 	dmb	ish
   15e60:	e850 3f00 	ldrex	r3, [r0]
   15e64:	1e5a      	subs	r2, r3, #1
   15e66:	e840 2100 	strex	r1, r2, [r0]
   15e6a:	2900      	cmp	r1, #0
   15e6c:	d1f8      	bne.n	15e60 <bt_conn_unref+0x8>
   15e6e:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   15e72:	2b00      	cmp	r3, #0
   15e74:	dc10      	bgt.n	15e98 <bt_conn_unref+0x40>
   15e76:	4909      	ldr	r1, [pc, #36]	; (15e9c <bt_conn_unref+0x44>)
   15e78:	4a09      	ldr	r2, [pc, #36]	; (15ea0 <bt_conn_unref+0x48>)
   15e7a:	480a      	ldr	r0, [pc, #40]	; (15ea4 <bt_conn_unref+0x4c>)
   15e7c:	f240 434e 	movw	r3, #1102	; 0x44e
   15e80:	f00e fc3a 	bl	246f8 <printk>
   15e84:	4808      	ldr	r0, [pc, #32]	; (15ea8 <bt_conn_unref+0x50>)
   15e86:	f00e fc37 	bl	246f8 <printk>
}
   15e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   15e8e:	4804      	ldr	r0, [pc, #16]	; (15ea0 <bt_conn_unref+0x48>)
   15e90:	f240 414e 	movw	r1, #1102	; 0x44e
   15e94:	f00e be21 	b.w	24ada <assert_post_action>
}
   15e98:	bd08      	pop	{r3, pc}
   15e9a:	bf00      	nop
   15e9c:	0002e399 	.word	0x0002e399
   15ea0:	0002e2dc 	.word	0x0002e2dc
   15ea4:	000290f5 	.word	0x000290f5
   15ea8:	0002e3a1 	.word	0x0002e3a1

00015eac <bt_conn_lookup_handle>:
{
   15eac:	4602      	mov	r2, r0
   15eae:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15eb0:	2101      	movs	r1, #1
   15eb2:	4803      	ldr	r0, [pc, #12]	; (15ec0 <bt_conn_lookup_handle+0x14>)
   15eb4:	f00f ff3a 	bl	25d2c <conn_lookup_handle>
}
   15eb8:	2800      	cmp	r0, #0
   15eba:	bf38      	it	cc
   15ebc:	2000      	movcc	r0, #0
   15ebe:	bd08      	pop	{r3, pc}
   15ec0:	20001650 	.word	0x20001650

00015ec4 <bt_conn_set_state>:
{
   15ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   15ec8:	7b46      	ldrb	r6, [r0, #13]
   15eca:	428e      	cmp	r6, r1
{
   15ecc:	4604      	mov	r4, r0
   15ece:	460d      	mov	r5, r1
	if (conn->state == state) {
   15ed0:	d112      	bne.n	15ef8 <bt_conn_set_state+0x34>
   15ed2:	4b76      	ldr	r3, [pc, #472]	; (160ac <bt_conn_set_state+0x1e8>)
   15ed4:	4a76      	ldr	r2, [pc, #472]	; (160b0 <bt_conn_set_state+0x1ec>)
		BT_WARN("no transition %s", state2str(state));
   15ed6:	4877      	ldr	r0, [pc, #476]	; (160b4 <bt_conn_set_state+0x1f0>)
   15ed8:	2e08      	cmp	r6, #8
   15eda:	eba2 0203 	sub.w	r2, r2, r3
   15ede:	bf96      	itet	ls
   15ee0:	4b75      	ldrls	r3, [pc, #468]	; (160b8 <bt_conn_set_state+0x1f4>)
   15ee2:	4976      	ldrhi	r1, [pc, #472]	; (160bc <bt_conn_set_state+0x1f8>)
   15ee4:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   15ee8:	08d2      	lsrs	r2, r2, #3
   15eea:	0192      	lsls	r2, r2, #6
   15eec:	f042 0202 	orr.w	r2, r2, #2
}
   15ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   15ef4:	f00e be2c 	b.w	24b50 <log_1>
	conn->state = state;
   15ef8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   15efa:	b166      	cbz	r6, 15f16 <bt_conn_set_state+0x52>
   15efc:	2e06      	cmp	r6, #6
   15efe:	d010      	beq.n	15f22 <bt_conn_set_state+0x5e>
	switch (conn->state) {
   15f00:	7b63      	ldrb	r3, [r4, #13]
   15f02:	2b08      	cmp	r3, #8
   15f04:	f200 80c7 	bhi.w	16096 <bt_conn_set_state+0x1d2>
   15f08:	e8df f003 	tbb	[pc, r3]
   15f0c:	3838123a 	.word	0x3838123a
   15f10:	2a883838 	.word	0x2a883838
   15f14:	38          	.byte	0x38
   15f15:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   15f16:	7883      	ldrb	r3, [r0, #2]
   15f18:	2b08      	cmp	r3, #8
   15f1a:	d0f1      	beq.n	15f00 <bt_conn_set_state+0x3c>
			bt_conn_ref(conn);
   15f1c:	f00f feeb 	bl	25cf6 <bt_conn_ref>
   15f20:	e7ee      	b.n	15f00 <bt_conn_set_state+0x3c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15f22:	7883      	ldrb	r3, [r0, #2]
   15f24:	2b01      	cmp	r3, #1
   15f26:	d1eb      	bne.n	15f00 <bt_conn_set_state+0x3c>
			k_work_cancel_delayable(&conn->deferred_work);
   15f28:	3060      	adds	r0, #96	; 0x60
   15f2a:	f00c fa6d 	bl	22408 <k_work_cancel_delayable>
   15f2e:	e7e7      	b.n	15f00 <bt_conn_set_state+0x3c>
	z_impl_k_sem_give(sem);
   15f30:	4d63      	ldr	r5, [pc, #396]	; (160c0 <bt_conn_set_state+0x1fc>)
		tx->pending_no_cb = 0U;
   15f32:	2600      	movs	r6, #0
	__asm__ volatile(
   15f34:	f04f 0340 	mov.w	r3, #64	; 0x40
   15f38:	f3ef 8211 	mrs	r2, BASEPRI
   15f3c:	f383 8812 	msr	BASEPRI_MAX, r3
   15f40:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15f44:	69e3      	ldr	r3, [r4, #28]
   15f46:	2b00      	cmp	r3, #0
   15f48:	f000 8085 	beq.w	16056 <bt_conn_set_state+0x192>
			conn->pending_no_cb--;
   15f4c:	3b01      	subs	r3, #1
   15f4e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15f50:	f382 8811 	msr	BASEPRI, r2
   15f54:	f3bf 8f6f 	isb	sy
   15f58:	4628      	mov	r0, r5
   15f5a:	f00b fd3b 	bl	219d4 <z_impl_k_sem_give>
}
   15f5e:	e7e9      	b.n	15f34 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15f60:	78a3      	ldrb	r3, [r4, #2]
   15f62:	2b04      	cmp	r3, #4
   15f64:	d00a      	beq.n	15f7c <bt_conn_set_state+0xb8>
	z_impl_k_queue_init(queue);
   15f66:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15f6a:	f012 f883 	bl	28074 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   15f6e:	4855      	ldr	r0, [pc, #340]	; (160c4 <bt_conn_set_state+0x200>)
   15f70:	2100      	movs	r1, #0
   15f72:	f00e fa35 	bl	243e0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15f76:	2300      	movs	r3, #0
	list->tail = NULL;
   15f78:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   15f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   15f80:	78a3      	ldrb	r3, [r4, #2]
   15f82:	2b04      	cmp	r3, #4
   15f84:	d104      	bne.n	15f90 <bt_conn_set_state+0xcc>
			bt_conn_unref(conn);
   15f86:	4620      	mov	r0, r4
}
   15f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   15f8c:	f7ff bf64 	b.w	15e58 <bt_conn_unref>
		switch (old_state) {
   15f90:	2e08      	cmp	r6, #8
   15f92:	d8f3      	bhi.n	15f7c <bt_conn_set_state+0xb8>
   15f94:	a301      	add	r3, pc, #4	; (adr r3, 15f9c <bt_conn_set_state+0xd8>)
   15f96:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   15f9a:	bf00      	nop
   15f9c:	00016009 	.word	0x00016009
   15fa0:	00015fc1 	.word	0x00015fc1
   15fa4:	00015ffb 	.word	0x00015ffb
   15fa8:	00015f87 	.word	0x00015f87
   15fac:	00015f87 	.word	0x00015f87
   15fb0:	00015ffb 	.word	0x00015ffb
   15fb4:	00015ffb 	.word	0x00015ffb
   15fb8:	00016009 	.word	0x00016009
   15fbc:	00016009 	.word	0x00016009
			tx_notify(conn);
   15fc0:	4620      	mov	r0, r4
   15fc2:	f00f fe75 	bl	25cb0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15fc6:	78a3      	ldrb	r3, [r4, #2]
   15fc8:	2b01      	cmp	r3, #1
   15fca:	d103      	bne.n	15fd4 <bt_conn_set_state+0x110>
				k_work_cancel_delayable(&conn->deferred_work);
   15fcc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   15fd0:	f00c fa1a 	bl	22408 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15fd4:	f3bf 8f5b 	dmb	ish
   15fd8:	3404      	adds	r4, #4
   15fda:	e854 3f00 	ldrex	r3, [r4]
   15fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15fe2:	e844 3200 	strex	r2, r3, [r4]
   15fe6:	2a00      	cmp	r2, #0
   15fe8:	d1f7      	bne.n	15fda <bt_conn_set_state+0x116>
   15fea:	f3bf 8f5b 	dmb	ish
   15fee:	4835      	ldr	r0, [pc, #212]	; (160c4 <bt_conn_set_state+0x200>)
}
   15ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15ff4:	2100      	movs	r1, #0
   15ff6:	f00e b9f3 	b.w	243e0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   15ffa:	7b23      	ldrb	r3, [r4, #12]
   15ffc:	2b00      	cmp	r3, #0
   15ffe:	d0c2      	beq.n	15f86 <bt_conn_set_state+0xc2>
				notify_connected(conn);
   16000:	4620      	mov	r0, r4
   16002:	f7ff fe7f 	bl	15d04 <notify_connected>
   16006:	e7be      	b.n	15f86 <bt_conn_set_state+0xc2>
   16008:	4a29      	ldr	r2, [pc, #164]	; (160b0 <bt_conn_set_state+0x1ec>)
   1600a:	4b28      	ldr	r3, [pc, #160]	; (160ac <bt_conn_set_state+0x1e8>)
			BT_WARN("Invalid (%u) old state", state);
   1600c:	482e      	ldr	r0, [pc, #184]	; (160c8 <bt_conn_set_state+0x204>)
   1600e:	1ad2      	subs	r2, r2, r3
   16010:	08d2      	lsrs	r2, r2, #3
   16012:	0192      	lsls	r2, r2, #6
   16014:	f042 0202 	orr.w	r2, r2, #2
   16018:	4629      	mov	r1, r5
   1601a:	e769      	b.n	15ef0 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1601c:	78a3      	ldrb	r3, [r4, #2]
   1601e:	2b01      	cmp	r3, #1
   16020:	d1ac      	bne.n	15f7c <bt_conn_set_state+0xb8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   16022:	4b2a      	ldr	r3, [pc, #168]	; (160cc <bt_conn_set_state+0x208>)
   16024:	8a9b      	ldrh	r3, [r3, #20]
   16026:	210a      	movs	r1, #10
   16028:	4359      	muls	r1, r3
		} else {
			return (t * to_hz + off) / from_hz;
   1602a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1602e:	f240 36e7 	movw	r6, #999	; 0x3e7
   16032:	2700      	movs	r7, #0
   16034:	fbc0 6701 	smlal	r6, r7, r0, r1
   16038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1603c:	2300      	movs	r3, #0
   1603e:	4630      	mov	r0, r6
   16040:	4639      	mov	r1, r7
   16042:	f7ea f84d 	bl	e0 <__aeabi_uldivmod>
   16046:	4602      	mov	r2, r0
   16048:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1604a:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1604e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   16052:	f00c b957 	b.w	22304 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   16056:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16058:	b128      	cbz	r0, 16066 <bt_conn_set_state+0x1a2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1605a:	69a1      	ldr	r1, [r4, #24]
   1605c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1605e:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16060:	4288      	cmp	r0, r1
	list->tail = node;
   16062:	bf08      	it	eq
   16064:	61a3      	streq	r3, [r4, #24]
   16066:	f382 8811 	msr	BASEPRI, r2
   1606a:	f3bf 8f6f 	isb	sy
		if (!node) {
   1606e:	2800      	cmp	r0, #0
   16070:	d084      	beq.n	15f7c <bt_conn_set_state+0xb8>
	__asm__ volatile(
   16072:	f04f 0240 	mov.w	r2, #64	; 0x40
   16076:	f3ef 8311 	mrs	r3, BASEPRI
   1607a:	f382 8812 	msr	BASEPRI_MAX, r2
   1607e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   16082:	68c2      	ldr	r2, [r0, #12]
   16084:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   16086:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   16088:	f383 8811 	msr	BASEPRI, r3
   1608c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   16090:	f7ff fe2e 	bl	15cf0 <tx_free>
   16094:	e760      	b.n	15f58 <bt_conn_set_state+0x94>
   16096:	4a06      	ldr	r2, [pc, #24]	; (160b0 <bt_conn_set_state+0x1ec>)
   16098:	4b04      	ldr	r3, [pc, #16]	; (160ac <bt_conn_set_state+0x1e8>)
		BT_WARN("no valid (%u) state was set", state);
   1609a:	480d      	ldr	r0, [pc, #52]	; (160d0 <bt_conn_set_state+0x20c>)
   1609c:	1ad2      	subs	r2, r2, r3
   1609e:	08d2      	lsrs	r2, r2, #3
   160a0:	0192      	lsls	r2, r2, #6
   160a2:	f042 0202 	orr.w	r2, r2, #2
   160a6:	4629      	mov	r1, r5
   160a8:	e722      	b.n	15ef0 <bt_conn_set_state+0x2c>
   160aa:	bf00      	nop
   160ac:	00028618 	.word	0x00028618
   160b0:	00028628 	.word	0x00028628
   160b4:	0002e3c9 	.word	0x0002e3c9
   160b8:	00028970 	.word	0x00028970
   160bc:	0002e3bf 	.word	0x0002e3bf
   160c0:	200003b0 	.word	0x200003b0
   160c4:	20000450 	.word	0x20000450
   160c8:	0002e3da 	.word	0x0002e3da
   160cc:	200002b0 	.word	0x200002b0
   160d0:	0002e3f1 	.word	0x0002e3f1

000160d4 <bt_conn_index>:
		index = conn - acl_conns;
   160d4:	4a0c      	ldr	r2, [pc, #48]	; (16108 <bt_conn_index+0x34>)
{
   160d6:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   160d8:	1a84      	subs	r4, r0, r2
   160da:	10e3      	asrs	r3, r4, #3
   160dc:	4c0b      	ldr	r4, [pc, #44]	; (1610c <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   160de:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   160e0:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   160e4:	d00e      	beq.n	16104 <bt_conn_index+0x30>
   160e6:	490a      	ldr	r1, [pc, #40]	; (16110 <bt_conn_index+0x3c>)
   160e8:	4a0a      	ldr	r2, [pc, #40]	; (16114 <bt_conn_index+0x40>)
   160ea:	480b      	ldr	r0, [pc, #44]	; (16118 <bt_conn_index+0x44>)
   160ec:	f240 436c 	movw	r3, #1132	; 0x46c
   160f0:	f00e fb02 	bl	246f8 <printk>
   160f4:	4809      	ldr	r0, [pc, #36]	; (1611c <bt_conn_index+0x48>)
   160f6:	f00e faff 	bl	246f8 <printk>
   160fa:	4806      	ldr	r0, [pc, #24]	; (16114 <bt_conn_index+0x40>)
   160fc:	f240 416c 	movw	r1, #1132	; 0x46c
   16100:	f00e fceb 	bl	24ada <assert_post_action>
}
   16104:	b2e0      	uxtb	r0, r4
   16106:	bd10      	pop	{r4, pc}
   16108:	20001650 	.word	0x20001650
   1610c:	c28f5c29 	.word	0xc28f5c29
   16110:	0002e40d 	.word	0x0002e40d
   16114:	0002e2dc 	.word	0x0002e2dc
   16118:	000290f5 	.word	0x000290f5
   1611c:	0002e4d4 	.word	0x0002e4d4

00016120 <bt_conn_create_pdu_timeout>:
{
   16120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16122:	4604      	mov	r4, r0
   16124:	460d      	mov	r5, r1
   16126:	4617      	mov	r7, r2
   16128:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1612a:	f011 ff83 	bl	28034 <k_is_in_isr>
   1612e:	b158      	cbz	r0, 16148 <bt_conn_create_pdu_timeout+0x28>
   16130:	4913      	ldr	r1, [pc, #76]	; (16180 <bt_conn_create_pdu_timeout+0x60>)
   16132:	4814      	ldr	r0, [pc, #80]	; (16184 <bt_conn_create_pdu_timeout+0x64>)
   16134:	4a14      	ldr	r2, [pc, #80]	; (16188 <bt_conn_create_pdu_timeout+0x68>)
   16136:	f44f 6391 	mov.w	r3, #1160	; 0x488
   1613a:	f00e fadd 	bl	246f8 <printk>
   1613e:	4812      	ldr	r0, [pc, #72]	; (16188 <bt_conn_create_pdu_timeout+0x68>)
   16140:	f44f 6191 	mov.w	r1, #1160	; 0x488
   16144:	f00e fcc9 	bl	24ada <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   16148:	4810      	ldr	r0, [pc, #64]	; (1618c <bt_conn_create_pdu_timeout+0x6c>)
   1614a:	463a      	mov	r2, r7
   1614c:	2c00      	cmp	r4, #0
   1614e:	bf18      	it	ne
   16150:	4620      	movne	r0, r4
   16152:	4633      	mov	r3, r6
   16154:	f011 fa7e 	bl	27654 <net_buf_alloc_fixed>
	if (!buf) {
   16158:	4604      	mov	r4, r0
   1615a:	b958      	cbnz	r0, 16174 <bt_conn_create_pdu_timeout+0x54>
   1615c:	490c      	ldr	r1, [pc, #48]	; (16190 <bt_conn_create_pdu_timeout+0x70>)
   1615e:	4b0d      	ldr	r3, [pc, #52]	; (16194 <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   16160:	480d      	ldr	r0, [pc, #52]	; (16198 <bt_conn_create_pdu_timeout+0x78>)
   16162:	1ac9      	subs	r1, r1, r3
   16164:	08c9      	lsrs	r1, r1, #3
   16166:	0189      	lsls	r1, r1, #6
   16168:	f041 0102 	orr.w	r1, r1, #2
   1616c:	f00e fce3 	bl	24b36 <log_0>
}
   16170:	4620      	mov	r0, r4
   16172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   16174:	1d29      	adds	r1, r5, #4
   16176:	3008      	adds	r0, #8
   16178:	f005 fd78 	bl	1bc6c <net_buf_simple_reserve>
	return buf;
   1617c:	e7f8      	b.n	16170 <bt_conn_create_pdu_timeout+0x50>
   1617e:	bf00      	nop
   16180:	0002e4ee 	.word	0x0002e4ee
   16184:	000290f5 	.word	0x000290f5
   16188:	0002e2dc 	.word	0x0002e2dc
   1618c:	20000750 	.word	0x20000750
   16190:	00028628 	.word	0x00028628
   16194:	00028618 	.word	0x00028618
   16198:	0002e4fd 	.word	0x0002e4fd

0001619c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   161a0:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   161a2:	4608      	mov	r0, r1
{
   161a4:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   161a6:	f00f fce1 	bl	25b6c <bt_le_conn_params_valid>
   161aa:	4605      	mov	r5, r0
   161ac:	b918      	cbnz	r0, 161b6 <le_param_req+0x1a>
		return false;
   161ae:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   161b0:	4628      	mov	r0, r5
   161b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   161b6:	4b1d      	ldr	r3, [pc, #116]	; (1622c <le_param_req+0x90>)
   161b8:	681e      	ldr	r6, [r3, #0]
   161ba:	b9e6      	cbnz	r6, 161f6 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   161bc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 16240 <le_param_req+0xa4>
   161c0:	4e1b      	ldr	r6, [pc, #108]	; (16230 <le_param_req+0x94>)
   161c2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 16244 <le_param_req+0xa8>
   161c6:	46c2      	mov	sl, r8
   161c8:	4546      	cmp	r6, r8
   161ca:	d90e      	bls.n	161ea <le_param_req+0x4e>
   161cc:	4919      	ldr	r1, [pc, #100]	; (16234 <le_param_req+0x98>)
   161ce:	481a      	ldr	r0, [pc, #104]	; (16238 <le_param_req+0x9c>)
   161d0:	f240 53a7 	movw	r3, #1447	; 0x5a7
   161d4:	464a      	mov	r2, r9
   161d6:	f00e fa8f 	bl	246f8 <printk>
   161da:	4818      	ldr	r0, [pc, #96]	; (1623c <le_param_req+0xa0>)
   161dc:	f00e fa8c 	bl	246f8 <printk>
   161e0:	f240 51a7 	movw	r1, #1447	; 0x5a7
   161e4:	4648      	mov	r0, r9
   161e6:	f00e fc78 	bl	24ada <assert_post_action>
   161ea:	4556      	cmp	r6, sl
   161ec:	d2e0      	bcs.n	161b0 <le_param_req+0x14>
		if (!cb->le_param_req) {
   161ee:	68b3      	ldr	r3, [r6, #8]
   161f0:	b983      	cbnz	r3, 16214 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   161f2:	361c      	adds	r6, #28
   161f4:	e7e8      	b.n	161c8 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   161f6:	68b3      	ldr	r3, [r6, #8]
   161f8:	b90b      	cbnz	r3, 161fe <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   161fa:	69b6      	ldr	r6, [r6, #24]
   161fc:	e7dd      	b.n	161ba <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   161fe:	4621      	mov	r1, r4
   16200:	4638      	mov	r0, r7
   16202:	4798      	blx	r3
   16204:	2800      	cmp	r0, #0
   16206:	d0d2      	beq.n	161ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   16208:	4620      	mov	r0, r4
   1620a:	f00f fcaf 	bl	25b6c <bt_le_conn_params_valid>
   1620e:	2800      	cmp	r0, #0
   16210:	d1f3      	bne.n	161fa <le_param_req+0x5e>
   16212:	e7cc      	b.n	161ae <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   16214:	4621      	mov	r1, r4
   16216:	4638      	mov	r0, r7
   16218:	4798      	blx	r3
   1621a:	2800      	cmp	r0, #0
   1621c:	d0c7      	beq.n	161ae <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1621e:	4620      	mov	r0, r4
   16220:	f00f fca4 	bl	25b6c <bt_le_conn_params_valid>
   16224:	2800      	cmp	r0, #0
   16226:	d1e4      	bne.n	161f2 <le_param_req+0x56>
   16228:	e7c1      	b.n	161ae <le_param_req+0x12>
   1622a:	bf00      	nop
   1622c:	20002198 	.word	0x20002198
   16230:	00028574 	.word	0x00028574
   16234:	0002e30c 	.word	0x0002e30c
   16238:	000290f5 	.word	0x000290f5
   1623c:	0002e327 	.word	0x0002e327
   16240:	00028590 	.word	0x00028590
   16244:	0002e2dc 	.word	0x0002e2dc

00016248 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   16248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1624c:	78c3      	ldrb	r3, [r0, #3]
{
   1624e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   16250:	bb03      	cbnz	r3, 16294 <bt_conn_identity_resolved+0x4c>
		rpa = &conn->le.resp_addr;
   16252:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   16256:	4b19      	ldr	r3, [pc, #100]	; (162bc <bt_conn_identity_resolved+0x74>)
   16258:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1625a:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   1625e:	b9e5      	cbnz	r5, 1629a <bt_conn_identity_resolved+0x52>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16260:	4f17      	ldr	r7, [pc, #92]	; (162c0 <bt_conn_identity_resolved+0x78>)
   16262:	4d18      	ldr	r5, [pc, #96]	; (162c4 <bt_conn_identity_resolved+0x7c>)
   16264:	f8df 806c 	ldr.w	r8, [pc, #108]	; 162d4 <bt_conn_identity_resolved+0x8c>
   16268:	46b9      	mov	r9, r7
   1626a:	42bd      	cmp	r5, r7
   1626c:	d90e      	bls.n	1628c <bt_conn_identity_resolved+0x44>
   1626e:	4916      	ldr	r1, [pc, #88]	; (162c8 <bt_conn_identity_resolved+0x80>)
   16270:	4816      	ldr	r0, [pc, #88]	; (162cc <bt_conn_identity_resolved+0x84>)
   16272:	f240 7362 	movw	r3, #1890	; 0x762
   16276:	4642      	mov	r2, r8
   16278:	f00e fa3e 	bl	246f8 <printk>
   1627c:	4814      	ldr	r0, [pc, #80]	; (162d0 <bt_conn_identity_resolved+0x88>)
   1627e:	f00e fa3b 	bl	246f8 <printk>
   16282:	f240 7162 	movw	r1, #1890	; 0x762
   16286:	4640      	mov	r0, r8
   16288:	f00e fc27 	bl	24ada <assert_post_action>
   1628c:	454d      	cmp	r5, r9
   1628e:	d30c      	bcc.n	162aa <bt_conn_identity_resolved+0x62>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   16290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rpa = &conn->le.init_addr;
   16294:	f100 0697 	add.w	r6, r0, #151	; 0x97
   16298:	e7dd      	b.n	16256 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1629a:	692b      	ldr	r3, [r5, #16]
   1629c:	b11b      	cbz	r3, 162a6 <bt_conn_identity_resolved+0x5e>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1629e:	463a      	mov	r2, r7
   162a0:	4631      	mov	r1, r6
   162a2:	4620      	mov	r0, r4
   162a4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   162a6:	69ad      	ldr	r5, [r5, #24]
   162a8:	e7d9      	b.n	1625e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   162aa:	692b      	ldr	r3, [r5, #16]
   162ac:	b123      	cbz	r3, 162b8 <bt_conn_identity_resolved+0x70>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   162ae:	f104 0290 	add.w	r2, r4, #144	; 0x90
   162b2:	4631      	mov	r1, r6
   162b4:	4620      	mov	r0, r4
   162b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   162b8:	351c      	adds	r5, #28
   162ba:	e7d6      	b.n	1626a <bt_conn_identity_resolved+0x22>
   162bc:	20002198 	.word	0x20002198
   162c0:	00028590 	.word	0x00028590
   162c4:	00028574 	.word	0x00028574
   162c8:	0002e30c 	.word	0x0002e30c
   162cc:	000290f5 	.word	0x000290f5
   162d0:	0002e327 	.word	0x0002e327
   162d4:	0002e2dc 	.word	0x0002e2dc

000162d8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   162d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn->required_sec_level = conn->sec_level;
   162dc:	7a43      	ldrb	r3, [r0, #9]
   162de:	7283      	strb	r3, [r0, #10]
{
   162e0:	4604      	mov	r4, r0
   162e2:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   162e4:	f00f fe02 	bl	25eec <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   162e8:	4b16      	ldr	r3, [pc, #88]	; (16344 <bt_conn_security_changed+0x6c>)
   162ea:	681d      	ldr	r5, [r3, #0]
   162ec:	b9cd      	cbnz	r5, 16322 <bt_conn_security_changed+0x4a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   162ee:	4f16      	ldr	r7, [pc, #88]	; (16348 <bt_conn_security_changed+0x70>)
   162f0:	4d16      	ldr	r5, [pc, #88]	; (1634c <bt_conn_security_changed+0x74>)
   162f2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1635c <bt_conn_security_changed+0x84>
   162f6:	46b9      	mov	r9, r7
   162f8:	42bd      	cmp	r5, r7
   162fa:	d90e      	bls.n	1631a <bt_conn_security_changed+0x42>
   162fc:	4914      	ldr	r1, [pc, #80]	; (16350 <bt_conn_security_changed+0x78>)
   162fe:	4815      	ldr	r0, [pc, #84]	; (16354 <bt_conn_security_changed+0x7c>)
   16300:	f240 73cb 	movw	r3, #1995	; 0x7cb
   16304:	4642      	mov	r2, r8
   16306:	f00e f9f7 	bl	246f8 <printk>
   1630a:	4813      	ldr	r0, [pc, #76]	; (16358 <bt_conn_security_changed+0x80>)
   1630c:	f00e f9f4 	bl	246f8 <printk>
   16310:	f240 71cb 	movw	r1, #1995	; 0x7cb
   16314:	4640      	mov	r0, r8
   16316:	f00e fbe0 	bl	24ada <assert_post_action>
   1631a:	454d      	cmp	r5, r9
   1631c:	d309      	bcc.n	16332 <bt_conn_security_changed+0x5a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->security_changed) {
   16322:	696b      	ldr	r3, [r5, #20]
   16324:	b11b      	cbz	r3, 1632e <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   16326:	7a61      	ldrb	r1, [r4, #9]
   16328:	4632      	mov	r2, r6
   1632a:	4620      	mov	r0, r4
   1632c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1632e:	69ad      	ldr	r5, [r5, #24]
   16330:	e7dc      	b.n	162ec <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   16332:	696b      	ldr	r3, [r5, #20]
   16334:	b11b      	cbz	r3, 1633e <bt_conn_security_changed+0x66>
			cb->security_changed(conn, conn->sec_level, err);
   16336:	7a61      	ldrb	r1, [r4, #9]
   16338:	4632      	mov	r2, r6
   1633a:	4620      	mov	r0, r4
   1633c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1633e:	351c      	adds	r5, #28
   16340:	e7da      	b.n	162f8 <bt_conn_security_changed+0x20>
   16342:	bf00      	nop
   16344:	20002198 	.word	0x20002198
   16348:	00028590 	.word	0x00028590
   1634c:	00028574 	.word	0x00028574
   16350:	0002e30c 	.word	0x0002e30c
   16354:	000290f5 	.word	0x000290f5
   16358:	0002e327 	.word	0x0002e327
   1635c:	0002e2dc 	.word	0x0002e2dc

00016360 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16360:	b570      	push	{r4, r5, r6, lr}
   16362:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16364:	480c      	ldr	r0, [pc, #48]	; (16398 <bt_conn_lookup_addr_le+0x38>)
{
   16366:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16368:	f00f fcc5 	bl	25cf6 <bt_conn_ref>

		if (!conn) {
   1636c:	4604      	mov	r4, r0
   1636e:	b128      	cbz	r0, 1637c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16370:	7883      	ldrb	r3, [r0, #2]
   16372:	2b01      	cmp	r3, #1
   16374:	d004      	beq.n	16380 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   16376:	f7ff fd6f 	bl	15e58 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1637a:	2400      	movs	r4, #0
}
   1637c:	4620      	mov	r0, r4
   1637e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16380:	4629      	mov	r1, r5
   16382:	4632      	mov	r2, r6
   16384:	f00f fd64 	bl	25e50 <bt_conn_is_peer_addr_le>
   16388:	4605      	mov	r5, r0
   1638a:	2800      	cmp	r0, #0
   1638c:	d1f6      	bne.n	1637c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1638e:	4620      	mov	r0, r4
   16390:	f7ff fd62 	bl	15e58 <bt_conn_unref>
	return NULL;
   16394:	462c      	mov	r4, r5
			continue;
   16396:	e7f1      	b.n	1637c <bt_conn_lookup_addr_le+0x1c>
   16398:	20001650 	.word	0x20001650

0001639c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1639e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   163a0:	480e      	ldr	r0, [pc, #56]	; (163dc <bt_conn_lookup_state_le+0x40>)
{
   163a2:	460e      	mov	r6, r1
   163a4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   163a6:	f00f fca6 	bl	25cf6 <bt_conn_ref>

		if (!conn) {
   163aa:	4604      	mov	r4, r0
   163ac:	b1a0      	cbz	r0, 163d8 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   163ae:	7883      	ldrb	r3, [r0, #2]
   163b0:	2b01      	cmp	r3, #1
   163b2:	d003      	beq.n	163bc <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   163b4:	f7ff fd50 	bl	15e58 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   163b8:	2400      	movs	r4, #0
			continue;
   163ba:	e00d      	b.n	163d8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   163bc:	b136      	cbz	r6, 163cc <bt_conn_lookup_state_le+0x30>
   163be:	4632      	mov	r2, r6
   163c0:	4629      	mov	r1, r5
   163c2:	f00f fd45 	bl	25e50 <bt_conn_is_peer_addr_le>
   163c6:	b908      	cbnz	r0, 163cc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   163c8:	4620      	mov	r0, r4
   163ca:	e7f3      	b.n	163b4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   163cc:	7b63      	ldrb	r3, [r4, #13]
   163ce:	42bb      	cmp	r3, r7
   163d0:	d1fa      	bne.n	163c8 <bt_conn_lookup_state_le+0x2c>
   163d2:	7a23      	ldrb	r3, [r4, #8]
   163d4:	42ab      	cmp	r3, r5
   163d6:	d1f7      	bne.n	163c8 <bt_conn_lookup_state_le+0x2c>
}
   163d8:	4620      	mov	r0, r4
   163da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163dc:	20001650 	.word	0x20001650

000163e0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   163e0:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   163e2:	4914      	ldr	r1, [pc, #80]	; (16434 <bt_conn_init+0x54>)
   163e4:	4814      	ldr	r0, [pc, #80]	; (16438 <bt_conn_init+0x58>)
   163e6:	f011 fe52 	bl	2808e <k_queue_append>
   163ea:	4914      	ldr	r1, [pc, #80]	; (1643c <bt_conn_init+0x5c>)
   163ec:	4812      	ldr	r0, [pc, #72]	; (16438 <bt_conn_init+0x58>)
   163ee:	f011 fe4e 	bl	2808e <k_queue_append>
   163f2:	4913      	ldr	r1, [pc, #76]	; (16440 <bt_conn_init+0x60>)
   163f4:	4810      	ldr	r0, [pc, #64]	; (16438 <bt_conn_init+0x58>)
   163f6:	f011 fe4a 	bl	2808e <k_queue_append>
	}

	bt_att_init();
   163fa:	f010 f912 	bl	26622 <bt_att_init>

	err = bt_smp_init();
   163fe:	f005 f90d 	bl	1b61c <bt_smp_init>
	if (err) {
   16402:	4605      	mov	r5, r0
   16404:	b998      	cbnz	r0, 1642e <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   16406:	f00f fde5 	bl	25fd4 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1640a:	480e      	ldr	r0, [pc, #56]	; (16444 <bt_conn_init+0x64>)
   1640c:	f00f fc73 	bl	25cf6 <bt_conn_ref>

			if (!conn) {
   16410:	4604      	mov	r4, r0
   16412:	b160      	cbz	r0, 1642e <bt_conn_init+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16414:	3004      	adds	r0, #4
   16416:	f00f fc45 	bl	25ca4 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1641a:	07c3      	lsls	r3, r0, #31
   1641c:	d504      	bpl.n	16428 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1641e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   16420:	2102      	movs	r1, #2
   16422:	4620      	mov	r0, r4
   16424:	f7ff fd4e 	bl	15ec4 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   16428:	4620      	mov	r0, r4
   1642a:	f7ff fd15 	bl	15e58 <bt_conn_unref>
		}
	}

	return 0;
}
   1642e:	4628      	mov	r0, r5
   16430:	bd38      	pop	{r3, r4, r5, pc}
   16432:	bf00      	nop
   16434:	2000219c 	.word	0x2000219c
   16438:	20000734 	.word	0x20000734
   1643c:	200021ac 	.word	0x200021ac
   16440:	200021bc 	.word	0x200021bc
   16444:	20001650 	.word	0x20001650

00016448 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   16448:	4a0b      	ldr	r2, [pc, #44]	; (16478 <l2cap_accept+0x30>)
{
   1644a:	b508      	push	{r3, lr}
   1644c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1644e:	6810      	ldr	r0, [r2, #0]
   16450:	b918      	cbnz	r0, 1645a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   16452:	4b0a      	ldr	r3, [pc, #40]	; (1647c <l2cap_accept+0x34>)
   16454:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   16456:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   16458:	bd08      	pop	{r3, pc}
   1645a:	4909      	ldr	r1, [pc, #36]	; (16480 <l2cap_accept+0x38>)
   1645c:	4a09      	ldr	r2, [pc, #36]	; (16484 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1645e:	480a      	ldr	r0, [pc, #40]	; (16488 <l2cap_accept+0x40>)
   16460:	1a52      	subs	r2, r2, r1
   16462:	08d2      	lsrs	r2, r2, #3
   16464:	0192      	lsls	r2, r2, #6
   16466:	f042 0201 	orr.w	r2, r2, #1
   1646a:	4619      	mov	r1, r3
   1646c:	f00e fb70 	bl	24b50 <log_1>
	return -ENOMEM;
   16470:	f06f 000b 	mvn.w	r0, #11
   16474:	e7f0      	b.n	16458 <l2cap_accept+0x10>
   16476:	bf00      	nop
   16478:	20001718 	.word	0x20001718
   1647c:	000289b4 	.word	0x000289b4
   16480:	00028618 	.word	0x00028618
   16484:	00028668 	.word	0x00028668
   16488:	0002e583 	.word	0x0002e583

0001648c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1648e:	4605      	mov	r5, r0
   16490:	460f      	mov	r7, r1
   16492:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   16494:	2300      	movs	r3, #0
   16496:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1649a:	2104      	movs	r1, #4
   1649c:	2000      	movs	r0, #0
   1649e:	f7ff fe3f 	bl	16120 <bt_conn_create_pdu_timeout>
	if (!buf) {
   164a2:	4604      	mov	r4, r0
   164a4:	b960      	cbnz	r0, 164c0 <l2cap_create_le_sig_pdu.isra.0+0x34>
   164a6:	4a0a      	ldr	r2, [pc, #40]	; (164d0 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   164a8:	4b0a      	ldr	r3, [pc, #40]	; (164d4 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   164aa:	480b      	ldr	r0, [pc, #44]	; (164d8 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   164ac:	1ad2      	subs	r2, r2, r3
   164ae:	08d2      	lsrs	r2, r2, #3
   164b0:	0192      	lsls	r2, r2, #6
   164b2:	f042 0201 	orr.w	r2, r2, #1
   164b6:	4629      	mov	r1, r5
   164b8:	f00e fb4a 	bl	24b50 <log_1>
}
   164bc:	4620      	mov	r0, r4
   164be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   164c0:	2104      	movs	r1, #4
   164c2:	3008      	adds	r0, #8
   164c4:	f005 fd60 	bl	1bf88 <net_buf_simple_add>
	hdr->code = code;
   164c8:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   164ca:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   164cc:	8046      	strh	r6, [r0, #2]
	return buf;
   164ce:	e7f5      	b.n	164bc <l2cap_create_le_sig_pdu.isra.0+0x30>
   164d0:	00028668 	.word	0x00028668
   164d4:	00028618 	.word	0x00028618
   164d8:	0002e5aa 	.word	0x0002e5aa

000164dc <l2cap_recv>:
{
   164dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   164de:	898b      	ldrh	r3, [r1, #12]
   164e0:	2b03      	cmp	r3, #3
{
   164e2:	b085      	sub	sp, #20
   164e4:	4606      	mov	r6, r0
   164e6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   164e8:	d80a      	bhi.n	16500 <l2cap_recv+0x24>
   164ea:	494f      	ldr	r1, [pc, #316]	; (16628 <l2cap_recv+0x14c>)
   164ec:	4b4f      	ldr	r3, [pc, #316]	; (1662c <l2cap_recv+0x150>)
		BT_ERR("Too small L2CAP signaling PDU");
   164ee:	4850      	ldr	r0, [pc, #320]	; (16630 <l2cap_recv+0x154>)
   164f0:	1ac9      	subs	r1, r1, r3
   164f2:	08c9      	lsrs	r1, r1, #3
   164f4:	0189      	lsls	r1, r1, #6
   164f6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   164fa:	f00e fb1c 	bl	24b36 <log_0>
		return 0;
   164fe:	e013      	b.n	16528 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   16500:	2104      	movs	r1, #4
   16502:	f105 0008 	add.w	r0, r5, #8
   16506:	f005 fd1d 	bl	1bf44 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1650a:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1650c:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1650e:	428a      	cmp	r2, r1
   16510:	4604      	mov	r4, r0
   16512:	d00c      	beq.n	1652e <l2cap_recv+0x52>
   16514:	4845      	ldr	r0, [pc, #276]	; (1662c <l2cap_recv+0x150>)
   16516:	4b44      	ldr	r3, [pc, #272]	; (16628 <l2cap_recv+0x14c>)
   16518:	1a1b      	subs	r3, r3, r0
   1651a:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1651c:	019b      	lsls	r3, r3, #6
   1651e:	4845      	ldr	r0, [pc, #276]	; (16634 <l2cap_recv+0x158>)
   16520:	f043 0301 	orr.w	r3, r3, #1
   16524:	f00e fb28 	bl	24b78 <log_2>
}
   16528:	2000      	movs	r0, #0
   1652a:	b005      	add	sp, #20
   1652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1652e:	7841      	ldrb	r1, [r0, #1]
   16530:	b941      	cbnz	r1, 16544 <l2cap_recv+0x68>
   16532:	493d      	ldr	r1, [pc, #244]	; (16628 <l2cap_recv+0x14c>)
   16534:	4b3d      	ldr	r3, [pc, #244]	; (1662c <l2cap_recv+0x150>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   16536:	4840      	ldr	r0, [pc, #256]	; (16638 <l2cap_recv+0x15c>)
   16538:	1ac9      	subs	r1, r1, r3
   1653a:	08c9      	lsrs	r1, r1, #3
   1653c:	0189      	lsls	r1, r1, #6
   1653e:	f041 0101 	orr.w	r1, r1, #1
   16542:	e7da      	b.n	164fa <l2cap_recv+0x1e>
	switch (hdr->code) {
   16544:	7803      	ldrb	r3, [r0, #0]
   16546:	2b12      	cmp	r3, #18
   16548:	d01c      	beq.n	16584 <l2cap_recv+0xa8>
   1654a:	2b13      	cmp	r3, #19
   1654c:	d00f      	beq.n	1656e <l2cap_recv+0x92>
   1654e:	2b01      	cmp	r3, #1
   16550:	d0ea      	beq.n	16528 <l2cap_recv+0x4c>
   16552:	4936      	ldr	r1, [pc, #216]	; (1662c <l2cap_recv+0x150>)
   16554:	4a34      	ldr	r2, [pc, #208]	; (16628 <l2cap_recv+0x14c>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16556:	4839      	ldr	r0, [pc, #228]	; (1663c <l2cap_recv+0x160>)
   16558:	1a52      	subs	r2, r2, r1
   1655a:	08d2      	lsrs	r2, r2, #3
   1655c:	0192      	lsls	r2, r2, #6
   1655e:	4619      	mov	r1, r3
   16560:	f042 0202 	orr.w	r2, r2, #2
   16564:	f00e faf4 	bl	24b50 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   16568:	7861      	ldrb	r1, [r4, #1]
   1656a:	6830      	ldr	r0, [r6, #0]
   1656c:	e019      	b.n	165a2 <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
   1656e:	2a01      	cmp	r2, #1
   16570:	d8da      	bhi.n	16528 <l2cap_recv+0x4c>
   16572:	492d      	ldr	r1, [pc, #180]	; (16628 <l2cap_recv+0x14c>)
   16574:	4b2d      	ldr	r3, [pc, #180]	; (1662c <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn param rsp");
   16576:	4832      	ldr	r0, [pc, #200]	; (16640 <l2cap_recv+0x164>)
   16578:	1ac9      	subs	r1, r1, r3
   1657a:	08c9      	lsrs	r1, r1, #3
   1657c:	0189      	lsls	r1, r1, #6
   1657e:	f041 0101 	orr.w	r1, r1, #1
   16582:	e7ba      	b.n	164fa <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   16584:	2a07      	cmp	r2, #7
   16586:	d808      	bhi.n	1659a <l2cap_recv+0xbe>
   16588:	4927      	ldr	r1, [pc, #156]	; (16628 <l2cap_recv+0x14c>)
   1658a:	4b28      	ldr	r3, [pc, #160]	; (1662c <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn update param req");
   1658c:	482d      	ldr	r0, [pc, #180]	; (16644 <l2cap_recv+0x168>)
   1658e:	1ac9      	subs	r1, r1, r3
   16590:	08c9      	lsrs	r1, r1, #3
   16592:	0189      	lsls	r1, r1, #6
   16594:	f041 0101 	orr.w	r1, r1, #1
   16598:	e7af      	b.n	164fa <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1659a:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1659c:	78f7      	ldrb	r7, [r6, #3]
   1659e:	b11f      	cbz	r7, 165a8 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   165a0:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   165a2:	f00f fcd9 	bl	25f58 <l2cap_send_reject.constprop.0>
		break;
   165a6:	e7bf      	b.n	16528 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   165a8:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   165aa:	7850      	ldrb	r0, [r2, #1]
   165ac:	7813      	ldrb	r3, [r2, #0]
   165ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   165b2:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   165b6:	78d0      	ldrb	r0, [r2, #3]
   165b8:	7893      	ldrb	r3, [r2, #2]
   165ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   165be:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   165c2:	7950      	ldrb	r0, [r2, #5]
   165c4:	7913      	ldrb	r3, [r2, #4]
   165c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   165ca:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   165ce:	7993      	ldrb	r3, [r2, #6]
   165d0:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   165d2:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   165d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   165d8:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   165da:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   165de:	f7ff ff55 	bl	1648c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   165e2:	4604      	mov	r4, r0
   165e4:	2800      	cmp	r0, #0
   165e6:	d09f      	beq.n	16528 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
   165e8:	a902      	add	r1, sp, #8
   165ea:	4630      	mov	r0, r6
   165ec:	f7ff fdd6 	bl	1619c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   165f0:	2102      	movs	r1, #2
   165f2:	4605      	mov	r5, r0
   165f4:	f104 0008 	add.w	r0, r4, #8
   165f8:	f005 fcc6 	bl	1bf88 <net_buf_simple_add>
	if (accepted) {
   165fc:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   16600:	b2db      	uxtb	r3, r3
   16602:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   16604:	4622      	mov	r2, r4
   16606:	9700      	str	r7, [sp, #0]
   16608:	463b      	mov	r3, r7
   1660a:	2105      	movs	r1, #5
   1660c:	4630      	mov	r0, r6
   1660e:	f00f fc8a 	bl	25f26 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   16612:	b110      	cbz	r0, 1661a <l2cap_recv+0x13e>
		net_buf_unref(buf);
   16614:	4620      	mov	r0, r4
   16616:	f005 fb87 	bl	1bd28 <net_buf_unref>
	if (accepted) {
   1661a:	2d00      	cmp	r5, #0
   1661c:	d084      	beq.n	16528 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
   1661e:	a902      	add	r1, sp, #8
   16620:	4630      	mov	r0, r6
   16622:	f00f fc37 	bl	25e94 <bt_conn_le_conn_update>
   16626:	e77f      	b.n	16528 <l2cap_recv+0x4c>
   16628:	00028668 	.word	0x00028668
   1662c:	00028618 	.word	0x00028618
   16630:	0002e5d2 	.word	0x0002e5d2
   16634:	0002e5f0 	.word	0x0002e5f0
   16638:	0002e611 	.word	0x0002e611
   1663c:	0002e671 	.word	0x0002e671
   16640:	0002e632 	.word	0x0002e632
   16644:	0002e64e 	.word	0x0002e64e

00016648 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16648:	4b02      	ldr	r3, [pc, #8]	; (16654 <att_cfm_sent+0xc>)
   1664a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1664e:	f00f bcef 	b.w	26030 <att_sent>
   16652:	bf00      	nop
   16654:	000263e9 	.word	0x000263e9

00016658 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16658:	4b02      	ldr	r3, [pc, #8]	; (16664 <att_rsp_sent+0xc>)
   1665a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1665e:	f00f bce7 	b.w	26030 <att_sent>
   16662:	bf00      	nop
   16664:	00026405 	.word	0x00026405

00016668 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16668:	4b02      	ldr	r3, [pc, #8]	; (16674 <att_req_sent+0xc>)
   1666a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1666e:	f00f bcdf 	b.w	26030 <att_sent>
   16672:	bf00      	nop
   16674:	000263cf 	.word	0x000263cf

00016678 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   16678:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1667a:	3808      	subs	r0, #8
   1667c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1667e:	a901      	add	r1, sp, #4
   16680:	4802      	ldr	r0, [pc, #8]	; (1668c <bt_att_released+0x14>)
   16682:	f00a fc83 	bl	20f8c <k_mem_slab_free>
}
   16686:	b003      	add	sp, #12
   16688:	f85d fb04 	ldr.w	pc, [sp], #4
   1668c:	20000640 	.word	0x20000640

00016690 <chan_send>:
{
   16690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16694:	688b      	ldr	r3, [r1, #8]
   16696:	781b      	ldrb	r3, [r3, #0]
   16698:	2bd2      	cmp	r3, #210	; 0xd2
{
   1669a:	4606      	mov	r6, r0
   1669c:	460c      	mov	r4, r1
   1669e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   166a0:	d116      	bne.n	166d0 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   166a2:	6803      	ldr	r3, [r0, #0]
   166a4:	6818      	ldr	r0, [r3, #0]
   166a6:	f010 fea8 	bl	273fa <bt_smp_sign>
		if (err) {
   166aa:	4605      	mov	r5, r0
   166ac:	b180      	cbz	r0, 166d0 <chan_send+0x40>
   166ae:	4b24      	ldr	r3, [pc, #144]	; (16740 <chan_send+0xb0>)
   166b0:	4924      	ldr	r1, [pc, #144]	; (16744 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   166b2:	4825      	ldr	r0, [pc, #148]	; (16748 <chan_send+0xb8>)
   166b4:	1ac9      	subs	r1, r1, r3
   166b6:	08c9      	lsrs	r1, r1, #3
   166b8:	0189      	lsls	r1, r1, #6
   166ba:	f041 0101 	orr.w	r1, r1, #1
   166be:	f00e fa3a 	bl	24b36 <log_0>
			net_buf_unref(buf);
   166c2:	4620      	mov	r0, r4
   166c4:	f005 fb30 	bl	1bd28 <net_buf_unref>
}
   166c8:	4628      	mov	r0, r5
   166ca:	b003      	add	sp, #12
   166cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   166d0:	f104 0008 	add.w	r0, r4, #8
   166d4:	f010 ffd1 	bl	2767a <net_buf_simple_headroom>
	state->len = buf->len;
   166d8:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   166dc:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   166de:	b957      	cbnz	r7, 166f6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   166e0:	68a3      	ldr	r3, [r4, #8]
   166e2:	7818      	ldrb	r0, [r3, #0]
   166e4:	f00f fcbc 	bl	26060 <att_op_get_type>
   166e8:	1e43      	subs	r3, r0, #1
   166ea:	b2db      	uxtb	r3, r3
   166ec:	2b04      	cmp	r3, #4
   166ee:	bf9c      	itt	ls
   166f0:	4a16      	ldrls	r2, [pc, #88]	; (1674c <chan_send+0xbc>)
   166f2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   166f6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   166f8:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   166fc:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   166fe:	4b14      	ldr	r3, [pc, #80]	; (16750 <chan_send+0xc0>)
   16700:	429f      	cmp	r7, r3
   16702:	d018      	beq.n	16736 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   16704:	4b13      	ldr	r3, [pc, #76]	; (16754 <chan_send+0xc4>)
   16706:	429f      	cmp	r7, r3
   16708:	d017      	beq.n	1673a <chan_send+0xaa>
		return att_sent;
   1670a:	4913      	ldr	r1, [pc, #76]	; (16758 <chan_send+0xc8>)
   1670c:	4b13      	ldr	r3, [pc, #76]	; (1675c <chan_send+0xcc>)
   1670e:	4a14      	ldr	r2, [pc, #80]	; (16760 <chan_send+0xd0>)
   16710:	428f      	cmp	r7, r1
   16712:	bf18      	it	ne
   16714:	4613      	movne	r3, r2
			       &chan->chan.chan);
   16716:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16718:	9600      	str	r6, [sp, #0]
   1671a:	4622      	mov	r2, r4
   1671c:	2104      	movs	r1, #4
   1671e:	f00f fc02 	bl	25f26 <bt_l2cap_send_cb>
	if (err) {
   16722:	4605      	mov	r5, r0
   16724:	2800      	cmp	r0, #0
   16726:	d0cf      	beq.n	166c8 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   16728:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1672a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1672e:	fa10 f088 	uxtah	r0, r0, r8
   16732:	60a0      	str	r0, [r4, #8]
}
   16734:	e7c8      	b.n	166c8 <chan_send+0x38>
		return att_rsp_sent;
   16736:	4b0b      	ldr	r3, [pc, #44]	; (16764 <chan_send+0xd4>)
   16738:	e7ed      	b.n	16716 <chan_send+0x86>
		return att_cfm_sent;
   1673a:	4b0b      	ldr	r3, [pc, #44]	; (16768 <chan_send+0xd8>)
   1673c:	e7eb      	b.n	16716 <chan_send+0x86>
   1673e:	bf00      	nop
   16740:	00028618 	.word	0x00028618
   16744:	00028618 	.word	0x00028618
   16748:	0002e698 	.word	0x0002e698
   1674c:	000289d8 	.word	0x000289d8
   16750:	00026405 	.word	0x00026405
   16754:	000263e9 	.word	0x000263e9
   16758:	000263cf 	.word	0x000263cf
   1675c:	00016669 	.word	0x00016669
   16760:	00026031 	.word	0x00026031
   16764:	00016659 	.word	0x00016659
   16768:	00016649 	.word	0x00016649

0001676c <bt_att_chan_req_send>:
{
   1676c:	b538      	push	{r3, r4, r5, lr}
   1676e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   16770:	4604      	mov	r4, r0
   16772:	b958      	cbnz	r0, 1678c <bt_att_chan_req_send+0x20>
   16774:	491d      	ldr	r1, [pc, #116]	; (167ec <bt_att_chan_req_send+0x80>)
   16776:	481e      	ldr	r0, [pc, #120]	; (167f0 <bt_att_chan_req_send+0x84>)
   16778:	4a1e      	ldr	r2, [pc, #120]	; (167f4 <bt_att_chan_req_send+0x88>)
   1677a:	f240 2333 	movw	r3, #563	; 0x233
   1677e:	f00d ffbb 	bl	246f8 <printk>
   16782:	481c      	ldr	r0, [pc, #112]	; (167f4 <bt_att_chan_req_send+0x88>)
   16784:	f240 2133 	movw	r1, #563	; 0x233
   16788:	f00e f9a7 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(req);
   1678c:	b95d      	cbnz	r5, 167a6 <bt_att_chan_req_send+0x3a>
   1678e:	491a      	ldr	r1, [pc, #104]	; (167f8 <bt_att_chan_req_send+0x8c>)
   16790:	4817      	ldr	r0, [pc, #92]	; (167f0 <bt_att_chan_req_send+0x84>)
   16792:	4a18      	ldr	r2, [pc, #96]	; (167f4 <bt_att_chan_req_send+0x88>)
   16794:	f44f 730d 	mov.w	r3, #564	; 0x234
   16798:	f00d ffae 	bl	246f8 <printk>
   1679c:	4815      	ldr	r0, [pc, #84]	; (167f4 <bt_att_chan_req_send+0x88>)
   1679e:	f44f 710d 	mov.w	r1, #564	; 0x234
   167a2:	f00e f99a 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   167a6:	686b      	ldr	r3, [r5, #4]
   167a8:	b95b      	cbnz	r3, 167c2 <bt_att_chan_req_send+0x56>
   167aa:	4914      	ldr	r1, [pc, #80]	; (167fc <bt_att_chan_req_send+0x90>)
   167ac:	4810      	ldr	r0, [pc, #64]	; (167f0 <bt_att_chan_req_send+0x84>)
   167ae:	4a11      	ldr	r2, [pc, #68]	; (167f4 <bt_att_chan_req_send+0x88>)
   167b0:	f240 2335 	movw	r3, #565	; 0x235
   167b4:	f00d ffa0 	bl	246f8 <printk>
   167b8:	480e      	ldr	r0, [pc, #56]	; (167f4 <bt_att_chan_req_send+0x88>)
   167ba:	f240 2135 	movw	r1, #565	; 0x235
   167be:	f00e f98c 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   167c2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   167c6:	b15b      	cbz	r3, 167e0 <bt_att_chan_req_send+0x74>
   167c8:	490d      	ldr	r1, [pc, #52]	; (16800 <bt_att_chan_req_send+0x94>)
   167ca:	4809      	ldr	r0, [pc, #36]	; (167f0 <bt_att_chan_req_send+0x84>)
   167cc:	4a09      	ldr	r2, [pc, #36]	; (167f4 <bt_att_chan_req_send+0x88>)
   167ce:	f240 2336 	movw	r3, #566	; 0x236
   167d2:	f00d ff91 	bl	246f8 <printk>
   167d6:	4807      	ldr	r0, [pc, #28]	; (167f4 <bt_att_chan_req_send+0x88>)
   167d8:	f240 2136 	movw	r1, #566	; 0x236
   167dc:	f00e f97d 	bl	24ada <assert_post_action>
	return chan_req_send(chan, req);
   167e0:	4629      	mov	r1, r5
   167e2:	4620      	mov	r0, r4
}
   167e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   167e8:	f00f bc67 	b.w	260ba <chan_req_send>
   167ec:	0002e6da 	.word	0x0002e6da
   167f0:	000290f5 	.word	0x000290f5
   167f4:	0002e6ab 	.word	0x0002e6ab
   167f8:	0002e66d 	.word	0x0002e66d
   167fc:	0002e6df 	.word	0x0002e6df
   16800:	0002e6e9 	.word	0x0002e6e9

00016804 <read_group_cb>:
{
   16804:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   16808:	4606      	mov	r6, r0
   1680a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1680c:	f04f 0800 	mov.w	r8, #0
   16810:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16814:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   16816:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16818:	f88d 8008 	strb.w	r8, [sp, #8]
   1681c:	a902      	add	r1, sp, #8
{
   1681e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16820:	f8ad 300a 	strh.w	r3, [sp, #10]
   16824:	f00f f911 	bl	25a4a <bt_uuid_cmp>
   16828:	b1a0      	cbz	r0, 16854 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1682a:	f642 0301 	movw	r3, #10241	; 0x2801
   1682e:	6830      	ldr	r0, [r6, #0]
   16830:	f88d 800c 	strb.w	r8, [sp, #12]
   16834:	a903      	add	r1, sp, #12
   16836:	f8ad 300e 	strh.w	r3, [sp, #14]
   1683a:	f00f f906 	bl	25a4a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1683e:	b148      	cbz	r0, 16854 <read_group_cb+0x50>
		if (data->group &&
   16840:	6923      	ldr	r3, [r4, #16]
   16842:	b11b      	cbz	r3, 1684c <read_group_cb+0x48>
   16844:	885a      	ldrh	r2, [r3, #2]
   16846:	42aa      	cmp	r2, r5
   16848:	d200      	bcs.n	1684c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1684a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1684c:	2001      	movs	r0, #1
}
   1684e:	b004      	add	sp, #16
   16850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16854:	6861      	ldr	r1, [r4, #4]
   16856:	6830      	ldr	r0, [r6, #0]
   16858:	f00f f8f7 	bl	25a4a <bt_uuid_cmp>
   1685c:	b110      	cbz	r0, 16864 <read_group_cb+0x60>
		data->group = NULL;
   1685e:	2300      	movs	r3, #0
   16860:	6123      	str	r3, [r4, #16]
   16862:	e7f3      	b.n	1684c <read_group_cb+0x48>
	if (data->rsp->len &&
   16864:	68e3      	ldr	r3, [r4, #12]
   16866:	68a0      	ldr	r0, [r4, #8]
   16868:	781a      	ldrb	r2, [r3, #0]
   1686a:	b13a      	cbz	r2, 1687c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1686c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   16870:	8981      	ldrh	r1, [r0, #12]
   16872:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16874:	4293      	cmp	r3, r2
   16876:	da01      	bge.n	1687c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   16878:	2000      	movs	r0, #0
   1687a:	e7e8      	b.n	1684e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1687c:	2104      	movs	r1, #4
   1687e:	3008      	adds	r0, #8
   16880:	f005 fb82 	bl	1bf88 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16884:	4b09      	ldr	r3, [pc, #36]	; (168ac <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16886:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16888:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1688a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1688c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1688e:	4631      	mov	r1, r6
   16890:	9300      	str	r3, [sp, #0]
   16892:	9401      	str	r4, [sp, #4]
   16894:	2300      	movs	r3, #0
   16896:	4638      	mov	r0, r7
   16898:	f00f fcb2 	bl	26200 <att_chan_read>
	if (read < 0) {
   1689c:	2800      	cmp	r0, #0
   1689e:	dbeb      	blt.n	16878 <read_group_cb+0x74>
	if (!data->group) {
   168a0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   168a2:	3800      	subs	r0, #0
   168a4:	bf18      	it	ne
   168a6:	2001      	movne	r0, #1
   168a8:	e7d1      	b.n	1684e <read_group_cb+0x4a>
   168aa:	bf00      	nop
   168ac:	000263af 	.word	0x000263af

000168b0 <read_type_cb>:
{
   168b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   168b4:	f8d2 8000 	ldr.w	r8, [r2]
{
   168b8:	4606      	mov	r6, r0
   168ba:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   168bc:	6800      	ldr	r0, [r0, #0]
   168be:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   168c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   168c4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   168c6:	f00f f8c0 	bl	25a4a <bt_uuid_cmp>
   168ca:	4607      	mov	r7, r0
   168cc:	2800      	cmp	r0, #0
   168ce:	d13e      	bne.n	1694e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   168d0:	4628      	mov	r0, r5
   168d2:	2215      	movs	r2, #21
   168d4:	4631      	mov	r1, r6
   168d6:	f010 fa63 	bl	26da0 <bt_gatt_check_perm>
   168da:	4605      	mov	r5, r0
   168dc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   168de:	b148      	cbz	r0, 168f4 <read_type_cb+0x44>
		if (data->rsp->len) {
   168e0:	68e3      	ldr	r3, [r4, #12]
   168e2:	781b      	ldrb	r3, [r3, #0]
   168e4:	b923      	cbnz	r3, 168f0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   168e6:	2500      	movs	r5, #0
}
   168e8:	4628      	mov	r0, r5
   168ea:	b003      	add	sp, #12
   168ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   168f0:	7527      	strb	r7, [r4, #20]
   168f2:	e7f8      	b.n	168e6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   168f4:	68a0      	ldr	r0, [r4, #8]
   168f6:	f005 fa77 	bl	1bde8 <net_buf_frag_last>
   168fa:	2102      	movs	r1, #2
   168fc:	3008      	adds	r0, #8
   168fe:	f005 fb43 	bl	1bf88 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16902:	4b14      	ldr	r3, [pc, #80]	; (16954 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16904:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16906:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   16908:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1690c:	4631      	mov	r1, r6
   1690e:	9300      	str	r3, [sp, #0]
   16910:	9401      	str	r4, [sp, #4]
   16912:	462b      	mov	r3, r5
   16914:	4640      	mov	r0, r8
   16916:	f00f fc73 	bl	26200 <att_chan_read>
	if (read < 0) {
   1691a:	2800      	cmp	r0, #0
   1691c:	da07      	bge.n	1692e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1691e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   16922:	bf26      	itte	cs
   16924:	4240      	negcs	r0, r0
   16926:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16928:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1692a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1692c:	e7dc      	b.n	168e8 <read_type_cb+0x38>
	if (!data->item) {
   1692e:	6923      	ldr	r3, [r4, #16]
   16930:	2b00      	cmp	r3, #0
   16932:	d0d8      	beq.n	168e6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16934:	68a0      	ldr	r0, [r4, #8]
   16936:	f00f fb73 	bl	26020 <net_buf_frags_len>
   1693a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1693e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16940:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16942:	7818      	ldrb	r0, [r3, #0]
   16944:	4285      	cmp	r5, r0
   16946:	bf94      	ite	ls
   16948:	2500      	movls	r5, #0
   1694a:	2501      	movhi	r5, #1
   1694c:	e7cc      	b.n	168e8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1694e:	2501      	movs	r5, #1
   16950:	e7ca      	b.n	168e8 <read_type_cb+0x38>
   16952:	bf00      	nop
   16954:	0002603d 	.word	0x0002603d

00016958 <find_type_cb>:
{
   16958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1695c:	f8d2 9000 	ldr.w	r9, [r2]
{
   16960:	b091      	sub	sp, #68	; 0x44
   16962:	4607      	mov	r7, r0
   16964:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16966:	2500      	movs	r5, #0
   16968:	f642 0301 	movw	r3, #10241	; 0x2801
   1696c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1696e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16972:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   16976:	a90b      	add	r1, sp, #44	; 0x2c
{
   16978:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1697a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1697e:	f00f f864 	bl	25a4a <bt_uuid_cmp>
   16982:	2800      	cmp	r0, #0
   16984:	d066      	beq.n	16a54 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   16986:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1698a:	6838      	ldr	r0, [r7, #0]
   1698c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   16990:	a90b      	add	r1, sp, #44	; 0x2c
   16992:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16996:	f00f f858 	bl	25a4a <bt_uuid_cmp>
   1699a:	b138      	cbz	r0, 169ac <find_type_cb+0x54>
		if (data->group &&
   1699c:	68a3      	ldr	r3, [r4, #8]
   1699e:	b11b      	cbz	r3, 169a8 <find_type_cb+0x50>
   169a0:	885a      	ldrh	r2, [r3, #2]
   169a2:	42b2      	cmp	r2, r6
   169a4:	d200      	bcs.n	169a8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   169a6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   169a8:	2001      	movs	r0, #1
   169aa:	e009      	b.n	169c0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   169ac:	6861      	ldr	r1, [r4, #4]
   169ae:	4608      	mov	r0, r1
   169b0:	f00f fb36 	bl	26020 <net_buf_frags_len>
   169b4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   169b8:	1a1b      	subs	r3, r3, r0
   169ba:	2b03      	cmp	r3, #3
   169bc:	d803      	bhi.n	169c6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   169be:	2000      	movs	r0, #0
}
   169c0:	b011      	add	sp, #68	; 0x44
   169c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   169c6:	4608      	mov	r0, r1
   169c8:	f005 fa0e 	bl	1bde8 <net_buf_frag_last>
   169cc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   169ce:	6860      	ldr	r0, [r4, #4]
   169d0:	f00f fb26 	bl	26020 <net_buf_frags_len>
   169d4:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   169d8:	f105 0b08 	add.w	fp, r5, #8
   169dc:	ebaa 0a00 	sub.w	sl, sl, r0
   169e0:	4658      	mov	r0, fp
   169e2:	f010 fe4e 	bl	27682 <net_buf_simple_tailroom>
   169e6:	4582      	cmp	sl, r0
   169e8:	d237      	bcs.n	16a5a <find_type_cb+0x102>
   169ea:	6860      	ldr	r0, [r4, #4]
   169ec:	f00f fb18 	bl	26020 <net_buf_frags_len>
   169f0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   169f4:	1a18      	subs	r0, r3, r0
	if (!len) {
   169f6:	b970      	cbnz	r0, 16a16 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   169f8:	6863      	ldr	r3, [r4, #4]
   169fa:	7998      	ldrb	r0, [r3, #6]
   169fc:	f004 ff92 	bl	1b924 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   16a00:	2200      	movs	r2, #0
   16a02:	2300      	movs	r3, #0
   16a04:	f010 fe26 	bl	27654 <net_buf_alloc_fixed>
		if (!frag) {
   16a08:	4605      	mov	r5, r0
   16a0a:	2800      	cmp	r0, #0
   16a0c:	d0d7      	beq.n	169be <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   16a0e:	4601      	mov	r1, r0
   16a10:	6860      	ldr	r0, [r4, #4]
   16a12:	f005 fa31 	bl	1be78 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   16a16:	2300      	movs	r3, #0
   16a18:	9300      	str	r3, [sp, #0]
   16a1a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   16a1e:	4639      	mov	r1, r7
   16a20:	2310      	movs	r3, #16
   16a22:	aa02      	add	r2, sp, #8
   16a24:	4640      	mov	r0, r8
   16a26:	47c8      	blx	r9
	if (read < 0) {
   16a28:	1e07      	subs	r7, r0, #0
   16a2a:	db13      	blt.n	16a54 <find_type_cb+0xfc>
	if (read != data->value_len) {
   16a2c:	7c22      	ldrb	r2, [r4, #16]
   16a2e:	68e0      	ldr	r0, [r4, #12]
   16a30:	42ba      	cmp	r2, r7
   16a32:	d037      	beq.n	16aa4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   16a34:	4601      	mov	r1, r0
   16a36:	a80b      	add	r0, sp, #44	; 0x2c
   16a38:	f00f f831 	bl	25a9e <bt_uuid_create>
   16a3c:	b988      	cbnz	r0, 16a62 <find_type_cb+0x10a>
   16a3e:	4a1b      	ldr	r2, [pc, #108]	; (16aac <find_type_cb+0x154>)
   16a40:	4b1b      	ldr	r3, [pc, #108]	; (16ab0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   16a42:	7c21      	ldrb	r1, [r4, #16]
   16a44:	481b      	ldr	r0, [pc, #108]	; (16ab4 <find_type_cb+0x15c>)
   16a46:	1ad2      	subs	r2, r2, r3
   16a48:	08d2      	lsrs	r2, r2, #3
   16a4a:	0192      	lsls	r2, r2, #6
   16a4c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   16a50:	f00e f87e 	bl	24b50 <log_1>
	data->group = NULL;
   16a54:	2300      	movs	r3, #0
   16a56:	60a3      	str	r3, [r4, #8]
   16a58:	e7a6      	b.n	169a8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   16a5a:	4658      	mov	r0, fp
   16a5c:	f010 fe11 	bl	27682 <net_buf_simple_tailroom>
   16a60:	e7c9      	b.n	169f6 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   16a62:	b2fa      	uxtb	r2, r7
   16a64:	a902      	add	r1, sp, #8
   16a66:	a806      	add	r0, sp, #24
   16a68:	f00f f819 	bl	25a9e <bt_uuid_create>
   16a6c:	b948      	cbnz	r0, 16a82 <find_type_cb+0x12a>
   16a6e:	4a0f      	ldr	r2, [pc, #60]	; (16aac <find_type_cb+0x154>)
   16a70:	4b0f      	ldr	r3, [pc, #60]	; (16ab0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   16a72:	4811      	ldr	r0, [pc, #68]	; (16ab8 <find_type_cb+0x160>)
   16a74:	1ad2      	subs	r2, r2, r3
   16a76:	08d2      	lsrs	r2, r2, #3
   16a78:	0192      	lsls	r2, r2, #6
   16a7a:	f042 0202 	orr.w	r2, r2, #2
   16a7e:	4639      	mov	r1, r7
   16a80:	e7e6      	b.n	16a50 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   16a82:	a906      	add	r1, sp, #24
   16a84:	a80b      	add	r0, sp, #44	; 0x2c
   16a86:	f00e ffe0 	bl	25a4a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   16a8a:	2800      	cmp	r0, #0
   16a8c:	d1e2      	bne.n	16a54 <find_type_cb+0xfc>
	data->err = 0x00;
   16a8e:	2300      	movs	r3, #0
   16a90:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   16a92:	2104      	movs	r1, #4
   16a94:	f105 0008 	add.w	r0, r5, #8
   16a98:	f005 fa76 	bl	1bf88 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   16a9c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16a9e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16aa0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   16aa2:	e781      	b.n	169a8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   16aa4:	a902      	add	r1, sp, #8
   16aa6:	f00e ff4d 	bl	25944 <memcmp>
   16aaa:	e7ee      	b.n	16a8a <find_type_cb+0x132>
   16aac:	00028618 	.word	0x00028618
   16ab0:	00028618 	.word	0x00028618
   16ab4:	0002e6f4 	.word	0x0002e6f4
   16ab8:	0002e713 	.word	0x0002e713

00016abc <att_get>:
{
   16abc:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16abe:	7b43      	ldrb	r3, [r0, #13]
   16ac0:	2b07      	cmp	r3, #7
   16ac2:	d00b      	beq.n	16adc <att_get+0x20>
   16ac4:	4918      	ldr	r1, [pc, #96]	; (16b28 <att_get+0x6c>)
   16ac6:	4b19      	ldr	r3, [pc, #100]	; (16b2c <att_get+0x70>)
		BT_WARN("Not connected");
   16ac8:	4819      	ldr	r0, [pc, #100]	; (16b30 <att_get+0x74>)
   16aca:	1ac9      	subs	r1, r1, r3
   16acc:	08c9      	lsrs	r1, r1, #3
   16ace:	0189      	lsls	r1, r1, #6
   16ad0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   16ad4:	f00e f82f 	bl	24b36 <log_0>
		return NULL;
   16ad8:	2400      	movs	r4, #0
   16ada:	e00e      	b.n	16afa <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16adc:	2104      	movs	r1, #4
   16ade:	f00f fa69 	bl	25fb4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16ae2:	4604      	mov	r4, r0
   16ae4:	b958      	cbnz	r0, 16afe <att_get+0x42>
   16ae6:	4910      	ldr	r1, [pc, #64]	; (16b28 <att_get+0x6c>)
   16ae8:	4b10      	ldr	r3, [pc, #64]	; (16b2c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   16aea:	4812      	ldr	r0, [pc, #72]	; (16b34 <att_get+0x78>)
   16aec:	1ac9      	subs	r1, r1, r3
   16aee:	08c9      	lsrs	r1, r1, #3
   16af0:	0189      	lsls	r1, r1, #6
   16af2:	f041 0101 	orr.w	r1, r1, #1
   16af6:	f00e f81e 	bl	24b36 <log_0>
}
   16afa:	4620      	mov	r0, r4
   16afc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16afe:	f3bf 8f5b 	dmb	ish
   16b02:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   16b06:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   16b0a:	075b      	lsls	r3, r3, #29
   16b0c:	d508      	bpl.n	16b20 <att_get+0x64>
   16b0e:	4906      	ldr	r1, [pc, #24]	; (16b28 <att_get+0x6c>)
   16b10:	4b06      	ldr	r3, [pc, #24]	; (16b2c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   16b12:	4809      	ldr	r0, [pc, #36]	; (16b38 <att_get+0x7c>)
   16b14:	1ac9      	subs	r1, r1, r3
   16b16:	08c9      	lsrs	r1, r1, #3
   16b18:	0189      	lsls	r1, r1, #6
   16b1a:	f041 0102 	orr.w	r1, r1, #2
   16b1e:	e7d9      	b.n	16ad4 <att_get+0x18>
	return att_chan->att;
   16b20:	f850 4c08 	ldr.w	r4, [r0, #-8]
   16b24:	e7e9      	b.n	16afa <att_get+0x3e>
   16b26:	bf00      	nop
   16b28:	00028618 	.word	0x00028618
   16b2c:	00028618 	.word	0x00028618
   16b30:	0002e732 	.word	0x0002e732
   16b34:	0002e740 	.word	0x0002e740
   16b38:	0002e75b 	.word	0x0002e75b

00016b3c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16b3e:	2300      	movs	r3, #0
{
   16b40:	4606      	mov	r6, r0
   16b42:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16b44:	4829      	ldr	r0, [pc, #164]	; (16bec <bt_att_accept+0xb0>)
   16b46:	2200      	movs	r2, #0
   16b48:	4669      	mov	r1, sp
   16b4a:	f00a f9b3 	bl	20eb4 <k_mem_slab_alloc>
   16b4e:	4604      	mov	r4, r0
   16b50:	b178      	cbz	r0, 16b72 <bt_att_accept+0x36>
   16b52:	4a27      	ldr	r2, [pc, #156]	; (16bf0 <bt_att_accept+0xb4>)
   16b54:	4b27      	ldr	r3, [pc, #156]	; (16bf4 <bt_att_accept+0xb8>)
		BT_ERR("No available ATT context for conn %p", conn);
   16b56:	4828      	ldr	r0, [pc, #160]	; (16bf8 <bt_att_accept+0xbc>)
   16b58:	1ad2      	subs	r2, r2, r3
   16b5a:	08d2      	lsrs	r2, r2, #3
   16b5c:	0192      	lsls	r2, r2, #6
   16b5e:	f042 0201 	orr.w	r2, r2, #1
   16b62:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   16b64:	f00d fff4 	bl	24b50 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   16b68:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16b6c:	4620      	mov	r0, r4
   16b6e:	b003      	add	sp, #12
   16b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   16b72:	4601      	mov	r1, r0
   16b74:	2230      	movs	r2, #48	; 0x30
   16b76:	9800      	ldr	r0, [sp, #0]
   16b78:	f00e feff 	bl	2597a <memset>
	att->conn = conn;
   16b7c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16b7e:	481f      	ldr	r0, [pc, #124]	; (16bfc <bt_att_accept+0xc0>)
	list->tail = NULL;
   16b80:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   16b82:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   16b86:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   16b8a:	2200      	movs	r2, #0
   16b8c:	2300      	movs	r3, #0
   16b8e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16b90:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16b92:	f00a f98f 	bl	20eb4 <k_mem_slab_alloc>
   16b96:	4604      	mov	r4, r0
   16b98:	b148      	cbz	r0, 16bae <bt_att_accept+0x72>
   16b9a:	4a15      	ldr	r2, [pc, #84]	; (16bf0 <bt_att_accept+0xb4>)
   16b9c:	4b15      	ldr	r3, [pc, #84]	; (16bf4 <bt_att_accept+0xb8>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   16b9e:	6829      	ldr	r1, [r5, #0]
   16ba0:	4817      	ldr	r0, [pc, #92]	; (16c00 <bt_att_accept+0xc4>)
   16ba2:	1ad2      	subs	r2, r2, r3
   16ba4:	08d2      	lsrs	r2, r2, #3
   16ba6:	0192      	lsls	r2, r2, #6
   16ba8:	f042 0201 	orr.w	r2, r2, #1
   16bac:	e7da      	b.n	16b64 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   16bae:	4601      	mov	r1, r0
   16bb0:	f44f 72ac 	mov.w	r2, #344	; 0x158
   16bb4:	9801      	ldr	r0, [sp, #4]
   16bb6:	f00e fee0 	bl	2597a <memset>
	chan->chan.chan.ops = &ops;
   16bba:	9801      	ldr	r0, [sp, #4]
   16bbc:	4b11      	ldr	r3, [pc, #68]	; (16c04 <bt_att_accept+0xc8>)
   16bbe:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   16bc0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16bc4:	f011 fa56 	bl	28074 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16bc8:	9b01      	ldr	r3, [sp, #4]
   16bca:	f3bf 8f5b 	dmb	ish
   16bce:	33f8      	adds	r3, #248	; 0xf8
   16bd0:	e853 2f00 	ldrex	r2, [r3]
   16bd4:	e843 4100 	strex	r1, r4, [r3]
   16bd8:	2900      	cmp	r1, #0
   16bda:	d1f9      	bne.n	16bd0 <bt_att_accept+0x94>
   16bdc:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16be0:	9b01      	ldr	r3, [sp, #4]
   16be2:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   16be6:	603b      	str	r3, [r7, #0]
	return 0;
   16be8:	e7c0      	b.n	16b6c <bt_att_accept+0x30>
   16bea:	bf00      	nop
   16bec:	20000620 	.word	0x20000620
   16bf0:	00028618 	.word	0x00028618
   16bf4:	00028618 	.word	0x00028618
   16bf8:	0002e77f 	.word	0x0002e77f
   16bfc:	20000640 	.word	0x20000640
   16c00:	0002e7a4 	.word	0x0002e7a4
   16c04:	20000460 	.word	0x20000460

00016c08 <bt_att_connected>:
{
   16c08:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16c0a:	2104      	movs	r1, #4
{
   16c0c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16c0e:	6800      	ldr	r0, [r0, #0]
   16c10:	f00f f9c0 	bl	25f94 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   16c14:	4605      	mov	r5, r0
   16c16:	b970      	cbnz	r0, 16c36 <bt_att_connected+0x2e>
   16c18:	491c      	ldr	r1, [pc, #112]	; (16c8c <bt_att_connected+0x84>)
   16c1a:	4a1d      	ldr	r2, [pc, #116]	; (16c90 <bt_att_connected+0x88>)
   16c1c:	481d      	ldr	r0, [pc, #116]	; (16c94 <bt_att_connected+0x8c>)
   16c1e:	f640 2381 	movw	r3, #2689	; 0xa81
   16c22:	f00d fd69 	bl	246f8 <printk>
   16c26:	481c      	ldr	r0, [pc, #112]	; (16c98 <bt_att_connected+0x90>)
   16c28:	f00d fd66 	bl	246f8 <printk>
   16c2c:	4818      	ldr	r0, [pc, #96]	; (16c90 <bt_att_connected+0x88>)
   16c2e:	f640 2181 	movw	r1, #2689	; 0xa81
   16c32:	f00d ff52 	bl	24ada <assert_post_action>
	struct bt_att *att = att_chan->att;
   16c36:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   16c3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   16c3c:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   16c40:	b91b      	cbnz	r3, 16c4a <bt_att_connected+0x42>
   16c42:	f105 000c 	add.w	r0, r5, #12
   16c46:	f011 fa15 	bl	28074 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   16c4a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   16c4c:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   16c50:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   16c52:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   16c56:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   16c58:	b902      	cbnz	r2, 16c5c <bt_att_connected+0x54>
	list->tail = node;
   16c5a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16c5c:	f3bf 8f5b 	dmb	ish
   16c60:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   16c64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16c68:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16c6a:	bf58      	it	pl
   16c6c:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   16c6e:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16c70:	bf5c      	itt	pl
   16c72:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16c76:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   16c7a:	f00f fa7b 	bl	26174 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16c7e:	f504 708c 	add.w	r0, r4, #280	; 0x118
   16c82:	4906      	ldr	r1, [pc, #24]	; (16c9c <bt_att_connected+0x94>)
}
   16c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16c88:	f00b ba94 	b.w	221b4 <k_work_init_delayable>
   16c8c:	0002e6da 	.word	0x0002e6da
   16c90:	0002e6ab 	.word	0x0002e6ab
   16c94:	000290f5 	.word	0x000290f5
   16c98:	0002e7c9 	.word	0x0002e7c9
   16c9c:	00017771 	.word	0x00017771

00016ca0 <att_write_cmd>:
{
   16ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ca2:	4604      	mov	r4, r0
   16ca4:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   16ca6:	f101 0008 	add.w	r0, r1, #8
   16caa:	460d      	mov	r5, r1
   16cac:	f010 fcdd 	bl	2766a <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16cb0:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   16cb2:	68af      	ldr	r7, [r5, #8]
   16cb4:	89ad      	ldrh	r5, [r5, #12]
   16cb6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16cb8:	2100      	movs	r1, #0
   16cba:	6818      	ldr	r0, [r3, #0]
   16cbc:	f010 f92e 	bl	26f1c <bt_gatt_change_aware>
   16cc0:	b328      	cbz	r0, 16d0e <att_write_cmd+0x6e>
	if (!handle) {
   16cc2:	b336      	cbz	r6, 16d12 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   16cc4:	2218      	movs	r2, #24
   16cc6:	2100      	movs	r1, #0
   16cc8:	4668      	mov	r0, sp
   16cca:	f00e fe56 	bl	2597a <memset>
	data.conn = chan->att->conn;
   16cce:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16cd0:	4a11      	ldr	r2, [pc, #68]	; (16d18 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   16cd2:	681b      	ldr	r3, [r3, #0]
   16cd4:	9300      	str	r3, [sp, #0]
	data.req = req;
   16cd6:	2300      	movs	r3, #0
   16cd8:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   16cdc:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16ce0:	2301      	movs	r3, #1
   16ce2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16ce6:	4631      	mov	r1, r6
   16ce8:	466b      	mov	r3, sp
   16cea:	4630      	mov	r0, r6
	data.value = value;
   16cec:	9703      	str	r7, [sp, #12]
	data.len = len;
   16cee:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16cf2:	f00f fa7a 	bl	261ea <bt_gatt_foreach_attr>
	if (data.err) {
   16cf6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16cfa:	b92b      	cbnz	r3, 16d08 <att_write_cmd+0x68>
	if (data.buf) {
   16cfc:	9901      	ldr	r1, [sp, #4]
   16cfe:	b119      	cbz	r1, 16d08 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16d00:	4a06      	ldr	r2, [pc, #24]	; (16d1c <att_write_cmd+0x7c>)
   16d02:	4620      	mov	r0, r4
   16d04:	f00f fa28 	bl	26158 <bt_att_chan_send_rsp>
   16d08:	2000      	movs	r0, #0
}
   16d0a:	b007      	add	sp, #28
   16d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16d0e:	2012      	movs	r0, #18
   16d10:	e7fb      	b.n	16d0a <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   16d12:	2001      	movs	r0, #1
   16d14:	e7f9      	b.n	16d0a <att_write_cmd+0x6a>
   16d16:	bf00      	nop
   16d18:	000264c1 	.word	0x000264c1
   16d1c:	00026405 	.word	0x00026405

00016d20 <bt_att_chan_create_pdu>:
{
   16d20:	b538      	push	{r3, r4, r5, lr}
   16d22:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16d24:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   16d28:	3201      	adds	r2, #1
   16d2a:	428a      	cmp	r2, r1
   16d2c:	d90c      	bls.n	16d48 <bt_att_chan_create_pdu+0x28>
   16d2e:	481a      	ldr	r0, [pc, #104]	; (16d98 <bt_att_chan_create_pdu+0x78>)
   16d30:	4b1a      	ldr	r3, [pc, #104]	; (16d9c <bt_att_chan_create_pdu+0x7c>)
   16d32:	1a1b      	subs	r3, r3, r0
   16d34:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   16d36:	019b      	lsls	r3, r3, #6
   16d38:	4819      	ldr	r0, [pc, #100]	; (16da0 <bt_att_chan_create_pdu+0x80>)
   16d3a:	f043 0302 	orr.w	r3, r3, #2
   16d3e:	f00d ff1b 	bl	24b78 <log_2>
		return NULL;
   16d42:	2400      	movs	r4, #0
}
   16d44:	4620      	mov	r0, r4
   16d46:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   16d48:	4628      	mov	r0, r5
   16d4a:	f00f f989 	bl	26060 <att_op_get_type>
   16d4e:	2802      	cmp	r0, #2
   16d50:	d001      	beq.n	16d56 <bt_att_chan_create_pdu+0x36>
   16d52:	2804      	cmp	r0, #4
   16d54:	d114      	bne.n	16d80 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   16d56:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16d5a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   16d5c:	2100      	movs	r1, #0
   16d5e:	4608      	mov	r0, r1
   16d60:	f00f f8de 	bl	25f20 <bt_l2cap_create_pdu_timeout>
   16d64:	4604      	mov	r4, r0
	if (!buf) {
   16d66:	b980      	cbnz	r0, 16d8a <bt_att_chan_create_pdu+0x6a>
   16d68:	4b0b      	ldr	r3, [pc, #44]	; (16d98 <bt_att_chan_create_pdu+0x78>)
   16d6a:	4a0c      	ldr	r2, [pc, #48]	; (16d9c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   16d6c:	480d      	ldr	r0, [pc, #52]	; (16da4 <bt_att_chan_create_pdu+0x84>)
   16d6e:	1ad2      	subs	r2, r2, r3
   16d70:	08d2      	lsrs	r2, r2, #3
   16d72:	0192      	lsls	r2, r2, #6
   16d74:	f042 0201 	orr.w	r2, r2, #1
   16d78:	4629      	mov	r1, r5
   16d7a:	f00d fee9 	bl	24b50 <log_1>
		return NULL;
   16d7e:	e7e1      	b.n	16d44 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   16d80:	f04f 32ff 	mov.w	r2, #4294967295
   16d84:	f04f 33ff 	mov.w	r3, #4294967295
   16d88:	e7e8      	b.n	16d5c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   16d8a:	2101      	movs	r1, #1
   16d8c:	3008      	adds	r0, #8
   16d8e:	f005 f8fb 	bl	1bf88 <net_buf_simple_add>
	hdr->code = op;
   16d92:	7005      	strb	r5, [r0, #0]
	return buf;
   16d94:	e7d6      	b.n	16d44 <bt_att_chan_create_pdu+0x24>
   16d96:	bf00      	nop
   16d98:	00028618 	.word	0x00028618
   16d9c:	00028618 	.word	0x00028618
   16da0:	0002e7e0 	.word	0x0002e7e0
   16da4:	0002e5aa 	.word	0x0002e5aa

00016da8 <att_indicate>:
{
   16da8:	b570      	push	{r4, r5, r6, lr}
   16daa:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   16dac:	f101 0008 	add.w	r0, r1, #8
   16db0:	460d      	mov	r5, r1
   16db2:	f010 fc5a 	bl	2766a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   16db6:	6826      	ldr	r6, [r4, #0]
   16db8:	89ab      	ldrh	r3, [r5, #12]
   16dba:	68aa      	ldr	r2, [r5, #8]
   16dbc:	4601      	mov	r1, r0
   16dbe:	6830      	ldr	r0, [r6, #0]
   16dc0:	f010 f881 	bl	26ec6 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   16dc4:	211e      	movs	r1, #30
   16dc6:	2200      	movs	r2, #0
   16dc8:	4620      	mov	r0, r4
   16dca:	f7ff ffa9 	bl	16d20 <bt_att_chan_create_pdu>
	if (!buf) {
   16dce:	4601      	mov	r1, r0
   16dd0:	b118      	cbz	r0, 16dda <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   16dd2:	4a03      	ldr	r2, [pc, #12]	; (16de0 <att_indicate+0x38>)
   16dd4:	4620      	mov	r0, r4
   16dd6:	f00f f9bf 	bl	26158 <bt_att_chan_send_rsp>
}
   16dda:	2000      	movs	r0, #0
   16ddc:	bd70      	pop	{r4, r5, r6, pc}
   16dde:	bf00      	nop
   16de0:	000263e9 	.word	0x000263e9

00016de4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16de8:	4688      	mov	r8, r1
   16dea:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16dec:	2101      	movs	r1, #1
   16dee:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   16df0:	4605      	mov	r5, r0
   16df2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16df4:	f7ff ff94 	bl	16d20 <bt_att_chan_create_pdu>
	if (!buf) {
   16df8:	4604      	mov	r4, r0
   16dfa:	b178      	cbz	r0, 16e1c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   16dfc:	2104      	movs	r1, #4
   16dfe:	3008      	adds	r0, #8
   16e00:	f005 f8c2 	bl	1bf88 <net_buf_simple_add>
	rsp->request = req;
   16e04:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   16e08:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   16e0a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16e0e:	4621      	mov	r1, r4
   16e10:	4628      	mov	r0, r5
   16e12:	4a03      	ldr	r2, [pc, #12]	; (16e20 <send_err_rsp.part.0+0x3c>)
}
   16e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16e18:	f00f b99e 	b.w	26158 <bt_att_chan_send_rsp>
}
   16e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e20:	00026405 	.word	0x00026405

00016e24 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16e24:	898b      	ldrh	r3, [r1, #12]
{
   16e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e2a:	4604      	mov	r4, r0
   16e2c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   16e2e:	b963      	cbnz	r3, 16e4a <bt_att_recv+0x26>
   16e30:	494e      	ldr	r1, [pc, #312]	; (16f6c <bt_att_recv+0x148>)
   16e32:	4b4f      	ldr	r3, [pc, #316]	; (16f70 <bt_att_recv+0x14c>)
		BT_ERR("Too small ATT PDU received");
   16e34:	484f      	ldr	r0, [pc, #316]	; (16f74 <bt_att_recv+0x150>)
   16e36:	1ac9      	subs	r1, r1, r3
   16e38:	08c9      	lsrs	r1, r1, #3
   16e3a:	0189      	lsls	r1, r1, #6
   16e3c:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   16e40:	f00d fe79 	bl	24b36 <log_0>
}
   16e44:	2000      	movs	r0, #0
   16e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16e4a:	2101      	movs	r1, #1
   16e4c:	f108 0008 	add.w	r0, r8, #8
   16e50:	f005 f878 	bl	1bf44 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16e54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   16e58:	4605      	mov	r5, r0
   16e5a:	2b00      	cmp	r3, #0
   16e5c:	d0f2      	beq.n	16e44 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   16e5e:	4a46      	ldr	r2, [pc, #280]	; (16f78 <bt_att_recv+0x154>)
   16e60:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16e62:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16e66:	2300      	movs	r3, #0
   16e68:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   16e6a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   16e6e:	4288      	cmp	r0, r1
   16e70:	d11d      	bne.n	16eae <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16e72:	00d8      	lsls	r0, r3, #3
   16e74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16e78:	789f      	ldrb	r7, [r3, #2]
   16e7a:	2f01      	cmp	r7, #1
   16e7c:	d134      	bne.n	16ee8 <bt_att_recv+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16e7e:	f3bf 8f5b 	dmb	ish
   16e82:	34f0      	adds	r4, #240	; 0xf0
   16e84:	e854 3f00 	ldrex	r3, [r4]
   16e88:	f043 0201 	orr.w	r2, r3, #1
   16e8c:	e844 2100 	strex	r1, r2, [r4]
   16e90:	2900      	cmp	r1, #0
   16e92:	d1f7      	bne.n	16e84 <bt_att_recv+0x60>
   16e94:	f3bf 8f5b 	dmb	ish
   16e98:	07da      	lsls	r2, r3, #31
   16e9a:	d53f      	bpl.n	16f1c <bt_att_recv+0xf8>
   16e9c:	4933      	ldr	r1, [pc, #204]	; (16f6c <bt_att_recv+0x148>)
   16e9e:	4b34      	ldr	r3, [pc, #208]	; (16f70 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
   16ea0:	4836      	ldr	r0, [pc, #216]	; (16f7c <bt_att_recv+0x158>)
   16ea2:	1ac9      	subs	r1, r1, r3
   16ea4:	08c9      	lsrs	r1, r1, #3
   16ea6:	0189      	lsls	r1, r1, #6
   16ea8:	f041 0102 	orr.w	r1, r1, #2
   16eac:	e7c8      	b.n	16e40 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16eae:	3301      	adds	r3, #1
   16eb0:	2b1c      	cmp	r3, #28
   16eb2:	d1da      	bne.n	16e6a <bt_att_recv+0x46>
   16eb4:	4b2e      	ldr	r3, [pc, #184]	; (16f70 <bt_att_recv+0x14c>)
   16eb6:	4a2d      	ldr	r2, [pc, #180]	; (16f6c <bt_att_recv+0x148>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   16eb8:	4831      	ldr	r0, [pc, #196]	; (16f80 <bt_att_recv+0x15c>)
   16eba:	1ad2      	subs	r2, r2, r3
   16ebc:	08d2      	lsrs	r2, r2, #3
   16ebe:	0192      	lsls	r2, r2, #6
   16ec0:	f042 0202 	orr.w	r2, r2, #2
   16ec4:	f00d fe44 	bl	24b50 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   16ec8:	7829      	ldrb	r1, [r5, #0]
   16eca:	4608      	mov	r0, r1
   16ecc:	f00f f8c8 	bl	26060 <att_op_get_type>
   16ed0:	2800      	cmp	r0, #0
   16ed2:	d0b7      	beq.n	16e44 <bt_att_recv+0x20>
   16ed4:	2805      	cmp	r0, #5
   16ed6:	d0b5      	beq.n	16e44 <bt_att_recv+0x20>
	if (!req) {
   16ed8:	2900      	cmp	r1, #0
   16eda:	d0b3      	beq.n	16e44 <bt_att_recv+0x20>
   16edc:	2306      	movs	r3, #6
   16ede:	2200      	movs	r2, #0
   16ee0:	4630      	mov	r0, r6
   16ee2:	f7ff ff7f 	bl	16de4 <send_err_rsp.part.0>
   16ee6:	e7ad      	b.n	16e44 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   16ee8:	2f05      	cmp	r7, #5
   16eea:	d117      	bne.n	16f1c <bt_att_recv+0xf8>
   16eec:	f3bf 8f5b 	dmb	ish
   16ef0:	34f0      	adds	r4, #240	; 0xf0
   16ef2:	e854 3f00 	ldrex	r3, [r4]
   16ef6:	f043 0202 	orr.w	r2, r3, #2
   16efa:	e844 2100 	strex	r1, r2, [r4]
   16efe:	2900      	cmp	r1, #0
   16f00:	d1f7      	bne.n	16ef2 <bt_att_recv+0xce>
   16f02:	f3bf 8f5b 	dmb	ish
   16f06:	079b      	lsls	r3, r3, #30
   16f08:	d508      	bpl.n	16f1c <bt_att_recv+0xf8>
   16f0a:	4918      	ldr	r1, [pc, #96]	; (16f6c <bt_att_recv+0x148>)
   16f0c:	4b18      	ldr	r3, [pc, #96]	; (16f70 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected indication");
   16f0e:	481d      	ldr	r0, [pc, #116]	; (16f84 <bt_att_recv+0x160>)
   16f10:	1ac9      	subs	r1, r1, r3
   16f12:	08c9      	lsrs	r1, r1, #3
   16f14:	0189      	lsls	r1, r1, #6
   16f16:	f041 0102 	orr.w	r1, r1, #2
   16f1a:	e791      	b.n	16e40 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   16f1c:	eb0c 0300 	add.w	r3, ip, r0
   16f20:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   16f24:	785a      	ldrb	r2, [r3, #1]
   16f26:	428a      	cmp	r2, r1
   16f28:	d90f      	bls.n	16f4a <bt_att_recv+0x126>
   16f2a:	4a11      	ldr	r2, [pc, #68]	; (16f70 <bt_att_recv+0x14c>)
   16f2c:	4b0f      	ldr	r3, [pc, #60]	; (16f6c <bt_att_recv+0x148>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16f2e:	4816      	ldr	r0, [pc, #88]	; (16f88 <bt_att_recv+0x164>)
   16f30:	1a9b      	subs	r3, r3, r2
   16f32:	08db      	lsrs	r3, r3, #3
   16f34:	019b      	lsls	r3, r3, #6
   16f36:	782a      	ldrb	r2, [r5, #0]
   16f38:	f043 0301 	orr.w	r3, r3, #1
   16f3c:	f00d fe1c 	bl	24b78 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   16f40:	2f01      	cmp	r7, #1
   16f42:	f47f af7f 	bne.w	16e44 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   16f46:	2304      	movs	r3, #4
   16f48:	e00a      	b.n	16f60 <bt_att_recv+0x13c>
		err = handler->func(att_chan, buf);
   16f4a:	685b      	ldr	r3, [r3, #4]
   16f4c:	4641      	mov	r1, r8
   16f4e:	4630      	mov	r0, r6
   16f50:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16f52:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   16f54:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16f56:	f47f af75 	bne.w	16e44 <bt_att_recv+0x20>
   16f5a:	2800      	cmp	r0, #0
   16f5c:	f43f af72 	beq.w	16e44 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16f60:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16f62:	2900      	cmp	r1, #0
   16f64:	f43f af6e 	beq.w	16e44 <bt_att_recv+0x20>
   16f68:	e7b9      	b.n	16ede <bt_att_recv+0xba>
   16f6a:	bf00      	nop
   16f6c:	00028618 	.word	0x00028618
   16f70:	00028618 	.word	0x00028618
   16f74:	0002e805 	.word	0x0002e805
   16f78:	000289ec 	.word	0x000289ec
   16f7c:	0002e820 	.word	0x0002e820
   16f80:	0002e87a 	.word	0x0002e87a
   16f84:	0002e83c 	.word	0x0002e83c
   16f88:	0002e85b 	.word	0x0002e85b

00016f8c <att_write_req>:
{
   16f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16f90:	4604      	mov	r4, r0
   16f92:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   16f94:	f101 0008 	add.w	r0, r1, #8
   16f98:	460d      	mov	r5, r1
   16f9a:	f010 fb66 	bl	2766a <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16f9e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   16fa0:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   16fa4:	89ad      	ldrh	r5, [r5, #12]
   16fa6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16fa8:	2101      	movs	r1, #1
   16faa:	6818      	ldr	r0, [r3, #0]
   16fac:	f00f ffb6 	bl	26f1c <bt_gatt_change_aware>
   16fb0:	2800      	cmp	r0, #0
   16fb2:	d040      	beq.n	17036 <att_write_req+0xaa>
	if (!handle) {
   16fb4:	2e00      	cmp	r6, #0
   16fb6:	d040      	beq.n	1703a <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   16fb8:	2218      	movs	r2, #24
   16fba:	2100      	movs	r1, #0
   16fbc:	4668      	mov	r0, sp
   16fbe:	f00e fcdc 	bl	2597a <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16fc2:	2200      	movs	r2, #0
   16fc4:	2113      	movs	r1, #19
   16fc6:	4620      	mov	r0, r4
   16fc8:	f7ff feaa 	bl	16d20 <bt_att_chan_create_pdu>
   16fcc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   16fce:	b380      	cbz	r0, 17032 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   16fd0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16fd2:	4a1b      	ldr	r2, [pc, #108]	; (17040 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   16fd4:	681b      	ldr	r3, [r3, #0]
   16fd6:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16fd8:	2301      	movs	r3, #1
   16fda:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   16fde:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   16fe2:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16fe4:	466b      	mov	r3, sp
   16fe6:	4631      	mov	r1, r6
   16fe8:	4630      	mov	r0, r6
	data.len = len;
   16fea:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   16fee:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   16ff2:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   16ff6:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16ffa:	f00f f8f6 	bl	261ea <bt_gatt_foreach_attr>
	if (data.err) {
   16ffe:	f89d 5014 	ldrb.w	r5, [sp, #20]
   17002:	b175      	cbz	r5, 17022 <att_write_req+0x96>
			net_buf_unref(data.buf);
   17004:	9801      	ldr	r0, [sp, #4]
   17006:	f004 fe8f 	bl	1bd28 <net_buf_unref>
	if (!req) {
   1700a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1700e:	4632      	mov	r2, r6
   17010:	4641      	mov	r1, r8
   17012:	4620      	mov	r0, r4
   17014:	f7ff fee6 	bl	16de4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   17018:	463d      	mov	r5, r7
}
   1701a:	4628      	mov	r0, r5
   1701c:	b007      	add	sp, #28
   1701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   17022:	9901      	ldr	r1, [sp, #4]
   17024:	2900      	cmp	r1, #0
   17026:	d0f8      	beq.n	1701a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17028:	4a06      	ldr	r2, [pc, #24]	; (17044 <att_write_req+0xb8>)
   1702a:	4620      	mov	r0, r4
   1702c:	f00f f894 	bl	26158 <bt_att_chan_send_rsp>
   17030:	e7f3      	b.n	1701a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   17032:	250e      	movs	r5, #14
   17034:	e7f1      	b.n	1701a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17036:	2512      	movs	r5, #18
   17038:	e7ef      	b.n	1701a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1703a:	2501      	movs	r5, #1
   1703c:	e7ed      	b.n	1701a <att_write_req+0x8e>
   1703e:	bf00      	nop
   17040:	000264c1 	.word	0x000264c1
   17044:	00026405 	.word	0x00026405

00017048 <bt_att_create_pdu>:
{
   17048:	b570      	push	{r4, r5, r6, lr}
   1704a:	460e      	mov	r6, r1
   1704c:	4615      	mov	r5, r2
	att = att_get(conn);
   1704e:	f7ff fd35 	bl	16abc <att_get>
	if (!att) {
   17052:	b1c0      	cbz	r0, 17086 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17054:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   17056:	1c69      	adds	r1, r5, #1
   17058:	b15b      	cbz	r3, 17072 <bt_att_create_pdu+0x2a>
   1705a:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1705e:	d008      	beq.n	17072 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17060:	681b      	ldr	r3, [r3, #0]
   17062:	b10b      	cbz	r3, 17068 <bt_att_create_pdu+0x20>
   17064:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   17068:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   1706c:	4291      	cmp	r1, r2
   1706e:	d90c      	bls.n	1708a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17070:	b98b      	cbnz	r3, 17096 <bt_att_create_pdu+0x4e>
   17072:	4a0e      	ldr	r2, [pc, #56]	; (170ac <bt_att_create_pdu+0x64>)
   17074:	4b0e      	ldr	r3, [pc, #56]	; (170b0 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   17076:	480f      	ldr	r0, [pc, #60]	; (170b4 <bt_att_create_pdu+0x6c>)
   17078:	1ad2      	subs	r2, r2, r3
   1707a:	08d2      	lsrs	r2, r2, #3
   1707c:	0192      	lsls	r2, r2, #6
   1707e:	f042 0202 	orr.w	r2, r2, #2
   17082:	f00d fd65 	bl	24b50 <log_1>
}
   17086:	2000      	movs	r0, #0
   17088:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1708a:	462a      	mov	r2, r5
   1708c:	4631      	mov	r1, r6
}
   1708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   17092:	f7ff be45 	b.w	16d20 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17096:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1709a:	d004      	beq.n	170a6 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1709c:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   170a0:	b10c      	cbz	r4, 170a6 <bt_att_create_pdu+0x5e>
   170a2:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   170a6:	4618      	mov	r0, r3
   170a8:	4623      	mov	r3, r4
   170aa:	e7dd      	b.n	17068 <bt_att_create_pdu+0x20>
   170ac:	00028618 	.word	0x00028618
   170b0:	00028618 	.word	0x00028618
   170b4:	0002e894 	.word	0x0002e894

000170b8 <att_read_group_req>:
{
   170b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   170bc:	7b0c      	ldrb	r4, [r1, #12]
   170be:	3c04      	subs	r4, #4
   170c0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   170c2:	2c02      	cmp	r4, #2
{
   170c4:	4605      	mov	r5, r0
   170c6:	b08c      	sub	sp, #48	; 0x30
   170c8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   170ca:	d001      	beq.n	170d0 <att_read_group_req+0x18>
   170cc:	2c10      	cmp	r4, #16
   170ce:	d16f      	bne.n	171b0 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   170d0:	2104      	movs	r1, #4
   170d2:	3008      	adds	r0, #8
   170d4:	f004 ff36 	bl	1bf44 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   170d8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   170dc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   170de:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   170e0:	1d01      	adds	r1, r0, #4
   170e2:	4622      	mov	r2, r4
   170e4:	4640      	mov	r0, r8
   170e6:	f00e fcda 	bl	25a9e <bt_uuid_create>
   170ea:	2800      	cmp	r0, #0
   170ec:	d062      	beq.n	171b4 <att_read_group_req+0xfc>
	if (!start || !end) {
   170ee:	2e00      	cmp	r6, #0
   170f0:	d03a      	beq.n	17168 <att_read_group_req+0xb0>
   170f2:	2400      	movs	r4, #0
   170f4:	2f00      	cmp	r7, #0
   170f6:	d036      	beq.n	17166 <att_read_group_req+0xae>
	if (start > end) {
   170f8:	42b7      	cmp	r7, r6
   170fa:	d335      	bcc.n	17168 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   170fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17100:	a901      	add	r1, sp, #4
   17102:	4640      	mov	r0, r8
   17104:	f88d 4004 	strb.w	r4, [sp, #4]
   17108:	f8ad 3006 	strh.w	r3, [sp, #6]
   1710c:	f00e fc9d 	bl	25a4a <bt_uuid_cmp>
   17110:	2800      	cmp	r0, #0
   17112:	d134      	bne.n	1717e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   17114:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   17116:	2214      	movs	r2, #20
   17118:	2100      	movs	r1, #0
   1711a:	a807      	add	r0, sp, #28
   1711c:	f00e fc2d 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17120:	2201      	movs	r2, #1
   17122:	2111      	movs	r1, #17
   17124:	4620      	mov	r0, r4
   17126:	f7ff ff8f 	bl	17048 <bt_att_create_pdu>
   1712a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1712c:	2800      	cmp	r0, #0
   1712e:	d041      	beq.n	171b4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   17130:	2101      	movs	r1, #1
   17132:	3008      	adds	r0, #8
	data.uuid = uuid;
   17134:	e9cd 5807 	strd	r5, r8, [sp, #28]
   17138:	f004 ff26 	bl	1bf88 <net_buf_simple_add>
	data.rsp->len = 0U;
   1713c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17140:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17142:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   17144:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17148:	4a1b      	ldr	r2, [pc, #108]	; (171b8 <att_read_group_req+0x100>)
	data.group = NULL;
   1714a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1714e:	4639      	mov	r1, r7
   17150:	4630      	mov	r0, r6
   17152:	f00f f84a 	bl	261ea <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   17156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17158:	781c      	ldrb	r4, [r3, #0]
   1715a:	bb1c      	cbnz	r4, 171a4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1715c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1715e:	f004 fde3 	bl	1bd28 <net_buf_unref>
	if (!req) {
   17162:	230a      	movs	r3, #10
   17164:	e018      	b.n	17198 <att_read_group_req+0xe0>
			*err = 0U;
   17166:	463e      	mov	r6, r7
	if (!req) {
   17168:	2301      	movs	r3, #1
   1716a:	4632      	mov	r2, r6
   1716c:	2110      	movs	r1, #16
   1716e:	4628      	mov	r0, r5
   17170:	f7ff fe38 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   17174:	2400      	movs	r4, #0
}
   17176:	4620      	mov	r0, r4
   17178:	b00c      	add	sp, #48	; 0x30
   1717a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1717e:	f642 0301 	movw	r3, #10241	; 0x2801
   17182:	a907      	add	r1, sp, #28
   17184:	4640      	mov	r0, r8
   17186:	f88d 401c 	strb.w	r4, [sp, #28]
   1718a:	f8ad 301e 	strh.w	r3, [sp, #30]
   1718e:	f00e fc5c 	bl	25a4a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   17192:	2800      	cmp	r0, #0
   17194:	d0be      	beq.n	17114 <att_read_group_req+0x5c>
	if (!req) {
   17196:	2310      	movs	r3, #16
   17198:	4632      	mov	r2, r6
   1719a:	2110      	movs	r1, #16
   1719c:	4628      	mov	r0, r5
   1719e:	f7ff fe21 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   171a2:	e7e8      	b.n	17176 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   171a4:	4a05      	ldr	r2, [pc, #20]	; (171bc <att_read_group_req+0x104>)
   171a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   171a8:	4628      	mov	r0, r5
   171aa:	f00e ffd5 	bl	26158 <bt_att_chan_send_rsp>
	return 0;
   171ae:	e7e1      	b.n	17174 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   171b0:	2404      	movs	r4, #4
   171b2:	e7e0      	b.n	17176 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   171b4:	240e      	movs	r4, #14
   171b6:	e7de      	b.n	17176 <att_read_group_req+0xbe>
   171b8:	00016805 	.word	0x00016805
   171bc:	00026405 	.word	0x00026405

000171c0 <att_read_mult_req>:
{
   171c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   171c4:	6886      	ldr	r6, [r0, #8]
{
   171c6:	b085      	sub	sp, #20
   171c8:	4604      	mov	r4, r0
   171ca:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   171cc:	4630      	mov	r0, r6
   171ce:	2101      	movs	r1, #1
   171d0:	f00f fea4 	bl	26f1c <bt_gatt_change_aware>
   171d4:	2800      	cmp	r0, #0
   171d6:	d038      	beq.n	1724a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   171d8:	2210      	movs	r2, #16
   171da:	2100      	movs	r1, #0
   171dc:	4668      	mov	r0, sp
   171de:	f00e fbcc 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   171e2:	2200      	movs	r2, #0
   171e4:	210f      	movs	r1, #15
   171e6:	4630      	mov	r0, r6
   171e8:	f7ff ff2e 	bl	17048 <bt_att_create_pdu>
   171ec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   171ee:	b370      	cbz	r0, 1724e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   171f0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 17258 <att_read_mult_req+0x98>
	data.chan = chan;
   171f4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   171f6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   171fa:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   171fe:	89ab      	ldrh	r3, [r5, #12]
   17200:	2b01      	cmp	r3, #1
   17202:	d805      	bhi.n	17210 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17204:	4a13      	ldr	r2, [pc, #76]	; (17254 <att_read_mult_req+0x94>)
   17206:	9902      	ldr	r1, [sp, #8]
   17208:	4620      	mov	r0, r4
   1720a:	f00e ffa5 	bl	26158 <bt_att_chan_send_rsp>
   1720e:	e018      	b.n	17242 <att_read_mult_req+0x82>
   17210:	4638      	mov	r0, r7
   17212:	f010 fa2a 	bl	2766a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17216:	466b      	mov	r3, sp
   17218:	464a      	mov	r2, r9
   1721a:	4601      	mov	r1, r0
   1721c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1721e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17222:	f00e ffe2 	bl	261ea <bt_gatt_foreach_attr>
		if (data.err) {
   17226:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1722a:	2b00      	cmp	r3, #0
   1722c:	d0e7      	beq.n	171fe <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   1722e:	9802      	ldr	r0, [sp, #8]
   17230:	f004 fd7a 	bl	1bd28 <net_buf_unref>
	if (!req) {
   17234:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17238:	4632      	mov	r2, r6
   1723a:	210e      	movs	r1, #14
   1723c:	4620      	mov	r0, r4
   1723e:	f7ff fdd1 	bl	16de4 <send_err_rsp.part.0>
	return 0;
   17242:	2000      	movs	r0, #0
}
   17244:	b005      	add	sp, #20
   17246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1724a:	2012      	movs	r0, #18
   1724c:	e7fa      	b.n	17244 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   1724e:	200e      	movs	r0, #14
   17250:	e7f8      	b.n	17244 <att_read_mult_req+0x84>
   17252:	bf00      	nop
   17254:	00026405 	.word	0x00026405
   17258:	0002659f 	.word	0x0002659f

0001725c <att_read_rsp>:
{
   1725c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17260:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   17264:	4605      	mov	r5, r0
   17266:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17268:	4640      	mov	r0, r8
   1726a:	2101      	movs	r1, #1
{
   1726c:	4614      	mov	r4, r2
   1726e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17270:	f00f fe54 	bl	26f1c <bt_gatt_change_aware>
   17274:	b390      	cbz	r0, 172dc <att_read_rsp+0x80>
	if (!handle) {
   17276:	b39e      	cbz	r6, 172e0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   17278:	2210      	movs	r2, #16
   1727a:	2100      	movs	r1, #0
   1727c:	4668      	mov	r0, sp
   1727e:	f00e fb7c 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17282:	2200      	movs	r2, #0
   17284:	4621      	mov	r1, r4
   17286:	4640      	mov	r0, r8
   17288:	f7ff fede 	bl	17048 <bt_att_create_pdu>
   1728c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1728e:	b348      	cbz	r0, 172e4 <att_read_rsp+0x88>
	data.offset = offset;
   17290:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17294:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17298:	2301      	movs	r3, #1
   1729a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1729e:	4a12      	ldr	r2, [pc, #72]	; (172e8 <att_read_rsp+0x8c>)
	data.chan = chan;
   172a0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   172a2:	466b      	mov	r3, sp
   172a4:	4631      	mov	r1, r6
   172a6:	4630      	mov	r0, r6
   172a8:	f00e ff9f 	bl	261ea <bt_gatt_foreach_attr>
	if (data.err) {
   172ac:	f89d 400c 	ldrb.w	r4, [sp, #12]
   172b0:	b174      	cbz	r4, 172d0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   172b2:	9802      	ldr	r0, [sp, #8]
   172b4:	f004 fd38 	bl	1bd28 <net_buf_unref>
	if (!req) {
   172b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   172bc:	4632      	mov	r2, r6
   172be:	4639      	mov	r1, r7
   172c0:	4628      	mov	r0, r5
   172c2:	f7ff fd8f 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   172c6:	2400      	movs	r4, #0
}
   172c8:	4620      	mov	r0, r4
   172ca:	b004      	add	sp, #16
   172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   172d0:	4a06      	ldr	r2, [pc, #24]	; (172ec <att_read_rsp+0x90>)
   172d2:	9902      	ldr	r1, [sp, #8]
   172d4:	4628      	mov	r0, r5
   172d6:	f00e ff3f 	bl	26158 <bt_att_chan_send_rsp>
	return 0;
   172da:	e7f5      	b.n	172c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   172dc:	2412      	movs	r4, #18
   172de:	e7f3      	b.n	172c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   172e0:	2401      	movs	r4, #1
   172e2:	e7f1      	b.n	172c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   172e4:	240e      	movs	r4, #14
   172e6:	e7ef      	b.n	172c8 <att_read_rsp+0x6c>
   172e8:	0002659f 	.word	0x0002659f
   172ec:	00026405 	.word	0x00026405

000172f0 <att_read_type_req>:
{
   172f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   172f4:	7b0c      	ldrb	r4, [r1, #12]
   172f6:	3c04      	subs	r4, #4
   172f8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   172fa:	2c02      	cmp	r4, #2
{
   172fc:	4605      	mov	r5, r0
   172fe:	b08c      	sub	sp, #48	; 0x30
   17300:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17302:	d001      	beq.n	17308 <att_read_type_req+0x18>
   17304:	2c10      	cmp	r4, #16
   17306:	d150      	bne.n	173aa <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   17308:	2104      	movs	r1, #4
   1730a:	3008      	adds	r0, #8
   1730c:	f004 fe1a 	bl	1bf44 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17310:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17314:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17316:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17318:	1d01      	adds	r1, r0, #4
   1731a:	4622      	mov	r2, r4
   1731c:	4640      	mov	r0, r8
   1731e:	f00e fbbe 	bl	25a9e <bt_uuid_create>
   17322:	b188      	cbz	r0, 17348 <att_read_type_req+0x58>
	if (!start || !end) {
   17324:	b19e      	cbz	r6, 1734e <att_read_type_req+0x5e>
   17326:	b18f      	cbz	r7, 1734c <att_read_type_req+0x5c>
	if (start > end) {
   17328:	42be      	cmp	r6, r7
   1732a:	d810      	bhi.n	1734e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1732c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1732e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   17330:	2100      	movs	r1, #0
   17332:	eb0d 0002 	add.w	r0, sp, r2
   17336:	f00e fb20 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1733a:	2201      	movs	r2, #1
   1733c:	2109      	movs	r1, #9
   1733e:	4620      	mov	r0, r4
   17340:	f7ff fe82 	bl	17048 <bt_att_create_pdu>
   17344:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   17346:	b968      	cbnz	r0, 17364 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   17348:	240e      	movs	r4, #14
   1734a:	e007      	b.n	1735c <att_read_type_req+0x6c>
			*err = 0U;
   1734c:	463e      	mov	r6, r7
	if (!req) {
   1734e:	2301      	movs	r3, #1
   17350:	4632      	mov	r2, r6
   17352:	2108      	movs	r1, #8
   17354:	4628      	mov	r0, r5
   17356:	f7ff fd45 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   1735a:	2400      	movs	r4, #0
}
   1735c:	4620      	mov	r0, r4
   1735e:	b00c      	add	sp, #48	; 0x30
   17360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   17364:	2101      	movs	r1, #1
   17366:	3008      	adds	r0, #8
	data.uuid = uuid;
   17368:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1736c:	f004 fe0c 	bl	1bf88 <net_buf_simple_add>
	data.rsp->len = 0U;
   17370:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17374:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17376:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17378:	4a0d      	ldr	r2, [pc, #52]	; (173b0 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   1737a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1737e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17380:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17384:	4630      	mov	r0, r6
   17386:	ab06      	add	r3, sp, #24
   17388:	f00e ff2f 	bl	261ea <bt_gatt_foreach_attr>
	if (data.err) {
   1738c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   17390:	b12c      	cbz	r4, 1739e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   17392:	9808      	ldr	r0, [sp, #32]
   17394:	f004 fcc8 	bl	1bd28 <net_buf_unref>
	if (!req) {
   17398:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1739c:	e7d8      	b.n	17350 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1739e:	4a05      	ldr	r2, [pc, #20]	; (173b4 <att_read_type_req+0xc4>)
   173a0:	9908      	ldr	r1, [sp, #32]
   173a2:	4628      	mov	r0, r5
   173a4:	f00e fed8 	bl	26158 <bt_att_chan_send_rsp>
	return 0;
   173a8:	e7d8      	b.n	1735c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   173aa:	2404      	movs	r4, #4
   173ac:	e7d6      	b.n	1735c <att_read_type_req+0x6c>
   173ae:	bf00      	nop
   173b0:	000168b1 	.word	0x000168b1
   173b4:	00026405 	.word	0x00026405

000173b8 <att_find_type_req>:
{
   173b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173bc:	4688      	mov	r8, r1
   173be:	b086      	sub	sp, #24
   173c0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   173c2:	2106      	movs	r1, #6
   173c4:	f108 0008 	add.w	r0, r8, #8
   173c8:	f004 fdbc 	bl	1bf44 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   173cc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   173ce:	b317      	cbz	r7, 17416 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   173d0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   173d4:	f1b9 0f00 	cmp.w	r9, #0
   173d8:	d01c      	beq.n	17414 <att_find_type_req+0x5c>
	if (start > end) {
   173da:	45b9      	cmp	r9, r7
   173dc:	d31b      	bcc.n	17416 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   173de:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   173e0:	f8ad 3002 	strh.w	r3, [sp, #2]
   173e4:	2400      	movs	r4, #0
   173e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   173ea:	a901      	add	r1, sp, #4
   173ec:	4668      	mov	r0, sp
	value = buf->data;
   173ee:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   173f2:	f88d 4000 	strb.w	r4, [sp]
   173f6:	f88d 4004 	strb.w	r4, [sp, #4]
   173fa:	f8ad 3006 	strh.w	r3, [sp, #6]
   173fe:	f00e fb24 	bl	25a4a <bt_uuid_cmp>
   17402:	4606      	mov	r6, r0
   17404:	b190      	cbz	r0, 1742c <att_find_type_req+0x74>
	if (!req) {
   17406:	230a      	movs	r3, #10
   17408:	463a      	mov	r2, r7
   1740a:	2106      	movs	r1, #6
   1740c:	4628      	mov	r0, r5
   1740e:	f7ff fce9 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   17412:	e007      	b.n	17424 <att_find_type_req+0x6c>
			*err = 0U;
   17414:	464f      	mov	r7, r9
	if (!req) {
   17416:	2301      	movs	r3, #1
   17418:	463a      	mov	r2, r7
   1741a:	2106      	movs	r1, #6
   1741c:	4628      	mov	r0, r5
   1741e:	f7ff fce1 	bl	16de4 <send_err_rsp.part.0>
		return 0;
   17422:	2400      	movs	r4, #0
}
   17424:	4620      	mov	r0, r4
   17426:	b006      	add	sp, #24
   17428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1742c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   17430:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   17434:	4601      	mov	r1, r0
   17436:	2214      	movs	r2, #20
   17438:	a801      	add	r0, sp, #4
   1743a:	f00e fa9e 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1743e:	4632      	mov	r2, r6
   17440:	2107      	movs	r1, #7
   17442:	4640      	mov	r0, r8
   17444:	f7ff fe00 	bl	17048 <bt_att_create_pdu>
   17448:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1744a:	b1e0      	cbz	r0, 17486 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1744c:	230a      	movs	r3, #10
   1744e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17452:	4a0e      	ldr	r2, [pc, #56]	; (1748c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   17454:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17458:	ab01      	add	r3, sp, #4
   1745a:	4649      	mov	r1, r9
   1745c:	4638      	mov	r0, r7
	data.value = value;
   1745e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   17462:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17464:	f00e fec1 	bl	261ea <bt_gatt_foreach_attr>
	if (data.err) {
   17468:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1746c:	b12c      	cbz	r4, 1747a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1746e:	9802      	ldr	r0, [sp, #8]
   17470:	f004 fc5a 	bl	1bd28 <net_buf_unref>
	if (!req) {
   17474:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17478:	e7ce      	b.n	17418 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1747a:	4a05      	ldr	r2, [pc, #20]	; (17490 <att_find_type_req+0xd8>)
   1747c:	9902      	ldr	r1, [sp, #8]
   1747e:	4628      	mov	r0, r5
   17480:	f00e fe6a 	bl	26158 <bt_att_chan_send_rsp>
	return 0;
   17484:	e7ce      	b.n	17424 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   17486:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17488:	e7cc      	b.n	17424 <att_find_type_req+0x6c>
   1748a:	bf00      	nop
   1748c:	00016959 	.word	0x00016959
   17490:	00026405 	.word	0x00026405

00017494 <att_find_info_req>:
{
   17494:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   17496:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   17498:	881e      	ldrh	r6, [r3, #0]
{
   1749a:	b085      	sub	sp, #20
   1749c:	4605      	mov	r5, r0
	if (!start || !end) {
   1749e:	b19e      	cbz	r6, 174c8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   174a0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   174a2:	b184      	cbz	r4, 174c6 <att_find_info_req+0x32>
	if (start > end) {
   174a4:	42a6      	cmp	r6, r4
   174a6:	d80f      	bhi.n	174c8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   174a8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   174aa:	2210      	movs	r2, #16
   174ac:	2100      	movs	r1, #0
   174ae:	4668      	mov	r0, sp
   174b0:	f00e fa63 	bl	2597a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   174b4:	2200      	movs	r2, #0
   174b6:	2105      	movs	r1, #5
   174b8:	4638      	mov	r0, r7
   174ba:	f7ff fdc5 	bl	17048 <bt_att_create_pdu>
   174be:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   174c0:	b958      	cbnz	r0, 174da <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   174c2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   174c4:	e007      	b.n	174d6 <att_find_info_req+0x42>
			*err = 0U;
   174c6:	4626      	mov	r6, r4
	if (!req) {
   174c8:	2301      	movs	r3, #1
   174ca:	4632      	mov	r2, r6
   174cc:	2104      	movs	r1, #4
   174ce:	4628      	mov	r0, r5
   174d0:	f7ff fc88 	bl	16de4 <send_err_rsp.part.0>
	return 0;
   174d4:	2000      	movs	r0, #0
}
   174d6:	b005      	add	sp, #20
   174d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   174da:	4621      	mov	r1, r4
   174dc:	4a09      	ldr	r2, [pc, #36]	; (17504 <att_find_info_req+0x70>)
	data.chan = chan;
   174de:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   174e0:	466b      	mov	r3, sp
   174e2:	4630      	mov	r0, r6
   174e4:	f00e fe81 	bl	261ea <bt_gatt_foreach_attr>
	if (!data.rsp) {
   174e8:	9c02      	ldr	r4, [sp, #8]
   174ea:	b924      	cbnz	r4, 174f6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   174ec:	9801      	ldr	r0, [sp, #4]
   174ee:	f004 fc1b 	bl	1bd28 <net_buf_unref>
	if (!req) {
   174f2:	230a      	movs	r3, #10
   174f4:	e7e9      	b.n	174ca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   174f6:	4a04      	ldr	r2, [pc, #16]	; (17508 <att_find_info_req+0x74>)
   174f8:	9901      	ldr	r1, [sp, #4]
   174fa:	4628      	mov	r0, r5
   174fc:	f00e fe2c 	bl	26158 <bt_att_chan_send_rsp>
   17500:	e7e8      	b.n	174d4 <att_find_info_req+0x40>
   17502:	bf00      	nop
   17504:	00026317 	.word	0x00026317
   17508:	00026405 	.word	0x00026405

0001750c <att_mtu_req>:
{
   1750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1750e:	6803      	ldr	r3, [r0, #0]
{
   17510:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   17512:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17514:	f3bf 8f5b 	dmb	ish
   17518:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1751c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17520:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   17524:	071b      	lsls	r3, r3, #28
   17526:	d421      	bmi.n	1756c <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   17528:	688b      	ldr	r3, [r1, #8]
   1752a:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1752c:	2e16      	cmp	r6, #22
   1752e:	d91f      	bls.n	17570 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17530:	2202      	movs	r2, #2
   17532:	2103      	movs	r1, #3
   17534:	f7ff fd88 	bl	17048 <bt_att_create_pdu>
	if (!pdu) {
   17538:	4607      	mov	r7, r0
   1753a:	b1d8      	cbz	r0, 17574 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   1753c:	2102      	movs	r1, #2
   1753e:	3008      	adds	r0, #8
   17540:	f004 fd22 	bl	1bf88 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17544:	2341      	movs	r3, #65	; 0x41
   17546:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   17548:	4a0b      	ldr	r2, [pc, #44]	; (17578 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1754a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1754c:	4639      	mov	r1, r7
   1754e:	4620      	mov	r0, r4
   17550:	f00e fe02 	bl	26158 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17554:	2e41      	cmp	r6, #65	; 0x41
   17556:	bf28      	it	cs
   17558:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1755a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1755c:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17560:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   17564:	f00e fe06 	bl	26174 <att_chan_mtu_updated>
	return 0;
   17568:	4628      	mov	r0, r5
}
   1756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1756c:	2006      	movs	r0, #6
   1756e:	e7fc      	b.n	1756a <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   17570:	2004      	movs	r0, #4
   17572:	e7fa      	b.n	1756a <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   17574:	200e      	movs	r0, #14
   17576:	e7f8      	b.n	1756a <att_mtu_req+0x5e>
   17578:	00026405 	.word	0x00026405

0001757c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1757c:	b513      	push	{r0, r1, r4, lr}
   1757e:	4602      	mov	r2, r0
   17580:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17582:	4808      	ldr	r0, [pc, #32]	; (175a4 <bt_att_req_alloc+0x28>)
   17584:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   17586:	2400      	movs	r4, #0
   17588:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1758a:	f009 fc93 	bl	20eb4 <k_mem_slab_alloc>
   1758e:	4601      	mov	r1, r0
   17590:	b930      	cbnz	r0, 175a0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   17592:	9801      	ldr	r0, [sp, #4]
   17594:	221c      	movs	r2, #28
   17596:	f00e f9f0 	bl	2597a <memset>

	return req;
   1759a:	9801      	ldr	r0, [sp, #4]
}
   1759c:	b002      	add	sp, #8
   1759e:	bd10      	pop	{r4, pc}
		return NULL;
   175a0:	4620      	mov	r0, r4
   175a2:	e7fb      	b.n	1759c <bt_att_req_alloc+0x20>
   175a4:	20000660 	.word	0x20000660

000175a8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   175a8:	b507      	push	{r0, r1, r2, lr}
   175aa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   175ac:	6880      	ldr	r0, [r0, #8]
   175ae:	b120      	cbz	r0, 175ba <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   175b0:	f004 fbba 	bl	1bd28 <net_buf_unref>
		req->buf = NULL;
   175b4:	9b01      	ldr	r3, [sp, #4]
   175b6:	2200      	movs	r2, #0
   175b8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   175ba:	4803      	ldr	r0, [pc, #12]	; (175c8 <bt_att_req_free+0x20>)
   175bc:	a901      	add	r1, sp, #4
   175be:	f009 fce5 	bl	20f8c <k_mem_slab_free>
}
   175c2:	b003      	add	sp, #12
   175c4:	f85d fb04 	ldr.w	pc, [sp], #4
   175c8:	20000660 	.word	0x20000660

000175cc <att_handle_rsp>:
{
   175cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175d0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   175d2:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   175d6:	460f      	mov	r7, r1
   175d8:	4690      	mov	r8, r2
   175da:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   175dc:	f00a ff14 	bl	22408 <k_work_cancel_delayable>
	if (!chan->req) {
   175e0:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   175e4:	b9e5      	cbnz	r5, 17620 <att_handle_rsp+0x54>
   175e6:	4919      	ldr	r1, [pc, #100]	; (1764c <att_handle_rsp+0x80>)
   175e8:	4819      	ldr	r0, [pc, #100]	; (17650 <att_handle_rsp+0x84>)
   175ea:	1a40      	subs	r0, r0, r1
   175ec:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   175ee:	0180      	lsls	r0, r0, #6
   175f0:	f040 0102 	orr.w	r1, r0, #2
   175f4:	4817      	ldr	r0, [pc, #92]	; (17654 <att_handle_rsp+0x88>)
   175f6:	f00d fa9e 	bl	24b36 <log_0>
	bt_att_func_t func = NULL;
   175fa:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   175fc:	6820      	ldr	r0, [r4, #0]
   175fe:	f00e ff33 	bl	26468 <att_req_send_process>
	if (func) {
   17602:	f1ba 0f00 	cmp.w	sl, #0
   17606:	d007      	beq.n	17618 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   17608:	6820      	ldr	r0, [r4, #0]
   1760a:	f8cd 9000 	str.w	r9, [sp]
   1760e:	6800      	ldr	r0, [r0, #0]
   17610:	4643      	mov	r3, r8
   17612:	463a      	mov	r2, r7
   17614:	4631      	mov	r1, r6
   17616:	47d0      	blx	sl
}
   17618:	2000      	movs	r0, #0
   1761a:	b003      	add	sp, #12
   1761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   17620:	4b0d      	ldr	r3, [pc, #52]	; (17658 <att_handle_rsp+0x8c>)
   17622:	429d      	cmp	r5, r3
   17624:	f04f 0b00 	mov.w	fp, #0
   17628:	d103      	bne.n	17632 <att_handle_rsp+0x66>
		chan->req = NULL;
   1762a:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   1762e:	46da      	mov	sl, fp
		goto process;
   17630:	e7e4      	b.n	175fc <att_handle_rsp+0x30>
	func = chan->req->func;
   17632:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   17636:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   1763a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1763c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   17640:	f7ff ffb2 	bl	175a8 <bt_att_req_free>
	chan->req = NULL;
   17644:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   17648:	e7d8      	b.n	175fc <att_handle_rsp+0x30>
   1764a:	bf00      	nop
   1764c:	00028618 	.word	0x00028618
   17650:	00028618 	.word	0x00028618
   17654:	0002e8af 	.word	0x0002e8af
   17658:	200021cc 	.word	0x200021cc

0001765c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1765c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
{
   17660:	b570      	push	{r4, r5, r6, lr}
   17662:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   17664:	b313      	cbz	r3, 176ac <att_error_rsp+0x50>
   17666:	4a16      	ldr	r2, [pc, #88]	; (176c0 <att_error_rsp+0x64>)
   17668:	4293      	cmp	r3, r2
   1766a:	d01f      	beq.n	176ac <att_error_rsp+0x50>
	err = rsp->error;
   1766c:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1766e:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   17670:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
   17672:	2d05      	cmp	r5, #5
   17674:	d006      	beq.n	17684 <att_error_rsp+0x28>
   17676:	2d0f      	cmp	r5, #15
   17678:	d119      	bne.n	176ae <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   1767a:	7a43      	ldrb	r3, [r0, #9]
   1767c:	2b01      	cmp	r3, #1
   1767e:	d816      	bhi.n	176ae <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   17680:	2102      	movs	r1, #2
   17682:	e007      	b.n	17694 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   17684:	7a43      	ldrb	r3, [r0, #9]
   17686:	2b01      	cmp	r3, #1
   17688:	d9fa      	bls.n	17680 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1768a:	2b02      	cmp	r3, #2
   1768c:	d00c      	beq.n	176a8 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1768e:	2b03      	cmp	r3, #3
   17690:	d10d      	bne.n	176ae <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   17692:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   17694:	f00e fba7 	bl	25de6 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   17698:	b948      	cbnz	r0, 176ae <att_error_rsp+0x52>
		chan->req->retrying = true;
   1769a:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
   1769e:	7c13      	ldrb	r3, [r2, #16]
   176a0:	f043 0301 	orr.w	r3, r3, #1
   176a4:	7413      	strb	r3, [r2, #16]
}
   176a6:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   176a8:	2103      	movs	r1, #3
   176aa:	e7f3      	b.n	17694 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   176ac:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   176ae:	2200      	movs	r2, #0
   176b0:	462b      	mov	r3, r5
   176b2:	4620      	mov	r0, r4
   176b4:	4611      	mov	r1, r2
}
   176b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   176ba:	f7ff bf87 	b.w	175cc <att_handle_rsp>
   176be:	bf00      	nop
   176c0:	200021cc 	.word	0x200021cc

000176c4 <bt_att_disconnected>:
{
   176c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   176c6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   176ca:	b085      	sub	sp, #20
   176cc:	4604      	mov	r4, r0
	if (!att_chan->att) {
   176ce:	b38d      	cbz	r5, 17734 <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   176d0:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   176d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   176d8:	f00e fc87 	bl	25fea <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   176dc:	f1a4 0608 	sub.w	r6, r4, #8
   176e0:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   176e4:	2200      	movs	r2, #0
   176e6:	2300      	movs	r3, #0
   176e8:	4638      	mov	r0, r7
   176ea:	f004 fa8b 	bl	1bc04 <net_buf_get>
   176ee:	4602      	mov	r2, r0
   176f0:	bb10      	cbnz	r0, 17738 <bt_att_disconnected+0x74>
	if (chan->req) {
   176f2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   176f6:	b123      	cbz	r3, 17702 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   176f8:	4601      	mov	r1, r0
   176fa:	230e      	movs	r3, #14
   176fc:	4630      	mov	r0, r6
   176fe:	f7ff ff65 	bl	175cc <att_handle_rsp>
	chan->att = NULL;
   17702:	2300      	movs	r3, #0
   17704:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   17708:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1770a:	b99b      	cbnz	r3, 17734 <bt_att_disconnected+0x70>
	att_reset(att);
   1770c:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1770e:	9803      	ldr	r0, [sp, #12]
   17710:	2200      	movs	r2, #0
   17712:	2300      	movs	r3, #0
   17714:	300c      	adds	r0, #12
   17716:	f004 fa75 	bl	1bc04 <net_buf_get>
   1771a:	b980      	cbnz	r0, 1773e <bt_att_disconnected+0x7a>
	att->conn = NULL;
   1771c:	9a03      	ldr	r2, [sp, #12]
   1771e:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   17720:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   17722:	685d      	ldr	r5, [r3, #4]
   17724:	b975      	cbnz	r5, 17744 <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   17726:	4811      	ldr	r0, [pc, #68]	; (1776c <bt_att_disconnected+0xa8>)
   17728:	a903      	add	r1, sp, #12
   1772a:	f009 fc2f 	bl	20f8c <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1772e:	6820      	ldr	r0, [r4, #0]
   17730:	f002 fa42 	bl	19bb8 <bt_gatt_disconnected>
}
   17734:	b005      	add	sp, #20
   17736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   17738:	f004 faf6 	bl	1bd28 <net_buf_unref>
   1773c:	e7d2      	b.n	176e4 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1773e:	f004 faf3 	bl	1bd28 <net_buf_unref>
   17742:	e7e4      	b.n	1770e <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17744:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   17746:	686e      	ldr	r6, [r5, #4]
   17748:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1774a:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1774c:	428d      	cmp	r5, r1
	list->tail = node;
   1774e:	bf08      	it	eq
   17750:	609a      	streq	r2, [r3, #8]
   17752:	b136      	cbz	r6, 17762 <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17754:	69ab      	ldr	r3, [r5, #24]
   17756:	9300      	str	r3, [sp, #0]
   17758:	2300      	movs	r3, #0
   1775a:	461a      	mov	r2, r3
   1775c:	210e      	movs	r1, #14
   1775e:	4618      	mov	r0, r3
   17760:	47b0      	blx	r6
		bt_att_req_free(req);
   17762:	4628      	mov	r0, r5
   17764:	f7ff ff20 	bl	175a8 <bt_att_req_free>
   17768:	e7da      	b.n	17720 <bt_att_disconnected+0x5c>
   1776a:	bf00      	nop
   1776c:	20000620 	.word	0x20000620

00017770 <att_timeout>:
   17770:	4b08      	ldr	r3, [pc, #32]	; (17794 <att_timeout+0x24>)
   17772:	4909      	ldr	r1, [pc, #36]	; (17798 <att_timeout+0x28>)
{
   17774:	b510      	push	{r4, lr}
   17776:	1ac9      	subs	r1, r1, r3
   17778:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   1777a:	0189      	lsls	r1, r1, #6
{
   1777c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1777e:	f041 0101 	orr.w	r1, r1, #1
   17782:	4806      	ldr	r0, [pc, #24]	; (1779c <att_timeout+0x2c>)
   17784:	f00d f9d7 	bl	24b36 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17788:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   17790:	f7ff bf98 	b.w	176c4 <bt_att_disconnected>
   17794:	00028618 	.word	0x00028618
   17798:	00028618 	.word	0x00028618
   1779c:	0002e8c6 	.word	0x0002e8c6

000177a0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   177a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   177a4:	460c      	mov	r4, r1
   177a6:	4617      	mov	r7, r2
   177a8:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   177aa:	4605      	mov	r5, r0
   177ac:	b958      	cbnz	r0, 177c6 <bt_att_send+0x26>
   177ae:	492f      	ldr	r1, [pc, #188]	; (1786c <bt_att_send+0xcc>)
   177b0:	482f      	ldr	r0, [pc, #188]	; (17870 <bt_att_send+0xd0>)
   177b2:	4a30      	ldr	r2, [pc, #192]	; (17874 <bt_att_send+0xd4>)
   177b4:	f640 434a 	movw	r3, #3146	; 0xc4a
   177b8:	f00c ff9e 	bl	246f8 <printk>
   177bc:	482d      	ldr	r0, [pc, #180]	; (17874 <bt_att_send+0xd4>)
   177be:	f640 414a 	movw	r1, #3146	; 0xc4a
   177c2:	f00d f98a 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(buf);
   177c6:	b95c      	cbnz	r4, 177e0 <bt_att_send+0x40>
   177c8:	492b      	ldr	r1, [pc, #172]	; (17878 <bt_att_send+0xd8>)
   177ca:	4829      	ldr	r0, [pc, #164]	; (17870 <bt_att_send+0xd0>)
   177cc:	4a29      	ldr	r2, [pc, #164]	; (17874 <bt_att_send+0xd4>)
   177ce:	f640 434b 	movw	r3, #3147	; 0xc4b
   177d2:	f00c ff91 	bl	246f8 <printk>
   177d6:	4827      	ldr	r0, [pc, #156]	; (17874 <bt_att_send+0xd4>)
   177d8:	f640 414b 	movw	r1, #3147	; 0xc4b
   177dc:	f00d f97d 	bl	24ada <assert_post_action>

	att = att_get(conn);
   177e0:	4628      	mov	r0, r5
   177e2:	f7ff f96b 	bl	16abc <att_get>
	if (!att) {
   177e6:	4606      	mov	r6, r0
   177e8:	b938      	cbnz	r0, 177fa <bt_att_send+0x5a>
		net_buf_unref(buf);
   177ea:	4620      	mov	r0, r4
   177ec:	f004 fa9c 	bl	1bd28 <net_buf_unref>
		return -ENOTCONN;
   177f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   177f4:	b002      	add	sp, #8
   177f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   177fa:	b147      	cbz	r7, 1780e <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   177fc:	f8cd 8000 	str.w	r8, [sp]
   17800:	463b      	mov	r3, r7
   17802:	4622      	mov	r2, r4
   17804:	2104      	movs	r1, #4
   17806:	4628      	mov	r0, r5
   17808:	f00e fb8d 	bl	25f26 <bt_l2cap_send_cb>
   1780c:	e7f2      	b.n	177f4 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1780e:	f100 070c 	add.w	r7, r0, #12
   17812:	4621      	mov	r1, r4
   17814:	4638      	mov	r0, r7
   17816:	f004 fa53 	bl	1bcc0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1781a:	2200      	movs	r2, #0
   1781c:	2300      	movs	r3, #0
   1781e:	4638      	mov	r0, r7
   17820:	f004 f9f0 	bl	1bc04 <net_buf_get>
	if (!buf) {
   17824:	4605      	mov	r5, r0
   17826:	b908      	cbnz	r0, 1782c <bt_att_send+0x8c>
	return 0;
   17828:	2000      	movs	r0, #0
   1782a:	e7e3      	b.n	177f4 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1782c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1782e:	b1c3      	cbz	r3, 17862 <bt_att_send+0xc2>
   17830:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   17834:	d015      	beq.n	17862 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17836:	681c      	ldr	r4, [r3, #0]
   17838:	b10c      	cbz	r4, 1783e <bt_att_send+0x9e>
   1783a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1783e:	2200      	movs	r2, #0
   17840:	4629      	mov	r1, r5
   17842:	f7fe ff25 	bl	16690 <chan_send>
		if (err >= 0) {
   17846:	2800      	cmp	r0, #0
   17848:	daee      	bge.n	17828 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1784a:	b154      	cbz	r4, 17862 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1784c:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   17850:	d004      	beq.n	1785c <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17852:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   17856:	b10b      	cbz	r3, 1785c <bt_att_send+0xbc>
   17858:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1785c:	4620      	mov	r0, r4
   1785e:	461c      	mov	r4, r3
   17860:	e7ed      	b.n	1783e <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   17862:	4629      	mov	r1, r5
   17864:	4638      	mov	r0, r7
   17866:	f010 fc1d 	bl	280a4 <k_queue_prepend>
   1786a:	e7dd      	b.n	17828 <bt_att_send+0x88>
   1786c:	0002e57e 	.word	0x0002e57e
   17870:	000290f5 	.word	0x000290f5
   17874:	0002e6ab 	.word	0x0002e6ab
   17878:	0002dc23 	.word	0x0002dc23

0001787c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1787c:	b538      	push	{r3, r4, r5, lr}
   1787e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   17880:	4605      	mov	r5, r0
   17882:	b958      	cbnz	r0, 1789c <bt_att_req_send+0x20>
   17884:	4916      	ldr	r1, [pc, #88]	; (178e0 <bt_att_req_send+0x64>)
   17886:	4817      	ldr	r0, [pc, #92]	; (178e4 <bt_att_req_send+0x68>)
   17888:	4a17      	ldr	r2, [pc, #92]	; (178e8 <bt_att_req_send+0x6c>)
   1788a:	f640 4367 	movw	r3, #3175	; 0xc67
   1788e:	f00c ff33 	bl	246f8 <printk>
   17892:	4815      	ldr	r0, [pc, #84]	; (178e8 <bt_att_req_send+0x6c>)
   17894:	f640 4167 	movw	r1, #3175	; 0xc67
   17898:	f00d f91f 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(req);
   1789c:	b95c      	cbnz	r4, 178b6 <bt_att_req_send+0x3a>
   1789e:	4913      	ldr	r1, [pc, #76]	; (178ec <bt_att_req_send+0x70>)
   178a0:	4810      	ldr	r0, [pc, #64]	; (178e4 <bt_att_req_send+0x68>)
   178a2:	4a11      	ldr	r2, [pc, #68]	; (178e8 <bt_att_req_send+0x6c>)
   178a4:	f640 4368 	movw	r3, #3176	; 0xc68
   178a8:	f00c ff26 	bl	246f8 <printk>
   178ac:	480e      	ldr	r0, [pc, #56]	; (178e8 <bt_att_req_send+0x6c>)
   178ae:	f640 4168 	movw	r1, #3176	; 0xc68
   178b2:	f00d f912 	bl	24ada <assert_post_action>

	att = att_get(conn);
   178b6:	4628      	mov	r0, r5
   178b8:	f7ff f900 	bl	16abc <att_get>
	if (!att) {
   178bc:	b160      	cbz	r0, 178d8 <bt_att_req_send+0x5c>
	parent->next = child;
   178be:	2300      	movs	r3, #0
   178c0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   178c2:	6883      	ldr	r3, [r0, #8]
   178c4:	b92b      	cbnz	r3, 178d2 <bt_att_req_send+0x56>
	list->head = node;
   178c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   178ca:	f00e fdcd 	bl	26468 <att_req_send_process>

	return 0;
   178ce:	2000      	movs	r0, #0
}
   178d0:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   178d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   178d4:	6084      	str	r4, [r0, #8]
}
   178d6:	e7f8      	b.n	178ca <bt_att_req_send+0x4e>
		return -ENOTCONN;
   178d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   178dc:	e7f8      	b.n	178d0 <bt_att_req_send+0x54>
   178de:	bf00      	nop
   178e0:	0002e57e 	.word	0x0002e57e
   178e4:	000290f5 	.word	0x000290f5
   178e8:	0002e6ab 	.word	0x0002e6ab
   178ec:	0002e66d 	.word	0x0002e66d

000178f0 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   178f0:	b510      	push	{r4, lr}
   178f2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   178f4:	b348      	cbz	r0, 1794a <bt_att_req_cancel+0x5a>
   178f6:	b341      	cbz	r1, 1794a <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   178f8:	f7ff f8e0 	bl	16abc <att_get>
	if (!att) {
   178fc:	b328      	cbz	r0, 1794a <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   178fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
   17900:	b15b      	cbz	r3, 1791a <bt_att_req_cancel+0x2a>
   17902:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   17906:	d008      	beq.n	1791a <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17908:	681b      	ldr	r3, [r3, #0]
   1790a:	b10b      	cbz	r3, 17910 <bt_att_req_cancel+0x20>
   1790c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   17910:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   17914:	4294      	cmp	r4, r2
   17916:	d005      	beq.n	17924 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17918:	b963      	cbnz	r3, 17934 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1791a:	4621      	mov	r1, r4
   1791c:	3004      	adds	r0, #4
   1791e:	f00e fb64 	bl	25fea <sys_slist_find_and_remove>
   17922:	e002      	b.n	1792a <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   17924:	4b09      	ldr	r3, [pc, #36]	; (1794c <bt_att_req_cancel+0x5c>)
   17926:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1792a:	4620      	mov	r0, r4
}
   1792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   17930:	f7ff be3a 	b.w	175a8 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17934:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   17938:	d004      	beq.n	17944 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1793a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1793e:	b10a      	cbz	r2, 17944 <bt_att_req_cancel+0x54>
   17940:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   17944:	4619      	mov	r1, r3
   17946:	4613      	mov	r3, r2
   17948:	e7e2      	b.n	17910 <bt_att_req_cancel+0x20>
}
   1794a:	bd10      	pop	{r4, pc}
   1794c:	200021cc 	.word	0x200021cc

00017950 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17950:	490a      	ldr	r1, [pc, #40]	; (1797c <db_hash_store+0x2c>)
   17952:	480b      	ldr	r0, [pc, #44]	; (17980 <db_hash_store+0x30>)
{
   17954:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17956:	2210      	movs	r2, #16
   17958:	f7fa ffb0 	bl	128bc <settings_save_one>
	if (err) {
   1795c:	4601      	mov	r1, r0
   1795e:	b158      	cbz	r0, 17978 <db_hash_store+0x28>
   17960:	4b08      	ldr	r3, [pc, #32]	; (17984 <db_hash_store+0x34>)
   17962:	4a09      	ldr	r2, [pc, #36]	; (17988 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   17964:	4809      	ldr	r0, [pc, #36]	; (1798c <db_hash_store+0x3c>)
   17966:	1ad2      	subs	r2, r2, r3
   17968:	08d2      	lsrs	r2, r2, #3
   1796a:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   1796c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   17970:	f042 0201 	orr.w	r2, r2, #1
   17974:	f00d b8ec 	b.w	24b50 <log_1>
}
   17978:	bd08      	pop	{r3, pc}
   1797a:	bf00      	nop
   1797c:	20001808 	.word	0x20001808
   17980:	0002e8d9 	.word	0x0002e8d9
   17984:	00028618 	.word	0x00028618
   17988:	00028638 	.word	0x00028638
   1798c:	0002e8e1 	.word	0x0002e8e1

00017990 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   17990:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17992:	490b      	ldr	r1, [pc, #44]	; (179c0 <db_hash_set+0x30>)
{
   17994:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17996:	4618      	mov	r0, r3
   17998:	2210      	movs	r2, #16
   1799a:	47a0      	blx	r4
	if (len < 0) {
   1799c:	1e04      	subs	r4, r0, #0
   1799e:	da0c      	bge.n	179ba <db_hash_set+0x2a>
   179a0:	4a08      	ldr	r2, [pc, #32]	; (179c4 <db_hash_set+0x34>)
   179a2:	4b09      	ldr	r3, [pc, #36]	; (179c8 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   179a4:	4809      	ldr	r0, [pc, #36]	; (179cc <db_hash_set+0x3c>)
   179a6:	1ad2      	subs	r2, r2, r3
   179a8:	08d2      	lsrs	r2, r2, #3
   179aa:	0192      	lsls	r2, r2, #6
   179ac:	f042 0201 	orr.w	r2, r2, #1
   179b0:	4621      	mov	r1, r4
   179b2:	f00d f8cd 	bl	24b50 <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   179b6:	4620      	mov	r0, r4
   179b8:	bd10      	pop	{r4, pc}
	return 0;
   179ba:	2400      	movs	r4, #0
   179bc:	e7fb      	b.n	179b6 <db_hash_set+0x26>
   179be:	bf00      	nop
   179c0:	20001818 	.word	0x20001818
   179c4:	00028638 	.word	0x00028638
   179c8:	00028618 	.word	0x00028618
   179cc:	0002e907 	.word	0x0002e907

000179d0 <find_cf_cfg>:
{
   179d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   179d2:	4c15      	ldr	r4, [pc, #84]	; (17a28 <find_cf_cfg+0x58>)
		if (!conn) {
   179d4:	4605      	mov	r5, r0
   179d6:	b140      	cbz	r0, 179ea <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   179d8:	4622      	mov	r2, r4
   179da:	f812 1b01 	ldrb.w	r1, [r2], #1
   179de:	f00e fa37 	bl	25e50 <bt_conn_is_peer_addr_le>
   179e2:	b1b0      	cbz	r0, 17a12 <find_cf_cfg+0x42>
}
   179e4:	4620      	mov	r0, r4
   179e6:	b003      	add	sp, #12
   179e8:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   179ea:	9000      	str	r0, [sp, #0]
   179ec:	4669      	mov	r1, sp
   179ee:	f8cd 0003 	str.w	r0, [sp, #3]
   179f2:	1c60      	adds	r0, r4, #1
   179f4:	f00e ff1e 	bl	26834 <bt_addr_le_cmp>
   179f8:	2800      	cmp	r0, #0
   179fa:	d0f3      	beq.n	179e4 <find_cf_cfg+0x14>
   179fc:	4669      	mov	r1, sp
   179fe:	f104 0011 	add.w	r0, r4, #17
   17a02:	9500      	str	r5, [sp, #0]
   17a04:	f8cd 5003 	str.w	r5, [sp, #3]
   17a08:	f00e ff14 	bl	26834 <bt_addr_le_cmp>
   17a0c:	b948      	cbnz	r0, 17a22 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17a0e:	3410      	adds	r4, #16
   17a10:	e7e8      	b.n	179e4 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17a12:	7c21      	ldrb	r1, [r4, #16]
   17a14:	f104 0211 	add.w	r2, r4, #17
   17a18:	4628      	mov	r0, r5
   17a1a:	f00e fa19 	bl	25e50 <bt_conn_is_peer_addr_le>
   17a1e:	2800      	cmp	r0, #0
   17a20:	d1f5      	bne.n	17a0e <find_cf_cfg+0x3e>
	return NULL;
   17a22:	2400      	movs	r4, #0
   17a24:	e7de      	b.n	179e4 <find_cf_cfg+0x14>
   17a26:	bf00      	nop
   17a28:	200021f0 	.word	0x200021f0

00017a2c <find_sc_cfg>:
{
   17a2c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   17a2e:	4c0d      	ldr	r4, [pc, #52]	; (17a64 <find_sc_cfg+0x38>)
   17a30:	7823      	ldrb	r3, [r4, #0]
   17a32:	4283      	cmp	r3, r0
{
   17a34:	4605      	mov	r5, r0
   17a36:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   17a38:	d009      	beq.n	17a4e <find_sc_cfg+0x22>
   17a3a:	7b23      	ldrb	r3, [r4, #12]
   17a3c:	42ab      	cmp	r3, r5
   17a3e:	d10f      	bne.n	17a60 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   17a40:	4809      	ldr	r0, [pc, #36]	; (17a68 <find_sc_cfg+0x3c>)
   17a42:	4631      	mov	r1, r6
   17a44:	f00e fef6 	bl	26834 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   17a48:	b950      	cbnz	r0, 17a60 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17a4a:	2001      	movs	r0, #1
   17a4c:	e004      	b.n	17a58 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   17a4e:	1c60      	adds	r0, r4, #1
   17a50:	f00e fef0 	bl	26834 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   17a54:	2800      	cmp	r0, #0
   17a56:	d1f0      	bne.n	17a3a <find_sc_cfg+0xe>
			return &sc_cfg[i];
   17a58:	230c      	movs	r3, #12
   17a5a:	fb03 4000 	mla	r0, r3, r0, r4
   17a5e:	e000      	b.n	17a62 <find_sc_cfg+0x36>
	return NULL;
   17a60:	2000      	movs	r0, #0
}
   17a62:	bd70      	pop	{r4, r5, r6, pc}
   17a64:	20002568 	.word	0x20002568
   17a68:	20002575 	.word	0x20002575

00017a6c <gatt_sub_find>:
{
   17a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17a6e:	4c15      	ldr	r4, [pc, #84]	; (17ac4 <gatt_sub_find+0x58>)
		if (!conn) {
   17a70:	4605      	mov	r5, r0
   17a72:	b140      	cbz	r0, 17a86 <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   17a74:	4622      	mov	r2, r4
   17a76:	f812 1b01 	ldrb.w	r1, [r2], #1
   17a7a:	f00e f9e9 	bl	25e50 <bt_conn_is_peer_addr_le>
   17a7e:	b1b0      	cbz	r0, 17aae <gatt_sub_find+0x42>
}
   17a80:	4620      	mov	r0, r4
   17a82:	b003      	add	sp, #12
   17a84:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   17a86:	9000      	str	r0, [sp, #0]
   17a88:	4669      	mov	r1, sp
   17a8a:	f8cd 0003 	str.w	r0, [sp, #3]
   17a8e:	1c60      	adds	r0, r4, #1
   17a90:	f00e fed0 	bl	26834 <bt_addr_le_cmp>
   17a94:	2800      	cmp	r0, #0
   17a96:	d0f3      	beq.n	17a80 <gatt_sub_find+0x14>
   17a98:	4669      	mov	r1, sp
   17a9a:	f104 0011 	add.w	r0, r4, #17
   17a9e:	9500      	str	r5, [sp, #0]
   17aa0:	f8cd 5003 	str.w	r5, [sp, #3]
   17aa4:	f00e fec6 	bl	26834 <bt_addr_le_cmp>
   17aa8:	b948      	cbnz	r0, 17abe <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   17aaa:	3410      	adds	r4, #16
   17aac:	e7e8      	b.n	17a80 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   17aae:	7c21      	ldrb	r1, [r4, #16]
   17ab0:	f104 0211 	add.w	r2, r4, #17
   17ab4:	4628      	mov	r0, r5
   17ab6:	f00e f9cb 	bl	25e50 <bt_conn_is_peer_addr_le>
   17aba:	2800      	cmp	r0, #0
   17abc:	d1f5      	bne.n	17aaa <gatt_sub_find+0x3e>
	return NULL;
   17abe:	2400      	movs	r4, #0
   17ac0:	e7de      	b.n	17a80 <gatt_sub_find+0x14>
   17ac2:	bf00      	nop
   17ac4:	20002230 	.word	0x20002230

00017ac8 <find_cf_cfg_by_addr>:
{
   17ac8:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   17aca:	4c0d      	ldr	r4, [pc, #52]	; (17b00 <find_cf_cfg_by_addr+0x38>)
   17acc:	7823      	ldrb	r3, [r4, #0]
   17ace:	4283      	cmp	r3, r0
{
   17ad0:	4606      	mov	r6, r0
   17ad2:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   17ad4:	d009      	beq.n	17aea <find_cf_cfg_by_addr+0x22>
   17ad6:	7c23      	ldrb	r3, [r4, #16]
   17ad8:	42b3      	cmp	r3, r6
   17ada:	d10f      	bne.n	17afc <find_cf_cfg_by_addr+0x34>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   17adc:	4909      	ldr	r1, [pc, #36]	; (17b04 <find_cf_cfg_by_addr+0x3c>)
   17ade:	4628      	mov	r0, r5
   17ae0:	f00e fea8 	bl	26834 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   17ae4:	b950      	cbnz	r0, 17afc <find_cf_cfg_by_addr+0x34>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17ae6:	2001      	movs	r0, #1
   17ae8:	e005      	b.n	17af6 <find_cf_cfg_by_addr+0x2e>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   17aea:	1c61      	adds	r1, r4, #1
   17aec:	4628      	mov	r0, r5
   17aee:	f00e fea1 	bl	26834 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   17af2:	2800      	cmp	r0, #0
   17af4:	d1ef      	bne.n	17ad6 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   17af6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   17afa:	e000      	b.n	17afe <find_cf_cfg_by_addr+0x36>
	return NULL;
   17afc:	2000      	movs	r0, #0
}
   17afe:	bd70      	pop	{r4, r5, r6, pc}
   17b00:	200021f0 	.word	0x200021f0
   17b04:	20002201 	.word	0x20002201

00017b08 <sc_store>:
{
   17b08:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   17b0a:	4605      	mov	r5, r0
{
   17b0c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   17b0e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17b12:	4604      	mov	r4, r0
	if (cfg->id) {
   17b14:	b1fa      	cbz	r2, 17b56 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17b16:	ae02      	add	r6, sp, #8
   17b18:	2104      	movs	r1, #4
   17b1a:	4630      	mov	r0, r6
   17b1c:	f00c fd50 	bl	245c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17b20:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   17b22:	4a0e      	ldr	r2, [pc, #56]	; (17b5c <sc_store+0x54>)
   17b24:	462b      	mov	r3, r5
   17b26:	2124      	movs	r1, #36	; 0x24
   17b28:	a803      	add	r0, sp, #12
   17b2a:	f7fc fe7d 	bl	14828 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   17b2e:	f104 0108 	add.w	r1, r4, #8
   17b32:	2204      	movs	r2, #4
   17b34:	a803      	add	r0, sp, #12
   17b36:	f7fa fec1 	bl	128bc <settings_save_one>
	if (err) {
   17b3a:	4601      	mov	r1, r0
   17b3c:	b148      	cbz	r0, 17b52 <sc_store+0x4a>
   17b3e:	4a08      	ldr	r2, [pc, #32]	; (17b60 <sc_store+0x58>)
   17b40:	4b08      	ldr	r3, [pc, #32]	; (17b64 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   17b42:	4809      	ldr	r0, [pc, #36]	; (17b68 <sc_store+0x60>)
   17b44:	1ad2      	subs	r2, r2, r3
   17b46:	08d2      	lsrs	r2, r2, #3
   17b48:	0192      	lsls	r2, r2, #6
   17b4a:	f042 0201 	orr.w	r2, r2, #1
   17b4e:	f00c ffff 	bl	24b50 <log_1>
}
   17b52:	b00c      	add	sp, #48	; 0x30
   17b54:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   17b56:	9200      	str	r2, [sp, #0]
   17b58:	e7e3      	b.n	17b22 <sc_store+0x1a>
   17b5a:	bf00      	nop
   17b5c:	0002eddf 	.word	0x0002eddf
   17b60:	00028638 	.word	0x00028638
   17b64:	00028618 	.word	0x00028618
   17b68:	0002e928 	.word	0x0002e928

00017b6c <sc_save>:
{
   17b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17b70:	4680      	mov	r8, r0
   17b72:	460f      	mov	r7, r1
   17b74:	4616      	mov	r6, r2
   17b76:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17b78:	f7ff ff58 	bl	17a2c <find_sc_cfg>
	if (!cfg) {
   17b7c:	4604      	mov	r4, r0
   17b7e:	b9c8      	cbnz	r0, 17bb4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17b80:	4669      	mov	r1, sp
   17b82:	9000      	str	r0, [sp, #0]
   17b84:	f8cd 0003 	str.w	r0, [sp, #3]
   17b88:	f7ff ff50 	bl	17a2c <find_sc_cfg>
		if (!cfg) {
   17b8c:	4604      	mov	r4, r0
   17b8e:	b960      	cbnz	r0, 17baa <sc_save+0x3e>
   17b90:	4915      	ldr	r1, [pc, #84]	; (17be8 <sc_save+0x7c>)
   17b92:	4b16      	ldr	r3, [pc, #88]	; (17bec <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   17b94:	4816      	ldr	r0, [pc, #88]	; (17bf0 <sc_save+0x84>)
   17b96:	1ac9      	subs	r1, r1, r3
   17b98:	08c9      	lsrs	r1, r1, #3
   17b9a:	0189      	lsls	r1, r1, #6
   17b9c:	f041 0101 	orr.w	r1, r1, #1
   17ba0:	f00c ffc9 	bl	24b36 <log_0>
}
   17ba4:	b002      	add	sp, #8
   17ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   17baa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17bae:	4639      	mov	r1, r7
   17bb0:	f00e fe69 	bl	26886 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17bb4:	8922      	ldrh	r2, [r4, #8]
   17bb6:	8963      	ldrh	r3, [r4, #10]
   17bb8:	b96a      	cbnz	r2, 17bd6 <sc_save+0x6a>
   17bba:	b973      	cbnz	r3, 17bda <sc_save+0x6e>
		cfg->data.start = start;
   17bbc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17bbe:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   17bc0:	4621      	mov	r1, r4
   17bc2:	f811 0b01 	ldrb.w	r0, [r1], #1
   17bc6:	f00d fff1 	bl	25bac <bt_addr_le_is_bonded>
   17bca:	2800      	cmp	r0, #0
   17bcc:	d0ea      	beq.n	17ba4 <sc_save+0x38>
		sc_store(cfg);
   17bce:	4620      	mov	r0, r4
   17bd0:	f7ff ff9a 	bl	17b08 <sc_store>
   17bd4:	e7e6      	b.n	17ba4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   17bd6:	4296      	cmp	r6, r2
   17bd8:	d302      	bcc.n	17be0 <sc_save+0x74>
   17bda:	429d      	cmp	r5, r3
   17bdc:	d8ef      	bhi.n	17bbe <sc_save+0x52>
   17bde:	e7e1      	b.n	17ba4 <sc_save+0x38>
	if (*end < new_end) {
   17be0:	429d      	cmp	r5, r3
		*start = new_start;
   17be2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17be4:	d9ec      	bls.n	17bc0 <sc_save+0x54>
   17be6:	e7ea      	b.n	17bbe <sc_save+0x52>
   17be8:	00028638 	.word	0x00028638
   17bec:	00028618 	.word	0x00028618
   17bf0:	0002e944 	.word	0x0002e944

00017bf4 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   17bf4:	6883      	ldr	r3, [r0, #8]
{
   17bf6:	b513      	push	{r0, r1, r4, lr}
   17bf8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   17bfa:	b15b      	cbz	r3, 17c14 <gatt_sub_free+0x20>
   17bfc:	490a      	ldr	r1, [pc, #40]	; (17c28 <gatt_sub_free+0x34>)
   17bfe:	480b      	ldr	r0, [pc, #44]	; (17c2c <gatt_sub_free+0x38>)
   17c00:	4a0b      	ldr	r2, [pc, #44]	; (17c30 <gatt_sub_free+0x3c>)
   17c02:	f640 23b1 	movw	r3, #2737	; 0xab1
   17c06:	f00c fd77 	bl	246f8 <printk>
   17c0a:	4809      	ldr	r0, [pc, #36]	; (17c30 <gatt_sub_free+0x3c>)
   17c0c:	f640 21b1 	movw	r1, #2737	; 0xab1
   17c10:	f00c ff63 	bl	24ada <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   17c14:	2300      	movs	r3, #0
   17c16:	4669      	mov	r1, sp
   17c18:	1c60      	adds	r0, r4, #1
   17c1a:	9300      	str	r3, [sp, #0]
   17c1c:	f8cd 3003 	str.w	r3, [sp, #3]
   17c20:	f00e fe31 	bl	26886 <bt_addr_le_copy>
}
   17c24:	b002      	add	sp, #8
   17c26:	bd10      	pop	{r4, pc}
   17c28:	0002e993 	.word	0x0002e993
   17c2c:	000290f5 	.word	0x000290f5
   17c30:	0002e963 	.word	0x0002e963

00017c34 <db_hash_commit>:

static int db_hash_commit(void)
{
   17c34:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17c36:	2108      	movs	r1, #8
   17c38:	4804      	ldr	r0, [pc, #16]	; (17c4c <db_hash_commit+0x18>)
   17c3a:	f00e fdec 	bl	26816 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   17c3e:	2200      	movs	r2, #0
   17c40:	2300      	movs	r3, #0
   17c42:	4803      	ldr	r0, [pc, #12]	; (17c50 <db_hash_commit+0x1c>)
   17c44:	f00a fbda 	bl	223fc <k_work_reschedule>

	return 0;
}
   17c48:	2000      	movs	r0, #0
   17c4a:	bd08      	pop	{r3, pc}
   17c4c:	20001908 	.word	0x20001908
   17c50:	20001828 	.word	0x20001828

00017c54 <bt_gatt_attr_write_ccc>:
{
   17c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c58:	461f      	mov	r7, r3
   17c5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   17c5e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   17c62:	4605      	mov	r5, r0
   17c64:	4688      	mov	r8, r1
	if (offset) {
   17c66:	2b00      	cmp	r3, #0
   17c68:	d16d      	bne.n	17d46 <bt_gatt_attr_write_ccc+0xf2>
	if (!len || len > sizeof(uint16_t)) {
   17c6a:	1e7b      	subs	r3, r7, #1
   17c6c:	2b01      	cmp	r3, #1
   17c6e:	d86d      	bhi.n	17d4c <bt_gatt_attr_write_ccc+0xf8>
	if (len < sizeof(uint16_t)) {
   17c70:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   17c72:	7816      	ldrb	r6, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   17c74:	bf18      	it	ne
   17c76:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   17c78:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   17c7a:	bf0c      	ite	eq
   17c7c:	b2b6      	uxtheq	r6, r6
   17c7e:	ea46 2603 	orrne.w	r6, r6, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   17c82:	f00e fdda 	bl	2683a <find_ccc_cfg>
	if (!cfg) {
   17c86:	4604      	mov	r4, r0
   17c88:	b9e0      	cbnz	r0, 17cc4 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   17c8a:	b916      	cbnz	r6, 17c92 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   17c8c:	4638      	mov	r0, r7
}
   17c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17c92:	4649      	mov	r1, r9
   17c94:	f00e fdd1 	bl	2683a <find_ccc_cfg>
		if (!cfg) {
   17c98:	4604      	mov	r4, r0
   17c9a:	b960      	cbnz	r0, 17cb6 <bt_gatt_attr_write_ccc+0x62>
   17c9c:	4b2d      	ldr	r3, [pc, #180]	; (17d54 <bt_gatt_attr_write_ccc+0x100>)
   17c9e:	492e      	ldr	r1, [pc, #184]	; (17d58 <bt_gatt_attr_write_ccc+0x104>)
			BT_WARN("No space to store CCC cfg");
   17ca0:	482e      	ldr	r0, [pc, #184]	; (17d5c <bt_gatt_attr_write_ccc+0x108>)
   17ca2:	1ac9      	subs	r1, r1, r3
   17ca4:	08c9      	lsrs	r1, r1, #3
   17ca6:	0189      	lsls	r1, r1, #6
   17ca8:	f041 0102 	orr.w	r1, r1, #2
   17cac:	f00c ff43 	bl	24b36 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17cb0:	f06f 0010 	mvn.w	r0, #16
   17cb4:	e7eb      	b.n	17c8e <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17cb6:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17cba:	3001      	adds	r0, #1
   17cbc:	f00e fde3 	bl	26886 <bt_addr_le_copy>
		cfg->id = conn->id;
   17cc0:	7a2b      	ldrb	r3, [r5, #8]
   17cc2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17cc8:	bb8b      	cbnz	r3, 17d2e <bt_gatt_attr_write_ccc+0xda>
	if (cfg->value != ccc->value) {
   17cca:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	value_changed = cfg->value != value;
   17cce:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   17cd2:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   17cd4:	42b3      	cmp	r3, r6
   17cd6:	d003      	beq.n	17ce0 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   17cd8:	4649      	mov	r1, r9
   17cda:	4640      	mov	r0, r8
   17cdc:	f00e fd19 	bl	26712 <gatt_ccc_changed>
	if (value_changed) {
   17ce0:	45b2      	cmp	sl, r6
   17ce2:	d01e      	beq.n	17d22 <bt_gatt_attr_write_ccc+0xce>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   17ce4:	4628      	mov	r0, r5
   17ce6:	f7fe f9f5 	bl	160d4 <bt_conn_index>
   17cea:	f8df 8074 	ldr.w	r8, [pc, #116]	; 17d60 <bt_gatt_attr_write_ccc+0x10c>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17cee:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   17cf2:	429d      	cmp	r5, r3
   17cf4:	d015      	beq.n	17d22 <bt_gatt_attr_write_ccc+0xce>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17cf6:	7a28      	ldrb	r0, [r5, #8]
   17cf8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17cfc:	f00d ff56 	bl	25bac <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17d00:	b178      	cbz	r0, 17d22 <bt_gatt_attr_write_ccc+0xce>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17d02:	4628      	mov	r0, r5
   17d04:	f7fe f9e6 	bl	160d4 <bt_conn_index>
   17d08:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   17d0a:	4628      	mov	r0, r5
   17d0c:	f00d fff3 	bl	25cf6 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17d10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17d14:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   17d18:	2300      	movs	r3, #0
   17d1a:	f108 0008 	add.w	r0, r8, #8
   17d1e:	f00a fb6d 	bl	223fc <k_work_reschedule>
	if (!value) {
   17d22:	2e00      	cmp	r6, #0
   17d24:	d1b2      	bne.n	17c8c <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   17d26:	4620      	mov	r0, r4
   17d28:	f00e fdb0 	bl	2688c <clear_ccc_cfg>
   17d2c:	e7ae      	b.n	17c8c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17d2e:	4632      	mov	r2, r6
   17d30:	4641      	mov	r1, r8
   17d32:	4628      	mov	r0, r5
   17d34:	4798      	blx	r3
		if (write < 0) {
   17d36:	2800      	cmp	r0, #0
   17d38:	dba9      	blt.n	17c8e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   17d3a:	1e42      	subs	r2, r0, #1
   17d3c:	2a01      	cmp	r2, #1
   17d3e:	d9c4      	bls.n	17cca <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17d40:	f06f 000d 	mvn.w	r0, #13
   17d44:	e7a3      	b.n	17c8e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17d46:	f06f 0006 	mvn.w	r0, #6
   17d4a:	e7a0      	b.n	17c8e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17d4c:	f06f 000c 	mvn.w	r0, #12
   17d50:	e79d      	b.n	17c8e <bt_gatt_attr_write_ccc+0x3a>
   17d52:	bf00      	nop
   17d54:	00028618 	.word	0x00028618
   17d58:	00028638 	.word	0x00028638
   17d5c:	0002e9aa 	.word	0x0002e9aa
   17d60:	20001880 	.word	0x20001880

00017d64 <sc_set>:
{
   17d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d68:	460e      	mov	r6, r1
   17d6a:	b086      	sub	sp, #24
   17d6c:	4617      	mov	r7, r2
   17d6e:	4698      	mov	r8, r3
	if (!name) {
   17d70:	4605      	mov	r5, r0
   17d72:	b978      	cbnz	r0, 17d94 <sc_set+0x30>
   17d74:	493b      	ldr	r1, [pc, #236]	; (17e64 <sc_set+0x100>)
   17d76:	4b3c      	ldr	r3, [pc, #240]	; (17e68 <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
   17d78:	483c      	ldr	r0, [pc, #240]	; (17e6c <sc_set+0x108>)
   17d7a:	1ac9      	subs	r1, r1, r3
   17d7c:	08c9      	lsrs	r1, r1, #3
   17d7e:	0189      	lsls	r1, r1, #6
   17d80:	f041 0101 	orr.w	r1, r1, #1
   17d84:	f00c fed7 	bl	24b36 <log_0>
		return -EINVAL;
   17d88:	f06f 0415 	mvn.w	r4, #21
}
   17d8c:	4620      	mov	r0, r4
   17d8e:	b006      	add	sp, #24
   17d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   17d94:	a902      	add	r1, sp, #8
   17d96:	f00d fe34 	bl	25a02 <bt_settings_decode_key>
	if (err) {
   17d9a:	4604      	mov	r4, r0
   17d9c:	b178      	cbz	r0, 17dbe <sc_set+0x5a>
   17d9e:	4a32      	ldr	r2, [pc, #200]	; (17e68 <sc_set+0x104>)
   17da0:	4c30      	ldr	r4, [pc, #192]	; (17e64 <sc_set+0x100>)
   17da2:	4628      	mov	r0, r5
   17da4:	1aa4      	subs	r4, r4, r2
   17da6:	f7f9 ffe5 	bl	11d74 <z_log_strdup>
   17daa:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   17dac:	01a4      	lsls	r4, r4, #6
   17dae:	f044 0401 	orr.w	r4, r4, #1
   17db2:	4601      	mov	r1, r0
   17db4:	482e      	ldr	r0, [pc, #184]	; (17e70 <sc_set+0x10c>)
   17db6:	4622      	mov	r2, r4
   17db8:	f00c feca 	bl	24b50 <log_1>
   17dbc:	e7e4      	b.n	17d88 <sc_set+0x24>
	settings_name_next(name, &next);
   17dbe:	a901      	add	r1, sp, #4
   17dc0:	4628      	mov	r0, r5
   17dc2:	f00d f9b8 	bl	25136 <settings_name_next>
	if (!next) {
   17dc6:	9801      	ldr	r0, [sp, #4]
   17dc8:	b170      	cbz	r0, 17de8 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   17dca:	4621      	mov	r1, r4
   17dcc:	220a      	movs	r2, #10
   17dce:	f00d fcf8 	bl	257c2 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17dd2:	4601      	mov	r1, r0
   17dd4:	b140      	cbz	r0, 17de8 <sc_set+0x84>
   17dd6:	4a23      	ldr	r2, [pc, #140]	; (17e64 <sc_set+0x100>)
   17dd8:	4b23      	ldr	r3, [pc, #140]	; (17e68 <sc_set+0x104>)
			BT_ERR("Invalid local identity %lu", next_id);
   17dda:	4826      	ldr	r0, [pc, #152]	; (17e74 <sc_set+0x110>)
   17ddc:	1ad2      	subs	r2, r2, r3
   17dde:	08d2      	lsrs	r2, r2, #3
   17de0:	0192      	lsls	r2, r2, #6
   17de2:	f042 0201 	orr.w	r2, r2, #1
   17de6:	e7e7      	b.n	17db8 <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
   17de8:	a902      	add	r1, sp, #8
   17dea:	2000      	movs	r0, #0
   17dec:	f7ff fe1e 	bl	17a2c <find_sc_cfg>
	if (!cfg && len_rd) {
   17df0:	4605      	mov	r5, r0
   17df2:	bb80      	cbnz	r0, 17e56 <sc_set+0xf2>
   17df4:	2e00      	cmp	r6, #0
   17df6:	d0c9      	beq.n	17d8c <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17df8:	a904      	add	r1, sp, #16
   17dfa:	9004      	str	r0, [sp, #16]
   17dfc:	4606      	mov	r6, r0
   17dfe:	f8cd 0013 	str.w	r0, [sp, #19]
   17e02:	f7ff fe13 	bl	17a2c <find_sc_cfg>
		if (!cfg) {
   17e06:	4605      	mov	r5, r0
   17e08:	b960      	cbnz	r0, 17e24 <sc_set+0xc0>
   17e0a:	4b17      	ldr	r3, [pc, #92]	; (17e68 <sc_set+0x104>)
   17e0c:	4915      	ldr	r1, [pc, #84]	; (17e64 <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
   17e0e:	481a      	ldr	r0, [pc, #104]	; (17e78 <sc_set+0x114>)
   17e10:	1ac9      	subs	r1, r1, r3
   17e12:	08c9      	lsrs	r1, r1, #3
   17e14:	0189      	lsls	r1, r1, #6
   17e16:	f041 0101 	orr.w	r1, r1, #1
   17e1a:	f00c fe8c 	bl	24b36 <log_0>
			return -ENOMEM;
   17e1e:	f06f 040b 	mvn.w	r4, #11
   17e22:	e7b3      	b.n	17d8c <sc_set+0x28>
		cfg->id = id;
   17e24:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17e28:	a902      	add	r1, sp, #8
   17e2a:	f00e fd2c 	bl	26886 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   17e2e:	f105 0108 	add.w	r1, r5, #8
   17e32:	2204      	movs	r2, #4
   17e34:	4640      	mov	r0, r8
   17e36:	47b8      	blx	r7
		if (len < 0) {
   17e38:	1e05      	subs	r5, r0, #0
   17e3a:	daa7      	bge.n	17d8c <sc_set+0x28>
   17e3c:	4b0a      	ldr	r3, [pc, #40]	; (17e68 <sc_set+0x104>)
   17e3e:	4a09      	ldr	r2, [pc, #36]	; (17e64 <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
   17e40:	480e      	ldr	r0, [pc, #56]	; (17e7c <sc_set+0x118>)
   17e42:	1ad2      	subs	r2, r2, r3
   17e44:	08d2      	lsrs	r2, r2, #3
   17e46:	0192      	lsls	r2, r2, #6
   17e48:	f042 0201 	orr.w	r2, r2, #1
   17e4c:	4629      	mov	r1, r5
   17e4e:	f00c fe7f 	bl	24b50 <log_1>
			return len;
   17e52:	462c      	mov	r4, r5
   17e54:	e79a      	b.n	17d8c <sc_set+0x28>
	if (len_rd) {
   17e56:	2e00      	cmp	r6, #0
   17e58:	d1e9      	bne.n	17e2e <sc_set+0xca>
		memset(cfg, 0, sizeof(*cfg));
   17e5a:	220c      	movs	r2, #12
   17e5c:	4631      	mov	r1, r6
   17e5e:	f00d fd8c 	bl	2597a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   17e62:	e793      	b.n	17d8c <sc_set+0x28>
   17e64:	00028638 	.word	0x00028638
   17e68:	00028618 	.word	0x00028618
   17e6c:	0002da99 	.word	0x0002da99
   17e70:	0002e9c4 	.word	0x0002e9c4
   17e74:	0002e9e0 	.word	0x0002e9e0
   17e78:	0002e9fb 	.word	0x0002e9fb
   17e7c:	0002e907 	.word	0x0002e907

00017e80 <ccc_save>:
{
   17e80:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e82:	4b0c      	ldr	r3, [pc, #48]	; (17eb4 <ccc_save+0x34>)
{
   17e84:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e86:	6882      	ldr	r2, [r0, #8]
   17e88:	429a      	cmp	r2, r3
{
   17e8a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e8c:	d10f      	bne.n	17eae <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   17e8e:	7922      	ldrb	r2, [r4, #4]
   17e90:	6821      	ldr	r1, [r4, #0]
   17e92:	68c0      	ldr	r0, [r0, #12]
   17e94:	f00e fce9 	bl	2686a <ccc_find_cfg>
	if (!cfg) {
   17e98:	b148      	cbz	r0, 17eae <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   17e9a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   17e9e:	8901      	ldrh	r1, [r0, #8]
   17ea0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   17ea4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   17ea6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   17ea8:	8151      	strh	r1, [r2, #10]
	save->count++;
   17eaa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   17eae:	2001      	movs	r0, #1
   17eb0:	bd38      	pop	{r3, r4, r5, pc}
   17eb2:	bf00      	nop
   17eb4:	00017c55 	.word	0x00017c55

00017eb8 <ccc_load>:
{
   17eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17eba:	4b21      	ldr	r3, [pc, #132]	; (17f40 <ccc_load+0x88>)
{
   17ebc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ebe:	6882      	ldr	r2, [r0, #8]
   17ec0:	429a      	cmp	r2, r3
   17ec2:	d002      	beq.n	17eca <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   17ec4:	2001      	movs	r0, #1
}
   17ec6:	b002      	add	sp, #8
   17ec8:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   17eca:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   17ecc:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   17ece:	b94b      	cbnz	r3, 17ee4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   17ed0:	7922      	ldrb	r2, [r4, #4]
   17ed2:	6821      	ldr	r1, [r4, #0]
   17ed4:	4630      	mov	r0, r6
   17ed6:	f00e fcc8 	bl	2686a <ccc_find_cfg>
	if (!cfg) {
   17eda:	2800      	cmp	r0, #0
   17edc:	d0f2      	beq.n	17ec4 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   17ede:	f00e fcd5 	bl	2688c <clear_ccc_cfg>
   17ee2:	e7ef      	b.n	17ec4 <ccc_load+0xc>
	} else if (!load->count) {
   17ee4:	68e0      	ldr	r0, [r4, #12]
   17ee6:	2800      	cmp	r0, #0
   17ee8:	d0ed      	beq.n	17ec6 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   17eea:	881b      	ldrh	r3, [r3, #0]
   17eec:	4299      	cmp	r1, r3
   17eee:	d00a      	beq.n	17f06 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   17ef0:	d9e8      	bls.n	17ec4 <ccc_load+0xc>
	load->count--;
   17ef2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   17ef4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   17ef6:	3801      	subs	r0, #1
	load->entry++;
   17ef8:	3304      	adds	r3, #4
	load->count--;
   17efa:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17efc:	3800      	subs	r0, #0
	load->entry++;
   17efe:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17f00:	bf18      	it	ne
   17f02:	2001      	movne	r0, #1
   17f04:	e7df      	b.n	17ec6 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   17f06:	7922      	ldrb	r2, [r4, #4]
   17f08:	6821      	ldr	r1, [r4, #0]
   17f0a:	4630      	mov	r0, r6
   17f0c:	f00e fcad 	bl	2686a <ccc_find_cfg>
	if (!cfg) {
   17f10:	4605      	mov	r5, r0
   17f12:	b980      	cbnz	r0, 17f36 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   17f14:	9000      	str	r0, [sp, #0]
   17f16:	4602      	mov	r2, r0
   17f18:	f8cd 0003 	str.w	r0, [sp, #3]
   17f1c:	4669      	mov	r1, sp
   17f1e:	4630      	mov	r0, r6
   17f20:	f00e fca3 	bl	2686a <ccc_find_cfg>
		if (!cfg) {
   17f24:	4605      	mov	r5, r0
   17f26:	2800      	cmp	r0, #0
   17f28:	d0e3      	beq.n	17ef2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   17f2a:	6821      	ldr	r1, [r4, #0]
   17f2c:	3001      	adds	r0, #1
   17f2e:	f00e fcaa 	bl	26886 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   17f32:	7923      	ldrb	r3, [r4, #4]
   17f34:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   17f36:	68a3      	ldr	r3, [r4, #8]
   17f38:	885b      	ldrh	r3, [r3, #2]
   17f3a:	812b      	strh	r3, [r5, #8]
   17f3c:	e7d9      	b.n	17ef2 <ccc_load+0x3a>
   17f3e:	bf00      	nop
   17f40:	00017c55 	.word	0x00017c55

00017f44 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   17f44:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f46:	6881      	ldr	r1, [r0, #8]
{
   17f48:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f4a:	4a07      	ldr	r2, [pc, #28]	; (17f68 <remove_peer_from_attr+0x24>)
   17f4c:	4291      	cmp	r1, r2
   17f4e:	d109      	bne.n	17f64 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   17f50:	791a      	ldrb	r2, [r3, #4]
   17f52:	6819      	ldr	r1, [r3, #0]
   17f54:	68c0      	ldr	r0, [r0, #12]
   17f56:	f00e fc88 	bl	2686a <ccc_find_cfg>
	if (cfg) {
   17f5a:	b118      	cbz	r0, 17f64 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   17f5c:	220a      	movs	r2, #10
   17f5e:	2100      	movs	r1, #0
   17f60:	f00d fd0b 	bl	2597a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   17f64:	2001      	movs	r0, #1
   17f66:	bd08      	pop	{r3, pc}
   17f68:	00017c55 	.word	0x00017c55

00017f6c <cf_set>:
{
   17f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17f70:	4688      	mov	r8, r1
   17f72:	4616      	mov	r6, r2
   17f74:	461f      	mov	r7, r3
	if (!name) {
   17f76:	4605      	mov	r5, r0
   17f78:	b978      	cbnz	r0, 17f9a <cf_set+0x2e>
   17f7a:	4939      	ldr	r1, [pc, #228]	; (18060 <cf_set+0xf4>)
   17f7c:	4b39      	ldr	r3, [pc, #228]	; (18064 <cf_set+0xf8>)
		BT_ERR("Insufficient number of arguments");
   17f7e:	483a      	ldr	r0, [pc, #232]	; (18068 <cf_set+0xfc>)
   17f80:	1ac9      	subs	r1, r1, r3
   17f82:	08c9      	lsrs	r1, r1, #3
   17f84:	0189      	lsls	r1, r1, #6
   17f86:	f041 0101 	orr.w	r1, r1, #1
   17f8a:	f00c fdd4 	bl	24b36 <log_0>
		return -EINVAL;
   17f8e:	f06f 0415 	mvn.w	r4, #21
}
   17f92:	4620      	mov	r0, r4
   17f94:	b004      	add	sp, #16
   17f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   17f9a:	a902      	add	r1, sp, #8
   17f9c:	f00d fd31 	bl	25a02 <bt_settings_decode_key>
	if (err) {
   17fa0:	4604      	mov	r4, r0
   17fa2:	b178      	cbz	r0, 17fc4 <cf_set+0x58>
   17fa4:	4a2f      	ldr	r2, [pc, #188]	; (18064 <cf_set+0xf8>)
   17fa6:	4c2e      	ldr	r4, [pc, #184]	; (18060 <cf_set+0xf4>)
   17fa8:	4628      	mov	r0, r5
   17faa:	1aa4      	subs	r4, r4, r2
   17fac:	f7f9 fee2 	bl	11d74 <z_log_strdup>
   17fb0:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   17fb2:	01a4      	lsls	r4, r4, #6
   17fb4:	f044 0401 	orr.w	r4, r4, #1
   17fb8:	4601      	mov	r1, r0
   17fba:	482c      	ldr	r0, [pc, #176]	; (1806c <cf_set+0x100>)
   17fbc:	4622      	mov	r2, r4
   17fbe:	f00c fdc7 	bl	24b50 <log_1>
   17fc2:	e7e4      	b.n	17f8e <cf_set+0x22>
	settings_name_next(name, &next);
   17fc4:	a901      	add	r1, sp, #4
   17fc6:	4628      	mov	r0, r5
   17fc8:	f00d f8b5 	bl	25136 <settings_name_next>
	if (!next) {
   17fcc:	9801      	ldr	r0, [sp, #4]
   17fce:	b170      	cbz	r0, 17fee <cf_set+0x82>
		unsigned long next_id = strtoul(next, NULL, 10);
   17fd0:	4621      	mov	r1, r4
   17fd2:	220a      	movs	r2, #10
   17fd4:	f00d fbf5 	bl	257c2 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17fd8:	4601      	mov	r1, r0
   17fda:	b140      	cbz	r0, 17fee <cf_set+0x82>
   17fdc:	4a20      	ldr	r2, [pc, #128]	; (18060 <cf_set+0xf4>)
   17fde:	4b21      	ldr	r3, [pc, #132]	; (18064 <cf_set+0xf8>)
			BT_ERR("Invalid local identity %lu", next_id);
   17fe0:	4823      	ldr	r0, [pc, #140]	; (18070 <cf_set+0x104>)
   17fe2:	1ad2      	subs	r2, r2, r3
   17fe4:	08d2      	lsrs	r2, r2, #3
   17fe6:	0192      	lsls	r2, r2, #6
   17fe8:	f042 0201 	orr.w	r2, r2, #1
   17fec:	e7e7      	b.n	17fbe <cf_set+0x52>
	cfg = find_cf_cfg_by_addr(id, &addr);
   17fee:	a902      	add	r1, sp, #8
   17ff0:	2000      	movs	r0, #0
   17ff2:	f7ff fd69 	bl	17ac8 <find_cf_cfg_by_addr>
	if (!cfg) {
   17ff6:	4605      	mov	r5, r0
   17ff8:	b9b0      	cbnz	r0, 18028 <cf_set+0xbc>
		cfg = find_cf_cfg(NULL);
   17ffa:	f7ff fce9 	bl	179d0 <find_cf_cfg>
		if (!cfg) {
   17ffe:	4605      	mov	r5, r0
   18000:	b960      	cbnz	r0, 1801c <cf_set+0xb0>
   18002:	4b18      	ldr	r3, [pc, #96]	; (18064 <cf_set+0xf8>)
   18004:	4916      	ldr	r1, [pc, #88]	; (18060 <cf_set+0xf4>)
			BT_ERR("Unable to restore CF: no cfg left");
   18006:	481b      	ldr	r0, [pc, #108]	; (18074 <cf_set+0x108>)
   18008:	1ac9      	subs	r1, r1, r3
   1800a:	08c9      	lsrs	r1, r1, #3
   1800c:	0189      	lsls	r1, r1, #6
   1800e:	f041 0101 	orr.w	r1, r1, #1
   18012:	f00c fd90 	bl	24b36 <log_0>
			return -ENOMEM;
   18016:	f06f 040b 	mvn.w	r4, #11
   1801a:	e7ba      	b.n	17f92 <cf_set+0x26>
		cfg->id = id;
   1801c:	2300      	movs	r3, #0
   1801e:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   18022:	a902      	add	r1, sp, #8
   18024:	f00e fc2f 	bl	26886 <bt_addr_le_copy>
	if (len_rd) {
   18028:	f1b8 0f00 	cmp.w	r8, #0
   1802c:	d013      	beq.n	18056 <cf_set+0xea>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1802e:	f105 0108 	add.w	r1, r5, #8
   18032:	2201      	movs	r2, #1
   18034:	4638      	mov	r0, r7
   18036:	47b0      	blx	r6
		if (len < 0) {
   18038:	1e05      	subs	r5, r0, #0
   1803a:	daaa      	bge.n	17f92 <cf_set+0x26>
   1803c:	4b09      	ldr	r3, [pc, #36]	; (18064 <cf_set+0xf8>)
   1803e:	4a08      	ldr	r2, [pc, #32]	; (18060 <cf_set+0xf4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   18040:	480d      	ldr	r0, [pc, #52]	; (18078 <cf_set+0x10c>)
   18042:	1ad2      	subs	r2, r2, r3
   18044:	08d2      	lsrs	r2, r2, #3
   18046:	0192      	lsls	r2, r2, #6
   18048:	f042 0201 	orr.w	r2, r2, #1
   1804c:	4629      	mov	r1, r5
   1804e:	f00c fd7f 	bl	24b50 <log_1>
			return len;
   18052:	462c      	mov	r4, r5
   18054:	e79d      	b.n	17f92 <cf_set+0x26>
		clear_cf_cfg(cfg);
   18056:	4628      	mov	r0, r5
   18058:	f00e fcb2 	bl	269c0 <clear_cf_cfg>
   1805c:	e799      	b.n	17f92 <cf_set+0x26>
   1805e:	bf00      	nop
   18060:	00028638 	.word	0x00028638
   18064:	00028618 	.word	0x00028618
   18068:	0002da99 	.word	0x0002da99
   1806c:	0002e9c4 	.word	0x0002e9c4
   18070:	0002e9e0 	.word	0x0002e9e0
   18074:	0002ea1d 	.word	0x0002ea1d
   18078:	0002e907 	.word	0x0002e907

0001807c <sc_commit>:
{
   1807c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1807e:	f06f 0102 	mvn.w	r1, #2
   18082:	4808      	ldr	r0, [pc, #32]	; (180a4 <sc_commit+0x28>)
   18084:	f00e fc10 	bl	268a8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18088:	4806      	ldr	r0, [pc, #24]	; (180a4 <sc_commit+0x28>)
   1808a:	f00e fb68 	bl	2675e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1808e:	07c3      	lsls	r3, r0, #31
   18090:	d505      	bpl.n	1809e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18092:	4805      	ldr	r0, [pc, #20]	; (180a8 <sc_commit+0x2c>)
   18094:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18098:	2300      	movs	r3, #0
   1809a:	f00a f9af 	bl	223fc <k_work_reschedule>
}
   1809e:	2000      	movs	r0, #0
   180a0:	bd08      	pop	{r3, pc}
   180a2:	bf00      	nop
   180a4:	20001908 	.word	0x20001908
   180a8:	200018d8 	.word	0x200018d8

000180ac <cf_write>:
{
   180ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180b0:	4698      	mov	r8, r3
   180b2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   180b6:	2b01      	cmp	r3, #1
{
   180b8:	4606      	mov	r6, r0
   180ba:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   180bc:	d83d      	bhi.n	1813a <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   180be:	4443      	add	r3, r8
   180c0:	2b01      	cmp	r3, #1
   180c2:	4645      	mov	r5, r8
   180c4:	dc3c      	bgt.n	18140 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   180c6:	f7ff fc83 	bl	179d0 <find_cf_cfg>
	if (!cfg) {
   180ca:	4604      	mov	r4, r0
   180cc:	b990      	cbnz	r0, 180f4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   180ce:	f7ff fc7f 	bl	179d0 <find_cf_cfg>
	if (!cfg) {
   180d2:	4604      	mov	r4, r0
   180d4:	b970      	cbnz	r0, 180f4 <cf_write+0x48>
   180d6:	4b1d      	ldr	r3, [pc, #116]	; (1814c <cf_write+0xa0>)
   180d8:	491d      	ldr	r1, [pc, #116]	; (18150 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   180da:	481e      	ldr	r0, [pc, #120]	; (18154 <cf_write+0xa8>)
   180dc:	1ac9      	subs	r1, r1, r3
   180de:	08c9      	lsrs	r1, r1, #3
   180e0:	0189      	lsls	r1, r1, #6
   180e2:	f041 0102 	orr.w	r1, r1, #2
   180e6:	f00c fd26 	bl	24b36 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   180ea:	f06f 0510 	mvn.w	r5, #16
}
   180ee:	4628      	mov	r0, r5
   180f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   180f4:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   180f6:	f1b8 0f00 	cmp.w	r8, #0
   180fa:	d10c      	bne.n	18116 <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   180fc:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18100:	1c60      	adds	r0, r4, #1
   18102:	f00e fbc0 	bl	26886 <bt_addr_le_copy>
	cfg->id = conn->id;
   18106:	4620      	mov	r0, r4
   18108:	7a33      	ldrb	r3, [r6, #8]
   1810a:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1810e:	2101      	movs	r1, #1
   18110:	f00e fb81 	bl	26816 <atomic_or>
}
   18114:	e7eb      	b.n	180ee <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18116:	7a20      	ldrb	r0, [r4, #8]
   18118:	fa20 f301 	lsr.w	r3, r0, r1
   1811c:	07da      	lsls	r2, r3, #31
   1811e:	d503      	bpl.n	18128 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   18120:	783b      	ldrb	r3, [r7, #0]
   18122:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18124:	07db      	lsls	r3, r3, #31
   18126:	d50e      	bpl.n	18146 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18128:	3101      	adds	r1, #1
   1812a:	2903      	cmp	r1, #3
   1812c:	d1e3      	bne.n	180f6 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1812e:	783b      	ldrb	r3, [r7, #0]
   18130:	f003 0307 	and.w	r3, r3, #7
   18134:	4318      	orrs	r0, r3
   18136:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   18138:	e7e0      	b.n	180fc <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1813a:	f06f 0506 	mvn.w	r5, #6
   1813e:	e7d6      	b.n	180ee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18140:	f06f 050c 	mvn.w	r5, #12
   18144:	e7d3      	b.n	180ee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18146:	f06f 0512 	mvn.w	r5, #18
   1814a:	e7d0      	b.n	180ee <cf_write+0x42>
   1814c:	00028618 	.word	0x00028618
   18150:	00028638 	.word	0x00028638
   18154:	0002ea3f 	.word	0x0002ea3f

00018158 <sc_indicate_rsp>:
{
   18158:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1815a:	f06f 0102 	mvn.w	r1, #2
   1815e:	4604      	mov	r4, r0
   18160:	480d      	ldr	r0, [pc, #52]	; (18198 <sc_indicate_rsp+0x40>)
   18162:	f00e fba1 	bl	268a8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18166:	480c      	ldr	r0, [pc, #48]	; (18198 <sc_indicate_rsp+0x40>)
   18168:	f00e faf9 	bl	2675e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1816c:	07c2      	lsls	r2, r0, #31
   1816e:	d504      	bpl.n	1817a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   18170:	480a      	ldr	r0, [pc, #40]	; (1819c <sc_indicate_rsp+0x44>)
   18172:	2200      	movs	r2, #0
   18174:	2300      	movs	r3, #0
   18176:	f00a f941 	bl	223fc <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1817a:	4620      	mov	r0, r4
   1817c:	f7ff fc28 	bl	179d0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   18180:	b140      	cbz	r0, 18194 <sc_indicate_rsp+0x3c>
   18182:	7a03      	ldrb	r3, [r0, #8]
   18184:	07db      	lsls	r3, r3, #31
   18186:	d505      	bpl.n	18194 <sc_indicate_rsp+0x3c>
}
   18188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1818c:	2101      	movs	r1, #1
   1818e:	300c      	adds	r0, #12
   18190:	f00e bb41 	b.w	26816 <atomic_or>
   18194:	bd10      	pop	{r4, pc}
   18196:	bf00      	nop
   18198:	20001908 	.word	0x20001908
   1819c:	200018d8 	.word	0x200018d8

000181a0 <bt_gatt_clear_sc>:
{
   181a0:	b570      	push	{r4, r5, r6, lr}
   181a2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   181a4:	f7ff fc42 	bl	17a2c <find_sc_cfg>
	if (!cfg) {
   181a8:	4604      	mov	r4, r0
   181aa:	b318      	cbz	r0, 181f4 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   181ac:	4605      	mov	r5, r0
   181ae:	f815 2b01 	ldrb.w	r2, [r5], #1
   181b2:	b312      	cbz	r2, 181fa <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   181b4:	ae02      	add	r6, sp, #8
   181b6:	2104      	movs	r1, #4
   181b8:	4630      	mov	r0, r6
   181ba:	f00c fa01 	bl	245c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   181be:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   181c0:	2124      	movs	r1, #36	; 0x24
   181c2:	4a0f      	ldr	r2, [pc, #60]	; (18200 <bt_gatt_clear_sc+0x60>)
   181c4:	462b      	mov	r3, r5
   181c6:	a803      	add	r0, sp, #12
   181c8:	f7fc fb2e 	bl	14828 <bt_settings_encode_key>
		err = settings_delete(key);
   181cc:	a803      	add	r0, sp, #12
   181ce:	f00c ff8b 	bl	250e8 <settings_delete>
		if (err) {
   181d2:	4601      	mov	r1, r0
   181d4:	b148      	cbz	r0, 181ea <bt_gatt_clear_sc+0x4a>
   181d6:	4a0b      	ldr	r2, [pc, #44]	; (18204 <bt_gatt_clear_sc+0x64>)
   181d8:	4b0b      	ldr	r3, [pc, #44]	; (18208 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   181da:	480c      	ldr	r0, [pc, #48]	; (1820c <bt_gatt_clear_sc+0x6c>)
   181dc:	1ad2      	subs	r2, r2, r3
   181de:	08d2      	lsrs	r2, r2, #3
   181e0:	0192      	lsls	r2, r2, #6
   181e2:	f042 0201 	orr.w	r2, r2, #1
   181e6:	f00c fcb3 	bl	24b50 <log_1>
	memset(cfg, 0, sizeof(*cfg));
   181ea:	220c      	movs	r2, #12
   181ec:	2100      	movs	r1, #0
   181ee:	4620      	mov	r0, r4
   181f0:	f00d fbc3 	bl	2597a <memset>
}
   181f4:	2000      	movs	r0, #0
   181f6:	b00c      	add	sp, #48	; 0x30
   181f8:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   181fa:	9200      	str	r2, [sp, #0]
   181fc:	e7e0      	b.n	181c0 <bt_gatt_clear_sc+0x20>
   181fe:	bf00      	nop
   18200:	0002eddf 	.word	0x0002eddf
   18204:	00028638 	.word	0x00028638
   18208:	00028618 	.word	0x00028618
   1820c:	0002ea6b 	.word	0x0002ea6b

00018210 <sc_clear>:
{
   18210:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18212:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   18216:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18218:	4631      	mov	r1, r6
   1821a:	7a00      	ldrb	r0, [r0, #8]
   1821c:	f00d fcc6 	bl	25bac <bt_addr_le_is_bonded>
   18220:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18222:	4631      	mov	r1, r6
   18224:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18226:	b17d      	cbz	r5, 18248 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18228:	f7ff ffba 	bl	181a0 <bt_gatt_clear_sc>
		if (err) {
   1822c:	4601      	mov	r1, r0
   1822e:	b1a0      	cbz	r0, 1825a <sc_clear+0x4a>
   18230:	4a0a      	ldr	r2, [pc, #40]	; (1825c <sc_clear+0x4c>)
   18232:	4b0b      	ldr	r3, [pc, #44]	; (18260 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   18234:	480b      	ldr	r0, [pc, #44]	; (18264 <sc_clear+0x54>)
   18236:	1ad2      	subs	r2, r2, r3
   18238:	08d2      	lsrs	r2, r2, #3
   1823a:	0192      	lsls	r2, r2, #6
}
   1823c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   18240:	f042 0201 	orr.w	r2, r2, #1
   18244:	f00c bc84 	b.w	24b50 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18248:	f7ff fbf0 	bl	17a2c <find_sc_cfg>
		if (cfg) {
   1824c:	b128      	cbz	r0, 1825a <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1824e:	4629      	mov	r1, r5
   18250:	220c      	movs	r2, #12
}
   18252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18256:	f00d bb90 	b.w	2597a <memset>
}
   1825a:	bd70      	pop	{r4, r5, r6, pc}
   1825c:	00028638 	.word	0x00028638
   18260:	00028618 	.word	0x00028618
   18264:	0002ea88 	.word	0x0002ea88

00018268 <disconnected_cb>:
{
   18268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1826c:	4b1f      	ldr	r3, [pc, #124]	; (182ec <disconnected_cb+0x84>)
{
   1826e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18270:	6882      	ldr	r2, [r0, #8]
   18272:	429a      	cmp	r2, r3
{
   18274:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18276:	d102      	bne.n	1827e <disconnected_cb+0x16>
	ccc = attr->user_data;
   18278:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1827a:	8963      	ldrh	r3, [r4, #10]
   1827c:	b9c3      	cbnz	r3, 182b0 <disconnected_cb+0x48>
}
   1827e:	2001      	movs	r0, #1
   18280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18284:	f105 0890 	add.w	r8, r5, #144	; 0x90
   18288:	7a28      	ldrb	r0, [r5, #8]
   1828a:	4641      	mov	r1, r8
   1828c:	f00d fc8e 	bl	25bac <bt_addr_le_is_bonded>
   18290:	b948      	cbnz	r0, 182a6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   18292:	4b17      	ldr	r3, [pc, #92]	; (182f0 <disconnected_cb+0x88>)
   18294:	429c      	cmp	r4, r3
   18296:	d102      	bne.n	1829e <disconnected_cb+0x36>
					sc_clear(conn);
   18298:	4628      	mov	r0, r5
   1829a:	f7ff ffb9 	bl	18210 <sc_clear>
				clear_ccc_cfg(cfg);
   1829e:	4620      	mov	r0, r4
   182a0:	f00e faf4 	bl	2688c <clear_ccc_cfg>
	if (!value_used) {
   182a4:	e019      	b.n	182da <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   182a6:	4641      	mov	r1, r8
   182a8:	4638      	mov	r0, r7
   182aa:	f00e faec 	bl	26886 <bt_addr_le_copy>
	if (!value_used) {
   182ae:	e014      	b.n	182da <disconnected_cb+0x72>
		if (!cfg->value) {
   182b0:	8923      	ldrh	r3, [r4, #8]
   182b2:	b193      	cbz	r3, 182da <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   182b4:	4627      	mov	r7, r4
   182b6:	4628      	mov	r0, r5
   182b8:	f817 1b01 	ldrb.w	r1, [r7], #1
   182bc:	463a      	mov	r2, r7
   182be:	f00d fdc7 	bl	25e50 <bt_conn_is_peer_addr_le>
   182c2:	2800      	cmp	r0, #0
   182c4:	d1de      	bne.n	18284 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   182c6:	7820      	ldrb	r0, [r4, #0]
   182c8:	4639      	mov	r1, r7
   182ca:	f7fe f849 	bl	16360 <bt_conn_lookup_addr_le>
			if (tmp) {
   182ce:	b120      	cbz	r0, 182da <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   182d0:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   182d2:	f7fd fdc1 	bl	15e58 <bt_conn_unref>
	if (!value_used) {
   182d6:	2d07      	cmp	r5, #7
   182d8:	d0d1      	beq.n	1827e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   182da:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   182dc:	2100      	movs	r1, #0
   182de:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   182e0:	2b00      	cmp	r3, #0
   182e2:	d0cc      	beq.n	1827e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   182e4:	4630      	mov	r0, r6
   182e6:	4798      	blx	r3
   182e8:	e7c9      	b.n	1827e <disconnected_cb+0x16>
   182ea:	bf00      	nop
   182ec:	00017c55 	.word	0x00017c55
   182f0:	200004ac 	.word	0x200004ac

000182f4 <gatt_write_ccc>:
{
   182f4:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   182f6:	2312      	movs	r3, #18
{
   182f8:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   182fa:	2104      	movs	r1, #4
   182fc:	e9cd 3100 	strd	r3, r1, [sp]
   18300:	4b03      	ldr	r3, [pc, #12]	; (18310 <gatt_write_ccc+0x1c>)
   18302:	4904      	ldr	r1, [pc, #16]	; (18314 <gatt_write_ccc+0x20>)
   18304:	f00e fcb9 	bl	26c7a <gatt_req_send>
}
   18308:	b003      	add	sp, #12
   1830a:	f85d fb04 	ldr.w	pc, [sp], #4
   1830e:	bf00      	nop
   18310:	000269fb 	.word	0x000269fb
   18314:	00026bf3 	.word	0x00026bf3

00018318 <bt_gatt_init>:
{
   18318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1831a:	4b2c      	ldr	r3, [pc, #176]	; (183cc <bt_gatt_init+0xb4>)
   1831c:	f3bf 8f5b 	dmb	ish
   18320:	2201      	movs	r2, #1
   18322:	e853 1f00 	ldrex	r1, [r3]
   18326:	2900      	cmp	r1, #0
   18328:	d103      	bne.n	18332 <bt_gatt_init+0x1a>
   1832a:	e843 2000 	strex	r0, r2, [r3]
   1832e:	2800      	cmp	r0, #0
   18330:	d1f7      	bne.n	18322 <bt_gatt_init+0xa>
   18332:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   18336:	d148      	bne.n	183ca <bt_gatt_init+0xb2>
   18338:	f3bf 8f5b 	dmb	ish
   1833c:	4b24      	ldr	r3, [pc, #144]	; (183d0 <bt_gatt_init+0xb8>)
   1833e:	e853 1f00 	ldrex	r1, [r3]
   18342:	2900      	cmp	r1, #0
   18344:	d103      	bne.n	1834e <bt_gatt_init+0x36>
   18346:	e843 2000 	strex	r0, r2, [r3]
   1834a:	2800      	cmp	r0, #0
   1834c:	d1f7      	bne.n	1833e <bt_gatt_init+0x26>
   1834e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   18352:	d035      	beq.n	183c0 <bt_gatt_init+0xa8>
	list->head = NULL;
   18354:	4b1f      	ldr	r3, [pc, #124]	; (183d4 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18356:	4920      	ldr	r1, [pc, #128]	; (183d8 <bt_gatt_init+0xc0>)
   18358:	4820      	ldr	r0, [pc, #128]	; (183dc <bt_gatt_init+0xc4>)
   1835a:	2200      	movs	r2, #0
	list->tail = NULL;
   1835c:	e9c3 2200 	strd	r2, r2, [r3]
   18360:	f009 ff28 	bl	221b4 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18364:	2300      	movs	r3, #0
   18366:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1836a:	481c      	ldr	r0, [pc, #112]	; (183dc <bt_gatt_init+0xc4>)
   1836c:	f009 ffca 	bl	22304 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   18370:	491b      	ldr	r1, [pc, #108]	; (183e0 <bt_gatt_init+0xc8>)
   18372:	481c      	ldr	r0, [pc, #112]	; (183e4 <bt_gatt_init+0xcc>)
   18374:	f009 ff1e 	bl	221b4 <k_work_init_delayable>
   18378:	2102      	movs	r1, #2
   1837a:	481b      	ldr	r0, [pc, #108]	; (183e8 <bt_gatt_init+0xd0>)
   1837c:	f00e fa4b 	bl	26816 <atomic_or>
}
   18380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   18384:	4919      	ldr	r1, [pc, #100]	; (183ec <bt_gatt_init+0xd4>)
   18386:	481a      	ldr	r0, [pc, #104]	; (183f0 <bt_gatt_init+0xd8>)
   18388:	f009 bf14 	b.w	221b4 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1838c:	4a19      	ldr	r2, [pc, #100]	; (183f4 <bt_gatt_init+0xdc>)
   1838e:	6863      	ldr	r3, [r4, #4]
   18390:	8811      	ldrh	r1, [r2, #0]
   18392:	440b      	add	r3, r1
   18394:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   18396:	3408      	adds	r4, #8
   18398:	42ac      	cmp	r4, r5
   1839a:	d90e      	bls.n	183ba <bt_gatt_init+0xa2>
   1839c:	4916      	ldr	r1, [pc, #88]	; (183f8 <bt_gatt_init+0xe0>)
   1839e:	4817      	ldr	r0, [pc, #92]	; (183fc <bt_gatt_init+0xe4>)
   183a0:	f240 4351 	movw	r3, #1105	; 0x451
   183a4:	4632      	mov	r2, r6
   183a6:	f00c f9a7 	bl	246f8 <printk>
   183aa:	4815      	ldr	r0, [pc, #84]	; (18400 <bt_gatt_init+0xe8>)
   183ac:	f00c f9a4 	bl	246f8 <printk>
   183b0:	f240 4151 	movw	r1, #1105	; 0x451
   183b4:	4630      	mov	r0, r6
   183b6:	f00c fb90 	bl	24ada <assert_post_action>
   183ba:	42bc      	cmp	r4, r7
   183bc:	d3e6      	bcc.n	1838c <bt_gatt_init+0x74>
   183be:	e7c9      	b.n	18354 <bt_gatt_init+0x3c>
   183c0:	4d10      	ldr	r5, [pc, #64]	; (18404 <bt_gatt_init+0xec>)
   183c2:	4c11      	ldr	r4, [pc, #68]	; (18408 <bt_gatt_init+0xf0>)
   183c4:	4e11      	ldr	r6, [pc, #68]	; (1840c <bt_gatt_init+0xf4>)
   183c6:	462f      	mov	r7, r5
   183c8:	e7e6      	b.n	18398 <bt_gatt_init+0x80>
}
   183ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183cc:	20002210 	.word	0x20002210
   183d0:	2000222c 	.word	0x2000222c
   183d4:	200021e8 	.word	0x200021e8
   183d8:	00018639 	.word	0x00018639
   183dc:	20001828 	.word	0x20001828
   183e0:	00018a3d 	.word	0x00018a3d
   183e4:	200018d8 	.word	0x200018d8
   183e8:	20001908 	.word	0x20001908
   183ec:	00026f6b 	.word	0x00026f6b
   183f0:	20001888 	.word	0x20001888
   183f4:	20002566 	.word	0x20002566
   183f8:	0002eaa5 	.word	0x0002eaa5
   183fc:	000290f5 	.word	0x000290f5
   18400:	0002e327 	.word	0x0002e327
   18404:	000285a0 	.word	0x000285a0
   18408:	00028590 	.word	0x00028590
   1840c:	0002e963 	.word	0x0002e963

00018410 <bt_gatt_attr_get_handle>:
{
   18410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   18414:	4604      	mov	r4, r0
   18416:	b910      	cbnz	r0, 1841e <bt_gatt_attr_get_handle+0xe>
		return 0;
   18418:	2000      	movs	r0, #0
}
   1841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1841e:	8a00      	ldrh	r0, [r0, #16]
   18420:	2800      	cmp	r0, #0
   18422:	d1fa      	bne.n	1841a <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18424:	4f1a      	ldr	r7, [pc, #104]	; (18490 <bt_gatt_attr_get_handle+0x80>)
   18426:	4d1b      	ldr	r5, [pc, #108]	; (18494 <bt_gatt_attr_get_handle+0x84>)
   18428:	f8df 9078 	ldr.w	r9, [pc, #120]	; 184a4 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   1842c:	2601      	movs	r6, #1
   1842e:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18430:	42bd      	cmp	r5, r7
   18432:	d90e      	bls.n	18452 <bt_gatt_attr_get_handle+0x42>
   18434:	4918      	ldr	r1, [pc, #96]	; (18498 <bt_gatt_attr_get_handle+0x88>)
   18436:	4819      	ldr	r0, [pc, #100]	; (1849c <bt_gatt_attr_get_handle+0x8c>)
   18438:	f240 538c 	movw	r3, #1420	; 0x58c
   1843c:	464a      	mov	r2, r9
   1843e:	f00c f95b 	bl	246f8 <printk>
   18442:	4817      	ldr	r0, [pc, #92]	; (184a0 <bt_gatt_attr_get_handle+0x90>)
   18444:	f00c f958 	bl	246f8 <printk>
   18448:	f240 518c 	movw	r1, #1420	; 0x58c
   1844c:	4648      	mov	r0, r9
   1844e:	f00c fb44 	bl	24ada <assert_post_action>
   18452:	4545      	cmp	r5, r8
   18454:	d2e0      	bcs.n	18418 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   18456:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1845a:	4574      	cmp	r4, lr
   1845c:	d305      	bcc.n	1846a <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1845e:	2114      	movs	r1, #20
   18460:	fb01 e30c 	mla	r3, r1, ip, lr
   18464:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   18466:	429c      	cmp	r4, r3
   18468:	d90f      	bls.n	1848a <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1846a:	eb06 030c 	add.w	r3, r6, ip
   1846e:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18470:	3508      	adds	r5, #8
   18472:	4606      	mov	r6, r0
   18474:	e7dc      	b.n	18430 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   18476:	fb01 e302 	mla	r3, r1, r2, lr
   1847a:	429c      	cmp	r4, r3
   1847c:	d0cd      	beq.n	1841a <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1847e:	3201      	adds	r2, #1
   18480:	18b3      	adds	r3, r6, r2
   18482:	4562      	cmp	r2, ip
   18484:	b298      	uxth	r0, r3
   18486:	d1f6      	bne.n	18476 <bt_gatt_attr_get_handle+0x66>
   18488:	e7f2      	b.n	18470 <bt_gatt_attr_get_handle+0x60>
   1848a:	2200      	movs	r2, #0
   1848c:	e7f8      	b.n	18480 <bt_gatt_attr_get_handle+0x70>
   1848e:	bf00      	nop
   18490:	000285a0 	.word	0x000285a0
   18494:	00028590 	.word	0x00028590
   18498:	0002ea9e 	.word	0x0002ea9e
   1849c:	000290f5 	.word	0x000290f5
   184a0:	0002e327 	.word	0x0002e327
   184a4:	0002e963 	.word	0x0002e963

000184a8 <bt_gatt_foreach_attr_type>:
{
   184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184ac:	b085      	sub	sp, #20
   184ae:	4607      	mov	r7, r0
   184b0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   184b4:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   184b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   184ba:	2d00      	cmp	r5, #0
   184bc:	bf08      	it	eq
   184be:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   184c0:	4b2d      	ldr	r3, [pc, #180]	; (18578 <bt_gatt_foreach_attr_type+0xd0>)
{
   184c2:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   184c4:	881b      	ldrh	r3, [r3, #0]
   184c6:	4283      	cmp	r3, r0
{
   184c8:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   184ca:	d24e      	bcs.n	1856a <bt_gatt_foreach_attr_type+0xc2>
}
   184cc:	b005      	add	sp, #20
   184ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   184d2:	6873      	ldr	r3, [r6, #4]
   184d4:	4423      	add	r3, r4
   184d6:	42bb      	cmp	r3, r7
   184d8:	d244      	bcs.n	18564 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   184da:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   184dc:	3608      	adds	r6, #8
   184de:	4556      	cmp	r6, sl
   184e0:	d90e      	bls.n	18500 <bt_gatt_foreach_attr_type+0x58>
   184e2:	4926      	ldr	r1, [pc, #152]	; (1857c <bt_gatt_foreach_attr_type+0xd4>)
   184e4:	4826      	ldr	r0, [pc, #152]	; (18580 <bt_gatt_foreach_attr_type+0xd8>)
   184e6:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   184ea:	465a      	mov	r2, fp
   184ec:	f00c f904 	bl	246f8 <printk>
   184f0:	4824      	ldr	r0, [pc, #144]	; (18584 <bt_gatt_foreach_attr_type+0xdc>)
   184f2:	f00c f901 	bl	246f8 <printk>
   184f6:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   184fa:	4658      	mov	r0, fp
   184fc:	f00c faed 	bl	24ada <assert_post_action>
   18500:	4b21      	ldr	r3, [pc, #132]	; (18588 <bt_gatt_foreach_attr_type+0xe0>)
   18502:	429e      	cmp	r6, r3
   18504:	d3e5      	bcc.n	184d2 <bt_gatt_foreach_attr_type+0x2a>
   18506:	e7e1      	b.n	184cc <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18508:	5889      	ldr	r1, [r1, r2]
   1850a:	9303      	str	r3, [sp, #12]
   1850c:	4640      	mov	r0, r8
   1850e:	f00d fa9c 	bl	25a4a <bt_uuid_cmp>
   18512:	9b03      	ldr	r3, [sp, #12]
   18514:	b198      	cbz	r0, 1853e <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18516:	3401      	adds	r4, #1
   18518:	f109 0901 	add.w	r9, r9, #1
   1851c:	b2a4      	uxth	r4, r4
   1851e:	6873      	ldr	r3, [r6, #4]
   18520:	454b      	cmp	r3, r9
   18522:	d9db      	bls.n	184dc <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   18524:	9b02      	ldr	r3, [sp, #8]
   18526:	429c      	cmp	r4, r3
   18528:	d8d0      	bhi.n	184cc <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1852a:	42bc      	cmp	r4, r7
   1852c:	d3f3      	bcc.n	18516 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1852e:	2314      	movs	r3, #20
   18530:	6831      	ldr	r1, [r6, #0]
   18532:	fb03 f209 	mul.w	r2, r3, r9
   18536:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   18538:	f1b8 0f00 	cmp.w	r8, #0
   1853c:	d1e4      	bne.n	18508 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1853e:	9a01      	ldr	r2, [sp, #4]
   18540:	b95a      	cbnz	r2, 1855a <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   18542:	3d01      	subs	r5, #1
   18544:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   18546:	4618      	mov	r0, r3
   18548:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1854a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1854c:	4621      	mov	r1, r4
   1854e:	4798      	blx	r3
	if (!*num_matches) {
   18550:	2d00      	cmp	r5, #0
   18552:	d0bb      	beq.n	184cc <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   18554:	2800      	cmp	r0, #0
   18556:	d1de      	bne.n	18516 <bt_gatt_foreach_attr_type+0x6e>
   18558:	e7b8      	b.n	184cc <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1855a:	68da      	ldr	r2, [r3, #12]
   1855c:	9901      	ldr	r1, [sp, #4]
   1855e:	4291      	cmp	r1, r2
   18560:	d1d9      	bne.n	18516 <bt_gatt_foreach_attr_type+0x6e>
   18562:	e7ee      	b.n	18542 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18564:	f04f 0900 	mov.w	r9, #0
   18568:	e7d9      	b.n	1851e <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1856a:	4e08      	ldr	r6, [pc, #32]	; (1858c <bt_gatt_foreach_attr_type+0xe4>)
   1856c:	f8df a018 	ldr.w	sl, [pc, #24]	; 18588 <bt_gatt_foreach_attr_type+0xe0>
   18570:	f8df b01c 	ldr.w	fp, [pc, #28]	; 18590 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   18574:	2401      	movs	r4, #1
   18576:	e7b2      	b.n	184de <bt_gatt_foreach_attr_type+0x36>
   18578:	20002566 	.word	0x20002566
   1857c:	0002ea9e 	.word	0x0002ea9e
   18580:	000290f5 	.word	0x000290f5
   18584:	0002e327 	.word	0x0002e327
   18588:	000285a0 	.word	0x000285a0
   1858c:	00028590 	.word	0x00028590
   18590:	0002e963 	.word	0x0002e963

00018594 <db_hash_gen>:
{
   18594:	b530      	push	{r4, r5, lr}
   18596:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   18598:	2300      	movs	r3, #0
{
   1859a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1859c:	aa1c      	add	r2, sp, #112	; 0x70
   1859e:	4669      	mov	r1, sp
   185a0:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   185a2:	e9cd 3300 	strd	r3, r3, [sp]
   185a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   185aa:	f00d f82f 	bl	2560c <tc_cmac_setup>
   185ae:	b958      	cbnz	r0, 185c8 <db_hash_gen+0x34>
   185b0:	491a      	ldr	r1, [pc, #104]	; (1861c <db_hash_gen+0x88>)
   185b2:	4b1b      	ldr	r3, [pc, #108]	; (18620 <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   185b4:	481b      	ldr	r0, [pc, #108]	; (18624 <db_hash_gen+0x90>)
   185b6:	1ac9      	subs	r1, r1, r3
   185b8:	08c9      	lsrs	r1, r1, #3
   185ba:	0189      	lsls	r1, r1, #6
   185bc:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   185c0:	f00c fab9 	bl	24b36 <log_0>
}
   185c4:	b049      	add	sp, #292	; 0x124
   185c6:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   185c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   185cc:	2001      	movs	r0, #1
   185ce:	4a16      	ldr	r2, [pc, #88]	; (18628 <db_hash_gen+0x94>)
   185d0:	ab04      	add	r3, sp, #16
   185d2:	f00e fbda 	bl	26d8a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   185d6:	4815      	ldr	r0, [pc, #84]	; (1862c <db_hash_gen+0x98>)
   185d8:	a904      	add	r1, sp, #16
   185da:	f00d f8ae 	bl	2573a <tc_cmac_final>
   185de:	b940      	cbnz	r0, 185f2 <db_hash_gen+0x5e>
   185e0:	490e      	ldr	r1, [pc, #56]	; (1861c <db_hash_gen+0x88>)
   185e2:	4b0f      	ldr	r3, [pc, #60]	; (18620 <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   185e4:	4812      	ldr	r0, [pc, #72]	; (18630 <db_hash_gen+0x9c>)
   185e6:	1ac9      	subs	r1, r1, r3
   185e8:	08c9      	lsrs	r1, r1, #3
   185ea:	0189      	lsls	r1, r1, #6
   185ec:	f041 0101 	orr.w	r1, r1, #1
   185f0:	e7e6      	b.n	185c0 <db_hash_gen+0x2c>
   185f2:	4b0e      	ldr	r3, [pc, #56]	; (1862c <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   185f4:	2208      	movs	r2, #8
   185f6:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   185fa:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   185fc:	780d      	ldrb	r5, [r1, #0]
   185fe:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   18602:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   18604:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   18608:	d1f7      	bne.n	185fa <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1860a:	b10c      	cbz	r4, 18610 <db_hash_gen+0x7c>
		db_hash_store();
   1860c:	f7ff f9a0 	bl	17950 <db_hash_store>
   18610:	2104      	movs	r1, #4
   18612:	4808      	ldr	r0, [pc, #32]	; (18634 <db_hash_gen+0xa0>)
   18614:	f00e f8ff 	bl	26816 <atomic_or>
   18618:	e7d4      	b.n	185c4 <db_hash_gen+0x30>
   1861a:	bf00      	nop
   1861c:	00028638 	.word	0x00028638
   18620:	00028618 	.word	0x00028618
   18624:	0002eacd 	.word	0x0002eacd
   18628:	0002676b 	.word	0x0002676b
   1862c:	20001808 	.word	0x20001808
   18630:	0002eae6 	.word	0x0002eae6
   18634:	20001908 	.word	0x20001908

00018638 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18638:	f06f 0108 	mvn.w	r1, #8
{
   1863c:	b510      	push	{r4, lr}
   1863e:	4828      	ldr	r0, [pc, #160]	; (186e0 <db_hash_process+0xa8>)
   18640:	f00e f932 	bl	268a8 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   18644:	0701      	lsls	r1, r0, #28
   18646:	d545      	bpl.n	186d4 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18648:	4825      	ldr	r0, [pc, #148]	; (186e0 <db_hash_process+0xa8>)
   1864a:	f00e f888 	bl	2675e <atomic_get>
   1864e:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18650:	075a      	lsls	r2, r3, #29
   18652:	f3c0 0080 	ubfx	r0, r0, #2, #1
   18656:	d401      	bmi.n	1865c <db_hash_process+0x24>
			db_hash_gen(false);
   18658:	f7ff ff9c 	bl	18594 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1865c:	4921      	ldr	r1, [pc, #132]	; (186e4 <db_hash_process+0xac>)
   1865e:	2210      	movs	r2, #16
   18660:	1888      	adds	r0, r1, r2
   18662:	f00d f96f 	bl	25944 <memcmp>
   18666:	b948      	cbnz	r0, 1867c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   18668:	481f      	ldr	r0, [pc, #124]	; (186e8 <db_hash_process+0xb0>)
   1866a:	f009 fecd 	bl	22408 <k_work_cancel_delayable>
}
   1866e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18672:	481b      	ldr	r0, [pc, #108]	; (186e0 <db_hash_process+0xa8>)
   18674:	f06f 0101 	mvn.w	r1, #1
   18678:	f00e b916 	b.w	268a8 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1867c:	4c1b      	ldr	r4, [pc, #108]	; (186ec <db_hash_process+0xb4>)
   1867e:	2101      	movs	r1, #1
   18680:	f104 0050 	add.w	r0, r4, #80	; 0x50
   18684:	f00e f8c7 	bl	26816 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18688:	f010 0f01 	tst.w	r0, #1
   1868c:	4623      	mov	r3, r4
   1868e:	d110      	bne.n	186b2 <db_hash_process+0x7a>
		gatt_sc.start = start;
   18690:	4b17      	ldr	r3, [pc, #92]	; (186f0 <db_hash_process+0xb8>)
   18692:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18694:	4812      	ldr	r0, [pc, #72]	; (186e0 <db_hash_process+0xa8>)
   18696:	f00e f862 	bl	2675e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1869a:	0783      	lsls	r3, r0, #30
   1869c:	d405      	bmi.n	186aa <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   1869e:	4812      	ldr	r0, [pc, #72]	; (186e8 <db_hash_process+0xb0>)
   186a0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   186a4:	2300      	movs	r3, #0
   186a6:	f009 fea9 	bl	223fc <k_work_reschedule>
}
   186aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   186ae:	f7ff b94f 	b.w	17950 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   186b2:	8b22      	ldrh	r2, [r4, #24]
   186b4:	8b61      	ldrh	r1, [r4, #26]
   186b6:	2a01      	cmp	r2, #1
   186b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   186bc:	d805      	bhi.n	186ca <db_hash_process+0x92>
   186be:	4291      	cmp	r1, r2
   186c0:	d0f3      	beq.n	186aa <db_hash_process+0x72>
		*end = new_end;
   186c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   186c6:	835a      	strh	r2, [r3, #26]
   186c8:	e7e4      	b.n	18694 <db_hash_process+0x5c>
		*start = new_start;
   186ca:	2001      	movs	r0, #1
	if (*end < new_end) {
   186cc:	4291      	cmp	r1, r2
		*start = new_start;
   186ce:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   186d0:	d0e0      	beq.n	18694 <db_hash_process+0x5c>
   186d2:	e7f6      	b.n	186c2 <db_hash_process+0x8a>
}
   186d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   186d8:	2001      	movs	r0, #1
   186da:	f7ff bf5b 	b.w	18594 <db_hash_gen>
   186de:	bf00      	nop
   186e0:	20001908 	.word	0x20001908
   186e4:	20001808 	.word	0x20001808
   186e8:	200018d8 	.word	0x200018d8
   186ec:	200018b8 	.word	0x200018b8
   186f0:	ffff0001 	.word	0xffff0001

000186f4 <ccc_set_direct>:
{
   186f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186f8:	b0b9      	sub	sp, #228	; 0xe4
   186fa:	4688      	mov	r8, r1
   186fc:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   186fe:	493f      	ldr	r1, [pc, #252]	; (187fc <ccc_set_direct+0x108>)
   18700:	9840      	ldr	r0, [sp, #256]	; 0x100
   18702:	466a      	mov	r2, sp
{
   18704:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   18706:	f00c fcf3 	bl	250f0 <settings_name_steq>
   1870a:	b978      	cbnz	r0, 1872c <ccc_set_direct+0x38>
   1870c:	4b3c      	ldr	r3, [pc, #240]	; (18800 <ccc_set_direct+0x10c>)
   1870e:	493d      	ldr	r1, [pc, #244]	; (18804 <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
   18710:	483d      	ldr	r0, [pc, #244]	; (18808 <ccc_set_direct+0x114>)
   18712:	1ac9      	subs	r1, r1, r3
   18714:	08c9      	lsrs	r1, r1, #3
   18716:	0189      	lsls	r1, r1, #6
   18718:	f041 0101 	orr.w	r1, r1, #1
   1871c:	f00c fa0b 	bl	24b36 <log_0>
			return -EINVAL;
   18720:	f06f 0515 	mvn.w	r5, #21
}
   18724:	4628      	mov	r0, r5
   18726:	b039      	add	sp, #228	; 0xe4
   18728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1872c:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1872e:	a901      	add	r1, sp, #4
   18730:	4630      	mov	r0, r6
   18732:	f00c fd00 	bl	25136 <settings_name_next>
		if (!name) {
   18736:	b96e      	cbnz	r6, 18754 <ccc_set_direct+0x60>
   18738:	4932      	ldr	r1, [pc, #200]	; (18804 <ccc_set_direct+0x110>)
   1873a:	4b31      	ldr	r3, [pc, #196]	; (18800 <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
   1873c:	4833      	ldr	r0, [pc, #204]	; (1880c <ccc_set_direct+0x118>)
   1873e:	1ac9      	subs	r1, r1, r3
   18740:	08c9      	lsrs	r1, r1, #3
   18742:	0189      	lsls	r1, r1, #6
   18744:	f041 0101 	orr.w	r1, r1, #1
   18748:	f00c f9f5 	bl	24b36 <log_0>
			return -EINVAL;
   1874c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   18750:	4625      	mov	r5, r4
   18752:	e7e7      	b.n	18724 <ccc_set_direct+0x30>
		} else if (!next) {
   18754:	9801      	ldr	r0, [sp, #4]
   18756:	b9c0      	cbnz	r0, 1878a <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
   18758:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1875c:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1875e:	4649      	mov	r1, r9
   18760:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   18762:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   18766:	f00d f94c 	bl	25a02 <bt_settings_decode_key>
		if (err) {
   1876a:	4605      	mov	r5, r0
   1876c:	b1f8      	cbz	r0, 187ae <ccc_set_direct+0xba>
   1876e:	4a24      	ldr	r2, [pc, #144]	; (18800 <ccc_set_direct+0x10c>)
   18770:	4c24      	ldr	r4, [pc, #144]	; (18804 <ccc_set_direct+0x110>)
   18772:	4630      	mov	r0, r6
   18774:	1aa4      	subs	r4, r4, r2
   18776:	08e4      	lsrs	r4, r4, #3
   18778:	f7f9 fafc 	bl	11d74 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1877c:	01a4      	lsls	r4, r4, #6
   1877e:	f044 0401 	orr.w	r4, r4, #1
   18782:	4601      	mov	r1, r0
   18784:	4622      	mov	r2, r4
   18786:	4822      	ldr	r0, [pc, #136]	; (18810 <ccc_set_direct+0x11c>)
   18788:	e00e      	b.n	187a8 <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
   1878a:	2100      	movs	r1, #0
   1878c:	220a      	movs	r2, #10
   1878e:	f00d f818 	bl	257c2 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   18792:	4601      	mov	r1, r0
   18794:	2800      	cmp	r0, #0
   18796:	d0df      	beq.n	18758 <ccc_set_direct+0x64>
   18798:	4a1a      	ldr	r2, [pc, #104]	; (18804 <ccc_set_direct+0x110>)
   1879a:	4b19      	ldr	r3, [pc, #100]	; (18800 <ccc_set_direct+0x10c>)
				BT_ERR("Invalid local identity %lu", next_id);
   1879c:	481d      	ldr	r0, [pc, #116]	; (18814 <ccc_set_direct+0x120>)
   1879e:	1ad2      	subs	r2, r2, r3
   187a0:	08d2      	lsrs	r2, r2, #3
   187a2:	0192      	lsls	r2, r2, #6
   187a4:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
   187a8:	f00c f9d2 	bl	24b50 <log_1>
   187ac:	e7ce      	b.n	1874c <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
   187ae:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   187b2:	f1b8 0f00 	cmp.w	r8, #0
   187b6:	d01d      	beq.n	187f4 <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   187b8:	ae08      	add	r6, sp, #32
   187ba:	22c0      	movs	r2, #192	; 0xc0
   187bc:	4631      	mov	r1, r6
   187be:	4638      	mov	r0, r7
   187c0:	47a0      	blx	r4
			if (len < 0) {
   187c2:	1e04      	subs	r4, r0, #0
   187c4:	da0b      	bge.n	187de <ccc_set_direct+0xea>
   187c6:	4b0e      	ldr	r3, [pc, #56]	; (18800 <ccc_set_direct+0x10c>)
   187c8:	4a0e      	ldr	r2, [pc, #56]	; (18804 <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
   187ca:	4813      	ldr	r0, [pc, #76]	; (18818 <ccc_set_direct+0x124>)
   187cc:	1ad2      	subs	r2, r2, r3
   187ce:	08d2      	lsrs	r2, r2, #3
   187d0:	0192      	lsls	r2, r2, #6
   187d2:	f042 0201 	orr.w	r2, r2, #1
   187d6:	4621      	mov	r1, r4
   187d8:	f00c f9ba 	bl	24b50 <log_1>
				return len;
   187dc:	e7b8      	b.n	18750 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   187de:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   187e0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   187e2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   187e4:	4a0d      	ldr	r2, [pc, #52]	; (1881c <ccc_set_direct+0x128>)
   187e6:	ab04      	add	r3, sp, #16
   187e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   187ec:	2001      	movs	r0, #1
   187ee:	f00e facc 	bl	26d8a <bt_gatt_foreach_attr>
	return 0;
   187f2:	e797      	b.n	18724 <ccc_set_direct+0x30>
			load.count = 0;
   187f4:	e9cd 0006 	strd	r0, r0, [sp, #24]
   187f8:	e7f4      	b.n	187e4 <ccc_set_direct+0xf0>
   187fa:	bf00      	nop
   187fc:	0002eaff 	.word	0x0002eaff
   18800:	00028618 	.word	0x00028618
   18804:	00028638 	.word	0x00028638
   18808:	0002eb06 	.word	0x0002eb06
   1880c:	0002da99 	.word	0x0002da99
   18810:	0002e9c4 	.word	0x0002e9c4
   18814:	0002e9e0 	.word	0x0002e9e0
   18818:	0002e907 	.word	0x0002e907
   1881c:	00017eb9 	.word	0x00017eb9

00018820 <gatt_indicate>:
{
   18820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18824:	4615      	mov	r5, r2
   18826:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   18828:	2214      	movs	r2, #20
   1882a:	6869      	ldr	r1, [r5, #4]
{
   1882c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1882e:	f00e fab7 	bl	26da0 <bt_gatt_check_perm>
   18832:	4607      	mov	r7, r0
   18834:	b170      	cbz	r0, 18854 <gatt_indicate+0x34>
   18836:	4b2a      	ldr	r3, [pc, #168]	; (188e0 <gatt_indicate+0xc0>)
   18838:	492a      	ldr	r1, [pc, #168]	; (188e4 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   1883a:	482b      	ldr	r0, [pc, #172]	; (188e8 <gatt_indicate+0xc8>)
   1883c:	1ac9      	subs	r1, r1, r3
   1883e:	08c9      	lsrs	r1, r1, #3
   18840:	0189      	lsls	r1, r1, #6
   18842:	f041 0102 	orr.w	r1, r1, #2
   18846:	f00c f976 	bl	24b36 <log_0>
		return -EPERM;
   1884a:	f04f 35ff 	mov.w	r5, #4294967295
}
   1884e:	4628      	mov	r0, r5
   18850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   18854:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   18858:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1885a:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1885c:	f7fe fe8e 	bl	1757c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   18860:	3602      	adds	r6, #2
	if (!req) {
   18862:	4604      	mov	r4, r0
   18864:	b910      	cbnz	r0, 1886c <gatt_indicate+0x4c>
		return -ENOMEM;
   18866:	f06f 050b 	mvn.w	r5, #11
   1886a:	e7f0      	b.n	1884e <gatt_indicate+0x2e>
	req->func = func;
   1886c:	4b1f      	ldr	r3, [pc, #124]	; (188ec <gatt_indicate+0xcc>)
	req->len = len;
   1886e:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   18870:	211d      	movs	r1, #29
   18872:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   18874:	60c7      	str	r7, [r0, #12]
	req->func = func;
   18876:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   18878:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1887a:	4632      	mov	r2, r6
   1887c:	4640      	mov	r0, r8
   1887e:	f7fe fbe3 	bl	17048 <bt_att_create_pdu>
	if (!buf) {
   18882:	4606      	mov	r6, r0
   18884:	b968      	cbnz	r0, 188a2 <gatt_indicate+0x82>
   18886:	4b16      	ldr	r3, [pc, #88]	; (188e0 <gatt_indicate+0xc0>)
   18888:	4916      	ldr	r1, [pc, #88]	; (188e4 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   1888a:	4819      	ldr	r0, [pc, #100]	; (188f0 <gatt_indicate+0xd0>)
   1888c:	1ac9      	subs	r1, r1, r3
   1888e:	08c9      	lsrs	r1, r1, #3
   18890:	0189      	lsls	r1, r1, #6
   18892:	f041 0102 	orr.w	r1, r1, #2
   18896:	f00c f94e 	bl	24b36 <log_0>
		bt_att_req_free(req);
   1889a:	4620      	mov	r0, r4
   1889c:	f7fe fe84 	bl	175a8 <bt_att_req_free>
   188a0:	e7e1      	b.n	18866 <gatt_indicate+0x46>
   188a2:	f100 0a08 	add.w	sl, r0, #8
   188a6:	2102      	movs	r1, #2
   188a8:	4650      	mov	r0, sl
   188aa:	f003 fb6d 	bl	1bf88 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   188ae:	4607      	mov	r7, r0
   188b0:	8aa9      	ldrh	r1, [r5, #20]
   188b2:	f827 9b02 	strh.w	r9, [r7], #2
   188b6:	4650      	mov	r0, sl
   188b8:	f003 fb66 	bl	1bf88 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   188bc:	8aaa      	ldrh	r2, [r5, #20]
   188be:	6929      	ldr	r1, [r5, #16]
   188c0:	4638      	mov	r0, r7
   188c2:	f00d f84f 	bl	25964 <memcpy>
	req->buf = buf;
   188c6:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   188c8:	4621      	mov	r1, r4
   188ca:	4640      	mov	r0, r8
   188cc:	f7fe ffd6 	bl	1787c <bt_att_req_send>
	if (err) {
   188d0:	4605      	mov	r5, r0
   188d2:	2800      	cmp	r0, #0
   188d4:	d0bb      	beq.n	1884e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   188d6:	4620      	mov	r0, r4
   188d8:	f7fe fe66 	bl	175a8 <bt_att_req_free>
   188dc:	e7b7      	b.n	1884e <gatt_indicate+0x2e>
   188de:	bf00      	nop
   188e0:	00028618 	.word	0x00028618
   188e4:	00028638 	.word	0x00028638
   188e8:	0002eb12 	.word	0x0002eb12
   188ec:	00026727 	.word	0x00026727
   188f0:	0002eb28 	.word	0x0002eb28

000188f4 <bt_gatt_indicate>:
{
   188f4:	b530      	push	{r4, r5, lr}
   188f6:	4605      	mov	r5, r0
   188f8:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   188fa:	460c      	mov	r4, r1
   188fc:	b971      	cbnz	r1, 1891c <bt_gatt_indicate+0x28>
   188fe:	4947      	ldr	r1, [pc, #284]	; (18a1c <bt_gatt_indicate+0x128>)
   18900:	4a47      	ldr	r2, [pc, #284]	; (18a20 <bt_gatt_indicate+0x12c>)
   18902:	4848      	ldr	r0, [pc, #288]	; (18a24 <bt_gatt_indicate+0x130>)
   18904:	f640 1348 	movw	r3, #2376	; 0x948
   18908:	f00b fef6 	bl	246f8 <printk>
   1890c:	4846      	ldr	r0, [pc, #280]	; (18a28 <bt_gatt_indicate+0x134>)
   1890e:	f00b fef3 	bl	246f8 <printk>
   18912:	4843      	ldr	r0, [pc, #268]	; (18a20 <bt_gatt_indicate+0x12c>)
   18914:	f640 1148 	movw	r1, #2376	; 0x948
   18918:	f00c f8df 	bl	24ada <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1891c:	6863      	ldr	r3, [r4, #4]
   1891e:	b983      	cbnz	r3, 18942 <bt_gatt_indicate+0x4e>
   18920:	6823      	ldr	r3, [r4, #0]
   18922:	b973      	cbnz	r3, 18942 <bt_gatt_indicate+0x4e>
   18924:	4941      	ldr	r1, [pc, #260]	; (18a2c <bt_gatt_indicate+0x138>)
   18926:	4a3e      	ldr	r2, [pc, #248]	; (18a20 <bt_gatt_indicate+0x12c>)
   18928:	483e      	ldr	r0, [pc, #248]	; (18a24 <bt_gatt_indicate+0x130>)
   1892a:	f640 1349 	movw	r3, #2377	; 0x949
   1892e:	f00b fee3 	bl	246f8 <printk>
   18932:	483d      	ldr	r0, [pc, #244]	; (18a28 <bt_gatt_indicate+0x134>)
   18934:	f00b fee0 	bl	246f8 <printk>
   18938:	4839      	ldr	r0, [pc, #228]	; (18a20 <bt_gatt_indicate+0x12c>)
   1893a:	f640 1149 	movw	r1, #2377	; 0x949
   1893e:	f00c f8cc 	bl	24ada <assert_post_action>
   18942:	483b      	ldr	r0, [pc, #236]	; (18a30 <bt_gatt_indicate+0x13c>)
   18944:	f00d ff0b 	bl	2675e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18948:	0782      	lsls	r2, r0, #30
   1894a:	d561      	bpl.n	18a10 <bt_gatt_indicate+0x11c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1894c:	b115      	cbz	r5, 18954 <bt_gatt_indicate+0x60>
   1894e:	7b6b      	ldrb	r3, [r5, #13]
   18950:	2b07      	cmp	r3, #7
   18952:	d160      	bne.n	18a16 <bt_gatt_indicate+0x122>
	data.attr = params->attr;
   18954:	6860      	ldr	r0, [r4, #4]
   18956:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18958:	f7ff fd5a 	bl	18410 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1895c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1895e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18962:	b33a      	cbz	r2, 189b4 <bt_gatt_indicate+0xc0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18964:	a905      	add	r1, sp, #20
   18966:	9102      	str	r1, [sp, #8]
   18968:	4932      	ldr	r1, [pc, #200]	; (18a34 <bt_gatt_indicate+0x140>)
   1896a:	9101      	str	r1, [sp, #4]
   1896c:	2101      	movs	r1, #1
	found->attr = NULL;
   1896e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18970:	9100      	str	r1, [sp, #0]
   18972:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   18976:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18978:	f7ff fd96 	bl	184a8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1897c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1897e:	b91b      	cbnz	r3, 18988 <bt_gatt_indicate+0x94>
			return -ENOENT;
   18980:	f06f 0001 	mvn.w	r0, #1
}
   18984:	b00b      	add	sp, #44	; 0x2c
   18986:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   18988:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1898a:	9b05      	ldr	r3, [sp, #20]
   1898c:	6818      	ldr	r0, [r3, #0]
   1898e:	2300      	movs	r3, #0
   18990:	f88d 3010 	strb.w	r3, [sp, #16]
   18994:	a904      	add	r1, sp, #16
   18996:	f642 0303 	movw	r3, #10243	; 0x2803
   1899a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1899e:	f00d f854 	bl	25a4a <bt_uuid_cmp>
   189a2:	b970      	cbnz	r0, 189c2 <bt_gatt_indicate+0xce>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   189a4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   189a6:	68c3      	ldr	r3, [r0, #12]
   189a8:	799b      	ldrb	r3, [r3, #6]
   189aa:	069b      	lsls	r3, r3, #26
   189ac:	d405      	bmi.n	189ba <bt_gatt_indicate+0xc6>
			return -EINVAL;
   189ae:	f06f 0015 	mvn.w	r0, #21
   189b2:	e7e7      	b.n	18984 <bt_gatt_indicate+0x90>
		if (!data.handle) {
   189b4:	2800      	cmp	r0, #0
   189b6:	d1e8      	bne.n	1898a <bt_gatt_indicate+0x96>
   189b8:	e7e2      	b.n	18980 <bt_gatt_indicate+0x8c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   189ba:	f00e f998 	bl	26cee <bt_gatt_attr_value_handle>
   189be:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   189c2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   189c6:	b13d      	cbz	r5, 189d8 <bt_gatt_indicate+0xe4>
		params->_ref = 1;
   189c8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   189ca:	4601      	mov	r1, r0
		params->_ref = 1;
   189cc:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   189ce:	4622      	mov	r2, r4
   189d0:	4628      	mov	r0, r5
   189d2:	f7ff ff25 	bl	18820 <gatt_indicate>
   189d6:	e7d5      	b.n	18984 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   189d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   189dc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   189de:	2302      	movs	r3, #2
   189e0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   189e4:	f642 1302 	movw	r3, #10498	; 0x2902
   189e8:	f8ad 3012 	strh.w	r3, [sp, #18]
   189ec:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   189ee:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   189f0:	9302      	str	r3, [sp, #8]
   189f2:	4b11      	ldr	r3, [pc, #68]	; (18a38 <bt_gatt_indicate+0x144>)
   189f4:	9301      	str	r3, [sp, #4]
   189f6:	2301      	movs	r3, #1
   189f8:	9300      	str	r3, [sp, #0]
   189fa:	aa04      	add	r2, sp, #16
   189fc:	462b      	mov	r3, r5
   189fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   18a02:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18a04:	f88d 5010 	strb.w	r5, [sp, #16]
   18a08:	f7ff fd4e 	bl	184a8 <bt_gatt_foreach_attr_type>
	return data.err;
   18a0c:	9807      	ldr	r0, [sp, #28]
   18a0e:	e7b9      	b.n	18984 <bt_gatt_indicate+0x90>
		return -EAGAIN;
   18a10:	f06f 000a 	mvn.w	r0, #10
   18a14:	e7b6      	b.n	18984 <bt_gatt_indicate+0x90>
		return -ENOTCONN;
   18a16:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18a1a:	e7b3      	b.n	18984 <bt_gatt_indicate+0x90>
   18a1c:	0002eb4f 	.word	0x0002eb4f
   18a20:	0002e963 	.word	0x0002e963
   18a24:	000290f5 	.word	0x000290f5
   18a28:	0002eb56 	.word	0x0002eb56
   18a2c:	0002eb6c 	.word	0x0002eb6c
   18a30:	2000037c 	.word	0x2000037c
   18a34:	0002674d 	.word	0x0002674d
   18a38:	00018b6d 	.word	0x00018b6d

00018a3c <sc_process>:
{
   18a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   18a3e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   18a42:	4604      	mov	r4, r0
   18a44:	4628      	mov	r0, r5
   18a46:	f00d fe8a 	bl	2675e <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   18a4a:	0783      	lsls	r3, r0, #30
   18a4c:	d50e      	bpl.n	18a6c <sc_process+0x30>
   18a4e:	4919      	ldr	r1, [pc, #100]	; (18ab4 <sc_process+0x78>)
   18a50:	4a19      	ldr	r2, [pc, #100]	; (18ab8 <sc_process+0x7c>)
   18a52:	481a      	ldr	r0, [pc, #104]	; (18abc <sc_process+0x80>)
   18a54:	f240 33e7 	movw	r3, #999	; 0x3e7
   18a58:	f00b fe4e 	bl	246f8 <printk>
   18a5c:	4818      	ldr	r0, [pc, #96]	; (18ac0 <sc_process+0x84>)
   18a5e:	f00b fe4b 	bl	246f8 <printk>
   18a62:	4815      	ldr	r0, [pc, #84]	; (18ab8 <sc_process+0x7c>)
   18a64:	f240 31e7 	movw	r1, #999	; 0x3e7
   18a68:	f00c f837 	bl	24ada <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18a6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18a70:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18a72:	f06f 0101 	mvn.w	r1, #1
   18a76:	4628      	mov	r0, r5
   18a78:	f00d ff16 	bl	268a8 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   18a7c:	4b11      	ldr	r3, [pc, #68]	; (18ac4 <sc_process+0x88>)
   18a7e:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   18a82:	4b11      	ldr	r3, [pc, #68]	; (18ac8 <sc_process+0x8c>)
   18a84:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   18a88:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   18a8a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   18a8c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   18a90:	2304      	movs	r3, #4
	sc->start = 0U;
   18a92:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   18a96:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   18a9a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18a9e:	f1a4 0120 	sub.w	r1, r4, #32
   18aa2:	f7ff ff27 	bl	188f4 <bt_gatt_indicate>
   18aa6:	b918      	cbnz	r0, 18ab0 <sc_process+0x74>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18aa8:	2102      	movs	r1, #2
   18aaa:	4628      	mov	r0, r5
   18aac:	f00d feb3 	bl	26816 <atomic_or>
}
   18ab0:	b003      	add	sp, #12
   18ab2:	bd30      	pop	{r4, r5, pc}
   18ab4:	0002eb89 	.word	0x0002eb89
   18ab8:	0002e963 	.word	0x0002e963
   18abc:	000290f5 	.word	0x000290f5
   18ac0:	0002ebba 	.word	0x0002ebba
   18ac4:	00028af4 	.word	0x00028af4
   18ac8:	00018159 	.word	0x00018159

00018acc <gatt_notify>:
{
   18acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18ad0:	4614      	mov	r4, r2
   18ad2:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   18ad4:	2214      	movs	r2, #20
   18ad6:	6861      	ldr	r1, [r4, #4]
{
   18ad8:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   18ada:	f00e f961 	bl	26da0 <bt_gatt_check_perm>
   18ade:	b168      	cbz	r0, 18afc <gatt_notify+0x30>
   18ae0:	4b1e      	ldr	r3, [pc, #120]	; (18b5c <gatt_notify+0x90>)
   18ae2:	491f      	ldr	r1, [pc, #124]	; (18b60 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   18ae4:	481f      	ldr	r0, [pc, #124]	; (18b64 <gatt_notify+0x98>)
   18ae6:	1ac9      	subs	r1, r1, r3
   18ae8:	08c9      	lsrs	r1, r1, #3
   18aea:	0189      	lsls	r1, r1, #6
   18aec:	f041 0102 	orr.w	r1, r1, #2
   18af0:	f00c f821 	bl	24b36 <log_0>
		return -EPERM;
   18af4:	f04f 30ff 	mov.w	r0, #4294967295
}
   18af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   18afc:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   18afe:	211b      	movs	r1, #27
   18b00:	3202      	adds	r2, #2
   18b02:	4638      	mov	r0, r7
   18b04:	f7fe faa0 	bl	17048 <bt_att_create_pdu>
	if (!buf) {
   18b08:	4605      	mov	r5, r0
   18b0a:	b960      	cbnz	r0, 18b26 <gatt_notify+0x5a>
   18b0c:	4b13      	ldr	r3, [pc, #76]	; (18b5c <gatt_notify+0x90>)
   18b0e:	4914      	ldr	r1, [pc, #80]	; (18b60 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   18b10:	4815      	ldr	r0, [pc, #84]	; (18b68 <gatt_notify+0x9c>)
   18b12:	1ac9      	subs	r1, r1, r3
   18b14:	08c9      	lsrs	r1, r1, #3
   18b16:	0189      	lsls	r1, r1, #6
   18b18:	f041 0102 	orr.w	r1, r1, #2
   18b1c:	f00c f80b 	bl	24b36 <log_0>
		return -ENOMEM;
   18b20:	f06f 000b 	mvn.w	r0, #11
   18b24:	e7e8      	b.n	18af8 <gatt_notify+0x2c>
   18b26:	f100 0908 	add.w	r9, r0, #8
   18b2a:	2102      	movs	r1, #2
   18b2c:	4648      	mov	r0, r9
   18b2e:	f003 fa2b 	bl	1bf88 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   18b32:	4606      	mov	r6, r0
   18b34:	89a1      	ldrh	r1, [r4, #12]
   18b36:	f826 8b02 	strh.w	r8, [r6], #2
   18b3a:	4648      	mov	r0, r9
   18b3c:	f003 fa24 	bl	1bf88 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   18b40:	89a2      	ldrh	r2, [r4, #12]
   18b42:	68a1      	ldr	r1, [r4, #8]
   18b44:	4630      	mov	r0, r6
   18b46:	f00c ff0d 	bl	25964 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   18b4a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   18b4e:	4629      	mov	r1, r5
   18b50:	4638      	mov	r0, r7
}
   18b52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   18b56:	f7fe be23 	b.w	177a0 <bt_att_send>
   18b5a:	bf00      	nop
   18b5c:	00028618 	.word	0x00028618
   18b60:	00028638 	.word	0x00028638
   18b64:	0002eb12 	.word	0x0002eb12
   18b68:	0002ebd5 	.word	0x0002ebd5

00018b6c <notify_cb>:
{
   18b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b70:	4b3c      	ldr	r3, [pc, #240]	; (18c64 <notify_cb+0xf8>)
{
   18b72:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b74:	6882      	ldr	r2, [r0, #8]
   18b76:	429a      	cmp	r2, r3
{
   18b78:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b7a:	d113      	bne.n	18ba4 <notify_cb+0x38>
	ccc = attr->user_data;
   18b7c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18b7e:	4b3a      	ldr	r3, [pc, #232]	; (18c68 <notify_cb+0xfc>)
   18b80:	429f      	cmp	r7, r3
   18b82:	d014      	beq.n	18bae <notify_cb+0x42>
		if (cfg->value != data->type) {
   18b84:	893a      	ldrh	r2, [r7, #8]
   18b86:	89a3      	ldrh	r3, [r4, #12]
   18b88:	429a      	cmp	r2, r3
   18b8a:	d10b      	bne.n	18ba4 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18b8c:	4639      	mov	r1, r7
   18b8e:	f811 0b01 	ldrb.w	r0, [r1], #1
   18b92:	f7fd fbe5 	bl	16360 <bt_conn_lookup_addr_le>
		if (!conn) {
   18b96:	4605      	mov	r5, r0
   18b98:	b120      	cbz	r0, 18ba4 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   18b9a:	7b43      	ldrb	r3, [r0, #13]
   18b9c:	2b07      	cmp	r3, #7
   18b9e:	d02d      	beq.n	18bfc <notify_cb+0x90>
			bt_conn_unref(conn);
   18ba0:	f7fd f95a 	bl	15e58 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   18ba4:	2701      	movs	r7, #1
}
   18ba6:	4638      	mov	r0, r7
   18ba8:	b003      	add	sp, #12
   18baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18bae:	f04f 0800 	mov.w	r8, #0
   18bb2:	4d2e      	ldr	r5, [pc, #184]	; (18c6c <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18bb4:	46c1      	mov	r9, r8
   18bb6:	4669      	mov	r1, sp
   18bb8:	4628      	mov	r0, r5
   18bba:	f8cd 9000 	str.w	r9, [sp]
   18bbe:	f8cd 9003 	str.w	r9, [sp, #3]
   18bc2:	f00d fe37 	bl	26834 <bt_addr_le_cmp>
   18bc6:	b178      	cbz	r0, 18be8 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18bc8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   18bcc:	2207      	movs	r2, #7
   18bce:	4629      	mov	r1, r5
   18bd0:	f7fd fbe4 	bl	1639c <bt_conn_lookup_state_le>
			if (!conn) {
   18bd4:	b978      	cbnz	r0, 18bf6 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   18bd6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   18bd8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   18bdc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18bde:	4629      	mov	r1, r5
   18be0:	8853      	ldrh	r3, [r2, #2]
   18be2:	8812      	ldrh	r2, [r2, #0]
   18be4:	f7fe ffc2 	bl	17b6c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18be8:	350c      	adds	r5, #12
   18bea:	f1b8 0f00 	cmp.w	r8, #0
   18bee:	d1c9      	bne.n	18b84 <notify_cb+0x18>
   18bf0:	f04f 0801 	mov.w	r8, #1
   18bf4:	e7df      	b.n	18bb6 <notify_cb+0x4a>
			bt_conn_unref(conn);
   18bf6:	f7fd f92f 	bl	15e58 <bt_conn_unref>
   18bfa:	e7f5      	b.n	18be8 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18bfc:	697b      	ldr	r3, [r7, #20]
   18bfe:	b123      	cbz	r3, 18c0a <notify_cb+0x9e>
   18c00:	4631      	mov	r1, r6
   18c02:	4798      	blx	r3
   18c04:	b908      	cbnz	r0, 18c0a <notify_cb+0x9e>
			bt_conn_unref(conn);
   18c06:	4628      	mov	r0, r5
   18c08:	e7ca      	b.n	18ba0 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   18c0a:	2214      	movs	r2, #20
   18c0c:	4631      	mov	r1, r6
   18c0e:	4628      	mov	r0, r5
   18c10:	f00e f8c6 	bl	26da0 <bt_gatt_check_perm>
   18c14:	4607      	mov	r7, r0
   18c16:	b150      	cbz	r0, 18c2e <notify_cb+0xc2>
   18c18:	4b15      	ldr	r3, [pc, #84]	; (18c70 <notify_cb+0x104>)
   18c1a:	4916      	ldr	r1, [pc, #88]	; (18c74 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   18c1c:	4816      	ldr	r0, [pc, #88]	; (18c78 <notify_cb+0x10c>)
   18c1e:	1ac9      	subs	r1, r1, r3
   18c20:	08c9      	lsrs	r1, r1, #3
   18c22:	0189      	lsls	r1, r1, #6
   18c24:	f041 0102 	orr.w	r1, r1, #2
   18c28:	f00b ff85 	bl	24b36 <log_0>
			continue;
   18c2c:	e7ba      	b.n	18ba4 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   18c2e:	89a3      	ldrh	r3, [r4, #12]
   18c30:	88a1      	ldrh	r1, [r4, #4]
   18c32:	6922      	ldr	r2, [r4, #16]
   18c34:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   18c36:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   18c38:	d10f      	bne.n	18c5a <notify_cb+0xee>
			err = gatt_indicate(conn, data->handle,
   18c3a:	f7ff fdf1 	bl	18820 <gatt_indicate>
			if (err == 0) {
   18c3e:	4606      	mov	r6, r0
   18c40:	b918      	cbnz	r0, 18c4a <notify_cb+0xde>
				data->ind_params->_ref++;
   18c42:	6922      	ldr	r2, [r4, #16]
   18c44:	7d93      	ldrb	r3, [r2, #22]
   18c46:	3301      	adds	r3, #1
   18c48:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18c4a:	4628      	mov	r0, r5
   18c4c:	f7fd f904 	bl	15e58 <bt_conn_unref>
		if (err < 0) {
   18c50:	2e00      	cmp	r6, #0
   18c52:	dba8      	blt.n	18ba6 <notify_cb+0x3a>
		data->err = 0;
   18c54:	2300      	movs	r3, #0
   18c56:	60a3      	str	r3, [r4, #8]
   18c58:	e7a4      	b.n	18ba4 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18c5a:	f7ff ff37 	bl	18acc <gatt_notify>
   18c5e:	4606      	mov	r6, r0
   18c60:	e7f3      	b.n	18c4a <notify_cb+0xde>
   18c62:	bf00      	nop
   18c64:	00017c55 	.word	0x00017c55
   18c68:	200004ac 	.word	0x200004ac
   18c6c:	20002569 	.word	0x20002569
   18c70:	00028618 	.word	0x00028618
   18c74:	00028638 	.word	0x00028638
   18c78:	0002eb12 	.word	0x0002eb12

00018c7c <update_ccc>:
{
   18c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c80:	4b39      	ldr	r3, [pc, #228]	; (18d68 <update_ccc+0xec>)
	struct bt_conn *conn = data->conn;
   18c82:	6814      	ldr	r4, [r2, #0]
{
   18c84:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c86:	6882      	ldr	r2, [r0, #8]
   18c88:	429a      	cmp	r2, r3
{
   18c8a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c8c:	d11c      	bne.n	18cc8 <update_ccc+0x4c>
	ccc = attr->user_data;
   18c8e:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   18c90:	893b      	ldrh	r3, [r7, #8]
   18c92:	b1cb      	cbz	r3, 18cc8 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18c94:	463a      	mov	r2, r7
   18c96:	4620      	mov	r0, r4
   18c98:	f812 1b01 	ldrb.w	r1, [r2], #1
   18c9c:	f00d f8d8 	bl	25e50 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18ca0:	b190      	cbz	r0, 18cc8 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18ca2:	222a      	movs	r2, #42	; 0x2a
   18ca4:	4629      	mov	r1, r5
   18ca6:	4620      	mov	r0, r4
   18ca8:	f00e f87a 	bl	26da0 <bt_gatt_check_perm>
		if (err) {
   18cac:	b308      	cbz	r0, 18cf2 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18cae:	2803      	cmp	r0, #3
   18cb0:	d10e      	bne.n	18cd0 <update_ccc+0x54>
   18cb2:	4a2e      	ldr	r2, [pc, #184]	; (18d6c <update_ccc+0xf0>)
   18cb4:	4b2e      	ldr	r3, [pc, #184]	; (18d70 <update_ccc+0xf4>)
				BT_WARN("CCC %p not writable", attr);
   18cb6:	482f      	ldr	r0, [pc, #188]	; (18d74 <update_ccc+0xf8>)
   18cb8:	1ad2      	subs	r2, r2, r3
   18cba:	08d2      	lsrs	r2, r2, #3
   18cbc:	0192      	lsls	r2, r2, #6
   18cbe:	f042 0202 	orr.w	r2, r2, #2
   18cc2:	4629      	mov	r1, r5
   18cc4:	f00b ff44 	bl	24b50 <log_1>
}
   18cc8:	2001      	movs	r0, #1
   18cca:	b002      	add	sp, #8
   18ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   18cd0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   18cd2:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   18cd4:	bf14      	ite	ne
   18cd6:	f04f 0802 	movne.w	r8, #2
   18cda:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   18cde:	f00d f8b5 	bl	25e4c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   18ce2:	4580      	cmp	r8, r0
   18ce4:	d905      	bls.n	18cf2 <update_ccc+0x76>
				if (data->sec < sec) {
   18ce6:	7933      	ldrb	r3, [r6, #4]
   18ce8:	4543      	cmp	r3, r8
   18cea:	d2ed      	bcs.n	18cc8 <update_ccc+0x4c>
					data->sec = sec;
   18cec:	f886 8004 	strb.w	r8, [r6, #4]
   18cf0:	e7ea      	b.n	18cc8 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   18cf2:	4639      	mov	r1, r7
   18cf4:	4628      	mov	r0, r5
   18cf6:	f00d fd0c 	bl	26712 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18cfa:	4b1f      	ldr	r3, [pc, #124]	; (18d78 <update_ccc+0xfc>)
   18cfc:	429f      	cmp	r7, r3
   18cfe:	d1e3      	bne.n	18cc8 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18d00:	7a20      	ldrb	r0, [r4, #8]
   18d02:	f104 0190 	add.w	r1, r4, #144	; 0x90
   18d06:	f7fe fe91 	bl	17a2c <find_sc_cfg>
	if (!cfg) {
   18d0a:	2800      	cmp	r0, #0
   18d0c:	d0dc      	beq.n	18cc8 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   18d0e:	8902      	ldrh	r2, [r0, #8]
   18d10:	8943      	ldrh	r3, [r0, #10]
   18d12:	ea52 0103 	orrs.w	r1, r2, r3
   18d16:	d0d7      	beq.n	18cc8 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   18d18:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18d1a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18d1e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   18d22:	f7fd f9d7 	bl	160d4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18d26:	4915      	ldr	r1, [pc, #84]	; (18d7c <update_ccc+0x100>)
   18d28:	4a15      	ldr	r2, [pc, #84]	; (18d80 <update_ccc+0x104>)
   18d2a:	2318      	movs	r3, #24
   18d2c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d30:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18d32:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18d34:	4a13      	ldr	r2, [pc, #76]	; (18d84 <update_ccc+0x108>)
   18d36:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   18d38:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   18d3e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18d40:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d42:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   18d46:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18d48:	4620      	mov	r0, r4
   18d4a:	f7ff fdd3 	bl	188f4 <bt_gatt_indicate>
   18d4e:	2800      	cmp	r0, #0
   18d50:	d0ba      	beq.n	18cc8 <update_ccc+0x4c>
   18d52:	4b07      	ldr	r3, [pc, #28]	; (18d70 <update_ccc+0xf4>)
   18d54:	4905      	ldr	r1, [pc, #20]	; (18d6c <update_ccc+0xf0>)
		BT_ERR("SC restore indication failed");
   18d56:	480c      	ldr	r0, [pc, #48]	; (18d88 <update_ccc+0x10c>)
   18d58:	1ac9      	subs	r1, r1, r3
   18d5a:	08c9      	lsrs	r1, r1, #3
   18d5c:	0189      	lsls	r1, r1, #6
   18d5e:	f041 0101 	orr.w	r1, r1, #1
   18d62:	f00b fee8 	bl	24b36 <log_0>
   18d66:	e7af      	b.n	18cc8 <update_ccc+0x4c>
   18d68:	00017c55 	.word	0x00017c55
   18d6c:	00028638 	.word	0x00028638
   18d70:	00028618 	.word	0x00028618
   18d74:	0002ebfe 	.word	0x0002ebfe
   18d78:	200004ac 	.word	0x200004ac
   18d7c:	20002214 	.word	0x20002214
   18d80:	00028af4 	.word	0x00028af4
   18d84:	00026a25 	.word	0x00026a25
   18d88:	0002ec12 	.word	0x0002ec12

00018d8c <bt_gatt_exchange_mtu>:
{
   18d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18d8e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameter\n");
   18d90:	4604      	mov	r4, r0
   18d92:	b970      	cbnz	r0, 18db2 <bt_gatt_exchange_mtu+0x26>
   18d94:	4918      	ldr	r1, [pc, #96]	; (18df8 <bt_gatt_exchange_mtu+0x6c>)
   18d96:	4a19      	ldr	r2, [pc, #100]	; (18dfc <bt_gatt_exchange_mtu+0x70>)
   18d98:	4819      	ldr	r0, [pc, #100]	; (18e00 <bt_gatt_exchange_mtu+0x74>)
   18d9a:	f640 338f 	movw	r3, #2959	; 0xb8f
   18d9e:	f00b fcab 	bl	246f8 <printk>
   18da2:	4818      	ldr	r0, [pc, #96]	; (18e04 <bt_gatt_exchange_mtu+0x78>)
   18da4:	f00b fca8 	bl	246f8 <printk>
   18da8:	4814      	ldr	r0, [pc, #80]	; (18dfc <bt_gatt_exchange_mtu+0x70>)
   18daa:	f640 318f 	movw	r1, #2959	; 0xb8f
   18dae:	f00b fe94 	bl	24ada <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   18db2:	b10d      	cbz	r5, 18db8 <bt_gatt_exchange_mtu+0x2c>
   18db4:	682b      	ldr	r3, [r5, #0]
   18db6:	b973      	cbnz	r3, 18dd6 <bt_gatt_exchange_mtu+0x4a>
   18db8:	4913      	ldr	r1, [pc, #76]	; (18e08 <bt_gatt_exchange_mtu+0x7c>)
   18dba:	4a10      	ldr	r2, [pc, #64]	; (18dfc <bt_gatt_exchange_mtu+0x70>)
   18dbc:	4810      	ldr	r0, [pc, #64]	; (18e00 <bt_gatt_exchange_mtu+0x74>)
   18dbe:	f44f 6339 	mov.w	r3, #2960	; 0xb90
   18dc2:	f00b fc99 	bl	246f8 <printk>
   18dc6:	4811      	ldr	r0, [pc, #68]	; (18e0c <bt_gatt_exchange_mtu+0x80>)
   18dc8:	f00b fc96 	bl	246f8 <printk>
   18dcc:	480b      	ldr	r0, [pc, #44]	; (18dfc <bt_gatt_exchange_mtu+0x70>)
   18dce:	f44f 6139 	mov.w	r1, #2960	; 0xb90
   18dd2:	f00b fe82 	bl	24ada <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   18dd6:	7b63      	ldrb	r3, [r4, #13]
   18dd8:	2b07      	cmp	r3, #7
   18dda:	d10a      	bne.n	18df2 <bt_gatt_exchange_mtu+0x66>
	return gatt_req_send(conn, gatt_mtu_rsp, params,
   18ddc:	2302      	movs	r3, #2
   18dde:	e9cd 3300 	strd	r3, r3, [sp]
   18de2:	490b      	ldr	r1, [pc, #44]	; (18e10 <bt_gatt_exchange_mtu+0x84>)
   18de4:	4b0b      	ldr	r3, [pc, #44]	; (18e14 <bt_gatt_exchange_mtu+0x88>)
   18de6:	462a      	mov	r2, r5
   18de8:	4620      	mov	r0, r4
   18dea:	f00d ff46 	bl	26c7a <gatt_req_send>
}
   18dee:	b003      	add	sp, #12
   18df0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   18df2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18df6:	e7fa      	b.n	18dee <bt_gatt_exchange_mtu+0x62>
   18df8:	0002e57e 	.word	0x0002e57e
   18dfc:	0002e963 	.word	0x0002e963
   18e00:	000290f5 	.word	0x000290f5
   18e04:	0002ec2f 	.word	0x0002ec2f
   18e08:	0002ec49 	.word	0x0002ec49
   18e0c:	0002eb56 	.word	0x0002eb56
   18e10:	00026755 	.word	0x00026755
   18e14:	000268c7 	.word	0x000268c7

00018e18 <bt_gatt_discover>:
{
   18e18:	b570      	push	{r4, r5, r6, lr}
   18e1a:	460c      	mov	r4, r1
   18e1c:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   18e1e:	4605      	mov	r5, r0
   18e20:	b970      	cbnz	r0, 18e40 <bt_gatt_discover+0x28>
   18e22:	497e      	ldr	r1, [pc, #504]	; (1901c <bt_gatt_discover+0x204>)
   18e24:	4a7e      	ldr	r2, [pc, #504]	; (19020 <bt_gatt_discover+0x208>)
   18e26:	487f      	ldr	r0, [pc, #508]	; (19024 <bt_gatt_discover+0x20c>)
   18e28:	f640 63bd 	movw	r3, #3773	; 0xebd
   18e2c:	f00b fc64 	bl	246f8 <printk>
   18e30:	487d      	ldr	r0, [pc, #500]	; (19028 <bt_gatt_discover+0x210>)
   18e32:	f00b fc61 	bl	246f8 <printk>
   18e36:	487a      	ldr	r0, [pc, #488]	; (19020 <bt_gatt_discover+0x208>)
   18e38:	f640 61bd 	movw	r1, #3773	; 0xebd
   18e3c:	f00b fe4d 	bl	24ada <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   18e40:	b10c      	cbz	r4, 18e46 <bt_gatt_discover+0x2e>
   18e42:	6863      	ldr	r3, [r4, #4]
   18e44:	b973      	cbnz	r3, 18e64 <bt_gatt_discover+0x4c>
   18e46:	4979      	ldr	r1, [pc, #484]	; (1902c <bt_gatt_discover+0x214>)
   18e48:	4a75      	ldr	r2, [pc, #468]	; (19020 <bt_gatt_discover+0x208>)
   18e4a:	4876      	ldr	r0, [pc, #472]	; (19024 <bt_gatt_discover+0x20c>)
   18e4c:	f640 63be 	movw	r3, #3774	; 0xebe
   18e50:	f00b fc52 	bl	246f8 <printk>
   18e54:	4874      	ldr	r0, [pc, #464]	; (19028 <bt_gatt_discover+0x210>)
   18e56:	f00b fc4f 	bl	246f8 <printk>
   18e5a:	4871      	ldr	r0, [pc, #452]	; (19020 <bt_gatt_discover+0x208>)
   18e5c:	f640 61be 	movw	r1, #3774	; 0xebe
   18e60:	f00b fe3b 	bl	24ada <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   18e64:	8923      	ldrh	r3, [r4, #8]
   18e66:	b10b      	cbz	r3, 18e6c <bt_gatt_discover+0x54>
   18e68:	89e3      	ldrh	r3, [r4, #14]
   18e6a:	b973      	cbnz	r3, 18e8a <bt_gatt_discover+0x72>
   18e6c:	4970      	ldr	r1, [pc, #448]	; (19030 <bt_gatt_discover+0x218>)
   18e6e:	4a6c      	ldr	r2, [pc, #432]	; (19020 <bt_gatt_discover+0x208>)
   18e70:	486c      	ldr	r0, [pc, #432]	; (19024 <bt_gatt_discover+0x20c>)
   18e72:	f640 63bf 	movw	r3, #3775	; 0xebf
   18e76:	f00b fc3f 	bl	246f8 <printk>
   18e7a:	486b      	ldr	r0, [pc, #428]	; (19028 <bt_gatt_discover+0x210>)
   18e7c:	f00b fc3c 	bl	246f8 <printk>
   18e80:	4867      	ldr	r0, [pc, #412]	; (19020 <bt_gatt_discover+0x208>)
   18e82:	f640 61bf 	movw	r1, #3775	; 0xebf
   18e86:	f00b fe28 	bl	24ada <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   18e8a:	8922      	ldrh	r2, [r4, #8]
   18e8c:	89e3      	ldrh	r3, [r4, #14]
   18e8e:	429a      	cmp	r2, r3
   18e90:	d90e      	bls.n	18eb0 <bt_gatt_discover+0x98>
   18e92:	4968      	ldr	r1, [pc, #416]	; (19034 <bt_gatt_discover+0x21c>)
   18e94:	4a62      	ldr	r2, [pc, #392]	; (19020 <bt_gatt_discover+0x208>)
   18e96:	4863      	ldr	r0, [pc, #396]	; (19024 <bt_gatt_discover+0x20c>)
   18e98:	f640 63c1 	movw	r3, #3777	; 0xec1
   18e9c:	f00b fc2c 	bl	246f8 <printk>
   18ea0:	4861      	ldr	r0, [pc, #388]	; (19028 <bt_gatt_discover+0x210>)
   18ea2:	f00b fc29 	bl	246f8 <printk>
   18ea6:	485e      	ldr	r0, [pc, #376]	; (19020 <bt_gatt_discover+0x208>)
   18ea8:	f640 61c1 	movw	r1, #3777	; 0xec1
   18eac:	f00b fe15 	bl	24ada <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   18eb0:	7b6b      	ldrb	r3, [r5, #13]
   18eb2:	2b07      	cmp	r3, #7
   18eb4:	f040 80af 	bne.w	19016 <bt_gatt_discover+0x1fe>
	switch (params->type) {
   18eb8:	7c21      	ldrb	r1, [r4, #16]
   18eba:	2906      	cmp	r1, #6
   18ebc:	f200 80a2 	bhi.w	19004 <bt_gatt_discover+0x1ec>
   18ec0:	e8df f001 	tbb	[pc, r1]
   18ec4:	5f5f0404 	.word	0x5f5f0404
   18ec8:	9967      	.short	0x9967
   18eca:	2b          	.byte	0x2b
   18ecb:	00          	.byte	0x00
		if (params->uuid) {
   18ecc:	6823      	ldr	r3, [r4, #0]
   18ece:	b1e3      	cbz	r3, 18f0a <bt_gatt_discover+0xf2>
	switch (params->uuid->type) {
   18ed0:	7819      	ldrb	r1, [r3, #0]
   18ed2:	b161      	cbz	r1, 18eee <bt_gatt_discover+0xd6>
   18ed4:	2902      	cmp	r1, #2
   18ed6:	d016      	beq.n	18f06 <bt_gatt_discover+0xee>
   18ed8:	4a57      	ldr	r2, [pc, #348]	; (19038 <bt_gatt_discover+0x220>)
   18eda:	4b58      	ldr	r3, [pc, #352]	; (1903c <bt_gatt_discover+0x224>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   18edc:	4858      	ldr	r0, [pc, #352]	; (19040 <bt_gatt_discover+0x228>)
   18ede:	1ad2      	subs	r2, r2, r3
   18ee0:	08d2      	lsrs	r2, r2, #3
   18ee2:	0192      	lsls	r2, r2, #6
   18ee4:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid discovery type: %u", params->type);
   18ee8:	f00b fe32 	bl	24b50 <log_1>
   18eec:	e017      	b.n	18f1e <bt_gatt_discover+0x106>
		len += BT_UUID_SIZE_16;
   18eee:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   18ef0:	9301      	str	r3, [sp, #4]
   18ef2:	2306      	movs	r3, #6
   18ef4:	9300      	str	r3, [sp, #0]
   18ef6:	4953      	ldr	r1, [pc, #332]	; (19044 <bt_gatt_discover+0x22c>)
   18ef8:	4b53      	ldr	r3, [pc, #332]	; (19048 <bt_gatt_discover+0x230>)
   18efa:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   18efc:	4628      	mov	r0, r5
   18efe:	f00d febc 	bl	26c7a <gatt_req_send>
}
   18f02:	b006      	add	sp, #24
   18f04:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   18f06:	2316      	movs	r3, #22
   18f08:	e7f2      	b.n	18ef0 <bt_gatt_discover+0xd8>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   18f0a:	2310      	movs	r3, #16
   18f0c:	2104      	movs	r1, #4
   18f0e:	e9cd 3100 	strd	r3, r1, [sp]
   18f12:	4622      	mov	r2, r4
   18f14:	4b4d      	ldr	r3, [pc, #308]	; (1904c <bt_gatt_discover+0x234>)
   18f16:	494e      	ldr	r1, [pc, #312]	; (19050 <bt_gatt_discover+0x238>)
   18f18:	e7f0      	b.n	18efc <bt_gatt_discover+0xe4>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   18f1a:	6820      	ldr	r0, [r4, #0]
   18f1c:	b910      	cbnz	r0, 18f24 <bt_gatt_discover+0x10c>
	return -EINVAL;
   18f1e:	f06f 0015 	mvn.w	r0, #21
   18f22:	e7ee      	b.n	18f02 <bt_gatt_discover+0xea>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   18f24:	7806      	ldrb	r6, [r0, #0]
   18f26:	2e00      	cmp	r6, #0
   18f28:	d1f9      	bne.n	18f1e <bt_gatt_discover+0x106>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   18f2a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   18f2e:	a902      	add	r1, sp, #8
   18f30:	f88d 6008 	strb.w	r6, [sp, #8]
   18f34:	f8ad 300a 	strh.w	r3, [sp, #10]
   18f38:	f00c fd87 	bl	25a4a <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   18f3c:	b308      	cbz	r0, 18f82 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   18f3e:	f642 1302 	movw	r3, #10498	; 0x2902
   18f42:	6820      	ldr	r0, [r4, #0]
   18f44:	f88d 600c 	strb.w	r6, [sp, #12]
   18f48:	a903      	add	r1, sp, #12
   18f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f4e:	f00c fd7c 	bl	25a4a <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   18f52:	b1b0      	cbz	r0, 18f82 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   18f54:	f642 1303 	movw	r3, #10499	; 0x2903
   18f58:	6820      	ldr	r0, [r4, #0]
   18f5a:	f88d 6010 	strb.w	r6, [sp, #16]
   18f5e:	a904      	add	r1, sp, #16
   18f60:	f8ad 3012 	strh.w	r3, [sp, #18]
   18f64:	f00c fd71 	bl	25a4a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   18f68:	b158      	cbz	r0, 18f82 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   18f6a:	f642 1304 	movw	r3, #10500	; 0x2904
   18f6e:	6820      	ldr	r0, [r4, #0]
   18f70:	f88d 6014 	strb.w	r6, [sp, #20]
   18f74:	a905      	add	r1, sp, #20
   18f76:	f8ad 3016 	strh.w	r3, [sp, #22]
   18f7a:	f00c fd66 	bl	25a4a <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   18f7e:	2800      	cmp	r0, #0
   18f80:	d1cd      	bne.n	18f1e <bt_gatt_discover+0x106>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   18f82:	2308      	movs	r3, #8
   18f84:	2204      	movs	r2, #4
   18f86:	e9cd 3200 	strd	r3, r2, [sp]
   18f8a:	4932      	ldr	r1, [pc, #200]	; (19054 <bt_gatt_discover+0x23c>)
   18f8c:	4b32      	ldr	r3, [pc, #200]	; (19058 <bt_gatt_discover+0x240>)
   18f8e:	4622      	mov	r2, r4
   18f90:	e7b4      	b.n	18efc <bt_gatt_discover+0xe4>
		if (params->uuid &&
   18f92:	6820      	ldr	r0, [r4, #0]
   18f94:	b378      	cbz	r0, 18ff6 <bt_gatt_discover+0x1de>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   18f96:	2600      	movs	r6, #0
   18f98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18f9c:	a902      	add	r1, sp, #8
   18f9e:	f88d 6008 	strb.w	r6, [sp, #8]
   18fa2:	f8ad 300a 	strh.w	r3, [sp, #10]
   18fa6:	f00c fd50 	bl	25a4a <bt_uuid_cmp>
		if (params->uuid &&
   18faa:	2800      	cmp	r0, #0
   18fac:	d0b7      	beq.n	18f1e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   18fae:	f642 0301 	movw	r3, #10241	; 0x2801
   18fb2:	6820      	ldr	r0, [r4, #0]
   18fb4:	f88d 600c 	strb.w	r6, [sp, #12]
   18fb8:	a903      	add	r1, sp, #12
   18fba:	f8ad 300e 	strh.w	r3, [sp, #14]
   18fbe:	f00c fd44 	bl	25a4a <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   18fc2:	2800      	cmp	r0, #0
   18fc4:	d0ab      	beq.n	18f1e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   18fc6:	f642 0302 	movw	r3, #10242	; 0x2802
   18fca:	6820      	ldr	r0, [r4, #0]
   18fcc:	f88d 6010 	strb.w	r6, [sp, #16]
   18fd0:	a904      	add	r1, sp, #16
   18fd2:	f8ad 3012 	strh.w	r3, [sp, #18]
   18fd6:	f00c fd38 	bl	25a4a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   18fda:	2800      	cmp	r0, #0
   18fdc:	d09f      	beq.n	18f1e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   18fde:	f642 0303 	movw	r3, #10243	; 0x2803
   18fe2:	6820      	ldr	r0, [r4, #0]
   18fe4:	f88d 6014 	strb.w	r6, [sp, #20]
   18fe8:	a905      	add	r1, sp, #20
   18fea:	f8ad 3016 	strh.w	r3, [sp, #22]
   18fee:	f00c fd2c 	bl	25a4a <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   18ff2:	2800      	cmp	r0, #0
   18ff4:	d093      	beq.n	18f1e <bt_gatt_discover+0x106>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   18ff6:	2304      	movs	r3, #4
   18ff8:	e9cd 3300 	strd	r3, r3, [sp]
   18ffc:	4917      	ldr	r1, [pc, #92]	; (1905c <bt_gatt_discover+0x244>)
   18ffe:	4b18      	ldr	r3, [pc, #96]	; (19060 <bt_gatt_discover+0x248>)
   19000:	4622      	mov	r2, r4
   19002:	e77b      	b.n	18efc <bt_gatt_discover+0xe4>
   19004:	4a0c      	ldr	r2, [pc, #48]	; (19038 <bt_gatt_discover+0x220>)
   19006:	4b0d      	ldr	r3, [pc, #52]	; (1903c <bt_gatt_discover+0x224>)
		BT_ERR("Invalid discovery type: %u", params->type);
   19008:	4816      	ldr	r0, [pc, #88]	; (19064 <bt_gatt_discover+0x24c>)
   1900a:	1ad2      	subs	r2, r2, r3
   1900c:	08d2      	lsrs	r2, r2, #3
   1900e:	0192      	lsls	r2, r2, #6
   19010:	f042 0201 	orr.w	r2, r2, #1
   19014:	e768      	b.n	18ee8 <bt_gatt_discover+0xd0>
		return -ENOTCONN;
   19016:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1901a:	e772      	b.n	18f02 <bt_gatt_discover+0xea>
   1901c:	0002e57e 	.word	0x0002e57e
   19020:	0002e963 	.word	0x0002e963
   19024:	000290f5 	.word	0x000290f5
   19028:	0002eb56 	.word	0x0002eb56
   1902c:	0002ec49 	.word	0x0002ec49
   19030:	0002ec60 	.word	0x0002ec60
   19034:	0002ec8d 	.word	0x0002ec8d
   19038:	00028638 	.word	0x00028638
   1903c:	00028618 	.word	0x00028618
   19040:	0002ecba 	.word	0x0002ecba
   19044:	00026e31 	.word	0x00026e31
   19048:	00026975 	.word	0x00026975
   1904c:	00026909 	.word	0x00026909
   19050:	00019069 	.word	0x00019069
   19054:	00019179 	.word	0x00019179
   19058:	00026939 	.word	0x00026939
   1905c:	000194e9 	.word	0x000194e9
   19060:	000268f1 	.word	0x000268f1
   19064:	0002eccf 	.word	0x0002eccf

00019068 <gatt_read_group_rsp>:
{
   19068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1906c:	b08f      	sub	sp, #60	; 0x3c
   1906e:	4617      	mov	r7, r2
   19070:	9d18      	ldr	r5, [sp, #96]	; 0x60
   19072:	4681      	mov	r9, r0
	if (err) {
   19074:	460a      	mov	r2, r1
   19076:	b131      	cbz	r1, 19086 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
   19078:	686b      	ldr	r3, [r5, #4]
   1907a:	462a      	mov	r2, r5
   1907c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1907e:	4798      	blx	r3
}
   19080:	b00f      	add	sp, #60	; 0x3c
   19082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   19086:	7839      	ldrb	r1, [r7, #0]
   19088:	2906      	cmp	r1, #6
   1908a:	d011      	beq.n	190b0 <gatt_read_group_rsp+0x48>
   1908c:	2914      	cmp	r1, #20
   1908e:	d00e      	beq.n	190ae <gatt_read_group_rsp+0x46>
   19090:	4a36      	ldr	r2, [pc, #216]	; (1916c <gatt_read_group_rsp+0x104>)
   19092:	4b37      	ldr	r3, [pc, #220]	; (19170 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
   19094:	4837      	ldr	r0, [pc, #220]	; (19174 <gatt_read_group_rsp+0x10c>)
   19096:	1ad2      	subs	r2, r2, r3
   19098:	08d2      	lsrs	r2, r2, #3
   1909a:	0192      	lsls	r2, r2, #6
   1909c:	f042 0201 	orr.w	r2, r2, #1
   190a0:	f00b fd56 	bl	24b50 <log_1>
	params->func(conn, NULL, params);
   190a4:	686b      	ldr	r3, [r5, #4]
   190a6:	462a      	mov	r2, r5
   190a8:	2100      	movs	r1, #0
   190aa:	4648      	mov	r0, r9
   190ac:	e7e7      	b.n	1907e <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   190ae:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   190b0:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
   190b2:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   190b6:	b29c      	uxth	r4, r3
   190b8:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   190bc:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   190be:	783b      	ldrb	r3, [r7, #0]
   190c0:	42a3      	cmp	r3, r4
   190c2:	d909      	bls.n	190d8 <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
   190c4:	2c00      	cmp	r4, #0
   190c6:	d1ed      	bne.n	190a4 <gatt_read_group_rsp+0x3c>
   190c8:	2e00      	cmp	r6, #0
   190ca:	d0eb      	beq.n	190a4 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
   190cc:	462a      	mov	r2, r5
   190ce:	4631      	mov	r1, r6
   190d0:	4648      	mov	r0, r9
   190d2:	f00d fe90 	bl	26df6 <gatt_discover_next>
   190d6:	e7d3      	b.n	19080 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
   190d8:	2214      	movs	r2, #20
   190da:	2100      	movs	r1, #0
   190dc:	a809      	add	r0, sp, #36	; 0x24
   190de:	f00c fc4c 	bl	2597a <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   190e2:	f8b8 a000 	ldrh.w	sl, [r8]
   190e6:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   190ea:	2b00      	cmp	r3, #0
   190ec:	d0da      	beq.n	190a4 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
   190ee:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   190f2:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   190f6:	2e00      	cmp	r6, #0
   190f8:	d0d4      	beq.n	190a4 <gatt_read_group_rsp+0x3c>
   190fa:	42b3      	cmp	r3, r6
   190fc:	d8d2      	bhi.n	190a4 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
   190fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
   19102:	b323      	cbz	r3, 1914e <gatt_read_group_rsp+0xe6>
   19104:	2b02      	cmp	r3, #2
   19106:	d02a      	beq.n	1915e <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   19108:	f04f 0300 	mov.w	r3, #0
   1910c:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   19110:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   19112:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   19116:	2b00      	cmp	r3, #0
   19118:	f642 0301 	movw	r3, #10241	; 0x2801
   1911c:	bf08      	it	eq
   1911e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   19122:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   19126:	ab04      	add	r3, sp, #16
   19128:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1912a:	ab01      	add	r3, sp, #4
   1912c:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1912e:	ab02      	add	r3, sp, #8
   19130:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   19132:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19136:	686b      	ldr	r3, [r5, #4]
   19138:	462a      	mov	r2, r5
   1913a:	a909      	add	r1, sp, #36	; 0x24
   1913c:	4648      	mov	r0, r9
   1913e:	4798      	blx	r3
   19140:	2800      	cmp	r0, #0
   19142:	d09d      	beq.n	19080 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   19144:	783a      	ldrb	r2, [r7, #0]
   19146:	1aa4      	subs	r4, r4, r2
   19148:	b2a4      	uxth	r4, r4
   1914a:	4490      	add	r8, r2
   1914c:	e7b7      	b.n	190be <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1914e:	2202      	movs	r2, #2
   19150:	f108 0104 	add.w	r1, r8, #4
   19154:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   19158:	f00c fc04 	bl	25964 <memcpy>
			break;
   1915c:	e7d4      	b.n	19108 <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1915e:	2210      	movs	r2, #16
   19160:	f108 0104 	add.w	r1, r8, #4
   19164:	f10d 0011 	add.w	r0, sp, #17
   19168:	e7f6      	b.n	19158 <gatt_read_group_rsp+0xf0>
   1916a:	bf00      	nop
   1916c:	00028638 	.word	0x00028638
   19170:	00028618 	.word	0x00028618
   19174:	0002ecea 	.word	0x0002ecea

00019178 <gatt_read_type_rsp>:
{
   19178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1917c:	b093      	sub	sp, #76	; 0x4c
   1917e:	4617      	mov	r7, r2
   19180:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   19182:	4680      	mov	r8, r0
	if (err) {
   19184:	460a      	mov	r2, r1
   19186:	b121      	cbz	r1, 19192 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   19188:	686b      	ldr	r3, [r5, #4]
   1918a:	462a      	mov	r2, r5
   1918c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1918e:	4798      	blx	r3
	if (!handle) {
   19190:	e05c      	b.n	1924c <gatt_read_type_rsp+0xd4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   19192:	7c28      	ldrb	r0, [r5, #16]
   19194:	2802      	cmp	r0, #2
   19196:	d175      	bne.n	19284 <gatt_read_type_rsp+0x10c>
	switch (rsp->len) {
   19198:	7839      	ldrb	r1, [r7, #0]
   1919a:	2906      	cmp	r1, #6
   1919c:	d018      	beq.n	191d0 <gatt_read_type_rsp+0x58>
   1919e:	2908      	cmp	r1, #8
   191a0:	d177      	bne.n	19292 <gatt_read_type_rsp+0x11a>
		u.uuid.type = BT_UUID_TYPE_16;
   191a2:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   191a6:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   191a8:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   191aa:	b2a4      	uxth	r4, r4
   191ac:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   191b0:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   191b4:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   191b6:	783b      	ldrb	r3, [r7, #0]
   191b8:	42a3      	cmp	r3, r4
   191ba:	d90c      	bls.n	191d6 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   191bc:	2c00      	cmp	r4, #0
   191be:	d172      	bne.n	192a6 <gatt_read_type_rsp+0x12e>
   191c0:	2e00      	cmp	r6, #0
   191c2:	d070      	beq.n	192a6 <gatt_read_type_rsp+0x12e>
	gatt_discover_next(conn, handle, params);
   191c4:	462a      	mov	r2, r5
   191c6:	4631      	mov	r1, r6
   191c8:	4640      	mov	r0, r8
   191ca:	f00d fe14 	bl	26df6 <gatt_discover_next>
   191ce:	e03d      	b.n	1924c <gatt_read_type_rsp+0xd4>
		u.uuid.type = BT_UUID_TYPE_128;
   191d0:	f88d 0020 	strb.w	r0, [sp, #32]
		break;
   191d4:	e7e7      	b.n	191a6 <gatt_read_type_rsp+0x2e>
		handle = sys_le16_to_cpu(data->handle);
   191d6:	f8b9 3000 	ldrh.w	r3, [r9]
   191da:	b29e      	uxth	r6, r3
		if (!handle) {
   191dc:	2e00      	cmp	r6, #0
   191de:	d062      	beq.n	192a6 <gatt_read_type_rsp+0x12e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   191e0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   191e4:	f8ad 201c 	strh.w	r2, [sp, #28]
   191e8:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   191ea:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   191ee:	f8ad 201e 	strh.w	r2, [sp, #30]
   191f2:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   191f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   191f8:	b172      	cbz	r2, 19218 <gatt_read_type_rsp+0xa0>
   191fa:	2a02      	cmp	r2, #2
   191fc:	d017      	beq.n	1922e <gatt_read_type_rsp+0xb6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   191fe:	6829      	ldr	r1, [r5, #0]
   19200:	b339      	cbz	r1, 19252 <gatt_read_type_rsp+0xda>
   19202:	4650      	mov	r0, sl
   19204:	9303      	str	r3, [sp, #12]
   19206:	f00c fc20 	bl	25a4a <bt_uuid_cmp>
   1920a:	9b03      	ldr	r3, [sp, #12]
   1920c:	b308      	cbz	r0, 19252 <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1920e:	783a      	ldrb	r2, [r7, #0]
   19210:	1aa4      	subs	r4, r4, r2
   19212:	b2a4      	uxth	r4, r4
   19214:	4491      	add	r9, r2
   19216:	e7ce      	b.n	191b6 <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   19218:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1921c:	f899 2006 	ldrb.w	r2, [r9, #6]
   19220:	f899 1007 	ldrb.w	r1, [r9, #7]
   19224:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19228:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1922c:	e7e7      	b.n	191fe <gatt_read_type_rsp+0x86>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1922e:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   19230:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   19232:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   19234:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   19236:	497c      	ldr	r1, [pc, #496]	; (19428 <gatt_read_type_rsp+0x2b0>)
   19238:	9201      	str	r2, [sp, #4]
   1923a:	9300      	str	r3, [sp, #0]
   1923c:	462a      	mov	r2, r5
   1923e:	4b7b      	ldr	r3, [pc, #492]	; (1942c <gatt_read_type_rsp+0x2b4>)
   19240:	4640      	mov	r0, r8
   19242:	f00d fd1a 	bl	26c7a <gatt_req_send>
			return read_included_uuid(conn, params);
   19246:	b286      	uxth	r6, r0
	if (!handle) {
   19248:	2e00      	cmp	r6, #0
   1924a:	d1bb      	bne.n	191c4 <gatt_read_type_rsp+0x4c>
}
   1924c:	b013      	add	sp, #76	; 0x4c
   1924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19252:	f642 0202 	movw	r2, #10242	; 0x2802
   19256:	f8ad 2016 	strh.w	r2, [sp, #22]
   1925a:	aa05      	add	r2, sp, #20
   1925c:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   19260:	aa06      	add	r2, sp, #24
   19262:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   19264:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19268:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1926c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1926e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   19272:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19276:	462a      	mov	r2, r5
   19278:	a90d      	add	r1, sp, #52	; 0x34
   1927a:	4640      	mov	r0, r8
   1927c:	4798      	blx	r3
   1927e:	2800      	cmp	r0, #0
   19280:	d1c5      	bne.n	1920e <gatt_read_type_rsp+0x96>
   19282:	e7e3      	b.n	1924c <gatt_read_type_rsp+0xd4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   19284:	2803      	cmp	r0, #3
   19286:	d16b      	bne.n	19360 <gatt_read_type_rsp+0x1e8>
	switch (rsp->len) {
   19288:	7839      	ldrb	r1, [r7, #0]
   1928a:	2907      	cmp	r1, #7
   1928c:	d011      	beq.n	192b2 <gatt_read_type_rsp+0x13a>
   1928e:	2915      	cmp	r1, #21
   19290:	d00e      	beq.n	192b0 <gatt_read_type_rsp+0x138>
   19292:	4a67      	ldr	r2, [pc, #412]	; (19430 <gatt_read_type_rsp+0x2b8>)
   19294:	4b67      	ldr	r3, [pc, #412]	; (19434 <gatt_read_type_rsp+0x2bc>)
		BT_ERR("Invalid data len %u", rsp->len);
   19296:	4868      	ldr	r0, [pc, #416]	; (19438 <gatt_read_type_rsp+0x2c0>)
   19298:	1ad2      	subs	r2, r2, r3
   1929a:	08d2      	lsrs	r2, r2, #3
   1929c:	0192      	lsls	r2, r2, #6
   1929e:	f042 0201 	orr.w	r2, r2, #1
   192a2:	f00b fc55 	bl	24b50 <log_1>
	params->func(conn, NULL, params);
   192a6:	686b      	ldr	r3, [r5, #4]
   192a8:	462a      	mov	r2, r5
   192aa:	2100      	movs	r1, #0
   192ac:	4640      	mov	r0, r8
   192ae:	e76e      	b.n	1918e <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   192b0:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   192b2:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
   192b4:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   192b8:	b2a4      	uxth	r4, r4
   192ba:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   192be:	2600      	movs	r6, #0
   192c0:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   192c4:	783b      	ldrb	r3, [r7, #0]
   192c6:	42a3      	cmp	r3, r4
   192c8:	f63f af78 	bhi.w	191bc <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   192cc:	f8b9 b000 	ldrh.w	fp, [r9]
   192d0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   192d4:	2e00      	cmp	r6, #0
   192d6:	d0e6      	beq.n	192a6 <gatt_read_type_rsp+0x12e>
		switch (u.uuid.type) {
   192d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   192dc:	b163      	cbz	r3, 192f8 <gatt_read_type_rsp+0x180>
   192de:	2b02      	cmp	r3, #2
   192e0:	d013      	beq.n	1930a <gatt_read_type_rsp+0x192>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   192e2:	6829      	ldr	r1, [r5, #0]
   192e4:	b1c9      	cbz	r1, 1931a <gatt_read_type_rsp+0x1a2>
   192e6:	4650      	mov	r0, sl
   192e8:	f00c fbaf 	bl	25a4a <bt_uuid_cmp>
   192ec:	b1a8      	cbz	r0, 1931a <gatt_read_type_rsp+0x1a2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   192ee:	783a      	ldrb	r2, [r7, #0]
   192f0:	1aa4      	subs	r4, r4, r2
   192f2:	b2a4      	uxth	r4, r4
   192f4:	4491      	add	r9, r2
   192f6:	e7e5      	b.n	192c4 <gatt_read_type_rsp+0x14c>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   192f8:	f899 3005 	ldrb.w	r3, [r9, #5]
   192fc:	f899 2006 	ldrb.w	r2, [r9, #6]
   19300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19304:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   19308:	e7eb      	b.n	192e2 <gatt_read_type_rsp+0x16a>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1930a:	2210      	movs	r2, #16
   1930c:	f109 0105 	add.w	r1, r9, #5
   19310:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   19314:	f00c fb26 	bl	25964 <memcpy>
			break;
   19318:	e7e3      	b.n	192e2 <gatt_read_type_rsp+0x16a>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1931a:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1931e:	f899 3002 	ldrb.w	r3, [r9, #2]
   19322:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19326:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1932a:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1932e:	f8ad 2016 	strh.w	r2, [sp, #22]
   19332:	2300      	movs	r3, #0
   19334:	aa05      	add	r2, sp, #20
   19336:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   1933a:	aa06      	add	r2, sp, #24
   1933c:	f88d 3014 	strb.w	r3, [sp, #20]
   19340:	930f      	str	r3, [sp, #60]	; 0x3c
   19342:	9210      	str	r2, [sp, #64]	; 0x40
   19344:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   19348:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1934c:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   1934e:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19352:	462a      	mov	r2, r5
   19354:	a90d      	add	r1, sp, #52	; 0x34
   19356:	4640      	mov	r0, r8
   19358:	4798      	blx	r3
   1935a:	2800      	cmp	r0, #0
   1935c:	d1c7      	bne.n	192ee <gatt_read_type_rsp+0x176>
   1935e:	e775      	b.n	1924c <gatt_read_type_rsp+0xd4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   19360:	682a      	ldr	r2, [r5, #0]
   19362:	7816      	ldrb	r6, [r2, #0]
   19364:	2e00      	cmp	r6, #0
   19366:	d19e      	bne.n	192a6 <gatt_read_type_rsp+0x12e>
	uuid_val = BT_UUID_16(params->uuid)->val;
   19368:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1936a:	1e5c      	subs	r4, r3, #1
   1936c:	b2a4      	uxth	r4, r4
   1936e:	f107 0901 	add.w	r9, r7, #1
   19372:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19376:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   19378:	783b      	ldrb	r3, [r7, #0]
   1937a:	42a3      	cmp	r3, r4
   1937c:	f63f af1e 	bhi.w	191bc <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   19380:	f8b9 2000 	ldrh.w	r2, [r9]
   19384:	b296      	uxth	r6, r2
		if (!handle) {
   19386:	2e00      	cmp	r6, #0
   19388:	d08d      	beq.n	192a6 <gatt_read_type_rsp+0x12e>
		switch (uuid_val) {
   1938a:	f1bb 0f04 	cmp.w	fp, #4
   1938e:	d88a      	bhi.n	192a6 <gatt_read_type_rsp+0x12e>
   19390:	a301      	add	r3, pc, #4	; (adr r3, 19398 <gatt_read_type_rsp+0x220>)
   19392:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   19396:	bf00      	nop
   19398:	000193ad 	.word	0x000193ad
   1939c:	000192a7 	.word	0x000192a7
   193a0:	000193ad 	.word	0x000193ad
   193a4:	000193ad 	.word	0x000193ad
   193a8:	000193ed 	.word	0x000193ed
	return ((uint16_t)src[1] << 8) | src[0];
   193ac:	f899 1003 	ldrb.w	r1, [r9, #3]
   193b0:	f899 3002 	ldrb.w	r3, [r9, #2]
   193b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   193b8:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   193bc:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   193be:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   193c2:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   193c6:	ab08      	add	r3, sp, #32
   193c8:	9310      	str	r3, [sp, #64]	; 0x40
   193ca:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   193ce:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   193d0:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   193d4:	462a      	mov	r2, r5
   193d6:	a90d      	add	r1, sp, #52	; 0x34
   193d8:	4640      	mov	r0, r8
   193da:	4798      	blx	r3
   193dc:	2800      	cmp	r0, #0
   193de:	f43f af35 	beq.w	1924c <gatt_read_type_rsp+0xd4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   193e2:	783a      	ldrb	r2, [r7, #0]
   193e4:	1aa4      	subs	r4, r4, r2
   193e6:	b2a4      	uxth	r4, r4
   193e8:	4491      	add	r9, r2
   193ea:	e7c5      	b.n	19378 <gatt_read_type_rsp+0x200>
			value.cpf.format = cpf->format;
   193ec:	f899 3002 	ldrb.w	r3, [r9, #2]
   193f0:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   193f4:	f899 3003 	ldrb.w	r3, [r9, #3]
   193f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   193fc:	f899 1005 	ldrb.w	r1, [r9, #5]
   19400:	f899 3004 	ldrb.w	r3, [r9, #4]
   19404:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   19408:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1940c:	f899 3006 	ldrb.w	r3, [r9, #6]
   19410:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   19414:	f899 3007 	ldrb.w	r3, [r9, #7]
   19418:	f899 1008 	ldrb.w	r1, [r9, #8]
   1941c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   19420:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   19424:	e7ca      	b.n	193bc <gatt_read_type_rsp+0x244>
   19426:	bf00      	nop
   19428:	0001943d 	.word	0x0001943d
   1942c:	000268dd 	.word	0x000268dd
   19430:	00028638 	.word	0x00028638
   19434:	00028618 	.word	0x00028618
   19438:	0002ecea 	.word	0x0002ecea

0001943c <read_included_uuid_cb>:
{
   1943c:	b570      	push	{r4, r5, r6, lr}
   1943e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   19440:	2b10      	cmp	r3, #16
{
   19442:	9c12      	ldr	r4, [sp, #72]	; 0x48
   19444:	4605      	mov	r5, r0
   19446:	4611      	mov	r1, r2
	if (length != 16U) {
   19448:	d011      	beq.n	1946e <read_included_uuid_cb+0x32>
   1944a:	4924      	ldr	r1, [pc, #144]	; (194dc <read_included_uuid_cb+0xa0>)
   1944c:	4a24      	ldr	r2, [pc, #144]	; (194e0 <read_included_uuid_cb+0xa4>)
		BT_ERR("Invalid data len %u", length);
   1944e:	4825      	ldr	r0, [pc, #148]	; (194e4 <read_included_uuid_cb+0xa8>)
   19450:	1a52      	subs	r2, r2, r1
   19452:	08d2      	lsrs	r2, r2, #3
   19454:	0192      	lsls	r2, r2, #6
   19456:	4619      	mov	r1, r3
   19458:	f042 0201 	orr.w	r2, r2, #1
   1945c:	f00b fb78 	bl	24b50 <log_1>
		params->func(conn, NULL, params);
   19460:	6863      	ldr	r3, [r4, #4]
   19462:	4622      	mov	r2, r4
   19464:	2100      	movs	r1, #0
   19466:	4628      	mov	r0, r5
   19468:	4798      	blx	r3
}
   1946a:	b00e      	add	sp, #56	; 0x38
   1946c:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   1946e:	8962      	ldrh	r2, [r4, #10]
   19470:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
   19474:	89a2      	ldrh	r2, [r4, #12]
   19476:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   1947a:	2202      	movs	r2, #2
   1947c:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
   19480:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
   19482:	461a      	mov	r2, r3
   19484:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   19488:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   1948a:	f00c fa6b 	bl	25964 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1948e:	6821      	ldr	r1, [r4, #0]
   19490:	b9f1      	cbnz	r1, 194d0 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19492:	f642 0202 	movw	r2, #10242	; 0x2802
   19496:	2300      	movs	r3, #0
   19498:	f8ad 2006 	strh.w	r2, [sp, #6]
   1949c:	aa01      	add	r2, sp, #4
   1949e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   194a2:	f88d 3004 	strb.w	r3, [sp, #4]
   194a6:	aa02      	add	r2, sp, #8
   194a8:	930b      	str	r3, [sp, #44]	; 0x2c
   194aa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   194ae:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   194b0:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   194b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   194b6:	4622      	mov	r2, r4
   194b8:	6863      	ldr	r3, [r4, #4]
   194ba:	a909      	add	r1, sp, #36	; 0x24
   194bc:	4628      	mov	r0, r5
   194be:	4798      	blx	r3
   194c0:	2800      	cmp	r0, #0
   194c2:	d0d2      	beq.n	1946a <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
   194c4:	8921      	ldrh	r1, [r4, #8]
   194c6:	4622      	mov	r2, r4
   194c8:	4628      	mov	r0, r5
   194ca:	f00d fc94 	bl	26df6 <gatt_discover_next>
	return;
   194ce:	e7cc      	b.n	1946a <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   194d0:	4630      	mov	r0, r6
   194d2:	f00c faba 	bl	25a4a <bt_uuid_cmp>
   194d6:	2800      	cmp	r0, #0
   194d8:	d0db      	beq.n	19492 <read_included_uuid_cb+0x56>
   194da:	e7f3      	b.n	194c4 <read_included_uuid_cb+0x88>
   194dc:	00028618 	.word	0x00028618
   194e0:	00028638 	.word	0x00028638
   194e4:	0002ecea 	.word	0x0002ecea

000194e8 <gatt_find_info_rsp>:
{
   194e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194ec:	b08f      	sub	sp, #60	; 0x3c
   194ee:	4680      	mov	r8, r0
   194f0:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   194f2:	4608      	mov	r0, r1
   194f4:	b971      	cbnz	r1, 19514 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
   194f6:	7811      	ldrb	r1, [r2, #0]
   194f8:	2901      	cmp	r1, #1
   194fa:	d011      	beq.n	19520 <gatt_find_info_rsp+0x38>
   194fc:	2902      	cmp	r1, #2
   194fe:	d028      	beq.n	19552 <gatt_find_info_rsp+0x6a>
   19500:	4a4f      	ldr	r2, [pc, #316]	; (19640 <gatt_find_info_rsp+0x158>)
   19502:	4b50      	ldr	r3, [pc, #320]	; (19644 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
   19504:	4850      	ldr	r0, [pc, #320]	; (19648 <gatt_find_info_rsp+0x160>)
   19506:	1ad2      	subs	r2, r2, r3
   19508:	08d2      	lsrs	r2, r2, #3
   1950a:	0192      	lsls	r2, r2, #6
   1950c:	f042 0201 	orr.w	r2, r2, #1
   19510:	f00b fb1e 	bl	24b50 <log_1>
	params->func(conn, NULL, params);
   19514:	6873      	ldr	r3, [r6, #4]
   19516:	4632      	mov	r2, r6
   19518:	2100      	movs	r1, #0
   1951a:	4640      	mov	r0, r8
   1951c:	4798      	blx	r3
   1951e:	e08b      	b.n	19638 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_16;
   19520:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
   19524:	f04f 0a04 	mov.w	sl, #4
	length--;
   19528:	3b01      	subs	r3, #1
   1952a:	b29b      	uxth	r3, r3
	if (length < len) {
   1952c:	4553      	cmp	r3, sl
   1952e:	d3f1      	bcc.n	19514 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
   19530:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   19534:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   19538:	9300      	str	r3, [sp, #0]
   1953a:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1953c:	46cb      	mov	fp, r9
			skip = false;
   1953e:	464d      	mov	r5, r9
   19540:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   19542:	9b00      	ldr	r3, [sp, #0]
   19544:	b953      	cbnz	r3, 1955c <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
   19546:	4632      	mov	r2, r6
   19548:	4659      	mov	r1, fp
   1954a:	4640      	mov	r0, r8
   1954c:	f00d fc53 	bl	26df6 <gatt_discover_next>
	return;
   19550:	e072      	b.n	19638 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_128;
   19552:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
   19556:	f04f 0a12 	mov.w	sl, #18
		break;
   1955a:	e7e5      	b.n	19528 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
   1955c:	8823      	ldrh	r3, [r4, #0]
   1955e:	f8ad 3004 	strh.w	r3, [sp, #4]
   19562:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
   19566:	f1b9 0f00 	cmp.w	r9, #0
   1956a:	d151      	bne.n	19610 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
   1956c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   19570:	2b00      	cmp	r3, #0
   19572:	d03a      	beq.n	195ea <gatt_find_info_rsp+0x102>
   19574:	2b02      	cmp	r3, #2
   19576:	d03f      	beq.n	195f8 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   19578:	6831      	ldr	r1, [r6, #0]
   1957a:	2900      	cmp	r1, #0
   1957c:	d143      	bne.n	19606 <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1957e:	7c33      	ldrb	r3, [r6, #16]
   19580:	2b04      	cmp	r3, #4
   19582:	d148      	bne.n	19616 <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   19584:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19588:	a902      	add	r1, sp, #8
   1958a:	4638      	mov	r0, r7
   1958c:	f88d 5008 	strb.w	r5, [sp, #8]
   19590:	f8ad 300a 	strh.w	r3, [sp, #10]
   19594:	f00c fa59 	bl	25a4a <bt_uuid_cmp>
   19598:	b310      	cbz	r0, 195e0 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1959a:	f642 0301 	movw	r3, #10241	; 0x2801
   1959e:	a903      	add	r1, sp, #12
   195a0:	4638      	mov	r0, r7
   195a2:	f88d 500c 	strb.w	r5, [sp, #12]
   195a6:	f8ad 300e 	strh.w	r3, [sp, #14]
   195aa:	f00c fa4e 	bl	25a4a <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   195ae:	b1b8      	cbz	r0, 195e0 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   195b0:	f642 0302 	movw	r3, #10242	; 0x2802
   195b4:	a909      	add	r1, sp, #36	; 0x24
   195b6:	4638      	mov	r0, r7
   195b8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   195bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   195c0:	f00c fa43 	bl	25a4a <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   195c4:	b160      	cbz	r0, 195e0 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   195c6:	f642 0303 	movw	r3, #10243	; 0x2803
   195ca:	a909      	add	r1, sp, #36	; 0x24
   195cc:	4638      	mov	r0, r7
   195ce:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   195d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   195d6:	f00c fa38 	bl	25a4a <bt_uuid_cmp>
   195da:	b9e0      	cbnz	r0, 19616 <gatt_find_info_rsp+0x12e>
				skip = true;
   195dc:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   195e0:	9b00      	ldr	r3, [sp, #0]
   195e2:	3b01      	subs	r3, #1
   195e4:	9300      	str	r3, [sp, #0]
   195e6:	4454      	add	r4, sl
   195e8:	e7ab      	b.n	19542 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   195ea:	78a3      	ldrb	r3, [r4, #2]
   195ec:	78e2      	ldrb	r2, [r4, #3]
   195ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   195f2:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   195f6:	e7bf      	b.n	19578 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
   195f8:	2210      	movs	r2, #16
   195fa:	1ca1      	adds	r1, r4, #2
   195fc:	f10d 0011 	add.w	r0, sp, #17
   19600:	f00c f9b0 	bl	25964 <memcpy>
			break;
   19604:	e7b8      	b.n	19578 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   19606:	4638      	mov	r0, r7
   19608:	f00c fa1f 	bl	25a4a <bt_uuid_cmp>
   1960c:	2800      	cmp	r0, #0
   1960e:	d0b6      	beq.n	1957e <gatt_find_info_rsp+0x96>
			skip = false;
   19610:	f04f 0900 	mov.w	r9, #0
   19614:	e7e4      	b.n	195e0 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
   19616:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1961a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1961e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   19622:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   19626:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   19628:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1962c:	4632      	mov	r2, r6
   1962e:	a909      	add	r1, sp, #36	; 0x24
   19630:	4640      	mov	r0, r8
   19632:	4798      	blx	r3
   19634:	2800      	cmp	r0, #0
   19636:	d1d3      	bne.n	195e0 <gatt_find_info_rsp+0xf8>
}
   19638:	b00f      	add	sp, #60	; 0x3c
   1963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1963e:	bf00      	nop
   19640:	00028638 	.word	0x00028638
   19644:	00028618 	.word	0x00028618
   19648:	0002ecfe 	.word	0x0002ecfe

0001964c <bt_gatt_subscribe>:
{
   1964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1964e:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   19650:	4605      	mov	r5, r0
   19652:	b970      	cbnz	r0, 19672 <bt_gatt_subscribe+0x26>
   19654:	494b      	ldr	r1, [pc, #300]	; (19784 <bt_gatt_subscribe+0x138>)
   19656:	4a4c      	ldr	r2, [pc, #304]	; (19788 <bt_gatt_subscribe+0x13c>)
   19658:	484c      	ldr	r0, [pc, #304]	; (1978c <bt_gatt_subscribe+0x140>)
   1965a:	f241 1399 	movw	r3, #4505	; 0x1199
   1965e:	f00b f84b 	bl	246f8 <printk>
   19662:	484b      	ldr	r0, [pc, #300]	; (19790 <bt_gatt_subscribe+0x144>)
   19664:	f00b f848 	bl	246f8 <printk>
   19668:	4847      	ldr	r0, [pc, #284]	; (19788 <bt_gatt_subscribe+0x13c>)
   1966a:	f241 1199 	movw	r1, #4505	; 0x1199
   1966e:	f00b fa34 	bl	24ada <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   19672:	b10e      	cbz	r6, 19678 <bt_gatt_subscribe+0x2c>
   19674:	6833      	ldr	r3, [r6, #0]
   19676:	b973      	cbnz	r3, 19696 <bt_gatt_subscribe+0x4a>
   19678:	4946      	ldr	r1, [pc, #280]	; (19794 <bt_gatt_subscribe+0x148>)
   1967a:	4a43      	ldr	r2, [pc, #268]	; (19788 <bt_gatt_subscribe+0x13c>)
   1967c:	4843      	ldr	r0, [pc, #268]	; (1978c <bt_gatt_subscribe+0x140>)
   1967e:	f241 139a 	movw	r3, #4506	; 0x119a
   19682:	f00b f839 	bl	246f8 <printk>
   19686:	4842      	ldr	r0, [pc, #264]	; (19790 <bt_gatt_subscribe+0x144>)
   19688:	f00b f836 	bl	246f8 <printk>
   1968c:	483e      	ldr	r0, [pc, #248]	; (19788 <bt_gatt_subscribe+0x13c>)
   1968e:	f241 119a 	movw	r1, #4506	; 0x119a
   19692:	f00b fa22 	bl	24ada <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   19696:	89b3      	ldrh	r3, [r6, #12]
   19698:	b973      	cbnz	r3, 196b8 <bt_gatt_subscribe+0x6c>
   1969a:	493f      	ldr	r1, [pc, #252]	; (19798 <bt_gatt_subscribe+0x14c>)
   1969c:	4a3a      	ldr	r2, [pc, #232]	; (19788 <bt_gatt_subscribe+0x13c>)
   1969e:	483b      	ldr	r0, [pc, #236]	; (1978c <bt_gatt_subscribe+0x140>)
   196a0:	f241 139b 	movw	r3, #4507	; 0x119b
   196a4:	f00b f828 	bl	246f8 <printk>
   196a8:	4839      	ldr	r0, [pc, #228]	; (19790 <bt_gatt_subscribe+0x144>)
   196aa:	f00b f825 	bl	246f8 <printk>
   196ae:	4836      	ldr	r0, [pc, #216]	; (19788 <bt_gatt_subscribe+0x13c>)
   196b0:	f241 119b 	movw	r1, #4507	; 0x119b
   196b4:	f00b fa11 	bl	24ada <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   196b8:	8973      	ldrh	r3, [r6, #10]
   196ba:	b973      	cbnz	r3, 196da <bt_gatt_subscribe+0x8e>
   196bc:	4937      	ldr	r1, [pc, #220]	; (1979c <bt_gatt_subscribe+0x150>)
   196be:	4a32      	ldr	r2, [pc, #200]	; (19788 <bt_gatt_subscribe+0x13c>)
   196c0:	4832      	ldr	r0, [pc, #200]	; (1978c <bt_gatt_subscribe+0x140>)
   196c2:	f241 13a1 	movw	r3, #4513	; 0x11a1
   196c6:	f00b f817 	bl	246f8 <printk>
   196ca:	4831      	ldr	r0, [pc, #196]	; (19790 <bt_gatt_subscribe+0x144>)
   196cc:	f00b f814 	bl	246f8 <printk>
   196d0:	482d      	ldr	r0, [pc, #180]	; (19788 <bt_gatt_subscribe+0x13c>)
   196d2:	f241 11a1 	movw	r1, #4513	; 0x11a1
   196d6:	f00b fa00 	bl	24ada <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   196da:	7b6b      	ldrb	r3, [r5, #13]
   196dc:	2b07      	cmp	r3, #7
   196de:	d149      	bne.n	19774 <bt_gatt_subscribe+0x128>
	sub = gatt_sub_find(conn);
   196e0:	4628      	mov	r0, r5
   196e2:	f7fe f9c3 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   196e6:	4604      	mov	r4, r0
   196e8:	b958      	cbnz	r0, 19702 <bt_gatt_subscribe+0xb6>
		sub = gatt_sub_find(NULL);
   196ea:	f7fe f9bf 	bl	17a6c <gatt_sub_find>
		if (sub) {
   196ee:	4604      	mov	r4, r0
   196f0:	2800      	cmp	r0, #0
   196f2:	d042      	beq.n	1977a <bt_gatt_subscribe+0x12e>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   196f4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   196f8:	3001      	adds	r0, #1
   196fa:	f00d f8c4 	bl	26886 <bt_addr_le_copy>
			sub->id = conn->id;
   196fe:	7a2b      	ldrb	r3, [r5, #8]
   19700:	7023      	strb	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   19702:	68a2      	ldr	r2, [r4, #8]
   19704:	b90a      	cbnz	r2, 1970a <bt_gatt_subscribe+0xbe>
   19706:	4613      	mov	r3, r2
   19708:	e001      	b.n	1970e <bt_gatt_subscribe+0xc2>
   1970a:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   1970e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   19710:	b96b      	cbnz	r3, 1972e <bt_gatt_subscribe+0xe2>
	if (!has_subscription) {
   19712:	bb31      	cbnz	r1, 19762 <bt_gatt_subscribe+0x116>
		err = gatt_write_ccc(conn, params);
   19714:	4628      	mov	r0, r5
   19716:	4631      	mov	r1, r6
   19718:	f7fe fdec 	bl	182f4 <gatt_write_ccc>
		if (err) {
   1971c:	4605      	mov	r5, r0
   1971e:	b300      	cbz	r0, 19762 <bt_gatt_subscribe+0x116>
	if (gatt_sub_is_empty(sub)) {
   19720:	68a3      	ldr	r3, [r4, #8]
   19722:	b913      	cbnz	r3, 1972a <bt_gatt_subscribe+0xde>
		gatt_sub_free(sub);
   19724:	4620      	mov	r0, r4
   19726:	f7fe fa65 	bl	17bf4 <gatt_sub_free>
}
   1972a:	4628      	mov	r0, r5
   1972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1972e:	42b3      	cmp	r3, r6
   19730:	d106      	bne.n	19740 <bt_gatt_subscribe+0xf4>
	if (gatt_sub_is_empty(sub)) {
   19732:	b912      	cbnz	r2, 1973a <bt_gatt_subscribe+0xee>
		gatt_sub_free(sub);
   19734:	4620      	mov	r0, r4
   19736:	f7fe fa5d 	bl	17bf4 <gatt_sub_free>
			return -EALREADY;
   1973a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1973e:	e7f4      	b.n	1972a <bt_gatt_subscribe+0xde>
		if (tmp->value_handle == params->value_handle &&
   19740:	891f      	ldrh	r7, [r3, #8]
   19742:	8930      	ldrh	r0, [r6, #8]
   19744:	4287      	cmp	r7, r0
   19746:	d104      	bne.n	19752 <bt_gatt_subscribe+0x106>
   19748:	899f      	ldrh	r7, [r3, #12]
   1974a:	89b0      	ldrh	r0, [r6, #12]
			has_subscription = true;
   1974c:	4287      	cmp	r7, r0
   1974e:	bf28      	it	cs
   19750:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   19752:	f113 0f14 	cmn.w	r3, #20
   19756:	d0dc      	beq.n	19712 <bt_gatt_subscribe+0xc6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19758:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1975a:	2b00      	cmp	r3, #0
   1975c:	d0d9      	beq.n	19712 <bt_gatt_subscribe+0xc6>
   1975e:	3b14      	subs	r3, #20
   19760:	e7d6      	b.n	19710 <bt_gatt_subscribe+0xc4>
Z_GENLIST_PREPEND(slist, snode)
   19762:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   19764:	6172      	str	r2, [r6, #20]
Z_GENLIST_PREPEND(slist, snode)
   19766:	68e5      	ldr	r5, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   19768:	f106 0314 	add.w	r3, r6, #20
	list->head = node;
   1976c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1976e:	b93d      	cbnz	r5, 19780 <bt_gatt_subscribe+0x134>
	list->tail = node;
   19770:	60e3      	str	r3, [r4, #12]
}
   19772:	e7da      	b.n	1972a <bt_gatt_subscribe+0xde>
		return -ENOTCONN;
   19774:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   19778:	e7d7      	b.n	1972a <bt_gatt_subscribe+0xde>
		return -ENOMEM;
   1977a:	f06f 050b 	mvn.w	r5, #11
   1977e:	e7d4      	b.n	1972a <bt_gatt_subscribe+0xde>
	return 0;
   19780:	2500      	movs	r5, #0
   19782:	e7d2      	b.n	1972a <bt_gatt_subscribe+0xde>
   19784:	0002e57e 	.word	0x0002e57e
   19788:	0002e963 	.word	0x0002e963
   1978c:	000290f5 	.word	0x000290f5
   19790:	0002eb56 	.word	0x0002eb56
   19794:	0002ed10 	.word	0x0002ed10
   19798:	0002ed29 	.word	0x0002ed29
   1979c:	0002ed37 	.word	0x0002ed37

000197a0 <bt_gatt_unsubscribe>:
{
   197a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197a4:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   197a6:	4607      	mov	r7, r0
   197a8:	b970      	cbnz	r0, 197c8 <bt_gatt_unsubscribe+0x28>
   197aa:	494c      	ldr	r1, [pc, #304]	; (198dc <bt_gatt_unsubscribe+0x13c>)
   197ac:	4a4c      	ldr	r2, [pc, #304]	; (198e0 <bt_gatt_unsubscribe+0x140>)
   197ae:	484d      	ldr	r0, [pc, #308]	; (198e4 <bt_gatt_unsubscribe+0x144>)
   197b0:	f241 13f9 	movw	r3, #4601	; 0x11f9
   197b4:	f00a ffa0 	bl	246f8 <printk>
   197b8:	484b      	ldr	r0, [pc, #300]	; (198e8 <bt_gatt_unsubscribe+0x148>)
   197ba:	f00a ff9d 	bl	246f8 <printk>
   197be:	4848      	ldr	r0, [pc, #288]	; (198e0 <bt_gatt_unsubscribe+0x140>)
   197c0:	f241 11f9 	movw	r1, #4601	; 0x11f9
   197c4:	f00b f989 	bl	24ada <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   197c8:	b975      	cbnz	r5, 197e8 <bt_gatt_unsubscribe+0x48>
   197ca:	4948      	ldr	r1, [pc, #288]	; (198ec <bt_gatt_unsubscribe+0x14c>)
   197cc:	4a44      	ldr	r2, [pc, #272]	; (198e0 <bt_gatt_unsubscribe+0x140>)
   197ce:	4845      	ldr	r0, [pc, #276]	; (198e4 <bt_gatt_unsubscribe+0x144>)
   197d0:	f241 13fa 	movw	r3, #4602	; 0x11fa
   197d4:	f00a ff90 	bl	246f8 <printk>
   197d8:	4843      	ldr	r0, [pc, #268]	; (198e8 <bt_gatt_unsubscribe+0x148>)
   197da:	f00a ff8d 	bl	246f8 <printk>
   197de:	4840      	ldr	r0, [pc, #256]	; (198e0 <bt_gatt_unsubscribe+0x140>)
   197e0:	f241 11fa 	movw	r1, #4602	; 0x11fa
   197e4:	f00b f979 	bl	24ada <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   197e8:	7b7b      	ldrb	r3, [r7, #13]
   197ea:	2b07      	cmp	r3, #7
   197ec:	d172      	bne.n	198d4 <bt_gatt_unsubscribe+0x134>
	sub = gatt_sub_find(conn);
   197ee:	4638      	mov	r0, r7
   197f0:	f7fe f93c 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   197f4:	4606      	mov	r6, r0
   197f6:	b920      	cbnz	r0, 19802 <bt_gatt_unsubscribe+0x62>
		return -EINVAL;
   197f8:	f06f 0015 	mvn.w	r0, #21
}
   197fc:	b003      	add	sp, #12
   197fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   19802:	6884      	ldr	r4, [r0, #8]
   19804:	b1fc      	cbz	r4, 19846 <bt_gatt_unsubscribe+0xa6>
   19806:	f1b4 0314 	subs.w	r3, r4, #20
   1980a:	d01e      	beq.n	1984a <bt_gatt_unsubscribe+0xaa>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1980c:	6824      	ldr	r4, [r4, #0]
   1980e:	b104      	cbz	r4, 19812 <bt_gatt_unsubscribe+0x72>
   19810:	3c14      	subs	r4, #20
   19812:	f04f 0b00 	mov.w	fp, #0
   19816:	465a      	mov	r2, fp
   19818:	46d8      	mov	r8, fp
	parent->next = child;
   1981a:	46d9      	mov	r9, fp
			if (atomic_test_bit(params->flags,
   1981c:	f105 0a10 	add.w	sl, r5, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   19820:	b9ab      	cbnz	r3, 1984e <bt_gatt_unsubscribe+0xae>
	if (!found) {
   19822:	2a00      	cmp	r2, #0
   19824:	d0e8      	beq.n	197f8 <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   19826:	68b3      	ldr	r3, [r6, #8]
   19828:	b913      	cbnz	r3, 19830 <bt_gatt_unsubscribe+0x90>
		gatt_sub_free(sub);
   1982a:	4630      	mov	r0, r6
   1982c:	f7fe f9e2 	bl	17bf4 <gatt_sub_free>
	if (has_subscription) {
   19830:	f1b8 0f00 	cmp.w	r8, #0
   19834:	d045      	beq.n	198c2 <bt_gatt_unsubscribe+0x122>
		params->notify(conn, params, NULL, 0);
   19836:	2300      	movs	r3, #0
   19838:	682c      	ldr	r4, [r5, #0]
   1983a:	461a      	mov	r2, r3
   1983c:	4629      	mov	r1, r5
   1983e:	4638      	mov	r0, r7
   19840:	47a0      	blx	r4
		return 0;
   19842:	2000      	movs	r0, #0
   19844:	e7da      	b.n	197fc <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   19846:	4623      	mov	r3, r4
   19848:	e7e3      	b.n	19812 <bt_gatt_unsubscribe+0x72>
   1984a:	461c      	mov	r4, r3
   1984c:	e7e1      	b.n	19812 <bt_gatt_unsubscribe+0x72>
		if (params == tmp) {
   1984e:	42ab      	cmp	r3, r5
   19850:	f103 0114 	add.w	r1, r3, #20
   19854:	d129      	bne.n	198aa <bt_gatt_unsubscribe+0x10a>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   19856:	6958      	ldr	r0, [r3, #20]
   19858:	f1bb 0f00 	cmp.w	fp, #0
   1985c:	d11d      	bne.n	1989a <bt_gatt_unsubscribe+0xfa>
   1985e:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   19860:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   19862:	4291      	cmp	r1, r2
   19864:	d100      	bne.n	19868 <bt_gatt_unsubscribe+0xc8>
	list->tail = node;
   19866:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   19868:	f8c3 9014 	str.w	r9, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1986c:	4650      	mov	r0, sl
   1986e:	f00c ff76 	bl	2675e <atomic_get>
			if (atomic_test_bit(params->flags,
   19872:	0743      	lsls	r3, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19874:	f3c0 0280 	ubfx	r2, r0, #2, #1
   19878:	d51f      	bpl.n	198ba <bt_gatt_unsubscribe+0x11a>
	bt_att_req_cancel(conn, params);
   1987a:	4629      	mov	r1, r5
   1987c:	4638      	mov	r0, r7
   1987e:	9201      	str	r2, [sp, #4]
   19880:	f7fe f836 	bl	178f0 <bt_att_req_cancel>
}
   19884:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   19886:	b1d4      	cbz	r4, 198be <bt_gatt_unsubscribe+0x11e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19888:	f114 0114 	adds.w	r1, r4, #20
   1988c:	d002      	beq.n	19894 <bt_gatt_unsubscribe+0xf4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1988e:	6961      	ldr	r1, [r4, #20]
   19890:	b101      	cbz	r1, 19894 <bt_gatt_unsubscribe+0xf4>
   19892:	3914      	subs	r1, #20
   19894:	4623      	mov	r3, r4
   19896:	460c      	mov	r4, r1
   19898:	e7c2      	b.n	19820 <bt_gatt_unsubscribe+0x80>
	parent->next = child;
   1989a:	f8cb 0000 	str.w	r0, [fp]
Z_GENLIST_REMOVE(slist, snode)
   1989e:	68f2      	ldr	r2, [r6, #12]
   198a0:	4291      	cmp	r1, r2
	list->tail = node;
   198a2:	bf08      	it	eq
   198a4:	f8c6 b00c 	streq.w	fp, [r6, #12]
}
   198a8:	e7de      	b.n	19868 <bt_gatt_unsubscribe+0xc8>
		if (tmp->value_handle == params->value_handle) {
   198aa:	8918      	ldrh	r0, [r3, #8]
   198ac:	892b      	ldrh	r3, [r5, #8]
   198ae:	468b      	mov	fp, r1
   198b0:	4298      	cmp	r0, r3
   198b2:	bf08      	it	eq
   198b4:	f04f 0801 	moveq.w	r8, #1
   198b8:	e7e5      	b.n	19886 <bt_gatt_unsubscribe+0xe6>
			found = true;
   198ba:	2201      	movs	r2, #1
   198bc:	e7e3      	b.n	19886 <bt_gatt_unsubscribe+0xe6>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   198be:	4621      	mov	r1, r4
   198c0:	e7e8      	b.n	19894 <bt_gatt_unsubscribe+0xf4>
	return gatt_write_ccc(conn, params);
   198c2:	4629      	mov	r1, r5
   198c4:	4638      	mov	r0, r7
	params->value = 0x0000;
   198c6:	f8a5 800c 	strh.w	r8, [r5, #12]
}
   198ca:	b003      	add	sp, #12
   198cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   198d0:	f7fe bd10 	b.w	182f4 <gatt_write_ccc>
		return -ENOTCONN;
   198d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   198d8:	e790      	b.n	197fc <bt_gatt_unsubscribe+0x5c>
   198da:	bf00      	nop
   198dc:	0002e57e 	.word	0x0002e57e
   198e0:	0002e963 	.word	0x0002e963
   198e4:	000290f5 	.word	0x000290f5
   198e8:	0002eb56 	.word	0x0002eb56
   198ec:	0002eb4f 	.word	0x0002eb4f

000198f0 <bt_gatt_mult_notification>:
{
   198f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198f4:	b087      	sub	sp, #28
   198f6:	4682      	mov	sl, r0
   198f8:	460c      	mov	r4, r1
   198fa:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   198fc:	f7fe f8b6 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   19900:	4607      	mov	r7, r0
   19902:	b1f8      	cbz	r0, 19944 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   19904:	4632      	mov	r2, r6
   19906:	4621      	mov	r1, r4
   19908:	a803      	add	r0, sp, #12
   1990a:	f00d fea8 	bl	2765e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1990e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   19912:	2b04      	cmp	r3, #4
   19914:	d916      	bls.n	19944 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   19916:	2104      	movs	r1, #4
   19918:	a803      	add	r0, sp, #12
   1991a:	f002 fb13 	bl	1bf44 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1991e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   19922:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   19926:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   19928:	4605      	mov	r5, r0
		if (len > buf.len) {
   1992a:	d20e      	bcs.n	1994a <bt_gatt_mult_notification+0x5a>
   1992c:	4a1c      	ldr	r2, [pc, #112]	; (199a0 <bt_gatt_mult_notification+0xb0>)
   1992e:	4b1d      	ldr	r3, [pc, #116]	; (199a4 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
   19930:	481d      	ldr	r0, [pc, #116]	; (199a8 <bt_gatt_mult_notification+0xb8>)
   19932:	1a9b      	subs	r3, r3, r2
   19934:	08db      	lsrs	r3, r3, #3
   19936:	019b      	lsls	r3, r3, #6
   19938:	f043 0301 	orr.w	r3, r3, #1
   1993c:	4632      	mov	r2, r6
   1993e:	4641      	mov	r1, r8
   19940:	f00b f91a 	bl	24b78 <log_2>
}
   19944:	b007      	add	sp, #28
   19946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1994a:	68bb      	ldr	r3, [r7, #8]
   1994c:	b31b      	cbz	r3, 19996 <bt_gatt_mult_notification+0xa6>
   1994e:	f1b3 0914 	subs.w	r9, r3, #20
   19952:	d020      	beq.n	19996 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19954:	681c      	ldr	r4, [r3, #0]
   19956:	b104      	cbz	r4, 1995a <bt_gatt_mult_notification+0x6a>
   19958:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1995a:	462b      	mov	r3, r5
   1995c:	f833 bb04 	ldrh.w	fp, [r3], #4
   19960:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   19962:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   19966:	455b      	cmp	r3, fp
   19968:	d10b      	bne.n	19982 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
   1996a:	9a01      	ldr	r2, [sp, #4]
   1996c:	f8d9 5000 	ldr.w	r5, [r9]
   19970:	4643      	mov	r3, r8
   19972:	4649      	mov	r1, r9
   19974:	4650      	mov	r0, sl
   19976:	47a8      	blx	r5
   19978:	b918      	cbnz	r0, 19982 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
   1997a:	4649      	mov	r1, r9
   1997c:	4650      	mov	r0, sl
   1997e:	f7ff ff0f 	bl	197a0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   19982:	b144      	cbz	r4, 19996 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19984:	f114 0314 	adds.w	r3, r4, #20
   19988:	d002      	beq.n	19990 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1998a:	6963      	ldr	r3, [r4, #20]
   1998c:	b103      	cbz	r3, 19990 <bt_gatt_mult_notification+0xa0>
   1998e:	3b14      	subs	r3, #20
{
   19990:	46a1      	mov	r9, r4
   19992:	461c      	mov	r4, r3
   19994:	e7e5      	b.n	19962 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
   19996:	4641      	mov	r1, r8
   19998:	a803      	add	r0, sp, #12
   1999a:	f002 fad3 	bl	1bf44 <net_buf_simple_pull_mem>
   1999e:	e7b6      	b.n	1990e <bt_gatt_mult_notification+0x1e>
   199a0:	00028618 	.word	0x00028618
   199a4:	00028638 	.word	0x00028638
   199a8:	0002ed4a 	.word	0x0002ed4a

000199ac <bt_gatt_connected>:
{
   199ac:	b570      	push	{r4, r5, r6, lr}
   199ae:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   199b0:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   199b4:	4605      	mov	r5, r0
	data.conn = conn;
   199b6:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   199b8:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   199ba:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   199bc:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   199c0:	4631      	mov	r1, r6
   199c2:	f00c f8f3 	bl	25bac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   199c6:	b198      	cbz	r0, 199f0 <bt_gatt_connected+0x44>
		if (conn->id) {
   199c8:	7a2a      	ldrb	r2, [r5, #8]
   199ca:	2a00      	cmp	r2, #0
   199cc:	d037      	beq.n	19a3e <bt_gatt_connected+0x92>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   199ce:	ac02      	add	r4, sp, #8
   199d0:	2104      	movs	r1, #4
   199d2:	4620      	mov	r0, r4
   199d4:	f00a fdf4 	bl	245c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   199d8:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   199da:	4a24      	ldr	r2, [pc, #144]	; (19a6c <bt_gatt_connected+0xc0>)
   199dc:	2124      	movs	r1, #36	; 0x24
   199de:	a805      	add	r0, sp, #20
   199e0:	4633      	mov	r3, r6
   199e2:	f7fa ff21 	bl	14828 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   199e6:	aa05      	add	r2, sp, #20
   199e8:	4921      	ldr	r1, [pc, #132]	; (19a70 <bt_gatt_connected+0xc4>)
   199ea:	4610      	mov	r0, r2
   199ec:	f7f8 ff8c 	bl	12908 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   199f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   199f4:	4a1f      	ldr	r2, [pc, #124]	; (19a74 <bt_gatt_connected+0xc8>)
   199f6:	ab03      	add	r3, sp, #12
   199f8:	2001      	movs	r0, #1
   199fa:	f00d f9c6 	bl	26d8a <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   199fe:	4628      	mov	r0, r5
   19a00:	f00c fa24 	bl	25e4c <bt_conn_get_security>
   19a04:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   19a08:	4288      	cmp	r0, r1
   19a0a:	d20e      	bcs.n	19a2a <bt_gatt_connected+0x7e>
		int err = bt_conn_set_security(conn, data.sec);
   19a0c:	4628      	mov	r0, r5
   19a0e:	f00c f9ea 	bl	25de6 <bt_conn_set_security>
		if (err) {
   19a12:	4601      	mov	r1, r0
   19a14:	b148      	cbz	r0, 19a2a <bt_gatt_connected+0x7e>
   19a16:	4a18      	ldr	r2, [pc, #96]	; (19a78 <bt_gatt_connected+0xcc>)
   19a18:	4b18      	ldr	r3, [pc, #96]	; (19a7c <bt_gatt_connected+0xd0>)
			BT_WARN("Failed to set security for bonded peer (%d)",
   19a1a:	4819      	ldr	r0, [pc, #100]	; (19a80 <bt_gatt_connected+0xd4>)
   19a1c:	1ad2      	subs	r2, r2, r3
   19a1e:	08d2      	lsrs	r2, r2, #3
   19a20:	0192      	lsls	r2, r2, #6
   19a22:	f042 0202 	orr.w	r2, r2, #2
   19a26:	f00b f893 	bl	24b50 <log_1>
	sub = gatt_sub_find(conn);
   19a2a:	4628      	mov	r0, r5
   19a2c:	f7fe f81e 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   19a30:	b118      	cbz	r0, 19a3a <bt_gatt_connected+0x8e>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   19a32:	6884      	ldr	r4, [r0, #8]
   19a34:	b10c      	cbz	r4, 19a3a <bt_gatt_connected+0x8e>
   19a36:	3c14      	subs	r4, #20
   19a38:	b91c      	cbnz	r4, 19a42 <bt_gatt_connected+0x96>
}
   19a3a:	b00e      	add	sp, #56	; 0x38
   19a3c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   19a3e:	9200      	str	r2, [sp, #0]
   19a40:	e7cb      	b.n	199da <bt_gatt_connected+0x2e>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   19a42:	7a28      	ldrb	r0, [r5, #8]
   19a44:	4631      	mov	r1, r6
   19a46:	f00c f8b1 	bl	25bac <bt_addr_le_is_bonded>
   19a4a:	b148      	cbz	r0, 19a60 <bt_gatt_connected+0xb4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19a4c:	f104 0010 	add.w	r0, r4, #16
   19a50:	f00c fe85 	bl	2675e <atomic_get>
   19a54:	0783      	lsls	r3, r0, #30
   19a56:	d403      	bmi.n	19a60 <bt_gatt_connected+0xb4>
			gatt_write_ccc(conn, params);
   19a58:	4621      	mov	r1, r4
   19a5a:	4628      	mov	r0, r5
   19a5c:	f7fe fc4a 	bl	182f4 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19a60:	f114 0f14 	cmn.w	r4, #20
   19a64:	d0e9      	beq.n	19a3a <bt_gatt_connected+0x8e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a66:	6964      	ldr	r4, [r4, #20]
   19a68:	e7e4      	b.n	19a34 <bt_gatt_connected+0x88>
   19a6a:	bf00      	nop
   19a6c:	0002eb02 	.word	0x0002eb02
   19a70:	000186f5 	.word	0x000186f5
   19a74:	00018c7d 	.word	0x00018c7d
   19a78:	00028638 	.word	0x00028638
   19a7c:	00028618 	.word	0x00028618
   19a80:	0002ed63 	.word	0x0002ed63

00019a84 <bt_gatt_att_max_mtu_changed>:
{
   19a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19a86:	4b09      	ldr	r3, [pc, #36]	; (19aac <bt_gatt_att_max_mtu_changed+0x28>)
   19a88:	681c      	ldr	r4, [r3, #0]
{
   19a8a:	4605      	mov	r5, r0
   19a8c:	460e      	mov	r6, r1
   19a8e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19a90:	b10c      	cbz	r4, 19a96 <bt_gatt_att_max_mtu_changed+0x12>
   19a92:	3c04      	subs	r4, #4
   19a94:	b904      	cbnz	r4, 19a98 <bt_gatt_att_max_mtu_changed+0x14>
}
   19a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   19a98:	6823      	ldr	r3, [r4, #0]
   19a9a:	b11b      	cbz	r3, 19aa4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   19a9c:	463a      	mov	r2, r7
   19a9e:	4631      	mov	r1, r6
   19aa0:	4628      	mov	r0, r5
   19aa2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   19aa4:	1d23      	adds	r3, r4, #4
   19aa6:	d0f6      	beq.n	19a96 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19aa8:	6864      	ldr	r4, [r4, #4]
   19aaa:	e7f1      	b.n	19a90 <bt_gatt_att_max_mtu_changed+0xc>
   19aac:	200021e8 	.word	0x200021e8

00019ab0 <bt_gatt_encrypt_change>:
{
   19ab0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19ab2:	4a06      	ldr	r2, [pc, #24]	; (19acc <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   19ab4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19ab6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   19ab8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19abe:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19ac2:	f00d f962 	bl	26d8a <bt_gatt_foreach_attr>
}
   19ac6:	b003      	add	sp, #12
   19ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   19acc:	00018c7d 	.word	0x00018c7d

00019ad0 <db_hash_read>:
{
   19ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19ad2:	4914      	ldr	r1, [pc, #80]	; (19b24 <db_hash_read+0x54>)
{
   19ad4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19ad8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19ada:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   19ade:	461f      	mov	r7, r3
   19ae0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19ae2:	f008 fcef 	bl	224c4 <k_work_cancel_delayable_sync>
   19ae6:	4810      	ldr	r0, [pc, #64]	; (19b28 <db_hash_read+0x58>)
   19ae8:	f00c fe39 	bl	2675e <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19aec:	0743      	lsls	r3, r0, #29
   19aee:	d402      	bmi.n	19af6 <db_hash_read+0x26>
		db_hash_gen(true);
   19af0:	2001      	movs	r0, #1
   19af2:	f7fe fd4f 	bl	18594 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   19af6:	2101      	movs	r1, #1
   19af8:	4620      	mov	r0, r4
   19afa:	f00d fa0f 	bl	26f1c <bt_gatt_change_aware>
	if (offset > value_len) {
   19afe:	2e10      	cmp	r6, #16
   19b00:	d80c      	bhi.n	19b1c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   19b02:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   19b06:	4909      	ldr	r1, [pc, #36]	; (19b2c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   19b08:	42bc      	cmp	r4, r7
   19b0a:	bfa8      	it	ge
   19b0c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19b0e:	4622      	mov	r2, r4
   19b10:	4431      	add	r1, r6
   19b12:	4628      	mov	r0, r5
   19b14:	f00b ff26 	bl	25964 <memcpy>
}
   19b18:	4620      	mov	r0, r4
   19b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19b1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19b20:	e7fa      	b.n	19b18 <db_hash_read+0x48>
   19b22:	bf00      	nop
   19b24:	20001858 	.word	0x20001858
   19b28:	20001908 	.word	0x20001908
   19b2c:	20001808 	.word	0x20001808

00019b30 <bt_gatt_store_ccc>:
{
   19b30:	b570      	push	{r4, r5, r6, lr}
   19b32:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   19b34:	2300      	movs	r3, #0
{
   19b36:	4604      	mov	r4, r0
   19b38:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   19b3a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   19b3c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   19b40:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   19b42:	4a18      	ldr	r2, [pc, #96]	; (19ba4 <bt_gatt_store_ccc+0x74>)
   19b44:	ab0d      	add	r3, sp, #52	; 0x34
   19b46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19b4a:	2001      	movs	r0, #1
   19b4c:	f00d f91d 	bl	26d8a <bt_gatt_foreach_attr>
	if (id) {
   19b50:	b31c      	cbz	r4, 19b9a <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   19b52:	ae03      	add	r6, sp, #12
   19b54:	4622      	mov	r2, r4
   19b56:	2104      	movs	r1, #4
   19b58:	4630      	mov	r0, r6
   19b5a:	f00a fd31 	bl	245c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   19b5e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   19b60:	4a11      	ldr	r2, [pc, #68]	; (19ba8 <bt_gatt_store_ccc+0x78>)
   19b62:	462b      	mov	r3, r5
   19b64:	2124      	movs	r1, #36	; 0x24
   19b66:	a804      	add	r0, sp, #16
   19b68:	f7fa fe5e 	bl	14828 <bt_settings_encode_key>
	if (save.count) {
   19b6c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   19b6e:	b1b2      	cbz	r2, 19b9e <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   19b70:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   19b72:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   19b74:	a804      	add	r0, sp, #16
   19b76:	f7f8 fea1 	bl	128bc <settings_save_one>
	if (err) {
   19b7a:	4604      	mov	r4, r0
   19b7c:	b150      	cbz	r0, 19b94 <bt_gatt_store_ccc+0x64>
   19b7e:	4a0b      	ldr	r2, [pc, #44]	; (19bac <bt_gatt_store_ccc+0x7c>)
   19b80:	4b0b      	ldr	r3, [pc, #44]	; (19bb0 <bt_gatt_store_ccc+0x80>)
   19b82:	1ad2      	subs	r2, r2, r3
   19b84:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   19b86:	0192      	lsls	r2, r2, #6
   19b88:	4601      	mov	r1, r0
   19b8a:	f042 0201 	orr.w	r2, r2, #1
   19b8e:	4809      	ldr	r0, [pc, #36]	; (19bb4 <bt_gatt_store_ccc+0x84>)
   19b90:	f00a ffde 	bl	24b50 <log_1>
}
   19b94:	4620      	mov	r0, r4
   19b96:	b040      	add	sp, #256	; 0x100
   19b98:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   19b9a:	9400      	str	r4, [sp, #0]
   19b9c:	e7e0      	b.n	19b60 <bt_gatt_store_ccc+0x30>
		str = NULL;
   19b9e:	4611      	mov	r1, r2
   19ba0:	e7e8      	b.n	19b74 <bt_gatt_store_ccc+0x44>
   19ba2:	bf00      	nop
   19ba4:	00017e81 	.word	0x00017e81
   19ba8:	0002eb02 	.word	0x0002eb02
   19bac:	00028638 	.word	0x00028638
   19bb0:	00028618 	.word	0x00028618
   19bb4:	0002ed8f 	.word	0x0002ed8f

00019bb8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19bbc:	4603      	mov	r3, r0
   19bbe:	4a5e      	ldr	r2, [pc, #376]	; (19d38 <bt_gatt_disconnected+0x180>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   19bc0:	4e5e      	ldr	r6, [pc, #376]	; (19d3c <bt_gatt_disconnected+0x184>)
{
   19bc2:	b08d      	sub	sp, #52	; 0x34
   19bc4:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19bc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19bca:	2001      	movs	r0, #1
   19bcc:	f00d f8dd 	bl	26d8a <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   19bd0:	4620      	mov	r0, r4
   19bd2:	f7fc fa7f 	bl	160d4 <bt_conn_index>
   19bd6:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   19bd8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   19bdc:	b120      	cbz	r0, 19be8 <bt_gatt_disconnected+0x30>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   19bde:	f7fc f93b 	bl	15e58 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   19be2:	2300      	movs	r3, #0
   19be4:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   19be8:	4855      	ldr	r0, [pc, #340]	; (19d40 <bt_gatt_disconnected+0x188>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19bea:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   19bee:	f008 fc0b 	bl	22408 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19bf2:	7a20      	ldrb	r0, [r4, #8]
   19bf4:	4629      	mov	r1, r5
   19bf6:	f00b ffd9 	bl	25bac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   19bfa:	2800      	cmp	r0, #0
   19bfc:	d035      	beq.n	19c6a <bt_gatt_disconnected+0xb2>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   19bfe:	4629      	mov	r1, r5
   19c00:	7a20      	ldrb	r0, [r4, #8]
   19c02:	f7ff ff95 	bl	19b30 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   19c06:	4620      	mov	r0, r4
   19c08:	f7fd fee2 	bl	179d0 <find_cf_cfg>
	if (!cfg) {
   19c0c:	4606      	mov	r6, r0
   19c0e:	2800      	cmp	r0, #0
   19c10:	d064      	beq.n	19cdc <bt_gatt_disconnected+0x124>
		if (conn->id) {
   19c12:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   19c14:	3608      	adds	r6, #8
		if (conn->id) {
   19c16:	2a00      	cmp	r2, #0
   19c18:	d062      	beq.n	19ce0 <bt_gatt_disconnected+0x128>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   19c1a:	af02      	add	r7, sp, #8
   19c1c:	2104      	movs	r1, #4
   19c1e:	4638      	mov	r0, r7
   19c20:	f00a fcce 	bl	245c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   19c24:	9700      	str	r7, [sp, #0]
   19c26:	462b      	mov	r3, r5
   19c28:	4a46      	ldr	r2, [pc, #280]	; (19d44 <bt_gatt_disconnected+0x18c>)
   19c2a:	2124      	movs	r1, #36	; 0x24
   19c2c:	a803      	add	r0, sp, #12
   19c2e:	f7fa fdfb 	bl	14828 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   19c32:	7a23      	ldrb	r3, [r4, #8]
   19c34:	2701      	movs	r7, #1
   19c36:	b93b      	cbnz	r3, 19c48 <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   19c38:	2300      	movs	r3, #0
   19c3a:	9300      	str	r3, [sp, #0]
   19c3c:	4a41      	ldr	r2, [pc, #260]	; (19d44 <bt_gatt_disconnected+0x18c>)
   19c3e:	462b      	mov	r3, r5
   19c40:	2124      	movs	r1, #36	; 0x24
   19c42:	a803      	add	r0, sp, #12
   19c44:	f7fa fdf0 	bl	14828 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   19c48:	4631      	mov	r1, r6
   19c4a:	463a      	mov	r2, r7
   19c4c:	a803      	add	r0, sp, #12
   19c4e:	f7f8 fe35 	bl	128bc <settings_save_one>
	if (err) {
   19c52:	4601      	mov	r1, r0
   19c54:	b148      	cbz	r0, 19c6a <bt_gatt_disconnected+0xb2>
   19c56:	4a3c      	ldr	r2, [pc, #240]	; (19d48 <bt_gatt_disconnected+0x190>)
   19c58:	4b3c      	ldr	r3, [pc, #240]	; (19d4c <bt_gatt_disconnected+0x194>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   19c5a:	483d      	ldr	r0, [pc, #244]	; (19d50 <bt_gatt_disconnected+0x198>)
   19c5c:	1ad2      	subs	r2, r2, r3
   19c5e:	08d2      	lsrs	r2, r2, #3
   19c60:	0192      	lsls	r2, r2, #6
   19c62:	f042 0201 	orr.w	r2, r2, #1
   19c66:	f00a ff73 	bl	24b50 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19c6a:	7a20      	ldrb	r0, [r4, #8]
   19c6c:	4629      	mov	r1, r5
   19c6e:	f00b ff9d 	bl	25bac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   19c72:	b150      	cbz	r0, 19c8a <bt_gatt_disconnected+0xd2>
		struct addr_with_id addr_with_id = {
   19c74:	7a23      	ldrb	r3, [r4, #8]
   19c76:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   19c7a:	4a36      	ldr	r2, [pc, #216]	; (19d54 <bt_gatt_disconnected+0x19c>)
		struct addr_with_id addr_with_id = {
   19c7c:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   19c7e:	ab03      	add	r3, sp, #12
   19c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19c84:	2001      	movs	r0, #1
   19c86:	f00d f880 	bl	26d8a <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   19c8a:	4620      	mov	r0, r4
   19c8c:	f7fd feee 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   19c90:	4607      	mov	r7, r0
   19c92:	b3b0      	cbz	r0, 19d02 <bt_gatt_disconnected+0x14a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   19c94:	6883      	ldr	r3, [r0, #8]
   19c96:	b3a3      	cbz	r3, 19d02 <bt_gatt_disconnected+0x14a>
   19c98:	f1b3 0b14 	subs.w	fp, r3, #20
   19c9c:	d031      	beq.n	19d02 <bt_gatt_disconnected+0x14a>
   19c9e:	681e      	ldr	r6, [r3, #0]
   19ca0:	b106      	cbz	r6, 19ca4 <bt_gatt_disconnected+0xec>
   19ca2:	3e14      	subs	r6, #20
   19ca4:	f04f 0800 	mov.w	r8, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   19ca8:	f107 0901 	add.w	r9, r7, #1
			params->value = 0U;
   19cac:	46c2      	mov	sl, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   19cae:	7a20      	ldrb	r0, [r4, #8]
   19cb0:	4629      	mov	r1, r5
   19cb2:	f00b ff7b 	bl	25bac <bt_addr_le_is_bonded>
   19cb6:	b9a8      	cbnz	r0, 19ce4 <bt_gatt_disconnected+0x12c>
			params->value = 0U;
   19cb8:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   19cbc:	465b      	mov	r3, fp
   19cbe:	4642      	mov	r2, r8
   19cc0:	4639      	mov	r1, r7
   19cc2:	4620      	mov	r0, r4
   19cc4:	f00c ff75 	bl	26bb2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   19cc8:	b1de      	cbz	r6, 19d02 <bt_gatt_disconnected+0x14a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19cca:	f116 0214 	adds.w	r2, r6, #20
   19cce:	d002      	beq.n	19cd6 <bt_gatt_disconnected+0x11e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19cd0:	6972      	ldr	r2, [r6, #20]
   19cd2:	b102      	cbz	r2, 19cd6 <bt_gatt_disconnected+0x11e>
   19cd4:	3a14      	subs	r2, #20
   19cd6:	46b3      	mov	fp, r6
   19cd8:	4616      	mov	r6, r2
   19cda:	e7e8      	b.n	19cae <bt_gatt_disconnected+0xf6>
		len = 0;
   19cdc:	4607      	mov	r7, r0
   19cde:	e7ab      	b.n	19c38 <bt_gatt_disconnected+0x80>
   19ce0:	2701      	movs	r7, #1
   19ce2:	e7a9      	b.n	19c38 <bt_gatt_disconnected+0x80>
   19ce4:	f10b 0010 	add.w	r0, fp, #16
   19ce8:	f00c fd39 	bl	2675e <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   19cec:	07c3      	lsls	r3, r0, #31
   19cee:	d4e3      	bmi.n	19cb8 <bt_gatt_disconnected+0x100>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   19cf0:	787b      	ldrb	r3, [r7, #1]
   19cf2:	b11b      	cbz	r3, 19cfc <bt_gatt_disconnected+0x144>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   19cf4:	4629      	mov	r1, r5
   19cf6:	4648      	mov	r0, r9
   19cf8:	f00c fdc5 	bl	26886 <bt_addr_le_copy>
			prev = &params->node;
   19cfc:	f10b 0814 	add.w	r8, fp, #20
   19d00:	e7e2      	b.n	19cc8 <bt_gatt_disconnected+0x110>
	cfg = find_cf_cfg(conn);
   19d02:	4620      	mov	r0, r4
   19d04:	f7fd fe64 	bl	179d0 <find_cf_cfg>
	if (!cfg) {
   19d08:	4606      	mov	r6, r0
   19d0a:	b138      	cbz	r0, 19d1c <bt_gatt_disconnected+0x164>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19d0c:	7a20      	ldrb	r0, [r4, #8]
   19d0e:	4629      	mov	r1, r5
   19d10:	f00b ff4c 	bl	25bac <bt_addr_le_is_bonded>
   19d14:	b928      	cbnz	r0, 19d22 <bt_gatt_disconnected+0x16a>
		clear_cf_cfg(cfg);
   19d16:	4630      	mov	r0, r6
   19d18:	f00c fe52 	bl	269c0 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19d1c:	b00d      	add	sp, #52	; 0x34
   19d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19d22:	4629      	mov	r1, r5
   19d24:	1c70      	adds	r0, r6, #1
   19d26:	f00c fdae 	bl	26886 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19d2a:	f06f 0102 	mvn.w	r1, #2
   19d2e:	f106 000c 	add.w	r0, r6, #12
   19d32:	f00c fdb9 	bl	268a8 <atomic_and>
}
   19d36:	e7f1      	b.n	19d1c <bt_gatt_disconnected+0x164>
   19d38:	00018269 	.word	0x00018269
   19d3c:	20001880 	.word	0x20001880
   19d40:	20001888 	.word	0x20001888
   19d44:	0002edd9 	.word	0x0002edd9
   19d48:	00028638 	.word	0x00028638
   19d4c:	00028618 	.word	0x00028618
   19d50:	0002edad 	.word	0x0002edad
   19d54:	00017f45 	.word	0x00017f45

00019d58 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   19d58:	4b10      	ldr	r3, [pc, #64]	; (19d9c <get_io_capa+0x44>)
   19d5a:	681b      	ldr	r3, [r3, #0]
   19d5c:	b1bb      	cbz	r3, 19d8e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   19d5e:	681a      	ldr	r2, [r3, #0]
   19d60:	b142      	cbz	r2, 19d74 <get_io_capa+0x1c>
   19d62:	6859      	ldr	r1, [r3, #4]
   19d64:	b131      	cbz	r1, 19d74 <get_io_capa+0x1c>
   19d66:	6899      	ldr	r1, [r3, #8]
   19d68:	b911      	cbnz	r1, 19d70 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   19d6a:	490d      	ldr	r1, [pc, #52]	; (19da0 <get_io_capa+0x48>)
   19d6c:	7809      	ldrb	r1, [r1, #0]
   19d6e:	b939      	cbnz	r1, 19d80 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   19d70:	2004      	movs	r0, #4
   19d72:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   19d74:	490a      	ldr	r1, [pc, #40]	; (19da0 <get_io_capa+0x48>)
   19d76:	7809      	ldrb	r1, [r1, #0]
   19d78:	b111      	cbz	r1, 19d80 <get_io_capa+0x28>
   19d7a:	b10a      	cbz	r2, 19d80 <get_io_capa+0x28>
   19d7c:	6899      	ldr	r1, [r3, #8]
   19d7e:	b941      	cbnz	r1, 19d92 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   19d80:	685b      	ldr	r3, [r3, #4]
   19d82:	b943      	cbnz	r3, 19d96 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   19d84:	2a00      	cmp	r2, #0
   19d86:	bf0c      	ite	eq
   19d88:	2003      	moveq	r0, #3
   19d8a:	2000      	movne	r0, #0
   19d8c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   19d8e:	2003      	movs	r0, #3
   19d90:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   19d92:	2001      	movs	r0, #1
   19d94:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   19d96:	2002      	movs	r0, #2
	}
}
   19d98:	4770      	bx	lr
   19d9a:	bf00      	nop
   19d9c:	20002194 	.word	0x20002194
   19da0:	20002675 	.word	0x20002675

00019da4 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19da4:	4288      	cmp	r0, r1
{
   19da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19da8:	4604      	mov	r4, r0
   19daa:	460d      	mov	r5, r1
   19dac:	4616      	mov	r6, r2
   19dae:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19db2:	d91a      	bls.n	19dea <sys_memcpy_swap+0x46>
   19db4:	188b      	adds	r3, r1, r2
   19db6:	4298      	cmp	r0, r3
   19db8:	d20e      	bcs.n	19dd8 <sys_memcpy_swap+0x34>
   19dba:	490d      	ldr	r1, [pc, #52]	; (19df0 <sys_memcpy_swap+0x4c>)
   19dbc:	4a0d      	ldr	r2, [pc, #52]	; (19df4 <sys_memcpy_swap+0x50>)
   19dbe:	480e      	ldr	r0, [pc, #56]	; (19df8 <sys_memcpy_swap+0x54>)
   19dc0:	f240 2317 	movw	r3, #535	; 0x217
   19dc4:	f00a fc98 	bl	246f8 <printk>
   19dc8:	480c      	ldr	r0, [pc, #48]	; (19dfc <sys_memcpy_swap+0x58>)
   19dca:	f00a fc95 	bl	246f8 <printk>
   19dce:	4809      	ldr	r0, [pc, #36]	; (19df4 <sys_memcpy_swap+0x50>)
   19dd0:	f240 2117 	movw	r1, #535	; 0x217
   19dd4:	f00a fe81 	bl	24ada <assert_post_action>
	psrc += length - 1;
   19dd8:	3e01      	subs	r6, #1
   19dda:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   19ddc:	f815 3901 	ldrb.w	r3, [r5], #-1
   19de0:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   19de4:	42bc      	cmp	r4, r7
   19de6:	d1f9      	bne.n	19ddc <sys_memcpy_swap+0x38>
}
   19de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19dea:	d0e6      	beq.n	19dba <sys_memcpy_swap+0x16>
   19dec:	42b9      	cmp	r1, r7
   19dee:	e7e3      	b.n	19db8 <sys_memcpy_swap+0x14>
   19df0:	0002ee15 	.word	0x0002ee15
   19df4:	0002edea 	.word	0x0002edea
   19df8:	000290f5 	.word	0x000290f5
   19dfc:	0002ee6c 	.word	0x0002ee6c

00019e00 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   19e00:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   19e02:	2106      	movs	r1, #6
   19e04:	f00c f8d6 	bl	25fb4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19e08:	4604      	mov	r4, r0
   19e0a:	b958      	cbnz	r0, 19e24 <smp_chan_get+0x24>
   19e0c:	4907      	ldr	r1, [pc, #28]	; (19e2c <smp_chan_get+0x2c>)
   19e0e:	4b08      	ldr	r3, [pc, #32]	; (19e30 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   19e10:	4808      	ldr	r0, [pc, #32]	; (19e34 <smp_chan_get+0x34>)
   19e12:	1ac9      	subs	r1, r1, r3
   19e14:	08c9      	lsrs	r1, r1, #3
   19e16:	0189      	lsls	r1, r1, #6
   19e18:	f041 0101 	orr.w	r1, r1, #1
   19e1c:	f00a fe8b 	bl	24b36 <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
   19e20:	4620      	mov	r0, r4
   19e22:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   19e24:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   19e28:	e7fa      	b.n	19e20 <smp_chan_get+0x20>
   19e2a:	bf00      	nop
   19e2c:	00028688 	.word	0x00028688
   19e30:	00028618 	.word	0x00028618
   19e34:	0002ee9e 	.word	0x0002ee9e

00019e38 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   19e38:	4b0c      	ldr	r3, [pc, #48]	; (19e6c <bt_smp_accept+0x34>)
{
   19e3a:	b510      	push	{r4, lr}
   19e3c:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   19e3e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   19e42:	b928      	cbnz	r0, 19e50 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   19e44:	4a0a      	ldr	r2, [pc, #40]	; (19e70 <bt_smp_accept+0x38>)
   19e46:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   19e4a:	33f0      	adds	r3, #240	; 0xf0
   19e4c:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   19e4e:	bd10      	pop	{r4, pc}
   19e50:	4b08      	ldr	r3, [pc, #32]	; (19e74 <bt_smp_accept+0x3c>)
   19e52:	4a09      	ldr	r2, [pc, #36]	; (19e78 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   19e54:	4809      	ldr	r0, [pc, #36]	; (19e7c <bt_smp_accept+0x44>)
   19e56:	1ad2      	subs	r2, r2, r3
   19e58:	08d2      	lsrs	r2, r2, #3
   19e5a:	0192      	lsls	r2, r2, #6
   19e5c:	f042 0201 	orr.w	r2, r2, #1
   19e60:	4621      	mov	r1, r4
   19e62:	f00a fe75 	bl	24b50 <log_1>
	return -ENOMEM;
   19e66:	f06f 000b 	mvn.w	r0, #11
   19e6a:	e7f0      	b.n	19e4e <bt_smp_accept+0x16>
   19e6c:	20001910 	.word	0x20001910
   19e70:	00028c48 	.word	0x00028c48
   19e74:	00028618 	.word	0x00028618
   19e78:	00028688 	.word	0x00028688
   19e7c:	0002eeb9 	.word	0x0002eeb9

00019e80 <smp_find>:
{
   19e80:	4601      	mov	r1, r0
   19e82:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19e84:	4803      	ldr	r0, [pc, #12]	; (19e94 <smp_find+0x14>)
   19e86:	f00d f945 	bl	27114 <atomic_test_bit>
   19e8a:	2800      	cmp	r0, #0
}
   19e8c:	4802      	ldr	r0, [pc, #8]	; (19e98 <smp_find+0x18>)
   19e8e:	bf08      	it	eq
   19e90:	2000      	moveq	r0, #0
   19e92:	bd08      	pop	{r3, pc}
   19e94:	20001914 	.word	0x20001914
   19e98:	20001910 	.word	0x20001910

00019e9c <sc_send_public_key>:
{
   19e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   19e9e:	210c      	movs	r1, #12
{
   19ea0:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   19ea2:	f00d f98d 	bl	271c0 <smp_create_pdu.isra.0>
	if (!req_buf) {
   19ea6:	4604      	mov	r4, r0
   19ea8:	b1b0      	cbz	r0, 19ed8 <sc_send_public_key+0x3c>
   19eaa:	2140      	movs	r1, #64	; 0x40
   19eac:	3008      	adds	r0, #8
   19eae:	f002 f86b 	bl	1bf88 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   19eb2:	4f0a      	ldr	r7, [pc, #40]	; (19edc <sc_send_public_key+0x40>)
   19eb4:	2220      	movs	r2, #32
   19eb6:	6839      	ldr	r1, [r7, #0]
   19eb8:	4606      	mov	r6, r0
   19eba:	f00b fd53 	bl	25964 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   19ebe:	6839      	ldr	r1, [r7, #0]
   19ec0:	2220      	movs	r2, #32
   19ec2:	4411      	add	r1, r2
   19ec4:	18b0      	adds	r0, r6, r2
   19ec6:	f00b fd4d 	bl	25964 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   19eca:	4628      	mov	r0, r5
   19ecc:	2200      	movs	r2, #0
   19ece:	4621      	mov	r1, r4
   19ed0:	f00d f882 	bl	26fd8 <smp_send.isra.0>
	return 0;
   19ed4:	2000      	movs	r0, #0
}
   19ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   19ed8:	2008      	movs	r0, #8
   19eda:	e7fc      	b.n	19ed6 <sc_send_public_key+0x3a>
   19edc:	20002250 	.word	0x20002250

00019ee0 <bt_smp_distribute_keys>:
{
   19ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19ee4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19ee6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (!keys) {
   19eea:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
{
   19eee:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
   19ef0:	b9a3      	cbnz	r3, 19f1c <bt_smp_distribute_keys+0x3c>
   19ef2:	4a4e      	ldr	r2, [pc, #312]	; (1a02c <bt_smp_distribute_keys+0x14c>)
   19ef4:	4c4e      	ldr	r4, [pc, #312]	; (1a030 <bt_smp_distribute_keys+0x150>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19ef6:	3090      	adds	r0, #144	; 0x90
   19ef8:	1aa4      	subs	r4, r4, r2
   19efa:	f7fa fbd1 	bl	146a0 <bt_addr_le_str_real>
   19efe:	f7f7 ff39 	bl	11d74 <z_log_strdup>
   19f02:	08e4      	lsrs	r4, r4, #3
   19f04:	01a4      	lsls	r4, r4, #6
   19f06:	f044 0401 	orr.w	r4, r4, #1
   19f0a:	4601      	mov	r1, r0
   19f0c:	4622      	mov	r2, r4
   19f0e:	4849      	ldr	r0, [pc, #292]	; (1a034 <bt_smp_distribute_keys+0x154>)
   19f10:	f00a fe1e 	bl	24b50 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   19f14:	2008      	movs	r0, #8
}
   19f16:	b009      	add	sp, #36	; 0x24
   19f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19f1c:	1d27      	adds	r7, r4, #4
   19f1e:	2105      	movs	r1, #5
   19f20:	4638      	mov	r0, r7
   19f22:	f00d f8f7 	bl	27114 <atomic_test_bit>
   19f26:	b9c0      	cbnz	r0, 19f5a <bt_smp_distribute_keys+0x7a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   19f28:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   19f2c:	f010 0001 	ands.w	r0, r0, #1
   19f30:	d0f1      	beq.n	19f16 <bt_smp_distribute_keys+0x36>
	struct bt_keys *keys = conn->le.keys;
   19f32:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19f36:	211a      	movs	r1, #26
   19f38:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   19f3a:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19f3e:	f005 f825 	bl	1ef8c <bt_rand>
   19f42:	4680      	mov	r8, r0
   19f44:	b158      	cbz	r0, 19f5e <bt_smp_distribute_keys+0x7e>
   19f46:	493a      	ldr	r1, [pc, #232]	; (1a030 <bt_smp_distribute_keys+0x150>)
   19f48:	4b38      	ldr	r3, [pc, #224]	; (1a02c <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to get random bytes");
   19f4a:	483b      	ldr	r0, [pc, #236]	; (1a038 <bt_smp_distribute_keys+0x158>)
   19f4c:	1ac9      	subs	r1, r1, r3
   19f4e:	08c9      	lsrs	r1, r1, #3
   19f50:	0189      	lsls	r1, r1, #6
   19f52:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Central Ident buffer");
   19f56:	f00a fdee 	bl	24b36 <log_0>
	return 0;
   19f5a:	2000      	movs	r0, #0
   19f5c:	e7db      	b.n	19f16 <bt_smp_distribute_keys+0x36>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   19f5e:	2106      	movs	r1, #6
   19f60:	4620      	mov	r0, r4
   19f62:	f00d f92d 	bl	271c0 <smp_create_pdu.isra.0>
		if (!buf) {
   19f66:	4606      	mov	r6, r0
   19f68:	b940      	cbnz	r0, 19f7c <bt_smp_distribute_keys+0x9c>
   19f6a:	4931      	ldr	r1, [pc, #196]	; (1a030 <bt_smp_distribute_keys+0x150>)
   19f6c:	4b2f      	ldr	r3, [pc, #188]	; (1a02c <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   19f6e:	4833      	ldr	r0, [pc, #204]	; (1a03c <bt_smp_distribute_keys+0x15c>)
   19f70:	1ac9      	subs	r1, r1, r3
   19f72:	08c9      	lsrs	r1, r1, #3
   19f74:	0189      	lsls	r1, r1, #6
   19f76:	f041 0101 	orr.w	r1, r1, #1
   19f7a:	e7ec      	b.n	19f56 <bt_smp_distribute_keys+0x76>
   19f7c:	2110      	movs	r1, #16
   19f7e:	3008      	adds	r0, #8
   19f80:	f002 f802 	bl	1bf88 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   19f84:	7b2a      	ldrb	r2, [r5, #12]
   19f86:	a901      	add	r1, sp, #4
   19f88:	4681      	mov	r9, r0
   19f8a:	f00b fceb 	bl	25964 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   19f8e:	7b28      	ldrb	r0, [r5, #12]
   19f90:	280f      	cmp	r0, #15
   19f92:	d805      	bhi.n	19fa0 <bt_smp_distribute_keys+0xc0>
			(void)memset(info->ltk + keys->enc_size, 0,
   19f94:	f1c0 0210 	rsb	r2, r0, #16
   19f98:	4641      	mov	r1, r8
   19f9a:	4448      	add	r0, r9
   19f9c:	f00b fced 	bl	2597a <memset>
		smp_send(smp, buf, NULL, NULL);
   19fa0:	4631      	mov	r1, r6
   19fa2:	2200      	movs	r2, #0
   19fa4:	4620      	mov	r0, r4
   19fa6:	f00d f817 	bl	26fd8 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   19faa:	2107      	movs	r1, #7
   19fac:	4620      	mov	r0, r4
   19fae:	f00d f907 	bl	271c0 <smp_create_pdu.isra.0>
		if (!buf) {
   19fb2:	4606      	mov	r6, r0
   19fb4:	b940      	cbnz	r0, 19fc8 <bt_smp_distribute_keys+0xe8>
   19fb6:	491e      	ldr	r1, [pc, #120]	; (1a030 <bt_smp_distribute_keys+0x150>)
   19fb8:	4b1c      	ldr	r3, [pc, #112]	; (1a02c <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to allocate Central Ident buffer");
   19fba:	4821      	ldr	r0, [pc, #132]	; (1a040 <bt_smp_distribute_keys+0x160>)
   19fbc:	1ac9      	subs	r1, r1, r3
   19fbe:	08c9      	lsrs	r1, r1, #3
   19fc0:	0189      	lsls	r1, r1, #6
   19fc2:	f041 0101 	orr.w	r1, r1, #1
   19fc6:	e7c6      	b.n	19f56 <bt_smp_distribute_keys+0x76>
   19fc8:	210a      	movs	r1, #10
   19fca:	3008      	adds	r0, #8
   19fcc:	f001 ffdc 	bl	1bf88 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   19fd0:	2208      	movs	r2, #8
   19fd2:	4680      	mov	r8, r0
   19fd4:	a905      	add	r1, sp, #20
   19fd6:	3002      	adds	r0, #2
   19fd8:	f00b fcc4 	bl	25964 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   19fdc:	2202      	movs	r2, #2
   19fde:	a907      	add	r1, sp, #28
   19fe0:	4640      	mov	r0, r8
   19fe2:	f00b fcbf 	bl	25964 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   19fe6:	4631      	mov	r1, r6
   19fe8:	4620      	mov	r0, r4
   19fea:	4a16      	ldr	r2, [pc, #88]	; (1a044 <bt_smp_distribute_keys+0x164>)
   19fec:	f00c fff4 	bl	26fd8 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19ff0:	210d      	movs	r1, #13
   19ff2:	4638      	mov	r0, r7
   19ff4:	f00d f88e 	bl	27114 <atomic_test_bit>
   19ff8:	2800      	cmp	r0, #0
   19ffa:	d0ae      	beq.n	19f5a <bt_smp_distribute_keys+0x7a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   19ffc:	4628      	mov	r0, r5
   19ffe:	2101      	movs	r1, #1
   1a000:	f00d fb23 	bl	2764a <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1a004:	a901      	add	r1, sp, #4
   1a006:	2210      	movs	r2, #16
   1a008:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1a00c:	f00b fcaa 	bl	25964 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1a010:	a905      	add	r1, sp, #20
   1a012:	2208      	movs	r2, #8
   1a014:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1a018:	f00b fca4 	bl	25964 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1a01c:	2202      	movs	r2, #2
   1a01e:	a907      	add	r1, sp, #28
   1a020:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1a024:	f00b fc9e 	bl	25964 <memcpy>
   1a028:	e797      	b.n	19f5a <bt_smp_distribute_keys+0x7a>
   1a02a:	bf00      	nop
   1a02c:	00028618 	.word	0x00028618
   1a030:	00028688 	.word	0x00028688
   1a034:	0002eede 	.word	0x0002eede
   1a038:	0002eef3 	.word	0x0002eef3
   1a03c:	0002ef0e 	.word	0x0002ef0e
   1a040:	0002ef35 	.word	0x0002ef35
   1a044:	0001b5bd 	.word	0x0001b5bd

0001a048 <compute_and_send_central_dhcheck>:
{
   1a048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(r, 0, sizeof(r));
   1a04c:	2210      	movs	r2, #16
{
   1a04e:	b0a2      	sub	sp, #136	; 0x88
   1a050:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1a052:	2100      	movs	r1, #0
   1a054:	eb0d 0002 	add.w	r0, sp, r2
   1a058:	f00b fc8f 	bl	2597a <memset>
	switch (smp->method) {
   1a05c:	7a21      	ldrb	r1, [r4, #8]
   1a05e:	2905      	cmp	r1, #5
   1a060:	f200 8097 	bhi.w	1a192 <compute_and_send_central_dhcheck+0x14a>
   1a064:	e8df f001 	tbb	[pc, r1]
   1a068:	09030309 	.word	0x09030309
   1a06c:	8c95      	.short	0x8c95
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1a06e:	2204      	movs	r2, #4
   1a070:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1a074:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a076:	f00b fc75 	bl	25964 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1a07a:	4b5e      	ldr	r3, [pc, #376]	; (1a1f4 <compute_and_send_central_dhcheck+0x1ac>)
		   &smp->chan.chan.conn->le.init_addr,
   1a07c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1a080:	aa14      	add	r2, sp, #80	; 0x50
   1a082:	f103 0730 	add.w	r7, r3, #48	; 0x30
   1a086:	6818      	ldr	r0, [r3, #0]
   1a088:	6859      	ldr	r1, [r3, #4]
   1a08a:	4616      	mov	r6, r2
   1a08c:	c603      	stmia	r6!, {r0, r1}
   1a08e:	3308      	adds	r3, #8
   1a090:	42bb      	cmp	r3, r7
   1a092:	4632      	mov	r2, r6
   1a094:	d1f7      	bne.n	1a086 <compute_and_send_central_dhcheck+0x3e>
   1a096:	6818      	ldr	r0, [r3, #0]
   1a098:	791b      	ldrb	r3, [r3, #4]
   1a09a:	6030      	str	r0, [r6, #0]
   1a09c:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   1a09e:	2220      	movs	r2, #32
   1a0a0:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1a0a4:	a80c      	add	r0, sp, #48	; 0x30
   1a0a6:	f7ff fe7d 	bl	19da4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1a0aa:	4853      	ldr	r0, [pc, #332]	; (1a1f8 <compute_and_send_central_dhcheck+0x1b0>)
   1a0ac:	ab08      	add	r3, sp, #32
   1a0ae:	2220      	movs	r2, #32
   1a0b0:	a90c      	add	r1, sp, #48	; 0x30
   1a0b2:	f00c ff75 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	f040 8092 	bne.w	1a1e0 <compute_and_send_central_dhcheck+0x198>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1a0bc:	f104 0727 	add.w	r7, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1a0c0:	2210      	movs	r2, #16
   1a0c2:	4639      	mov	r1, r7
   1a0c4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1a0c8:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1a0cc:	f7ff fe6a 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a0d0:	2210      	movs	r2, #16
   1a0d2:	4641      	mov	r1, r8
   1a0d4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1a0d8:	f7ff fe64 	bl	19da4 <sys_memcpy_swap>
	m[37] = a1->type;
   1a0dc:	f895 3097 	ldrb.w	r3, [r5, #151]	; 0x97
   1a0e0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a0e4:	2206      	movs	r2, #6
   1a0e6:	f105 0198 	add.w	r1, r5, #152	; 0x98
   1a0ea:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1a0ee:	f7ff fe59 	bl	19da4 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1a0f2:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1a0f6:	f895 309e 	ldrb.w	r3, [r5, #158]	; 0x9e
   1a0fa:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a0fe:	2206      	movs	r2, #6
   1a100:	f105 019f 	add.w	r1, r5, #159	; 0x9f
   1a104:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1a108:	f7ff fe4c 	bl	19da4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1a10c:	4633      	mov	r3, r6
   1a10e:	2235      	movs	r2, #53	; 0x35
   1a110:	a914      	add	r1, sp, #80	; 0x50
   1a112:	a808      	add	r0, sp, #32
   1a114:	f00c ff44 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   1a118:	2800      	cmp	r0, #0
   1a11a:	d161      	bne.n	1a1e0 <compute_and_send_central_dhcheck+0x198>
	sys_mem_swap(mackey, 16);
   1a11c:	4630      	mov	r0, r6
   1a11e:	f00c ff78 	bl	27012 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1a122:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
   1a126:	2301      	movs	r3, #1
   1a128:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1a12c:	2235      	movs	r2, #53	; 0x35
   1a12e:	462b      	mov	r3, r5
   1a130:	a914      	add	r1, sp, #80	; 0x50
   1a132:	a808      	add	r0, sp, #32
   1a134:	f00c ff34 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   1a138:	2800      	cmp	r0, #0
   1a13a:	d151      	bne.n	1a1e0 <compute_and_send_central_dhcheck+0x198>
	sys_mem_swap(ltk, 16);
   1a13c:	4628      	mov	r0, r5
   1a13e:	f00c ff68 	bl	27012 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
   1a142:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1a146:	aa14      	add	r2, sp, #80	; 0x50
   1a148:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   1a14a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1a14e:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1a150:	9301      	str	r3, [sp, #4]
   1a152:	f104 030a 	add.w	r3, r4, #10
   1a156:	9202      	str	r2, [sp, #8]
   1a158:	9300      	str	r3, [sp, #0]
   1a15a:	4642      	mov	r2, r8
   1a15c:	ab04      	add	r3, sp, #16
   1a15e:	4639      	mov	r1, r7
   1a160:	4630      	mov	r0, r6
   1a162:	f00c ff64 	bl	2702e <smp_f6>
   1a166:	4605      	mov	r5, r0
   1a168:	b1f8      	cbz	r0, 1a1aa <compute_and_send_central_dhcheck+0x162>
   1a16a:	4924      	ldr	r1, [pc, #144]	; (1a1fc <compute_and_send_central_dhcheck+0x1b4>)
   1a16c:	4b24      	ldr	r3, [pc, #144]	; (1a200 <compute_and_send_central_dhcheck+0x1b8>)
		BT_ERR("Calculate local DHKey check failed");
   1a16e:	4825      	ldr	r0, [pc, #148]	; (1a204 <compute_and_send_central_dhcheck+0x1bc>)
   1a170:	1ac9      	subs	r1, r1, r3
   1a172:	08c9      	lsrs	r1, r1, #3
   1a174:	0189      	lsls	r1, r1, #6
   1a176:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1a17a:	f00a fcdc 	bl	24b36 <log_0>
   1a17e:	e012      	b.n	1a1a6 <compute_and_send_central_dhcheck+0x15e>
		if (smp->oobd_remote) {
   1a180:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1a184:	2900      	cmp	r1, #0
   1a186:	f43f af78 	beq.w	1a07a <compute_and_send_central_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a18a:	2210      	movs	r2, #16
   1a18c:	eb0d 0002 	add.w	r0, sp, r2
   1a190:	e771      	b.n	1a076 <compute_and_send_central_dhcheck+0x2e>
   1a192:	4a1a      	ldr	r2, [pc, #104]	; (1a1fc <compute_and_send_central_dhcheck+0x1b4>)
   1a194:	4b1a      	ldr	r3, [pc, #104]	; (1a200 <compute_and_send_central_dhcheck+0x1b8>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a196:	481c      	ldr	r0, [pc, #112]	; (1a208 <compute_and_send_central_dhcheck+0x1c0>)
   1a198:	1ad2      	subs	r2, r2, r3
   1a19a:	08d2      	lsrs	r2, r2, #3
   1a19c:	0192      	lsls	r2, r2, #6
   1a19e:	f042 0201 	orr.w	r2, r2, #1
   1a1a2:	f00a fcd5 	bl	24b50 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1a1a6:	2008      	movs	r0, #8
   1a1a8:	e017      	b.n	1a1da <compute_and_send_central_dhcheck+0x192>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1a1aa:	210d      	movs	r1, #13
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	f00c fff3 	bl	27198 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1a1b2:	210d      	movs	r1, #13
   1a1b4:	f00d f804 	bl	271c0 <smp_create_pdu.isra.0>
	if (!buf) {
   1a1b8:	4606      	mov	r6, r0
   1a1ba:	2800      	cmp	r0, #0
   1a1bc:	d0f3      	beq.n	1a1a6 <compute_and_send_central_dhcheck+0x15e>
   1a1be:	2110      	movs	r1, #16
   1a1c0:	3008      	adds	r0, #8
   1a1c2:	f001 fee1 	bl	1bf88 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1a1c6:	2210      	movs	r2, #16
   1a1c8:	a914      	add	r1, sp, #80	; 0x50
   1a1ca:	f00b fbcb 	bl	25964 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1a1ce:	4620      	mov	r0, r4
   1a1d0:	462a      	mov	r2, r5
   1a1d2:	4631      	mov	r1, r6
   1a1d4:	f00c ff00 	bl	26fd8 <smp_send.isra.0>
	return 0;
   1a1d8:	4628      	mov	r0, r5
}
   1a1da:	b022      	add	sp, #136	; 0x88
   1a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1e0:	4906      	ldr	r1, [pc, #24]	; (1a1fc <compute_and_send_central_dhcheck+0x1b4>)
   1a1e2:	4b07      	ldr	r3, [pc, #28]	; (1a200 <compute_and_send_central_dhcheck+0x1b8>)
		BT_ERR("Calculate LTK failed");
   1a1e4:	4809      	ldr	r0, [pc, #36]	; (1a20c <compute_and_send_central_dhcheck+0x1c4>)
   1a1e6:	1ac9      	subs	r1, r1, r3
   1a1e8:	08c9      	lsrs	r1, r1, #3
   1a1ea:	0189      	lsls	r1, r1, #6
   1a1ec:	f041 0101 	orr.w	r1, r1, #1
   1a1f0:	e7c3      	b.n	1a17a <compute_and_send_central_dhcheck+0x132>
   1a1f2:	bf00      	nop
   1a1f4:	0002883c 	.word	0x0002883c
   1a1f8:	0002f25e 	.word	0x0002f25e
   1a1fc:	00028688 	.word	0x00028688
   1a200:	00028618 	.word	0x00028618
   1a204:	0002ef79 	.word	0x0002ef79
   1a208:	0002ef5d 	.word	0x0002ef5d
   1a20c:	0002ef9c 	.word	0x0002ef9c

0001a210 <smp_dhkey_check>:
{
   1a210:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a212:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1a216:	78dd      	ldrb	r5, [r3, #3]
{
   1a218:	b091      	sub	sp, #68	; 0x44
   1a21a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a21c:	2d00      	cmp	r5, #0
   1a21e:	d173      	bne.n	1a308 <smp_dhkey_check+0xf8>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1a220:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   1a222:	2210      	movs	r2, #16
   1a224:	4629      	mov	r1, r5
   1a226:	a80c      	add	r0, sp, #48	; 0x30
   1a228:	f00b fba7 	bl	2597a <memset>
		switch (smp->method) {
   1a22c:	7a21      	ldrb	r1, [r4, #8]
   1a22e:	2905      	cmp	r1, #5
   1a230:	d855      	bhi.n	1a2de <smp_dhkey_check+0xce>
   1a232:	e8df f001 	tbb	[pc, r1]
   1a236:	0309      	.short	0x0309
   1a238:	4e540903 	.word	0x4e540903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1a23c:	2204      	movs	r2, #4
   1a23e:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1a242:	a80c      	add	r0, sp, #48	; 0x30
   1a244:	f00b fb8e 	bl	25964 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   1a248:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   1a24c:	f103 0297 	add.w	r2, r3, #151	; 0x97
			   &smp->chan.chan.conn->le.resp_addr,
   1a250:	339e      	adds	r3, #158	; 0x9e
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1a252:	ae08      	add	r6, sp, #32
   1a254:	9301      	str	r3, [sp, #4]
   1a256:	f104 0311 	add.w	r3, r4, #17
   1a25a:	9202      	str	r2, [sp, #8]
   1a25c:	9300      	str	r3, [sp, #0]
   1a25e:	9603      	str	r6, [sp, #12]
   1a260:	ab0c      	add	r3, sp, #48	; 0x30
   1a262:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1a266:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1a26a:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1a26e:	f00c fede 	bl	2702e <smp_f6>
   1a272:	2800      	cmp	r0, #0
   1a274:	d13d      	bne.n	1a2f2 <smp_dhkey_check+0xe2>
		if (memcmp(e, req->e, 16)) {
   1a276:	4630      	mov	r0, r6
   1a278:	2210      	movs	r2, #16
   1a27a:	4639      	mov	r1, r7
   1a27c:	f00b fb62 	bl	25944 <memcmp>
   1a280:	4606      	mov	r6, r0
   1a282:	2800      	cmp	r0, #0
   1a284:	d13e      	bne.n	1a304 <smp_dhkey_check+0xf4>
	return MIN(req->max_key_size, rsp->max_key_size);
   1a286:	7b63      	ldrb	r3, [r4, #13]
   1a288:	7d27      	ldrb	r7, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
   1a28a:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1a28c:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1a28e:	f04f 0202 	mov.w	r2, #2
   1a292:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   1a294:	bf28      	it	cs
   1a296:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1a298:	f00b fb6f 	bl	2597a <memset>
		(void)memset(rand, 0, sizeof(rand));
   1a29c:	2208      	movs	r2, #8
   1a29e:	4631      	mov	r1, r6
   1a2a0:	a806      	add	r0, sp, #24
   1a2a2:	f00b fb6a 	bl	2597a <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1a2a6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a2aa:	9700      	str	r7, [sp, #0]
   1a2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1a2b0:	aa05      	add	r2, sp, #20
   1a2b2:	a906      	add	r1, sp, #24
   1a2b4:	f00b fd5c 	bl	25d70 <bt_conn_le_start_encryption>
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	da1c      	bge.n	1a2f6 <smp_dhkey_check+0xe6>
   1a2bc:	4b13      	ldr	r3, [pc, #76]	; (1a30c <smp_dhkey_check+0xfc>)
   1a2be:	4914      	ldr	r1, [pc, #80]	; (1a310 <smp_dhkey_check+0x100>)
			BT_ERR("Failed to start encryption");
   1a2c0:	4814      	ldr	r0, [pc, #80]	; (1a314 <smp_dhkey_check+0x104>)
   1a2c2:	1ac9      	subs	r1, r1, r3
   1a2c4:	08c9      	lsrs	r1, r1, #3
   1a2c6:	0189      	lsls	r1, r1, #6
   1a2c8:	f041 0101 	orr.w	r1, r1, #1
   1a2cc:	f00a fc33 	bl	24b36 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1a2d0:	e00f      	b.n	1a2f2 <smp_dhkey_check+0xe2>
			if (smp->oobd_local) {
   1a2d2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1a2d6:	2900      	cmp	r1, #0
   1a2d8:	d0b6      	beq.n	1a248 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1a2da:	2210      	movs	r2, #16
   1a2dc:	e7b1      	b.n	1a242 <smp_dhkey_check+0x32>
   1a2de:	4a0c      	ldr	r2, [pc, #48]	; (1a310 <smp_dhkey_check+0x100>)
   1a2e0:	4b0a      	ldr	r3, [pc, #40]	; (1a30c <smp_dhkey_check+0xfc>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1a2e2:	480d      	ldr	r0, [pc, #52]	; (1a318 <smp_dhkey_check+0x108>)
   1a2e4:	1ad2      	subs	r2, r2, r3
   1a2e6:	08d2      	lsrs	r2, r2, #3
   1a2e8:	0192      	lsls	r2, r2, #6
   1a2ea:	f042 0201 	orr.w	r2, r2, #1
   1a2ee:	f00a fc2f 	bl	24b50 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1a2f2:	2508      	movs	r5, #8
   1a2f4:	e003      	b.n	1a2fe <smp_dhkey_check+0xee>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a2f6:	2101      	movs	r1, #1
   1a2f8:	1d20      	adds	r0, r4, #4
   1a2fa:	f00c ff4d 	bl	27198 <atomic_set_bit>
}
   1a2fe:	4628      	mov	r0, r5
   1a300:	b011      	add	sp, #68	; 0x44
   1a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1a304:	250b      	movs	r5, #11
   1a306:	e7fa      	b.n	1a2fe <smp_dhkey_check+0xee>
	return 0;
   1a308:	2500      	movs	r5, #0
   1a30a:	e7f8      	b.n	1a2fe <smp_dhkey_check+0xee>
   1a30c:	00028618 	.word	0x00028618
   1a310:	00028688 	.word	0x00028688
   1a314:	0002efb1 	.word	0x0002efb1
   1a318:	0002ef5d 	.word	0x0002ef5d

0001a31c <smp_send_pairing_req>:
{
   1a31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a320:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1a322:	f7ff fd6d 	bl	19e00 <smp_chan_get>
	if (!smp) {
   1a326:	4604      	mov	r4, r0
   1a328:	2800      	cmp	r0, #0
   1a32a:	f000 80c0 	beq.w	1a4ae <smp_send_pairing_req+0x192>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1a32e:	1d06      	adds	r6, r0, #4
   1a330:	2104      	movs	r1, #4
   1a332:	4630      	mov	r0, r6
   1a334:	f00c feee 	bl	27114 <atomic_test_bit>
   1a338:	4603      	mov	r3, r0
   1a33a:	2800      	cmp	r0, #0
   1a33c:	f040 80ba 	bne.w	1a4b4 <smp_send_pairing_req+0x198>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a340:	2102      	movs	r1, #2
   1a342:	4630      	mov	r0, r6
   1a344:	f00c fee6 	bl	27114 <atomic_test_bit>
   1a348:	2800      	cmp	r0, #0
   1a34a:	f040 80b6 	bne.w	1a4ba <smp_send_pairing_req+0x19e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a34e:	2103      	movs	r1, #3
   1a350:	4630      	mov	r0, r6
   1a352:	f00c fedf 	bl	27114 <atomic_test_bit>
   1a356:	b120      	cbz	r0, 1a362 <smp_send_pairing_req+0x46>
		return -EBUSY;
   1a358:	f06f 050f 	mvn.w	r5, #15
}
   1a35c:	4628      	mov	r0, r5
   1a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a362:	2101      	movs	r1, #1
   1a364:	4630      	mov	r0, r6
   1a366:	f00c fed5 	bl	27114 <atomic_test_bit>
   1a36a:	2800      	cmp	r0, #0
   1a36c:	d1f4      	bne.n	1a358 <smp_send_pairing_req+0x3c>
	if (!sec_level_reachable(conn)) {
   1a36e:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1a370:	2b03      	cmp	r3, #3
   1a372:	d016      	beq.n	1a3a2 <smp_send_pairing_req+0x86>
   1a374:	d805      	bhi.n	1a382 <smp_send_pairing_req+0x66>
   1a376:	3b01      	subs	r3, #1
   1a378:	2b01      	cmp	r3, #1
   1a37a:	d920      	bls.n	1a3be <smp_send_pairing_req+0xa2>
		return -EINVAL;
   1a37c:	f06f 0515 	mvn.w	r5, #21
   1a380:	e7ec      	b.n	1a35c <smp_send_pairing_req+0x40>
	switch (conn->required_sec_level) {
   1a382:	2b04      	cmp	r3, #4
   1a384:	d1fa      	bne.n	1a37c <smp_send_pairing_req+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a386:	f7ff fce7 	bl	19d58 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1a38a:	2803      	cmp	r0, #3
   1a38c:	d104      	bne.n	1a398 <smp_send_pairing_req+0x7c>
   1a38e:	4b4c      	ldr	r3, [pc, #304]	; (1a4c0 <smp_send_pairing_req+0x1a4>)
   1a390:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a392:	b343      	cbz	r3, 1a3e6 <smp_send_pairing_req+0xca>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1a394:	68db      	ldr	r3, [r3, #12]
   1a396:	b10b      	cbz	r3, 1a39c <smp_send_pairing_req+0x80>
   1a398:	4b4a      	ldr	r3, [pc, #296]	; (1a4c4 <smp_send_pairing_req+0x1a8>)
   1a39a:	781b      	ldrb	r3, [r3, #0]
   1a39c:	f003 0301 	and.w	r3, r3, #1
   1a3a0:	e00b      	b.n	1a3ba <smp_send_pairing_req+0x9e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a3a2:	f7ff fcd9 	bl	19d58 <get_io_capa>
   1a3a6:	2803      	cmp	r0, #3
   1a3a8:	d11b      	bne.n	1a3e2 <smp_send_pairing_req+0xc6>
		       (bt_auth && bt_auth->oob_data_request);
   1a3aa:	4b45      	ldr	r3, [pc, #276]	; (1a4c0 <smp_send_pairing_req+0x1a4>)
   1a3ac:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a3ae:	2b00      	cmp	r3, #0
   1a3b0:	d0e4      	beq.n	1a37c <smp_send_pairing_req+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   1a3b2:	68db      	ldr	r3, [r3, #12]
   1a3b4:	3b00      	subs	r3, #0
   1a3b6:	bf18      	it	ne
   1a3b8:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
   1a3ba:	2b00      	cmp	r3, #0
   1a3bc:	d0de      	beq.n	1a37c <smp_send_pairing_req+0x60>
	if (!conn->le.keys) {
   1a3be:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1a3c2:	b193      	cbz	r3, 1a3ea <smp_send_pairing_req+0xce>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1a3c4:	22f0      	movs	r2, #240	; 0xf0
   1a3c6:	2100      	movs	r1, #0
   1a3c8:	4620      	mov	r0, r4
   1a3ca:	f00b fad6 	bl	2597a <memset>
	if (bt_rand(smp->prnd, 16)) {
   1a3ce:	2110      	movs	r1, #16
   1a3d0:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a3d4:	f004 fdda 	bl	1ef8c <bt_rand>
   1a3d8:	4605      	mov	r5, r0
   1a3da:	b190      	cbz	r0, 1a402 <smp_send_pairing_req+0xe6>
		return -ENOBUFS;
   1a3dc:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1a3e0:	e7bc      	b.n	1a35c <smp_send_pairing_req+0x40>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1a3e2:	2301      	movs	r3, #1
   1a3e4:	e7e9      	b.n	1a3ba <smp_send_pairing_req+0x9e>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1a3e6:	2300      	movs	r3, #0
   1a3e8:	e7d8      	b.n	1a39c <smp_send_pairing_req+0x80>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a3ea:	7a28      	ldrb	r0, [r5, #8]
   1a3ec:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1a3f0:	f001 f92a 	bl	1b648 <bt_keys_get_addr>
   1a3f4:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1a3f8:	2800      	cmp	r0, #0
   1a3fa:	d1e3      	bne.n	1a3c4 <smp_send_pairing_req+0xa8>
			return -ENOMEM;
   1a3fc:	f06f 050b 	mvn.w	r5, #11
   1a400:	e7ac      	b.n	1a35c <smp_send_pairing_req+0x40>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1a402:	2105      	movs	r1, #5
   1a404:	4620      	mov	r0, r4
   1a406:	f00c fec7 	bl	27198 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1a40a:	f7fb fc0b 	bl	15c24 <bt_pub_key_get>
   1a40e:	4b2e      	ldr	r3, [pc, #184]	; (1a4c8 <smp_send_pairing_req+0x1ac>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1a410:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1a412:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1a414:	4620      	mov	r0, r4
   1a416:	f00c fed3 	bl	271c0 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1a41a:	4681      	mov	r9, r0
   1a41c:	2800      	cmp	r0, #0
   1a41e:	d0dd      	beq.n	1a3dc <smp_send_pairing_req+0xc0>
   1a420:	2106      	movs	r1, #6
   1a422:	3008      	adds	r0, #8
   1a424:	f001 fdb0 	bl	1bf88 <net_buf_simple_add>
	if (sc_supported) {
   1a428:	4b26      	ldr	r3, [pc, #152]	; (1a4c4 <smp_send_pairing_req+0x1a8>)
   1a42a:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
   1a42c:	2b00      	cmp	r3, #0
   1a42e:	bf14      	ite	ne
   1a430:	f04f 0809 	movne.w	r8, #9
   1a434:	f04f 0801 	moveq.w	r8, #1
   1a438:	4607      	mov	r7, r0
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a43a:	f7ff fc8d 	bl	19d58 <get_io_capa>
	if (bondable) {
   1a43e:	4b23      	ldr	r3, [pc, #140]	; (1a4cc <smp_send_pairing_req+0x1b0>)
   1a440:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a442:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1a444:	bf18      	it	ne
   1a446:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
   1a44a:	b36b      	cbz	r3, 1a4a8 <smp_send_pairing_req+0x18c>
		auth |= BT_SMP_AUTH_BONDING;
   1a44c:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1a450:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
   1a454:	f7ff fc80 	bl	19d58 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1a458:	4b1d      	ldr	r3, [pc, #116]	; (1a4d0 <smp_send_pairing_req+0x1b4>)
	req->io_capability = get_io_capa();
   1a45a:	7038      	strb	r0, [r7, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1a45c:	781b      	ldrb	r3, [r3, #0]
   1a45e:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1a460:	2310      	movs	r3, #16
   1a462:	70fb      	strb	r3, [r7, #3]
	req->resp_key_dist = RECV_KEYS;
   1a464:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
   1a468:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   1a46a:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   1a46e:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
   1a470:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a474:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1a476:	7263      	strb	r3, [r4, #9]
	smp->local_dist = SEND_KEYS;
   1a478:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a47c:	f104 000a 	add.w	r0, r4, #10
   1a480:	2206      	movs	r2, #6
   1a482:	f00b fa6f 	bl	25964 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1a486:	2200      	movs	r2, #0
   1a488:	4649      	mov	r1, r9
   1a48a:	4620      	mov	r0, r4
   1a48c:	f00c fda4 	bl	26fd8 <smp_send.isra.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1a490:	4620      	mov	r0, r4
   1a492:	2102      	movs	r1, #2
   1a494:	f00c fe80 	bl	27198 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1a498:	210b      	movs	r1, #11
   1a49a:	f00c fe7d 	bl	27198 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1a49e:	4641      	mov	r1, r8
   1a4a0:	4630      	mov	r0, r6
   1a4a2:	f00c fe79 	bl	27198 <atomic_set_bit>
	return 0;
   1a4a6:	e759      	b.n	1a35c <smp_send_pairing_req+0x40>
		auth &= ~BT_SMP_AUTH_BONDING;
   1a4a8:	f008 080c 	and.w	r8, r8, #12
   1a4ac:	e7d0      	b.n	1a450 <smp_send_pairing_req+0x134>
		return -ENOTCONN;
   1a4ae:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1a4b2:	e753      	b.n	1a35c <smp_send_pairing_req+0x40>
		return -EIO;
   1a4b4:	f06f 0504 	mvn.w	r5, #4
   1a4b8:	e750      	b.n	1a35c <smp_send_pairing_req+0x40>
		return 0;
   1a4ba:	461d      	mov	r5, r3
   1a4bc:	e74e      	b.n	1a35c <smp_send_pairing_req+0x40>
   1a4be:	bf00      	nop
   1a4c0:	20002194 	.word	0x20002194
   1a4c4:	20002675 	.word	0x20002675
   1a4c8:	20002250 	.word	0x20002250
   1a4cc:	20000600 	.word	0x20000600
   1a4d0:	20002674 	.word	0x20002674

0001a4d4 <smp_security_request>:
{
   1a4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a4d6:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1a4d8:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   1a4dc:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1a4de:	4620      	mov	r0, r4
   1a4e0:	2102      	movs	r1, #2
   1a4e2:	f00c fe17 	bl	27114 <atomic_test_bit>
   1a4e6:	b110      	cbz	r0, 1a4ee <smp_security_request+0x1a>
	return 0;
   1a4e8:	2000      	movs	r0, #0
}
   1a4ea:	b003      	add	sp, #12
   1a4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a4ee:	2103      	movs	r1, #3
   1a4f0:	4620      	mov	r0, r4
   1a4f2:	f00c fe0f 	bl	27114 <atomic_test_bit>
   1a4f6:	2800      	cmp	r0, #0
   1a4f8:	d1f6      	bne.n	1a4e8 <smp_security_request+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1a4fa:	2101      	movs	r1, #1
   1a4fc:	4620      	mov	r0, r4
   1a4fe:	f00c fe09 	bl	27114 <atomic_test_bit>
   1a502:	2800      	cmp	r0, #0
   1a504:	d1f0      	bne.n	1a4e8 <smp_security_request+0x14>
	if (sc_supported) {
   1a506:	781e      	ldrb	r6, [r3, #0]
   1a508:	4b36      	ldr	r3, [pc, #216]	; (1a5e4 <smp_security_request+0x110>)
   1a50a:	781b      	ldrb	r3, [r3, #0]
   1a50c:	b17b      	cbz	r3, 1a52e <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1a50e:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
   1a512:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1a516:	b16b      	cbz	r3, 1a534 <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1a518:	89db      	ldrh	r3, [r3, #14]
   1a51a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1a51e:	b9d3      	cbnz	r3, 1a556 <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   1a520:	4628      	mov	r0, r5
   1a522:	f7ff fefb 	bl	1a31c <smp_send_pairing_req>
   1a526:	2800      	cmp	r0, #0
   1a528:	db55      	blt.n	1a5d6 <smp_security_request+0x102>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1a52a:	210f      	movs	r1, #15
   1a52c:	e056      	b.n	1a5dc <smp_security_request+0x108>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1a52e:	f006 0607 	and.w	r6, r6, #7
   1a532:	e7ee      	b.n	1a512 <smp_security_request+0x3e>
					     &conn->le.dst);
   1a534:	f105 0790 	add.w	r7, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1a538:	7a29      	ldrb	r1, [r5, #8]
   1a53a:	463a      	mov	r2, r7
   1a53c:	2020      	movs	r0, #32
   1a53e:	f001 f8c3 	bl	1b6c8 <bt_keys_find>
   1a542:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1a546:	b930      	cbnz	r0, 1a556 <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1a548:	7a29      	ldrb	r1, [r5, #8]
   1a54a:	463a      	mov	r2, r7
   1a54c:	2004      	movs	r0, #4
   1a54e:	f001 f8bb 	bl	1b6c8 <bt_keys_find>
   1a552:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys) {
   1a556:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
   1a55a:	2900      	cmp	r1, #0
   1a55c:	d0e0      	beq.n	1a520 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1a55e:	0777      	lsls	r7, r6, #29
   1a560:	d518      	bpl.n	1a594 <smp_security_request+0xc0>
   1a562:	7b4b      	ldrb	r3, [r1, #13]
   1a564:	07d8      	lsls	r0, r3, #31
   1a566:	d415      	bmi.n	1a594 <smp_security_request+0xc0>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1a568:	f7ff fbf6 	bl	19d58 <get_io_capa>
   1a56c:	4a1e      	ldr	r2, [pc, #120]	; (1a5e8 <smp_security_request+0x114>)
   1a56e:	4b1f      	ldr	r3, [pc, #124]	; (1a5ec <smp_security_request+0x118>)
   1a570:	1ad2      	subs	r2, r2, r3
   1a572:	08d2      	lsrs	r2, r2, #3
   1a574:	2803      	cmp	r0, #3
   1a576:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1a57a:	d004      	beq.n	1a586 <smp_security_request+0xb2>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1a57c:	481c      	ldr	r0, [pc, #112]	; (1a5f0 <smp_security_request+0x11c>)
   1a57e:	f042 0203 	orr.w	r2, r2, #3
   1a582:	4631      	mov	r1, r6
   1a584:	e003      	b.n	1a58e <smp_security_request+0xba>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   1a586:	481b      	ldr	r0, [pc, #108]	; (1a5f4 <smp_security_request+0x120>)
   1a588:	f042 0202 	orr.w	r2, r2, #2
   1a58c:	4631      	mov	r1, r6
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1a58e:	f00a fadf 	bl	24b50 <log_1>
		goto pair;
   1a592:	e7c5      	b.n	1a520 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   1a594:	0732      	lsls	r2, r6, #28
   1a596:	d508      	bpl.n	1a5aa <smp_security_request+0xd6>
   1a598:	89cb      	ldrh	r3, [r1, #14]
   1a59a:	069b      	lsls	r3, r3, #26
   1a59c:	d405      	bmi.n	1a5aa <smp_security_request+0xd6>
   1a59e:	4a12      	ldr	r2, [pc, #72]	; (1a5e8 <smp_security_request+0x114>)
   1a5a0:	4b12      	ldr	r3, [pc, #72]	; (1a5ec <smp_security_request+0x118>)
   1a5a2:	1ad2      	subs	r2, r2, r3
   1a5a4:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1a5a6:	0192      	lsls	r2, r2, #6
   1a5a8:	e7e8      	b.n	1a57c <smp_security_request+0xa8>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1a5aa:	7b0b      	ldrb	r3, [r1, #12]
   1a5ac:	9300      	str	r3, [sp, #0]
   1a5ae:	f101 0218 	add.w	r2, r1, #24
   1a5b2:	f101 031a 	add.w	r3, r1, #26
   1a5b6:	4628      	mov	r0, r5
   1a5b8:	3110      	adds	r1, #16
   1a5ba:	f00b fbd9 	bl	25d70 <bt_conn_le_start_encryption>
   1a5be:	2800      	cmp	r0, #0
   1a5c0:	da0b      	bge.n	1a5da <smp_security_request+0x106>
   1a5c2:	4909      	ldr	r1, [pc, #36]	; (1a5e8 <smp_security_request+0x114>)
   1a5c4:	4b09      	ldr	r3, [pc, #36]	; (1a5ec <smp_security_request+0x118>)
		BT_ERR("Failed to start encryption");
   1a5c6:	480c      	ldr	r0, [pc, #48]	; (1a5f8 <smp_security_request+0x124>)
   1a5c8:	1ac9      	subs	r1, r1, r3
   1a5ca:	08c9      	lsrs	r1, r1, #3
   1a5cc:	0189      	lsls	r1, r1, #6
   1a5ce:	f041 0101 	orr.w	r1, r1, #1
   1a5d2:	f00a fab0 	bl	24b36 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1a5d6:	2008      	movs	r0, #8
   1a5d8:	e787      	b.n	1a4ea <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1a5da:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1a5dc:	4620      	mov	r0, r4
   1a5de:	f00c fddb 	bl	27198 <atomic_set_bit>
   1a5e2:	e781      	b.n	1a4e8 <smp_security_request+0x14>
   1a5e4:	20002675 	.word	0x20002675
   1a5e8:	00028688 	.word	0x00028688
   1a5ec:	00028618 	.word	0x00028618
   1a5f0:	0002efcc 	.word	0x0002efcc
   1a5f4:	0002eff3 	.word	0x0002eff3
   1a5f8:	0002efb1 	.word	0x0002efb1

0001a5fc <smp_ident_info>:
{
   1a5fc:	b570      	push	{r4, r5, r6, lr}
   1a5fe:	460b      	mov	r3, r1
   1a600:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a602:	210d      	movs	r1, #13
   1a604:	3004      	adds	r0, #4
   1a606:	f00c fd85 	bl	27114 <atomic_test_bit>
   1a60a:	b310      	cbz	r0, 1a652 <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1a60c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a60e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1a612:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1a616:	7a19      	ldrb	r1, [r3, #8]
   1a618:	462a      	mov	r2, r5
   1a61a:	2002      	movs	r0, #2
   1a61c:	f00d f805 	bl	2762a <bt_keys_get_type>
		if (!keys) {
   1a620:	b990      	cbnz	r0, 1a648 <smp_ident_info+0x4c>
   1a622:	4a0f      	ldr	r2, [pc, #60]	; (1a660 <smp_ident_info+0x64>)
   1a624:	4c0f      	ldr	r4, [pc, #60]	; (1a664 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1a626:	4628      	mov	r0, r5
   1a628:	1aa4      	subs	r4, r4, r2
   1a62a:	f7fa f839 	bl	146a0 <bt_addr_le_str_real>
   1a62e:	f7f7 fba1 	bl	11d74 <z_log_strdup>
   1a632:	08e4      	lsrs	r4, r4, #3
   1a634:	01a4      	lsls	r4, r4, #6
   1a636:	f044 0401 	orr.w	r4, r4, #1
   1a63a:	4601      	mov	r1, r0
   1a63c:	4622      	mov	r2, r4
   1a63e:	480a      	ldr	r0, [pc, #40]	; (1a668 <smp_ident_info+0x6c>)
   1a640:	f00a fa86 	bl	24b50 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1a644:	2008      	movs	r0, #8
}
   1a646:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1a648:	2210      	movs	r2, #16
   1a64a:	4631      	mov	r1, r6
   1a64c:	302a      	adds	r0, #42	; 0x2a
   1a64e:	f00b f989 	bl	25964 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1a652:	4620      	mov	r0, r4
   1a654:	2109      	movs	r1, #9
   1a656:	f00c fd9f 	bl	27198 <atomic_set_bit>
	return 0;
   1a65a:	2000      	movs	r0, #0
   1a65c:	e7f3      	b.n	1a646 <smp_ident_info+0x4a>
   1a65e:	bf00      	nop
   1a660:	00028618 	.word	0x00028618
   1a664:	00028688 	.word	0x00028688
   1a668:	0002f022 	.word	0x0002f022

0001a66c <smp_encrypt_info>:
{
   1a66c:	b570      	push	{r4, r5, r6, lr}
   1a66e:	460b      	mov	r3, r1
   1a670:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a672:	210d      	movs	r1, #13
   1a674:	3004      	adds	r0, #4
   1a676:	f00c fd4d 	bl	27114 <atomic_test_bit>
   1a67a:	b310      	cbz	r0, 1a6c2 <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1a67c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a67e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a682:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1a686:	7a19      	ldrb	r1, [r3, #8]
   1a688:	462a      	mov	r2, r5
   1a68a:	2004      	movs	r0, #4
   1a68c:	f00c ffcd 	bl	2762a <bt_keys_get_type>
		if (!keys) {
   1a690:	b990      	cbnz	r0, 1a6b8 <smp_encrypt_info+0x4c>
   1a692:	4a0f      	ldr	r2, [pc, #60]	; (1a6d0 <smp_encrypt_info+0x64>)
   1a694:	4c0f      	ldr	r4, [pc, #60]	; (1a6d4 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1a696:	4628      	mov	r0, r5
   1a698:	1aa4      	subs	r4, r4, r2
   1a69a:	f7fa f801 	bl	146a0 <bt_addr_le_str_real>
   1a69e:	f7f7 fb69 	bl	11d74 <z_log_strdup>
   1a6a2:	08e4      	lsrs	r4, r4, #3
   1a6a4:	01a4      	lsls	r4, r4, #6
   1a6a6:	f044 0401 	orr.w	r4, r4, #1
   1a6aa:	4601      	mov	r1, r0
   1a6ac:	4622      	mov	r2, r4
   1a6ae:	480a      	ldr	r0, [pc, #40]	; (1a6d8 <smp_encrypt_info+0x6c>)
   1a6b0:	f00a fa4e 	bl	24b50 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1a6b4:	2008      	movs	r0, #8
}
   1a6b6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1a6b8:	2210      	movs	r2, #16
   1a6ba:	4631      	mov	r1, r6
   1a6bc:	301a      	adds	r0, #26
   1a6be:	f00b f951 	bl	25964 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1a6c2:	4620      	mov	r0, r4
   1a6c4:	2107      	movs	r1, #7
   1a6c6:	f00c fd67 	bl	27198 <atomic_set_bit>
	return 0;
   1a6ca:	2000      	movs	r0, #0
   1a6cc:	e7f3      	b.n	1a6b6 <smp_encrypt_info+0x4a>
   1a6ce:	bf00      	nop
   1a6d0:	00028618 	.word	0x00028618
   1a6d4:	00028688 	.word	0x00028688
   1a6d8:	0002f022 	.word	0x0002f022

0001a6dc <smp_send_pairing_confirm>:
{
   1a6dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1a6de:	7a04      	ldrb	r4, [r0, #8]
   1a6e0:	2c02      	cmp	r4, #2
{
   1a6e2:	4605      	mov	r5, r0
	switch (smp->method) {
   1a6e4:	d824      	bhi.n	1a730 <smp_send_pairing_confirm+0x54>
   1a6e6:	b14c      	cbz	r4, 1a6fc <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a6e8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1a6ec:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1a6f0:	40dc      	lsrs	r4, r3
   1a6f2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1a6f6:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1a6fa:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1a6fc:	2103      	movs	r1, #3
   1a6fe:	4628      	mov	r0, r5
   1a700:	f00c fd5e 	bl	271c0 <smp_create_pdu.isra.0>
	if (!buf) {
   1a704:	4606      	mov	r6, r0
   1a706:	b300      	cbz	r0, 1a74a <smp_send_pairing_confirm+0x6e>
   1a708:	2110      	movs	r1, #16
   1a70a:	3008      	adds	r0, #8
   1a70c:	f001 fc3c 	bl	1bf88 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1a710:	9000      	str	r0, [sp, #0]
   1a712:	4816      	ldr	r0, [pc, #88]	; (1a76c <smp_send_pairing_confirm+0x90>)
   1a714:	4623      	mov	r3, r4
   1a716:	6800      	ldr	r0, [r0, #0]
   1a718:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1a71c:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1a720:	f00c fcd1 	bl	270c6 <smp_f4>
   1a724:	4604      	mov	r4, r0
   1a726:	b1a0      	cbz	r0, 1a752 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1a728:	4630      	mov	r0, r6
   1a72a:	f001 fafd 	bl	1bd28 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1a72e:	e00c      	b.n	1a74a <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1a730:	2c03      	cmp	r4, #3
   1a732:	d00c      	beq.n	1a74e <smp_send_pairing_confirm+0x72>
   1a734:	4a0e      	ldr	r2, [pc, #56]	; (1a770 <smp_send_pairing_confirm+0x94>)
   1a736:	4b0f      	ldr	r3, [pc, #60]	; (1a774 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1a738:	480f      	ldr	r0, [pc, #60]	; (1a778 <smp_send_pairing_confirm+0x9c>)
   1a73a:	1ad2      	subs	r2, r2, r3
   1a73c:	08d2      	lsrs	r2, r2, #3
   1a73e:	0192      	lsls	r2, r2, #6
   1a740:	f042 0201 	orr.w	r2, r2, #1
   1a744:	4621      	mov	r1, r4
   1a746:	f00a fa03 	bl	24b50 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1a74a:	2008      	movs	r0, #8
   1a74c:	e00b      	b.n	1a766 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1a74e:	2400      	movs	r4, #0
   1a750:	e7d4      	b.n	1a6fc <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1a752:	4602      	mov	r2, r0
   1a754:	4631      	mov	r1, r6
   1a756:	4628      	mov	r0, r5
   1a758:	f00c fc3e 	bl	26fd8 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1a75c:	1d28      	adds	r0, r5, #4
   1a75e:	4621      	mov	r1, r4
   1a760:	f00c fd89 	bl	27276 <atomic_clear_bit>
	return 0;
   1a764:	4620      	mov	r0, r4
}
   1a766:	b002      	add	sp, #8
   1a768:	bd70      	pop	{r4, r5, r6, pc}
   1a76a:	bf00      	nop
   1a76c:	20002250 	.word	0x20002250
   1a770:	00028688 	.word	0x00028688
   1a774:	00028618 	.word	0x00028618
   1a778:	0002ef5d 	.word	0x0002ef5d

0001a77c <smp_dhkey_generate>:
{
   1a77c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a77e:	1d05      	adds	r5, r0, #4
{
   1a780:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a782:	2108      	movs	r1, #8
   1a784:	4628      	mov	r0, r5
   1a786:	f00c fd07 	bl	27198 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1a78a:	490b      	ldr	r1, [pc, #44]	; (1a7b8 <smp_dhkey_generate+0x3c>)
   1a78c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a790:	f7fb fa58 	bl	15c44 <bt_dh_key_gen>
	if (err) {
   1a794:	b170      	cbz	r0, 1a7b4 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a796:	2108      	movs	r1, #8
   1a798:	4628      	mov	r0, r5
   1a79a:	f00c fd6c 	bl	27276 <atomic_clear_bit>
   1a79e:	4b07      	ldr	r3, [pc, #28]	; (1a7bc <smp_dhkey_generate+0x40>)
   1a7a0:	4907      	ldr	r1, [pc, #28]	; (1a7c0 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
   1a7a2:	4808      	ldr	r0, [pc, #32]	; (1a7c4 <smp_dhkey_generate+0x48>)
   1a7a4:	1ac9      	subs	r1, r1, r3
   1a7a6:	08c9      	lsrs	r1, r1, #3
   1a7a8:	0189      	lsls	r1, r1, #6
   1a7aa:	f041 0101 	orr.w	r1, r1, #1
   1a7ae:	f00a f9c2 	bl	24b36 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1a7b2:	2008      	movs	r0, #8
}
   1a7b4:	bd38      	pop	{r3, r4, r5, pc}
   1a7b6:	bf00      	nop
   1a7b8:	00027537 	.word	0x00027537
   1a7bc:	00028618 	.word	0x00028618
   1a7c0:	00028688 	.word	0x00028688
   1a7c4:	0002f03c 	.word	0x0002f03c

0001a7c8 <smp_public_key>:
{
   1a7c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1a7ca:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1a7cc:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
   1a7d0:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1a7d2:	2220      	movs	r2, #32
   1a7d4:	4629      	mov	r1, r5
   1a7d6:	4630      	mov	r0, r6
   1a7d8:	f00b f8c4 	bl	25964 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1a7dc:	2220      	movs	r2, #32
   1a7de:	18a9      	adds	r1, r5, r2
   1a7e0:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1a7e4:	f00b f8be 	bl	25964 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1a7e8:	4630      	mov	r0, r6
   1a7ea:	f7fb f975 	bl	15ad8 <bt_pub_key_is_debug>
   1a7ee:	b9f8      	cbnz	r0, 1a830 <smp_public_key+0x68>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a7f0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a7f4:	78db      	ldrb	r3, [r3, #3]
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d143      	bne.n	1a882 <smp_public_key+0xba>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a7fa:	1d25      	adds	r5, r4, #4
   1a7fc:	210e      	movs	r1, #14
   1a7fe:	4628      	mov	r0, r5
   1a800:	f00c fc88 	bl	27114 <atomic_test_bit>
   1a804:	2800      	cmp	r0, #0
   1a806:	d13e      	bne.n	1a886 <smp_public_key+0xbe>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1a808:	4b69      	ldr	r3, [pc, #420]	; (1a9b0 <smp_public_key+0x1e8>)
   1a80a:	2220      	movs	r2, #32
   1a80c:	6819      	ldr	r1, [r3, #0]
   1a80e:	4630      	mov	r0, r6
   1a810:	f00b f898 	bl	25944 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a814:	2800      	cmp	r0, #0
   1a816:	d136      	bne.n	1a886 <smp_public_key+0xbe>
   1a818:	4966      	ldr	r1, [pc, #408]	; (1a9b4 <smp_public_key+0x1ec>)
   1a81a:	4b67      	ldr	r3, [pc, #412]	; (1a9b8 <smp_public_key+0x1f0>)
			BT_WARN("Remote public key rejected");
   1a81c:	4867      	ldr	r0, [pc, #412]	; (1a9bc <smp_public_key+0x1f4>)
   1a81e:	1ac9      	subs	r1, r1, r3
   1a820:	08c9      	lsrs	r1, r1, #3
   1a822:	0189      	lsls	r1, r1, #6
   1a824:	f041 0102 	orr.w	r1, r1, #2
   1a828:	f00a f985 	bl	24b36 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1a82c:	2008      	movs	r0, #8
   1a82e:	e026      	b.n	1a87e <smp_public_key+0xb6>
   1a830:	4b61      	ldr	r3, [pc, #388]	; (1a9b8 <smp_public_key+0x1f0>)
   1a832:	4960      	ldr	r1, [pc, #384]	; (1a9b4 <smp_public_key+0x1ec>)
		BT_INFO("Remote is using Debug Public key");
   1a834:	4862      	ldr	r0, [pc, #392]	; (1a9c0 <smp_public_key+0x1f8>)
   1a836:	1ac9      	subs	r1, r1, r3
   1a838:	08c9      	lsrs	r1, r1, #3
   1a83a:	0189      	lsls	r1, r1, #6
   1a83c:	f041 0103 	orr.w	r1, r1, #3
   1a840:	f00a f979 	bl	24b36 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1a844:	210e      	movs	r1, #14
   1a846:	1d20      	adds	r0, r4, #4
   1a848:	f00c fca6 	bl	27198 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1a84c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1a850:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1a854:	b933      	cbnz	r3, 1a864 <smp_public_key+0x9c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a856:	7a28      	ldrb	r0, [r5, #8]
   1a858:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1a85c:	f000 fef4 	bl	1b648 <bt_keys_get_addr>
   1a860:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1a864:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1a868:	2b00      	cmp	r3, #0
   1a86a:	d0c1      	beq.n	1a7f0 <smp_public_key+0x28>
   1a86c:	89da      	ldrh	r2, [r3, #14]
   1a86e:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1a872:	2a00      	cmp	r2, #0
   1a874:	d0bc      	beq.n	1a7f0 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1a876:	7b5b      	ldrb	r3, [r3, #13]
   1a878:	0799      	lsls	r1, r3, #30
   1a87a:	d4b9      	bmi.n	1a7f0 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1a87c:	2003      	movs	r0, #3
}
   1a87e:	b002      	add	sp, #8
   1a880:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1a882:	2000      	movs	r0, #0
   1a884:	e7fb      	b.n	1a87e <smp_public_key+0xb6>
		switch (smp->method) {
   1a886:	7a21      	ldrb	r1, [r4, #8]
   1a888:	2905      	cmp	r1, #5
   1a88a:	d87f      	bhi.n	1a98c <smp_public_key+0x1c4>
   1a88c:	e8df f001 	tbb	[pc, r1]
   1a890:	03084203 	.word	0x03084203
   1a894:	4e7e      	.short	0x4e7e
			atomic_set_bit(smp->allowed_cmds,
   1a896:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1a898:	4620      	mov	r0, r4
   1a89a:	f00c fc7d 	bl	27198 <atomic_set_bit>
			break;
   1a89e:	e02c      	b.n	1a8fa <smp_public_key+0x132>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1a8a0:	2104      	movs	r1, #4
   1a8a2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1a8a6:	f004 fb71 	bl	1ef8c <bt_rand>
   1a8aa:	2800      	cmp	r0, #0
   1a8ac:	d1be      	bne.n	1a82c <smp_public_key+0x64>
		smp->passkey %= 1000000;
   1a8ae:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1a8b2:	4a44      	ldr	r2, [pc, #272]	; (1a9c4 <smp_public_key+0x1fc>)
	if (bt_auth && bt_auth->passkey_display) {
   1a8b4:	4e44      	ldr	r6, [pc, #272]	; (1a9c8 <smp_public_key+0x200>)
		smp->passkey %= 1000000;
   1a8b6:	fbb1 f3f2 	udiv	r3, r1, r2
   1a8ba:	fb02 1313 	mls	r3, r2, r3, r1
   1a8be:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1a8c2:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
   1a8c4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1a8c8:	b163      	cbz	r3, 1a8e4 <smp_public_key+0x11c>
   1a8ca:	681b      	ldr	r3, [r3, #0]
   1a8cc:	b153      	cbz	r3, 1a8e4 <smp_public_key+0x11c>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a8ce:	210b      	movs	r1, #11
   1a8d0:	4628      	mov	r0, r5
   1a8d2:	f00c fc61 	bl	27198 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1a8d6:	6833      	ldr	r3, [r6, #0]
   1a8d8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1a8dc:	681b      	ldr	r3, [r3, #0]
   1a8de:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a8e2:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1a8e4:	2103      	movs	r1, #3
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f00c fc56 	bl	27198 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1a8ec:	210e      	movs	r1, #14
   1a8ee:	f00c fc53 	bl	27198 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1a8f2:	f7ff fef3 	bl	1a6dc <smp_send_pairing_confirm>
			if (err) {
   1a8f6:	2800      	cmp	r0, #0
   1a8f8:	d1c1      	bne.n	1a87e <smp_public_key+0xb6>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1a8fa:	4628      	mov	r0, r5
   1a8fc:	2107      	movs	r1, #7
   1a8fe:	f00c fc4b 	bl	27198 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1a902:	2008      	movs	r0, #8
   1a904:	f7ff fabc 	bl	19e80 <smp_find>
   1a908:	2800      	cmp	r0, #0
   1a90a:	d1ba      	bne.n	1a882 <smp_public_key+0xba>
		return smp_dhkey_generate(smp);
   1a90c:	4620      	mov	r0, r4
   1a90e:	f7ff ff35 	bl	1a77c <smp_dhkey_generate>
   1a912:	e7b4      	b.n	1a87e <smp_public_key+0xb6>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a914:	210a      	movs	r1, #10
   1a916:	4628      	mov	r0, r5
   1a918:	f00c fc3e 	bl	27198 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   1a91c:	4b2a      	ldr	r3, [pc, #168]	; (1a9c8 <smp_public_key+0x200>)
   1a91e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a922:	681b      	ldr	r3, [r3, #0]
   1a924:	685b      	ldr	r3, [r3, #4]
   1a926:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1a928:	210e      	movs	r1, #14
   1a92a:	e7b5      	b.n	1a898 <smp_public_key+0xd0>
			if (bt_rand(smp->prnd, 16)) {
   1a92c:	2110      	movs	r1, #16
   1a92e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a932:	f004 fb2b 	bl	1ef8c <bt_rand>
   1a936:	2800      	cmp	r0, #0
   1a938:	f47f af78 	bne.w	1a82c <smp_public_key+0x64>
			if (bt_auth && bt_auth->oob_data_request) {
   1a93c:	4e22      	ldr	r6, [pc, #136]	; (1a9c8 <smp_public_key+0x200>)
   1a93e:	6833      	ldr	r3, [r6, #0]
   1a940:	b37b      	cbz	r3, 1a9a2 <smp_public_key+0x1da>
   1a942:	68db      	ldr	r3, [r3, #12]
   1a944:	b36b      	cbz	r3, 1a9a2 <smp_public_key+0x1da>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a946:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
				struct bt_conn_oob_info info = {
   1a94a:	4b20      	ldr	r3, [pc, #128]	; (1a9cc <smp_public_key+0x204>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a94c:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1a94e:	881b      	ldrh	r3, [r3, #0]
   1a950:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a954:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a956:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a958:	b939      	cbnz	r1, 1a96a <smp_public_key+0x1a2>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1a95a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1a95c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1a960:	d421      	bmi.n	1a9a6 <smp_public_key+0x1de>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1a962:	2b00      	cmp	r3, #0
   1a964:	bf08      	it	eq
   1a966:	2003      	moveq	r0, #3
   1a968:	e000      	b.n	1a96c <smp_public_key+0x1a4>
   1a96a:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
   1a96c:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1a96e:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   1a972:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
   1a976:	210c      	movs	r1, #12
   1a978:	4628      	mov	r0, r5
   1a97a:	f00c fc0d 	bl	27198 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   1a97e:	6833      	ldr	r3, [r6, #0]
   1a980:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1a984:	68db      	ldr	r3, [r3, #12]
   1a986:	a901      	add	r1, sp, #4
   1a988:	4798      	blx	r3
			break;
   1a98a:	e7b6      	b.n	1a8fa <smp_public_key+0x132>
   1a98c:	4b0a      	ldr	r3, [pc, #40]	; (1a9b8 <smp_public_key+0x1f0>)
   1a98e:	4a09      	ldr	r2, [pc, #36]	; (1a9b4 <smp_public_key+0x1ec>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1a990:	480f      	ldr	r0, [pc, #60]	; (1a9d0 <smp_public_key+0x208>)
   1a992:	1ad2      	subs	r2, r2, r3
   1a994:	08d2      	lsrs	r2, r2, #3
   1a996:	0192      	lsls	r2, r2, #6
   1a998:	f042 0201 	orr.w	r2, r2, #1
   1a99c:	f00a f8d8 	bl	24b50 <log_1>
   1a9a0:	e744      	b.n	1a82c <smp_public_key+0x64>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a9a2:	2002      	movs	r0, #2
   1a9a4:	e76b      	b.n	1a87e <smp_public_key+0xb6>
				     BT_CONN_OOB_BOTH_PEERS :
   1a9a6:	2b00      	cmp	r3, #0
   1a9a8:	bf0c      	ite	eq
   1a9aa:	2001      	moveq	r0, #1
   1a9ac:	2002      	movne	r0, #2
   1a9ae:	e7dd      	b.n	1a96c <smp_public_key+0x1a4>
   1a9b0:	20002250 	.word	0x20002250
   1a9b4:	00028688 	.word	0x00028688
   1a9b8:	00028618 	.word	0x00028618
   1a9bc:	0002f076 	.word	0x0002f076
   1a9c0:	0002f055 	.word	0x0002f055
   1a9c4:	000f4240 	.word	0x000f4240
   1a9c8:	20002194 	.word	0x20002194
   1a9cc:	00028871 	.word	0x00028871
   1a9d0:	0002ef5d 	.word	0x0002ef5d

0001a9d4 <bt_smp_connected>:
{
   1a9d4:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1a9d6:	4905      	ldr	r1, [pc, #20]	; (1a9ec <bt_smp_connected+0x18>)
   1a9d8:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1a9dc:	30f0      	adds	r0, #240	; 0xf0
   1a9de:	f007 fbe9 	bl	221b4 <k_work_init_delayable>
	smp_reset(smp);
   1a9e2:	4620      	mov	r0, r4
}
   1a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1a9e8:	f00c bc54 	b.w	27294 <smp_reset>
   1a9ec:	0001b581 	.word	0x0001b581

0001a9f0 <smp_pairing_rsp>:
{
   1a9f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1a9f4:	688f      	ldr	r7, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a9f6:	78fb      	ldrb	r3, [r7, #3]
   1a9f8:	3b07      	subs	r3, #7
   1a9fa:	2b09      	cmp	r3, #9
{
   1a9fc:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a9fe:	d904      	bls.n	1aa0a <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1aa00:	2706      	movs	r7, #6
}
   1aa02:	4638      	mov	r0, r7
   1aa04:	b002      	add	sp, #8
   1aa06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   1aa0a:	793a      	ldrb	r2, [r7, #4]
   1aa0c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   1aa10:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   1aa14:	4013      	ands	r3, r2
   1aa16:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1aa1a:	797a      	ldrb	r2, [r7, #5]
   1aa1c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1aa20:	4013      	ands	r3, r2
   1aa22:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1aa26:	2302      	movs	r3, #2
   1aa28:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1aa2a:	2206      	movs	r2, #6
   1aa2c:	4639      	mov	r1, r7
   1aa2e:	3011      	adds	r0, #17
   1aa30:	f00a ff98 	bl	25964 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1aa34:	78bb      	ldrb	r3, [r7, #2]
   1aa36:	0718      	lsls	r0, r3, #28
   1aa38:	f104 0504 	add.w	r5, r4, #4
   1aa3c:	d506      	bpl.n	1aa4c <smp_pairing_rsp+0x5c>
   1aa3e:	7b23      	ldrb	r3, [r4, #12]
   1aa40:	0719      	lsls	r1, r3, #28
   1aa42:	d503      	bpl.n	1aa4c <smp_pairing_rsp+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1aa44:	2105      	movs	r1, #5
   1aa46:	4628      	mov	r0, r5
   1aa48:	f00c fba6 	bl	27198 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1aa4c:	78bb      	ldrb	r3, [r7, #2]
   1aa4e:	069a      	lsls	r2, r3, #26
   1aa50:	d506      	bpl.n	1aa60 <smp_pairing_rsp+0x70>
   1aa52:	7b23      	ldrb	r3, [r4, #12]
   1aa54:	069b      	lsls	r3, r3, #26
   1aa56:	d503      	bpl.n	1aa60 <smp_pairing_rsp+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1aa58:	2114      	movs	r1, #20
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	f00c fb9c 	bl	27198 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1aa60:	78bb      	ldrb	r3, [r7, #2]
   1aa62:	07d8      	lsls	r0, r3, #31
   1aa64:	d506      	bpl.n	1aa74 <smp_pairing_rsp+0x84>
   1aa66:	7b23      	ldrb	r3, [r4, #12]
   1aa68:	07d9      	lsls	r1, r3, #31
   1aa6a:	d503      	bpl.n	1aa74 <smp_pairing_rsp+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1aa6c:	210d      	movs	r1, #13
   1aa6e:	4628      	mov	r0, r5
   1aa70:	f00c fb92 	bl	27198 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1aa74:	2105      	movs	r1, #5
   1aa76:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1aa78:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1aa7a:	f00c fb4b 	bl	27114 <atomic_test_bit>
   1aa7e:	bb28      	cbnz	r0, 1aacc <smp_pairing_rsp+0xdc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1aa80:	2f04      	cmp	r7, #4
   1aa82:	d81a      	bhi.n	1aaba <smp_pairing_rsp+0xca>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1aa84:	7ca2      	ldrb	r2, [r4, #18]
   1aa86:	7ae3      	ldrb	r3, [r4, #11]
   1aa88:	4013      	ands	r3, r2
   1aa8a:	07da      	lsls	r2, r3, #31
   1aa8c:	d437      	bmi.n	1aafe <smp_pairing_rsp+0x10e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1aa8e:	7b20      	ldrb	r0, [r4, #12]
   1aa90:	7ce3      	ldrb	r3, [r4, #19]
   1aa92:	4318      	orrs	r0, r3
   1aa94:	f010 0004 	ands.w	r0, r0, #4
   1aa98:	d00f      	beq.n	1aaba <smp_pairing_rsp+0xca>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1aa9a:	f7ff f95d 	bl	19d58 <get_io_capa>
   1aa9e:	4b99      	ldr	r3, [pc, #612]	; (1ad04 <smp_pairing_rsp+0x314>)
   1aaa0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1aaa4:	441f      	add	r7, r3
   1aaa6:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
   1aaa8:	2804      	cmp	r0, #4
   1aaaa:	d106      	bne.n	1aaba <smp_pairing_rsp+0xca>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1aaac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1aab0:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1aab2:	2b00      	cmp	r3, #0
   1aab4:	bf0c      	ite	eq
   1aab6:	2002      	moveq	r0, #2
   1aab8:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   1aaba:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1aabc:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1aac0:	4620      	mov	r0, r4
   1aac2:	f00c fb30 	bl	27126 <update_keys_check>
   1aac6:	bb00      	cbnz	r0, 1ab0a <smp_pairing_rsp+0x11a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1aac8:	2703      	movs	r7, #3
   1aaca:	e79a      	b.n	1aa02 <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1aacc:	7b20      	ldrb	r0, [r4, #12]
   1aace:	7ce2      	ldrb	r2, [r4, #19]
   1aad0:	ea00 0302 	and.w	r3, r0, r2
   1aad4:	071b      	lsls	r3, r3, #28
   1aad6:	d504      	bpl.n	1aae2 <smp_pairing_rsp+0xf2>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1aad8:	7ca1      	ldrb	r1, [r4, #18]
   1aada:	7ae3      	ldrb	r3, [r4, #11]
   1aadc:	430b      	orrs	r3, r1
   1aade:	07d9      	lsls	r1, r3, #31
   1aae0:	d40f      	bmi.n	1ab02 <smp_pairing_rsp+0x112>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1aae2:	2f04      	cmp	r7, #4
   1aae4:	d80f      	bhi.n	1ab06 <smp_pairing_rsp+0x116>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1aae6:	4310      	orrs	r0, r2
   1aae8:	f010 0004 	ands.w	r0, r0, #4
   1aaec:	d0e5      	beq.n	1aaba <smp_pairing_rsp+0xca>
	return gen_method_sc[remote_io][get_io_capa()];
   1aaee:	f7ff f933 	bl	19d58 <get_io_capa>
   1aaf2:	4b85      	ldr	r3, [pc, #532]	; (1ad08 <smp_pairing_rsp+0x318>)
   1aaf4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1aaf8:	441f      	add	r7, r3
   1aafa:	5c38      	ldrb	r0, [r7, r0]
   1aafc:	e7dd      	b.n	1aaba <smp_pairing_rsp+0xca>
		return LEGACY_OOB;
   1aafe:	2006      	movs	r0, #6
   1ab00:	e7db      	b.n	1aaba <smp_pairing_rsp+0xca>
			return LE_SC_OOB;
   1ab02:	2005      	movs	r0, #5
   1ab04:	e7d9      	b.n	1aaba <smp_pairing_rsp+0xca>
		return JUST_WORKS;
   1ab06:	2000      	movs	r0, #0
   1ab08:	e7d7      	b.n	1aaba <smp_pairing_rsp+0xca>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1ab0a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1ab0e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1ab10:	2b03      	cmp	r3, #3
   1ab12:	d015      	beq.n	1ab40 <smp_pairing_rsp+0x150>
   1ab14:	d804      	bhi.n	1ab20 <smp_pairing_rsp+0x130>
   1ab16:	3b01      	subs	r3, #1
   1ab18:	2b01      	cmp	r3, #1
   1ab1a:	d914      	bls.n	1ab46 <smp_pairing_rsp+0x156>
   1ab1c:	2708      	movs	r7, #8
   1ab1e:	e770      	b.n	1aa02 <smp_pairing_rsp+0x12>
   1ab20:	2b04      	cmp	r3, #4
   1ab22:	d1fb      	bne.n	1ab1c <smp_pairing_rsp+0x12c>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ab24:	7d23      	ldrb	r3, [r4, #20]
   1ab26:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1ab28:	4293      	cmp	r3, r2
   1ab2a:	bf28      	it	cs
   1ab2c:	4613      	movcs	r3, r2
   1ab2e:	2b10      	cmp	r3, #16
   1ab30:	f47f af66 	bne.w	1aa00 <smp_pairing_rsp+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ab34:	2105      	movs	r1, #5
   1ab36:	4628      	mov	r0, r5
   1ab38:	f00c faec 	bl	27114 <atomic_test_bit>
   1ab3c:	2800      	cmp	r0, #0
   1ab3e:	d0c3      	beq.n	1aac8 <smp_pairing_rsp+0xd8>
		if (smp->method == JUST_WORKS) {
   1ab40:	7a23      	ldrb	r3, [r4, #8]
   1ab42:	2b00      	cmp	r3, #0
   1ab44:	d0c0      	beq.n	1aac8 <smp_pairing_rsp+0xd8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ab46:	2105      	movs	r1, #5
   1ab48:	4628      	mov	r0, r5
   1ab4a:	f00c fae3 	bl	27114 <atomic_test_bit>
   1ab4e:	2800      	cmp	r0, #0
   1ab50:	f040 80a5 	bne.w	1ac9e <smp_pairing_rsp+0x2ae>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ab54:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1ab58:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1ab5c:	7a30      	ldrb	r0, [r6, #8]
   1ab5e:	f000 fdc9 	bl	1b6f4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1ab62:	7a21      	ldrb	r1, [r4, #8]
   1ab64:	b170      	cbz	r0, 1ab84 <smp_pairing_rsp+0x194>
   1ab66:	7b43      	ldrb	r3, [r0, #13]
   1ab68:	07db      	lsls	r3, r3, #31
   1ab6a:	d50b      	bpl.n	1ab84 <smp_pairing_rsp+0x194>
   1ab6c:	b951      	cbnz	r1, 1ab84 <smp_pairing_rsp+0x194>
   1ab6e:	4b67      	ldr	r3, [pc, #412]	; (1ad0c <smp_pairing_rsp+0x31c>)
   1ab70:	4967      	ldr	r1, [pc, #412]	; (1ad10 <smp_pairing_rsp+0x320>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1ab72:	4868      	ldr	r0, [pc, #416]	; (1ad14 <smp_pairing_rsp+0x324>)
   1ab74:	1ac9      	subs	r1, r1, r3
   1ab76:	08c9      	lsrs	r1, r1, #3
   1ab78:	0189      	lsls	r1, r1, #6
   1ab7a:	f041 0101 	orr.w	r1, r1, #1
   1ab7e:	f009 ffda 	bl	24b36 <log_0>
	if (ret) {
   1ab82:	e7cb      	b.n	1ab1c <smp_pairing_rsp+0x12c>
	switch (smp->method) {
   1ab84:	2906      	cmp	r1, #6
   1ab86:	d868      	bhi.n	1ac5a <smp_pairing_rsp+0x26a>
   1ab88:	e8df f001 	tbb	[pc, r1]
   1ab8c:	67335d1b 	.word	0x67335d1b
   1ab90:	6767      	.short	0x6767
   1ab92:	04          	.byte	0x04
   1ab93:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1ab94:	4e60      	ldr	r6, [pc, #384]	; (1ad18 <smp_pairing_rsp+0x328>)
   1ab96:	6833      	ldr	r3, [r6, #0]
   1ab98:	2b00      	cmp	r3, #0
   1ab9a:	d069      	beq.n	1ac70 <smp_pairing_rsp+0x280>
   1ab9c:	68db      	ldr	r3, [r3, #12]
   1ab9e:	2b00      	cmp	r3, #0
   1aba0:	d066      	beq.n	1ac70 <smp_pairing_rsp+0x280>
			struct bt_conn_oob_info info = {
   1aba2:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aba4:	210a      	movs	r1, #10
   1aba6:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1aba8:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1abac:	f00c faf4 	bl	27198 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1abb0:	6833      	ldr	r3, [r6, #0]
   1abb2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1abb6:	68db      	ldr	r3, [r3, #12]
   1abb8:	a901      	add	r1, sp, #4
   1abba:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1abbc:	7a23      	ldrb	r3, [r4, #8]
   1abbe:	2b00      	cmp	r3, #0
   1abc0:	d158      	bne.n	1ac74 <smp_pairing_rsp+0x284>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1abc2:	210f      	movs	r1, #15
   1abc4:	4628      	mov	r0, r5
   1abc6:	f00c faa5 	bl	27114 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1abca:	2800      	cmp	r0, #0
   1abcc:	d052      	beq.n	1ac74 <smp_pairing_rsp+0x284>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1abce:	4e52      	ldr	r6, [pc, #328]	; (1ad18 <smp_pairing_rsp+0x328>)
   1abd0:	6833      	ldr	r3, [r6, #0]
   1abd2:	2b00      	cmp	r3, #0
   1abd4:	d04e      	beq.n	1ac74 <smp_pairing_rsp+0x284>
	    bt_auth && bt_auth->pairing_confirm) {
   1abd6:	695b      	ldr	r3, [r3, #20]
   1abd8:	2b00      	cmp	r3, #0
   1abda:	d04b      	beq.n	1ac74 <smp_pairing_rsp+0x284>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1abdc:	4628      	mov	r0, r5
   1abde:	210a      	movs	r1, #10
   1abe0:	f00c fada 	bl	27198 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1abe4:	6833      	ldr	r3, [r6, #0]
   1abe6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1abea:	695b      	ldr	r3, [r3, #20]
   1abec:	4798      	blx	r3
	return 0;
   1abee:	2700      	movs	r7, #0
   1abf0:	e707      	b.n	1aa02 <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1abf2:	2104      	movs	r1, #4
   1abf4:	eb0d 0001 	add.w	r0, sp, r1
   1abf8:	f004 f9c8 	bl	1ef8c <bt_rand>
   1abfc:	2800      	cmp	r0, #0
   1abfe:	d18d      	bne.n	1ab1c <smp_pairing_rsp+0x12c>
			passkey %= 1000000;
   1ac00:	9901      	ldr	r1, [sp, #4]
   1ac02:	4a46      	ldr	r2, [pc, #280]	; (1ad1c <smp_pairing_rsp+0x32c>)
		if (bt_auth && bt_auth->passkey_display) {
   1ac04:	4f44      	ldr	r7, [pc, #272]	; (1ad18 <smp_pairing_rsp+0x328>)
			passkey %= 1000000;
   1ac06:	fbb1 f3f2 	udiv	r3, r1, r2
   1ac0a:	fb02 1313 	mls	r3, r2, r3, r1
   1ac0e:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1ac10:	683b      	ldr	r3, [r7, #0]
   1ac12:	b153      	cbz	r3, 1ac2a <smp_pairing_rsp+0x23a>
   1ac14:	681b      	ldr	r3, [r3, #0]
   1ac16:	b143      	cbz	r3, 1ac2a <smp_pairing_rsp+0x23a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ac18:	210b      	movs	r1, #11
   1ac1a:	4628      	mov	r0, r5
   1ac1c:	f00c fabc 	bl	27198 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1ac20:	683b      	ldr	r3, [r7, #0]
   1ac22:	9901      	ldr	r1, [sp, #4]
   1ac24:	681b      	ldr	r3, [r3, #0]
   1ac26:	4630      	mov	r0, r6
   1ac28:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1ac2a:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1ac2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1ac30:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1ac34:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1ac36:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1ac3a:	0a1b      	lsrs	r3, r3, #8
   1ac3c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1ac40:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1ac44:	e7ba      	b.n	1abbc <smp_pairing_rsp+0x1cc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ac46:	4628      	mov	r0, r5
   1ac48:	210a      	movs	r1, #10
   1ac4a:	f00c faa5 	bl	27198 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1ac4e:	4b32      	ldr	r3, [pc, #200]	; (1ad18 <smp_pairing_rsp+0x328>)
   1ac50:	681b      	ldr	r3, [r3, #0]
   1ac52:	4630      	mov	r0, r6
   1ac54:	685b      	ldr	r3, [r3, #4]
   1ac56:	4798      	blx	r3
	if (ret) {
   1ac58:	e7b0      	b.n	1abbc <smp_pairing_rsp+0x1cc>
   1ac5a:	4b2c      	ldr	r3, [pc, #176]	; (1ad0c <smp_pairing_rsp+0x31c>)
   1ac5c:	4a2c      	ldr	r2, [pc, #176]	; (1ad10 <smp_pairing_rsp+0x320>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1ac5e:	4830      	ldr	r0, [pc, #192]	; (1ad20 <smp_pairing_rsp+0x330>)
   1ac60:	1ad2      	subs	r2, r2, r3
   1ac62:	08d2      	lsrs	r2, r2, #3
   1ac64:	0192      	lsls	r2, r2, #6
   1ac66:	f042 0201 	orr.w	r2, r2, #1
   1ac6a:	f009 ff71 	bl	24b50 <log_1>
	if (ret) {
   1ac6e:	e755      	b.n	1ab1c <smp_pairing_rsp+0x12c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ac70:	2702      	movs	r7, #2
   1ac72:	e6c6      	b.n	1aa02 <smp_pairing_rsp+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1ac74:	210a      	movs	r1, #10
   1ac76:	4628      	mov	r0, r5
   1ac78:	f00c fa4c 	bl	27114 <atomic_test_bit>
   1ac7c:	b950      	cbnz	r0, 1ac94 <smp_pairing_rsp+0x2a4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ac7e:	2103      	movs	r1, #3
   1ac80:	4620      	mov	r0, r4
   1ac82:	f00c fa89 	bl	27198 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ac86:	210e      	movs	r1, #14
   1ac88:	f00c fa86 	bl	27198 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   1ac8c:	f00c fb85 	bl	2739a <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
   1ac90:	4607      	mov	r7, r0
   1ac92:	e6b6      	b.n	1aa02 <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ac94:	2100      	movs	r1, #0
   1ac96:	4628      	mov	r0, r5
   1ac98:	f00c fa7e 	bl	27198 <atomic_set_bit>
   1ac9c:	e7a7      	b.n	1abee <smp_pairing_rsp+0x1fe>
	smp->local_dist &= SEND_KEYS_SC;
   1ac9e:	2300      	movs	r3, #0
   1aca0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   1aca4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1aca8:	7a27      	ldrb	r7, [r4, #8]
	smp->remote_dist &= RECV_KEYS_SC;
   1acaa:	f003 0302 	and.w	r3, r3, #2
   1acae:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1acb2:	b9af      	cbnz	r7, 1ace0 <smp_pairing_rsp+0x2f0>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1acb4:	210f      	movs	r1, #15
   1acb6:	4628      	mov	r0, r5
   1acb8:	f00c fa2c 	bl	27114 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1acbc:	b180      	cbz	r0, 1ace0 <smp_pairing_rsp+0x2f0>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1acbe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ad18 <smp_pairing_rsp+0x328>
   1acc2:	f8d8 3000 	ldr.w	r3, [r8]
   1acc6:	b15b      	cbz	r3, 1ace0 <smp_pairing_rsp+0x2f0>
	    bt_auth && bt_auth->pairing_confirm) {
   1acc8:	695b      	ldr	r3, [r3, #20]
   1acca:	b14b      	cbz	r3, 1ace0 <smp_pairing_rsp+0x2f0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1accc:	4628      	mov	r0, r5
   1acce:	210a      	movs	r1, #10
   1acd0:	f00c fa62 	bl	27198 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1acd4:	f8d8 3000 	ldr.w	r3, [r8]
   1acd8:	4630      	mov	r0, r6
   1acda:	695b      	ldr	r3, [r3, #20]
   1acdc:	4798      	blx	r3
		return 0;
   1acde:	e690      	b.n	1aa02 <smp_pairing_rsp+0x12>
	if (!sc_public_key) {
   1ace0:	4b10      	ldr	r3, [pc, #64]	; (1ad24 <smp_pairing_rsp+0x334>)
   1ace2:	681f      	ldr	r7, [r3, #0]
   1ace4:	b927      	cbnz	r7, 1acf0 <smp_pairing_rsp+0x300>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1ace6:	2106      	movs	r1, #6
   1ace8:	4628      	mov	r0, r5
   1acea:	f00c fa55 	bl	27198 <atomic_set_bit>
		return 0;
   1acee:	e688      	b.n	1aa02 <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1acf0:	4620      	mov	r0, r4
   1acf2:	210c      	movs	r1, #12
   1acf4:	f00c fa50 	bl	27198 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1acf8:	210b      	movs	r1, #11
   1acfa:	f00c fabc 	bl	27276 <atomic_clear_bit>
	return sc_send_public_key(smp);
   1acfe:	f7ff f8cd 	bl	19e9c <sc_send_public_key>
   1ad02:	e7c5      	b.n	1ac90 <smp_pairing_rsp+0x2a0>
   1ad04:	0002f22c 	.word	0x0002f22c
   1ad08:	0002f245 	.word	0x0002f245
   1ad0c:	00028618 	.word	0x00028618
   1ad10:	00028688 	.word	0x00028688
   1ad14:	0002f091 	.word	0x0002f091
   1ad18:	20002194 	.word	0x20002194
   1ad1c:	000f4240 	.word	0x000f4240
   1ad20:	0002ef5d 	.word	0x0002ef5d
   1ad24:	20002250 	.word	0x20002250

0001ad28 <smp_pairing_random>:
{
   1ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad2c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ad2e:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1ad32:	6889      	ldr	r1, [r1, #8]
{
   1ad34:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ad36:	2210      	movs	r2, #16
   1ad38:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ad3a:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ad3c:	f00a fe12 	bl	25964 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ad40:	2105      	movs	r1, #5
   1ad42:	4630      	mov	r0, r6
   1ad44:	f00c f9e6 	bl	27114 <atomic_test_bit>
   1ad48:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
   1ad4c:	2800      	cmp	r0, #0
   1ad4e:	d15b      	bne.n	1ae08 <smp_pairing_random+0xe0>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1ad50:	f109 039e 	add.w	r3, r9, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ad54:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1ad58:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1ad5c:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1ad5e:	f109 0397 	add.w	r3, r9, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ad62:	9300      	str	r3, [sp, #0]
   1ad64:	f8cd 8008 	str.w	r8, [sp, #8]
   1ad68:	f104 0310 	add.w	r3, r4, #16
   1ad6c:	f104 0209 	add.w	r2, r4, #9
   1ad70:	4639      	mov	r1, r7
   1ad72:	4650      	mov	r0, sl
   1ad74:	f00c fab6 	bl	272e4 <smp_c1>
	if (err) {
   1ad78:	2800      	cmp	r0, #0
   1ad7a:	d13e      	bne.n	1adfa <smp_pairing_random+0xd2>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1ad7c:	2210      	movs	r2, #16
   1ad7e:	4641      	mov	r1, r8
   1ad80:	f104 0017 	add.w	r0, r4, #23
   1ad84:	f00a fdde 	bl	25944 <memcmp>
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	d173      	bne.n	1ae74 <smp_pairing_random+0x14c>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1ad8c:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ad90:	2d00      	cmp	r5, #0
   1ad92:	f040 80cd 	bne.w	1af30 <smp_pairing_random+0x208>
	memcpy(out, r2, 8);
   1ad96:	2208      	movs	r2, #8
   1ad98:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1ad9c:	4640      	mov	r0, r8
   1ad9e:	f00a fde1 	bl	25964 <memcpy>
	memcpy(out + 8, r1, 8);
   1ada2:	2208      	movs	r2, #8
   1ada4:	4639      	mov	r1, r7
   1ada6:	a80c      	add	r0, sp, #48	; 0x30
   1ada8:	f00a fddc 	bl	25964 <memcpy>
	return bt_encrypt_le(k, out, out);
   1adac:	4642      	mov	r2, r8
   1adae:	4641      	mov	r1, r8
   1adb0:	4650      	mov	r0, sl
   1adb2:	f00c ff6e 	bl	27c92 <bt_encrypt_le>
		if (err) {
   1adb6:	bb00      	cbnz	r0, 1adfa <smp_pairing_random+0xd2>
		(void)memset(ediv, 0, sizeof(ediv));
   1adb8:	2202      	movs	r2, #2
   1adba:	4629      	mov	r1, r5
   1adbc:	a805      	add	r0, sp, #20
   1adbe:	f00a fddc 	bl	2597a <memset>
		(void)memset(rand, 0, sizeof(rand));
   1adc2:	2208      	movs	r2, #8
   1adc4:	4629      	mov	r1, r5
   1adc6:	a806      	add	r0, sp, #24
   1adc8:	f00a fdd7 	bl	2597a <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1adcc:	7d22      	ldrb	r2, [r4, #20]
   1adce:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1add0:	429a      	cmp	r2, r3
   1add2:	bf94      	ite	ls
   1add4:	9200      	strls	r2, [sp, #0]
   1add6:	9300      	strhi	r3, [sp, #0]
   1add8:	a906      	add	r1, sp, #24
   1adda:	4643      	mov	r3, r8
   1addc:	aa05      	add	r2, sp, #20
   1adde:	4648      	mov	r0, r9
   1ade0:	f00a ffc6 	bl	25d70 <bt_conn_le_start_encryption>
   1ade4:	b158      	cbz	r0, 1adfe <smp_pairing_random+0xd6>
   1ade6:	495f      	ldr	r1, [pc, #380]	; (1af64 <smp_pairing_random+0x23c>)
   1ade8:	4b5f      	ldr	r3, [pc, #380]	; (1af68 <smp_pairing_random+0x240>)
			BT_ERR("Failed to start encryption");
   1adea:	4860      	ldr	r0, [pc, #384]	; (1af6c <smp_pairing_random+0x244>)
   1adec:	1ac9      	subs	r1, r1, r3
   1adee:	08c9      	lsrs	r1, r1, #3
   1adf0:	0189      	lsls	r1, r1, #6
   1adf2:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1adf6:	f009 fe9e 	bl	24b36 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
   1adfa:	2508      	movs	r5, #8
   1adfc:	e03b      	b.n	1ae76 <smp_pairing_random+0x14e>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1adfe:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1ae00:	4630      	mov	r0, r6
   1ae02:	f00c f9c9 	bl	27198 <atomic_set_bit>
			return 0;
   1ae06:	e036      	b.n	1ae76 <smp_pairing_random+0x14e>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1ae08:	f899 5003 	ldrb.w	r5, [r9, #3]
   1ae0c:	2d00      	cmp	r5, #0
   1ae0e:	f040 80a7 	bne.w	1af60 <smp_pairing_random+0x238>
	switch (smp->method) {
   1ae12:	7a21      	ldrb	r1, [r4, #8]
   1ae14:	2905      	cmp	r1, #5
   1ae16:	f200 808d 	bhi.w	1af34 <smp_pairing_random+0x20c>
   1ae1a:	e8df f001 	tbb	[pc, r1]
   1ae1e:	0322      	.short	0x0322
   1ae20:	308b2203 	.word	0x308b2203
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ae24:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1ae28:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1ae2c:	40d3      	lsrs	r3, r2
   1ae2e:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1ae32:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ae36:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1ae38:	494d      	ldr	r1, [pc, #308]	; (1af70 <smp_pairing_random+0x248>)
   1ae3a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1ae3e:	f8cd 8000 	str.w	r8, [sp]
   1ae42:	6809      	ldr	r1, [r1, #0]
   1ae44:	463a      	mov	r2, r7
   1ae46:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ae4a:	f00c f93c 	bl	270c6 <smp_f4>
   1ae4e:	b150      	cbz	r0, 1ae66 <smp_pairing_random+0x13e>
   1ae50:	4944      	ldr	r1, [pc, #272]	; (1af64 <smp_pairing_random+0x23c>)
   1ae52:	4b45      	ldr	r3, [pc, #276]	; (1af68 <smp_pairing_random+0x240>)
		BT_ERR("Calculate confirm failed");
   1ae54:	4847      	ldr	r0, [pc, #284]	; (1af74 <smp_pairing_random+0x24c>)
   1ae56:	1ac9      	subs	r1, r1, r3
   1ae58:	08c9      	lsrs	r1, r1, #3
   1ae5a:	0189      	lsls	r1, r1, #6
   1ae5c:	f041 0101 	orr.w	r1, r1, #1
   1ae60:	e7c9      	b.n	1adf6 <smp_pairing_random+0xce>
	switch (smp->method) {
   1ae62:	2300      	movs	r3, #0
   1ae64:	e7e8      	b.n	1ae38 <smp_pairing_random+0x110>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1ae66:	2210      	movs	r2, #16
   1ae68:	4641      	mov	r1, r8
   1ae6a:	f104 0017 	add.w	r0, r4, #23
   1ae6e:	f00a fd69 	bl	25944 <memcmp>
   1ae72:	b120      	cbz	r0, 1ae7e <smp_pairing_random+0x156>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1ae74:	2504      	movs	r5, #4
}
   1ae76:	4628      	mov	r0, r5
   1ae78:	b01e      	add	sp, #120	; 0x78
   1ae7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (smp->method) {
   1ae7e:	7a21      	ldrb	r1, [r4, #8]
   1ae80:	2905      	cmp	r1, #5
   1ae82:	d857      	bhi.n	1af34 <smp_pairing_random+0x20c>
   1ae84:	e8df f001 	tbb	[pc, r1]
   1ae88:	033e3e61 	.word	0x033e3e61
   1ae8c:	6156      	.short	0x6156
	sys_memcpy_swap(m, u, 32);
   1ae8e:	4b38      	ldr	r3, [pc, #224]	; (1af70 <smp_pairing_random+0x248>)
   1ae90:	2220      	movs	r2, #32
   1ae92:	6819      	ldr	r1, [r3, #0]
   1ae94:	a80a      	add	r0, sp, #40	; 0x28
   1ae96:	f7fe ff85 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ae9a:	2220      	movs	r2, #32
   1ae9c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1aea0:	a812      	add	r0, sp, #72	; 0x48
   1aea2:	f7fe ff7f 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1aea6:	2210      	movs	r2, #16
   1aea8:	4639      	mov	r1, r7
   1aeaa:	a81a      	add	r0, sp, #104	; 0x68
   1aeac:	f7fe ff7a 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1aeb0:	2210      	movs	r2, #16
   1aeb2:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1aeb6:	a806      	add	r0, sp, #24
   1aeb8:	f7fe ff74 	bl	19da4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1aebc:	ab06      	add	r3, sp, #24
   1aebe:	2250      	movs	r2, #80	; 0x50
   1aec0:	a90a      	add	r1, sp, #40	; 0x28
   1aec2:	4618      	mov	r0, r3
   1aec4:	f00c f86c 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   1aec8:	2800      	cmp	r0, #0
   1aeca:	d196      	bne.n	1adfa <smp_pairing_random+0xd2>
	memcpy(passkey, xs + 12, 4);
   1aecc:	a909      	add	r1, sp, #36	; 0x24
   1aece:	2204      	movs	r2, #4
   1aed0:	a805      	add	r0, sp, #20
   1aed2:	f00a fd47 	bl	25964 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aed6:	9b05      	ldr	r3, [sp, #20]
   1aed8:	4927      	ldr	r1, [pc, #156]	; (1af78 <smp_pairing_random+0x250>)
   1aeda:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aedc:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aede:	fbb3 f2f1 	udiv	r2, r3, r1
   1aee2:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aee6:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aee8:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1aeea:	f00c f955 	bl	27198 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1aeee:	2109      	movs	r1, #9
   1aef0:	f00c f952 	bl	27198 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1aef4:	4b21      	ldr	r3, [pc, #132]	; (1af7c <smp_pairing_random+0x254>)
   1aef6:	9905      	ldr	r1, [sp, #20]
   1aef8:	681b      	ldr	r3, [r3, #0]
   1aefa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1aefe:	689b      	ldr	r3, [r3, #8]
   1af00:	4798      	blx	r3
			return 0;
   1af02:	e7b8      	b.n	1ae76 <smp_pairing_random+0x14e>
			smp->passkey_round++;
   1af04:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1af08:	3301      	adds	r3, #1
   1af0a:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1af0c:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1af0e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1af12:	d01a      	beq.n	1af4a <smp_pairing_random+0x222>
			if (bt_rand(smp->prnd, 16)) {
   1af14:	2110      	movs	r1, #16
   1af16:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1af1a:	f004 f837 	bl	1ef8c <bt_rand>
   1af1e:	2800      	cmp	r0, #0
   1af20:	f47f af6b 	bne.w	1adfa <smp_pairing_random+0xd2>
			atomic_set_bit(smp->allowed_cmds,
   1af24:	2103      	movs	r1, #3
   1af26:	4620      	mov	r0, r4
   1af28:	f00c f936 	bl	27198 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   1af2c:	f7ff fbd6 	bl	1a6dc <smp_send_pairing_confirm>
   1af30:	4605      	mov	r5, r0
   1af32:	e7a0      	b.n	1ae76 <smp_pairing_random+0x14e>
   1af34:	4b0c      	ldr	r3, [pc, #48]	; (1af68 <smp_pairing_random+0x240>)
   1af36:	4a0b      	ldr	r2, [pc, #44]	; (1af64 <smp_pairing_random+0x23c>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1af38:	4811      	ldr	r0, [pc, #68]	; (1af80 <smp_pairing_random+0x258>)
   1af3a:	1ad2      	subs	r2, r2, r3
   1af3c:	08d2      	lsrs	r2, r2, #3
   1af3e:	0192      	lsls	r2, r2, #6
   1af40:	f042 0201 	orr.w	r2, r2, #1
   1af44:	f009 fe04 	bl	24b50 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1af48:	e757      	b.n	1adfa <smp_pairing_random+0xd2>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1af4a:	2107      	movs	r1, #7
   1af4c:	4630      	mov	r0, r6
   1af4e:	f00c f8e1 	bl	27114 <atomic_test_bit>
   1af52:	b108      	cbz	r0, 1af58 <smp_pairing_random+0x230>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1af54:	2109      	movs	r1, #9
   1af56:	e753      	b.n	1ae00 <smp_pairing_random+0xd8>
		return compute_and_send_central_dhcheck(smp);
   1af58:	4620      	mov	r0, r4
   1af5a:	f7ff f875 	bl	1a048 <compute_and_send_central_dhcheck>
   1af5e:	e7e7      	b.n	1af30 <smp_pairing_random+0x208>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1af60:	2505      	movs	r5, #5
   1af62:	e788      	b.n	1ae76 <smp_pairing_random+0x14e>
   1af64:	00028688 	.word	0x00028688
   1af68:	00028618 	.word	0x00028618
   1af6c:	0002efb1 	.word	0x0002efb1
   1af70:	20002250 	.word	0x20002250
   1af74:	0002f0be 	.word	0x0002f0be
   1af78:	000f4240 	.word	0x000f4240
   1af7c:	20002194 	.word	0x20002194
   1af80:	0002ef5d 	.word	0x0002ef5d

0001af84 <smp_pairing_complete>:
{
   1af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1af86:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   1af8a:	4605      	mov	r5, r0
   1af8c:	1d07      	adds	r7, r0, #4
	if (!status) {
   1af8e:	b9e9      	cbnz	r1, 1afcc <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1af90:	210d      	movs	r1, #13
   1af92:	4638      	mov	r0, r7
   1af94:	f00c f8be 	bl	27114 <atomic_test_bit>
		if (bond_flag) {
   1af98:	4606      	mov	r6, r0
   1af9a:	b118      	cbz	r0, 1afa4 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1af9c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1afa0:	f000 fc8c 	bl	1b8bc <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1afa4:	4b24      	ldr	r3, [pc, #144]	; (1b038 <smp_pairing_complete+0xb4>)
   1afa6:	681b      	ldr	r3, [r3, #0]
   1afa8:	b123      	cbz	r3, 1afb4 <smp_pairing_complete+0x30>
   1afaa:	699b      	ldr	r3, [r3, #24]
		    bt_auth && bt_auth->pairing_failed) {
   1afac:	b113      	cbz	r3, 1afb4 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   1afae:	4631      	mov	r1, r6
   1afb0:	4620      	mov	r0, r4
   1afb2:	4798      	blx	r3
	smp_reset(smp);
   1afb4:	4628      	mov	r0, r5
   1afb6:	f00c f96d 	bl	27294 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1afba:	7a62      	ldrb	r2, [r4, #9]
   1afbc:	7aa3      	ldrb	r3, [r4, #10]
   1afbe:	429a      	cmp	r2, r3
   1afc0:	d039      	beq.n	1b036 <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   1afc2:	4620      	mov	r0, r4
}
   1afc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1afc8:	f00c ba1a 	b.w	27400 <bt_smp_start_security>
	switch (smp_err) {
   1afcc:	3901      	subs	r1, #1
   1afce:	b2c9      	uxtb	r1, r1
   1afd0:	290e      	cmp	r1, #14
   1afd2:	bf9c      	itt	ls
   1afd4:	4b19      	ldrls	r3, [pc, #100]	; (1b03c <smp_pairing_complete+0xb8>)
   1afd6:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1afd8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1afdc:	bf88      	it	hi
   1afde:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   1afe0:	b143      	cbz	r3, 1aff4 <smp_pairing_complete+0x70>
   1afe2:	7b1b      	ldrb	r3, [r3, #12]
   1afe4:	bb03      	cbnz	r3, 1b028 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   1afe6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1afea:	f000 fb93 	bl	1b714 <bt_keys_clear>
			conn->le.keys = NULL;
   1afee:	2300      	movs	r3, #0
   1aff0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1aff4:	2102      	movs	r1, #2
   1aff6:	4638      	mov	r0, r7
   1aff8:	f00c f88c 	bl	27114 <atomic_test_bit>
   1affc:	b940      	cbnz	r0, 1b010 <smp_pairing_complete+0x8c>
	switch (err) {
   1affe:	2e07      	cmp	r6, #7
   1b000:	bf96      	itet	ls
   1b002:	4b0f      	ldrls	r3, [pc, #60]	; (1b040 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b004:	211f      	movhi	r1, #31
   1b006:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1b008:	4632      	mov	r2, r6
   1b00a:	4620      	mov	r0, r4
   1b00c:	f7fb f964 	bl	162d8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1b010:	2103      	movs	r1, #3
   1b012:	4638      	mov	r0, r7
   1b014:	f00c f87e 	bl	27114 <atomic_test_bit>
   1b018:	2800      	cmp	r0, #0
   1b01a:	d0cb      	beq.n	1afb4 <smp_pairing_complete+0x30>
   1b01c:	4b06      	ldr	r3, [pc, #24]	; (1b038 <smp_pairing_complete+0xb4>)
   1b01e:	681b      	ldr	r3, [r3, #0]
   1b020:	2b00      	cmp	r3, #0
   1b022:	d0c7      	beq.n	1afb4 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   1b024:	69db      	ldr	r3, [r3, #28]
   1b026:	e7c1      	b.n	1afac <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1b028:	2102      	movs	r1, #2
   1b02a:	4638      	mov	r0, r7
   1b02c:	f00c f872 	bl	27114 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1b030:	2800      	cmp	r0, #0
   1b032:	d1d8      	bne.n	1afe6 <smp_pairing_complete+0x62>
   1b034:	e7de      	b.n	1aff4 <smp_pairing_complete+0x70>
}
   1b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b038:	20002194 	.word	0x20002194
   1b03c:	0002f20c 	.word	0x0002f20c
   1b040:	0002f224 	.word	0x0002f224

0001b044 <bt_smp_recv>:
{
   1b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1b046:	898b      	ldrh	r3, [r1, #12]
{
   1b048:	4607      	mov	r7, r0
   1b04a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1b04c:	b95b      	cbnz	r3, 1b066 <bt_smp_recv+0x22>
   1b04e:	493a      	ldr	r1, [pc, #232]	; (1b138 <bt_smp_recv+0xf4>)
   1b050:	4b3a      	ldr	r3, [pc, #232]	; (1b13c <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1b052:	483b      	ldr	r0, [pc, #236]	; (1b140 <bt_smp_recv+0xfc>)
   1b054:	1ac9      	subs	r1, r1, r3
   1b056:	08c9      	lsrs	r1, r1, #3
   1b058:	0189      	lsls	r1, r1, #6
   1b05a:	f041 0101 	orr.w	r1, r1, #1
   1b05e:	f009 fd6a 	bl	24b36 <log_0>
}
   1b062:	2000      	movs	r0, #0
   1b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b066:	2101      	movs	r1, #1
   1b068:	f105 0008 	add.w	r0, r5, #8
   1b06c:	f000 ff6a 	bl	1bf44 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b070:	2104      	movs	r1, #4
   1b072:	4606      	mov	r6, r0
   1b074:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1b078:	f00c f84c 	bl	27114 <atomic_test_bit>
   1b07c:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1b080:	7831      	ldrb	r1, [r6, #0]
   1b082:	b150      	cbz	r0, 1b09a <bt_smp_recv+0x56>
   1b084:	4a2c      	ldr	r2, [pc, #176]	; (1b138 <bt_smp_recv+0xf4>)
   1b086:	4b2d      	ldr	r3, [pc, #180]	; (1b13c <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1b088:	482e      	ldr	r0, [pc, #184]	; (1b144 <bt_smp_recv+0x100>)
   1b08a:	1ad2      	subs	r2, r2, r3
   1b08c:	08d2      	lsrs	r2, r2, #3
   1b08e:	0192      	lsls	r2, r2, #6
   1b090:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b094:	f009 fd5c 	bl	24b50 <log_1>
		return 0;
   1b098:	e7e3      	b.n	1b062 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1b09a:	290e      	cmp	r1, #14
   1b09c:	d908      	bls.n	1b0b0 <bt_smp_recv+0x6c>
   1b09e:	4a26      	ldr	r2, [pc, #152]	; (1b138 <bt_smp_recv+0xf4>)
   1b0a0:	4b26      	ldr	r3, [pc, #152]	; (1b13c <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1b0a2:	4829      	ldr	r0, [pc, #164]	; (1b148 <bt_smp_recv+0x104>)
   1b0a4:	1ad2      	subs	r2, r2, r3
   1b0a6:	08d2      	lsrs	r2, r2, #3
   1b0a8:	0192      	lsls	r2, r2, #6
   1b0aa:	f042 0202 	orr.w	r2, r2, #2
   1b0ae:	e7f1      	b.n	1b094 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1b0b0:	4f26      	ldr	r7, [pc, #152]	; (1b14c <bt_smp_recv+0x108>)
   1b0b2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1b0b6:	b973      	cbnz	r3, 1b0d6 <bt_smp_recv+0x92>
   1b0b8:	4b20      	ldr	r3, [pc, #128]	; (1b13c <bt_smp_recv+0xf8>)
   1b0ba:	4a1f      	ldr	r2, [pc, #124]	; (1b138 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1b0bc:	4824      	ldr	r0, [pc, #144]	; (1b150 <bt_smp_recv+0x10c>)
   1b0be:	1ad2      	subs	r2, r2, r3
   1b0c0:	08d2      	lsrs	r2, r2, #3
   1b0c2:	0192      	lsls	r2, r2, #6
   1b0c4:	f042 0202 	orr.w	r2, r2, #2
   1b0c8:	f009 fd42 	bl	24b50 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1b0cc:	2107      	movs	r1, #7
		smp_error(smp, err);
   1b0ce:	4620      	mov	r0, r4
   1b0d0:	f00c f9f9 	bl	274c6 <smp_error>
   1b0d4:	e7c5      	b.n	1b062 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1b0d6:	4620      	mov	r0, r4
   1b0d8:	f00c f846 	bl	27168 <atomic_test_and_clear_bit>
   1b0dc:	7831      	ldrb	r1, [r6, #0]
   1b0de:	b970      	cbnz	r0, 1b0fe <bt_smp_recv+0xba>
   1b0e0:	4b16      	ldr	r3, [pc, #88]	; (1b13c <bt_smp_recv+0xf8>)
   1b0e2:	4a15      	ldr	r2, [pc, #84]	; (1b138 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1b0e4:	481b      	ldr	r0, [pc, #108]	; (1b154 <bt_smp_recv+0x110>)
   1b0e6:	1ad2      	subs	r2, r2, r3
   1b0e8:	08d2      	lsrs	r2, r2, #3
   1b0ea:	0192      	lsls	r2, r2, #6
   1b0ec:	f042 0202 	orr.w	r2, r2, #2
   1b0f0:	f009 fd2e 	bl	24b50 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1b0f4:	7833      	ldrb	r3, [r6, #0]
   1b0f6:	2b05      	cmp	r3, #5
   1b0f8:	d0b3      	beq.n	1b062 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b0fa:	2108      	movs	r1, #8
   1b0fc:	e7e7      	b.n	1b0ce <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1b0fe:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1b102:	89a8      	ldrh	r0, [r5, #12]
   1b104:	791b      	ldrb	r3, [r3, #4]
   1b106:	4283      	cmp	r3, r0
   1b108:	d00d      	beq.n	1b126 <bt_smp_recv+0xe2>
   1b10a:	4a0c      	ldr	r2, [pc, #48]	; (1b13c <bt_smp_recv+0xf8>)
   1b10c:	4b0a      	ldr	r3, [pc, #40]	; (1b138 <bt_smp_recv+0xf4>)
   1b10e:	1a9b      	subs	r3, r3, r2
   1b110:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b112:	019b      	lsls	r3, r3, #6
   1b114:	460a      	mov	r2, r1
   1b116:	f043 0301 	orr.w	r3, r3, #1
   1b11a:	4601      	mov	r1, r0
   1b11c:	480e      	ldr	r0, [pc, #56]	; (1b158 <bt_smp_recv+0x114>)
   1b11e:	f009 fd2b 	bl	24b78 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1b122:	210a      	movs	r1, #10
   1b124:	e7d3      	b.n	1b0ce <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1b126:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1b12a:	4620      	mov	r0, r4
   1b12c:	4629      	mov	r1, r5
   1b12e:	4798      	blx	r3
	if (err) {
   1b130:	4601      	mov	r1, r0
   1b132:	2800      	cmp	r0, #0
   1b134:	d095      	beq.n	1b062 <bt_smp_recv+0x1e>
   1b136:	e7ca      	b.n	1b0ce <bt_smp_recv+0x8a>
   1b138:	00028688 	.word	0x00028688
   1b13c:	00028618 	.word	0x00028618
   1b140:	0002f0d7 	.word	0x0002f0d7
   1b144:	0002f0f2 	.word	0x0002f0f2
   1b148:	0002f123 	.word	0x0002f123
   1b14c:	00028bd0 	.word	0x00028bd0
   1b150:	0002f145 	.word	0x0002f145
   1b154:	0002f15f 	.word	0x0002f15f
   1b158:	0002e85b 	.word	0x0002e85b

0001b15c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1b15c:	4b19      	ldr	r3, [pc, #100]	; (1b1c4 <bt_smp_pkey_ready+0x68>)
{
   1b15e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1b160:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1b162:	b958      	cbnz	r0, 1b17c <bt_smp_pkey_ready+0x20>
   1b164:	4918      	ldr	r1, [pc, #96]	; (1b1c8 <bt_smp_pkey_ready+0x6c>)
   1b166:	4b19      	ldr	r3, [pc, #100]	; (1b1cc <bt_smp_pkey_ready+0x70>)
		BT_WARN("Public key not available");
   1b168:	4819      	ldr	r0, [pc, #100]	; (1b1d0 <bt_smp_pkey_ready+0x74>)
   1b16a:	1ac9      	subs	r1, r1, r3
   1b16c:	08c9      	lsrs	r1, r1, #3
   1b16e:	0189      	lsls	r1, r1, #6
}
   1b170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1b174:	f041 0102 	orr.w	r1, r1, #2
   1b178:	f009 bcdd 	b.w	24b36 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b17c:	4c15      	ldr	r4, [pc, #84]	; (1b1d4 <bt_smp_pkey_ready+0x78>)
	z_impl_k_sem_give(sem);
   1b17e:	4816      	ldr	r0, [pc, #88]	; (1b1d8 <bt_smp_pkey_ready+0x7c>)
   1b180:	f006 fc28 	bl	219d4 <z_impl_k_sem_give>
   1b184:	f3bf 8f5b 	dmb	ish
   1b188:	6863      	ldr	r3, [r4, #4]
   1b18a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1b18e:	065b      	lsls	r3, r3, #25
   1b190:	d517      	bpl.n	1b1c2 <bt_smp_pkey_ready+0x66>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1b192:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b196:	78db      	ldrb	r3, [r3, #3]
   1b198:	b99b      	cbnz	r3, 1b1c2 <bt_smp_pkey_ready+0x66>
			err = sc_send_public_key(smp);
   1b19a:	4620      	mov	r0, r4
   1b19c:	f7fe fe7e 	bl	19e9c <sc_send_public_key>
			if (err) {
   1b1a0:	4601      	mov	r1, r0
   1b1a2:	b110      	cbz	r0, 1b1aa <bt_smp_pkey_ready+0x4e>
				smp_error(smp, err);
   1b1a4:	4620      	mov	r0, r4
   1b1a6:	f00c f98e 	bl	274c6 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b1aa:	f3bf 8f5b 	dmb	ish
   1b1ae:	e854 3f00 	ldrex	r3, [r4]
   1b1b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b1b6:	e844 3200 	strex	r2, r3, [r4]
   1b1ba:	2a00      	cmp	r2, #0
   1b1bc:	d1f7      	bne.n	1b1ae <bt_smp_pkey_ready+0x52>
   1b1be:	f3bf 8f5b 	dmb	ish
}
   1b1c2:	bd10      	pop	{r4, pc}
   1b1c4:	20002250 	.word	0x20002250
   1b1c8:	00028688 	.word	0x00028688
   1b1cc:	00028618 	.word	0x00028618
   1b1d0:	0002f17a 	.word	0x0002f17a
   1b1d4:	20001910 	.word	0x20001910
   1b1d8:	200006ec 	.word	0x200006ec

0001b1dc <smp_ident_addr_info>:
{
   1b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1b1e0:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b1e2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b1e6:	7833      	ldrb	r3, [r6, #0]
{
   1b1e8:	4605      	mov	r5, r0
   1b1ea:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1b1ee:	b313      	cbz	r3, 1b236 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1b1f0:	79b3      	ldrb	r3, [r6, #6]
   1b1f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b1f6:	2bc0      	cmp	r3, #192	; 0xc0
   1b1f8:	d01d      	beq.n	1b236 <smp_ident_addr_info+0x5a>
   1b1fa:	4b52      	ldr	r3, [pc, #328]	; (1b344 <smp_ident_addr_info+0x168>)
   1b1fc:	4c52      	ldr	r4, [pc, #328]	; (1b348 <smp_ident_addr_info+0x16c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1b1fe:	4630      	mov	r0, r6
   1b200:	1ae4      	subs	r4, r4, r3
   1b202:	f7f9 fa4d 	bl	146a0 <bt_addr_le_str_real>
   1b206:	f7f6 fdb5 	bl	11d74 <z_log_strdup>
   1b20a:	08e4      	lsrs	r4, r4, #3
   1b20c:	01a4      	lsls	r4, r4, #6
   1b20e:	f044 0401 	orr.w	r4, r4, #1
   1b212:	4601      	mov	r1, r0
   1b214:	4622      	mov	r2, r4
   1b216:	484d      	ldr	r0, [pc, #308]	; (1b34c <smp_ident_addr_info+0x170>)
   1b218:	f009 fc9a 	bl	24b50 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b21c:	4638      	mov	r0, r7
   1b21e:	f7f9 fa3f 	bl	146a0 <bt_addr_le_str_real>
   1b222:	f7f6 fda7 	bl	11d74 <z_log_strdup>
   1b226:	4622      	mov	r2, r4
   1b228:	4601      	mov	r1, r0
   1b22a:	4849      	ldr	r0, [pc, #292]	; (1b350 <smp_ident_addr_info+0x174>)
   1b22c:	f009 fc90 	bl	24b50 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1b230:	200a      	movs	r0, #10
}
   1b232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1b236:	2207      	movs	r2, #7
   1b238:	4631      	mov	r1, r6
   1b23a:	4638      	mov	r0, r7
   1b23c:	f00a fb82 	bl	25944 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1b240:	b168      	cbz	r0, 1b25e <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1b242:	7a20      	ldrb	r0, [r4, #8]
   1b244:	4631      	mov	r1, r6
   1b246:	f000 fa55 	bl	1b6f4 <bt_keys_find_addr>
		if (keys) {
   1b24a:	4680      	mov	r8, r0
   1b24c:	b138      	cbz	r0, 1b25e <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1b24e:	4601      	mov	r1, r0
   1b250:	4628      	mov	r0, r5
   1b252:	f00b ff68 	bl	27126 <update_keys_check>
   1b256:	b300      	cbz	r0, 1b29a <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1b258:	4640      	mov	r0, r8
   1b25a:	f000 fa5b 	bl	1b714 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b25e:	210d      	movs	r1, #13
   1b260:	1d28      	adds	r0, r5, #4
   1b262:	f00b ff57 	bl	27114 <atomic_test_bit>
   1b266:	2800      	cmp	r0, #0
   1b268:	d046      	beq.n	1b2f8 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b26a:	7a21      	ldrb	r1, [r4, #8]
   1b26c:	463a      	mov	r2, r7
   1b26e:	2002      	movs	r0, #2
   1b270:	f00c f9db 	bl	2762a <bt_keys_get_type>
		if (!keys) {
   1b274:	4680      	mov	r8, r0
   1b276:	b990      	cbnz	r0, 1b29e <smp_ident_addr_info+0xc2>
   1b278:	4a32      	ldr	r2, [pc, #200]	; (1b344 <smp_ident_addr_info+0x168>)
   1b27a:	4c33      	ldr	r4, [pc, #204]	; (1b348 <smp_ident_addr_info+0x16c>)
			BT_ERR("Unable to get keys for %s",
   1b27c:	4638      	mov	r0, r7
   1b27e:	1aa4      	subs	r4, r4, r2
   1b280:	f7f9 fa0e 	bl	146a0 <bt_addr_le_str_real>
   1b284:	f7f6 fd76 	bl	11d74 <z_log_strdup>
   1b288:	08e4      	lsrs	r4, r4, #3
   1b28a:	01a4      	lsls	r4, r4, #6
   1b28c:	f044 0401 	orr.w	r4, r4, #1
   1b290:	4601      	mov	r1, r0
   1b292:	4622      	mov	r2, r4
   1b294:	482f      	ldr	r0, [pc, #188]	; (1b354 <smp_ident_addr_info+0x178>)
   1b296:	f009 fc5b 	bl	24b50 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1b29a:	2008      	movs	r0, #8
   1b29c:	e7c9      	b.n	1b232 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b29e:	78e3      	ldrb	r3, [r4, #3]
   1b2a0:	2b00      	cmp	r3, #0
   1b2a2:	d13c      	bne.n	1b31e <smp_ident_addr_info+0x142>
			dst = &conn->le.resp_addr;
   1b2a4:	f104 019e 	add.w	r1, r4, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b2a8:	780b      	ldrb	r3, [r1, #0]
   1b2aa:	2b01      	cmp	r3, #1
   1b2ac:	d121      	bne.n	1b2f2 <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1b2ae:	798b      	ldrb	r3, [r1, #6]
   1b2b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b2b4:	2b40      	cmp	r3, #64	; 0x40
   1b2b6:	d11c      	bne.n	1b2f2 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1b2b8:	2206      	movs	r2, #6
   1b2ba:	3101      	adds	r1, #1
   1b2bc:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1b2c0:	f00a fb50 	bl	25964 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b2c4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1b2c8:	b19b      	cbz	r3, 1b2f2 <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1b2ca:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
   1b2ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b2d2:	2bc0      	cmp	r3, #192	; 0xc0
   1b2d4:	d00d      	beq.n	1b2f2 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1b2d6:	2207      	movs	r2, #7
   1b2d8:	4631      	mov	r1, r6
   1b2da:	f108 0001 	add.w	r0, r8, #1
   1b2de:	f00a fb41 	bl	25964 <memcpy>
   1b2e2:	2207      	movs	r2, #7
   1b2e4:	4631      	mov	r1, r6
   1b2e6:	4638      	mov	r0, r7
   1b2e8:	f00a fb3c 	bl	25964 <memcpy>
				bt_conn_identity_resolved(conn);
   1b2ec:	4620      	mov	r0, r4
   1b2ee:	f7fa ffab 	bl	16248 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1b2f2:	4640      	mov	r0, r8
   1b2f4:	f7f9 ffc6 	bl	15284 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b2f8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1b2fc:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b300:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b302:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b306:	d503      	bpl.n	1b310 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b308:	210a      	movs	r1, #10
   1b30a:	4628      	mov	r0, r5
   1b30c:	f00b ff44 	bl	27198 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b310:	78e3      	ldrb	r3, [r4, #3]
   1b312:	b13b      	cbz	r3, 1b324 <smp_ident_addr_info+0x148>
	if (!smp->local_dist && !smp->remote_dist) {
   1b314:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1b318:	b174      	cbz	r4, 1b338 <smp_ident_addr_info+0x15c>
	return 0;
   1b31a:	2000      	movs	r0, #0
   1b31c:	e789      	b.n	1b232 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1b31e:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1b322:	e7c1      	b.n	1b2a8 <smp_ident_addr_info+0xcc>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1b324:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d1f3      	bne.n	1b314 <smp_ident_addr_info+0x138>
		err = bt_smp_distribute_keys(smp);
   1b32c:	4628      	mov	r0, r5
   1b32e:	f7fe fdd7 	bl	19ee0 <bt_smp_distribute_keys>
		if (err) {
   1b332:	2800      	cmp	r0, #0
   1b334:	d0ee      	beq.n	1b314 <smp_ident_addr_info+0x138>
   1b336:	e77c      	b.n	1b232 <smp_ident_addr_info+0x56>
		smp_pairing_complete(smp, 0);
   1b338:	4621      	mov	r1, r4
   1b33a:	4628      	mov	r0, r5
   1b33c:	f7ff fe22 	bl	1af84 <smp_pairing_complete>
   1b340:	e7eb      	b.n	1b31a <smp_ident_addr_info+0x13e>
   1b342:	bf00      	nop
   1b344:	00028618 	.word	0x00028618
   1b348:	00028688 	.word	0x00028688
   1b34c:	0002f193 	.word	0x0002f193
   1b350:	0002eeeb 	.word	0x0002eeeb
   1b354:	0002f022 	.word	0x0002f022

0001b358 <smp_central_ident>:
{
   1b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b35c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1b35e:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   1b362:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b364:	210d      	movs	r1, #13
   1b366:	3004      	adds	r0, #4
   1b368:	f00b fed4 	bl	27114 <atomic_test_bit>
   1b36c:	b350      	cbz	r0, 1b3c4 <smp_central_ident+0x6c>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b36e:	f106 0790 	add.w	r7, r6, #144	; 0x90
   1b372:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1b374:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b378:	463a      	mov	r2, r7
   1b37a:	2004      	movs	r0, #4
   1b37c:	f00c f955 	bl	2762a <bt_keys_get_type>
		if (!keys) {
   1b380:	4605      	mov	r5, r0
   1b382:	b998      	cbnz	r0, 1b3ac <smp_central_ident+0x54>
   1b384:	4a23      	ldr	r2, [pc, #140]	; (1b414 <smp_central_ident+0xbc>)
   1b386:	4c24      	ldr	r4, [pc, #144]	; (1b418 <smp_central_ident+0xc0>)
			BT_ERR("Unable to get keys for %s",
   1b388:	4638      	mov	r0, r7
   1b38a:	1aa4      	subs	r4, r4, r2
   1b38c:	f7f9 f988 	bl	146a0 <bt_addr_le_str_real>
   1b390:	f7f6 fcf0 	bl	11d74 <z_log_strdup>
   1b394:	08e4      	lsrs	r4, r4, #3
   1b396:	01a4      	lsls	r4, r4, #6
   1b398:	f044 0401 	orr.w	r4, r4, #1
   1b39c:	4601      	mov	r1, r0
   1b39e:	4622      	mov	r2, r4
   1b3a0:	481e      	ldr	r0, [pc, #120]	; (1b41c <smp_central_ident+0xc4>)
   1b3a2:	f009 fbd5 	bl	24b50 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1b3a6:	2008      	movs	r0, #8
}
   1b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1b3ac:	2202      	movs	r2, #2
   1b3ae:	4641      	mov	r1, r8
   1b3b0:	3018      	adds	r0, #24
   1b3b2:	f00a fad7 	bl	25964 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1b3b6:	2208      	movs	r2, #8
   1b3b8:	f108 0102 	add.w	r1, r8, #2
   1b3bc:	f105 0010 	add.w	r0, r5, #16
   1b3c0:	f00a fad0 	bl	25964 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1b3c4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b3c8:	f023 0201 	bic.w	r2, r3, #1
   1b3cc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b3d0:	079a      	lsls	r2, r3, #30
   1b3d2:	d50a      	bpl.n	1b3ea <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b3d4:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b3d6:	4620      	mov	r0, r4
   1b3d8:	f00b fede 	bl	27198 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b3dc:	78f3      	ldrb	r3, [r6, #3]
   1b3de:	b143      	cbz	r3, 1b3f2 <smp_central_ident+0x9a>
	if (!smp->local_dist && !smp->remote_dist) {
   1b3e0:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1b3e4:	b17d      	cbz	r5, 1b406 <smp_central_ident+0xae>
	return 0;
   1b3e6:	2000      	movs	r0, #0
   1b3e8:	e7de      	b.n	1b3a8 <smp_central_ident+0x50>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b3ea:	075b      	lsls	r3, r3, #29
   1b3ec:	d5f6      	bpl.n	1b3dc <smp_central_ident+0x84>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b3ee:	210a      	movs	r1, #10
   1b3f0:	e7f1      	b.n	1b3d6 <smp_central_ident+0x7e>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1b3f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	d1f2      	bne.n	1b3e0 <smp_central_ident+0x88>
		err = bt_smp_distribute_keys(smp);
   1b3fa:	4620      	mov	r0, r4
   1b3fc:	f7fe fd70 	bl	19ee0 <bt_smp_distribute_keys>
		if (err) {
   1b400:	2800      	cmp	r0, #0
   1b402:	d0ed      	beq.n	1b3e0 <smp_central_ident+0x88>
   1b404:	e7d0      	b.n	1b3a8 <smp_central_ident+0x50>
		smp_pairing_complete(smp, 0);
   1b406:	4620      	mov	r0, r4
   1b408:	4629      	mov	r1, r5
   1b40a:	f7ff fdbb 	bl	1af84 <smp_pairing_complete>
	return 0;
   1b40e:	4628      	mov	r0, r5
   1b410:	e7ca      	b.n	1b3a8 <smp_central_ident+0x50>
   1b412:	bf00      	nop
   1b414:	00028618 	.word	0x00028618
   1b418:	00028688 	.word	0x00028688
   1b41c:	0002f022 	.word	0x0002f022

0001b420 <smp_pairing_failed>:
{
   1b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b422:	4a15      	ldr	r2, [pc, #84]	; (1b478 <smp_pairing_failed+0x58>)
   1b424:	4b15      	ldr	r3, [pc, #84]	; (1b47c <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1b426:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b428:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1b42c:	7829      	ldrb	r1, [r5, #0]
   1b42e:	1ad2      	subs	r2, r2, r3
   1b430:	08d2      	lsrs	r2, r2, #3
{
   1b432:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1b434:	0192      	lsls	r2, r2, #6
   1b436:	4812      	ldr	r0, [pc, #72]	; (1b480 <smp_pairing_failed+0x60>)
   1b438:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b43c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1b43e:	f009 fb87 	bl	24b50 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b442:	210a      	movs	r1, #10
   1b444:	4638      	mov	r0, r7
   1b446:	f00b fe8f 	bl	27168 <atomic_test_and_clear_bit>
   1b44a:	b140      	cbz	r0, 1b45e <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1b44c:	4b0d      	ldr	r3, [pc, #52]	; (1b484 <smp_pairing_failed+0x64>)
   1b44e:	681b      	ldr	r3, [r3, #0]
   1b450:	b963      	cbnz	r3, 1b46c <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1b452:	4620      	mov	r0, r4
   1b454:	7829      	ldrb	r1, [r5, #0]
   1b456:	f7ff fd95 	bl	1af84 <smp_pairing_complete>
}
   1b45a:	2000      	movs	r0, #0
   1b45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1b45e:	210b      	movs	r1, #11
   1b460:	4638      	mov	r0, r7
   1b462:	f00b fe81 	bl	27168 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b466:	2800      	cmp	r0, #0
   1b468:	d1f0      	bne.n	1b44c <smp_pairing_failed+0x2c>
   1b46a:	e7f2      	b.n	1b452 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1b46c:	691b      	ldr	r3, [r3, #16]
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d0ef      	beq.n	1b452 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1b472:	4630      	mov	r0, r6
   1b474:	4798      	blx	r3
   1b476:	e7ec      	b.n	1b452 <smp_pairing_failed+0x32>
   1b478:	00028688 	.word	0x00028688
   1b47c:	00028618 	.word	0x00028618
   1b480:	0002f1a7 	.word	0x0002f1a7
   1b484:	20002194 	.word	0x20002194

0001b488 <bt_smp_encrypt_change>:
{
   1b488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1b48c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b48e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1b492:	4604      	mov	r4, r0
   1b494:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b496:	4630      	mov	r0, r6
   1b498:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1b49a:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b49e:	f00b fe63 	bl	27168 <atomic_test_and_clear_bit>
   1b4a2:	2800      	cmp	r0, #0
   1b4a4:	d05f      	beq.n	1b566 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   1b4a6:	b1cf      	cbz	r7, 1b4dc <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b4a8:	2103      	movs	r1, #3
   1b4aa:	4630      	mov	r0, r6
   1b4ac:	f00b fe32 	bl	27114 <atomic_test_bit>
   1b4b0:	2800      	cmp	r0, #0
   1b4b2:	d058      	beq.n	1b566 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   1b4b4:	4638      	mov	r0, r7
   1b4b6:	f7f9 fd99 	bl	14fec <bt_security_err_get>
	switch (auth_err) {
   1b4ba:	3801      	subs	r0, #1
   1b4bc:	b2c0      	uxtb	r0, r0
   1b4be:	2808      	cmp	r0, #8
   1b4c0:	bf9a      	itte	ls
   1b4c2:	4b2e      	ldrls	r3, [pc, #184]	; (1b57c <bt_smp_encrypt_change+0xf4>)
   1b4c4:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1b4c6:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b4c8:	2102      	movs	r1, #2
   1b4ca:	4630      	mov	r0, r6
   1b4cc:	f00b fe64 	bl	27198 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1b4d0:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1b4d2:	4628      	mov	r0, r5
}
   1b4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1b4d8:	f7ff bd54 	b.w	1af84 <smp_pairing_complete>
	if (!conn->encrypt) {
   1b4dc:	f898 300b 	ldrb.w	r3, [r8, #11]
   1b4e0:	2b00      	cmp	r3, #0
   1b4e2:	d040      	beq.n	1b566 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b4e4:	2103      	movs	r1, #3
   1b4e6:	4630      	mov	r0, r6
   1b4e8:	f00b fe14 	bl	27114 <atomic_test_bit>
   1b4ec:	b920      	cbnz	r0, 1b4f8 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   1b4ee:	4628      	mov	r0, r5
}
   1b4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1b4f4:	f00b bece 	b.w	27294 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b4f8:	2105      	movs	r1, #5
   1b4fa:	4630      	mov	r0, r6
   1b4fc:	f00b fe0a 	bl	27114 <atomic_test_bit>
   1b500:	b1b8      	cbz	r0, 1b532 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1b502:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1b506:	071f      	lsls	r7, r3, #28
   1b508:	d507      	bpl.n	1b51a <bt_smp_encrypt_change+0x92>
   1b50a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1b50e:	0718      	lsls	r0, r3, #28
   1b510:	d503      	bpl.n	1b51a <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1b512:	2111      	movs	r1, #17
   1b514:	4630      	mov	r0, r6
   1b516:	f00b fe3f 	bl	27198 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b51a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1b51e:	f023 0308 	bic.w	r3, r3, #8
   1b522:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b526:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1b52a:	f023 0308 	bic.w	r3, r3, #8
   1b52e:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1b532:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1b536:	07d9      	lsls	r1, r3, #31
   1b538:	d517      	bpl.n	1b56a <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1b53a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b53c:	4628      	mov	r0, r5
   1b53e:	f00b fe2b 	bl	27198 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b542:	2102      	movs	r1, #2
   1b544:	4630      	mov	r0, r6
   1b546:	f00b fe27 	bl	27198 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b54a:	f898 3003 	ldrb.w	r3, [r8, #3]
   1b54e:	b913      	cbnz	r3, 1b556 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   1b550:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1b554:	b93b      	cbnz	r3, 1b566 <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
   1b556:	4628      	mov	r0, r5
   1b558:	f7fe fcc2 	bl	19ee0 <bt_smp_distribute_keys>
   1b55c:	b918      	cbnz	r0, 1b566 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   1b55e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1b562:	2900      	cmp	r1, #0
   1b564:	d0b5      	beq.n	1b4d2 <bt_smp_encrypt_change+0x4a>
}
   1b566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b56a:	079a      	lsls	r2, r3, #30
   1b56c:	d501      	bpl.n	1b572 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b56e:	2108      	movs	r1, #8
   1b570:	e7e4      	b.n	1b53c <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b572:	075b      	lsls	r3, r3, #29
   1b574:	d5e5      	bpl.n	1b542 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b576:	210a      	movs	r1, #10
   1b578:	e7e0      	b.n	1b53c <bt_smp_encrypt_change+0xb4>
   1b57a:	bf00      	nop
   1b57c:	0002f21b 	.word	0x0002f21b

0001b580 <smp_timeout>:
   1b580:	4b0b      	ldr	r3, [pc, #44]	; (1b5b0 <smp_timeout+0x30>)
   1b582:	490c      	ldr	r1, [pc, #48]	; (1b5b4 <smp_timeout+0x34>)
{
   1b584:	b510      	push	{r4, lr}
   1b586:	1ac9      	subs	r1, r1, r3
   1b588:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1b58a:	0189      	lsls	r1, r1, #6
{
   1b58c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1b58e:	f041 0101 	orr.w	r1, r1, #1
   1b592:	4809      	ldr	r0, [pc, #36]	; (1b5b8 <smp_timeout+0x38>)
   1b594:	f009 facf 	bl	24b36 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1b598:	f5a4 70f0 	sub.w	r0, r4, #480	; 0x1e0
   1b59c:	2108      	movs	r1, #8
   1b59e:	f7ff fcf1 	bl	1af84 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b5a2:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
   1b5a6:	2104      	movs	r1, #4
}
   1b5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b5ac:	f00b bdf4 	b.w	27198 <atomic_set_bit>
   1b5b0:	00028618 	.word	0x00028618
   1b5b4:	00028688 	.word	0x00028688
   1b5b8:	0002f1b3 	.word	0x0002f1b3

0001b5bc <smp_ident_sent>:
{
   1b5bc:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1b5be:	7883      	ldrb	r3, [r0, #2]
   1b5c0:	2b01      	cmp	r3, #1
   1b5c2:	d122      	bne.n	1b60a <smp_ident_sent+0x4e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1b5c4:	2106      	movs	r1, #6
   1b5c6:	f00a fce5 	bl	25f94 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1b5ca:	4604      	mov	r4, r0
   1b5cc:	b970      	cbnz	r0, 1b5ec <smp_ident_sent+0x30>
   1b5ce:	490f      	ldr	r1, [pc, #60]	; (1b60c <smp_ident_sent+0x50>)
   1b5d0:	4a0f      	ldr	r2, [pc, #60]	; (1b610 <smp_ident_sent+0x54>)
   1b5d2:	4810      	ldr	r0, [pc, #64]	; (1b614 <smp_ident_sent+0x58>)
   1b5d4:	f240 332f 	movw	r3, #815	; 0x32f
   1b5d8:	f009 f88e 	bl	246f8 <printk>
   1b5dc:	480e      	ldr	r0, [pc, #56]	; (1b618 <smp_ident_sent+0x5c>)
   1b5de:	f009 f88b 	bl	246f8 <printk>
   1b5e2:	480b      	ldr	r0, [pc, #44]	; (1b610 <smp_ident_sent+0x54>)
   1b5e4:	f240 312f 	movw	r1, #815	; 0x32f
   1b5e8:	f009 fa77 	bl	24ada <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1b5ec:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1b5f0:	f023 0301 	bic.w	r3, r3, #1
   1b5f4:	f804 3c08 	strb.w	r3, [r4, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1b5f8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1b5fc:	b929      	cbnz	r1, 1b60a <smp_ident_sent+0x4e>
			smp_pairing_complete(smp, 0);
   1b5fe:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
}
   1b602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1b606:	f7ff bcbd 	b.w	1af84 <smp_pairing_complete>
}
   1b60a:	bd10      	pop	{r4, pc}
   1b60c:	0002e6da 	.word	0x0002e6da
   1b610:	0002f1bf 	.word	0x0002f1bf
   1b614:	000290f5 	.word	0x000290f5
   1b618:	0002f1ee 	.word	0x0002f1ee

0001b61c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1b61c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b61e:	4b07      	ldr	r3, [pc, #28]	; (1b63c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1b620:	4807      	ldr	r0, [pc, #28]	; (1b640 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b622:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1b626:	f003 0306 	and.w	r3, r3, #6
   1b62a:	1f9a      	subs	r2, r3, #6
   1b62c:	4253      	negs	r3, r2
   1b62e:	4153      	adcs	r3, r2
   1b630:	4a04      	ldr	r2, [pc, #16]	; (1b644 <bt_smp_init+0x28>)
   1b632:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1b634:	f7fa fa5c 	bl	15af0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1b638:	2000      	movs	r0, #0
   1b63a:	bd08      	pop	{r3, pc}
   1b63c:	200002b0 	.word	0x200002b0
   1b640:	200004c4 	.word	0x200004c4
   1b644:	20002675 	.word	0x20002675

0001b648 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1b648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1b64a:	4c11      	ldr	r4, [pc, #68]	; (1b690 <bt_keys_get_addr+0x48>)
   1b64c:	7823      	ldrb	r3, [r4, #0]
   1b64e:	4283      	cmp	r3, r0
{
   1b650:	4605      	mov	r5, r0
   1b652:	460e      	mov	r6, r1
   1b654:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1b656:	d00b      	beq.n	1b670 <bt_keys_get_addr+0x28>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1b658:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1b65a:	480e      	ldr	r0, [pc, #56]	; (1b694 <bt_keys_get_addr+0x4c>)
   1b65c:	9400      	str	r4, [sp, #0]
   1b65e:	2207      	movs	r2, #7
   1b660:	4669      	mov	r1, sp
   1b662:	f8cd 4003 	str.w	r4, [sp, #3]
   1b666:	f00a f96d 	bl	25944 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1b66a:	b140      	cbz	r0, 1b67e <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1b66c:	4620      	mov	r0, r4
   1b66e:	e00d      	b.n	1b68c <bt_keys_get_addr+0x44>
   1b670:	2207      	movs	r2, #7
   1b672:	1c60      	adds	r0, r4, #1
   1b674:	f00a f966 	bl	25944 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1b678:	2800      	cmp	r0, #0
   1b67a:	d1ed      	bne.n	1b658 <bt_keys_get_addr+0x10>
   1b67c:	e7f6      	b.n	1b66c <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1b67e:	4805      	ldr	r0, [pc, #20]	; (1b694 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1b680:	703d      	strb	r5, [r7, #0]
   1b682:	2207      	movs	r2, #7
   1b684:	4631      	mov	r1, r6
   1b686:	f00a f96d 	bl	25964 <memcpy>
		return keys;
   1b68a:	4801      	ldr	r0, [pc, #4]	; (1b690 <bt_keys_get_addr+0x48>)
}
   1b68c:	b003      	add	sp, #12
   1b68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b690:	20002254 	.word	0x20002254
   1b694:	20002255 	.word	0x20002255

0001b698 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1b698:	460b      	mov	r3, r1
   1b69a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1b69c:	4a04      	ldr	r2, [pc, #16]	; (1b6b0 <bt_keys_foreach+0x18>)
{
   1b69e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1b6a0:	89d4      	ldrh	r4, [r2, #14]
   1b6a2:	4204      	tst	r4, r0
   1b6a4:	d002      	beq.n	1b6ac <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1b6a6:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1b6a8:	4610      	mov	r0, r2
   1b6aa:	4718      	bx	r3
}
   1b6ac:	bc10      	pop	{r4}
   1b6ae:	4770      	bx	lr
   1b6b0:	20002254 	.word	0x20002254

0001b6b4 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1b6b4:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1b6b6:	4903      	ldr	r1, [pc, #12]	; (1b6c4 <keys_commit+0x10>)
   1b6b8:	2200      	movs	r2, #0
   1b6ba:	2002      	movs	r0, #2
   1b6bc:	f7ff ffec 	bl	1b698 <bt_keys_foreach>
	}

	return 0;
}
   1b6c0:	2000      	movs	r0, #0
   1b6c2:	bd08      	pop	{r3, pc}
   1b6c4:	00027627 	.word	0x00027627

0001b6c8 <bt_keys_find>:
{
   1b6c8:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b6ca:	4c09      	ldr	r4, [pc, #36]	; (1b6f0 <bt_keys_find+0x28>)
{
   1b6cc:	460b      	mov	r3, r1
   1b6ce:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1b6d0:	89e2      	ldrh	r2, [r4, #14]
   1b6d2:	4202      	tst	r2, r0
   1b6d4:	d007      	beq.n	1b6e6 <bt_keys_find+0x1e>
   1b6d6:	7822      	ldrb	r2, [r4, #0]
   1b6d8:	429a      	cmp	r2, r3
   1b6da:	d104      	bne.n	1b6e6 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1b6dc:	2207      	movs	r2, #7
   1b6de:	1c60      	adds	r0, r4, #1
   1b6e0:	f00a f930 	bl	25944 <memcmp>
   1b6e4:	b108      	cbz	r0, 1b6ea <bt_keys_find+0x22>
	return NULL;
   1b6e6:	2000      	movs	r0, #0
}
   1b6e8:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1b6ea:	4620      	mov	r0, r4
   1b6ec:	e7fc      	b.n	1b6e8 <bt_keys_find+0x20>
   1b6ee:	bf00      	nop
   1b6f0:	20002254 	.word	0x20002254

0001b6f4 <bt_keys_find_addr>:
{
   1b6f4:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1b6f6:	4c06      	ldr	r4, [pc, #24]	; (1b710 <bt_keys_find_addr+0x1c>)
   1b6f8:	7823      	ldrb	r3, [r4, #0]
   1b6fa:	4283      	cmp	r3, r0
   1b6fc:	d104      	bne.n	1b708 <bt_keys_find_addr+0x14>
   1b6fe:	2207      	movs	r2, #7
   1b700:	1c60      	adds	r0, r4, #1
   1b702:	f00a f91f 	bl	25944 <memcmp>
   1b706:	b108      	cbz	r0, 1b70c <bt_keys_find_addr+0x18>
	return NULL;
   1b708:	2000      	movs	r0, #0
}
   1b70a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1b70c:	4620      	mov	r0, r4
   1b70e:	e7fc      	b.n	1b70a <bt_keys_find_addr+0x16>
   1b710:	20002254 	.word	0x20002254

0001b714 <bt_keys_clear>:
{
   1b714:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b716:	7a03      	ldrb	r3, [r0, #8]
   1b718:	075b      	lsls	r3, r3, #29
{
   1b71a:	b08c      	sub	sp, #48	; 0x30
   1b71c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1b71e:	d501      	bpl.n	1b724 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1b720:	f7f9 fe88 	bl	15434 <bt_id_del>
		if (keys->id) {
   1b724:	4625      	mov	r5, r4
   1b726:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b72a:	b1aa      	cbz	r2, 1b758 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1b72c:	ae02      	add	r6, sp, #8
   1b72e:	2104      	movs	r1, #4
   1b730:	4630      	mov	r0, r6
   1b732:	f008 ff45 	bl	245c0 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b736:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b738:	462b      	mov	r3, r5
   1b73a:	4a08      	ldr	r2, [pc, #32]	; (1b75c <bt_keys_clear+0x48>)
   1b73c:	2124      	movs	r1, #36	; 0x24
   1b73e:	a803      	add	r0, sp, #12
   1b740:	f7f9 f872 	bl	14828 <bt_settings_encode_key>
		settings_delete(key);
   1b744:	a803      	add	r0, sp, #12
   1b746:	f009 fccf 	bl	250e8 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1b74a:	225c      	movs	r2, #92	; 0x5c
   1b74c:	2100      	movs	r1, #0
   1b74e:	4620      	mov	r0, r4
   1b750:	f00a f913 	bl	2597a <memset>
}
   1b754:	b00c      	add	sp, #48	; 0x30
   1b756:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1b758:	9200      	str	r2, [sp, #0]
   1b75a:	e7ed      	b.n	1b738 <bt_keys_clear+0x24>
   1b75c:	0002f30d 	.word	0x0002f30d

0001b760 <keys_set>:
{
   1b760:	b570      	push	{r4, r5, r6, lr}
   1b762:	4614      	mov	r4, r2
   1b764:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1b766:	4605      	mov	r5, r0
   1b768:	b970      	cbnz	r0, 1b788 <keys_set+0x28>
   1b76a:	494b      	ldr	r1, [pc, #300]	; (1b898 <keys_set+0x138>)
   1b76c:	4b4b      	ldr	r3, [pc, #300]	; (1b89c <keys_set+0x13c>)
		BT_ERR("Insufficient number of arguments");
   1b76e:	484c      	ldr	r0, [pc, #304]	; (1b8a0 <keys_set+0x140>)
   1b770:	1ac9      	subs	r1, r1, r3
   1b772:	08c9      	lsrs	r1, r1, #3
   1b774:	0189      	lsls	r1, r1, #6
   1b776:	f041 0101 	orr.w	r1, r1, #1
   1b77a:	f009 f9dc 	bl	24b36 <log_0>
		return -EINVAL;
   1b77e:	f06f 0415 	mvn.w	r4, #21
}
   1b782:	4620      	mov	r0, r4
   1b784:	b018      	add	sp, #96	; 0x60
   1b786:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1b788:	2250      	movs	r2, #80	; 0x50
   1b78a:	a904      	add	r1, sp, #16
   1b78c:	4618      	mov	r0, r3
   1b78e:	47a0      	blx	r4
	if (len < 0) {
   1b790:	1e04      	subs	r4, r0, #0
   1b792:	da0b      	bge.n	1b7ac <keys_set+0x4c>
   1b794:	4a40      	ldr	r2, [pc, #256]	; (1b898 <keys_set+0x138>)
   1b796:	4b41      	ldr	r3, [pc, #260]	; (1b89c <keys_set+0x13c>)
		BT_ERR("Failed to read value (err %zd)", len);
   1b798:	4842      	ldr	r0, [pc, #264]	; (1b8a4 <keys_set+0x144>)
   1b79a:	1ad2      	subs	r2, r2, r3
   1b79c:	08d2      	lsrs	r2, r2, #3
   1b79e:	0192      	lsls	r2, r2, #6
   1b7a0:	f042 0201 	orr.w	r2, r2, #1
   1b7a4:	4621      	mov	r1, r4
   1b7a6:	f009 f9d3 	bl	24b50 <log_1>
   1b7aa:	e7e8      	b.n	1b77e <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1b7ac:	a902      	add	r1, sp, #8
   1b7ae:	4628      	mov	r0, r5
   1b7b0:	f00a f927 	bl	25a02 <bt_settings_decode_key>
	if (err) {
   1b7b4:	4606      	mov	r6, r0
   1b7b6:	b148      	cbz	r0, 1b7cc <keys_set+0x6c>
   1b7b8:	4a37      	ldr	r2, [pc, #220]	; (1b898 <keys_set+0x138>)
   1b7ba:	4b38      	ldr	r3, [pc, #224]	; (1b89c <keys_set+0x13c>)
		BT_ERR("Unable to decode address %s", name);
   1b7bc:	483a      	ldr	r0, [pc, #232]	; (1b8a8 <keys_set+0x148>)
   1b7be:	1ad2      	subs	r2, r2, r3
   1b7c0:	08d2      	lsrs	r2, r2, #3
   1b7c2:	0192      	lsls	r2, r2, #6
   1b7c4:	f042 0201 	orr.w	r2, r2, #1
   1b7c8:	4629      	mov	r1, r5
   1b7ca:	e7ec      	b.n	1b7a6 <keys_set+0x46>
	settings_name_next(name, &next);
   1b7cc:	a901      	add	r1, sp, #4
   1b7ce:	4628      	mov	r0, r5
   1b7d0:	f009 fcb1 	bl	25136 <settings_name_next>
	if (!next) {
   1b7d4:	9801      	ldr	r0, [sp, #4]
   1b7d6:	b170      	cbz	r0, 1b7f6 <keys_set+0x96>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b7d8:	4631      	mov	r1, r6
   1b7da:	220a      	movs	r2, #10
   1b7dc:	f009 fff1 	bl	257c2 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b7e0:	4601      	mov	r1, r0
   1b7e2:	b140      	cbz	r0, 1b7f6 <keys_set+0x96>
   1b7e4:	4a2c      	ldr	r2, [pc, #176]	; (1b898 <keys_set+0x138>)
   1b7e6:	4b2d      	ldr	r3, [pc, #180]	; (1b89c <keys_set+0x13c>)
			BT_ERR("Invalid local identity %lu", next_id);
   1b7e8:	4830      	ldr	r0, [pc, #192]	; (1b8ac <keys_set+0x14c>)
   1b7ea:	1ad2      	subs	r2, r2, r3
   1b7ec:	08d2      	lsrs	r2, r2, #3
   1b7ee:	0192      	lsls	r2, r2, #6
   1b7f0:	f042 0201 	orr.w	r2, r2, #1
   1b7f4:	e7d7      	b.n	1b7a6 <keys_set+0x46>
	if (!len) {
   1b7f6:	b9e4      	cbnz	r4, 1b832 <keys_set+0xd2>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1b7f8:	aa02      	add	r2, sp, #8
   1b7fa:	4621      	mov	r1, r4
   1b7fc:	203f      	movs	r0, #63	; 0x3f
   1b7fe:	f7ff ff63 	bl	1b6c8 <bt_keys_find>
		if (keys) {
   1b802:	b120      	cbz	r0, 1b80e <keys_set+0xae>
			(void)memset(keys, 0, sizeof(*keys));
   1b804:	225c      	movs	r2, #92	; 0x5c
   1b806:	4621      	mov	r1, r4
   1b808:	f00a f8b7 	bl	2597a <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1b80c:	e7b9      	b.n	1b782 <keys_set+0x22>
   1b80e:	4a23      	ldr	r2, [pc, #140]	; (1b89c <keys_set+0x13c>)
   1b810:	4d21      	ldr	r5, [pc, #132]	; (1b898 <keys_set+0x138>)
			BT_WARN("Unable to find deleted keys for %s",
   1b812:	a802      	add	r0, sp, #8
   1b814:	1aad      	subs	r5, r5, r2
   1b816:	f7f8 ff43 	bl	146a0 <bt_addr_le_str_real>
   1b81a:	f7f6 faab 	bl	11d74 <z_log_strdup>
   1b81e:	08ed      	lsrs	r5, r5, #3
   1b820:	01ad      	lsls	r5, r5, #6
   1b822:	f045 0502 	orr.w	r5, r5, #2
   1b826:	4601      	mov	r1, r0
   1b828:	462a      	mov	r2, r5
   1b82a:	4821      	ldr	r0, [pc, #132]	; (1b8b0 <keys_set+0x150>)
   1b82c:	f009 f990 	bl	24b50 <log_1>
   1b830:	e7a7      	b.n	1b782 <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1b832:	a902      	add	r1, sp, #8
   1b834:	2000      	movs	r0, #0
   1b836:	f7ff ff07 	bl	1b648 <bt_keys_get_addr>
	if (!keys) {
   1b83a:	4605      	mov	r5, r0
   1b83c:	b998      	cbnz	r0, 1b866 <keys_set+0x106>
   1b83e:	4a17      	ldr	r2, [pc, #92]	; (1b89c <keys_set+0x13c>)
   1b840:	4c15      	ldr	r4, [pc, #84]	; (1b898 <keys_set+0x138>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1b842:	a802      	add	r0, sp, #8
   1b844:	1aa4      	subs	r4, r4, r2
   1b846:	f7f8 ff2b 	bl	146a0 <bt_addr_le_str_real>
   1b84a:	f7f6 fa93 	bl	11d74 <z_log_strdup>
   1b84e:	08e4      	lsrs	r4, r4, #3
   1b850:	01a4      	lsls	r4, r4, #6
   1b852:	f044 0401 	orr.w	r4, r4, #1
   1b856:	4601      	mov	r1, r0
   1b858:	4622      	mov	r2, r4
   1b85a:	4816      	ldr	r0, [pc, #88]	; (1b8b4 <keys_set+0x154>)
   1b85c:	f009 f978 	bl	24b50 <log_1>
		return -ENOMEM;
   1b860:	f06f 040b 	mvn.w	r4, #11
   1b864:	e78d      	b.n	1b782 <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1b866:	2c50      	cmp	r4, #80	; 0x50
   1b868:	d00f      	beq.n	1b88a <keys_set+0x12a>
   1b86a:	4a0c      	ldr	r2, [pc, #48]	; (1b89c <keys_set+0x13c>)
   1b86c:	4b0a      	ldr	r3, [pc, #40]	; (1b898 <keys_set+0x138>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1b86e:	4812      	ldr	r0, [pc, #72]	; (1b8b8 <keys_set+0x158>)
   1b870:	1a9b      	subs	r3, r3, r2
   1b872:	08db      	lsrs	r3, r3, #3
   1b874:	019b      	lsls	r3, r3, #6
   1b876:	f043 0301 	orr.w	r3, r3, #1
   1b87a:	2250      	movs	r2, #80	; 0x50
   1b87c:	4621      	mov	r1, r4
   1b87e:	f009 f97b 	bl	24b78 <log_2>
			bt_keys_clear(keys);
   1b882:	4628      	mov	r0, r5
   1b884:	f7ff ff46 	bl	1b714 <bt_keys_clear>
			return -EINVAL;
   1b888:	e779      	b.n	1b77e <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1b88a:	4622      	mov	r2, r4
   1b88c:	a904      	add	r1, sp, #16
   1b88e:	300c      	adds	r0, #12
   1b890:	f00a f868 	bl	25964 <memcpy>
	return 0;
   1b894:	2400      	movs	r4, #0
   1b896:	e774      	b.n	1b782 <keys_set+0x22>
   1b898:	00028660 	.word	0x00028660
   1b89c:	00028618 	.word	0x00028618
   1b8a0:	0002da99 	.word	0x0002da99
   1b8a4:	0002f26e 	.word	0x0002f26e
   1b8a8:	0002e9c4 	.word	0x0002e9c4
   1b8ac:	0002e9e0 	.word	0x0002e9e0
   1b8b0:	0002f28d 	.word	0x0002f28d
   1b8b4:	0002f2b0 	.word	0x0002f2b0
   1b8b8:	0002f2cf 	.word	0x0002f2cf

0001b8bc <bt_keys_store>:
{
   1b8bc:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1b8be:	4605      	mov	r5, r0
{
   1b8c0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1b8c2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1b8c6:	4604      	mov	r4, r0
	if (keys->id) {
   1b8c8:	b30a      	cbz	r2, 1b90e <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1b8ca:	ae02      	add	r6, sp, #8
   1b8cc:	2104      	movs	r1, #4
   1b8ce:	4630      	mov	r0, r6
   1b8d0:	f008 fe76 	bl	245c0 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b8d4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b8d6:	4a0f      	ldr	r2, [pc, #60]	; (1b914 <bt_keys_store+0x58>)
   1b8d8:	462b      	mov	r3, r5
   1b8da:	2124      	movs	r1, #36	; 0x24
   1b8dc:	a803      	add	r0, sp, #12
   1b8de:	f7f8 ffa3 	bl	14828 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1b8e2:	f104 010c 	add.w	r1, r4, #12
   1b8e6:	2250      	movs	r2, #80	; 0x50
   1b8e8:	a803      	add	r0, sp, #12
   1b8ea:	f7f6 ffe7 	bl	128bc <settings_save_one>
	if (err) {
   1b8ee:	4604      	mov	r4, r0
   1b8f0:	b150      	cbz	r0, 1b908 <bt_keys_store+0x4c>
   1b8f2:	4a09      	ldr	r2, [pc, #36]	; (1b918 <bt_keys_store+0x5c>)
   1b8f4:	4b09      	ldr	r3, [pc, #36]	; (1b91c <bt_keys_store+0x60>)
   1b8f6:	1ad2      	subs	r2, r2, r3
   1b8f8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1b8fa:	0192      	lsls	r2, r2, #6
   1b8fc:	4601      	mov	r1, r0
   1b8fe:	f042 0201 	orr.w	r2, r2, #1
   1b902:	4807      	ldr	r0, [pc, #28]	; (1b920 <bt_keys_store+0x64>)
   1b904:	f009 f924 	bl	24b50 <log_1>
}
   1b908:	4620      	mov	r0, r4
   1b90a:	b00c      	add	sp, #48	; 0x30
   1b90c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1b90e:	9200      	str	r2, [sp, #0]
   1b910:	e7e1      	b.n	1b8d6 <bt_keys_store+0x1a>
   1b912:	bf00      	nop
   1b914:	0002f30d 	.word	0x0002f30d
   1b918:	00028660 	.word	0x00028660
   1b91c:	00028618 	.word	0x00028618
   1b920:	0002f2ed 	.word	0x0002f2ed

0001b924 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b924:	4b02      	ldr	r3, [pc, #8]	; (1b930 <net_buf_pool_get+0xc>)
   1b926:	2234      	movs	r2, #52	; 0x34
   1b928:	fb02 3000 	mla	r0, r2, r0, r3
   1b92c:	4770      	bx	lr
   1b92e:	bf00      	nop
   1b930:	20000750 	.word	0x20000750

0001b934 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b934:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b936:	4a07      	ldr	r2, [pc, #28]	; (1b954 <net_buf_id+0x20>)
   1b938:	2134      	movs	r1, #52	; 0x34
   1b93a:	fb01 2303 	mla	r3, r1, r3, r2
   1b93e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b944:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b946:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b948:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b94c:	fbb0 f0f3 	udiv	r0, r0, r3
   1b950:	4770      	bx	lr
   1b952:	bf00      	nop
   1b954:	20000750 	.word	0x20000750

0001b958 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b958:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b95a:	4a0a      	ldr	r2, [pc, #40]	; (1b984 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b95c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b95e:	2434      	movs	r4, #52	; 0x34
   1b960:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1b964:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b968:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b96a:	6823      	ldr	r3, [r4, #0]
   1b96c:	429a      	cmp	r2, r3
   1b96e:	bf94      	ite	ls
   1b970:	600a      	strls	r2, [r1, #0]
   1b972:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b974:	f7ff ffde 	bl	1b934 <net_buf_id>
   1b978:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1b97c:	fb02 3000 	mla	r0, r2, r0, r3
   1b980:	bd10      	pop	{r4, pc}
   1b982:	bf00      	nop
   1b984:	20000750 	.word	0x20000750

0001b988 <net_buf_reset>:
{
   1b988:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1b98a:	7943      	ldrb	r3, [r0, #5]
{
   1b98c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1b98e:	b14b      	cbz	r3, 1b9a4 <net_buf_reset+0x1c>
   1b990:	490d      	ldr	r1, [pc, #52]	; (1b9c8 <net_buf_reset+0x40>)
   1b992:	480e      	ldr	r0, [pc, #56]	; (1b9cc <net_buf_reset+0x44>)
   1b994:	4a0e      	ldr	r2, [pc, #56]	; (1b9d0 <net_buf_reset+0x48>)
   1b996:	2356      	movs	r3, #86	; 0x56
   1b998:	f008 feae 	bl	246f8 <printk>
   1b99c:	480c      	ldr	r0, [pc, #48]	; (1b9d0 <net_buf_reset+0x48>)
   1b99e:	2156      	movs	r1, #86	; 0x56
   1b9a0:	f009 f89b 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1b9a4:	6823      	ldr	r3, [r4, #0]
   1b9a6:	b14b      	cbz	r3, 1b9bc <net_buf_reset+0x34>
   1b9a8:	490a      	ldr	r1, [pc, #40]	; (1b9d4 <net_buf_reset+0x4c>)
   1b9aa:	4808      	ldr	r0, [pc, #32]	; (1b9cc <net_buf_reset+0x44>)
   1b9ac:	4a08      	ldr	r2, [pc, #32]	; (1b9d0 <net_buf_reset+0x48>)
   1b9ae:	2357      	movs	r3, #87	; 0x57
   1b9b0:	f008 fea2 	bl	246f8 <printk>
   1b9b4:	4806      	ldr	r0, [pc, #24]	; (1b9d0 <net_buf_reset+0x48>)
   1b9b6:	2157      	movs	r1, #87	; 0x57
   1b9b8:	f009 f88f 	bl	24ada <assert_post_action>
	buf->len  = 0U;
   1b9bc:	2300      	movs	r3, #0
   1b9be:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1b9c0:	6923      	ldr	r3, [r4, #16]
   1b9c2:	60a3      	str	r3, [r4, #8]
}
   1b9c4:	bd10      	pop	{r4, pc}
   1b9c6:	bf00      	nop
   1b9c8:	0002f33e 	.word	0x0002f33e
   1b9cc:	000290f5 	.word	0x000290f5
   1b9d0:	0002f31a 	.word	0x0002f31a
   1b9d4:	0002f34f 	.word	0x0002f34f

0001b9d8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9dc:	4605      	mov	r5, r0
   1b9de:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b9e0:	4610      	mov	r0, r2
   1b9e2:	4619      	mov	r1, r3
{
   1b9e4:	4616      	mov	r6, r2
   1b9e6:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b9e8:	f00c fbf6 	bl	281d8 <sys_clock_timeout_end_calc>
   1b9ec:	4681      	mov	r9, r0
   1b9ee:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b9f0:	b94d      	cbnz	r5, 1ba06 <net_buf_alloc_len+0x2e>
   1b9f2:	4978      	ldr	r1, [pc, #480]	; (1bbd4 <net_buf_alloc_len+0x1fc>)
   1b9f4:	4878      	ldr	r0, [pc, #480]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1b9f6:	4a79      	ldr	r2, [pc, #484]	; (1bbdc <net_buf_alloc_len+0x204>)
   1b9f8:	23f4      	movs	r3, #244	; 0xf4
   1b9fa:	f008 fe7d 	bl	246f8 <printk>
   1b9fe:	4877      	ldr	r0, [pc, #476]	; (1bbdc <net_buf_alloc_len+0x204>)
   1ba00:	21f4      	movs	r1, #244	; 0xf4
   1ba02:	f009 f86a 	bl	24ada <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1ba06:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
   1ba0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba0e:	f3ef 8b11 	mrs	fp, BASEPRI
   1ba12:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba1a:	4640      	mov	r0, r8
   1ba1c:	f005 fc5c 	bl	212d8 <z_spin_lock_valid>
   1ba20:	b968      	cbnz	r0, 1ba3e <net_buf_alloc_len+0x66>
   1ba22:	4a6f      	ldr	r2, [pc, #444]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1ba24:	496f      	ldr	r1, [pc, #444]	; (1bbe4 <net_buf_alloc_len+0x20c>)
   1ba26:	486c      	ldr	r0, [pc, #432]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1ba28:	2381      	movs	r3, #129	; 0x81
   1ba2a:	f008 fe65 	bl	246f8 <printk>
   1ba2e:	486e      	ldr	r0, [pc, #440]	; (1bbe8 <net_buf_alloc_len+0x210>)
   1ba30:	4641      	mov	r1, r8
   1ba32:	f008 fe61 	bl	246f8 <printk>
   1ba36:	486a      	ldr	r0, [pc, #424]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1ba38:	2181      	movs	r1, #129	; 0x81
   1ba3a:	f009 f84e 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba3e:	4640      	mov	r0, r8
   1ba40:	f005 fc68 	bl	21314 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1ba44:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1ba46:	2b00      	cmp	r3, #0
   1ba48:	f000 8082 	beq.w	1bb50 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1ba4c:	8c2a      	ldrh	r2, [r5, #32]
   1ba4e:	429a      	cmp	r2, r3
   1ba50:	d952      	bls.n	1baf8 <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
   1ba52:	2200      	movs	r2, #0
   1ba54:	2300      	movs	r3, #0
   1ba56:	4628      	mov	r0, r5
   1ba58:	f005 ff50 	bl	218fc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1ba5c:	4604      	mov	r4, r0
   1ba5e:	2800      	cmp	r0, #0
   1ba60:	d04a      	beq.n	1baf8 <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba62:	4640      	mov	r0, r8
   1ba64:	f005 fc46 	bl	212f4 <z_spin_unlock_valid>
   1ba68:	b968      	cbnz	r0, 1ba86 <net_buf_alloc_len+0xae>
   1ba6a:	4a5d      	ldr	r2, [pc, #372]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1ba6c:	495f      	ldr	r1, [pc, #380]	; (1bbec <net_buf_alloc_len+0x214>)
   1ba6e:	485a      	ldr	r0, [pc, #360]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1ba70:	23ac      	movs	r3, #172	; 0xac
   1ba72:	f008 fe41 	bl	246f8 <printk>
   1ba76:	485e      	ldr	r0, [pc, #376]	; (1bbf0 <net_buf_alloc_len+0x218>)
   1ba78:	4641      	mov	r1, r8
   1ba7a:	f008 fe3d 	bl	246f8 <printk>
   1ba7e:	4858      	ldr	r0, [pc, #352]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1ba80:	21ac      	movs	r1, #172	; 0xac
   1ba82:	f009 f82a 	bl	24ada <assert_post_action>
	__asm__ volatile(
   1ba86:	f38b 8811 	msr	BASEPRI, fp
   1ba8a:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ba8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1ba92:	f1b8 0f00 	cmp.w	r8, #0
   1ba96:	f000 8099 	beq.w	1bbcc <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ba9a:	ea56 0307 	orrs.w	r3, r6, r7
   1ba9e:	d010      	beq.n	1bac2 <net_buf_alloc_len+0xea>
   1baa0:	1c7b      	adds	r3, r7, #1
   1baa2:	bf08      	it	eq
   1baa4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1baa8:	d00b      	beq.n	1bac2 <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1baaa:	f008 fabf 	bl	2402c <sys_clock_tick_get>
   1baae:	ebb9 0600 	subs.w	r6, r9, r0
   1bab2:	eb6a 0701 	sbc.w	r7, sl, r1
   1bab6:	2e00      	cmp	r6, #0
   1bab8:	f177 0300 	sbcs.w	r3, r7, #0
   1babc:	bfbc      	itt	lt
   1babe:	2600      	movlt	r6, #0
   1bac0:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bac2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bac4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1bbf4 <net_buf_alloc_len+0x21c>
   1bac8:	f04f 0a34 	mov.w	sl, #52	; 0x34
   1bacc:	fb0a 9303 	mla	r3, sl, r3, r9
   1bad0:	4632      	mov	r2, r6
   1bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bad4:	681b      	ldr	r3, [r3, #0]
   1bad6:	a901      	add	r1, sp, #4
   1bad8:	681d      	ldr	r5, [r3, #0]
   1bada:	4620      	mov	r0, r4
   1badc:	463b      	mov	r3, r7
   1bade:	47a8      	blx	r5
   1bae0:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1bae2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1bae4:	2800      	cmp	r0, #0
   1bae6:	d155      	bne.n	1bb94 <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
   1bae8:	79a0      	ldrb	r0, [r4, #6]
   1baea:	4621      	mov	r1, r4
   1baec:	fb00 900a 	mla	r0, r0, sl, r9
   1baf0:	f00c fad8 	bl	280a4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1baf4:	462c      	mov	r4, r5
}
   1baf6:	e049      	b.n	1bb8c <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
   1baf8:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1bafa:	1e63      	subs	r3, r4, #1
   1bafc:	846b      	strh	r3, [r5, #34]	; 0x22
   1bafe:	4640      	mov	r0, r8
   1bb00:	f005 fbf8 	bl	212f4 <z_spin_unlock_valid>
   1bb04:	b968      	cbnz	r0, 1bb22 <net_buf_alloc_len+0x14a>
   1bb06:	4a36      	ldr	r2, [pc, #216]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1bb08:	4938      	ldr	r1, [pc, #224]	; (1bbec <net_buf_alloc_len+0x214>)
   1bb0a:	4833      	ldr	r0, [pc, #204]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1bb0c:	23ac      	movs	r3, #172	; 0xac
   1bb0e:	f008 fdf3 	bl	246f8 <printk>
   1bb12:	4837      	ldr	r0, [pc, #220]	; (1bbf0 <net_buf_alloc_len+0x218>)
   1bb14:	4641      	mov	r1, r8
   1bb16:	f008 fdef 	bl	246f8 <printk>
   1bb1a:	4831      	ldr	r0, [pc, #196]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1bb1c:	21ac      	movs	r1, #172	; 0xac
   1bb1e:	f008 ffdc 	bl	24ada <assert_post_action>
   1bb22:	f38b 8811 	msr	BASEPRI, fp
   1bb26:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bb2a:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bb2c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bb30:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bb32:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bb36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bb38:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bb3c:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   1bb40:	482c      	ldr	r0, [pc, #176]	; (1bbf4 <net_buf_alloc_len+0x21c>)
   1bb42:	4b2d      	ldr	r3, [pc, #180]	; (1bbf8 <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
   1bb44:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1bb46:	1a2d      	subs	r5, r5, r0
   1bb48:	10ad      	asrs	r5, r5, #2
   1bb4a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1bb4c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1bb4e:	e79e      	b.n	1ba8e <net_buf_alloc_len+0xb6>
   1bb50:	4640      	mov	r0, r8
   1bb52:	f005 fbcf 	bl	212f4 <z_spin_unlock_valid>
   1bb56:	b968      	cbnz	r0, 1bb74 <net_buf_alloc_len+0x19c>
   1bb58:	4a21      	ldr	r2, [pc, #132]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1bb5a:	4924      	ldr	r1, [pc, #144]	; (1bbec <net_buf_alloc_len+0x214>)
   1bb5c:	481e      	ldr	r0, [pc, #120]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1bb5e:	23ac      	movs	r3, #172	; 0xac
   1bb60:	f008 fdca 	bl	246f8 <printk>
   1bb64:	4822      	ldr	r0, [pc, #136]	; (1bbf0 <net_buf_alloc_len+0x218>)
   1bb66:	4641      	mov	r1, r8
   1bb68:	f008 fdc6 	bl	246f8 <printk>
   1bb6c:	481c      	ldr	r0, [pc, #112]	; (1bbe0 <net_buf_alloc_len+0x208>)
   1bb6e:	21ac      	movs	r1, #172	; 0xac
   1bb70:	f008 ffb3 	bl	24ada <assert_post_action>
   1bb74:	f38b 8811 	msr	BASEPRI, fp
   1bb78:	f3bf 8f6f 	isb	sy
   1bb7c:	4632      	mov	r2, r6
   1bb7e:	463b      	mov	r3, r7
   1bb80:	4628      	mov	r0, r5
   1bb82:	f005 febb 	bl	218fc <z_impl_k_queue_get>
	if (!buf) {
   1bb86:	4604      	mov	r4, r0
   1bb88:	2800      	cmp	r0, #0
   1bb8a:	d180      	bne.n	1ba8e <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1bb8c:	4620      	mov	r0, r4
   1bb8e:	b003      	add	sp, #12
   1bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1bb94:	9b01      	ldr	r3, [sp, #4]
   1bb96:	4598      	cmp	r8, r3
   1bb98:	d90e      	bls.n	1bbb8 <net_buf_alloc_len+0x1e0>
   1bb9a:	4918      	ldr	r1, [pc, #96]	; (1bbfc <net_buf_alloc_len+0x224>)
   1bb9c:	4a0f      	ldr	r2, [pc, #60]	; (1bbdc <net_buf_alloc_len+0x204>)
   1bb9e:	480e      	ldr	r0, [pc, #56]	; (1bbd8 <net_buf_alloc_len+0x200>)
   1bba0:	f240 1355 	movw	r3, #341	; 0x155
   1bba4:	f008 fda8 	bl	246f8 <printk>
   1bba8:	4815      	ldr	r0, [pc, #84]	; (1bc00 <net_buf_alloc_len+0x228>)
   1bbaa:	f008 fda5 	bl	246f8 <printk>
   1bbae:	480b      	ldr	r0, [pc, #44]	; (1bbdc <net_buf_alloc_len+0x204>)
   1bbb0:	f240 1155 	movw	r1, #341	; 0x155
   1bbb4:	f008 ff91 	bl	24ada <assert_post_action>
	buf->frags = NULL;
   1bbb8:	2300      	movs	r3, #0
   1bbba:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1bbbc:	2301      	movs	r3, #1
   1bbbe:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1bbc0:	9b01      	ldr	r3, [sp, #4]
   1bbc2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1bbc4:	4620      	mov	r0, r4
   1bbc6:	f7ff fedf 	bl	1b988 <net_buf_reset>
	return buf;
   1bbca:	e7df      	b.n	1bb8c <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
   1bbcc:	f8c4 8010 	str.w	r8, [r4, #16]
   1bbd0:	e7f2      	b.n	1bbb8 <net_buf_alloc_len+0x1e0>
   1bbd2:	bf00      	nop
   1bbd4:	0002f369 	.word	0x0002f369
   1bbd8:	000290f5 	.word	0x000290f5
   1bbdc:	0002f31a 	.word	0x0002f31a
   1bbe0:	000291b5 	.word	0x000291b5
   1bbe4:	00029207 	.word	0x00029207
   1bbe8:	0002921c 	.word	0x0002921c
   1bbec:	000291db 	.word	0x000291db
   1bbf0:	000291f2 	.word	0x000291f2
   1bbf4:	20000750 	.word	0x20000750
   1bbf8:	c4ec4ec5 	.word	0xc4ec4ec5
   1bbfc:	0002f36e 	.word	0x0002f36e
   1bc00:	0002f37f 	.word	0x0002f37f

0001bc04 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bc08:	4606      	mov	r6, r0
   1bc0a:	f005 fe77 	bl	218fc <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1bc0e:	4605      	mov	r5, r0
   1bc10:	b150      	cbz	r0, 1bc28 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1bc12:	4f13      	ldr	r7, [pc, #76]	; (1bc60 <net_buf_get+0x5c>)
   1bc14:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1bc64 <net_buf_get+0x60>
   1bc18:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1bc68 <net_buf_get+0x64>
   1bc1c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bc1e:	7963      	ldrb	r3, [r4, #5]
   1bc20:	f013 0301 	ands.w	r3, r3, #1
   1bc24:	d103      	bne.n	1bc2e <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1bc26:	6023      	str	r3, [r4, #0]

	return buf;
}
   1bc28:	4628      	mov	r0, r5
   1bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bc2e:	2200      	movs	r2, #0
   1bc30:	2300      	movs	r3, #0
   1bc32:	4630      	mov	r0, r6
   1bc34:	f005 fe62 	bl	218fc <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1bc38:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1bc3a:	b958      	cbnz	r0, 1bc54 <net_buf_get+0x50>
   1bc3c:	4641      	mov	r1, r8
   1bc3e:	4648      	mov	r0, r9
   1bc40:	f240 13ad 	movw	r3, #429	; 0x1ad
   1bc44:	463a      	mov	r2, r7
   1bc46:	f008 fd57 	bl	246f8 <printk>
   1bc4a:	f240 11ad 	movw	r1, #429	; 0x1ad
   1bc4e:	4638      	mov	r0, r7
   1bc50:	f008 ff43 	bl	24ada <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1bc54:	7963      	ldrb	r3, [r4, #5]
   1bc56:	f023 0301 	bic.w	r3, r3, #1
   1bc5a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1bc5c:	6824      	ldr	r4, [r4, #0]
   1bc5e:	e7de      	b.n	1bc1e <net_buf_get+0x1a>
   1bc60:	0002f31a 	.word	0x0002f31a
   1bc64:	0002f382 	.word	0x0002f382
   1bc68:	000290f5 	.word	0x000290f5

0001bc6c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1bc6c:	b538      	push	{r3, r4, r5, lr}
   1bc6e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1bc70:	4604      	mov	r4, r0
   1bc72:	b958      	cbnz	r0, 1bc8c <net_buf_simple_reserve+0x20>
   1bc74:	490e      	ldr	r1, [pc, #56]	; (1bcb0 <net_buf_simple_reserve+0x44>)
   1bc76:	480f      	ldr	r0, [pc, #60]	; (1bcb4 <net_buf_simple_reserve+0x48>)
   1bc78:	4a0f      	ldr	r2, [pc, #60]	; (1bcb8 <net_buf_simple_reserve+0x4c>)
   1bc7a:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1bc7e:	f008 fd3b 	bl	246f8 <printk>
   1bc82:	480d      	ldr	r0, [pc, #52]	; (1bcb8 <net_buf_simple_reserve+0x4c>)
   1bc84:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1bc88:	f008 ff27 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1bc8c:	88a3      	ldrh	r3, [r4, #4]
   1bc8e:	b15b      	cbz	r3, 1bca8 <net_buf_simple_reserve+0x3c>
   1bc90:	490a      	ldr	r1, [pc, #40]	; (1bcbc <net_buf_simple_reserve+0x50>)
   1bc92:	4808      	ldr	r0, [pc, #32]	; (1bcb4 <net_buf_simple_reserve+0x48>)
   1bc94:	4a08      	ldr	r2, [pc, #32]	; (1bcb8 <net_buf_simple_reserve+0x4c>)
   1bc96:	f240 13c5 	movw	r3, #453	; 0x1c5
   1bc9a:	f008 fd2d 	bl	246f8 <printk>
   1bc9e:	4806      	ldr	r0, [pc, #24]	; (1bcb8 <net_buf_simple_reserve+0x4c>)
   1bca0:	f240 11c5 	movw	r1, #453	; 0x1c5
   1bca4:	f008 ff19 	bl	24ada <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1bca8:	68a3      	ldr	r3, [r4, #8]
   1bcaa:	442b      	add	r3, r5
   1bcac:	6023      	str	r3, [r4, #0]
}
   1bcae:	bd38      	pop	{r3, r4, r5, pc}
   1bcb0:	0002dc23 	.word	0x0002dc23
   1bcb4:	000290f5 	.word	0x000290f5
   1bcb8:	0002f31a 	.word	0x0002f31a
   1bcbc:	0002f38e 	.word	0x0002f38e

0001bcc0 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1bcc0:	b538      	push	{r3, r4, r5, lr}
   1bcc2:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1bcc4:	4605      	mov	r5, r0
   1bcc6:	b958      	cbnz	r0, 1bce0 <net_buf_put+0x20>
   1bcc8:	4913      	ldr	r1, [pc, #76]	; (1bd18 <net_buf_put+0x58>)
   1bcca:	4814      	ldr	r0, [pc, #80]	; (1bd1c <net_buf_put+0x5c>)
   1bccc:	4a14      	ldr	r2, [pc, #80]	; (1bd20 <net_buf_put+0x60>)
   1bcce:	f44f 7300 	mov.w	r3, #512	; 0x200
   1bcd2:	f008 fd11 	bl	246f8 <printk>
   1bcd6:	4812      	ldr	r0, [pc, #72]	; (1bd20 <net_buf_put+0x60>)
   1bcd8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1bcdc:	f008 fefd 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1bce0:	b95c      	cbnz	r4, 1bcfa <net_buf_put+0x3a>
   1bce2:	4910      	ldr	r1, [pc, #64]	; (1bd24 <net_buf_put+0x64>)
   1bce4:	480d      	ldr	r0, [pc, #52]	; (1bd1c <net_buf_put+0x5c>)
   1bce6:	4a0e      	ldr	r2, [pc, #56]	; (1bd20 <net_buf_put+0x60>)
   1bce8:	f240 2301 	movw	r3, #513	; 0x201
   1bcec:	f008 fd04 	bl	246f8 <printk>
   1bcf0:	480b      	ldr	r0, [pc, #44]	; (1bd20 <net_buf_put+0x60>)
   1bcf2:	f240 2101 	movw	r1, #513	; 0x201
   1bcf6:	f008 fef0 	bl	24ada <assert_post_action>
{
   1bcfa:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1bcfc:	6811      	ldr	r1, [r2, #0]
   1bcfe:	b929      	cbnz	r1, 1bd0c <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1bd00:	4621      	mov	r1, r4
   1bd02:	4628      	mov	r0, r5
}
   1bd04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1bd08:	f005 bd9a 	b.w	21840 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1bd0c:	7953      	ldrb	r3, [r2, #5]
   1bd0e:	f043 0301 	orr.w	r3, r3, #1
   1bd12:	7153      	strb	r3, [r2, #5]
   1bd14:	460a      	mov	r2, r1
   1bd16:	e7f1      	b.n	1bcfc <net_buf_put+0x3c>
   1bd18:	0002f39d 	.word	0x0002f39d
   1bd1c:	000290f5 	.word	0x000290f5
   1bd20:	0002f31a 	.word	0x0002f31a
   1bd24:	0002dc23 	.word	0x0002dc23

0001bd28 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bd2c:	4605      	mov	r5, r0
   1bd2e:	b328      	cbz	r0, 1bd7c <net_buf_unref+0x54>
   1bd30:	4e1c      	ldr	r6, [pc, #112]	; (1bda4 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bd32:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1bd34:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1bd38:	462c      	mov	r4, r5
   1bd3a:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1bd3c:	7923      	ldrb	r3, [r4, #4]
   1bd3e:	3b01      	subs	r3, #1
   1bd40:	b2db      	uxtb	r3, r3
   1bd42:	7123      	strb	r3, [r4, #4]
   1bd44:	b9c3      	cbnz	r3, 1bd78 <net_buf_unref+0x50>
		if (buf->__buf) {
   1bd46:	6921      	ldr	r1, [r4, #16]
   1bd48:	b159      	cbz	r1, 1bd62 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bd4a:	7963      	ldrb	r3, [r4, #5]
   1bd4c:	079b      	lsls	r3, r3, #30
   1bd4e:	d407      	bmi.n	1bd60 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1bd50:	79a3      	ldrb	r3, [r4, #6]
   1bd52:	fb08 6303 	mla	r3, r8, r3, r6
   1bd56:	4620      	mov	r0, r4
   1bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd5a:	681b      	ldr	r3, [r3, #0]
   1bd5c:	689b      	ldr	r3, [r3, #8]
   1bd5e:	4798      	blx	r3
			buf->__buf = NULL;
   1bd60:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1bd62:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1bd64:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1bd66:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1bd6a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bd6e:	b19b      	cbz	r3, 1bd98 <net_buf_unref+0x70>
			pool->destroy(buf);
   1bd70:	4620      	mov	r0, r4
   1bd72:	4798      	blx	r3
	while (buf) {
   1bd74:	2d00      	cmp	r5, #0
   1bd76:	d1df      	bne.n	1bd38 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1bd7c:	490a      	ldr	r1, [pc, #40]	; (1bda8 <net_buf_unref+0x80>)
   1bd7e:	480b      	ldr	r0, [pc, #44]	; (1bdac <net_buf_unref+0x84>)
   1bd80:	4a0b      	ldr	r2, [pc, #44]	; (1bdb0 <net_buf_unref+0x88>)
   1bd82:	f44f 7304 	mov.w	r3, #528	; 0x210
   1bd86:	f008 fcb7 	bl	246f8 <printk>
}
   1bd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bd8e:	4808      	ldr	r0, [pc, #32]	; (1bdb0 <net_buf_unref+0x88>)
   1bd90:	f44f 7104 	mov.w	r1, #528	; 0x210
   1bd94:	f008 bea1 	b.w	24ada <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1bd98:	4621      	mov	r1, r4
   1bd9a:	fb00 6008 	mla	r0, r0, r8, r6
   1bd9e:	f00c f981 	bl	280a4 <k_queue_prepend>
}
   1bda2:	e7e7      	b.n	1bd74 <net_buf_unref+0x4c>
   1bda4:	20000750 	.word	0x20000750
   1bda8:	0002dc23 	.word	0x0002dc23
   1bdac:	000290f5 	.word	0x000290f5
   1bdb0:	0002f31a 	.word	0x0002f31a

0001bdb4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1bdb4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1bdb6:	4604      	mov	r4, r0
   1bdb8:	b958      	cbnz	r0, 1bdd2 <net_buf_ref+0x1e>
   1bdba:	4908      	ldr	r1, [pc, #32]	; (1bddc <net_buf_ref+0x28>)
   1bdbc:	4808      	ldr	r0, [pc, #32]	; (1bde0 <net_buf_ref+0x2c>)
   1bdbe:	4a09      	ldr	r2, [pc, #36]	; (1bde4 <net_buf_ref+0x30>)
   1bdc0:	f240 233f 	movw	r3, #575	; 0x23f
   1bdc4:	f008 fc98 	bl	246f8 <printk>
   1bdc8:	4806      	ldr	r0, [pc, #24]	; (1bde4 <net_buf_ref+0x30>)
   1bdca:	f240 213f 	movw	r1, #575	; 0x23f
   1bdce:	f008 fe84 	bl	24ada <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1bdd2:	7923      	ldrb	r3, [r4, #4]
   1bdd4:	3301      	adds	r3, #1
   1bdd6:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1bdd8:	4620      	mov	r0, r4
   1bdda:	bd10      	pop	{r4, pc}
   1bddc:	0002dc23 	.word	0x0002dc23
   1bde0:	000290f5 	.word	0x000290f5
   1bde4:	0002f31a 	.word	0x0002f31a

0001bde8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bde8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1bdea:	4604      	mov	r4, r0
   1bdec:	b958      	cbnz	r0, 1be06 <net_buf_frag_last+0x1e>
   1bdee:	4908      	ldr	r1, [pc, #32]	; (1be10 <net_buf_frag_last+0x28>)
   1bdf0:	4808      	ldr	r0, [pc, #32]	; (1be14 <net_buf_frag_last+0x2c>)
   1bdf2:	4a09      	ldr	r2, [pc, #36]	; (1be18 <net_buf_frag_last+0x30>)
   1bdf4:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1bdf8:	f008 fc7e 	bl	246f8 <printk>
   1bdfc:	4806      	ldr	r0, [pc, #24]	; (1be18 <net_buf_frag_last+0x30>)
   1bdfe:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1be02:	f008 fe6a 	bl	24ada <assert_post_action>

	while (buf->frags) {
   1be06:	4620      	mov	r0, r4
   1be08:	6824      	ldr	r4, [r4, #0]
   1be0a:	2c00      	cmp	r4, #0
   1be0c:	d1fb      	bne.n	1be06 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1be0e:	bd10      	pop	{r4, pc}
   1be10:	0002dc23 	.word	0x0002dc23
   1be14:	000290f5 	.word	0x000290f5
   1be18:	0002f31a 	.word	0x0002f31a

0001be1c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1be1c:	b538      	push	{r3, r4, r5, lr}
   1be1e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1be20:	4604      	mov	r4, r0
   1be22:	b958      	cbnz	r0, 1be3c <net_buf_frag_insert+0x20>
   1be24:	4910      	ldr	r1, [pc, #64]	; (1be68 <net_buf_frag_insert+0x4c>)
   1be26:	4811      	ldr	r0, [pc, #68]	; (1be6c <net_buf_frag_insert+0x50>)
   1be28:	4a11      	ldr	r2, [pc, #68]	; (1be70 <net_buf_frag_insert+0x54>)
   1be2a:	f240 2387 	movw	r3, #647	; 0x287
   1be2e:	f008 fc63 	bl	246f8 <printk>
   1be32:	480f      	ldr	r0, [pc, #60]	; (1be70 <net_buf_frag_insert+0x54>)
   1be34:	f240 2187 	movw	r1, #647	; 0x287
   1be38:	f008 fe4f 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1be3c:	b95d      	cbnz	r5, 1be56 <net_buf_frag_insert+0x3a>
   1be3e:	490d      	ldr	r1, [pc, #52]	; (1be74 <net_buf_frag_insert+0x58>)
   1be40:	480a      	ldr	r0, [pc, #40]	; (1be6c <net_buf_frag_insert+0x50>)
   1be42:	4a0b      	ldr	r2, [pc, #44]	; (1be70 <net_buf_frag_insert+0x54>)
   1be44:	f44f 7322 	mov.w	r3, #648	; 0x288
   1be48:	f008 fc56 	bl	246f8 <printk>
   1be4c:	4808      	ldr	r0, [pc, #32]	; (1be70 <net_buf_frag_insert+0x54>)
   1be4e:	f44f 7122 	mov.w	r1, #648	; 0x288
   1be52:	f008 fe42 	bl	24ada <assert_post_action>

	if (parent->frags) {
   1be56:	6823      	ldr	r3, [r4, #0]
   1be58:	b123      	cbz	r3, 1be64 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1be5a:	4628      	mov	r0, r5
   1be5c:	f7ff ffc4 	bl	1bde8 <net_buf_frag_last>
   1be60:	6823      	ldr	r3, [r4, #0]
   1be62:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1be64:	6025      	str	r5, [r4, #0]
}
   1be66:	bd38      	pop	{r3, r4, r5, pc}
   1be68:	0002f3a2 	.word	0x0002f3a2
   1be6c:	000290f5 	.word	0x000290f5
   1be70:	0002f31a 	.word	0x0002f31a
   1be74:	0002f3a9 	.word	0x0002f3a9

0001be78 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1be78:	b538      	push	{r3, r4, r5, lr}
   1be7a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1be7c:	460d      	mov	r5, r1
   1be7e:	b959      	cbnz	r1, 1be98 <net_buf_frag_add+0x20>
   1be80:	490c      	ldr	r1, [pc, #48]	; (1beb4 <net_buf_frag_add+0x3c>)
   1be82:	480d      	ldr	r0, [pc, #52]	; (1beb8 <net_buf_frag_add+0x40>)
   1be84:	4a0d      	ldr	r2, [pc, #52]	; (1bebc <net_buf_frag_add+0x44>)
   1be86:	f240 2393 	movw	r3, #659	; 0x293
   1be8a:	f008 fc35 	bl	246f8 <printk>
   1be8e:	480b      	ldr	r0, [pc, #44]	; (1bebc <net_buf_frag_add+0x44>)
   1be90:	f240 2193 	movw	r1, #659	; 0x293
   1be94:	f008 fe21 	bl	24ada <assert_post_action>

	if (!head) {
   1be98:	b924      	cbnz	r4, 1bea4 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1be9a:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1be9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1bea0:	f7ff bf88 	b.w	1bdb4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1bea4:	4620      	mov	r0, r4
   1bea6:	f7ff ff9f 	bl	1bde8 <net_buf_frag_last>
   1beaa:	4629      	mov	r1, r5
   1beac:	f7ff ffb6 	bl	1be1c <net_buf_frag_insert>
}
   1beb0:	4620      	mov	r0, r4
   1beb2:	bd38      	pop	{r3, r4, r5, pc}
   1beb4:	0002f3a9 	.word	0x0002f3a9
   1beb8:	000290f5 	.word	0x000290f5
   1bebc:	0002f31a 	.word	0x0002f31a

0001bec0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bec0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bec2:	6882      	ldr	r2, [r0, #8]
   1bec4:	6803      	ldr	r3, [r0, #0]
   1bec6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1bec8:	4299      	cmp	r1, r3
{
   1beca:	4604      	mov	r4, r0
   1becc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1bece:	d90b      	bls.n	1bee8 <net_buf_simple_push+0x28>
   1bed0:	4909      	ldr	r1, [pc, #36]	; (1bef8 <net_buf_simple_push+0x38>)
   1bed2:	480a      	ldr	r0, [pc, #40]	; (1befc <net_buf_simple_push+0x3c>)
   1bed4:	4a0a      	ldr	r2, [pc, #40]	; (1bf00 <net_buf_simple_push+0x40>)
   1bed6:	f240 4317 	movw	r3, #1047	; 0x417
   1beda:	f008 fc0d 	bl	246f8 <printk>
   1bede:	4808      	ldr	r0, [pc, #32]	; (1bf00 <net_buf_simple_push+0x40>)
   1bee0:	f240 4117 	movw	r1, #1047	; 0x417
   1bee4:	f008 fdf9 	bl	24ada <assert_post_action>
	buf->data -= len;
   1bee8:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1beea:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1beec:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1beee:	440d      	add	r5, r1
	buf->data -= len;
   1bef0:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1bef2:	80a5      	strh	r5, [r4, #4]
}
   1bef4:	bd38      	pop	{r3, r4, r5, pc}
   1bef6:	bf00      	nop
   1bef8:	0002f3be 	.word	0x0002f3be
   1befc:	000290f5 	.word	0x000290f5
   1bf00:	0002f31a 	.word	0x0002f31a

0001bf04 <net_buf_simple_pull>:
{
   1bf04:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1bf06:	8883      	ldrh	r3, [r0, #4]
   1bf08:	428b      	cmp	r3, r1
{
   1bf0a:	4604      	mov	r4, r0
   1bf0c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1bf0e:	d20b      	bcs.n	1bf28 <net_buf_simple_pull+0x24>
   1bf10:	4909      	ldr	r1, [pc, #36]	; (1bf38 <net_buf_simple_pull+0x34>)
   1bf12:	480a      	ldr	r0, [pc, #40]	; (1bf3c <net_buf_simple_pull+0x38>)
   1bf14:	4a0a      	ldr	r2, [pc, #40]	; (1bf40 <net_buf_simple_pull+0x3c>)
   1bf16:	f240 4377 	movw	r3, #1143	; 0x477
   1bf1a:	f008 fbed 	bl	246f8 <printk>
   1bf1e:	4808      	ldr	r0, [pc, #32]	; (1bf40 <net_buf_simple_pull+0x3c>)
   1bf20:	f240 4177 	movw	r1, #1143	; 0x477
   1bf24:	f008 fdd9 	bl	24ada <assert_post_action>
	buf->len -= len;
   1bf28:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1bf2a:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1bf2c:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1bf2e:	4428      	add	r0, r5
	buf->len -= len;
   1bf30:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1bf32:	6020      	str	r0, [r4, #0]
}
   1bf34:	bd38      	pop	{r3, r4, r5, pc}
   1bf36:	bf00      	nop
   1bf38:	0002f3ae 	.word	0x0002f3ae
   1bf3c:	000290f5 	.word	0x000290f5
   1bf40:	0002f31a 	.word	0x0002f31a

0001bf44 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1bf44:	8883      	ldrh	r3, [r0, #4]
   1bf46:	428b      	cmp	r3, r1
{
   1bf48:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1bf4a:	6806      	ldr	r6, [r0, #0]
{
   1bf4c:	4604      	mov	r4, r0
   1bf4e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1bf50:	d20b      	bcs.n	1bf6a <net_buf_simple_pull_mem+0x26>
   1bf52:	490a      	ldr	r1, [pc, #40]	; (1bf7c <net_buf_simple_pull_mem+0x38>)
   1bf54:	480a      	ldr	r0, [pc, #40]	; (1bf80 <net_buf_simple_pull_mem+0x3c>)
   1bf56:	4a0b      	ldr	r2, [pc, #44]	; (1bf84 <net_buf_simple_pull_mem+0x40>)
   1bf58:	f240 4383 	movw	r3, #1155	; 0x483
   1bf5c:	f008 fbcc 	bl	246f8 <printk>
   1bf60:	4808      	ldr	r0, [pc, #32]	; (1bf84 <net_buf_simple_pull_mem+0x40>)
   1bf62:	f240 4183 	movw	r1, #1155	; 0x483
   1bf66:	f008 fdb8 	bl	24ada <assert_post_action>
	buf->len -= len;
   1bf6a:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1bf6c:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1bf6e:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1bf70:	4429      	add	r1, r5
	buf->len -= len;
   1bf72:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1bf74:	6021      	str	r1, [r4, #0]
}
   1bf76:	4630      	mov	r0, r6
   1bf78:	bd70      	pop	{r4, r5, r6, pc}
   1bf7a:	bf00      	nop
   1bf7c:	0002f3ae 	.word	0x0002f3ae
   1bf80:	000290f5 	.word	0x000290f5
   1bf84:	0002f31a 	.word	0x0002f31a

0001bf88 <net_buf_simple_add>:
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1bf8a:	6803      	ldr	r3, [r0, #0]
   1bf8c:	8886      	ldrh	r6, [r0, #4]
   1bf8e:	4604      	mov	r4, r0
   1bf90:	460d      	mov	r5, r1
   1bf92:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1bf94:	f00b fb75 	bl	27682 <net_buf_simple_tailroom>
   1bf98:	4288      	cmp	r0, r1
   1bf9a:	d20b      	bcs.n	1bfb4 <net_buf_simple_add+0x2c>
   1bf9c:	4908      	ldr	r1, [pc, #32]	; (1bfc0 <net_buf_simple_add+0x38>)
   1bf9e:	4809      	ldr	r0, [pc, #36]	; (1bfc4 <net_buf_simple_add+0x3c>)
   1bfa0:	4a09      	ldr	r2, [pc, #36]	; (1bfc8 <net_buf_simple_add+0x40>)
   1bfa2:	f44f 734a 	mov.w	r3, #808	; 0x328
   1bfa6:	f008 fba7 	bl	246f8 <printk>
   1bfaa:	4807      	ldr	r0, [pc, #28]	; (1bfc8 <net_buf_simple_add+0x40>)
   1bfac:	f44f 714a 	mov.w	r1, #808	; 0x328
   1bfb0:	f008 fd93 	bl	24ada <assert_post_action>
	buf->len += len;
   1bfb4:	88a1      	ldrh	r1, [r4, #4]
   1bfb6:	440d      	add	r5, r1
   1bfb8:	80a5      	strh	r5, [r4, #4]
}
   1bfba:	4630      	mov	r0, r6
   1bfbc:	bd70      	pop	{r4, r5, r6, pc}
   1bfbe:	bf00      	nop
   1bfc0:	0002f3e2 	.word	0x0002f3e2
   1bfc4:	000290f5 	.word	0x000290f5
   1bfc8:	0002f31a 	.word	0x0002f31a

0001bfcc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1bfd0:	4c0e      	ldr	r4, [pc, #56]	; (1c00c <onoff_start+0x40>)
   1bfd2:	1b05      	subs	r5, r0, r4
   1bfd4:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   1bfd8:	250c      	movs	r5, #12
   1bfda:	435d      	muls	r5, r3
{
   1bfdc:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1bfde:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1bfe2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1bfe4:	4420      	add	r0, r4
   1bfe6:	2140      	movs	r1, #64	; 0x40
   1bfe8:	f00b fb6f 	bl	276ca <set_starting_state>
	if (err < 0) {
   1bfec:	1e01      	subs	r1, r0, #0
   1bfee:	db08      	blt.n	1c002 <onoff_start+0x36>
	subdata->cb = cb;
   1bff0:	4b07      	ldr	r3, [pc, #28]	; (1c010 <onoff_start+0x44>)
   1bff2:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1bff4:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1bff8:	4b06      	ldr	r3, [pc, #24]	; (1c014 <onoff_start+0x48>)
   1bffa:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1bffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1c000:	4718      	bx	r3
		notify(mgr, err);
   1c002:	4638      	mov	r0, r7
   1c004:	4633      	mov	r3, r6
}
   1c006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1c00a:	4718      	bx	r3
   1c00c:	200022c0 	.word	0x200022c0
   1c010:	0002772d 	.word	0x0002772d
   1c014:	00028c90 	.word	0x00028c90

0001c018 <get_status>:
{
   1c018:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c01a:	b2cc      	uxtb	r4, r1
   1c01c:	2c01      	cmp	r4, #1
{
   1c01e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c020:	d909      	bls.n	1c036 <get_status+0x1e>
   1c022:	4909      	ldr	r1, [pc, #36]	; (1c048 <get_status+0x30>)
   1c024:	4809      	ldr	r0, [pc, #36]	; (1c04c <get_status+0x34>)
   1c026:	4a0a      	ldr	r2, [pc, #40]	; (1c050 <get_status+0x38>)
   1c028:	2379      	movs	r3, #121	; 0x79
   1c02a:	f008 fb65 	bl	246f8 <printk>
   1c02e:	4808      	ldr	r0, [pc, #32]	; (1c050 <get_status+0x38>)
   1c030:	2179      	movs	r1, #121	; 0x79
   1c032:	f008 fd52 	bl	24ada <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c036:	692b      	ldr	r3, [r5, #16]
   1c038:	210c      	movs	r1, #12
   1c03a:	fb04 3401 	mla	r4, r4, r1, r3
   1c03e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1c040:	f000 0007 	and.w	r0, r0, #7
   1c044:	bd38      	pop	{r3, r4, r5, pc}
   1c046:	bf00      	nop
   1c048:	0002f44b 	.word	0x0002f44b
   1c04c:	000290f5 	.word	0x000290f5
   1c050:	0002f40e 	.word	0x0002f40e

0001c054 <stop>:
{
   1c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c056:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c058:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1c05a:	6907      	ldr	r7, [r0, #16]
{
   1c05c:	4605      	mov	r5, r0
   1c05e:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c060:	d90b      	bls.n	1c07a <stop+0x26>
   1c062:	4919      	ldr	r1, [pc, #100]	; (1c0c8 <stop+0x74>)
   1c064:	4819      	ldr	r0, [pc, #100]	; (1c0cc <stop+0x78>)
   1c066:	4a1a      	ldr	r2, [pc, #104]	; (1c0d0 <stop+0x7c>)
   1c068:	f240 134d 	movw	r3, #333	; 0x14d
   1c06c:	f008 fb44 	bl	246f8 <printk>
   1c070:	4817      	ldr	r0, [pc, #92]	; (1c0d0 <stop+0x7c>)
   1c072:	f240 114d 	movw	r1, #333	; 0x14d
   1c076:	f008 fd30 	bl	24ada <assert_post_action>
	__asm__ volatile(
   1c07a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c07e:	f3ef 8211 	mrs	r2, BASEPRI
   1c082:	f383 8812 	msr	BASEPRI_MAX, r3
   1c086:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c08a:	230c      	movs	r3, #12
   1c08c:	fb03 7104 	mla	r1, r3, r4, r7
   1c090:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c092:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   1c096:	d001      	beq.n	1c09c <stop+0x48>
   1c098:	428e      	cmp	r6, r1
   1c09a:	d111      	bne.n	1c0c0 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c09c:	fb03 7304 	mla	r3, r3, r4, r7
   1c0a0:	2101      	movs	r1, #1
   1c0a2:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   1c0a4:	2000      	movs	r0, #0
	__asm__ volatile(
   1c0a6:	f382 8811 	msr	BASEPRI, r2
   1c0aa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1c0ae:	b930      	cbnz	r0, 1c0be <stop+0x6a>
	get_sub_config(dev, type)->stop();
   1c0b0:	6869      	ldr	r1, [r5, #4]
   1c0b2:	230c      	movs	r3, #12
   1c0b4:	fb03 1404 	mla	r4, r3, r4, r1
   1c0b8:	6863      	ldr	r3, [r4, #4]
   1c0ba:	4798      	blx	r3
	return 0;
   1c0bc:	2000      	movs	r0, #0
}
   1c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1c0c0:	f04f 30ff 	mov.w	r0, #4294967295
   1c0c4:	e7ef      	b.n	1c0a6 <stop+0x52>
   1c0c6:	bf00      	nop
   1c0c8:	0002f44b 	.word	0x0002f44b
   1c0cc:	000290f5 	.word	0x000290f5
   1c0d0:	0002f40e 	.word	0x0002f40e

0001c0d4 <onoff_stop>:
{
   1c0d4:	b570      	push	{r4, r5, r6, lr}
   1c0d6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c0d8:	4906      	ldr	r1, [pc, #24]	; (1c0f4 <onoff_stop+0x20>)
   1c0da:	1a41      	subs	r1, r0, r1
{
   1c0dc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c0de:	1149      	asrs	r1, r1, #5
   1c0e0:	4805      	ldr	r0, [pc, #20]	; (1c0f8 <onoff_stop+0x24>)
   1c0e2:	2240      	movs	r2, #64	; 0x40
   1c0e4:	f7ff ffb6 	bl	1c054 <stop>
	notify(mgr, res);
   1c0e8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c0ea:	4601      	mov	r1, r0
	notify(mgr, res);
   1c0ec:	4620      	mov	r0, r4
}
   1c0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c0f2:	4718      	bx	r3
   1c0f4:	200022c0 	.word	0x200022c0
   1c0f8:	00028370 	.word	0x00028370

0001c0fc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c0fc:	2200      	movs	r2, #0
{
   1c0fe:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c100:	2101      	movs	r1, #1
{
   1c102:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c104:	4610      	mov	r0, r2
   1c106:	f7f7 fcb1 	bl	13a6c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1c10a:	2000      	movs	r0, #0
   1c10c:	f7f7 fc7c 	bl	13a08 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c110:	480f      	ldr	r0, [pc, #60]	; (1c150 <clk_init+0x54>)
   1c112:	f003 f869 	bl	1f1e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c116:	4b0f      	ldr	r3, [pc, #60]	; (1c154 <clk_init+0x58>)
   1c118:	4298      	cmp	r0, r3
   1c11a:	d115      	bne.n	1c148 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c11c:	f00b fe08 	bl	27d30 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1c120:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c122:	490d      	ldr	r1, [pc, #52]	; (1c158 <clk_init+0x5c>)
   1c124:	4630      	mov	r0, r6
   1c126:	f008 fb42 	bl	247ae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c12a:	2800      	cmp	r0, #0
   1c12c:	db0b      	blt.n	1c146 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c12e:	2501      	movs	r5, #1
   1c130:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1c132:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c134:	4908      	ldr	r1, [pc, #32]	; (1c158 <clk_init+0x5c>)
   1c136:	f104 0020 	add.w	r0, r4, #32
   1c13a:	f008 fb38 	bl	247ae <onoff_manager_init>
		if (err < 0) {
   1c13e:	2800      	cmp	r0, #0
   1c140:	db01      	blt.n	1c146 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c142:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1c144:	2000      	movs	r0, #0
}
   1c146:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c148:	f06f 0004 	mvn.w	r0, #4
   1c14c:	e7fb      	b.n	1c146 <clk_init+0x4a>
   1c14e:	bf00      	nop
   1c150:	0001c191 	.word	0x0001c191
   1c154:	0bad0000 	.word	0x0bad0000
   1c158:	00028ca8 	.word	0x00028ca8

0001c15c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c15c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c15e:	230c      	movs	r3, #12
   1c160:	4809      	ldr	r0, [pc, #36]	; (1c188 <clkstarted_handle.constprop.0+0x2c>)
   1c162:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1c164:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1c166:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c168:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1c16c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c16e:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1c170:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c172:	4418      	add	r0, r3
   1c174:	f00b fac7 	bl	27706 <set_on_state>
	if (callback) {
   1c178:	b12d      	cbz	r5, 1c186 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c17a:	4632      	mov	r2, r6
   1c17c:	462b      	mov	r3, r5
   1c17e:	4803      	ldr	r0, [pc, #12]	; (1c18c <clkstarted_handle.constprop.0+0x30>)
}
   1c180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c184:	4718      	bx	r3
}
   1c186:	bd70      	pop	{r4, r5, r6, pc}
   1c188:	200022c0 	.word	0x200022c0
   1c18c:	00028370 	.word	0x00028370

0001c190 <clock_event_handler>:
	switch (event) {
   1c190:	2801      	cmp	r0, #1
{
   1c192:	b508      	push	{r3, lr}
	switch (event) {
   1c194:	d006      	beq.n	1c1a4 <clock_event_handler+0x14>
   1c196:	2803      	cmp	r0, #3
   1c198:	d008      	beq.n	1c1ac <clock_event_handler+0x1c>
   1c19a:	b9a8      	cbnz	r0, 1c1c8 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c19c:	4b10      	ldr	r3, [pc, #64]	; (1c1e0 <clock_event_handler+0x50>)
   1c19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c1a0:	075b      	lsls	r3, r3, #29
   1c1a2:	d11b      	bne.n	1c1dc <clock_event_handler+0x4c>
}
   1c1a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c1a8:	f7ff bfd8 	b.w	1c15c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1c1ac:	490d      	ldr	r1, [pc, #52]	; (1c1e4 <clock_event_handler+0x54>)
   1c1ae:	4a0e      	ldr	r2, [pc, #56]	; (1c1e8 <clock_event_handler+0x58>)
   1c1b0:	480e      	ldr	r0, [pc, #56]	; (1c1ec <clock_event_handler+0x5c>)
   1c1b2:	f240 235e 	movw	r3, #606	; 0x25e
   1c1b6:	f008 fa9f 	bl	246f8 <printk>
   1c1ba:	f240 215e 	movw	r1, #606	; 0x25e
}
   1c1be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1c1c2:	4809      	ldr	r0, [pc, #36]	; (1c1e8 <clock_event_handler+0x58>)
   1c1c4:	f008 bc89 	b.w	24ada <assert_post_action>
   1c1c8:	4906      	ldr	r1, [pc, #24]	; (1c1e4 <clock_event_handler+0x54>)
   1c1ca:	4a07      	ldr	r2, [pc, #28]	; (1c1e8 <clock_event_handler+0x58>)
   1c1cc:	4807      	ldr	r0, [pc, #28]	; (1c1ec <clock_event_handler+0x5c>)
   1c1ce:	f240 2362 	movw	r3, #610	; 0x262
   1c1d2:	f008 fa91 	bl	246f8 <printk>
   1c1d6:	f240 2162 	movw	r1, #610	; 0x262
   1c1da:	e7f0      	b.n	1c1be <clock_event_handler+0x2e>
}
   1c1dc:	bd08      	pop	{r3, pc}
   1c1de:	bf00      	nop
   1c1e0:	200022c0 	.word	0x200022c0
   1c1e4:	0002cf26 	.word	0x0002cf26
   1c1e8:	0002f40e 	.word	0x0002f40e
   1c1ec:	000290f5 	.word	0x000290f5

0001c1f0 <generic_hfclk_start>:
{
   1c1f0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c1f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1f6:	f3ef 8111 	mrs	r1, BASEPRI
   1c1fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1fe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c202:	4a12      	ldr	r2, [pc, #72]	; (1c24c <generic_hfclk_start+0x5c>)
   1c204:	6813      	ldr	r3, [r2, #0]
   1c206:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1c20a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1c20e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c210:	d00c      	beq.n	1c22c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c216:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c21a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c21e:	f013 0301 	ands.w	r3, r3, #1
   1c222:	d003      	beq.n	1c22c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1c224:	480a      	ldr	r0, [pc, #40]	; (1c250 <generic_hfclk_start+0x60>)
   1c226:	f00b fa6e 	bl	27706 <set_on_state>
			already_started = true;
   1c22a:	2301      	movs	r3, #1
	__asm__ volatile(
   1c22c:	f381 8811 	msr	BASEPRI, r1
   1c230:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1c234:	b123      	cbz	r3, 1c240 <generic_hfclk_start+0x50>
}
   1c236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c23a:	2000      	movs	r0, #0
   1c23c:	f7ff bf8e 	b.w	1c15c <clkstarted_handle.constprop.0>
}
   1c240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c244:	2001      	movs	r0, #1
   1c246:	f002 bf85 	b.w	1f154 <nrfx_clock_start>
   1c24a:	bf00      	nop
   1c24c:	20002318 	.word	0x20002318
   1c250:	20002308 	.word	0x20002308

0001c254 <lfclk_start>:
{
   1c254:	b510      	push	{r4, lr}
	if (!once) {
   1c256:	4c07      	ldr	r4, [pc, #28]	; (1c274 <lfclk_start+0x20>)
   1c258:	7823      	ldrb	r3, [r4, #0]
   1c25a:	b92b      	cbnz	r3, 1c268 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1c25c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1c260:	f00b ffb6 	bl	281d0 <z_impl_k_busy_wait>
		once = true;
   1c264:	2301      	movs	r3, #1
   1c266:	7023      	strb	r3, [r4, #0]
}
   1c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c26c:	2000      	movs	r0, #0
   1c26e:	f002 bf71 	b.w	1f154 <nrfx_clock_start>
   1c272:	bf00      	nop
   1c274:	20002676 	.word	0x20002676

0001c278 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c278:	4b09      	ldr	r3, [pc, #36]	; (1c2a0 <generic_hfclk_stop+0x28>)
   1c27a:	f3bf 8f5b 	dmb	ish
   1c27e:	e853 2f00 	ldrex	r2, [r3]
   1c282:	f022 0102 	bic.w	r1, r2, #2
   1c286:	e843 1000 	strex	r0, r1, [r3]
   1c28a:	2800      	cmp	r0, #0
   1c28c:	d1f7      	bne.n	1c27e <generic_hfclk_stop+0x6>
   1c28e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1c292:	07d3      	lsls	r3, r2, #31
   1c294:	d402      	bmi.n	1c29c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c296:	2001      	movs	r0, #1
   1c298:	f002 bf86 	b.w	1f1a8 <nrfx_clock_stop>
}
   1c29c:	4770      	bx	lr
   1c29e:	bf00      	nop
   1c2a0:	20002318 	.word	0x20002318

0001c2a4 <api_blocking_start>:
{
   1c2a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c2a6:	2200      	movs	r2, #0
   1c2a8:	2301      	movs	r3, #1
   1c2aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c2ae:	ab04      	add	r3, sp, #16
   1c2b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c2b4:	4a09      	ldr	r2, [pc, #36]	; (1c2dc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c2b6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c2ba:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c2bc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c2c0:	f00b fa43 	bl	2774a <api_start>
	if (err < 0) {
   1c2c4:	2800      	cmp	r0, #0
   1c2c6:	db05      	blt.n	1c2d4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c2c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c2cc:	2300      	movs	r3, #0
   1c2ce:	4668      	mov	r0, sp
   1c2d0:	f005 fbc4 	bl	21a5c <z_impl_k_sem_take>
}
   1c2d4:	b007      	add	sp, #28
   1c2d6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c2da:	bf00      	nop
   1c2dc:	00027745 	.word	0x00027745

0001c2e0 <z_nrf_clock_control_lf_on>:
{
   1c2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c2e4:	4949      	ldr	r1, [pc, #292]	; (1c40c <z_nrf_clock_control_lf_on+0x12c>)
   1c2e6:	f3bf 8f5b 	dmb	ish
   1c2ea:	4605      	mov	r5, r0
   1c2ec:	2201      	movs	r2, #1
   1c2ee:	e851 3f00 	ldrex	r3, [r1]
   1c2f2:	e841 2000 	strex	r0, r2, [r1]
   1c2f6:	2800      	cmp	r0, #0
   1c2f8:	d1f9      	bne.n	1c2ee <z_nrf_clock_control_lf_on+0xe>
   1c2fa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c2fe:	b9a3      	cbnz	r3, 1c32a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c300:	4943      	ldr	r1, [pc, #268]	; (1c410 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   1c302:	4844      	ldr	r0, [pc, #272]	; (1c414 <z_nrf_clock_control_lf_on+0x134>)
   1c304:	604b      	str	r3, [r1, #4]
   1c306:	60cb      	str	r3, [r1, #12]
   1c308:	608a      	str	r2, [r1, #8]
   1c30a:	f7f4 fe37 	bl	10f7c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c30e:	2800      	cmp	r0, #0
   1c310:	da0b      	bge.n	1c32a <z_nrf_clock_control_lf_on+0x4a>
   1c312:	4941      	ldr	r1, [pc, #260]	; (1c418 <z_nrf_clock_control_lf_on+0x138>)
   1c314:	4841      	ldr	r0, [pc, #260]	; (1c41c <z_nrf_clock_control_lf_on+0x13c>)
   1c316:	4a42      	ldr	r2, [pc, #264]	; (1c420 <z_nrf_clock_control_lf_on+0x140>)
   1c318:	f44f 7308 	mov.w	r3, #544	; 0x220
   1c31c:	f008 f9ec 	bl	246f8 <printk>
   1c320:	483f      	ldr	r0, [pc, #252]	; (1c420 <z_nrf_clock_control_lf_on+0x140>)
   1c322:	f44f 7108 	mov.w	r1, #544	; 0x220
   1c326:	f008 fbd8 	bl	24ada <assert_post_action>
	switch (start_mode) {
   1c32a:	b3ad      	cbz	r5, 1c398 <z_nrf_clock_control_lf_on+0xb8>
   1c32c:	1e6b      	subs	r3, r5, #1
   1c32e:	2b01      	cmp	r3, #1
   1c330:	d856      	bhi.n	1c3e0 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c332:	2d01      	cmp	r5, #1
   1c334:	d107      	bne.n	1c346 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c33a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c33e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c342:	2b01      	cmp	r3, #1
   1c344:	d028      	beq.n	1c398 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c346:	f00b fe75 	bl	28034 <k_is_in_isr>
   1c34a:	4604      	mov	r4, r0
   1c34c:	b918      	cbnz	r0, 1c356 <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1c34e:	4b35      	ldr	r3, [pc, #212]	; (1c424 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   1c350:	781b      	ldrb	r3, [r3, #0]
   1c352:	2b00      	cmp	r3, #0
   1c354:	d152      	bne.n	1c3fc <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1c356:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c35a:	f3ef 8611 	mrs	r6, BASEPRI
   1c35e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c362:	f3bf 8f6f 	isb	sy
   1c366:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c368:	4f2f      	ldr	r7, [pc, #188]	; (1c428 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c36a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1c430 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c36e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1c434 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c376:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c37a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1c37e:	03d2      	lsls	r2, r2, #15
   1c380:	d50c      	bpl.n	1c39c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c382:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c386:	2b01      	cmp	r3, #1
   1c388:	d001      	beq.n	1c38e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c38a:	2d01      	cmp	r5, #1
   1c38c:	d106      	bne.n	1c39c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   1c38e:	b30c      	cbz	r4, 1c3d4 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   1c390:	f386 8811 	msr	BASEPRI, r6
   1c394:	f3bf 8f6f 	isb	sy
}
   1c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c39c:	b1ac      	cbz	r4, 1c3ca <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c39e:	4630      	mov	r0, r6
   1c3a0:	f7f7 faf0 	bl	13984 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c3a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c3a8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	d1e0      	bne.n	1c372 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c3b0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1c3b2:	2900      	cmp	r1, #0
   1c3b4:	d0dd      	beq.n	1c372 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c3b6:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c3b8:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c3ba:	2301      	movs	r3, #1
   1c3bc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1c3c0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c3c4:	f8c9 3000 	str.w	r3, [r9]
}
   1c3c8:	e7d3      	b.n	1c372 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   1c3ca:	2100      	movs	r1, #0
   1c3cc:	2021      	movs	r0, #33	; 0x21
   1c3ce:	f007 f9d1 	bl	23774 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c3d2:	e7e7      	b.n	1c3a4 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   1c3d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c3d8:	2202      	movs	r2, #2
   1c3da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c3de:	e7db      	b.n	1c398 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   1c3e0:	4912      	ldr	r1, [pc, #72]	; (1c42c <z_nrf_clock_control_lf_on+0x14c>)
   1c3e2:	480e      	ldr	r0, [pc, #56]	; (1c41c <z_nrf_clock_control_lf_on+0x13c>)
   1c3e4:	4a0e      	ldr	r2, [pc, #56]	; (1c420 <z_nrf_clock_control_lf_on+0x140>)
   1c3e6:	f240 2332 	movw	r3, #562	; 0x232
   1c3ea:	f008 f985 	bl	246f8 <printk>
}
   1c3ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   1c3f2:	480b      	ldr	r0, [pc, #44]	; (1c420 <z_nrf_clock_control_lf_on+0x140>)
   1c3f4:	f240 2132 	movw	r1, #562	; 0x232
   1c3f8:	f008 bb6f 	b.w	24ada <assert_post_action>
    p_reg->INTENCLR = mask;
   1c3fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c400:	2202      	movs	r2, #2
   1c402:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c406:	4606      	mov	r6, r0
}
   1c408:	e7ae      	b.n	1c368 <z_nrf_clock_control_lf_on+0x88>
   1c40a:	bf00      	nop
   1c40c:	2000231c 	.word	0x2000231c
   1c410:	200022b0 	.word	0x200022b0
   1c414:	200022e0 	.word	0x200022e0
   1c418:	0002f46f 	.word	0x0002f46f
   1c41c:	000290f5 	.word	0x000290f5
   1c420:	0002f40e 	.word	0x0002f40e
   1c424:	20002f9f 	.word	0x20002f9f
   1c428:	40000104 	.word	0x40000104
   1c42c:	0002cf26 	.word	0x0002cf26
   1c430:	e000e100 	.word	0xe000e100
   1c434:	40000008 	.word	0x40000008

0001c438 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c438:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1c43a:	4b08      	ldr	r3, [pc, #32]	; (1c45c <uart_console_init+0x24>)
   1c43c:	4808      	ldr	r0, [pc, #32]	; (1c460 <uart_console_init+0x28>)
   1c43e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1c440:	f00b fdca 	bl	27fd8 <z_device_ready>
   1c444:	b138      	cbz	r0, 1c456 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1c446:	4807      	ldr	r0, [pc, #28]	; (1c464 <uart_console_init+0x2c>)
   1c448:	f7f8 f8b2 	bl	145b0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c44c:	4805      	ldr	r0, [pc, #20]	; (1c464 <uart_console_init+0x2c>)
   1c44e:	f7f4 fb41 	bl	10ad4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c452:	2000      	movs	r0, #0
}
   1c454:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c456:	f06f 0012 	mvn.w	r0, #18
   1c45a:	e7fb      	b.n	1c454 <uart_console_init+0x1c>
   1c45c:	20002320 	.word	0x20002320
   1c460:	000283b8 	.word	0x000283b8
   1c464:	0001c469 	.word	0x0001c469

0001c468 <console_out>:
	if ('\n' == c) {
   1c468:	280a      	cmp	r0, #10
{
   1c46a:	b538      	push	{r3, r4, r5, lr}
   1c46c:	4d07      	ldr	r5, [pc, #28]	; (1c48c <console_out+0x24>)
   1c46e:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c470:	d104      	bne.n	1c47c <console_out+0x14>
   1c472:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1c474:	6883      	ldr	r3, [r0, #8]
   1c476:	210d      	movs	r1, #13
   1c478:	69db      	ldr	r3, [r3, #28]
   1c47a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1c47c:	6828      	ldr	r0, [r5, #0]
   1c47e:	6883      	ldr	r3, [r0, #8]
   1c480:	b2e1      	uxtb	r1, r4
   1c482:	69db      	ldr	r3, [r3, #28]
   1c484:	4798      	blx	r3
}
   1c486:	4620      	mov	r0, r4
   1c488:	bd38      	pop	{r3, r4, r5, pc}
   1c48a:	bf00      	nop
   1c48c:	20002320 	.word	0x20002320

0001c490 <ssd1306_set_orientation>:
}

static int ssd1306_set_orientation(const struct device *dev,
				   const enum display_orientation
				   orientation)
{
   1c490:	b508      	push	{r3, lr}
   1c492:	4906      	ldr	r1, [pc, #24]	; (1c4ac <ssd1306_set_orientation+0x1c>)
   1c494:	4b06      	ldr	r3, [pc, #24]	; (1c4b0 <ssd1306_set_orientation+0x20>)
	LOG_ERR("Unsupported");
   1c496:	4807      	ldr	r0, [pc, #28]	; (1c4b4 <ssd1306_set_orientation+0x24>)
   1c498:	1ac9      	subs	r1, r1, r3
   1c49a:	08c9      	lsrs	r1, r1, #3
   1c49c:	0189      	lsls	r1, r1, #6
   1c49e:	f041 0101 	orr.w	r1, r1, #1
   1c4a2:	f008 fb48 	bl	24b36 <log_0>
	return -ENOTSUP;
}
   1c4a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c4aa:	bd08      	pop	{r3, pc}
   1c4ac:	00028740 	.word	0x00028740
   1c4b0:	00028618 	.word	0x00028618
   1c4b4:	0002f498 	.word	0x0002f498

0001c4b8 <ssd1306_set_brightness>:
{
   1c4b8:	b508      	push	{r3, lr}
   1c4ba:	4906      	ldr	r1, [pc, #24]	; (1c4d4 <ssd1306_set_brightness+0x1c>)
   1c4bc:	4b06      	ldr	r3, [pc, #24]	; (1c4d8 <ssd1306_set_brightness+0x20>)
	LOG_WRN("Unsupported");
   1c4be:	4807      	ldr	r0, [pc, #28]	; (1c4dc <ssd1306_set_brightness+0x24>)
   1c4c0:	1ac9      	subs	r1, r1, r3
   1c4c2:	08c9      	lsrs	r1, r1, #3
   1c4c4:	0189      	lsls	r1, r1, #6
   1c4c6:	f041 0102 	orr.w	r1, r1, #2
   1c4ca:	f008 fb34 	bl	24b36 <log_0>
}
   1c4ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c4d2:	bd08      	pop	{r3, pc}
   1c4d4:	00028740 	.word	0x00028740
   1c4d8:	00028618 	.word	0x00028618
   1c4dc:	0002f498 	.word	0x0002f498

0001c4e0 <ssd1306_get_framebuffer>:
{
   1c4e0:	b508      	push	{r3, lr}
   1c4e2:	4906      	ldr	r1, [pc, #24]	; (1c4fc <ssd1306_get_framebuffer+0x1c>)
   1c4e4:	4b06      	ldr	r3, [pc, #24]	; (1c500 <ssd1306_get_framebuffer+0x20>)
	LOG_ERR("Unsupported");
   1c4e6:	4807      	ldr	r0, [pc, #28]	; (1c504 <ssd1306_get_framebuffer+0x24>)
   1c4e8:	1ac9      	subs	r1, r1, r3
   1c4ea:	08c9      	lsrs	r1, r1, #3
   1c4ec:	0189      	lsls	r1, r1, #6
   1c4ee:	f041 0101 	orr.w	r1, r1, #1
   1c4f2:	f008 fb20 	bl	24b36 <log_0>
}
   1c4f6:	2000      	movs	r0, #0
   1c4f8:	bd08      	pop	{r3, pc}
   1c4fa:	bf00      	nop
   1c4fc:	00028740 	.word	0x00028740
   1c500:	00028618 	.word	0x00028618
   1c504:	0002f498 	.word	0x0002f498

0001c508 <ssd1306_read>:
{
   1c508:	b508      	push	{r3, lr}
   1c50a:	4906      	ldr	r1, [pc, #24]	; (1c524 <ssd1306_read+0x1c>)
   1c50c:	4b06      	ldr	r3, [pc, #24]	; (1c528 <ssd1306_read+0x20>)
	LOG_ERR("Unsupported");
   1c50e:	4807      	ldr	r0, [pc, #28]	; (1c52c <ssd1306_read+0x24>)
   1c510:	1ac9      	subs	r1, r1, r3
   1c512:	08c9      	lsrs	r1, r1, #3
   1c514:	0189      	lsls	r1, r1, #6
   1c516:	f041 0101 	orr.w	r1, r1, #1
   1c51a:	f008 fb0c 	bl	24b36 <log_0>
}
   1c51e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c522:	bd08      	pop	{r3, pc}
   1c524:	00028740 	.word	0x00028740
   1c528:	00028618 	.word	0x00028618
   1c52c:	0002f498 	.word	0x0002f498

0001c530 <ssd1306_get_capabilities>:
{
   1c530:	b510      	push	{r4, lr}
   1c532:	460c      	mov	r4, r1
	memset(caps, 0, sizeof(struct display_capabilities));
   1c534:	2210      	movs	r2, #16
   1c536:	2100      	movs	r1, #0
   1c538:	4620      	mov	r0, r4
   1c53a:	f009 fa1e 	bl	2597a <memset>
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
   1c53e:	4a04      	ldr	r2, [pc, #16]	; (1c550 <ssd1306_get_capabilities+0x20>)
   1c540:	2304      	movs	r3, #4
   1c542:	e9c4 2300 	strd	r2, r3, [r4]
	caps->screen_info = SCREEN_INFO_MONO_VTILED;
   1c546:	2201      	movs	r2, #1
   1c548:	60a2      	str	r2, [r4, #8]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
   1c54a:	7323      	strb	r3, [r4, #12]
}
   1c54c:	bd10      	pop	{r4, pc}
   1c54e:	bf00      	nop
   1c550:	00200080 	.word	0x00200080

0001c554 <gpio_pin_set>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c554:	6843      	ldr	r3, [r0, #4]
{
   1c556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c55a:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
   1c55c:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c55e:	2501      	movs	r5, #1
   1c560:	408d      	lsls	r5, r1
   1c562:	421d      	tst	r5, r3
{
   1c564:	4604      	mov	r4, r0
   1c566:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c568:	d10e      	bne.n	1c588 <gpio_pin_set+0x34>
   1c56a:	4919      	ldr	r1, [pc, #100]	; (1c5d0 <gpio_pin_set+0x7c>)
   1c56c:	4a19      	ldr	r2, [pc, #100]	; (1c5d4 <gpio_pin_set+0x80>)
   1c56e:	481a      	ldr	r0, [pc, #104]	; (1c5d8 <gpio_pin_set+0x84>)
   1c570:	f240 43bb 	movw	r3, #1211	; 0x4bb
   1c574:	f008 f8c0 	bl	246f8 <printk>
   1c578:	4818      	ldr	r0, [pc, #96]	; (1c5dc <gpio_pin_set+0x88>)
   1c57a:	f008 f8bd 	bl	246f8 <printk>
   1c57e:	4815      	ldr	r0, [pc, #84]	; (1c5d4 <gpio_pin_set+0x80>)
   1c580:	f240 41bb 	movw	r1, #1211	; 0x4bb
   1c584:	f008 faa9 	bl	24ada <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c588:	683b      	ldr	r3, [r7, #0]
   1c58a:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c58c:	6863      	ldr	r3, [r4, #4]
   1c58e:	681b      	ldr	r3, [r3, #0]
   1c590:	bf18      	it	ne
   1c592:	f086 0601 	eorne.w	r6, r6, #1
   1c596:	421d      	tst	r5, r3
   1c598:	d10e      	bne.n	1c5b8 <gpio_pin_set+0x64>
   1c59a:	490d      	ldr	r1, [pc, #52]	; (1c5d0 <gpio_pin_set+0x7c>)
   1c59c:	4a0d      	ldr	r2, [pc, #52]	; (1c5d4 <gpio_pin_set+0x80>)
   1c59e:	480e      	ldr	r0, [pc, #56]	; (1c5d8 <gpio_pin_set+0x84>)
   1c5a0:	f240 4391 	movw	r3, #1169	; 0x491
   1c5a4:	f008 f8a8 	bl	246f8 <printk>
   1c5a8:	480c      	ldr	r0, [pc, #48]	; (1c5dc <gpio_pin_set+0x88>)
   1c5aa:	f008 f8a5 	bl	246f8 <printk>
   1c5ae:	4809      	ldr	r0, [pc, #36]	; (1c5d4 <gpio_pin_set+0x80>)
   1c5b0:	f240 4191 	movw	r1, #1169	; 0x491
   1c5b4:	f008 fa91 	bl	24ada <assert_post_action>
	if (value != 0)	{
   1c5b8:	b136      	cbz	r6, 1c5c8 <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
   1c5ba:	68a3      	ldr	r3, [r4, #8]
   1c5bc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1c5be:	4629      	mov	r1, r5
   1c5c0:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1c5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1c5c6:	4718      	bx	r3
   1c5c8:	68a3      	ldr	r3, [r4, #8]
   1c5ca:	691b      	ldr	r3, [r3, #16]
   1c5cc:	e7f7      	b.n	1c5be <gpio_pin_set+0x6a>
   1c5ce:	bf00      	nop
   1c5d0:	0002f4ce 	.word	0x0002f4ce
   1c5d4:	0002f4a4 	.word	0x0002f4a4
   1c5d8:	000290f5 	.word	0x000290f5
   1c5dc:	0002f50c 	.word	0x0002f50c

0001c5e0 <ssd1306_set_pixel_format>:

static int ssd1306_set_pixel_format(const struct device *dev,
				    const enum display_pixel_format pf)
{
	if (pf == PIXEL_FORMAT_MONO10) {
   1c5e0:	2904      	cmp	r1, #4
{
   1c5e2:	b508      	push	{r3, lr}
	if (pf == PIXEL_FORMAT_MONO10) {
   1c5e4:	d00c      	beq.n	1c600 <ssd1306_set_pixel_format+0x20>
   1c5e6:	4b07      	ldr	r3, [pc, #28]	; (1c604 <ssd1306_set_pixel_format+0x24>)
   1c5e8:	4907      	ldr	r1, [pc, #28]	; (1c608 <ssd1306_set_pixel_format+0x28>)
		return 0;
	}
	LOG_ERR("Unsupported");
   1c5ea:	4808      	ldr	r0, [pc, #32]	; (1c60c <ssd1306_set_pixel_format+0x2c>)
   1c5ec:	1ac9      	subs	r1, r1, r3
   1c5ee:	08c9      	lsrs	r1, r1, #3
   1c5f0:	0189      	lsls	r1, r1, #6
   1c5f2:	f041 0101 	orr.w	r1, r1, #1
   1c5f6:	f008 fa9e 	bl	24b36 <log_0>
	return -ENOTSUP;
   1c5fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1c5fe:	bd08      	pop	{r3, pc}
		return 0;
   1c600:	2000      	movs	r0, #0
   1c602:	e7fc      	b.n	1c5fe <ssd1306_set_pixel_format+0x1e>
   1c604:	00028618 	.word	0x00028618
   1c608:	00028740 	.word	0x00028740
   1c60c:	0002f498 	.word	0x0002f498

0001c610 <ssd1306_write>:
{
   1c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c614:	4c3c      	ldr	r4, [pc, #240]	; (1c708 <ssd1306_write+0xf8>)
   1c616:	460d      	mov	r5, r1
   1c618:	493c      	ldr	r1, [pc, #240]	; (1c70c <ssd1306_write+0xfc>)
   1c61a:	4690      	mov	r8, r2
   1c61c:	461f      	mov	r7, r3
	if (desc->pitch < desc->width) {
   1c61e:	891a      	ldrh	r2, [r3, #8]
   1c620:	889b      	ldrh	r3, [r3, #4]
{
   1c622:	b089      	sub	sp, #36	; 0x24
   1c624:	1a64      	subs	r4, r4, r1
   1c626:	08e4      	lsrs	r4, r4, #3
	if (desc->pitch < desc->width) {
   1c628:	429a      	cmp	r2, r3
{
   1c62a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   1c62e:	4681      	mov	r9, r0
   1c630:	ea4f 1484 	mov.w	r4, r4, lsl #6
	if (desc->pitch < desc->width) {
   1c634:	d209      	bcs.n	1c64a <ssd1306_write+0x3a>
		LOG_ERR("Pitch is smaller then width");
   1c636:	4836      	ldr	r0, [pc, #216]	; (1c710 <ssd1306_write+0x100>)
   1c638:	f044 0101 	orr.w	r1, r4, #1
		LOG_ERR("Failed to write command");
   1c63c:	f008 fa7b 	bl	24b36 <log_0>
		return -1;
   1c640:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c644:	b009      	add	sp, #36	; 0x24
   1c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
   1c64a:	88f8      	ldrh	r0, [r7, #6]
   1c64c:	6839      	ldr	r1, [r7, #0]
   1c64e:	461e      	mov	r6, r3
   1c650:	4346      	muls	r6, r0
   1c652:	bf48      	it	mi
   1c654:	3607      	addmi	r6, #7
   1c656:	10f6      	asrs	r6, r6, #3
   1c658:	428e      	cmp	r6, r1
   1c65a:	bf28      	it	cs
   1c65c:	460e      	movcs	r6, r1
	if (buf == NULL || buf_len == 0U) {
   1c65e:	f1ba 0f00 	cmp.w	sl, #0
   1c662:	d000      	beq.n	1c666 <ssd1306_write+0x56>
   1c664:	b91e      	cbnz	r6, 1c66e <ssd1306_write+0x5e>
		LOG_ERR("Display buffer is not available");
   1c666:	482b      	ldr	r0, [pc, #172]	; (1c714 <ssd1306_write+0x104>)
   1c668:	f044 0101 	orr.w	r1, r4, #1
   1c66c:	e7e6      	b.n	1c63c <ssd1306_write+0x2c>
	if (desc->pitch > desc->width) {
   1c66e:	429a      	cmp	r2, r3
   1c670:	d903      	bls.n	1c67a <ssd1306_write+0x6a>
		LOG_ERR("Unsupported mode");
   1c672:	4829      	ldr	r0, [pc, #164]	; (1c718 <ssd1306_write+0x108>)
   1c674:	f044 0101 	orr.w	r1, r4, #1
   1c678:	e7e0      	b.n	1c63c <ssd1306_write+0x2c>
	if ((y & 0x7) != 0U) {
   1c67a:	f018 0b07 	ands.w	fp, r8, #7
   1c67e:	d003      	beq.n	1c688 <ssd1306_write+0x78>
		LOG_ERR("Unsupported origin");
   1c680:	4826      	ldr	r0, [pc, #152]	; (1c71c <ssd1306_write+0x10c>)
   1c682:	f044 0101 	orr.w	r1, r4, #1
   1c686:	e7d9      	b.n	1c63c <ssd1306_write+0x2c>
	LOG_DBG("x %u, y %u, pitch %u, width %u, height %u, buf_len %u",
   1c688:	4925      	ldr	r1, [pc, #148]	; (1c720 <ssd1306_write+0x110>)
   1c68a:	9607      	str	r6, [sp, #28]
   1c68c:	e9cd 1501 	strd	r1, r5, [sp, #4]
   1c690:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1c694:	e9cd 3005 	strd	r3, r0, [sp, #20]
   1c698:	2207      	movs	r2, #7
   1c69a:	4822      	ldr	r0, [pc, #136]	; (1c724 <ssd1306_write+0x114>)
   1c69c:	f044 0304 	orr.w	r3, r4, #4
   1c6a0:	a901      	add	r1, sp, #4
   1c6a2:	f008 fa9e 	bl	24be2 <log_n>
	uint8_t cmd_buf[] = {
   1c6a6:	2320      	movs	r3, #32
		((y + desc->height)/8 - 1)
   1c6a8:	88fa      	ldrh	r2, [r7, #6]
	uint8_t cmd_buf[] = {
   1c6aa:	f8ad 3004 	strh.w	r3, [sp, #4]
   1c6ae:	2321      	movs	r3, #33	; 0x21
		(x + desc->width - 1),
   1c6b0:	7939      	ldrb	r1, [r7, #4]
	uint8_t cmd_buf[] = {
   1c6b2:	f88d 3006 	strb.w	r3, [sp, #6]
   1c6b6:	2322      	movs	r3, #34	; 0x22
   1c6b8:	b2ed      	uxtb	r5, r5
   1c6ba:	f88d 3009 	strb.w	r3, [sp, #9]
   1c6be:	ea4f 03d8 	mov.w	r3, r8, lsr #3
		((y + desc->height)/8 - 1)
   1c6c2:	4490      	add	r8, r2
	uint8_t cmd_buf[] = {
   1c6c4:	f88d 5007 	strb.w	r5, [sp, #7]
		((y + desc->height)/8 - 1)
   1c6c8:	ea4f 08e8 	mov.w	r8, r8, asr #3
		(x + desc->width - 1),
   1c6cc:	440d      	add	r5, r1
   1c6ce:	3d01      	subs	r5, #1
	uint8_t cmd_buf[] = {
   1c6d0:	f88d 300a 	strb.w	r3, [sp, #10]
		((y + desc->height)/8 - 1)
   1c6d4:	f108 38ff 	add.w	r8, r8, #4294967295
	return i2c_burst_write_dt(&config->bus,
   1c6d8:	f8d9 0004 	ldr.w	r0, [r9, #4]
	uint8_t cmd_buf[] = {
   1c6dc:	f88d 5008 	strb.w	r5, [sp, #8]
	return i2c_burst_write_dt(&config->bus,
   1c6e0:	2308      	movs	r3, #8
   1c6e2:	aa01      	add	r2, sp, #4
   1c6e4:	4659      	mov	r1, fp
	uint8_t cmd_buf[] = {
   1c6e6:	f88d 800b 	strb.w	r8, [sp, #11]
	return i2c_burst_write_dt(&config->bus,
   1c6ea:	f00b f848 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
   1c6ee:	b118      	cbz	r0, 1c6f8 <ssd1306_write+0xe8>
		LOG_ERR("Failed to write command");
   1c6f0:	480d      	ldr	r0, [pc, #52]	; (1c728 <ssd1306_write+0x118>)
   1c6f2:	f044 0101 	orr.w	r1, r4, #1
   1c6f6:	e7a1      	b.n	1c63c <ssd1306_write+0x2c>
	return i2c_burst_write_dt(&config->bus,
   1c6f8:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1c6fc:	4633      	mov	r3, r6
   1c6fe:	4652      	mov	r2, sl
   1c700:	2140      	movs	r1, #64	; 0x40
   1c702:	f00b f83c 	bl	2777e <i2c_burst_write_dt>
	return ssd1306_write_bus(dev, (uint8_t *)buf, buf_len, false);
   1c706:	e79d      	b.n	1c644 <ssd1306_write+0x34>
   1c708:	00028740 	.word	0x00028740
   1c70c:	00028618 	.word	0x00028618
   1c710:	0002f51e 	.word	0x0002f51e
   1c714:	0002f53a 	.word	0x0002f53a
   1c718:	0002f55a 	.word	0x0002f55a
   1c71c:	0002f56b 	.word	0x0002f56b
   1c720:	0002f6c2 	.word	0x0002f6c2
   1c724:	0002f57e 	.word	0x0002f57e
   1c728:	0002f5b8 	.word	0x0002f5b8

0001c72c <ssd1306_init>:

	return 0;
}

static int ssd1306_init(const struct device *dev)
{
   1c72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c730:	4b80      	ldr	r3, [pc, #512]	; (1c934 <ssd1306_init+0x208>)
   1c732:	4d81      	ldr	r5, [pc, #516]	; (1c938 <ssd1306_init+0x20c>)
	const struct ssd1306_config *config = dev->config;
   1c734:	6846      	ldr	r6, [r0, #4]

	LOG_DBG("");
   1c736:	4981      	ldr	r1, [pc, #516]	; (1c93c <ssd1306_init+0x210>)
   1c738:	1aed      	subs	r5, r5, r3
   1c73a:	08ed      	lsrs	r5, r5, #3
{
   1c73c:	4604      	mov	r4, r0
	LOG_DBG("");
   1c73e:	01ad      	lsls	r5, r5, #6
{
   1c740:	b087      	sub	sp, #28
	LOG_DBG("");
   1c742:	487f      	ldr	r0, [pc, #508]	; (1c940 <ssd1306_init+0x214>)
   1c744:	f045 0204 	orr.w	r2, r5, #4
   1c748:	f008 fa02 	bl	24b50 <log_1>
	return device_is_ready(config->bus.bus);
   1c74c:	6863      	ldr	r3, [r4, #4]
   1c74e:	6818      	ldr	r0, [r3, #0]
   1c750:	f00b fc42 	bl	27fd8 <z_device_ready>
   1c754:	2800      	cmp	r0, #0
   1c756:	d064      	beq.n	1c822 <ssd1306_init+0xf6>
	if (!ssd1306_bus_ready(dev)) {
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
		return -EINVAL;
	}

	if (config->reset.port) {
   1c758:	68b7      	ldr	r7, [r6, #8]
   1c75a:	2f00      	cmp	r7, #0
   1c75c:	d16e      	bne.n	1c83c <ssd1306_init+0x110>
	const struct ssd1306_config *config = dev->config;
   1c75e:	6866      	ldr	r6, [r4, #4]
	uint8_t cmd_buf[] = {
   1c760:	f24a 63a4 	movw	r3, #42660	; 0xa6a4
   1c764:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (config->reset.port) {
   1c768:	68b3      	ldr	r3, [r6, #8]
   1c76a:	2b00      	cmp	r3, #0
   1c76c:	f040 80c6 	bne.w	1c8fc <ssd1306_init+0x1d0>
	if (ssd1306_suspend(dev)) {
   1c770:	4620      	mov	r0, r4
   1c772:	f00b f82c 	bl	277ce <ssd1306_suspend>
   1c776:	4601      	mov	r1, r0
   1c778:	2800      	cmp	r0, #0
   1c77a:	f040 80d2 	bne.w	1c922 <ssd1306_init+0x1f6>
	uint8_t cmd_buf[] = {
   1c77e:	4b71      	ldr	r3, [pc, #452]	; (1c944 <ssd1306_init+0x218>)
   1c780:	6818      	ldr	r0, [r3, #0]
   1c782:	889b      	ldrh	r3, [r3, #4]
   1c784:	9004      	str	r0, [sp, #16]
   1c786:	f8ad 3014 	strh.w	r3, [sp, #20]
	return i2c_burst_write_dt(&config->bus,
   1c78a:	6860      	ldr	r0, [r4, #4]
   1c78c:	2306      	movs	r3, #6
   1c78e:	aa04      	add	r2, sp, #16
   1c790:	f00a fff5 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_set_timing_setting(dev)) {
   1c794:	4601      	mov	r1, r0
   1c796:	2800      	cmp	r0, #0
   1c798:	f040 80c3 	bne.w	1c922 <ssd1306_init+0x1f6>
	uint8_t cmd_buf[] = {
   1c79c:	4b6a      	ldr	r3, [pc, #424]	; (1c948 <ssd1306_init+0x21c>)
   1c79e:	6818      	ldr	r0, [r3, #0]
   1c7a0:	889a      	ldrh	r2, [r3, #4]
   1c7a2:	799b      	ldrb	r3, [r3, #6]
   1c7a4:	9004      	str	r0, [sp, #16]
   1c7a6:	f8ad 2014 	strh.w	r2, [sp, #20]
   1c7aa:	f88d 3016 	strb.w	r3, [sp, #22]
	return i2c_burst_write_dt(&config->bus,
   1c7ae:	6860      	ldr	r0, [r4, #4]
   1c7b0:	2307      	movs	r3, #7
   1c7b2:	aa04      	add	r2, sp, #16
   1c7b4:	f00a ffe3 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_set_hardware_config(dev)) {
   1c7b8:	4601      	mov	r1, r0
   1c7ba:	2800      	cmp	r0, #0
   1c7bc:	f040 80b1 	bne.w	1c922 <ssd1306_init+0x1f6>
	uint8_t cmd_buf[] = {
   1c7c0:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1c7c4:	f8ad 3010 	strh.w	r3, [sp, #16]
	return i2c_burst_write_dt(&config->bus,
   1c7c8:	6860      	ldr	r0, [r4, #4]
   1c7ca:	2302      	movs	r3, #2
   1c7cc:	aa04      	add	r2, sp, #16
   1c7ce:	f00a ffd6 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_set_panel_orientation(dev)) {
   1c7d2:	4601      	mov	r1, r0
   1c7d4:	2800      	cmp	r0, #0
   1c7d6:	f040 80a4 	bne.w	1c922 <ssd1306_init+0x1f6>
	uint8_t cmd_buf[] = {
   1c7da:	4b5c      	ldr	r3, [pc, #368]	; (1c94c <ssd1306_init+0x220>)
	return i2c_burst_write_dt(&config->bus,
   1c7dc:	6860      	ldr	r0, [r4, #4]
	uint8_t cmd_buf[] = {
   1c7de:	881a      	ldrh	r2, [r3, #0]
   1c7e0:	789b      	ldrb	r3, [r3, #2]
   1c7e2:	f8ad 2010 	strh.w	r2, [sp, #16]
   1c7e6:	f88d 3012 	strb.w	r3, [sp, #18]
	return i2c_burst_write_dt(&config->bus,
   1c7ea:	aa04      	add	r2, sp, #16
   1c7ec:	2303      	movs	r3, #3
   1c7ee:	f00a ffc6 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_set_charge_pump(dev)) {
   1c7f2:	4601      	mov	r1, r0
   1c7f4:	2800      	cmp	r0, #0
   1c7f6:	f040 8094 	bne.w	1c922 <ssd1306_init+0x1f6>
	return i2c_burst_write_dt(&config->bus,
   1c7fa:	6860      	ldr	r0, [r4, #4]
   1c7fc:	2302      	movs	r3, #2
   1c7fe:	aa03      	add	r2, sp, #12
   1c800:	f00a ffbd 	bl	2777e <i2c_burst_write_dt>
	if (ssd1306_write_bus(dev, cmd_buf, sizeof(cmd_buf), true)) {
   1c804:	2800      	cmp	r0, #0
   1c806:	f040 808c 	bne.w	1c922 <ssd1306_init+0x1f6>
	if (ssd1306_set_contrast(dev, CONFIG_SSD1306_DEFAULT_CONTRAST)) {
   1c80a:	2180      	movs	r1, #128	; 0x80
   1c80c:	4620      	mov	r0, r4
   1c80e:	f00a ffeb 	bl	277e8 <ssd1306_set_contrast>
   1c812:	4606      	mov	r6, r0
   1c814:	2800      	cmp	r0, #0
   1c816:	f040 8084 	bne.w	1c922 <ssd1306_init+0x1f6>
	ssd1306_resume(dev);
   1c81a:	4620      	mov	r0, r4
   1c81c:	f00a ffca 	bl	277b4 <ssd1306_resume>
	return 0;
   1c820:	e008      	b.n	1c834 <ssd1306_init+0x108>
		LOG_ERR("Bus device %s not ready!", config->bus.bus->name);
   1c822:	6833      	ldr	r3, [r6, #0]
   1c824:	484a      	ldr	r0, [pc, #296]	; (1c950 <ssd1306_init+0x224>)
   1c826:	6819      	ldr	r1, [r3, #0]
   1c828:	f045 0201 	orr.w	r2, r5, #1
   1c82c:	f008 f990 	bl	24b50 <log_1>
		return -EINVAL;
   1c830:	f06f 0615 	mvn.w	r6, #21
		LOG_ERR("Failed to initialize device!");
		return -EIO;
	}

	return 0;
}
   1c834:	4630      	mov	r0, r6
   1c836:	b007      	add	sp, #28
   1c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return gpio_pin_configure(spec->port,
   1c83c:	f896 900c 	ldrb.w	r9, [r6, #12]
				  spec->dt_flags | extra_flags);
   1c840:	7b76      	ldrb	r6, [r6, #13]
	const struct gpio_driver_api *api =
   1c842:	68bb      	ldr	r3, [r7, #8]
   1c844:	9300      	str	r3, [sp, #0]
	const struct gpio_driver_config *const cfg =
   1c846:	687b      	ldr	r3, [r7, #4]
   1c848:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c84a:	f006 0330 	and.w	r3, r6, #48	; 0x30
   1c84e:	2b30      	cmp	r3, #48	; 0x30
	struct gpio_driver_data *data =
   1c850:	f8d7 b010 	ldr.w	fp, [r7, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c854:	d10e      	bne.n	1c874 <ssd1306_init+0x148>
   1c856:	493f      	ldr	r1, [pc, #252]	; (1c954 <ssd1306_init+0x228>)
   1c858:	4a3f      	ldr	r2, [pc, #252]	; (1c958 <ssd1306_init+0x22c>)
   1c85a:	4840      	ldr	r0, [pc, #256]	; (1c95c <ssd1306_init+0x230>)
   1c85c:	f240 23e1 	movw	r3, #737	; 0x2e1
   1c860:	f007 ff4a 	bl	246f8 <printk>
   1c864:	483e      	ldr	r0, [pc, #248]	; (1c960 <ssd1306_init+0x234>)
   1c866:	f007 ff47 	bl	246f8 <printk>
   1c86a:	483b      	ldr	r0, [pc, #236]	; (1c958 <ssd1306_init+0x22c>)
   1c86c:	f240 21e1 	movw	r1, #737	; 0x2e1
   1c870:	f008 f933 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c874:	f006 0306 	and.w	r3, r6, #6
   1c878:	2b04      	cmp	r3, #4
   1c87a:	d10b      	bne.n	1c894 <ssd1306_init+0x168>
   1c87c:	4939      	ldr	r1, [pc, #228]	; (1c964 <ssd1306_init+0x238>)
   1c87e:	4837      	ldr	r0, [pc, #220]	; (1c95c <ssd1306_init+0x230>)
   1c880:	4a35      	ldr	r2, [pc, #212]	; (1c958 <ssd1306_init+0x22c>)
   1c882:	f240 23e9 	movw	r3, #745	; 0x2e9
   1c886:	f007 ff37 	bl	246f8 <printk>
   1c88a:	4833      	ldr	r0, [pc, #204]	; (1c958 <ssd1306_init+0x22c>)
   1c88c:	f240 21e9 	movw	r1, #745	; 0x2e9
   1c890:	f008 f923 	bl	24ada <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c894:	9b01      	ldr	r3, [sp, #4]
   1c896:	f04f 0801 	mov.w	r8, #1
   1c89a:	681b      	ldr	r3, [r3, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c89c:	07f1      	lsls	r1, r6, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c89e:	fa08 f809 	lsl.w	r8, r8, r9
	return gpio_pin_configure(spec->port,
   1c8a2:	bf54      	ite	pl
   1c8a4:	f446 56b0 	orrpl.w	r6, r6, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c8a8:	f486 56d0 	eormi.w	r6, r6, #6656	; 0x1a00
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c8ac:	ea18 0f03 	tst.w	r8, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c8b0:	f426 5a80 	bic.w	sl, r6, #4096	; 0x1000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c8b4:	d10e      	bne.n	1c8d4 <ssd1306_init+0x1a8>
   1c8b6:	492c      	ldr	r1, [pc, #176]	; (1c968 <ssd1306_init+0x23c>)
   1c8b8:	4a27      	ldr	r2, [pc, #156]	; (1c958 <ssd1306_init+0x22c>)
   1c8ba:	4828      	ldr	r0, [pc, #160]	; (1c95c <ssd1306_init+0x230>)
   1c8bc:	f240 23fd 	movw	r3, #765	; 0x2fd
   1c8c0:	f007 ff1a 	bl	246f8 <printk>
   1c8c4:	4829      	ldr	r0, [pc, #164]	; (1c96c <ssd1306_init+0x240>)
   1c8c6:	f007 ff17 	bl	246f8 <printk>
   1c8ca:	4823      	ldr	r0, [pc, #140]	; (1c958 <ssd1306_init+0x22c>)
   1c8cc:	f240 21fd 	movw	r1, #765	; 0x2fd
   1c8d0:	f008 f903 	bl	24ada <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c8d4:	f8db 3000 	ldr.w	r3, [fp]
   1c8d8:	07f2      	lsls	r2, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c8da:	bf4c      	ite	mi
   1c8dc:	ea48 0303 	orrmi.w	r3, r8, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c8e0:	ea23 0308 	bicpl.w	r3, r3, r8
   1c8e4:	f8cb 3000 	str.w	r3, [fp]
	return api->pin_configure(port, pin, flags);
   1c8e8:	9b00      	ldr	r3, [sp, #0]
   1c8ea:	4652      	mov	r2, sl
   1c8ec:	681b      	ldr	r3, [r3, #0]
   1c8ee:	4649      	mov	r1, r9
   1c8f0:	4638      	mov	r0, r7
   1c8f2:	4798      	blx	r3
		if (ret < 0) {
   1c8f4:	1e06      	subs	r6, r0, #0
   1c8f6:	f6bf af32 	bge.w	1c75e <ssd1306_init+0x32>
   1c8fa:	e79b      	b.n	1c834 <ssd1306_init+0x108>
   1c8fc:	2100      	movs	r1, #0
   1c8fe:	2021      	movs	r0, #33	; 0x21
   1c900:	f006 ff38 	bl	23774 <z_impl_k_sleep>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1c904:	7b31      	ldrb	r1, [r6, #12]
   1c906:	68b0      	ldr	r0, [r6, #8]
   1c908:	2201      	movs	r2, #1
   1c90a:	f7ff fe23 	bl	1c554 <gpio_pin_set>
   1c90e:	2100      	movs	r1, #0
   1c910:	2021      	movs	r0, #33	; 0x21
   1c912:	f006 ff2f 	bl	23774 <z_impl_k_sleep>
   1c916:	7b31      	ldrb	r1, [r6, #12]
   1c918:	68b0      	ldr	r0, [r6, #8]
   1c91a:	2200      	movs	r2, #0
   1c91c:	f7ff fe1a 	bl	1c554 <gpio_pin_set>
   1c920:	e726      	b.n	1c770 <ssd1306_init+0x44>
		LOG_ERR("Failed to initialize device!");
   1c922:	4813      	ldr	r0, [pc, #76]	; (1c970 <ssd1306_init+0x244>)
   1c924:	f045 0101 	orr.w	r1, r5, #1
   1c928:	f008 f905 	bl	24b36 <log_0>
		return -EIO;
   1c92c:	f06f 0604 	mvn.w	r6, #4
   1c930:	e780      	b.n	1c834 <ssd1306_init+0x108>
   1c932:	bf00      	nop
   1c934:	00028618 	.word	0x00028618
   1c938:	00028740 	.word	0x00028740
   1c93c:	0002f6d0 	.word	0x0002f6d0
   1c940:	000295c2 	.word	0x000295c2
   1c944:	0002f6af 	.word	0x0002f6af
   1c948:	00028873 	.word	0x00028873
   1c94c:	0002f6b6 	.word	0x0002f6b6
   1c950:	0002f5d0 	.word	0x0002f5d0
   1c954:	0002f5e9 	.word	0x0002f5e9
   1c958:	0002f4a4 	.word	0x0002f4a4
   1c95c:	000290f5 	.word	0x000290f5
   1c960:	0002f622 	.word	0x0002f622
   1c964:	0002f65f 	.word	0x0002f65f
   1c968:	0002f4ce 	.word	0x0002f4ce
   1c96c:	0002f50c 	.word	0x0002f50c
   1c970:	0002f692 	.word	0x0002f692

0001c974 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c974:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c976:	6905      	ldr	r5, [r0, #16]
{
   1c978:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c97a:	460c      	mov	r4, r1
   1c97c:	b961      	cbnz	r1, 1c998 <gpio_nrfx_manage_callback+0x24>
   1c97e:	4922      	ldr	r1, [pc, #136]	; (1ca08 <gpio_nrfx_manage_callback+0x94>)
   1c980:	4a22      	ldr	r2, [pc, #136]	; (1ca0c <gpio_nrfx_manage_callback+0x98>)
   1c982:	4823      	ldr	r0, [pc, #140]	; (1ca10 <gpio_nrfx_manage_callback+0x9c>)
   1c984:	2324      	movs	r3, #36	; 0x24
   1c986:	f007 feb7 	bl	246f8 <printk>
   1c98a:	4822      	ldr	r0, [pc, #136]	; (1ca14 <gpio_nrfx_manage_callback+0xa0>)
   1c98c:	f007 feb4 	bl	246f8 <printk>
   1c990:	481e      	ldr	r0, [pc, #120]	; (1ca0c <gpio_nrfx_manage_callback+0x98>)
   1c992:	2124      	movs	r1, #36	; 0x24
   1c994:	f008 f8a1 	bl	24ada <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1c998:	6863      	ldr	r3, [r4, #4]
   1c99a:	b963      	cbnz	r3, 1c9b6 <gpio_nrfx_manage_callback+0x42>
   1c99c:	491e      	ldr	r1, [pc, #120]	; (1ca18 <gpio_nrfx_manage_callback+0xa4>)
   1c99e:	4a1b      	ldr	r2, [pc, #108]	; (1ca0c <gpio_nrfx_manage_callback+0x98>)
   1c9a0:	481b      	ldr	r0, [pc, #108]	; (1ca10 <gpio_nrfx_manage_callback+0x9c>)
   1c9a2:	2325      	movs	r3, #37	; 0x25
   1c9a4:	f007 fea8 	bl	246f8 <printk>
   1c9a8:	481c      	ldr	r0, [pc, #112]	; (1ca1c <gpio_nrfx_manage_callback+0xa8>)
   1c9aa:	f007 fea5 	bl	246f8 <printk>
   1c9ae:	4817      	ldr	r0, [pc, #92]	; (1ca0c <gpio_nrfx_manage_callback+0x98>)
   1c9b0:	2125      	movs	r1, #37	; 0x25
   1c9b2:	f008 f892 	bl	24ada <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1c9b6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c9b8:	b15b      	cbz	r3, 1c9d2 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9ba:	2200      	movs	r2, #0
   1c9bc:	429c      	cmp	r4, r3
   1c9be:	d113      	bne.n	1c9e8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1c9c0:	6823      	ldr	r3, [r4, #0]
   1c9c2:	b95a      	cbnz	r2, 1c9dc <gpio_nrfx_manage_callback+0x68>
   1c9c4:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1c9c6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c9c8:	4294      	cmp	r4, r2
   1c9ca:	d100      	bne.n	1c9ce <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1c9cc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1c9ce:	2300      	movs	r3, #0
   1c9d0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1c9d2:	b976      	cbnz	r6, 1c9f2 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c9d4:	2000      	movs	r0, #0
				     callback, set);
}
   1c9d6:	bd70      	pop	{r4, r5, r6, pc}
   1c9d8:	460b      	mov	r3, r1
   1c9da:	e7ef      	b.n	1c9bc <gpio_nrfx_manage_callback+0x48>
   1c9dc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c9de:	68ab      	ldr	r3, [r5, #8]
   1c9e0:	429c      	cmp	r4, r3
	list->tail = node;
   1c9e2:	bf08      	it	eq
   1c9e4:	60aa      	streq	r2, [r5, #8]
}
   1c9e6:	e7f2      	b.n	1c9ce <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c9e8:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9ea:	461a      	mov	r2, r3
   1c9ec:	2900      	cmp	r1, #0
   1c9ee:	d1f3      	bne.n	1c9d8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c9f0:	b13e      	cbz	r6, 1ca02 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1c9f2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1c9f4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c9f6:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1c9f8:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c9fa:	2800      	cmp	r0, #0
   1c9fc:	d1ea      	bne.n	1c9d4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c9fe:	60ac      	str	r4, [r5, #8]
}
   1ca00:	e7e9      	b.n	1c9d6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1ca02:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ca06:	e7e6      	b.n	1c9d6 <gpio_nrfx_manage_callback+0x62>
   1ca08:	0002f70a 	.word	0x0002f70a
   1ca0c:	0002f6dd 	.word	0x0002f6dd
   1ca10:	000290f5 	.word	0x000290f5
   1ca14:	0002f713 	.word	0x0002f713
   1ca18:	0002f722 	.word	0x0002f722
   1ca1c:	0002f734 	.word	0x0002f734

0001ca20 <gpio_nrfx_pin_interrupt_configure>:
{
   1ca20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ca22:	6840      	ldr	r0, [r0, #4]
   1ca24:	7b05      	ldrb	r5, [r0, #12]
   1ca26:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ca2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ca2e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1ca32:	f04f 0500 	mov.w	r5, #0
   1ca36:	d104      	bne.n	1ca42 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1ca38:	4620      	mov	r0, r4
   1ca3a:	f003 f9ad 	bl	1fd98 <nrfx_gpiote_trigger_disable>
	return 0;
   1ca3e:	2000      	movs	r0, #0
   1ca40:	e04f      	b.n	1cae2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ca42:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca46:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1ca4a:	d14c      	bne.n	1cae6 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1ca4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1ca50:	bf0c      	ite	eq
   1ca52:	2304      	moveq	r3, #4
   1ca54:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ca56:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1ca5a:	6883      	ldr	r3, [r0, #8]
   1ca5c:	fa23 f101 	lsr.w	r1, r3, r1
   1ca60:	07c9      	lsls	r1, r1, #31
   1ca62:	d44c      	bmi.n	1cafe <gpio_nrfx_pin_interrupt_configure+0xde>
   1ca64:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1ca68:	d149      	bne.n	1cafe <gpio_nrfx_pin_interrupt_configure+0xde>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1ca6a:	0966      	lsrs	r6, r4, #5
   1ca6c:	bf0c      	ite	eq
   1ca6e:	f04f 33ff 	moveq.w	r3, #4294967295
   1ca72:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1ca74:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1ca78:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ca7a:	07da      	lsls	r2, r3, #31
   1ca7c:	d40b      	bmi.n	1ca96 <gpio_nrfx_pin_interrupt_configure+0x76>
   1ca7e:	4928      	ldr	r1, [pc, #160]	; (1cb20 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1ca80:	4828      	ldr	r0, [pc, #160]	; (1cb24 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1ca82:	4a29      	ldr	r2, [pc, #164]	; (1cb28 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1ca84:	f240 2329 	movw	r3, #553	; 0x229
   1ca88:	f007 fe36 	bl	246f8 <printk>
   1ca8c:	4826      	ldr	r0, [pc, #152]	; (1cb28 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1ca8e:	f240 2129 	movw	r1, #553	; 0x229
   1ca92:	f008 f822 	bl	24ada <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ca96:	b15e      	cbz	r6, 1cab0 <gpio_nrfx_pin_interrupt_configure+0x90>
            NRFX_ASSERT(0);
   1ca98:	4924      	ldr	r1, [pc, #144]	; (1cb2c <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1ca9a:	4822      	ldr	r0, [pc, #136]	; (1cb24 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1ca9c:	4a22      	ldr	r2, [pc, #136]	; (1cb28 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1ca9e:	f240 232e 	movw	r3, #558	; 0x22e
   1caa2:	f007 fe29 	bl	246f8 <printk>
   1caa6:	4820      	ldr	r0, [pc, #128]	; (1cb28 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1caa8:	f240 212e 	movw	r1, #558	; 0x22e
   1caac:	f008 f815 	bl	24ada <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cab0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1cab4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1cab8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1cabc:	07db      	lsls	r3, r3, #31
   1cabe:	d41e      	bmi.n	1cafe <gpio_nrfx_pin_interrupt_configure+0xde>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cac0:	f10d 0507 	add.w	r5, sp, #7
   1cac4:	4629      	mov	r1, r5
   1cac6:	4620      	mov	r0, r4
   1cac8:	f003 f890 	bl	1fbec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1cacc:	4b18      	ldr	r3, [pc, #96]	; (1cb30 <gpio_nrfx_pin_interrupt_configure+0x110>)
   1cace:	4298      	cmp	r0, r3
   1cad0:	d114      	bne.n	1cafc <gpio_nrfx_pin_interrupt_configure+0xdc>
			err = nrfx_gpiote_channel_alloc(&ch);
   1cad2:	4628      	mov	r0, r5
   1cad4:	f003 f8ea 	bl	1fcac <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1cad8:	4b16      	ldr	r3, [pc, #88]	; (1cb34 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1cada:	4298      	cmp	r0, r3
   1cadc:	d00e      	beq.n	1cafc <gpio_nrfx_pin_interrupt_configure+0xdc>
				return -ENOMEM;
   1cade:	f06f 000b 	mvn.w	r0, #11
}
   1cae2:	b004      	add	sp, #16
   1cae4:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cae6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1caea:	d005      	beq.n	1caf8 <gpio_nrfx_pin_interrupt_configure+0xd8>
   1caec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1caf0:	bf0c      	ite	eq
   1caf2:	2302      	moveq	r3, #2
   1caf4:	2301      	movne	r3, #1
   1caf6:	e7ae      	b.n	1ca56 <gpio_nrfx_pin_interrupt_configure+0x36>
   1caf8:	2303      	movs	r3, #3
   1cafa:	e7ac      	b.n	1ca56 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   1cafc:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cafe:	2300      	movs	r3, #0
   1cb00:	4619      	mov	r1, r3
   1cb02:	aa02      	add	r2, sp, #8
   1cb04:	4620      	mov	r0, r4
   1cb06:	f002 ff53 	bl	1f9b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cb0a:	4b0a      	ldr	r3, [pc, #40]	; (1cb34 <gpio_nrfx_pin_interrupt_configure+0x114>)
   1cb0c:	4298      	cmp	r0, r3
   1cb0e:	d104      	bne.n	1cb1a <gpio_nrfx_pin_interrupt_configure+0xfa>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1cb10:	2101      	movs	r1, #1
   1cb12:	4620      	mov	r0, r4
   1cb14:	f003 f8d0 	bl	1fcb8 <nrfx_gpiote_trigger_enable>
   1cb18:	e791      	b.n	1ca3e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   1cb1a:	f06f 0004 	mvn.w	r0, #4
   1cb1e:	e7e0      	b.n	1cae2 <gpio_nrfx_pin_interrupt_configure+0xc2>
   1cb20:	0002f77e 	.word	0x0002f77e
   1cb24:	000290f5 	.word	0x000290f5
   1cb28:	0002f74b 	.word	0x0002f74b
   1cb2c:	0002cf26 	.word	0x0002cf26
   1cb30:	0bad0004 	.word	0x0bad0004
   1cb34:	0bad0000 	.word	0x0bad0000

0001cb38 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1cb38:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1cb3a:	f003 f8a7 	bl	1fc8c <nrfx_gpiote_is_init>
   1cb3e:	4604      	mov	r4, r0
   1cb40:	b968      	cbnz	r0, 1cb5e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1cb42:	f003 f87b 	bl	1fc3c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1cb46:	4b08      	ldr	r3, [pc, #32]	; (1cb68 <gpio_nrfx_init+0x30>)
   1cb48:	4298      	cmp	r0, r3
   1cb4a:	d10a      	bne.n	1cb62 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1cb4c:	4807      	ldr	r0, [pc, #28]	; (1cb6c <gpio_nrfx_init+0x34>)
   1cb4e:	4621      	mov	r1, r4
   1cb50:	f003 f846 	bl	1fbe0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1cb54:	4622      	mov	r2, r4
   1cb56:	2105      	movs	r1, #5
   1cb58:	2006      	movs	r0, #6
   1cb5a:	f7f6 ff87 	bl	13a6c <z_arm_irq_priority_set>
		return 0;
   1cb5e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1cb60:	bd10      	pop	{r4, pc}
		return -EIO;
   1cb62:	f06f 0004 	mvn.w	r0, #4
   1cb66:	e7fb      	b.n	1cb60 <gpio_nrfx_init+0x28>
   1cb68:	0bad0000 	.word	0x0bad0000
   1cb6c:	0001cb71 	.word	0x0001cb71

0001cb70 <nrfx_gpio_handler>:
{
   1cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1cb74:	0943      	lsrs	r3, r0, #5
   1cb76:	d12e      	bne.n	1cbd6 <nrfx_gpio_handler+0x66>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cb78:	4b18      	ldr	r3, [pc, #96]	; (1cbdc <nrfx_gpio_handler+0x6c>)
   1cb7a:	685c      	ldr	r4, [r3, #4]
   1cb7c:	b35c      	cbz	r4, 1cbd6 <nrfx_gpio_handler+0x66>
   1cb7e:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1cb80:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1cbec <nrfx_gpio_handler+0x7c>
			__ASSERT(cb->handler, "No callback handler!");
   1cb84:	4f16      	ldr	r7, [pc, #88]	; (1cbe0 <nrfx_gpio_handler+0x70>)
   1cb86:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1cbf0 <nrfx_gpio_handler+0x80>
	gpio_fire_callbacks(list, port, BIT(pin));
   1cb8a:	2601      	movs	r6, #1
   1cb8c:	2d00      	cmp	r5, #0
   1cb8e:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   1cb92:	bf38      	it	cc
   1cb94:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1cb96:	68a3      	ldr	r3, [r4, #8]
   1cb98:	421e      	tst	r6, r3
   1cb9a:	d014      	beq.n	1cbc6 <nrfx_gpio_handler+0x56>
			__ASSERT(cb->handler, "No callback handler!");
   1cb9c:	6863      	ldr	r3, [r4, #4]
   1cb9e:	b963      	cbnz	r3, 1cbba <nrfx_gpio_handler+0x4a>
   1cba0:	4649      	mov	r1, r9
   1cba2:	4810      	ldr	r0, [pc, #64]	; (1cbe4 <nrfx_gpio_handler+0x74>)
   1cba4:	2345      	movs	r3, #69	; 0x45
   1cba6:	463a      	mov	r2, r7
   1cba8:	f007 fda6 	bl	246f8 <printk>
   1cbac:	480e      	ldr	r0, [pc, #56]	; (1cbe8 <nrfx_gpio_handler+0x78>)
   1cbae:	f007 fda3 	bl	246f8 <printk>
   1cbb2:	2145      	movs	r1, #69	; 0x45
   1cbb4:	4638      	mov	r0, r7
   1cbb6:	f007 ff90 	bl	24ada <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cbba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1cbbe:	4621      	mov	r1, r4
   1cbc0:	4032      	ands	r2, r6
   1cbc2:	4640      	mov	r0, r8
   1cbc4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cbc6:	b135      	cbz	r5, 1cbd6 <nrfx_gpio_handler+0x66>
   1cbc8:	682b      	ldr	r3, [r5, #0]
   1cbca:	2b00      	cmp	r3, #0
   1cbcc:	bf38      	it	cc
   1cbce:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cbd0:	462c      	mov	r4, r5
   1cbd2:	461d      	mov	r5, r3
   1cbd4:	e7df      	b.n	1cb96 <nrfx_gpio_handler+0x26>
}
   1cbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cbda:	bf00      	nop
   1cbdc:	20002324 	.word	0x20002324
   1cbe0:	0002f6dd 	.word	0x0002f6dd
   1cbe4:	000290f5 	.word	0x000290f5
   1cbe8:	0002f734 	.word	0x0002f734
   1cbec:	00028388 	.word	0x00028388
   1cbf0:	000300ce 	.word	0x000300ce

0001cbf4 <gpio_nrfx_pin_configure>:
{
   1cbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1cbf8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cbfa:	7b3b      	ldrb	r3, [r7, #12]
   1cbfc:	f001 051f 	and.w	r5, r1, #31
{
   1cc00:	b085      	sub	sp, #20
   1cc02:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cc04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1cc08:	4614      	mov	r4, r2
   1cc0a:	b9ca      	cbnz	r2, 1cc40 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1cc0c:	a902      	add	r1, sp, #8
   1cc0e:	4628      	mov	r0, r5
   1cc10:	f002 ffec 	bl	1fbec <nrfx_gpiote_channel_get>
   1cc14:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1cc16:	4628      	mov	r0, r5
   1cc18:	f003 f8e0 	bl	1fddc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1cc1c:	4b48      	ldr	r3, [pc, #288]	; (1cd40 <gpio_nrfx_pin_configure+0x14c>)
   1cc1e:	4298      	cmp	r0, r3
   1cc20:	d004      	beq.n	1cc2c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1cc22:	f06f 0004 	mvn.w	r0, #4
}
   1cc26:	b005      	add	sp, #20
   1cc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1cc2c:	4284      	cmp	r4, r0
   1cc2e:	d105      	bne.n	1cc3c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1cc30:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1cc34:	f003 f834 	bl	1fca0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1cc38:	42a0      	cmp	r0, r4
   1cc3a:	d1f2      	bne.n	1cc22 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1cc3c:	2000      	movs	r0, #0
   1cc3e:	e7f2      	b.n	1cc26 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cc40:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1cc44:	f10d 0103 	add.w	r1, sp, #3
   1cc48:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cc4a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1cc4e:	f002 ffcd 	bl	1fbec <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cc52:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1cc54:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cc56:	aa02      	add	r2, sp, #8
   1cc58:	4649      	mov	r1, r9
   1cc5a:	4628      	mov	r0, r5
   1cc5c:	f002 fea8 	bl	1f9b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cc60:	4b37      	ldr	r3, [pc, #220]	; (1cd40 <gpio_nrfx_pin_configure+0x14c>)
   1cc62:	4298      	cmp	r0, r3
   1cc64:	d002      	beq.n	1cc6c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cc66:	f06f 0015 	mvn.w	r0, #21
   1cc6a:	e7dc      	b.n	1cc26 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1cc6c:	4580      	cmp	r8, r0
   1cc6e:	d103      	bne.n	1cc78 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1cc70:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1cc74:	f003 f814 	bl	1fca0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1cc78:	05a3      	lsls	r3, r4, #22
   1cc7a:	d54e      	bpl.n	1cd1a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cc7c:	4b31      	ldr	r3, [pc, #196]	; (1cd44 <gpio_nrfx_pin_configure+0x150>)
   1cc7e:	4a32      	ldr	r2, [pc, #200]	; (1cd48 <gpio_nrfx_pin_configure+0x154>)
   1cc80:	4023      	ands	r3, r4
   1cc82:	4293      	cmp	r3, r2
   1cc84:	d03a      	beq.n	1ccfc <gpio_nrfx_pin_configure+0x108>
   1cc86:	d80c      	bhi.n	1cca2 <gpio_nrfx_pin_configure+0xae>
   1cc88:	2b06      	cmp	r3, #6
   1cc8a:	d014      	beq.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
   1cc8c:	d804      	bhi.n	1cc98 <gpio_nrfx_pin_configure+0xa4>
   1cc8e:	b193      	cbz	r3, 1ccb6 <gpio_nrfx_pin_configure+0xc2>
   1cc90:	2b02      	cmp	r3, #2
   1cc92:	d1e8      	bne.n	1cc66 <gpio_nrfx_pin_configure+0x72>
   1cc94:	2304      	movs	r3, #4
   1cc96:	e00e      	b.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
   1cc98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cc9c:	d1e3      	bne.n	1cc66 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1cc9e:	2301      	movs	r3, #1
   1cca0:	e009      	b.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cca2:	4a2a      	ldr	r2, [pc, #168]	; (1cd4c <gpio_nrfx_pin_configure+0x158>)
   1cca4:	4293      	cmp	r3, r2
   1cca6:	d02b      	beq.n	1cd00 <gpio_nrfx_pin_configure+0x10c>
   1cca8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ccac:	d02a      	beq.n	1cd04 <gpio_nrfx_pin_configure+0x110>
   1ccae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1ccb2:	d1d8      	bne.n	1cc66 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1ccb4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1ccb6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1ccba:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1ccbe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1ccc2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1ccc4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1ccc8:	bf54      	ite	pl
   1ccca:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1ccce:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1ccd0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1ccd2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1ccd6:	d517      	bpl.n	1cd08 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1ccd8:	687b      	ldr	r3, [r7, #4]
   1ccda:	2101      	movs	r1, #1
   1ccdc:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1cce0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1cce4:	2200      	movs	r2, #0
   1cce6:	a901      	add	r1, sp, #4
   1cce8:	4628      	mov	r0, r5
   1ccea:	f002 ff09 	bl	1fb00 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1ccee:	4b14      	ldr	r3, [pc, #80]	; (1cd40 <gpio_nrfx_pin_configure+0x14c>)
   1ccf0:	4298      	cmp	r0, r3
   1ccf2:	bf14      	ite	ne
   1ccf4:	f06f 0015 	mvnne.w	r0, #21
   1ccf8:	2000      	moveq	r0, #0
   1ccfa:	e794      	b.n	1cc26 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1ccfc:	2307      	movs	r3, #7
   1ccfe:	e7da      	b.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1cd00:	2305      	movs	r3, #5
   1cd02:	e7d8      	b.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1cd04:	2303      	movs	r3, #3
   1cd06:	e7d6      	b.n	1ccb6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1cd08:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1cd0a:	bf41      	itttt	mi
   1cd0c:	687b      	ldrmi	r3, [r7, #4]
   1cd0e:	2101      	movmi	r1, #1
   1cd10:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1cd14:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1cd18:	e7e4      	b.n	1cce4 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1cd1a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cd1c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1cd20:	bf54      	ite	pl
   1cd22:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1cd26:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cd28:	461a      	mov	r2, r3
   1cd2a:	a901      	add	r1, sp, #4
   1cd2c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1cd2e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cd32:	f002 fe3d 	bl	1f9b0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1cd36:	4b02      	ldr	r3, [pc, #8]	; (1cd40 <gpio_nrfx_pin_configure+0x14c>)
   1cd38:	4298      	cmp	r0, r3
   1cd3a:	f43f af7f 	beq.w	1cc3c <gpio_nrfx_pin_configure+0x48>
   1cd3e:	e792      	b.n	1cc66 <gpio_nrfx_pin_configure+0x72>
   1cd40:	0bad0000 	.word	0x0bad0000
   1cd44:	00f00006 	.word	0x00f00006
   1cd48:	00100006 	.word	0x00100006
   1cd4c:	00400002 	.word	0x00400002

0001cd50 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   1cd50:	b508      	push	{r3, lr}
	nrfx_err_t err = nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   1cd52:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1cd54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1cd58:	f003 fcca 	bl	206f0 <nrfx_twi_twim_bus_recover>
					      get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1cd5c:	4b03      	ldr	r3, [pc, #12]	; (1cd6c <i2c_nrfx_twi_recover_bus+0x1c>)
   1cd5e:	4298      	cmp	r0, r3
}
   1cd60:	bf14      	ite	ne
   1cd62:	f06f 000f 	mvnne.w	r0, #15
   1cd66:	2000      	moveq	r0, #0
   1cd68:	bd08      	pop	{r3, pc}
   1cd6a:	bf00      	nop
   1cd6c:	0bad0000 	.word	0x0bad0000

0001cd70 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1cd70:	b510      	push	{r4, lr}
   1cd72:	4604      	mov	r4, r0
   1cd74:	2200      	movs	r2, #0
   1cd76:	2101      	movs	r1, #1
   1cd78:	2003      	movs	r0, #3
   1cd7a:	f7f6 fe77 	bl	13a6c <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1cd7e:	6860      	ldr	r0, [r4, #4]
   1cd80:	6923      	ldr	r3, [r4, #16]
   1cd82:	4a0c      	ldr	r2, [pc, #48]	; (1cdb4 <twi_0_init+0x44>)
   1cd84:	f100 0108 	add.w	r1, r0, #8
   1cd88:	f003 fa98 	bl	202bc <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1cd8c:	4b0a      	ldr	r3, [pc, #40]	; (1cdb8 <twi_0_init+0x48>)
   1cd8e:	4298      	cmp	r0, r3
   1cd90:	d00d      	beq.n	1cdae <twi_0_init+0x3e>
   1cd92:	4b0a      	ldr	r3, [pc, #40]	; (1cdbc <twi_0_init+0x4c>)
   1cd94:	4a0a      	ldr	r2, [pc, #40]	; (1cdc0 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1cd96:	480b      	ldr	r0, [pc, #44]	; (1cdc4 <twi_0_init+0x54>)
   1cd98:	6821      	ldr	r1, [r4, #0]
   1cd9a:	1ad2      	subs	r2, r2, r3
   1cd9c:	08d2      	lsrs	r2, r2, #3
   1cd9e:	0192      	lsls	r2, r2, #6
   1cda0:	f042 0201 	orr.w	r2, r2, #1
   1cda4:	f007 fed4 	bl	24b50 <log_1>
		return -EBUSY;
   1cda8:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1cdac:	bd10      	pop	{r4, pc}
	return 0;
   1cdae:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1cdb0:	e7fc      	b.n	1cdac <twi_0_init+0x3c>
   1cdb2:	bf00      	nop
   1cdb4:	0001ce1d 	.word	0x0001ce1d
   1cdb8:	0bad0000 	.word	0x0bad0000
   1cdbc:	00028618 	.word	0x00028618
   1cdc0:	000286d0 	.word	0x000286d0
   1cdc4:	0002f7ac 	.word	0x0002f7ac

0001cdc8 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1cdc8:	07ca      	lsls	r2, r1, #31
{
   1cdca:	b508      	push	{r3, lr}
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   1cdcc:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1cdce:	d40f      	bmi.n	1cdf0 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1cdd0:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1cdd4:	2a01      	cmp	r2, #1
   1cdd6:	d00e      	beq.n	1cdf6 <i2c_nrfx_twi_configure+0x2e>
   1cdd8:	2a02      	cmp	r2, #2
   1cdda:	d015      	beq.n	1ce08 <i2c_nrfx_twi_configure+0x40>
   1cddc:	490c      	ldr	r1, [pc, #48]	; (1ce10 <i2c_nrfx_twi_configure+0x48>)
   1cdde:	4b0d      	ldr	r3, [pc, #52]	; (1ce14 <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1cde0:	480d      	ldr	r0, [pc, #52]	; (1ce18 <i2c_nrfx_twi_configure+0x50>)
   1cde2:	1ac9      	subs	r1, r1, r3
   1cde4:	08c9      	lsrs	r1, r1, #3
   1cde6:	0189      	lsls	r1, r1, #6
   1cde8:	f041 0101 	orr.w	r1, r1, #1
   1cdec:	f007 fea3 	bl	24b36 <log_0>
		return -EINVAL;
   1cdf0:	f06f 0015 	mvn.w	r0, #21
   1cdf4:	e007      	b.n	1ce06 <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1cdf6:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1cdf8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1cdfc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1ce00:	6903      	ldr	r3, [r0, #16]
	return 0;
   1ce02:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1ce04:	6359      	str	r1, [r3, #52]	; 0x34
}
   1ce06:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1ce0e:	e7f5      	b.n	1cdfc <i2c_nrfx_twi_configure+0x34>
   1ce10:	000286d0 	.word	0x000286d0
   1ce14:	00028618 	.word	0x00028618
   1ce18:	0002f7cc 	.word	0x0002f7cc

0001ce1c <event_handler>:
	switch (p_event->type) {
   1ce1c:	7803      	ldrb	r3, [r0, #0]
   1ce1e:	2b01      	cmp	r3, #1
   1ce20:	d008      	beq.n	1ce34 <event_handler+0x18>
   1ce22:	2b02      	cmp	r3, #2
   1ce24:	d008      	beq.n	1ce38 <event_handler+0x1c>
   1ce26:	b94b      	cbnz	r3, 1ce3c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1ce28:	4b05      	ldr	r3, [pc, #20]	; (1ce40 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ce2a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1ce2c:	f101 0018 	add.w	r0, r1, #24
   1ce30:	f004 bdd0 	b.w	219d4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ce34:	4b03      	ldr	r3, [pc, #12]	; (1ce44 <event_handler+0x28>)
   1ce36:	e7f8      	b.n	1ce2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ce38:	4b03      	ldr	r3, [pc, #12]	; (1ce48 <event_handler+0x2c>)
   1ce3a:	e7f6      	b.n	1ce2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1ce3c:	4b03      	ldr	r3, [pc, #12]	; (1ce4c <event_handler+0x30>)
   1ce3e:	e7f4      	b.n	1ce2a <event_handler+0xe>
   1ce40:	0bad0000 	.word	0x0bad0000
   1ce44:	0bae0001 	.word	0x0bae0001
   1ce48:	0bae0002 	.word	0x0bae0002
   1ce4c:	0bad0001 	.word	0x0bad0001

0001ce50 <i2c_nrfx_twi_transfer>:
{
   1ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce54:	4604      	mov	r4, r0
   1ce56:	b087      	sub	sp, #28
   1ce58:	460d      	mov	r5, r1
   1ce5a:	4690      	mov	r8, r2
   1ce5c:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1ce5e:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   1ce60:	f04f 32ff 	mov.w	r2, #4294967295
   1ce64:	f04f 33ff 	mov.w	r3, #4294967295
   1ce68:	f004 fdf8 	bl	21a5c <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1ce6c:	6920      	ldr	r0, [r4, #16]
   1ce6e:	3018      	adds	r0, #24
   1ce70:	2200      	movs	r2, #0
   1ce72:	2300      	movs	r3, #0
   1ce74:	f004 fdf2 	bl	21a5c <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1ce78:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1ce7a:	f8df a108 	ldr.w	sl, [pc, #264]	; 1cf84 <i2c_nrfx_twi_transfer+0x134>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1ce7e:	f003 fa8d 	bl	2039c <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1ce82:	2600      	movs	r6, #0
   1ce84:	4546      	cmp	r6, r8
   1ce86:	d301      	bcc.n	1ce8c <i2c_nrfx_twi_transfer+0x3c>
   1ce88:	2500      	movs	r5, #0
   1ce8a:	e02d      	b.n	1cee8 <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1ce8c:	f895 b008 	ldrb.w	fp, [r5, #8]
   1ce90:	f01b 0708 	ands.w	r7, fp, #8
   1ce94:	d168      	bne.n	1cf68 <i2c_nrfx_twi_transfer+0x118>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ce96:	2214      	movs	r2, #20
   1ce98:	4639      	mov	r1, r7
   1ce9a:	a801      	add	r0, sp, #4
   1ce9c:	f008 fd6d 	bl	2597a <memset>
   1cea0:	686a      	ldr	r2, [r5, #4]
   1cea2:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1cea4:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1cea8:	682a      	ldr	r2, [r5, #0]
   1ceaa:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ceae:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ceb2:	f88d 9005 	strb.w	r9, [sp, #5]
   1ceb6:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ceb8:	d120      	bne.n	1cefc <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1ceba:	f108 32ff 	add.w	r2, r8, #4294967295
   1cebe:	42b2      	cmp	r2, r6
   1cec0:	d902      	bls.n	1cec8 <i2c_nrfx_twi_transfer+0x78>
   1cec2:	7d2a      	ldrb	r2, [r5, #20]
   1cec4:	0752      	lsls	r2, r2, #29
   1cec6:	d51b      	bpl.n	1cf00 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1cec8:	2b00      	cmp	r3, #0
   1ceca:	d14d      	bne.n	1cf68 <i2c_nrfx_twi_transfer+0x118>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1cecc:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1cece:	6860      	ldr	r0, [r4, #4]
   1ced0:	a901      	add	r1, sp, #4
   1ced2:	f003 fac3 	bl	2045c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1ced6:	4550      	cmp	r0, sl
   1ced8:	d014      	beq.n	1cf04 <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1ceda:	4b25      	ldr	r3, [pc, #148]	; (1cf70 <i2c_nrfx_twi_transfer+0x120>)
				ret = -EIO;
   1cedc:	4298      	cmp	r0, r3
   1cede:	bf0c      	ite	eq
   1cee0:	f06f 050f 	mvneq.w	r5, #15
   1cee4:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1cee8:	6860      	ldr	r0, [r4, #4]
   1ceea:	f003 fa81 	bl	203f0 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1ceee:	6920      	ldr	r0, [r4, #16]
	z_impl_k_sem_give(sem);
   1cef0:	f004 fd70 	bl	219d4 <z_impl_k_sem_give>
}
   1cef4:	4628      	mov	r0, r5
   1cef6:	b007      	add	sp, #28
   1cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1cefc:	463a      	mov	r2, r7
   1cefe:	e7e6      	b.n	1cece <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1cf00:	2240      	movs	r2, #64	; 0x40
   1cf02:	e7e4      	b.n	1cece <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1cf04:	6920      	ldr	r0, [r4, #16]
   1cf06:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1cf08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	f004 fda5 	bl	21a5c <z_impl_k_sem_take>
		if (ret != 0) {
   1cf12:	b1a8      	cbz	r0, 1cf40 <i2c_nrfx_twi_transfer+0xf0>
   1cf14:	4b17      	ldr	r3, [pc, #92]	; (1cf74 <i2c_nrfx_twi_transfer+0x124>)
   1cf16:	4a18      	ldr	r2, [pc, #96]	; (1cf78 <i2c_nrfx_twi_transfer+0x128>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1cf18:	4818      	ldr	r0, [pc, #96]	; (1cf7c <i2c_nrfx_twi_transfer+0x12c>)
   1cf1a:	1ad2      	subs	r2, r2, r3
   1cf1c:	08d2      	lsrs	r2, r2, #3
   1cf1e:	0192      	lsls	r2, r2, #6
   1cf20:	4631      	mov	r1, r6
   1cf22:	f042 0201 	orr.w	r2, r2, #1
   1cf26:	f007 fe13 	bl	24b50 <log_1>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
   1cf2a:	6860      	ldr	r0, [r4, #4]
   1cf2c:	f003 fa60 	bl	203f0 <nrfx_twi_disable>
			nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
   1cf30:	6863      	ldr	r3, [r4, #4]
   1cf32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1cf36:	f003 fbdb 	bl	206f0 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1cf3a:	f06f 0504 	mvn.w	r5, #4
			break;
   1cf3e:	e7d3      	b.n	1cee8 <i2c_nrfx_twi_transfer+0x98>
		res = get_dev_data(dev)->res;
   1cf40:	6923      	ldr	r3, [r4, #16]
   1cf42:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1cf44:	4551      	cmp	r1, sl
   1cf46:	f105 050c 	add.w	r5, r5, #12
   1cf4a:	d00b      	beq.n	1cf64 <i2c_nrfx_twi_transfer+0x114>
   1cf4c:	4a09      	ldr	r2, [pc, #36]	; (1cf74 <i2c_nrfx_twi_transfer+0x124>)
   1cf4e:	4b0a      	ldr	r3, [pc, #40]	; (1cf78 <i2c_nrfx_twi_transfer+0x128>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1cf50:	480b      	ldr	r0, [pc, #44]	; (1cf80 <i2c_nrfx_twi_transfer+0x130>)
   1cf52:	1a9b      	subs	r3, r3, r2
   1cf54:	08db      	lsrs	r3, r3, #3
   1cf56:	019b      	lsls	r3, r3, #6
   1cf58:	f043 0301 	orr.w	r3, r3, #1
   1cf5c:	4632      	mov	r2, r6
   1cf5e:	f007 fe0b 	bl	24b78 <log_2>
   1cf62:	e7ea      	b.n	1cf3a <i2c_nrfx_twi_transfer+0xea>
	for (size_t i = 0; i < num_msgs; i++) {
   1cf64:	3601      	adds	r6, #1
   1cf66:	e78d      	b.n	1ce84 <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1cf68:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1cf6c:	e7bc      	b.n	1cee8 <i2c_nrfx_twi_transfer+0x98>
   1cf6e:	bf00      	nop
   1cf70:	0bad000b 	.word	0x0bad000b
   1cf74:	00028618 	.word	0x00028618
   1cf78:	000286d0 	.word	0x000286d0
   1cf7c:	0002f7de 	.word	0x0002f7de
   1cf80:	0002f808 	.word	0x0002f808
   1cf84:	0bad0000 	.word	0x0bad0000

0001cf88 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1cf88:	4b02      	ldr	r3, [pc, #8]	; (1cf94 <flash_nrf_pages_layout+0xc>)
   1cf8a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1cf8c:	2301      	movs	r3, #1
   1cf8e:	6013      	str	r3, [r2, #0]
}
   1cf90:	4770      	bx	lr
   1cf92:	bf00      	nop
   1cf94:	20002330 	.word	0x20002330

0001cf98 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1cf98:	4800      	ldr	r0, [pc, #0]	; (1cf9c <flash_nrf_get_parameters+0x4>)
   1cf9a:	4770      	bx	lr
   1cf9c:	00028d40 	.word	0x00028d40

0001cfa0 <flash_nrf_read>:
{
   1cfa0:	b570      	push	{r4, r5, r6, lr}
   1cfa2:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1cfa4:	4628      	mov	r0, r5
   1cfa6:	4619      	mov	r1, r3
{
   1cfa8:	4616      	mov	r6, r2
   1cfaa:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1cfac:	f00a fc52 	bl	27854 <is_regular_addr_valid>
   1cfb0:	b970      	cbnz	r0, 1cfd0 <flash_nrf_read+0x30>
   1cfb2:	4a0c      	ldr	r2, [pc, #48]	; (1cfe4 <flash_nrf_read+0x44>)
   1cfb4:	4b0c      	ldr	r3, [pc, #48]	; (1cfe8 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1cfb6:	480d      	ldr	r0, [pc, #52]	; (1cfec <flash_nrf_read+0x4c>)
   1cfb8:	1a9b      	subs	r3, r3, r2
   1cfba:	08db      	lsrs	r3, r3, #3
   1cfbc:	019b      	lsls	r3, r3, #6
   1cfbe:	f043 0301 	orr.w	r3, r3, #1
   1cfc2:	4622      	mov	r2, r4
   1cfc4:	4629      	mov	r1, r5
   1cfc6:	f007 fdd7 	bl	24b78 <log_2>
		return -EINVAL;
   1cfca:	f06f 0015 	mvn.w	r0, #21
}
   1cfce:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1cfd0:	b134      	cbz	r4, 1cfe0 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1cfd2:	4622      	mov	r2, r4
   1cfd4:	4629      	mov	r1, r5
   1cfd6:	4630      	mov	r0, r6
   1cfd8:	f008 fcc4 	bl	25964 <memcpy>
	return 0;
   1cfdc:	2000      	movs	r0, #0
   1cfde:	e7f6      	b.n	1cfce <flash_nrf_read+0x2e>
		return 0;
   1cfe0:	4620      	mov	r0, r4
   1cfe2:	e7f4      	b.n	1cfce <flash_nrf_read+0x2e>
   1cfe4:	00028618 	.word	0x00028618
   1cfe8:	000286b0 	.word	0x000286b0
   1cfec:	0002f840 	.word	0x0002f840

0001cff0 <flash_nrf_erase>:
{
   1cff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cff2:	b087      	sub	sp, #28
   1cff4:	460e      	mov	r6, r1
   1cff6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1cff8:	f00a ff28 	bl	27e4c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1cffc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1cffe:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1d000:	4630      	mov	r0, r6
   1d002:	f00a fc27 	bl	27854 <is_regular_addr_valid>
   1d006:	b388      	cbz	r0, 1d06c <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d008:	fbb6 f3f7 	udiv	r3, r6, r7
   1d00c:	fb07 6313 	mls	r3, r7, r3, r6
   1d010:	b923      	cbnz	r3, 1d01c <flash_nrf_erase+0x2c>
   1d012:	fbb5 f4f7 	udiv	r4, r5, r7
   1d016:	fb07 5414 	mls	r4, r7, r4, r5
   1d01a:	b184      	cbz	r4, 1d03e <flash_nrf_erase+0x4e>
   1d01c:	4a25      	ldr	r2, [pc, #148]	; (1d0b4 <flash_nrf_erase+0xc4>)
   1d01e:	4b26      	ldr	r3, [pc, #152]	; (1d0b8 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d020:	4826      	ldr	r0, [pc, #152]	; (1d0bc <flash_nrf_erase+0xcc>)
   1d022:	1a9b      	subs	r3, r3, r2
   1d024:	08db      	lsrs	r3, r3, #3
   1d026:	019b      	lsls	r3, r3, #6
   1d028:	f043 0301 	orr.w	r3, r3, #1
   1d02c:	462a      	mov	r2, r5
   1d02e:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d030:	f007 fda2 	bl	24b78 <log_2>
		return -EINVAL;
   1d034:	f06f 0415 	mvn.w	r4, #21
}
   1d038:	4620      	mov	r0, r4
   1d03a:	b007      	add	sp, #28
   1d03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1d03e:	42bd      	cmp	r5, r7
   1d040:	d3fa      	bcc.n	1d038 <flash_nrf_erase+0x48>
   1d042:	f04f 33ff 	mov.w	r3, #4294967295
   1d046:	f04f 32ff 	mov.w	r2, #4294967295
   1d04a:	481d      	ldr	r0, [pc, #116]	; (1d0c0 <flash_nrf_erase+0xd0>)
   1d04c:	f004 fd06 	bl	21a5c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d050:	f00a fe71 	bl	27d36 <nrf_flash_sync_is_required>
   1d054:	ab02      	add	r3, sp, #8
   1d056:	4601      	mov	r1, r0
   1d058:	b998      	cbnz	r0, 1d082 <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1d05a:	2210      	movs	r2, #16
   1d05c:	4618      	mov	r0, r3
   1d05e:	f008 fc8c 	bl	2597a <memset>
   1d062:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1d066:	f00a fc08 	bl	2787a <erase_op>
   1d06a:	e01d      	b.n	1d0a8 <flash_nrf_erase+0xb8>
   1d06c:	4a11      	ldr	r2, [pc, #68]	; (1d0b4 <flash_nrf_erase+0xc4>)
   1d06e:	4b12      	ldr	r3, [pc, #72]	; (1d0b8 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d070:	4814      	ldr	r0, [pc, #80]	; (1d0c4 <flash_nrf_erase+0xd4>)
   1d072:	1a9b      	subs	r3, r3, r2
   1d074:	08db      	lsrs	r3, r3, #3
   1d076:	019b      	lsls	r3, r3, #6
   1d078:	f043 0301 	orr.w	r3, r3, #1
   1d07c:	462a      	mov	r2, r5
   1d07e:	4631      	mov	r1, r6
   1d080:	e7d6      	b.n	1d030 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1d082:	2210      	movs	r2, #16
   1d084:	4621      	mov	r1, r4
   1d086:	4618      	mov	r0, r3
   1d088:	f008 fc77 	bl	2597a <memset>
   1d08c:	2201      	movs	r2, #1
   1d08e:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d092:	4a0d      	ldr	r2, [pc, #52]	; (1d0c8 <flash_nrf_erase+0xd8>)
   1d094:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d098:	480c      	ldr	r0, [pc, #48]	; (1d0cc <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1d09a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d09e:	f002 f937 	bl	1f310 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d0a2:	4668      	mov	r0, sp
   1d0a4:	f002 f93a 	bl	1f31c <nrf_flash_sync_exe>
	return	erase_op(&context);
   1d0a8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d0aa:	4805      	ldr	r0, [pc, #20]	; (1d0c0 <flash_nrf_erase+0xd0>)
   1d0ac:	f004 fc92 	bl	219d4 <z_impl_k_sem_give>
}
   1d0b0:	e7c2      	b.n	1d038 <flash_nrf_erase+0x48>
   1d0b2:	bf00      	nop
   1d0b4:	00028618 	.word	0x00028618
   1d0b8:	000286b0 	.word	0x000286b0
   1d0bc:	0002f85d 	.word	0x0002f85d
   1d0c0:	20002338 	.word	0x20002338
   1d0c4:	0002f840 	.word	0x0002f840
   1d0c8:	0002787b 	.word	0x0002787b
   1d0cc:	00015e64 	.word	0x00015e64

0001d0d0 <nrf_flash_init>:
{
   1d0d0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d0d2:	2201      	movs	r2, #1
   1d0d4:	4611      	mov	r1, r2
   1d0d6:	4807      	ldr	r0, [pc, #28]	; (1d0f4 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d0d8:	4c07      	ldr	r4, [pc, #28]	; (1d0f8 <nrf_flash_init+0x28>)
   1d0da:	f00a ffed 	bl	280b8 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1d0de:	f002 f90f 	bl	1f300 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d0e2:	f00a feb7 	bl	27e54 <nrfx_nvmc_flash_page_count_get>
   1d0e6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d0e8:	f00a feb0 	bl	27e4c <nrfx_nvmc_flash_page_size_get>
   1d0ec:	6060      	str	r0, [r4, #4]
}
   1d0ee:	2000      	movs	r0, #0
   1d0f0:	bd10      	pop	{r4, pc}
   1d0f2:	bf00      	nop
   1d0f4:	20002338 	.word	0x20002338
   1d0f8:	20002330 	.word	0x20002330

0001d0fc <write_op>:
{
   1d0fc:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1d0fe:	7b03      	ldrb	r3, [r0, #12]
{
   1d100:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1d102:	b10b      	cbz	r3, 1d108 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1d104:	f00a fe19 	bl	27d3a <nrf_flash_sync_get_timestamp_begin>
{
   1d108:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d10a:	68a3      	ldr	r3, [r4, #8]
   1d10c:	2b03      	cmp	r3, #3
   1d10e:	d806      	bhi.n	1d11e <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d110:	4a12      	ldr	r2, [pc, #72]	; (1d15c <write_op+0x60>)
   1d112:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d116:	07db      	lsls	r3, r3, #31
   1d118:	d5fb      	bpl.n	1d112 <write_op+0x16>
	return FLASH_OP_DONE;
   1d11a:	2000      	movs	r0, #0
}
   1d11c:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1d11e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d120:	6860      	ldr	r0, [r4, #4]
   1d122:	6819      	ldr	r1, [r3, #0]
   1d124:	f002 ff72 	bl	2000c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1d128:	6863      	ldr	r3, [r4, #4]
   1d12a:	3304      	adds	r3, #4
   1d12c:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1d12e:	6823      	ldr	r3, [r4, #0]
   1d130:	3304      	adds	r3, #4
   1d132:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1d134:	68a3      	ldr	r3, [r4, #8]
   1d136:	3b04      	subs	r3, #4
   1d138:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1d13a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d13c:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1d13e:	2b00      	cmp	r3, #0
   1d140:	d0e3      	beq.n	1d10a <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d142:	4628      	mov	r0, r5
   1d144:	f002 f9c0 	bl	1f4c8 <nrf_flash_sync_check_time_limit>
   1d148:	2800      	cmp	r0, #0
   1d14a:	d0de      	beq.n	1d10a <write_op+0xe>
   1d14c:	4a03      	ldr	r2, [pc, #12]	; (1d15c <write_op+0x60>)
   1d14e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d152:	07d9      	lsls	r1, r3, #31
   1d154:	d5fb      	bpl.n	1d14e <write_op+0x52>
				return FLASH_OP_ONGOING;
   1d156:	2001      	movs	r0, #1
   1d158:	e7e0      	b.n	1d11c <write_op+0x20>
   1d15a:	bf00      	nop
   1d15c:	4001e000 	.word	0x4001e000

0001d160 <flash_nrf_write>:
{
   1d160:	b570      	push	{r4, r5, r6, lr}
   1d162:	460d      	mov	r5, r1
   1d164:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1d166:	4619      	mov	r1, r3
   1d168:	4628      	mov	r0, r5
{
   1d16a:	4616      	mov	r6, r2
   1d16c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d16e:	f00a fb71 	bl	27854 <is_regular_addr_valid>
   1d172:	b980      	cbnz	r0, 1d196 <flash_nrf_write+0x36>
   1d174:	4a23      	ldr	r2, [pc, #140]	; (1d204 <flash_nrf_write+0xa4>)
   1d176:	4b24      	ldr	r3, [pc, #144]	; (1d208 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d178:	4824      	ldr	r0, [pc, #144]	; (1d20c <flash_nrf_write+0xac>)
   1d17a:	1a9b      	subs	r3, r3, r2
   1d17c:	08db      	lsrs	r3, r3, #3
   1d17e:	019b      	lsls	r3, r3, #6
   1d180:	f043 0301 	orr.w	r3, r3, #1
   1d184:	4622      	mov	r2, r4
   1d186:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d188:	f007 fcf6 	bl	24b78 <log_2>
		return -EINVAL;
   1d18c:	f06f 0415 	mvn.w	r4, #21
}
   1d190:	4620      	mov	r0, r4
   1d192:	b006      	add	sp, #24
   1d194:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d196:	ea45 0304 	orr.w	r3, r5, r4
   1d19a:	079b      	lsls	r3, r3, #30
   1d19c:	d00a      	beq.n	1d1b4 <flash_nrf_write+0x54>
   1d19e:	4a19      	ldr	r2, [pc, #100]	; (1d204 <flash_nrf_write+0xa4>)
   1d1a0:	4b19      	ldr	r3, [pc, #100]	; (1d208 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d1a2:	481b      	ldr	r0, [pc, #108]	; (1d210 <flash_nrf_write+0xb0>)
   1d1a4:	1a9b      	subs	r3, r3, r2
   1d1a6:	08db      	lsrs	r3, r3, #3
   1d1a8:	019b      	lsls	r3, r3, #6
   1d1aa:	f043 0301 	orr.w	r3, r3, #1
   1d1ae:	4622      	mov	r2, r4
   1d1b0:	4629      	mov	r1, r5
   1d1b2:	e7e9      	b.n	1d188 <flash_nrf_write+0x28>
	if (!len) {
   1d1b4:	2c00      	cmp	r4, #0
   1d1b6:	d0eb      	beq.n	1d190 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d1b8:	f04f 33ff 	mov.w	r3, #4294967295
   1d1bc:	f04f 32ff 	mov.w	r2, #4294967295
   1d1c0:	4814      	ldr	r0, [pc, #80]	; (1d214 <flash_nrf_write+0xb4>)
   1d1c2:	f004 fc4b 	bl	21a5c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d1c6:	f00a fdb6 	bl	27d36 <nrf_flash_sync_is_required>
   1d1ca:	4603      	mov	r3, r0
	struct flash_context context = {
   1d1cc:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1d1d0:	a802      	add	r0, sp, #8
   1d1d2:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1d1d4:	b18b      	cbz	r3, 1d1fa <flash_nrf_write+0x9a>
	struct flash_context context = {
   1d1d6:	2301      	movs	r3, #1
   1d1d8:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d1dc:	4b0e      	ldr	r3, [pc, #56]	; (1d218 <flash_nrf_write+0xb8>)
   1d1de:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1d1e2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1d1e6:	f002 f893 	bl	1f310 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d1ea:	4668      	mov	r0, sp
   1d1ec:	f002 f896 	bl	1f31c <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1d1f0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d1f2:	4808      	ldr	r0, [pc, #32]	; (1d214 <flash_nrf_write+0xb4>)
   1d1f4:	f004 fbee 	bl	219d4 <z_impl_k_sem_give>
}
   1d1f8:	e7ca      	b.n	1d190 <flash_nrf_write+0x30>
	struct flash_context context = {
   1d1fa:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1d1fe:	f7ff ff7d 	bl	1d0fc <write_op>
   1d202:	e7f5      	b.n	1d1f0 <flash_nrf_write+0x90>
   1d204:	00028618 	.word	0x00028618
   1d208:	000286b0 	.word	0x000286b0
   1d20c:	0002f840 	.word	0x0002f840
   1d210:	0002f87c 	.word	0x0002f87c
   1d214:	20002338 	.word	0x20002338
   1d218:	0001d0fd 	.word	0x0001d0fd

0001d21c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d21c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1d21e:	794b      	ldrb	r3, [r1, #5]
   1d220:	2b01      	cmp	r3, #1
   1d222:	d120      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d224:	798b      	ldrb	r3, [r1, #6]
   1d226:	2b03      	cmp	r3, #3
   1d228:	d11d      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d22a:	79cc      	ldrb	r4, [r1, #7]
   1d22c:	b10c      	cbz	r4, 1d232 <uarte_nrfx_configure+0x16>
   1d22e:	2c01      	cmp	r4, #1
   1d230:	d119      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d232:	790a      	ldrb	r2, [r1, #4]
   1d234:	b112      	cbz	r2, 1d23c <uarte_nrfx_configure+0x20>
   1d236:	2a02      	cmp	r2, #2
   1d238:	d115      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
   1d23a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d23c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d23e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d240:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d244:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1d246:	d062      	beq.n	1d30e <uarte_nrfx_configure+0xf2>
   1d248:	d82b      	bhi.n	1d2a2 <uarte_nrfx_configure+0x86>
   1d24a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d24e:	d061      	beq.n	1d314 <uarte_nrfx_configure+0xf8>
   1d250:	d814      	bhi.n	1d27c <uarte_nrfx_configure+0x60>
   1d252:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d256:	d05f      	beq.n	1d318 <uarte_nrfx_configure+0xfc>
   1d258:	d808      	bhi.n	1d26c <uarte_nrfx_configure+0x50>
   1d25a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d25e:	d05e      	beq.n	1d31e <uarte_nrfx_configure+0x102>
   1d260:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d264:	d05e      	beq.n	1d324 <uarte_nrfx_configure+0x108>
   1d266:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d26a:	e04f      	b.n	1d30c <uarte_nrfx_configure+0xf0>
   1d26c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d270:	d05b      	beq.n	1d32a <uarte_nrfx_configure+0x10e>
   1d272:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d276:	d1f6      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d278:	4b36      	ldr	r3, [pc, #216]	; (1d354 <uarte_nrfx_configure+0x138>)
   1d27a:	e03c      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d27c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d280:	d056      	beq.n	1d330 <uarte_nrfx_configure+0x114>
   1d282:	d807      	bhi.n	1d294 <uarte_nrfx_configure+0x78>
   1d284:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d288:	d054      	beq.n	1d334 <uarte_nrfx_configure+0x118>
   1d28a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d28e:	d1ea      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d290:	4b31      	ldr	r3, [pc, #196]	; (1d358 <uarte_nrfx_configure+0x13c>)
   1d292:	e030      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d294:	f647 2612 	movw	r6, #31250	; 0x7a12
   1d298:	42b3      	cmp	r3, r6
   1d29a:	d1e4      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d29c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d2a0:	e029      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d2a2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d2a6:	d047      	beq.n	1d338 <uarte_nrfx_configure+0x11c>
   1d2a8:	d813      	bhi.n	1d2d2 <uarte_nrfx_configure+0xb6>
   1d2aa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d2ae:	d046      	beq.n	1d33e <uarte_nrfx_configure+0x122>
   1d2b0:	d809      	bhi.n	1d2c6 <uarte_nrfx_configure+0xaa>
   1d2b2:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   1d2b6:	42b3      	cmp	r3, r6
   1d2b8:	d043      	beq.n	1d342 <uarte_nrfx_configure+0x126>
   1d2ba:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d2be:	d1d2      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d2c0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d2c4:	e017      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d2c6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d2ca:	d1cc      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d2cc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d2d0:	e011      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d2d2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d2d6:	d037      	beq.n	1d348 <uarte_nrfx_configure+0x12c>
   1d2d8:	d808      	bhi.n	1d2ec <uarte_nrfx_configure+0xd0>
   1d2da:	4e20      	ldr	r6, [pc, #128]	; (1d35c <uarte_nrfx_configure+0x140>)
   1d2dc:	42b3      	cmp	r3, r6
   1d2de:	d036      	beq.n	1d34e <uarte_nrfx_configure+0x132>
   1d2e0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d2e4:	d1bf      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d2e6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d2ea:	e004      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d2ec:	4e1c      	ldr	r6, [pc, #112]	; (1d360 <uarte_nrfx_configure+0x144>)
   1d2ee:	42b3      	cmp	r3, r6
   1d2f0:	d1b9      	bne.n	1d266 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d2f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d2f6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1d2fa:	6903      	ldr	r3, [r0, #16]
   1d2fc:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1d2fe:	4322      	orrs	r2, r4
   1d300:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d302:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1d306:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d30a:	2000      	movs	r0, #0
}
   1d30c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d30e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d312:	e7f0      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d314:	4b13      	ldr	r3, [pc, #76]	; (1d364 <uarte_nrfx_configure+0x148>)
   1d316:	e7ee      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d318:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d31c:	e7eb      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1d31e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d322:	e7e8      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d324:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d328:	e7e5      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d32a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d32e:	e7e2      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d330:	4b0d      	ldr	r3, [pc, #52]	; (1d368 <uarte_nrfx_configure+0x14c>)
   1d332:	e7e0      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d334:	4b0d      	ldr	r3, [pc, #52]	; (1d36c <uarte_nrfx_configure+0x150>)
   1d336:	e7de      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d338:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d33c:	e7db      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d33e:	4b0c      	ldr	r3, [pc, #48]	; (1d370 <uarte_nrfx_configure+0x154>)
   1d340:	e7d9      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d342:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d346:	e7d6      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d348:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d34c:	e7d3      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d34e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d352:	e7d0      	b.n	1d2f6 <uarte_nrfx_configure+0xda>
   1d354:	0013b000 	.word	0x0013b000
   1d358:	004ea000 	.word	0x004ea000
   1d35c:	0003d090 	.word	0x0003d090
   1d360:	000f4240 	.word	0x000f4240
   1d364:	00275000 	.word	0x00275000
   1d368:	0075c000 	.word	0x0075c000
   1d36c:	003af000 	.word	0x003af000
   1d370:	013a9000 	.word	0x013a9000

0001d374 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1d374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d378:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1d37a:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d37c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   1d380:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   1d382:	7a12      	ldrb	r2, [r2, #8]
{
   1d384:	4605      	mov	r5, r0
   1d386:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1d388:	b192      	cbz	r2, 1d3b0 <uarte_nrfx_rx_enable+0x3c>
		__ASSERT(false, "TX only UARTE instance");
   1d38a:	4a44      	ldr	r2, [pc, #272]	; (1d49c <uarte_nrfx_rx_enable+0x128>)
   1d38c:	4944      	ldr	r1, [pc, #272]	; (1d4a0 <uarte_nrfx_rx_enable+0x12c>)
   1d38e:	4845      	ldr	r0, [pc, #276]	; (1d4a4 <uarte_nrfx_rx_enable+0x130>)
   1d390:	f240 337f 	movw	r3, #895	; 0x37f
   1d394:	f007 f9b0 	bl	246f8 <printk>
   1d398:	4843      	ldr	r0, [pc, #268]	; (1d4a8 <uarte_nrfx_rx_enable+0x134>)
   1d39a:	f007 f9ad 	bl	246f8 <printk>
   1d39e:	483f      	ldr	r0, [pc, #252]	; (1d49c <uarte_nrfx_rx_enable+0x128>)
   1d3a0:	f240 317f 	movw	r1, #895	; 0x37f
   1d3a4:	f007 fb99 	bl	24ada <assert_post_action>
		return -ENOTSUP;
   1d3a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1d3ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   1d3b0:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1d3b4:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   1d3b8:	2a00      	cmp	r2, #0
   1d3ba:	d16b      	bne.n	1d494 <uarte_nrfx_rx_enable+0x120>
		MAX(timeout / RX_TIMEOUT_DIV,
   1d3bc:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1d3c0:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   1d3c2:	bfd2      	itee	le
   1d3c4:	235c      	movle	r3, #92	; 0x5c
   1d3c6:	2205      	movgt	r2, #5
   1d3c8:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1d3cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   1d3d0:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   1d3d2:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1d3d6:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   1d3da:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d3dc:	6843      	ldr	r3, [r0, #4]
   1d3de:	685b      	ldr	r3, [r3, #4]
   1d3e0:	06da      	lsls	r2, r3, #27
   1d3e2:	d524      	bpl.n	1d42e <uarte_nrfx_rx_enable+0xba>
		if (data->async->rx_flush_cnt) {
   1d3e4:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   1d3e8:	b30e      	cbz	r6, 1d42e <uarte_nrfx_rx_enable+0xba>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1d3ea:	42a6      	cmp	r6, r4
   1d3ec:	bf28      	it	cs
   1d3ee:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1d3f0:	4640      	mov	r0, r8
   1d3f2:	4632      	mov	r2, r6
   1d3f4:	31cc      	adds	r1, #204	; 0xcc
   1d3f6:	f008 fab5 	bl	25964 <memcpy>
			if (!len) {
   1d3fa:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1d3fc:	44b0      	add	r8, r6
			if (!len) {
   1d3fe:	d116      	bne.n	1d42e <uarte_nrfx_rx_enable+0xba>
				data->async->rx_flush_cnt -= cpy_len;
   1d400:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1d404:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   1d408:	1b9b      	subs	r3, r3, r6
   1d40a:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   1d40e:	4631      	mov	r1, r6
   1d410:	4628      	mov	r0, r5
   1d412:	f00a fa7c 	bl	2790e <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1d416:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1d41a:	4628      	mov	r0, r5
   1d41c:	2201      	movs	r2, #1
   1d41e:	3160      	adds	r1, #96	; 0x60
   1d420:	f00a fa8e 	bl	27940 <notify_rx_buf_release>
				notify_rx_disable(dev);
   1d424:	4628      	mov	r0, r5
   1d426:	f00a faa5 	bl	27974 <notify_rx_disable>
	return 0;
   1d42a:	2000      	movs	r0, #0
   1d42c:	e7be      	b.n	1d3ac <uarte_nrfx_rx_enable+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d42e:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d430:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d434:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d438:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1d43c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   1d440:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1d444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   1d448:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1d44c:	2201      	movs	r2, #1
   1d44e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d452:	686b      	ldr	r3, [r5, #4]
   1d454:	685b      	ldr	r3, [r3, #4]
   1d456:	06db      	lsls	r3, r3, #27
   1d458:	d519      	bpl.n	1d48e <uarte_nrfx_rx_enable+0x11a>
	__asm__ volatile(
   1d45a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d45e:	f3ef 8111 	mrs	r1, BASEPRI
   1d462:	f383 8812 	msr	BASEPRI_MAX, r3
   1d466:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1d46a:	692b      	ldr	r3, [r5, #16]
   1d46c:	68db      	ldr	r3, [r3, #12]
   1d46e:	b12b      	cbz	r3, 1d47c <uarte_nrfx_rx_enable+0x108>
		data->async->low_power_mask |= mask;
   1d470:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1d474:	f042 0202 	orr.w	r2, r2, #2
   1d478:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
   1d47c:	686b      	ldr	r3, [r5, #4]
   1d47e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d480:	2208      	movs	r2, #8
   1d482:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1d486:	f381 8811 	msr	BASEPRI, r1
   1d48a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d48e:	2301      	movs	r3, #1
   1d490:	603b      	str	r3, [r7, #0]
   1d492:	e7ca      	b.n	1d42a <uarte_nrfx_rx_enable+0xb6>
		return -EBUSY;
   1d494:	f06f 000f 	mvn.w	r0, #15
   1d498:	e788      	b.n	1d3ac <uarte_nrfx_rx_enable+0x38>
   1d49a:	bf00      	nop
   1d49c:	0002f8b7 	.word	0x0002f8b7
   1d4a0:	0002cf26 	.word	0x0002cf26
   1d4a4:	000290f5 	.word	0x000290f5
   1d4a8:	0002f8eb 	.word	0x0002f8eb

0001d4ac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4ac:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d4ae:	095a      	lsrs	r2, r3, #5
   1d4b0:	bf0c      	ite	eq
   1d4b2:	f04f 32ff 	moveq.w	r2, #4294967295
   1d4b6:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   1d4b8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d4bc:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4c0:	07db      	lsls	r3, r3, #31
{
   1d4c2:	b510      	push	{r4, lr}
   1d4c4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d4c6:	d40b      	bmi.n	1d4e0 <nrf_gpio_pin_port_decode+0x34>
   1d4c8:	4910      	ldr	r1, [pc, #64]	; (1d50c <nrf_gpio_pin_port_decode+0x60>)
   1d4ca:	4811      	ldr	r0, [pc, #68]	; (1d510 <nrf_gpio_pin_port_decode+0x64>)
   1d4cc:	4a11      	ldr	r2, [pc, #68]	; (1d514 <nrf_gpio_pin_port_decode+0x68>)
   1d4ce:	f240 2329 	movw	r3, #553	; 0x229
   1d4d2:	f007 f911 	bl	246f8 <printk>
   1d4d6:	480f      	ldr	r0, [pc, #60]	; (1d514 <nrf_gpio_pin_port_decode+0x68>)
   1d4d8:	f240 2129 	movw	r1, #553	; 0x229
   1d4dc:	f007 fafd 	bl	24ada <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1d4e0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1d4e2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d4e6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1d4e8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d4ea:	d00b      	beq.n	1d504 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   1d4ec:	490a      	ldr	r1, [pc, #40]	; (1d518 <nrf_gpio_pin_port_decode+0x6c>)
   1d4ee:	4808      	ldr	r0, [pc, #32]	; (1d510 <nrf_gpio_pin_port_decode+0x64>)
   1d4f0:	4a08      	ldr	r2, [pc, #32]	; (1d514 <nrf_gpio_pin_port_decode+0x68>)
   1d4f2:	f240 232e 	movw	r3, #558	; 0x22e
   1d4f6:	f007 f8ff 	bl	246f8 <printk>
   1d4fa:	4806      	ldr	r0, [pc, #24]	; (1d514 <nrf_gpio_pin_port_decode+0x68>)
   1d4fc:	f240 212e 	movw	r1, #558	; 0x22e
   1d500:	f007 faeb 	bl	24ada <assert_post_action>
}
   1d504:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d508:	bd10      	pop	{r4, pc}
   1d50a:	bf00      	nop
   1d50c:	0002f77e 	.word	0x0002f77e
   1d510:	000290f5 	.word	0x000290f5
   1d514:	0002f74b 	.word	0x0002f74b
   1d518:	0002cf26 	.word	0x0002cf26

0001d51c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d520:	4606      	mov	r6, r0
   1d522:	2200      	movs	r2, #0
   1d524:	2101      	movs	r1, #1
   1d526:	2002      	movs	r0, #2
   1d528:	f7f6 faa0 	bl	13a6c <z_arm_irq_priority_set>
   1d52c:	2002      	movs	r0, #2
   1d52e:	f7f6 fa6b 	bl	13a08 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1d532:	f8d6 8004 	ldr.w	r8, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d536:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   1d538:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d53c:	2300      	movs	r3, #0
   1d53e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1d542:	603e      	str	r6, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1d544:	6875      	ldr	r5, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1d546:	68eb      	ldr	r3, [r5, #12]
   1d548:	1c58      	adds	r0, r3, #1
   1d54a:	d013      	beq.n	1d574 <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d54c:	a801      	add	r0, sp, #4
   1d54e:	9301      	str	r3, [sp, #4]
   1d550:	f7ff ffac 	bl	1d4ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d554:	9a01      	ldr	r2, [sp, #4]
   1d556:	2301      	movs	r3, #1
   1d558:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1d55a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1d55e:	68eb      	ldr	r3, [r5, #12]
   1d560:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d562:	a801      	add	r0, sp, #4
   1d564:	f7ff ffa2 	bl	1d4ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d568:	9b01      	ldr	r3, [sp, #4]
   1d56a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d56e:	2203      	movs	r2, #3
   1d570:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1d574:	692b      	ldr	r3, [r5, #16]
   1d576:	1c59      	adds	r1, r3, #1
   1d578:	d011      	beq.n	1d59e <uarte_0_init+0x82>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1d57a:	7f2a      	ldrb	r2, [r5, #28]
   1d57c:	9301      	str	r3, [sp, #4]
   1d57e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d580:	a801      	add	r0, sp, #4
   1d582:	bf14      	ite	ne
   1d584:	f04f 0903 	movne.w	r9, #3
   1d588:	f04f 0900 	moveq.w	r9, #0
   1d58c:	f7ff ff8e 	bl	1d4ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d590:	9b01      	ldr	r3, [sp, #4]
   1d592:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d596:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1d59a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1d59e:	696b      	ldr	r3, [r5, #20]
   1d5a0:	1c5a      	adds	r2, r3, #1
   1d5a2:	d013      	beq.n	1d5cc <uarte_0_init+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d5a4:	a801      	add	r0, sp, #4
   1d5a6:	9301      	str	r3, [sp, #4]
   1d5a8:	f7ff ff80 	bl	1d4ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d5ac:	9a01      	ldr	r2, [sp, #4]
   1d5ae:	2301      	movs	r3, #1
   1d5b0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1d5b2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1d5b6:	696b      	ldr	r3, [r5, #20]
   1d5b8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d5ba:	a801      	add	r0, sp, #4
   1d5bc:	f7ff ff76 	bl	1d4ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d5c0:	9b01      	ldr	r3, [sp, #4]
   1d5c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d5c6:	2203      	movs	r2, #3
   1d5c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1d5cc:	69ab      	ldr	r3, [r5, #24]
   1d5ce:	1c58      	adds	r0, r3, #1
   1d5d0:	d011      	beq.n	1d5f6 <uarte_0_init+0xda>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1d5d2:	7f6a      	ldrb	r2, [r5, #29]
   1d5d4:	9301      	str	r3, [sp, #4]
   1d5d6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d5d8:	a801      	add	r0, sp, #4
   1d5da:	bf14      	ite	ne
   1d5dc:	f04f 0903 	movne.w	r9, #3
   1d5e0:	f04f 0900 	moveq.w	r9, #0
   1d5e4:	f7ff ff62 	bl	1d4ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d5e8:	9b01      	ldr	r3, [sp, #4]
   1d5ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d5ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1d5f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1d5f6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1d5fa:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1d5fc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1d600:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1d604:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   1d608:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1d60c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   1d60e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1d612:	3104      	adds	r1, #4
   1d614:	4630      	mov	r0, r6
   1d616:	f7ff fe01 	bl	1d21c <uarte_nrfx_configure>
	if (err) {
   1d61a:	4681      	mov	r9, r0
   1d61c:	b9b0      	cbnz	r0, 1d64c <uarte_0_init+0x130>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d61e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d622:	0799      	lsls	r1, r3, #30
   1d624:	d529      	bpl.n	1d67a <uarte_0_init+0x15e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d626:	f107 0016 	add.w	r0, r7, #22
   1d62a:	f002 fd29 	bl	20080 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d62e:	4b46      	ldr	r3, [pc, #280]	; (1d748 <uarte_0_init+0x22c>)
   1d630:	4298      	cmp	r0, r3
   1d632:	d00f      	beq.n	1d654 <uarte_0_init+0x138>
   1d634:	4b45      	ldr	r3, [pc, #276]	; (1d74c <uarte_0_init+0x230>)
   1d636:	4946      	ldr	r1, [pc, #280]	; (1d750 <uarte_0_init+0x234>)
		LOG_ERR("Failed to allocate PPI Channel");
   1d638:	4846      	ldr	r0, [pc, #280]	; (1d754 <uarte_0_init+0x238>)
   1d63a:	1ac9      	subs	r1, r1, r3
   1d63c:	08c9      	lsrs	r1, r1, #3
   1d63e:	0189      	lsls	r1, r1, #6
   1d640:	f041 0101 	orr.w	r1, r1, #1
   1d644:	f007 fa77 	bl	24b36 <log_0>
		return -EIO;
   1d648:	f06f 0904 	mvn.w	r9, #4
UART_NRF_UARTE_DEVICE(0);
   1d64c:	4648      	mov	r0, r9
   1d64e:	b003      	add	sp, #12
   1d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1d654:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d656:	00c3      	lsls	r3, r0, #3
   1d658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d65c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d660:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d664:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d668:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d66c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1d670:	4a39      	ldr	r2, [pc, #228]	; (1d758 <uarte_0_init+0x23c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d672:	2301      	movs	r3, #1
   1d674:	4083      	lsls	r3, r0
   1d676:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d67a:	68fb      	ldr	r3, [r7, #12]
   1d67c:	2b00      	cmp	r3, #0
   1d67e:	d04f      	beq.n	1d720 <uarte_0_init+0x204>
	return config->uarte_regs;
   1d680:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d682:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   1d684:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d686:	68e8      	ldr	r0, [r5, #12]
    p_reg->INTENSET = mask;
   1d688:	4934      	ldr	r1, [pc, #208]	; (1d75c <uarte_0_init+0x240>)
   1d68a:	2204      	movs	r2, #4
   1d68c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1d690:	2201      	movs	r2, #1
   1d692:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   1d696:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d69a:	2108      	movs	r1, #8
   1d69c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6a0:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d6a4:	b1a1      	cbz	r1, 1d6d0 <uarte_0_init+0x1b4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6a6:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6a8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d6ac:	b91a      	cbnz	r2, 1d6b6 <uarte_0_init+0x19a>
   1d6ae:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d6b2:	2a00      	cmp	r2, #0
   1d6b4:	d0f8      	beq.n	1d6a8 <uarte_0_init+0x18c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6b6:	2200      	movs	r2, #0
   1d6b8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d6bc:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d6c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d6c4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d6c8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d6cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d6d0:	4923      	ldr	r1, [pc, #140]	; (1d760 <uarte_0_init+0x244>)
   1d6d2:	2200      	movs	r2, #0
   1d6d4:	3088      	adds	r0, #136	; 0x88
   1d6d6:	f00a fda8 	bl	2822a <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d6da:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   1d6dc:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d6e0:	68e8      	ldr	r0, [r5, #12]
   1d6e2:	4920      	ldr	r1, [pc, #128]	; (1d764 <uarte_0_init+0x248>)
   1d6e4:	2200      	movs	r2, #0
   1d6e6:	3028      	adds	r0, #40	; 0x28
   1d6e8:	f00a fd9f 	bl	2822a <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d6ec:	68eb      	ldr	r3, [r5, #12]
   1d6ee:	65dd      	str	r5, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d6f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d6f4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d6f6:	bf5c      	itt	pl
   1d6f8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1d6fc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d700:	06db      	lsls	r3, r3, #27
   1d702:	bf44      	itt	mi
   1d704:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d708:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1d70c:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
   1d70e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d710:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d714:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d718:	2301      	movs	r3, #1
   1d71a:	60a3      	str	r3, [r4, #8]
   1d71c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d71e:	e795      	b.n	1d64c <uarte_0_init+0x130>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d720:	2308      	movs	r3, #8
   1d722:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d726:	f898 3008 	ldrb.w	r3, [r8, #8]
   1d72a:	2b00      	cmp	r3, #0
   1d72c:	d1e0      	bne.n	1d6f0 <uarte_0_init+0x1d4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d72e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d732:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1d736:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d73a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d73e:	2301      	movs	r3, #1
   1d740:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d744:	6023      	str	r3, [r4, #0]
}
   1d746:	e7d3      	b.n	1d6f0 <uarte_0_init+0x1d4>
   1d748:	0bad0000 	.word	0x0bad0000
   1d74c:	00028618 	.word	0x00028618
   1d750:	00028748 	.word	0x00028748
   1d754:	0002f904 	.word	0x0002f904
   1d758:	4001f000 	.word	0x4001f000
   1d75c:	000a0210 	.word	0x000a0210
   1d760:	00027a2b 	.word	0x00027a2b
   1d764:	00027bc3 	.word	0x00027bc3

0001d768 <uarte_nrfx_poll_out>:
{
   1d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d76a:	6906      	ldr	r6, [r0, #16]
{
   1d76c:	4604      	mov	r4, r0
   1d76e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d770:	f00a fc60 	bl	28034 <k_is_in_isr>
   1d774:	b910      	cbnz	r0, 1d77c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1d776:	4b28      	ldr	r3, [pc, #160]	; (1d818 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   1d778:	781b      	ldrb	r3, [r3, #0]
   1d77a:	bb5b      	cbnz	r3, 1d7d4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1d77c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d780:	f3ef 8111 	mrs	r1, BASEPRI
   1d784:	f383 8812 	msr	BASEPRI_MAX, r3
   1d788:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d78c:	4620      	mov	r0, r4
			key = irq_lock();
   1d78e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1d790:	f00a f8a6 	bl	278e0 <is_tx_ready>
   1d794:	b1c8      	cbz	r0, 1d7ca <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   1d796:	68f3      	ldr	r3, [r6, #12]
   1d798:	b15b      	cbz	r3, 1d7b2 <uarte_nrfx_poll_out+0x4a>
   1d79a:	68da      	ldr	r2, [r3, #12]
   1d79c:	b14a      	cbz	r2, 1d7b2 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1d79e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   1d7a2:	2a00      	cmp	r2, #0
   1d7a4:	da05      	bge.n	1d7b2 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1d7a6:	6862      	ldr	r2, [r4, #4]
   1d7a8:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1d7aa:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d7ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
   1d7b2:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1d7b4:	2201      	movs	r2, #1
	data->char_out = c;
   1d7b6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1d7ba:	4620      	mov	r0, r4
   1d7bc:	f00a fa26 	bl	27c0c <tx_start>
	__asm__ volatile(
   1d7c0:	f385 8811 	msr	BASEPRI, r5
   1d7c4:	f3bf 8f6f 	isb	sy
}
   1d7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d7ca:	f381 8811 	msr	BASEPRI, r1
   1d7ce:	f3bf 8f6f 	isb	sy
}
   1d7d2:	e7d3      	b.n	1d77c <uarte_nrfx_poll_out+0x14>
{
   1d7d4:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d7d6:	4620      	mov	r0, r4
   1d7d8:	f00a f882 	bl	278e0 <is_tx_ready>
   1d7dc:	b948      	cbnz	r0, 1d7f2 <uarte_nrfx_poll_out+0x8a>
   1d7de:	2001      	movs	r0, #1
   1d7e0:	f00a faad 	bl	27d3e <nrfx_busy_wait>
   1d7e4:	3d01      	subs	r5, #1
   1d7e6:	d1f6      	bne.n	1d7d6 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   1d7e8:	2100      	movs	r1, #0
   1d7ea:	2021      	movs	r0, #33	; 0x21
   1d7ec:	f005 ffc2 	bl	23774 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d7f0:	e7f0      	b.n	1d7d4 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1d7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7f6:	f3ef 8511 	mrs	r5, BASEPRI
   1d7fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7fe:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d802:	4620      	mov	r0, r4
   1d804:	f00a f86c 	bl	278e0 <is_tx_ready>
   1d808:	2800      	cmp	r0, #0
   1d80a:	d1d2      	bne.n	1d7b2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1d80c:	f385 8811 	msr	BASEPRI, r5
   1d810:	f3bf 8f6f 	isb	sy
}
   1d814:	e7e8      	b.n	1d7e8 <uarte_nrfx_poll_out+0x80>
   1d816:	bf00      	nop
   1d818:	20002f9f 	.word	0x20002f9f

0001d81c <uarte_nrfx_tx>:
{
   1d81c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d81e:	461c      	mov	r4, r3
	return config->uarte_regs;
   1d820:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d822:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1d824:	f8d3 c000 	ldr.w	ip, [r3]
{
   1d828:	4605      	mov	r5, r0
	__asm__ volatile(
   1d82a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d82e:	f3ef 8711 	mrs	r7, BASEPRI
   1d832:	f383 8812 	msr	BASEPRI_MAX, r3
   1d836:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1d83a:	68f0      	ldr	r0, [r6, #12]
   1d83c:	68c3      	ldr	r3, [r0, #12]
   1d83e:	b13b      	cbz	r3, 1d850 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1d840:	f387 8811 	msr	BASEPRI, r7
   1d844:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1d848:	f06f 000f 	mvn.w	r0, #15
}
   1d84c:	b003      	add	sp, #12
   1d84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
   1d850:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   1d854:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   1d856:	6081      	str	r1, [r0, #8]
   1d858:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d85c:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1d860:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   1d864:	d128      	bne.n	1d8b8 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
   1d866:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
   1d86a:	f106 010c 	add.w	r1, r6, #12
   1d86e:	4628      	mov	r0, r5
   1d870:	f00a f9f2 	bl	27c58 <start_tx_locked.isra.0>
   1d874:	f387 8811 	msr	BASEPRI, r7
   1d878:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1d87c:	7af3      	ldrb	r3, [r6, #11]
   1d87e:	2b01      	cmp	r3, #1
   1d880:	d118      	bne.n	1d8b4 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
   1d882:	1c63      	adds	r3, r4, #1
   1d884:	d016      	beq.n	1d8b4 <uarte_nrfx_tx+0x98>
   1d886:	480e      	ldr	r0, [pc, #56]	; (1d8c0 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d888:	68f5      	ldr	r5, [r6, #12]
   1d88a:	4a0e      	ldr	r2, [pc, #56]	; (1d8c4 <uarte_nrfx_tx+0xa8>)
   1d88c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1d890:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d894:	2100      	movs	r1, #0
   1d896:	2300      	movs	r3, #0
   1d898:	fbc6 0104 	smlal	r0, r1, r6, r4
   1d89c:	f7e2 fc20 	bl	e0 <__aeabi_uldivmod>
   1d8a0:	3528      	adds	r5, #40	; 0x28
   1d8a2:	4602      	mov	r2, r0
   1d8a4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d8a6:	2000      	movs	r0, #0
   1d8a8:	2100      	movs	r1, #0
   1d8aa:	e9cd 0100 	strd	r0, r1, [sp]
   1d8ae:	4628      	mov	r0, r5
   1d8b0:	f006 fcc0 	bl	24234 <z_impl_k_timer_start>
	return 0;
   1d8b4:	2000      	movs	r0, #0
   1d8b6:	e7c9      	b.n	1d84c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1d8b8:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
   1d8ba:	f00a f95a 	bl	27b72 <setup_tx_cache.isra.0>
   1d8be:	e7d4      	b.n	1d86a <uarte_nrfx_tx+0x4e>
   1d8c0:	000f423f 	.word	0x000f423f
   1d8c4:	000f4240 	.word	0x000f4240

0001d8c8 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   1d8c8:	6843      	ldr	r3, [r0, #4]
{
   1d8ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   1d8ce:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8d0:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1d8d4:	b089      	sub	sp, #36	; 0x24
   1d8d6:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1d8d8:	b171      	cbz	r1, 1d8f8 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d8da:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8dc:	2200      	movs	r2, #0
   1d8de:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d8e2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d8e6:	68da      	ldr	r2, [r3, #12]
   1d8e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1d8ec:	3301      	adds	r3, #1
   1d8ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   1d8f2:	b009      	add	sp, #36	; 0x24
   1d8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8f8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d8fc:	b313      	cbz	r3, 1d944 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8fe:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d902:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d906:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d90a:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   1d90e:	2214      	movs	r2, #20
   1d910:	a803      	add	r0, sp, #12
   1d912:	f008 f832 	bl	2597a <memset>
   1d916:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d918:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   1d91a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d91e:	f100 8104 	bmi.w	1db2a <uarte_nrfx_isr_async+0x262>
   1d922:	07b1      	lsls	r1, r6, #30
   1d924:	f100 8103 	bmi.w	1db2e <uarte_nrfx_isr_async+0x266>
   1d928:	0772      	lsls	r2, r6, #29
   1d92a:	f100 8102 	bmi.w	1db32 <uarte_nrfx_isr_async+0x26a>
   1d92e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d932:	4620      	mov	r0, r4
   1d934:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d936:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d93a:	f009 ffe1 	bl	27900 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d93e:	4620      	mov	r0, r4
   1d940:	f00a f943 	bl	27bca <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d944:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d948:	b37b      	cbz	r3, 1d9aa <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   1d94a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d94e:	06db      	lsls	r3, r3, #27
   1d950:	d52b      	bpl.n	1d9aa <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d952:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d956:	6927      	ldr	r7, [r4, #16]
   1d958:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1d95c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d960:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   1d962:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   1d964:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   1d966:	2301      	movs	r3, #1
   1d968:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
   1d96c:	3088      	adds	r0, #136	; 0x88
   1d96e:	f00a fc68 	bl	28242 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d972:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1d974:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   1d978:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   1d97c:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
   1d97e:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   1d982:	1a1b      	subs	r3, r3, r0
   1d984:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d986:	6f90      	ldr	r0, [r2, #120]	; 0x78
   1d988:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1d98c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d98e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d990:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
   1d992:	dd02      	ble.n	1d99a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   1d994:	4620      	mov	r0, r4
   1d996:	f009 ffba 	bl	2790e <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d99a:	68f9      	ldr	r1, [r7, #12]
   1d99c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   1d9a0:	2b00      	cmp	r3, #0
   1d9a2:	f040 80c8 	bne.w	1db36 <uarte_nrfx_isr_async+0x26e>
		data->async->is_in_irq = false;
   1d9a6:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d9aa:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d9ae:	b393      	cbz	r3, 1da16 <uarte_nrfx_isr_async+0x14e>
   1d9b0:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   1d9b4:	bb79      	cbnz	r1, 1da16 <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d9b6:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d9ba:	6926      	ldr	r6, [r4, #16]
   1d9bc:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d9c0:	2214      	movs	r2, #20
   1d9c2:	a803      	add	r0, sp, #12
   1d9c4:	f007 ffd9 	bl	2597a <memset>
   1d9c8:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d9ca:	a903      	add	r1, sp, #12
   1d9cc:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d9ce:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d9d2:	f009 ff95 	bl	27900 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d9d6:	68f6      	ldr	r6, [r6, #12]
   1d9d8:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
   1d9da:	1c5f      	adds	r7, r3, #1
   1d9dc:	d01b      	beq.n	1da16 <uarte_nrfx_isr_async+0x14e>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d9de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
   1d9e2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   1d9e6:	f8df 8234 	ldr.w	r8, [pc, #564]	; 1dc1c <uarte_nrfx_isr_async+0x354>
   1d9ea:	4a8b      	ldr	r2, [pc, #556]	; (1dc18 <uarte_nrfx_isr_async+0x350>)
   1d9ec:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1d9f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d9f4:	f04f 0900 	mov.w	r9, #0
   1d9f8:	fbc0 8901 	smlal	r8, r9, r0, r1
   1d9fc:	2300      	movs	r3, #0
   1d9fe:	4640      	mov	r0, r8
   1da00:	4649      	mov	r1, r9
   1da02:	f7e2 fb6d 	bl	e0 <__aeabi_uldivmod>
   1da06:	4602      	mov	r2, r0
   1da08:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1da0a:	e9cd 0100 	strd	r0, r1, [sp]
   1da0e:	f106 0088 	add.w	r0, r6, #136	; 0x88
   1da12:	f006 fc0f 	bl	24234 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da16:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1da1a:	b333      	cbz	r3, 1da6a <uarte_nrfx_isr_async+0x1a2>
   1da1c:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1da20:	bb1e      	cbnz	r6, 1da6a <uarte_nrfx_isr_async+0x1a2>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1da22:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da24:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   1da28:	68f9      	ldr	r1, [r7, #12]
   1da2a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1da2e:	2201      	movs	r2, #1
   1da30:	3160      	adds	r1, #96	; 0x60
   1da32:	4620      	mov	r0, r4
   1da34:	f009 ff84 	bl	27940 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   1da38:	68f9      	ldr	r1, [r7, #12]
   1da3a:	2201      	movs	r2, #1
   1da3c:	316c      	adds	r1, #108	; 0x6c
   1da3e:	4620      	mov	r0, r4
   1da40:	f009 ff7e 	bl	27940 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   1da44:	68fb      	ldr	r3, [r7, #12]
   1da46:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   1da4a:	2a00      	cmp	r2, #0
   1da4c:	f000 80a1 	beq.w	1db92 <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_enabled = false;
   1da50:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1da54:	6863      	ldr	r3, [r4, #4]
   1da56:	685b      	ldr	r3, [r3, #4]
   1da58:	06d8      	lsls	r0, r3, #27
   1da5a:	d503      	bpl.n	1da64 <uarte_nrfx_isr_async+0x19c>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1da5c:	2102      	movs	r1, #2
   1da5e:	4620      	mov	r0, r4
   1da60:	f00a f861 	bl	27b26 <async_uart_release>
	notify_rx_disable(dev);
   1da64:	4620      	mov	r0, r4
   1da66:	f009 ff85 	bl	27974 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da6a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1da6e:	b1db      	cbz	r3, 1daa8 <uarte_nrfx_isr_async+0x1e0>
    return p_reg->INTENSET & mask;
   1da70:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1da74:	05d9      	lsls	r1, r3, #23
   1da76:	d517      	bpl.n	1daa8 <uarte_nrfx_isr_async+0x1e0>
	return config->uarte_regs;
   1da78:	6863      	ldr	r3, [r4, #4]
   1da7a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1da7c:	f04f 0140 	mov.w	r1, #64	; 0x40
   1da80:	f3ef 8211 	mrs	r2, BASEPRI
   1da84:	f381 8812 	msr	BASEPRI_MAX, r1
   1da88:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1da8c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1da90:	b131      	cbz	r1, 1daa0 <uarte_nrfx_isr_async+0x1d8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1da92:	2100      	movs	r1, #0
   1da94:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1da98:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1da9c:	2101      	movs	r1, #1
   1da9e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1daa0:	f382 8811 	msr	BASEPRI, r2
   1daa4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1daa8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1daac:	2b00      	cmp	r3, #0
   1daae:	f43f af20 	beq.w	1d8f2 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1dab2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1dab6:	025a      	lsls	r2, r3, #9
   1dab8:	f57f af1b 	bpl.w	1d8f2 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1dabc:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1dabe:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dac0:	e9d3 7300 	ldrd	r7, r3, [r3]
   1dac4:	06db      	lsls	r3, r3, #27
   1dac6:	d469      	bmi.n	1db9c <uarte_nrfx_isr_async+0x2d4>
	if (!data->async->tx_buf) {
   1dac8:	68f3      	ldr	r3, [r6, #12]
   1daca:	689b      	ldr	r3, [r3, #8]
   1dacc:	2b00      	cmp	r3, #0
   1dace:	f43f af10 	beq.w	1d8f2 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1dad2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dad6:	f3ef 8211 	mrs	r2, BASEPRI
   1dada:	f383 8812 	msr	BASEPRI_MAX, r3
   1dade:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1dae2:	68f3      	ldr	r3, [r6, #12]
   1dae4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1dae8:	2900      	cmp	r1, #0
   1daea:	bfac      	ite	ge
   1daec:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
   1daf0:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1daf4:	f382 8811 	msr	BASEPRI, r2
   1daf8:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1dafc:	68f0      	ldr	r0, [r6, #12]
   1dafe:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
   1db02:	2b00      	cmp	r3, #0
   1db04:	d057      	beq.n	1dbb6 <uarte_nrfx_isr_async+0x2ee>
	__asm__ volatile(
   1db06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db0a:	f3ef 8511 	mrs	r5, BASEPRI
   1db0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1db12:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1db16:	f106 010c 	add.w	r1, r6, #12
   1db1a:	4620      	mov	r0, r4
   1db1c:	f00a f89c 	bl	27c58 <start_tx_locked.isra.0>
	__asm__ volatile(
   1db20:	f385 8811 	msr	BASEPRI, r5
   1db24:	f3bf 8f6f 	isb	sy
				return;
   1db28:	e6e3      	b.n	1d8f2 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db2a:	2601      	movs	r6, #1
   1db2c:	e701      	b.n	1d932 <uarte_nrfx_isr_async+0x6a>
   1db2e:	2602      	movs	r6, #2
   1db30:	e6ff      	b.n	1d932 <uarte_nrfx_isr_async+0x6a>
   1db32:	2604      	movs	r6, #4
   1db34:	e6fd      	b.n	1d932 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   1db36:	2200      	movs	r2, #0
   1db38:	3160      	adds	r1, #96	; 0x60
   1db3a:	4620      	mov	r0, r4
   1db3c:	f009 ff00 	bl	27940 <notify_rx_buf_release>
	__asm__ volatile(
   1db40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db44:	f3ef 8111 	mrs	r1, BASEPRI
   1db48:	f383 8812 	msr	BASEPRI_MAX, r3
   1db4c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1db50:	68fb      	ldr	r3, [r7, #12]
   1db52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1db54:	b1d2      	cbz	r2, 1db8c <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_buf = data->async->rx_next_buf;
   1db56:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1db58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1db5a:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   1db5c:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   1db5e:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
   1db62:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db64:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1db68:	b90b      	cbnz	r3, 1db6e <uarte_nrfx_isr_async+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db6a:	2301      	movs	r3, #1
   1db6c:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   1db6e:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   1db72:	f023 0320 	bic.w	r3, r3, #32
   1db76:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   1db7a:	f381 8811 	msr	BASEPRI, r1
   1db7e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1db82:	68fb      	ldr	r3, [r7, #12]
   1db84:	2200      	movs	r2, #0
   1db86:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   1db8a:	e70e      	b.n	1d9aa <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db8c:	2301      	movs	r3, #1
   1db8e:	6073      	str	r3, [r6, #4]
}
   1db90:	e7f3      	b.n	1db7a <uarte_nrfx_isr_async+0x2b2>
		(void)rx_flush(dev, NULL, 0);
   1db92:	4611      	mov	r1, r2
   1db94:	4620      	mov	r0, r4
   1db96:	f009 ff91 	bl	27abc <rx_flush>
   1db9a:	e75b      	b.n	1da54 <uarte_nrfx_isr_async+0x18c>
    p_reg->INTENCLR = mask;
   1db9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1dba0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1dba4:	2101      	movs	r1, #1
   1dba6:	4620      	mov	r0, r4
   1dba8:	f009 ffbd 	bl	27b26 <async_uart_release>
		if (!data->async->tx_size) {
   1dbac:	68f3      	ldr	r3, [r6, #12]
   1dbae:	68db      	ldr	r3, [r3, #12]
   1dbb0:	2b00      	cmp	r3, #0
   1dbb2:	d189      	bne.n	1dac8 <uarte_nrfx_isr_async+0x200>
   1dbb4:	e69d      	b.n	1d8f2 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1dbb6:	6882      	ldr	r2, [r0, #8]
   1dbb8:	6903      	ldr	r3, [r0, #16]
   1dbba:	429a      	cmp	r2, r3
   1dbbc:	d00b      	beq.n	1dbd6 <uarte_nrfx_isr_async+0x30e>
		if (amount == data->async->xfer_len) {
   1dbbe:	6942      	ldr	r2, [r0, #20]
   1dbc0:	6a03      	ldr	r3, [r0, #32]
   1dbc2:	42aa      	cmp	r2, r5
   1dbc4:	442b      	add	r3, r5
   1dbc6:	d125      	bne.n	1dc14 <uarte_nrfx_isr_async+0x34c>
			data->async->tx_cache_offset += amount;
   1dbc8:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
   1dbca:	f009 ffd2 	bl	27b72 <setup_tx_cache.isra.0>
   1dbce:	2800      	cmp	r0, #0
   1dbd0:	d199      	bne.n	1db06 <uarte_nrfx_isr_async+0x23e>
			amount = data->async->tx_cache_offset;
   1dbd2:	68f3      	ldr	r3, [r6, #12]
   1dbd4:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
   1dbd6:	68f0      	ldr	r0, [r6, #12]
   1dbd8:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   1dbda:	f00a fb32 	bl	28242 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1dbde:	2214      	movs	r2, #20
   1dbe0:	2100      	movs	r1, #0
   1dbe2:	a803      	add	r0, sp, #12
   1dbe4:	f007 fec9 	bl	2597a <memset>
		.data.tx.buf = data->async->tx_buf,
   1dbe8:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   1dbea:	689a      	ldr	r2, [r3, #8]
   1dbec:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   1dbf0:	68da      	ldr	r2, [r3, #12]
   1dbf2:	1aad      	subs	r5, r5, r2
   1dbf4:	bf18      	it	ne
   1dbf6:	2501      	movne	r5, #1
   1dbf8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1dbfc:	f88d 500c 	strb.w	r5, [sp, #12]
   1dc00:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1dc04:	2200      	movs	r2, #0
   1dc06:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   1dc08:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   1dc0a:	a903      	add	r1, sp, #12
   1dc0c:	4620      	mov	r0, r4
   1dc0e:	f009 fe77 	bl	27900 <user_callback>
   1dc12:	e66e      	b.n	1d8f2 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1dc14:	461d      	mov	r5, r3
   1dc16:	e7de      	b.n	1dbd6 <uarte_nrfx_isr_async+0x30e>
   1dc18:	000f4240 	.word	0x000f4240
   1dc1c:	000f423f 	.word	0x000f423f

0001dc20 <random_byte_get>:
	__asm__ volatile(
   1dc20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc24:	f3ef 8211 	mrs	r2, BASEPRI
   1dc28:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc2c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1dc30:	4b08      	ldr	r3, [pc, #32]	; (1dc54 <random_byte_get+0x34>)
   1dc32:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1dc34:	b159      	cbz	r1, 1dc4e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1dc36:	4908      	ldr	r1, [pc, #32]	; (1dc58 <random_byte_get+0x38>)
   1dc38:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1dc3c:	2100      	movs	r1, #0
   1dc3e:	6019      	str	r1, [r3, #0]
   1dc40:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1dc42:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1dc44:	f382 8811 	msr	BASEPRI, r2
   1dc48:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1dc4c:	4770      	bx	lr
	int retval = -EAGAIN;
   1dc4e:	f06f 000a 	mvn.w	r0, #10
   1dc52:	e7f7      	b.n	1dc44 <random_byte_get+0x24>
   1dc54:	4000d100 	.word	0x4000d100
   1dc58:	4000d000 	.word	0x4000d000

0001dc5c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc5e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1dc60:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1dc62:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1dc64:	f04f 0540 	mov.w	r5, #64	; 0x40
   1dc68:	f3ef 8011 	mrs	r0, BASEPRI
   1dc6c:	f385 8812 	msr	BASEPRI_MAX, r5
   1dc70:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1dc74:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1dc76:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1dc7a:	1ba4      	subs	r4, r4, r6
   1dc7c:	403c      	ands	r4, r7
	if (available < len) {
   1dc7e:	42a2      	cmp	r2, r4
		len = available;
   1dc80:	bf88      	it	hi
   1dc82:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1dc84:	eb06 0c02 	add.w	ip, r6, r2
   1dc88:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1dc8c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1dc8e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1dc92:	f380 8811 	msr	BASEPRI, r0
   1dc96:	f3bf 8f6f 	isb	sy
   1dc9a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1dc9c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1dc9e:	4282      	cmp	r2, r0
   1dca0:	d119      	bne.n	1dcd6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1dca2:	4576      	cmp	r6, lr
   1dca4:	d10d      	bne.n	1dcc2 <rng_pool_get+0x66>
	__asm__ volatile(
   1dca6:	f04f 0540 	mov.w	r5, #64	; 0x40
   1dcaa:	f3ef 8211 	mrs	r2, BASEPRI
   1dcae:	f385 8812 	msr	BASEPRI_MAX, r5
   1dcb2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1dcb6:	781d      	ldrb	r5, [r3, #0]
   1dcb8:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1dcba:	f382 8811 	msr	BASEPRI, r2
   1dcbe:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1dcc2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1dcc4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1dcc6:	b288      	uxth	r0, r1
	available = available - len;
   1dcc8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1dcca:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1dccc:	bf22      	ittt	cs
   1dcce:	4b06      	ldrcs	r3, [pc, #24]	; (1dce8 <rng_pool_get+0x8c>)
   1dcd0:	2201      	movcs	r2, #1
   1dcd2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1dcd6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1dcda:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1dcdc:	f89c c005 	ldrb.w	ip, [ip, #5]
   1dce0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1dce4:	403d      	ands	r5, r7
   1dce6:	e7da      	b.n	1dc9e <rng_pool_get+0x42>
   1dce8:	4000d000 	.word	0x4000d000

0001dcec <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dcf0:	4614      	mov	r4, r2
   1dcf2:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1dcf4:	6902      	ldr	r2, [r0, #16]
   1dcf6:	4b2c      	ldr	r3, [pc, #176]	; (1dda8 <entropy_nrf5_get_entropy_isr+0xbc>)
   1dcf8:	429a      	cmp	r2, r3
{
   1dcfa:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1dcfc:	d00b      	beq.n	1dd16 <entropy_nrf5_get_entropy_isr+0x2a>
   1dcfe:	492b      	ldr	r1, [pc, #172]	; (1ddac <entropy_nrf5_get_entropy_isr+0xc0>)
   1dd00:	482b      	ldr	r0, [pc, #172]	; (1ddb0 <entropy_nrf5_get_entropy_isr+0xc4>)
   1dd02:	4a2c      	ldr	r2, [pc, #176]	; (1ddb4 <entropy_nrf5_get_entropy_isr+0xc8>)
   1dd04:	f44f 7384 	mov.w	r3, #264	; 0x108
   1dd08:	f006 fcf6 	bl	246f8 <printk>
   1dd0c:	4829      	ldr	r0, [pc, #164]	; (1ddb4 <entropy_nrf5_get_entropy_isr+0xc8>)
   1dd0e:	f44f 7184 	mov.w	r1, #264	; 0x108
   1dd12:	f006 fee2 	bl	24ada <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1dd16:	43eb      	mvns	r3, r5
   1dd18:	f013 0501 	ands.w	r5, r3, #1
   1dd1c:	d006      	beq.n	1dd2c <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1dd1e:	4826      	ldr	r0, [pc, #152]	; (1ddb8 <entropy_nrf5_get_entropy_isr+0xcc>)
   1dd20:	4622      	mov	r2, r4
   1dd22:	4631      	mov	r1, r6
   1dd24:	f7ff ff9a 	bl	1dc5c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1dd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1dd2c:	2c00      	cmp	r4, #0
   1dd2e:	d033      	beq.n	1dd98 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   1dd30:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd34:	f3ef 8811 	mrs	r8, BASEPRI
   1dd38:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd3c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1dd40:	200d      	movs	r0, #13
   1dd42:	f7f5 fe85 	bl	13a50 <arch_irq_is_enabled>
   1dd46:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1dd48:	200d      	movs	r0, #13
   1dd4a:	f7f5 fe6d 	bl	13a28 <arch_irq_disable>
	__asm__ volatile(
   1dd4e:	f388 8811 	msr	BASEPRI, r8
   1dd52:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1dd56:	4a19      	ldr	r2, [pc, #100]	; (1ddbc <entropy_nrf5_get_entropy_isr+0xd0>)
   1dd58:	6015      	str	r5, [r2, #0]
   1dd5a:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1dd5c:	4b18      	ldr	r3, [pc, #96]	; (1ddc0 <entropy_nrf5_get_entropy_isr+0xd4>)
   1dd5e:	2101      	movs	r1, #1
   1dd60:	6019      	str	r1, [r3, #0]
   1dd62:	4918      	ldr	r1, [pc, #96]	; (1ddc4 <entropy_nrf5_get_entropy_isr+0xd8>)
   1dd64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1dd68:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1dd6c:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1dd6e:	4691      	mov	r9, r2
   1dd70:	468a      	mov	sl, r1
   1dd72:	4698      	mov	r8, r3
   1dd74:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1dd78:	b183      	cbz	r3, 1dd9c <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   1dd7a:	f7ff ff51 	bl	1dc20 <random_byte_get>
			if (byte < 0) {
   1dd7e:	1e03      	subs	r3, r0, #0
   1dd80:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1dd84:	dbf6      	blt.n	1dd74 <entropy_nrf5_get_entropy_isr+0x88>
   1dd86:	3d01      	subs	r5, #1
   1dd88:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1dd8a:	5573      	strb	r3, [r6, r5]
		} while (len);
   1dd8c:	2d00      	cmp	r5, #0
   1dd8e:	d1f1      	bne.n	1dd74 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   1dd90:	b117      	cbz	r7, 1dd98 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   1dd92:	200d      	movs	r0, #13
   1dd94:	f7f5 fe38 	bl	13a08 <arch_irq_enable>
	return cnt;
   1dd98:	4620      	mov	r0, r4
   1dd9a:	e7c5      	b.n	1dd28 <entropy_nrf5_get_entropy_isr+0x3c>
   1dd9c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1dda0:	bf20      	wfe
				__SEV();
   1dda2:	bf40      	sev
				__WFE();
   1dda4:	bf20      	wfe
   1dda6:	e7e5      	b.n	1dd74 <entropy_nrf5_get_entropy_isr+0x88>
   1dda8:	20002350 	.word	0x20002350
   1ddac:	0002f96c 	.word	0x0002f96c
   1ddb0:	000290f5 	.word	0x000290f5
   1ddb4:	0002f93a 	.word	0x0002f93a
   1ddb8:	20002380 	.word	0x20002380
   1ddbc:	4000d100 	.word	0x4000d100
   1ddc0:	4000d000 	.word	0x4000d000
   1ddc4:	e000e100 	.word	0xe000e100

0001ddc8 <entropy_nrf5_get_entropy>:
{
   1ddc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1ddcc:	4b1a      	ldr	r3, [pc, #104]	; (1de38 <entropy_nrf5_get_entropy+0x70>)
{
   1ddce:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1ddd0:	6902      	ldr	r2, [r0, #16]
   1ddd2:	429a      	cmp	r2, r3
{
   1ddd4:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1ddd6:	d009      	beq.n	1ddec <entropy_nrf5_get_entropy+0x24>
   1ddd8:	4918      	ldr	r1, [pc, #96]	; (1de3c <entropy_nrf5_get_entropy+0x74>)
   1ddda:	4819      	ldr	r0, [pc, #100]	; (1de40 <entropy_nrf5_get_entropy+0x78>)
   1dddc:	4a19      	ldr	r2, [pc, #100]	; (1de44 <entropy_nrf5_get_entropy+0x7c>)
   1ddde:	23ea      	movs	r3, #234	; 0xea
   1dde0:	f006 fc8a 	bl	246f8 <printk>
   1dde4:	4817      	ldr	r0, [pc, #92]	; (1de44 <entropy_nrf5_get_entropy+0x7c>)
   1dde6:	21ea      	movs	r1, #234	; 0xea
   1dde8:	f006 fe77 	bl	24ada <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1ddec:	4e12      	ldr	r6, [pc, #72]	; (1de38 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ddee:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1ddf2:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1ddf6:	b914      	cbnz	r4, 1ddfe <entropy_nrf5_get_entropy+0x36>
}
   1ddf8:	4620      	mov	r0, r4
   1ddfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ddfe:	f04f 33ff 	mov.w	r3, #4294967295
   1de02:	f04f 32ff 	mov.w	r2, #4294967295
   1de06:	4630      	mov	r0, r6
   1de08:	f003 fe28 	bl	21a5c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1de0c:	4622      	mov	r2, r4
   1de0e:	4649      	mov	r1, r9
   1de10:	4638      	mov	r0, r7
   1de12:	f7ff ff23 	bl	1dc5c <rng_pool_get>
   1de16:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1de18:	4630      	mov	r0, r6
   1de1a:	f003 fddb 	bl	219d4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1de1e:	b93d      	cbnz	r5, 1de30 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1de20:	f04f 32ff 	mov.w	r2, #4294967295
   1de24:	f04f 33ff 	mov.w	r3, #4294967295
   1de28:	4640      	mov	r0, r8
   1de2a:	f003 fe17 	bl	21a5c <z_impl_k_sem_take>
			continue;
   1de2e:	e7e2      	b.n	1ddf6 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1de30:	1b64      	subs	r4, r4, r5
   1de32:	b2a4      	uxth	r4, r4
		buf += bytes;
   1de34:	44a9      	add	r9, r5
   1de36:	e7de      	b.n	1ddf6 <entropy_nrf5_get_entropy+0x2e>
   1de38:	20002350 	.word	0x20002350
   1de3c:	0002f96c 	.word	0x0002f96c
   1de40:	000290f5 	.word	0x000290f5
   1de44:	0002f93a 	.word	0x0002f93a

0001de48 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1de48:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1de4a:	4c20      	ldr	r4, [pc, #128]	; (1decc <entropy_nrf5_init+0x84>)
   1de4c:	6903      	ldr	r3, [r0, #16]
   1de4e:	42a3      	cmp	r3, r4
   1de50:	d00b      	beq.n	1de6a <entropy_nrf5_init+0x22>
   1de52:	491f      	ldr	r1, [pc, #124]	; (1ded0 <entropy_nrf5_init+0x88>)
   1de54:	481f      	ldr	r0, [pc, #124]	; (1ded4 <entropy_nrf5_init+0x8c>)
   1de56:	4a20      	ldr	r2, [pc, #128]	; (1ded8 <entropy_nrf5_init+0x90>)
   1de58:	f240 1357 	movw	r3, #343	; 0x157
   1de5c:	f006 fc4c 	bl	246f8 <printk>
   1de60:	481d      	ldr	r0, [pc, #116]	; (1ded8 <entropy_nrf5_init+0x90>)
   1de62:	f240 1157 	movw	r1, #343	; 0x157
   1de66:	f006 fe38 	bl	24ada <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1de6a:	2201      	movs	r2, #1
   1de6c:	4611      	mov	r1, r2
   1de6e:	4817      	ldr	r0, [pc, #92]	; (1decc <entropy_nrf5_init+0x84>)
   1de70:	f00a f922 	bl	280b8 <z_impl_k_sem_init>
   1de74:	2201      	movs	r2, #1
   1de76:	2100      	movs	r1, #0
   1de78:	4818      	ldr	r0, [pc, #96]	; (1dedc <entropy_nrf5_init+0x94>)
   1de7a:	f00a f91d 	bl	280b8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1de7e:	f240 4307 	movw	r3, #1031	; 0x407
   1de82:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1de86:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1de8a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1de8c:	230c      	movs	r3, #12
   1de8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1de92:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1de94:	4b12      	ldr	r3, [pc, #72]	; (1dee0 <entropy_nrf5_init+0x98>)
   1de96:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1de9a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1de9e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1dea2:	f022 0201 	bic.w	r2, r2, #1
   1dea6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1deaa:	4a0e      	ldr	r2, [pc, #56]	; (1dee4 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   1deac:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1deae:	6015      	str	r5, [r2, #0]
   1deb0:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1deb2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1deb6:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1deb8:	6019      	str	r1, [r3, #0]
   1deba:	200d      	movs	r0, #13
   1debc:	f7f5 fdd6 	bl	13a6c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1dec0:	200d      	movs	r0, #13
   1dec2:	f7f5 fda1 	bl	13a08 <arch_irq_enable>

	return 0;
}
   1dec6:	4628      	mov	r0, r5
   1dec8:	bd38      	pop	{r3, r4, r5, pc}
   1deca:	bf00      	nop
   1decc:	20002350 	.word	0x20002350
   1ded0:	0002f96c 	.word	0x0002f96c
   1ded4:	000290f5 	.word	0x000290f5
   1ded8:	0002f93a 	.word	0x0002f93a
   1dedc:	20002368 	.word	0x20002368
   1dee0:	4000d000 	.word	0x4000d000
   1dee4:	4000d100 	.word	0x4000d100

0001dee8 <isr>:
{
   1dee8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1deea:	f7ff fe99 	bl	1dc20 <random_byte_get>
	if (byte < 0) {
   1deee:	2800      	cmp	r0, #0
   1def0:	db20      	blt.n	1df34 <isr+0x4c>
	uint8_t last  = rngp->last;
   1def2:	4b17      	ldr	r3, [pc, #92]	; (1df50 <isr+0x68>)
   1def4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1def8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1defc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1df00:	1a51      	subs	r1, r2, r1
   1df02:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1df06:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1df08:	d10d      	bne.n	1df26 <isr+0x3e>
	uint8_t last  = rngp->last;
   1df0a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1df0e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1df12:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1df16:	1a51      	subs	r1, r2, r1
   1df18:	ea34 0101 	bics.w	r1, r4, r1
   1df1c:	d10b      	bne.n	1df36 <isr+0x4e>
   1df1e:	4b0d      	ldr	r3, [pc, #52]	; (1df54 <isr+0x6c>)
   1df20:	2201      	movs	r2, #1
   1df22:	601a      	str	r2, [r3, #0]
}
   1df24:	e00e      	b.n	1df44 <isr+0x5c>
	rngp->buffer[last] = byte;
   1df26:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1df28:	3201      	adds	r2, #1
   1df2a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1df2c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1df30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1df34:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1df36:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1df38:	3201      	adds	r2, #1
   1df3a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1df3c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1df40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1df44:	4804      	ldr	r0, [pc, #16]	; (1df58 <isr+0x70>)
}
   1df46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1df4a:	f003 bd43 	b.w	219d4 <z_impl_k_sem_give>
   1df4e:	bf00      	nop
   1df50:	20002350 	.word	0x20002350
   1df54:	4000d004 	.word	0x4000d004
   1df58:	20002368 	.word	0x20002368

0001df5c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1df5c:	4919      	ldr	r1, [pc, #100]	; (1dfc4 <sys_clock_timeout_handler+0x68>)
{
   1df5e:	b570      	push	{r4, r5, r6, lr}
   1df60:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1df62:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1df66:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1df68:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1df6c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1df70:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1df72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1df76:	f04f 0500 	mov.w	r5, #0
   1df7a:	d20a      	bcs.n	1df92 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1df7c:	4b12      	ldr	r3, [pc, #72]	; (1dfc8 <sys_clock_timeout_handler+0x6c>)
   1df7e:	6819      	ldr	r1, [r3, #0]
   1df80:	060a      	lsls	r2, r1, #24
   1df82:	0a0b      	lsrs	r3, r1, #8
   1df84:	1992      	adds	r2, r2, r6
   1df86:	4911      	ldr	r1, [pc, #68]	; (1dfcc <sys_clock_timeout_handler+0x70>)
   1df88:	f143 0300 	adc.w	r3, r3, #0
   1df8c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1df90:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1df92:	f005 ff7f 	bl	23e94 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1df96:	00a3      	lsls	r3, r4, #2
   1df98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1df9c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1dfa0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1dfa4:	42b2      	cmp	r2, r6
   1dfa6:	d10b      	bne.n	1dfc0 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1dfa8:	b91d      	cbnz	r5, 1dfb2 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1dfaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1dfae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1dfb2:	4b07      	ldr	r3, [pc, #28]	; (1dfd0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dfb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1dfb8:	fa00 f404 	lsl.w	r4, r0, r4
   1dfbc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1dfc0:	bd70      	pop	{r4, r5, r6, pc}
   1dfc2:	bf00      	nop
   1dfc4:	20001c10 	.word	0x20001c10
   1dfc8:	200023ac 	.word	0x200023ac
   1dfcc:	20001bf8 	.word	0x20001bf8
   1dfd0:	40011000 	.word	0x40011000

0001dfd4 <compare_int_lock>:
{
   1dfd4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1dfd6:	2301      	movs	r3, #1
   1dfd8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfda:	4a11      	ldr	r2, [pc, #68]	; (1e020 <compare_int_lock+0x4c>)
   1dfdc:	f3bf 8f5b 	dmb	ish
   1dfe0:	43dc      	mvns	r4, r3
   1dfe2:	e852 1f00 	ldrex	r1, [r2]
   1dfe6:	ea01 0c04 	and.w	ip, r1, r4
   1dfea:	e842 ce00 	strex	lr, ip, [r2]
   1dfee:	f1be 0f00 	cmp.w	lr, #0
   1dff2:	d1f6      	bne.n	1dfe2 <compare_int_lock+0xe>
   1dff4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1dff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dffc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1e000:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e008:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e00c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e010:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1e014:	420b      	tst	r3, r1
}
   1e016:	bf14      	ite	ne
   1e018:	2001      	movne	r0, #1
   1e01a:	2000      	moveq	r0, #0
   1e01c:	bd10      	pop	{r4, pc}
   1e01e:	bf00      	nop
   1e020:	200023a8 	.word	0x200023a8

0001e024 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1e024:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e026:	4a12      	ldr	r2, [pc, #72]	; (1e070 <compare_int_unlock.part.0+0x4c>)
   1e028:	f3bf 8f5b 	dmb	ish
   1e02c:	4083      	lsls	r3, r0
   1e02e:	e852 1f00 	ldrex	r1, [r2]
   1e032:	4319      	orrs	r1, r3
   1e034:	e842 1c00 	strex	ip, r1, [r2]
   1e038:	f1bc 0f00 	cmp.w	ip, #0
   1e03c:	d1f7      	bne.n	1e02e <compare_int_unlock.part.0+0xa>
   1e03e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1e042:	4a0c      	ldr	r2, [pc, #48]	; (1e074 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e048:	4083      	lsls	r3, r0
   1e04a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e04e:	4b0a      	ldr	r3, [pc, #40]	; (1e078 <compare_int_unlock.part.0+0x54>)
   1e050:	f3bf 8f5b 	dmb	ish
   1e054:	681b      	ldr	r3, [r3, #0]
   1e056:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e05a:	fa23 f000 	lsr.w	r0, r3, r0
   1e05e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e060:	bf42      	ittt	mi
   1e062:	4b06      	ldrmi	r3, [pc, #24]	; (1e07c <compare_int_unlock.part.0+0x58>)
   1e064:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1e068:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e06c:	4770      	bx	lr
   1e06e:	bf00      	nop
   1e070:	200023a8 	.word	0x200023a8
   1e074:	40011000 	.word	0x40011000
   1e078:	200023a4 	.word	0x200023a4
   1e07c:	e000e100 	.word	0xe000e100

0001e080 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e080:	4b0d      	ldr	r3, [pc, #52]	; (1e0b8 <z_nrf_rtc_timer_read+0x38>)
   1e082:	681b      	ldr	r3, [r3, #0]
   1e084:	0a19      	lsrs	r1, r3, #8
   1e086:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e088:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e08c:	4b0b      	ldr	r3, [pc, #44]	; (1e0bc <z_nrf_rtc_timer_read+0x3c>)
   1e08e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e092:	18c0      	adds	r0, r0, r3
   1e094:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e09c:	d20a      	bcs.n	1e0b4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e09e:	4b08      	ldr	r3, [pc, #32]	; (1e0c0 <z_nrf_rtc_timer_read+0x40>)
   1e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0a4:	4299      	cmp	r1, r3
   1e0a6:	bf08      	it	eq
   1e0a8:	4290      	cmpeq	r0, r2
   1e0aa:	d203      	bcs.n	1e0b4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e0ac:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e0b0:	f141 0100 	adc.w	r1, r1, #0
}
   1e0b4:	4770      	bx	lr
   1e0b6:	bf00      	nop
   1e0b8:	200023ac 	.word	0x200023ac
   1e0bc:	40011000 	.word	0x40011000
   1e0c0:	20001bf8 	.word	0x20001bf8

0001e0c4 <compare_set>:
{
   1e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0c8:	b085      	sub	sp, #20
   1e0ca:	4616      	mov	r6, r2
   1e0cc:	461f      	mov	r7, r3
   1e0ce:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1e0d0:	f7ff ff80 	bl	1dfd4 <compare_int_lock>
   1e0d4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e0d6:	f7ff ffd3 	bl	1e080 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e0da:	42b9      	cmp	r1, r7
   1e0dc:	bf08      	it	eq
   1e0de:	42b0      	cmpeq	r0, r6
   1e0e0:	d27f      	bcs.n	1e1e2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e0e2:	ebb6 0800 	subs.w	r8, r6, r0
   1e0e6:	eb67 0901 	sbc.w	r9, r7, r1
   1e0ea:	2300      	movs	r3, #0
   1e0ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1e0f0:	454b      	cmp	r3, r9
   1e0f2:	bf08      	it	eq
   1e0f4:	4542      	cmpeq	r2, r8
   1e0f6:	f0c0 8085 	bcc.w	1e204 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1e0fa:	4b44      	ldr	r3, [pc, #272]	; (1e20c <compare_set+0x148>)
   1e0fc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1e100:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e104:	429f      	cmp	r7, r3
   1e106:	bf08      	it	eq
   1e108:	4296      	cmpeq	r6, r2
   1e10a:	d054      	beq.n	1e1b6 <compare_set+0xf2>
   1e10c:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e110:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   1e114:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e118:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e11c:	fa0b f205 	lsl.w	r2, fp, r5
   1e120:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e124:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e128:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e12c:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1e12e:	4a38      	ldr	r2, [pc, #224]	; (1e210 <compare_set+0x14c>)
    return p_reg->CC[ch];
   1e130:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   1e134:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e138:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1e13c:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e140:	461c      	mov	r4, r3
   1e142:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1e144:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e148:	eba0 000a 	sub.w	r0, r0, sl
   1e14c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e150:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e154:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e156:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1e15a:	d105      	bne.n	1e168 <compare_set+0xa4>
   1e15c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1e15e:	2013      	movs	r0, #19
   1e160:	f00a f836 	bl	281d0 <z_impl_k_busy_wait>
   1e164:	4a2a      	ldr	r2, [pc, #168]	; (1e210 <compare_set+0x14c>)
   1e166:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1e168:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e16a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1e16e:	eba4 000c 	sub.w	r0, r4, ip
   1e172:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1e176:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e17a:	bf88      	it	hi
   1e17c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e17e:	2000      	movs	r0, #0
   1e180:	f8c8 0000 	str.w	r0, [r8]
   1e184:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1e188:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e18c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e190:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e194:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1e198:	4582      	cmp	sl, r0
   1e19a:	d006      	beq.n	1e1aa <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   1e19c:	1a20      	subs	r0, r4, r0
   1e19e:	3802      	subs	r0, #2
   1e1a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e1a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e1a8:	d819      	bhi.n	1e1de <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   1e1aa:	1ae4      	subs	r4, r4, r3
   1e1ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e1b0:	1932      	adds	r2, r6, r4
   1e1b2:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1e1b6:	4c15      	ldr	r4, [pc, #84]	; (1e20c <compare_set+0x148>)
   1e1b8:	0129      	lsls	r1, r5, #4
   1e1ba:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1e1be:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1e1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1e1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1e1c6:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   1e1c8:	6043      	str	r3, [r0, #4]
	return ret;
   1e1ca:	2400      	movs	r4, #0
	if (key) {
   1e1cc:	9b01      	ldr	r3, [sp, #4]
   1e1ce:	b113      	cbz	r3, 1e1d6 <compare_set+0x112>
   1e1d0:	4628      	mov	r0, r5
   1e1d2:	f7ff ff27 	bl	1e024 <compare_int_unlock.part.0>
}
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	b005      	add	sp, #20
   1e1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1de:	4620      	mov	r0, r4
   1e1e0:	e7b0      	b.n	1e144 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1e1e2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1e4:	4a0b      	ldr	r2, [pc, #44]	; (1e214 <compare_set+0x150>)
   1e1e6:	f3bf 8f5b 	dmb	ish
   1e1ea:	40ab      	lsls	r3, r5
   1e1ec:	e852 1f00 	ldrex	r1, [r2]
   1e1f0:	4319      	orrs	r1, r3
   1e1f2:	e842 1000 	strex	r0, r1, [r2]
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	d1f8      	bne.n	1e1ec <compare_set+0x128>
   1e1fa:	f3bf 8f5b 	dmb	ish
   1e1fe:	4632      	mov	r2, r6
   1e200:	463b      	mov	r3, r7
   1e202:	e7d8      	b.n	1e1b6 <compare_set+0xf2>
			return -EINVAL;
   1e204:	f06f 0415 	mvn.w	r4, #21
   1e208:	e7e0      	b.n	1e1cc <compare_set+0x108>
   1e20a:	bf00      	nop
   1e20c:	20001c00 	.word	0x20001c00
   1e210:	40011000 	.word	0x40011000
   1e214:	200023a4 	.word	0x200023a4

0001e218 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e218:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e21a:	4b19      	ldr	r3, [pc, #100]	; (1e280 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1e21c:	4d19      	ldr	r5, [pc, #100]	; (1e284 <sys_clock_driver_init+0x6c>)
   1e21e:	2400      	movs	r4, #0
   1e220:	f04f 30ff 	mov.w	r0, #4294967295
   1e224:	f04f 31ff 	mov.w	r1, #4294967295
   1e228:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1e22c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e234:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e238:	4b13      	ldr	r3, [pc, #76]	; (1e288 <sys_clock_driver_init+0x70>)
   1e23a:	2602      	movs	r6, #2
   1e23c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e240:	2101      	movs	r1, #1
   1e242:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1e246:	2011      	movs	r0, #17
   1e248:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e24c:	4622      	mov	r2, r4
   1e24e:	f7f5 fc0d 	bl	13a6c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e252:	2011      	movs	r0, #17
   1e254:	f7f5 fbd8 	bl	13a08 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e258:	4a0c      	ldr	r2, [pc, #48]	; (1e28c <sys_clock_driver_init+0x74>)
   1e25a:	2301      	movs	r3, #1
   1e25c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e25e:	4a0c      	ldr	r2, [pc, #48]	; (1e290 <sys_clock_driver_init+0x78>)
   1e260:	602b      	str	r3, [r5, #0]
   1e262:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e264:	4b0b      	ldr	r3, [pc, #44]	; (1e294 <sys_clock_driver_init+0x7c>)
   1e266:	4a0c      	ldr	r2, [pc, #48]	; (1e298 <sys_clock_driver_init+0x80>)
   1e268:	9300      	str	r3, [sp, #0]
   1e26a:	9401      	str	r4, [sp, #4]
   1e26c:	2300      	movs	r3, #0
   1e26e:	4620      	mov	r0, r4
   1e270:	f7ff ff28 	bl	1e0c4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e274:	4630      	mov	r0, r6
   1e276:	f7fe f833 	bl	1c2e0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e27a:	4620      	mov	r0, r4
   1e27c:	b002      	add	sp, #8
   1e27e:	bd70      	pop	{r4, r5, r6, pc}
   1e280:	20001c00 	.word	0x20001c00
   1e284:	40011000 	.word	0x40011000
   1e288:	e000e100 	.word	0xe000e100
   1e28c:	40011008 	.word	0x40011008
   1e290:	200023a8 	.word	0x200023a8
   1e294:	0001df5d 	.word	0x0001df5d
   1e298:	007fffff 	.word	0x007fffff

0001e29c <rtc_nrf_isr>:
{
   1e29c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1e2a0:	4c2a      	ldr	r4, [pc, #168]	; (1e34c <rtc_nrf_isr+0xb0>)
   1e2a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e2a6:	0799      	lsls	r1, r3, #30
   1e2a8:	d509      	bpl.n	1e2be <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e2aa:	4b29      	ldr	r3, [pc, #164]	; (1e350 <rtc_nrf_isr+0xb4>)
   1e2ac:	681a      	ldr	r2, [r3, #0]
   1e2ae:	b132      	cbz	r2, 1e2be <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e2b0:	2200      	movs	r2, #0
   1e2b2:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1e2b4:	4a27      	ldr	r2, [pc, #156]	; (1e354 <rtc_nrf_isr+0xb8>)
   1e2b6:	681b      	ldr	r3, [r3, #0]
   1e2b8:	6813      	ldr	r3, [r2, #0]
   1e2ba:	3301      	adds	r3, #1
   1e2bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1e2be:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e2c2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1e2c4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e2c8:	03d2      	lsls	r2, r2, #15
   1e2ca:	d52c      	bpl.n	1e326 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e2cc:	f3bf 8f5b 	dmb	ish
   1e2d0:	4a21      	ldr	r2, [pc, #132]	; (1e358 <rtc_nrf_isr+0xbc>)
   1e2d2:	e852 1f00 	ldrex	r1, [r2]
   1e2d6:	f021 0001 	bic.w	r0, r1, #1
   1e2da:	e842 0500 	strex	r5, r0, [r2]
   1e2de:	2d00      	cmp	r5, #0
   1e2e0:	d1f7      	bne.n	1e2d2 <rtc_nrf_isr+0x36>
   1e2e2:	f3bf 8f5b 	dmb	ish
   1e2e6:	4a1d      	ldr	r2, [pc, #116]	; (1e35c <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e2e8:	b909      	cbnz	r1, 1e2ee <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e2ea:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1e2ec:	b1d9      	cbz	r1, 1e326 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e2ee:	2500      	movs	r5, #0
   1e2f0:	6015      	str	r5, [r2, #0]
   1e2f2:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1e2f4:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1e2f8:	f7ff fec2 	bl	1e080 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1e2fc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e300:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1e302:	4b17      	ldr	r3, [pc, #92]	; (1e360 <rtc_nrf_isr+0xc4>)
   1e304:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1e308:	4549      	cmp	r1, r9
   1e30a:	bf08      	it	eq
   1e30c:	4540      	cmpeq	r0, r8
   1e30e:	d20f      	bcs.n	1e330 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e310:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1e312:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1e316:	b141      	cbz	r1, 1e32a <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   1e318:	f8cd a000 	str.w	sl, [sp]
   1e31c:	4642      	mov	r2, r8
   1e31e:	464b      	mov	r3, r9
   1e320:	2000      	movs	r0, #0
   1e322:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e324:	e001      	b.n	1e32a <rtc_nrf_isr+0x8e>
   1e326:	f383 8810 	msr	PRIMASK, r3
}
   1e32a:	b002      	add	sp, #8
   1e32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e330:	f04f 36ff 	mov.w	r6, #4294967295
   1e334:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   1e338:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e33c:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   1e340:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e346:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1e34a:	e7e2      	b.n	1e312 <rtc_nrf_isr+0x76>
   1e34c:	40011000 	.word	0x40011000
   1e350:	40011104 	.word	0x40011104
   1e354:	200023ac 	.word	0x200023ac
   1e358:	200023a4 	.word	0x200023a4
   1e35c:	40011140 	.word	0x40011140
   1e360:	20001c00 	.word	0x20001c00

0001e364 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e364:	4b14      	ldr	r3, [pc, #80]	; (1e3b8 <sys_clock_set_timeout+0x54>)
{
   1e366:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e368:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e36c:	bf08      	it	eq
   1e36e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e370:	1e44      	subs	r4, r0, #1
   1e372:	2c00      	cmp	r4, #0
   1e374:	dd1e      	ble.n	1e3b4 <sys_clock_set_timeout+0x50>
   1e376:	429c      	cmp	r4, r3
   1e378:	bfa8      	it	ge
   1e37a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e37c:	f7ff fe80 	bl	1e080 <z_nrf_rtc_timer_read>
   1e380:	4b0e      	ldr	r3, [pc, #56]	; (1e3bc <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e382:	490f      	ldr	r1, [pc, #60]	; (1e3c0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e384:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e388:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1e38a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e38e:	bf28      	it	cs
   1e390:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e392:	3001      	adds	r0, #1
   1e394:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1e396:	4808      	ldr	r0, [pc, #32]	; (1e3b8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e398:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1e39a:	4284      	cmp	r4, r0
   1e39c:	bf28      	it	cs
   1e39e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e3a0:	1912      	adds	r2, r2, r4
   1e3a2:	f04f 0000 	mov.w	r0, #0
   1e3a6:	9001      	str	r0, [sp, #4]
   1e3a8:	f143 0300 	adc.w	r3, r3, #0
   1e3ac:	f7ff fe8a 	bl	1e0c4 <compare_set>
}
   1e3b0:	b002      	add	sp, #8
   1e3b2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e3b4:	2400      	movs	r4, #0
   1e3b6:	e7e1      	b.n	1e37c <sys_clock_set_timeout+0x18>
   1e3b8:	007fffff 	.word	0x007fffff
   1e3bc:	20001c10 	.word	0x20001c10
   1e3c0:	0001df5d 	.word	0x0001df5d

0001e3c4 <sys_clock_elapsed>:
{
   1e3c4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e3c6:	f7ff fe5b 	bl	1e080 <z_nrf_rtc_timer_read>
   1e3ca:	4b02      	ldr	r3, [pc, #8]	; (1e3d4 <sys_clock_elapsed+0x10>)
   1e3cc:	681b      	ldr	r3, [r3, #0]
}
   1e3ce:	1ac0      	subs	r0, r0, r3
   1e3d0:	bd08      	pop	{r3, pc}
   1e3d2:	bf00      	nop
   1e3d4:	20001c10 	.word	0x20001c10

0001e3d8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1e3d8:	4602      	mov	r2, r0
   1e3da:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e3dc:	4801      	ldr	r0, [pc, #4]	; (1e3e4 <multithreading_lock_acquire+0xc>)
   1e3de:	f002 bfcd 	b.w	2137c <z_impl_k_mutex_lock>
   1e3e2:	bf00      	nop
   1e3e4:	20000698 	.word	0x20000698

0001e3e8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1e3e8:	4801      	ldr	r0, [pc, #4]	; (1e3f0 <multithreading_lock_release+0x8>)
   1e3ea:	f003 b8c7 	b.w	2157c <z_impl_k_mutex_unlock>
   1e3ee:	bf00      	nop
   1e3f0:	20000698 	.word	0x20000698

0001e3f4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e3f4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1e3f6:	f7f3 fe45 	bl	12084 <z_impl_log_panic>
   1e3fa:	4b06      	ldr	r3, [pc, #24]	; (1e414 <k_sys_fatal_error_handler+0x20>)
   1e3fc:	4906      	ldr	r1, [pc, #24]	; (1e418 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e3fe:	4807      	ldr	r0, [pc, #28]	; (1e41c <k_sys_fatal_error_handler+0x28>)
   1e400:	1ac9      	subs	r1, r1, r3
   1e402:	08c9      	lsrs	r1, r1, #3
   1e404:	0189      	lsls	r1, r1, #6
   1e406:	f041 0101 	orr.w	r1, r1, #1
   1e40a:	f006 fb94 	bl	24b36 <log_0>
		sys_arch_reboot(0);
   1e40e:	2000      	movs	r0, #0
   1e410:	f7f6 f904 	bl	1461c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e414:	00028618 	.word	0x00028618
   1e418:	000286a8 	.word	0x000286a8
   1e41c:	0002f9b4 	.word	0x0002f9b4

0001e420 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1e420:	b538      	push	{r3, r4, r5, lr}
   1e422:	4b0b      	ldr	r3, [pc, #44]	; (1e450 <sdc_assertion_handler+0x30>)
   1e424:	4c0b      	ldr	r4, [pc, #44]	; (1e454 <sdc_assertion_handler+0x34>)
   1e426:	1ae4      	subs	r4, r4, r3
   1e428:	460d      	mov	r5, r1
   1e42a:	08e4      	lsrs	r4, r4, #3
   1e42c:	f7f3 fca2 	bl	11d74 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1e430:	01a4      	lsls	r4, r4, #6
   1e432:	f044 0401 	orr.w	r4, r4, #1
   1e436:	4601      	mov	r1, r0
   1e438:	4623      	mov	r3, r4
   1e43a:	4807      	ldr	r0, [pc, #28]	; (1e458 <sdc_assertion_handler+0x38>)
   1e43c:	462a      	mov	r2, r5
   1e43e:	f006 fb9b 	bl	24b78 <log_2>
	k_oops();
   1e442:	4040      	eors	r0, r0
   1e444:	f380 8811 	msr	BASEPRI, r0
   1e448:	f04f 0003 	mov.w	r0, #3
   1e44c:	df02      	svc	2
}
   1e44e:	bd38      	pop	{r3, r4, r5, pc}
   1e450:	00028618 	.word	0x00028618
   1e454:	00028720 	.word	0x00028720
   1e458:	0002f9d1 	.word	0x0002f9d1

0001e45c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1e45c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1e45e:	4804      	ldr	r0, [pc, #16]	; (1e470 <hci_driver_init+0x14>)
   1e460:	f7f6 fe52 	bl	15108 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1e464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1e468:	4802      	ldr	r0, [pc, #8]	; (1e474 <hci_driver_init+0x18>)
   1e46a:	f7e5 bccf 	b.w	3e0c <sdc_init>
   1e46e:	bf00      	nop
   1e470:	00028da4 	.word	0x00028da4
   1e474:	0001e421 	.word	0x0001e421

0001e478 <rand_prio_low_vector_get_blocking>:
{
   1e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1e47a:	4b16      	ldr	r3, [pc, #88]	; (1e4d4 <rand_prio_low_vector_get_blocking+0x5c>)
{
   1e47c:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1e47e:	681e      	ldr	r6, [r3, #0]
   1e480:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1e482:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1e484:	683b      	ldr	r3, [r7, #0]
   1e486:	b963      	cbnz	r3, 1e4a2 <rand_prio_low_vector_get_blocking+0x2a>
   1e488:	4913      	ldr	r1, [pc, #76]	; (1e4d8 <rand_prio_low_vector_get_blocking+0x60>)
   1e48a:	4a14      	ldr	r2, [pc, #80]	; (1e4dc <rand_prio_low_vector_get_blocking+0x64>)
   1e48c:	4814      	ldr	r0, [pc, #80]	; (1e4e0 <rand_prio_low_vector_get_blocking+0x68>)
   1e48e:	234b      	movs	r3, #75	; 0x4b
   1e490:	f006 f932 	bl	246f8 <printk>
   1e494:	4813      	ldr	r0, [pc, #76]	; (1e4e4 <rand_prio_low_vector_get_blocking+0x6c>)
   1e496:	f006 f92f 	bl	246f8 <printk>
   1e49a:	4810      	ldr	r0, [pc, #64]	; (1e4dc <rand_prio_low_vector_get_blocking+0x64>)
   1e49c:	214b      	movs	r1, #75	; 0x4b
   1e49e:	f006 fb1c 	bl	24ada <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e4a2:	683b      	ldr	r3, [r7, #0]
   1e4a4:	462a      	mov	r2, r5
   1e4a6:	4621      	mov	r1, r4
   1e4a8:	4630      	mov	r0, r6
   1e4aa:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1e4ac:	b180      	cbz	r0, 1e4d0 <rand_prio_low_vector_get_blocking+0x58>
   1e4ae:	490e      	ldr	r1, [pc, #56]	; (1e4e8 <rand_prio_low_vector_get_blocking+0x70>)
   1e4b0:	4a0e      	ldr	r2, [pc, #56]	; (1e4ec <rand_prio_low_vector_get_blocking+0x74>)
   1e4b2:	480b      	ldr	r0, [pc, #44]	; (1e4e0 <rand_prio_low_vector_get_blocking+0x68>)
   1e4b4:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1e4b8:	f006 f91e 	bl	246f8 <printk>
   1e4bc:	480c      	ldr	r0, [pc, #48]	; (1e4f0 <rand_prio_low_vector_get_blocking+0x78>)
   1e4be:	f006 f91b 	bl	246f8 <printk>
}
   1e4c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1e4c6:	4809      	ldr	r0, [pc, #36]	; (1e4ec <rand_prio_low_vector_get_blocking+0x74>)
   1e4c8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   1e4cc:	f006 bb05 	b.w	24ada <assert_post_action>
}
   1e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4d2:	bf00      	nop
   1e4d4:	200023b0 	.word	0x200023b0
   1e4d8:	0002fa23 	.word	0x0002fa23
   1e4dc:	0002f9f6 	.word	0x0002f9f6
   1e4e0:	000290f5 	.word	0x000290f5
   1e4e4:	0002fa43 	.word	0x0002fa43
   1e4e8:	0002de03 	.word	0x0002de03
   1e4ec:	0002fa69 	.word	0x0002fa69
   1e4f0:	0002faa2 	.word	0x0002faa2

0001e4f4 <rand_prio_high_vector_get>:
{
   1e4f4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e4f6:	4b11      	ldr	r3, [pc, #68]	; (1e53c <rand_prio_high_vector_get+0x48>)
{
   1e4f8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e4fa:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1e4fc:	6883      	ldr	r3, [r0, #8]
   1e4fe:	685d      	ldr	r5, [r3, #4]
   1e500:	460a      	mov	r2, r1
   1e502:	b1bd      	cbz	r5, 1e534 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1e504:	4621      	mov	r1, r4
   1e506:	2300      	movs	r3, #0
   1e508:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1e50a:	1e04      	subs	r4, r0, #0
   1e50c:	da0e      	bge.n	1e52c <rand_prio_high_vector_get+0x38>
   1e50e:	490c      	ldr	r1, [pc, #48]	; (1e540 <rand_prio_high_vector_get+0x4c>)
   1e510:	4a0c      	ldr	r2, [pc, #48]	; (1e544 <rand_prio_high_vector_get+0x50>)
   1e512:	480d      	ldr	r0, [pc, #52]	; (1e548 <rand_prio_high_vector_get+0x54>)
   1e514:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1e518:	f006 f8ee 	bl	246f8 <printk>
   1e51c:	480b      	ldr	r0, [pc, #44]	; (1e54c <rand_prio_high_vector_get+0x58>)
   1e51e:	f006 f8eb 	bl	246f8 <printk>
   1e522:	4808      	ldr	r0, [pc, #32]	; (1e544 <rand_prio_high_vector_get+0x50>)
   1e524:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1e528:	f006 fad7 	bl	24ada <assert_post_action>
	return ret >= 0 ? ret : 0;
   1e52c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1e530:	b2c0      	uxtb	r0, r0
   1e532:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e534:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e538:	e7e9      	b.n	1e50e <rand_prio_high_vector_get+0x1a>
   1e53a:	bf00      	nop
   1e53c:	200023b0 	.word	0x200023b0
   1e540:	0002fadc 	.word	0x0002fadc
   1e544:	0002fa69 	.word	0x0002fa69
   1e548:	000290f5 	.word	0x000290f5
   1e54c:	0002fae5 	.word	0x0002fae5

0001e550 <hci_driver_open>:
{
   1e550:	b570      	push	{r4, r5, r6, lr}
   1e552:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e554:	2200      	movs	r2, #0
   1e556:	2300      	movs	r3, #0
   1e558:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e55c:	2300      	movs	r3, #0
   1e55e:	f06f 0209 	mvn.w	r2, #9
   1e562:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e566:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e56a:	9300      	str	r3, [sp, #0]
   1e56c:	4955      	ldr	r1, [pc, #340]	; (1e6c4 <hci_driver_open+0x174>)
   1e56e:	4b56      	ldr	r3, [pc, #344]	; (1e6c8 <hci_driver_open+0x178>)
   1e570:	4856      	ldr	r0, [pc, #344]	; (1e6cc <hci_driver_open+0x17c>)
   1e572:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e576:	f002 fdd1 	bl	2111c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e57a:	4955      	ldr	r1, [pc, #340]	; (1e6d0 <hci_driver_open+0x180>)
   1e57c:	4853      	ldr	r0, [pc, #332]	; (1e6cc <hci_driver_open+0x17c>)
   1e57e:	4c55      	ldr	r4, [pc, #340]	; (1e6d4 <hci_driver_open+0x184>)
   1e580:	f009 fd5e 	bl	28040 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1e584:	a80b      	add	r0, sp, #44	; 0x2c
   1e586:	f7e5 fbad 	bl	3ce4 <sdc_build_revision_get>
   1e58a:	4b53      	ldr	r3, [pc, #332]	; (1e6d8 <hci_driver_open+0x188>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1e58c:	4853      	ldr	r0, [pc, #332]	; (1e6dc <hci_driver_open+0x18c>)
   1e58e:	1ae4      	subs	r4, r4, r3
   1e590:	08e4      	lsrs	r4, r4, #3
   1e592:	01a4      	lsls	r4, r4, #6
   1e594:	f044 0303 	orr.w	r3, r4, #3
   1e598:	2214      	movs	r2, #20
   1e59a:	a90b      	add	r1, sp, #44	; 0x2c
   1e59c:	f006 fb2c 	bl	24bf8 <log_hexdump>
			err = sdc_support_scan();
   1e5a0:	f7e5 fce4 	bl	3f6c <sdc_support_scan>
			if (err) {
   1e5a4:	b118      	cbz	r0, 1e5ae <hci_driver_open+0x5e>
				return -ENOTSUP;
   1e5a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1e5aa:	b010      	add	sp, #64	; 0x40
   1e5ac:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_master();
   1e5ae:	f7e5 fccd 	bl	3f4c <sdc_support_master>
		if (err) {
   1e5b2:	2800      	cmp	r0, #0
   1e5b4:	d1f7      	bne.n	1e5a6 <hci_driver_open+0x56>
		err = sdc_support_dle();
   1e5b6:	f7e5 fca9 	bl	3f0c <sdc_support_dle>
		if (err) {
   1e5ba:	2800      	cmp	r0, #0
   1e5bc:	d1f3      	bne.n	1e5a6 <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   1e5be:	f7e5 fcb5 	bl	3f2c <sdc_support_le_2m_phy>
		if (err) {
   1e5c2:	4606      	mov	r6, r0
   1e5c4:	2800      	cmp	r0, #0
   1e5c6:	d1ee      	bne.n	1e5a6 <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5c8:	ad08      	add	r5, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   1e5ca:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5cc:	462a      	mov	r2, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   1e5ce:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5d2:	f7e5 fb95 	bl	3d00 <sdc_cfg_set>
	if (required_memory < 0) {
   1e5d6:	2800      	cmp	r0, #0
   1e5d8:	dbe7      	blt.n	1e5aa <hci_driver_open+0x5a>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5da:	462a      	mov	r2, r5
   1e5dc:	2102      	movs	r1, #2
   1e5de:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e5e0:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5e4:	f7e5 fb8c 	bl	3d00 <sdc_cfg_set>
	if (required_memory < 0) {
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	dbde      	blt.n	1e5aa <hci_driver_open+0x5a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1e5ec:	4b3c      	ldr	r3, [pc, #240]	; (1e6e0 <hci_driver_open+0x190>)
   1e5ee:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e5f0:	462a      	mov	r2, r5
   1e5f2:	2103      	movs	r1, #3
   1e5f4:	4630      	mov	r0, r6
   1e5f6:	f7e5 fb83 	bl	3d00 <sdc_cfg_set>
	if (required_memory < 0) {
   1e5fa:	2800      	cmp	r0, #0
   1e5fc:	dbd5      	blt.n	1e5aa <hci_driver_open+0x5a>
	cfg.event_length.event_length_us =
   1e5fe:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e602:	462a      	mov	r2, r5
   1e604:	2104      	movs	r1, #4
   1e606:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1e608:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e60a:	f7e5 fb79 	bl	3d00 <sdc_cfg_set>
	if (required_memory < 0) {
   1e60e:	2800      	cmp	r0, #0
   1e610:	dbcb      	blt.n	1e5aa <hci_driver_open+0x5a>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e612:	462a      	mov	r2, r5
   1e614:	2105      	movs	r1, #5
   1e616:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1e618:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e61c:	f7e5 fb70 	bl	3d00 <sdc_cfg_set>
	if (required_memory < 0) {
   1e620:	2800      	cmp	r0, #0
   1e622:	dbc2      	blt.n	1e5aa <hci_driver_open+0x5a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1e624:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e626:	462a      	mov	r2, r5
   1e628:	2106      	movs	r1, #6
   1e62a:	4630      	mov	r0, r6
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1e62c:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e630:	f7e5 fb66 	bl	3d00 <sdc_cfg_set>
		if (required_memory < 0) {
   1e634:	2800      	cmp	r0, #0
   1e636:	dbb8      	blt.n	1e5aa <hci_driver_open+0x5a>
	if (required_memory > sizeof(sdc_mempool)) {
   1e638:	f240 4186 	movw	r1, #1158	; 0x486
   1e63c:	4288      	cmp	r0, r1
   1e63e:	dd0e      	ble.n	1e65e <hci_driver_open+0x10e>
		BT_ERR("Allocated memory too low: %u < %u",
   1e640:	4602      	mov	r2, r0
   1e642:	f044 0301 	orr.w	r3, r4, #1
   1e646:	4827      	ldr	r0, [pc, #156]	; (1e6e4 <hci_driver_open+0x194>)
   1e648:	f006 fa96 	bl	24b78 <log_2>
		k_panic();
   1e64c:	4040      	eors	r0, r0
   1e64e:	f380 8811 	msr	BASEPRI, r0
   1e652:	f04f 0004 	mov.w	r0, #4
   1e656:	df02      	svc	2
		return -ENOMEM;
   1e658:	f06f 000b 	mvn.w	r0, #11
   1e65c:	e7a5      	b.n	1e5aa <hci_driver_open+0x5a>
   1e65e:	4822      	ldr	r0, [pc, #136]	; (1e6e8 <hci_driver_open+0x198>)
   1e660:	f002 f950 	bl	20904 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1e664:	4b21      	ldr	r3, [pc, #132]	; (1e6ec <hci_driver_open+0x19c>)
   1e666:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1e668:	b938      	cbnz	r0, 1e67a <hci_driver_open+0x12a>
		BT_ERR("An entropy source is required");
   1e66a:	4821      	ldr	r0, [pc, #132]	; (1e6f0 <hci_driver_open+0x1a0>)
   1e66c:	f044 0101 	orr.w	r1, r4, #1
   1e670:	f006 fa61 	bl	24b36 <log_0>
		return -ENODEV;
   1e674:	f06f 0012 	mvn.w	r0, #18
   1e678:	e797      	b.n	1e5aa <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   1e67a:	4b1e      	ldr	r3, [pc, #120]	; (1e6f4 <hci_driver_open+0x1a4>)
   1e67c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1e680:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1e684:	4628      	mov	r0, r5
   1e686:	f7e5 fcd3 	bl	4030 <sdc_rand_source_register>
	if (err) {
   1e68a:	4601      	mov	r1, r0
   1e68c:	b138      	cbz	r0, 1e69e <hci_driver_open+0x14e>
		BT_ERR("Failed to register rand source (%d)", err);
   1e68e:	481a      	ldr	r0, [pc, #104]	; (1e6f8 <hci_driver_open+0x1a8>)
   1e690:	f044 0201 	orr.w	r2, r4, #1
   1e694:	f006 fa5c 	bl	24b50 <log_1>
		return -EINVAL;
   1e698:	f06f 0015 	mvn.w	r0, #21
   1e69c:	e785      	b.n	1e5aa <hci_driver_open+0x5a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1e69e:	f04f 30ff 	mov.w	r0, #4294967295
   1e6a2:	f04f 31ff 	mov.w	r1, #4294967295
   1e6a6:	f7ff fe97 	bl	1e3d8 <multithreading_lock_acquire>
	if (!err) {
   1e6aa:	4604      	mov	r4, r0
   1e6ac:	b930      	cbnz	r0, 1e6bc <hci_driver_open+0x16c>
		err = sdc_enable(host_signal, sdc_mempool);
   1e6ae:	4913      	ldr	r1, [pc, #76]	; (1e6fc <hci_driver_open+0x1ac>)
   1e6b0:	4813      	ldr	r0, [pc, #76]	; (1e700 <hci_driver_open+0x1b0>)
   1e6b2:	f7e5 fb83 	bl	3dbc <sdc_enable>
   1e6b6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e6b8:	f7ff fe96 	bl	1e3e8 <multithreading_lock_release>
	if (err < 0) {
   1e6bc:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1e6c0:	e773      	b.n	1e5aa <hci_driver_open+0x5a>
   1e6c2:	bf00      	nop
   1e6c4:	200032c0 	.word	0x200032c0
   1e6c8:	0001e705 	.word	0x0001e705
   1e6cc:	20001c18 	.word	0x20001c18
   1e6d0:	0002fb29 	.word	0x0002fb29
   1e6d4:	00028720 	.word	0x00028720
   1e6d8:	00028618 	.word	0x00028618
   1e6dc:	0002fb30 	.word	0x0002fb30
   1e6e0:	02031b1b 	.word	0x02031b1b
   1e6e4:	0002fb57 	.word	0x0002fb57
   1e6e8:	0002f9b0 	.word	0x0002f9b0
   1e6ec:	200023b0 	.word	0x200023b0
   1e6f0:	0002fb79 	.word	0x0002fb79
   1e6f4:	000287ec 	.word	0x000287ec
   1e6f8:	0002fb97 	.word	0x0002fb97
   1e6fc:	200026c2 	.word	0x200026c2
   1e700:	0001e81d 	.word	0x0001e81d

0001e704 <recv_thread>:
{
   1e704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e708:	4b3e      	ldr	r3, [pc, #248]	; (1e804 <recv_thread+0x100>)
   1e70a:	4e3f      	ldr	r6, [pc, #252]	; (1e808 <recv_thread+0x104>)
	return z_impl_k_sem_take(sem, timeout);
   1e70c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1e818 <recv_thread+0x114>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1e710:	4d3e      	ldr	r5, [pc, #248]	; (1e80c <recv_thread+0x108>)
   1e712:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1e714:	2700      	movs	r7, #0
   1e716:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1e718:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1e71a:	b93c      	cbnz	r4, 1e72c <recv_thread+0x28>
   1e71c:	b937      	cbnz	r7, 1e72c <recv_thread+0x28>
   1e71e:	f04f 32ff 	mov.w	r2, #4294967295
   1e722:	f04f 33ff 	mov.w	r3, #4294967295
   1e726:	4640      	mov	r0, r8
   1e728:	f003 f998 	bl	21a5c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e72c:	f04f 30ff 	mov.w	r0, #4294967295
   1e730:	f04f 31ff 	mov.w	r1, #4294967295
   1e734:	f7ff fe50 	bl	1e3d8 <multithreading_lock_acquire>
	if (!errcode) {
   1e738:	b160      	cbz	r0, 1e754 <recv_thread+0x50>
		return false;
   1e73a:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e73c:	f04f 30ff 	mov.w	r0, #4294967295
   1e740:	f04f 31ff 	mov.w	r1, #4294967295
   1e744:	f7ff fe48 	bl	1e3d8 <multithreading_lock_acquire>
	if (!errcode) {
   1e748:	2800      	cmp	r0, #0
   1e74a:	d038      	beq.n	1e7be <recv_thread+0xba>
		return false;
   1e74c:	2700      	movs	r7, #0
	z_impl_k_yield();
   1e74e:	f004 febf 	bl	234d0 <z_impl_k_yield>
}
   1e752:	e7e2      	b.n	1e71a <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1e754:	482d      	ldr	r0, [pc, #180]	; (1e80c <recv_thread+0x108>)
   1e756:	f000 fbd9 	bl	1ef0c <hci_internal_evt_get>
   1e75a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e75c:	f7ff fe44 	bl	1e3e8 <multithreading_lock_release>
	if (errcode) {
   1e760:	2c00      	cmp	r4, #0
   1e762:	d1ea      	bne.n	1e73a <recv_thread+0x36>
	switch (hdr->evt) {
   1e764:	7828      	ldrb	r0, [r5, #0]
   1e766:	283e      	cmp	r0, #62	; 0x3e
   1e768:	d007      	beq.n	1e77a <recv_thread+0x76>
   1e76a:	28ff      	cmp	r0, #255	; 0xff
   1e76c:	d01a      	beq.n	1e7a4 <recv_thread+0xa0>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e76e:	f04f 32ff 	mov.w	r2, #4294967295
   1e772:	f04f 33ff 	mov.w	r3, #4294967295
   1e776:	2400      	movs	r4, #0
   1e778:	e005      	b.n	1e786 <recv_thread+0x82>
		switch (me->subevent) {
   1e77a:	78ab      	ldrb	r3, [r5, #2]
   1e77c:	2b02      	cmp	r3, #2
		switch (subevent) {
   1e77e:	d1f6      	bne.n	1e76e <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e780:	2200      	movs	r2, #0
   1e782:	2300      	movs	r3, #0
   1e784:	2401      	movs	r4, #1
   1e786:	4621      	mov	r1, r4
   1e788:	f7f6 f94e 	bl	14a28 <bt_buf_get_evt>
	if (!evt_buf) {
   1e78c:	4607      	mov	r7, r0
   1e78e:	b960      	cbnz	r0, 1e7aa <recv_thread+0xa6>
		if (discardable) {
   1e790:	2c00      	cmp	r4, #0
   1e792:	d1d3      	bne.n	1e73c <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1e794:	01b1      	lsls	r1, r6, #6
   1e796:	481e      	ldr	r0, [pc, #120]	; (1e810 <recv_thread+0x10c>)
   1e798:	f041 0101 	orr.w	r1, r1, #1
   1e79c:	f006 f9cb 	bl	24b36 <log_0>
	return true;
   1e7a0:	2401      	movs	r4, #1
   1e7a2:	e7cb      	b.n	1e73c <recv_thread+0x38>
		switch (subevent) {
   1e7a4:	78ab      	ldrb	r3, [r5, #2]
   1e7a6:	2b80      	cmp	r3, #128	; 0x80
   1e7a8:	e7e9      	b.n	1e77e <recv_thread+0x7a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e7aa:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e7ac:	4629      	mov	r1, r5
   1e7ae:	3202      	adds	r2, #2
   1e7b0:	3008      	adds	r0, #8
   1e7b2:	f008 ff6e 	bl	27692 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e7b6:	4638      	mov	r0, r7
   1e7b8:	f7f6 fc72 	bl	150a0 <bt_recv>
   1e7bc:	e7f0      	b.n	1e7a0 <recv_thread+0x9c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1e7be:	4813      	ldr	r0, [pc, #76]	; (1e80c <recv_thread+0x108>)
   1e7c0:	f7ee fdc2 	bl	d348 <sdc_hci_data_get>
   1e7c4:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1e7c6:	f7ff fe0f 	bl	1e3e8 <multithreading_lock_release>
	if (errcode) {
   1e7ca:	2f00      	cmp	r7, #0
   1e7cc:	d1be      	bne.n	1e74c <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e7ce:	f04f 32ff 	mov.w	r2, #4294967295
   1e7d2:	f04f 33ff 	mov.w	r3, #4294967295
   1e7d6:	2003      	movs	r0, #3
   1e7d8:	f7f6 f8dc 	bl	14994 <bt_buf_get_rx>
	if (!data_buf) {
   1e7dc:	4607      	mov	r7, r0
   1e7de:	b938      	cbnz	r0, 1e7f0 <recv_thread+0xec>
		BT_ERR("No data buffer available");
   1e7e0:	01b1      	lsls	r1, r6, #6
   1e7e2:	480c      	ldr	r0, [pc, #48]	; (1e814 <recv_thread+0x110>)
   1e7e4:	f041 0101 	orr.w	r1, r1, #1
   1e7e8:	f006 f9a5 	bl	24b36 <log_0>
	return true;
   1e7ec:	2701      	movs	r7, #1
   1e7ee:	e7ae      	b.n	1e74e <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1e7f0:	886a      	ldrh	r2, [r5, #2]
   1e7f2:	4629      	mov	r1, r5
   1e7f4:	3204      	adds	r2, #4
   1e7f6:	3008      	adds	r0, #8
   1e7f8:	f008 ff4b 	bl	27692 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e7fc:	4638      	mov	r0, r7
   1e7fe:	f7f6 fc4f 	bl	150a0 <bt_recv>
   1e802:	e7f3      	b.n	1e7ec <recv_thread+0xe8>
   1e804:	00028618 	.word	0x00028618
   1e808:	00028720 	.word	0x00028720
   1e80c:	20002679 	.word	0x20002679
   1e810:	0002fbbb 	.word	0x0002fbbb
   1e814:	0002fbd5 	.word	0x0002fbd5
   1e818:	20000704 	.word	0x20000704

0001e81c <host_signal>:
	z_impl_k_sem_give(sem);
   1e81c:	4801      	ldr	r0, [pc, #4]	; (1e824 <host_signal+0x8>)
   1e81e:	f003 b8d9 	b.w	219d4 <z_impl_k_sem_give>
   1e822:	bf00      	nop
   1e824:	20000704 	.word	0x20000704

0001e828 <hci_driver_send>:
{
   1e828:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1e82a:	8983      	ldrh	r3, [r0, #12]
{
   1e82c:	4605      	mov	r5, r0
	if (!buf->len) {
   1e82e:	b383      	cbz	r3, 1e892 <hci_driver_send+0x6a>
   1e830:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1e832:	b1ab      	cbz	r3, 1e860 <hci_driver_send+0x38>
   1e834:	2b02      	cmp	r3, #2
   1e836:	d12c      	bne.n	1e892 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e838:	f04f 30ff 	mov.w	r0, #4294967295
   1e83c:	f04f 31ff 	mov.w	r1, #4294967295
   1e840:	f7ff fdca 	bl	1e3d8 <multithreading_lock_acquire>
	if (!errcode) {
   1e844:	4604      	mov	r4, r0
   1e846:	b948      	cbnz	r0, 1e85c <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1e848:	68a8      	ldr	r0, [r5, #8]
   1e84a:	f7ee fd8a 	bl	d362 <sdc_hci_data_put>
   1e84e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e850:	f7ff fdca 	bl	1e3e8 <multithreading_lock_release>
		if (errcode) {
   1e854:	b1c4      	cbz	r4, 1e888 <hci_driver_send+0x60>
   1e856:	4810      	ldr	r0, [pc, #64]	; (1e898 <hci_driver_send+0x70>)
   1e858:	f003 f8bc 	bl	219d4 <z_impl_k_sem_give>
}
   1e85c:	4620      	mov	r0, r4
   1e85e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e860:	f04f 30ff 	mov.w	r0, #4294967295
   1e864:	f04f 31ff 	mov.w	r1, #4294967295
   1e868:	f7ff fdb6 	bl	1e3d8 <multithreading_lock_acquire>
	if (!errcode) {
   1e86c:	4604      	mov	r4, r0
   1e86e:	2800      	cmp	r0, #0
   1e870:	d1f4      	bne.n	1e85c <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1e872:	68a8      	ldr	r0, [r5, #8]
   1e874:	f000 f840 	bl	1e8f8 <hci_internal_cmd_put>
   1e878:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e87a:	f7ff fdb5 	bl	1e3e8 <multithreading_lock_release>
	if (errcode) {
   1e87e:	2c00      	cmp	r4, #0
   1e880:	d1ec      	bne.n	1e85c <hci_driver_send+0x34>
   1e882:	4805      	ldr	r0, [pc, #20]	; (1e898 <hci_driver_send+0x70>)
   1e884:	f003 f8a6 	bl	219d4 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1e888:	4628      	mov	r0, r5
   1e88a:	f7fd fa4d 	bl	1bd28 <net_buf_unref>
   1e88e:	2400      	movs	r4, #0
   1e890:	e7e4      	b.n	1e85c <hci_driver_send+0x34>
	switch (type) {
   1e892:	f06f 0415 	mvn.w	r4, #21
   1e896:	e7e1      	b.n	1e85c <hci_driver_send+0x34>
   1e898:	20000704 	.word	0x20000704

0001e89c <rand_prio_low_vector_get>:
{
   1e89c:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e89e:	4b11      	ldr	r3, [pc, #68]	; (1e8e4 <rand_prio_low_vector_get+0x48>)
{
   1e8a0:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1e8a2:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   1e8a4:	6883      	ldr	r3, [r0, #8]
   1e8a6:	685d      	ldr	r5, [r3, #4]
   1e8a8:	460a      	mov	r2, r1
   1e8aa:	b1bd      	cbz	r5, 1e8dc <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1e8ac:	4621      	mov	r1, r4
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1e8b2:	1e04      	subs	r4, r0, #0
   1e8b4:	da0e      	bge.n	1e8d4 <rand_prio_low_vector_get+0x38>
   1e8b6:	490c      	ldr	r1, [pc, #48]	; (1e8e8 <rand_prio_low_vector_get+0x4c>)
   1e8b8:	4a0c      	ldr	r2, [pc, #48]	; (1e8ec <rand_prio_low_vector_get+0x50>)
   1e8ba:	480d      	ldr	r0, [pc, #52]	; (1e8f0 <rand_prio_low_vector_get+0x54>)
   1e8bc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1e8c0:	f005 ff1a 	bl	246f8 <printk>
   1e8c4:	480b      	ldr	r0, [pc, #44]	; (1e8f4 <rand_prio_low_vector_get+0x58>)
   1e8c6:	f005 ff17 	bl	246f8 <printk>
   1e8ca:	4808      	ldr	r0, [pc, #32]	; (1e8ec <rand_prio_low_vector_get+0x50>)
   1e8cc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1e8d0:	f006 f903 	bl	24ada <assert_post_action>
	return ret >= 0 ? ret : 0;
   1e8d4:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1e8d8:	b2c0      	uxtb	r0, r0
   1e8da:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1e8dc:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e8e0:	e7e9      	b.n	1e8b6 <rand_prio_low_vector_get+0x1a>
   1e8e2:	bf00      	nop
   1e8e4:	200023b0 	.word	0x200023b0
   1e8e8:	0002fadc 	.word	0x0002fadc
   1e8ec:	0002fa69 	.word	0x0002fa69
   1e8f0:	000290f5 	.word	0x000290f5
   1e8f4:	0002fbee 	.word	0x0002fbee

0001e8f8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1e8f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e8fa:	4c8d      	ldr	r4, [pc, #564]	; (1eb30 <hci_internal_cmd_put+0x238>)
   1e8fc:	7823      	ldrb	r3, [r4, #0]
   1e8fe:	2b00      	cmp	r3, #0
   1e900:	f040 82ef 	bne.w	1eee2 <hci_internal_cmd_put+0x5ea>
	return ((uint16_t)src[1] << 8) | src[0];
   1e904:	7843      	ldrb	r3, [r0, #1]
   1e906:	7805      	ldrb	r5, [r0, #0]
   1e908:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1e90c:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1e910:	b22e      	sxth	r6, r5
   1e912:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1e916:	d20d      	bcs.n	1e934 <hci_internal_cmd_put+0x3c>
   1e918:	b17b      	cbz	r3, 1e93a <hci_internal_cmd_put+0x42>
   1e91a:	3b01      	subs	r3, #1
   1e91c:	2b07      	cmp	r3, #7
   1e91e:	d80c      	bhi.n	1e93a <hci_internal_cmd_put+0x42>
   1e920:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e924:	000b000e 	.word	0x000b000e
   1e928:	0060002c 	.word	0x0060002c
   1e92c:	000b000b 	.word	0x000b000b
   1e930:	010a000b 	.word	0x010a000b
   1e934:	2b3f      	cmp	r3, #63	; 0x3f
   1e936:	f000 822c 	beq.w	1ed92 <hci_internal_cmd_put+0x49a>
   1e93a:	2304      	movs	r3, #4
   1e93c:	2001      	movs	r0, #1
   1e93e:	e263      	b.n	1ee08 <hci_internal_cmd_put+0x510>
	switch (opcode)	{
   1e940:	f240 4306 	movw	r3, #1030	; 0x406
   1e944:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e946:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e94a:	d005      	beq.n	1e958 <hci_internal_cmd_put+0x60>
   1e94c:	f240 431d 	movw	r3, #1053	; 0x41d
   1e950:	429e      	cmp	r6, r3
   1e952:	d010      	beq.n	1e976 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1e954:	2001      	movs	r0, #1
   1e956:	e001      	b.n	1e95c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1e958:	f7ee fe4d 	bl	d5f6 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e95c:	230f      	movs	r3, #15
   1e95e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e960:	2304      	movs	r3, #4
   1e962:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e964:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1e966:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e968:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e96a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1e96e:	2301      	movs	r3, #1
   1e970:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1e972:	2000      	movs	r0, #0
}
   1e974:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1e976:	f7ee fe40 	bl	d5fa <sdc_hci_cmd_lc_read_remote_version_information>
   1e97a:	e7ef      	b.n	1e95c <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1e97c:	f640 4363 	movw	r3, #3171	; 0xc63
   1e980:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e982:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1e986:	d025      	beq.n	1e9d4 <hci_internal_cmd_put+0xdc>
   1e988:	dc0f      	bgt.n	1e9aa <hci_internal_cmd_put+0xb2>
   1e98a:	f640 4303 	movw	r3, #3075	; 0xc03
   1e98e:	429e      	cmp	r6, r3
   1e990:	d018      	beq.n	1e9c4 <hci_internal_cmd_put+0xcc>
   1e992:	f640 432d 	movw	r3, #3117	; 0xc2d
   1e996:	429e      	cmp	r6, r3
   1e998:	d017      	beq.n	1e9ca <hci_internal_cmd_put+0xd2>
   1e99a:	f640 4301 	movw	r3, #3073	; 0xc01
   1e99e:	429e      	cmp	r6, r3
   1e9a0:	d1d8      	bne.n	1e954 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1e9a2:	f7ee fcfa 	bl	d39a <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e9a6:	2304      	movs	r3, #4
   1e9a8:	e0b7      	b.n	1eb1a <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1e9aa:	f640 437b 	movw	r3, #3195	; 0xc7b
   1e9ae:	429e      	cmp	r6, r3
   1e9b0:	d013      	beq.n	1e9da <hci_internal_cmd_put+0xe2>
   1e9b2:	f640 437c 	movw	r3, #3196	; 0xc7c
   1e9b6:	429e      	cmp	r6, r3
   1e9b8:	d1cc      	bne.n	1e954 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e9ba:	495e      	ldr	r1, [pc, #376]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1e9bc:	f7ee fcf7 	bl	d3ae <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e9c0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e9c2:	e0aa      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_reset();
   1e9c4:	f7e5 fc12 	bl	41ec <sdc_hci_cmd_cb_reset>
   1e9c8:	e7ed      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e9ca:	495a      	ldr	r1, [pc, #360]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1e9cc:	f7ee fce3 	bl	d396 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e9d0:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e9d2:	e0a2      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e9d4:	f7ee fce6 	bl	d3a4 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1e9d8:	e7e5      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e9da:	4956      	ldr	r1, [pc, #344]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1e9dc:	f7ee fcd9 	bl	d392 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e9e0:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e9e2:	e09a      	b.n	1eb1a <hci_internal_cmd_put+0x222>
	switch (opcode)	{
   1e9e4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1e9e8:	3e01      	subs	r6, #1
   1e9ea:	2e08      	cmp	r6, #8
   1e9ec:	d8b2      	bhi.n	1e954 <hci_internal_cmd_put+0x5c>
   1e9ee:	a301      	add	r3, pc, #4	; (adr r3, 1e9f4 <hci_internal_cmd_put+0xfc>)
   1e9f0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1e9f4:	0001ea19 	.word	0x0001ea19
   1e9f8:	0001ea23 	.word	0x0001ea23
   1e9fc:	0001eafb 	.word	0x0001eafb
   1ea00:	0001e955 	.word	0x0001e955
   1ea04:	0001e955 	.word	0x0001e955
   1ea08:	0001e955 	.word	0x0001e955
   1ea0c:	0001e955 	.word	0x0001e955
   1ea10:	0001e955 	.word	0x0001e955
   1ea14:	0001eb13 	.word	0x0001eb13
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1ea18:	4846      	ldr	r0, [pc, #280]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1ea1a:	f7ee fda5 	bl	d568 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ea1e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ea20:	e07b      	b.n	1eb1a <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1ea22:	4844      	ldr	r0, [pc, #272]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1ea24:	222e      	movs	r2, #46	; 0x2e
   1ea26:	2100      	movs	r1, #0
   1ea28:	f006 ffa7 	bl	2597a <memset>
	cmds->hci_disconnect = 1;
   1ea2c:	79e3      	ldrb	r3, [r4, #7]
   1ea2e:	f043 0320 	orr.w	r3, r3, #32
   1ea32:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1ea34:	7a63      	ldrb	r3, [r4, #9]
   1ea36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ea3a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1ea3c:	7b23      	ldrb	r3, [r4, #12]
   1ea3e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ea42:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1ea44:	7c63      	ldrb	r3, [r4, #17]
   1ea46:	f043 0304 	orr.w	r3, r3, #4
   1ea4a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1ea4c:	7d63      	ldrb	r3, [r4, #21]
   1ea4e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1ea52:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1ea56:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1ea58:	7da3      	ldrb	r3, [r4, #22]
   1ea5a:	f043 0302 	orr.w	r3, r3, #2
   1ea5e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1ea60:	7f63      	ldrb	r3, [r4, #29]
   1ea62:	f043 0304 	orr.w	r3, r3, #4
   1ea66:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1ea68:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ea6c:	f023 0317 	bic.w	r3, r3, #23
   1ea70:	f043 0317 	orr.w	r3, r3, #23
   1ea74:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   1ea78:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1ea7c:	f063 0303 	orn	r3, r3, #3
   1ea80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1ea84:	23ff      	movs	r3, #255	; 0xff
   1ea86:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1ea8a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ea8e:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1ea92:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1ea96:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1ea9a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1ea9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1eaa2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1eaa6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1eaaa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1eaae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1eab2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1eab6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1eaba:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1eabe:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1eac2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1eac6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1eaca:	f063 0301 	orn	r3, r3, #1
   1eace:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1ead2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1ead6:	f043 0301 	orr.w	r3, r3, #1
   1eada:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1eade:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1eae6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1eaea:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1eaee:	f043 0304 	orr.w	r3, r3, #4
   1eaf2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1eaf6:	2344      	movs	r3, #68	; 0x44
   1eaf8:	e0db      	b.n	1ecb2 <hci_internal_cmd_put+0x3ba>
	memset(features, 0, sizeof(*features));
   1eafa:	480e      	ldr	r0, [pc, #56]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1eafc:	2208      	movs	r2, #8
   1eafe:	2100      	movs	r1, #0
   1eb00:	f006 ff3b 	bl	2597a <memset>
	features->bdedr_not_supported = 1;
   1eb04:	7ae3      	ldrb	r3, [r4, #11]
   1eb06:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1eb0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1eb0e:	72e3      	strb	r3, [r4, #11]
   1eb10:	e0ce      	b.n	1ecb0 <hci_internal_cmd_put+0x3b8>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1eb12:	4808      	ldr	r0, [pc, #32]	; (1eb34 <hci_internal_cmd_put+0x23c>)
   1eb14:	f7ee fd26 	bl	d564 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1eb18:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1eb1a:	2801      	cmp	r0, #1
   1eb1c:	f43f af1e 	beq.w	1e95c <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1eb20:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1eb22:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1eb24:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1eb26:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1eb28:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1eb2a:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1eb2c:	71a0      	strb	r0, [r4, #6]
}
   1eb2e:	e71e      	b.n	1e96e <hci_internal_cmd_put+0x76>
   1eb30:	20002b48 	.word	0x20002b48
   1eb34:	20002b4f 	.word	0x20002b4f
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1eb38:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1eb3c:	3e01      	subs	r6, #1
   1eb3e:	3003      	adds	r0, #3
	switch (opcode)	{
   1eb40:	2e4d      	cmp	r6, #77	; 0x4d
   1eb42:	f63f af07 	bhi.w	1e954 <hci_internal_cmd_put+0x5c>
   1eb46:	a301      	add	r3, pc, #4	; (adr r3, 1eb4c <hci_internal_cmd_put+0x254>)
   1eb48:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1eb4c:	0001ec85 	.word	0x0001ec85
   1eb50:	0001ec8b 	.word	0x0001ec8b
   1eb54:	0001ec93 	.word	0x0001ec93
   1eb58:	0001e955 	.word	0x0001e955
   1eb5c:	0001ecb7 	.word	0x0001ecb7
   1eb60:	0001e955 	.word	0x0001e955
   1eb64:	0001e955 	.word	0x0001e955
   1eb68:	0001e955 	.word	0x0001e955
   1eb6c:	0001e955 	.word	0x0001e955
   1eb70:	0001e955 	.word	0x0001e955
   1eb74:	0001ecbd 	.word	0x0001ecbd
   1eb78:	0001ecc3 	.word	0x0001ecc3
   1eb7c:	0001ecc9 	.word	0x0001ecc9
   1eb80:	0001eccf 	.word	0x0001eccf
   1eb84:	0001ecd5 	.word	0x0001ecd5
   1eb88:	0001ecdf 	.word	0x0001ecdf
   1eb8c:	0001ece5 	.word	0x0001ece5
   1eb90:	0001eceb 	.word	0x0001eceb
   1eb94:	0001ecf1 	.word	0x0001ecf1
   1eb98:	0001ecf7 	.word	0x0001ecf7
   1eb9c:	0001ecfd 	.word	0x0001ecfd
   1eba0:	0001ed07 	.word	0x0001ed07
   1eba4:	0001ed0d 	.word	0x0001ed0d
   1eba8:	0001ed17 	.word	0x0001ed17
   1ebac:	0001ed1f 	.word	0x0001ed1f
   1ebb0:	0001e955 	.word	0x0001e955
   1ebb4:	0001e955 	.word	0x0001e955
   1ebb8:	0001ed25 	.word	0x0001ed25
   1ebbc:	0001e955 	.word	0x0001e955
   1ebc0:	0001e955 	.word	0x0001e955
   1ebc4:	0001e955 	.word	0x0001e955
   1ebc8:	0001e955 	.word	0x0001e955
   1ebcc:	0001e955 	.word	0x0001e955
   1ebd0:	0001ed2d 	.word	0x0001ed2d
   1ebd4:	0001ed35 	.word	0x0001ed35
   1ebd8:	0001ed3d 	.word	0x0001ed3d
   1ebdc:	0001e955 	.word	0x0001e955
   1ebe0:	0001e955 	.word	0x0001e955
   1ebe4:	0001ed43 	.word	0x0001ed43
   1ebe8:	0001ed49 	.word	0x0001ed49
   1ebec:	0001ed4f 	.word	0x0001ed4f
   1ebf0:	0001ed55 	.word	0x0001ed55
   1ebf4:	0001e955 	.word	0x0001e955
   1ebf8:	0001e955 	.word	0x0001e955
   1ebfc:	0001ed5d 	.word	0x0001ed5d
   1ec00:	0001ed63 	.word	0x0001ed63
   1ec04:	0001ed69 	.word	0x0001ed69
   1ec08:	0001ed71 	.word	0x0001ed71
   1ec0c:	0001ed79 	.word	0x0001ed79
   1ec10:	0001ed7f 	.word	0x0001ed7f
   1ec14:	0001e955 	.word	0x0001e955
   1ec18:	0001e955 	.word	0x0001e955
   1ec1c:	0001e955 	.word	0x0001e955
   1ec20:	0001e955 	.word	0x0001e955
   1ec24:	0001e955 	.word	0x0001e955
   1ec28:	0001e955 	.word	0x0001e955
   1ec2c:	0001e955 	.word	0x0001e955
   1ec30:	0001e955 	.word	0x0001e955
   1ec34:	0001e955 	.word	0x0001e955
   1ec38:	0001e955 	.word	0x0001e955
   1ec3c:	0001e955 	.word	0x0001e955
   1ec40:	0001e955 	.word	0x0001e955
   1ec44:	0001e955 	.word	0x0001e955
   1ec48:	0001e955 	.word	0x0001e955
   1ec4c:	0001e955 	.word	0x0001e955
   1ec50:	0001e955 	.word	0x0001e955
   1ec54:	0001e955 	.word	0x0001e955
   1ec58:	0001e955 	.word	0x0001e955
   1ec5c:	0001e955 	.word	0x0001e955
   1ec60:	0001e955 	.word	0x0001e955
   1ec64:	0001e955 	.word	0x0001e955
   1ec68:	0001e955 	.word	0x0001e955
   1ec6c:	0001e955 	.word	0x0001e955
   1ec70:	0001e955 	.word	0x0001e955
   1ec74:	0001ed85 	.word	0x0001ed85
   1ec78:	0001e955 	.word	0x0001e955
   1ec7c:	0001e955 	.word	0x0001e955
   1ec80:	0001ed8d 	.word	0x0001ed8d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1ec84:	f7ee fca2 	bl	d5cc <sdc_hci_cmd_le_set_event_mask>
   1ec88:	e68d      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ec8a:	489f      	ldr	r0, [pc, #636]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ec8c:	f7ee fc82 	bl	d594 <sdc_hci_cmd_le_read_buffer_size>
   1ec90:	e69e      	b.n	1e9d0 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1ec92:	489d      	ldr	r0, [pc, #628]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ec94:	2205      	movs	r2, #5
   1ec96:	2100      	movs	r1, #0
   1ec98:	f006 fe6f 	bl	2597a <memset>
	features->le_encryption = 1;
   1ec9c:	79e3      	ldrb	r3, [r4, #7]
   1ec9e:	f063 030a 	orn	r3, r3, #10
   1eca2:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1eca4:	7a23      	ldrb	r3, [r4, #8]
   1eca6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1ecaa:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1ecae:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1ecb0:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1ecb2:	2000      	movs	r0, #0
   1ecb4:	e734      	b.n	1eb20 <hci_internal_cmd_put+0x228>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1ecb6:	f7ee fc94 	bl	d5e2 <sdc_hci_cmd_le_set_random_address>
   1ecba:	e674      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1ecbc:	f7ee fc97 	bl	d5ee <sdc_hci_cmd_le_set_scan_params>
   1ecc0:	e671      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1ecc2:	f7ee fc92 	bl	d5ea <sdc_hci_cmd_le_set_scan_enable>
   1ecc6:	e66e      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   1ecc8:	f7ee fc5a 	bl	d580 <sdc_hci_cmd_le_create_conn>
   1eccc:	e646      	b.n	1e95c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_create_conn_cancel();
   1ecce:	f7ee fc59 	bl	d584 <sdc_hci_cmd_le_create_conn_cancel>
   1ecd2:	e668      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1ecd4:	488c      	ldr	r0, [pc, #560]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ecd6:	f7ee fc6d 	bl	d5b4 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1ecda:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ecdc:	e71d      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_clear_white_list();
   1ecde:	f7ee fc4b 	bl	d578 <sdc_hci_cmd_le_clear_white_list>
   1ece2:	e660      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1ece4:	f7ee fc44 	bl	d570 <sdc_hci_cmd_le_add_device_to_white_list>
   1ece8:	e65d      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1ecea:	f7ee fc67 	bl	d5bc <sdc_hci_cmd_le_remove_device_from_white_list>
   1ecee:	e65a      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   1ecf0:	f7ee fc44 	bl	d57c <sdc_hci_cmd_le_conn_update>
   1ecf4:	e632      	b.n	1e95c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   1ecf6:	f7ee fc6e 	bl	d5d6 <sdc_hci_cmd_le_set_host_channel_classification>
   1ecfa:	e654      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ecfc:	4982      	ldr	r1, [pc, #520]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ecfe:	f7ee fc4b 	bl	d598 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ed02:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ed04:	e709      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1ed06:	f7ee fc4d 	bl	d5a4 <sdc_hci_cmd_le_read_remote_features>
   1ed0a:	e627      	b.n	1e95c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ed0c:	497e      	ldr	r1, [pc, #504]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed0e:	f7ee fc3d 	bl	d58c <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ed12:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ed14:	e701      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ed16:	487c      	ldr	r0, [pc, #496]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed18:	f7ee fc3a 	bl	d590 <sdc_hci_cmd_le_rand>
   1ed1c:	e67f      	b.n	1ea1e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   1ed1e:	f7ee fc33 	bl	d588 <sdc_hci_cmd_le_enable_encryption>
   1ed22:	e61b      	b.n	1e95c <hci_internal_cmd_put+0x64>
	*buf = states1;
   1ed24:	2370      	movs	r3, #112	; 0x70
   1ed26:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1ed28:	2340      	movs	r3, #64	; 0x40
   1ed2a:	e6f0      	b.n	1eb0e <hci_internal_cmd_put+0x216>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ed2c:	4976      	ldr	r1, [pc, #472]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed2e:	f7ee fc49 	bl	d5c4 <sdc_hci_cmd_le_set_data_length>
   1ed32:	e645      	b.n	1e9c0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ed34:	4874      	ldr	r0, [pc, #464]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed36:	f7ee fc39 	bl	d5ac <sdc_hci_cmd_le_read_suggested_default_data_length>
   1ed3a:	e651      	b.n	1e9e0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1ed3c:	f7ee fc59 	bl	d5f2 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1ed40:	e631      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1ed42:	f7ee fc13 	bl	d56c <sdc_hci_cmd_le_add_device_to_resolving_list>
   1ed46:	e62e      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1ed48:	f7ee fc36 	bl	d5b8 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1ed4c:	e62b      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1ed4e:	f7ee fc11 	bl	d574 <sdc_hci_cmd_le_clear_resolving_list>
   1ed52:	e628      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ed54:	486c      	ldr	r0, [pc, #432]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed56:	f7ee fc27 	bl	d5a8 <sdc_hci_cmd_le_read_resolving_list_size>
   1ed5a:	e7be      	b.n	1ecda <hci_internal_cmd_put+0x3e2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1ed5c:	f7ee fc30 	bl	d5c0 <sdc_hci_cmd_le_set_address_resolution_enable>
   1ed60:	e621      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1ed62:	f7ee fc40 	bl	d5e6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1ed66:	e61e      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ed68:	4867      	ldr	r0, [pc, #412]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed6a:	f7ee fc17 	bl	d59c <sdc_hci_cmd_le_read_max_data_length>
   1ed6e:	e656      	b.n	1ea1e <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ed70:	4965      	ldr	r1, [pc, #404]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed72:	f7ee fc15 	bl	d5a0 <sdc_hci_cmd_le_read_phy>
   1ed76:	e633      	b.n	1e9e0 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1ed78:	f7ee fc26 	bl	d5c8 <sdc_hci_cmd_le_set_default_phy>
   1ed7c:	e613      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1ed7e:	f7ee fc2c 	bl	d5da <sdc_hci_cmd_le_set_phy>
   1ed82:	e5eb      	b.n	1e95c <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ed84:	4860      	ldr	r0, [pc, #384]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ed86:	f7ee fc13 	bl	d5b0 <sdc_hci_cmd_le_read_transmit_power>
   1ed8a:	e619      	b.n	1e9c0 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1ed8c:	f7ee fc27 	bl	d5de <sdc_hci_cmd_le_set_privacy_mode>
   1ed90:	e609      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1ed92:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1ed96:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ed98:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1ed9c:	d820      	bhi.n	1ede0 <hci_internal_cmd_put+0x4e8>
   1ed9e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1eda2:	f43f add7 	beq.w	1e954 <hci_internal_cmd_put+0x5c>
   1eda6:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1edaa:	3b01      	subs	r3, #1
   1edac:	2b09      	cmp	r3, #9
   1edae:	f63f add1 	bhi.w	1e954 <hci_internal_cmd_put+0x5c>
   1edb2:	a201      	add	r2, pc, #4	; (adr r2, 1edb8 <hci_internal_cmd_put+0x4c0>)
   1edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1edb8:	0001ee01 	.word	0x0001ee01
   1edbc:	0001ee2f 	.word	0x0001ee2f
   1edc0:	0001e955 	.word	0x0001e955
   1edc4:	0001e955 	.word	0x0001e955
   1edc8:	0001e955 	.word	0x0001e955
   1edcc:	0001ee73 	.word	0x0001ee73
   1edd0:	0001e955 	.word	0x0001e955
   1edd4:	0001e955 	.word	0x0001e955
   1edd8:	0001ee5f 	.word	0x0001ee5f
   1eddc:	0001ee69 	.word	0x0001ee69
   1ede0:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1ede4:	b29b      	uxth	r3, r3
   1ede6:	2b05      	cmp	r3, #5
   1ede8:	f63f adb4 	bhi.w	1e954 <hci_internal_cmd_put+0x5c>
   1edec:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1edf0:	2b05      	cmp	r3, #5
   1edf2:	f63f adaf 	bhi.w	1e954 <hci_internal_cmd_put+0x5c>
   1edf6:	e8df f003 	tbb	[pc, r3]
   1edfa:	4c40      	.short	0x4c40
   1edfc:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1ee00:	4841      	ldr	r0, [pc, #260]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ee02:	f7e5 fa07 	bl	4214 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1ee06:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1ee08:	f242 0219 	movw	r2, #8217	; 0x2019
   1ee0c:	4296      	cmp	r6, r2
   1ee0e:	dc5c      	bgt.n	1eeca <hci_internal_cmd_put+0x5d2>
   1ee10:	f242 020c 	movw	r2, #8204	; 0x200c
   1ee14:	4296      	cmp	r6, r2
   1ee16:	dc4b      	bgt.n	1eeb0 <hci_internal_cmd_put+0x5b8>
   1ee18:	f240 4206 	movw	r2, #1030	; 0x406
   1ee1c:	4296      	cmp	r6, r2
   1ee1e:	f43f ad9d 	beq.w	1e95c <hci_internal_cmd_put+0x64>
   1ee22:	f240 421d 	movw	r2, #1053	; 0x41d
   1ee26:	4296      	cmp	r6, r2
   1ee28:	f43f ad98 	beq.w	1e95c <hci_internal_cmd_put+0x64>
   1ee2c:	e675      	b.n	1eb1a <hci_internal_cmd_put+0x222>
	memset(cmds, 0, sizeof(*cmds));
   1ee2e:	4836      	ldr	r0, [pc, #216]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ee30:	2202      	movs	r2, #2
   1ee32:	2100      	movs	r1, #0
   1ee34:	f006 fda1 	bl	2597a <memset>
	cmds->read_version_info = 1;
   1ee38:	79e3      	ldrb	r3, [r4, #7]
   1ee3a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1ee3e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1ee42:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1ee44:	7a23      	ldrb	r3, [r4, #8]
   1ee46:	f023 0307 	bic.w	r3, r3, #7
   1ee4a:	f043 0307 	orr.w	r3, r3, #7
   1ee4e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1ee50:	f242 0319 	movw	r3, #8217	; 0x2019
   1ee54:	429e      	cmp	r6, r3
   1ee56:	dd47      	ble.n	1eee8 <hci_internal_cmd_put+0x5f0>
   1ee58:	f242 0332 	movw	r3, #8242	; 0x2032
   1ee5c:	e04f      	b.n	1eefe <hci_internal_cmd_put+0x606>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ee5e:	482a      	ldr	r0, [pc, #168]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ee60:	f7ee fb2f 	bl	d4c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ee64:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ee66:	e7cf      	b.n	1ee08 <hci_internal_cmd_put+0x510>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ee68:	4827      	ldr	r0, [pc, #156]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ee6a:	f7ee fadd 	bl	d428 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1ee6e:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ee70:	e7ca      	b.n	1ee08 <hci_internal_cmd_put+0x510>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1ee72:	f7ee fb75 	bl	d560 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1ee76:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1ee78:	e7c6      	b.n	1ee08 <hci_internal_cmd_put+0x510>
	memset(cmds, 0, sizeof(*cmds));
   1ee7a:	4823      	ldr	r0, [pc, #140]	; (1ef08 <hci_internal_cmd_put+0x610>)
   1ee7c:	2201      	movs	r2, #1
   1ee7e:	2100      	movs	r1, #0
   1ee80:	f006 fd7b 	bl	2597a <memset>
	cmds->read_supported_vs_commands = 1;
   1ee84:	79e3      	ldrb	r3, [r4, #7]
   1ee86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1ee8a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1ee8e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1ee90:	e631      	b.n	1eaf6 <hci_internal_cmd_put+0x1fe>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1ee92:	f7ee fac2 	bl	d41a <sdc_hci_cmd_vs_llpm_mode_set>
   1ee96:	e586      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1ee98:	f7ee fa93 	bl	d3c2 <sdc_hci_cmd_vs_conn_update>
   1ee9c:	e583      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1ee9e:	f7ee fa88 	bl	d3b2 <sdc_hci_cmd_vs_conn_event_extend>
   1eea2:	e580      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1eea4:	f7ee fabb 	bl	d41e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1eea8:	e57d      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1eeaa:	f7ee fab4 	bl	d416 <sdc_hci_cmd_vs_event_length_set>
   1eeae:	e57a      	b.n	1e9a6 <hci_internal_cmd_put+0xae>
   1eeb0:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1eeb4:	3a0d      	subs	r2, #13
   1eeb6:	2101      	movs	r1, #1
   1eeb8:	b292      	uxth	r2, r2
   1eeba:	fa01 f202 	lsl.w	r2, r1, r2
   1eebe:	f241 2141 	movw	r1, #4673	; 0x1241
   1eec2:	420a      	tst	r2, r1
   1eec4:	f43f ae29 	beq.w	1eb1a <hci_internal_cmd_put+0x222>
   1eec8:	e548      	b.n	1e95c <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1eeca:	f242 0232 	movw	r2, #8242	; 0x2032
   1eece:	4296      	cmp	r6, r2
   1eed0:	f43f ad44 	beq.w	1e95c <hci_internal_cmd_put+0x64>
   1eed4:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   1eed8:	3a03      	subs	r2, #3
   1eeda:	2a01      	cmp	r2, #1
   1eedc:	f67f ad3e 	bls.w	1e95c <hci_internal_cmd_put+0x64>
   1eee0:	e61b      	b.n	1eb1a <hci_internal_cmd_put+0x222>
		return -NRF_EPERM;
   1eee2:	f04f 30ff 	mov.w	r0, #4294967295
   1eee6:	e545      	b.n	1e974 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1eee8:	f242 030c 	movw	r3, #8204	; 0x200c
   1eeec:	429e      	cmp	r6, r3
   1eeee:	f73f ae02 	bgt.w	1eaf6 <hci_internal_cmd_put+0x1fe>
   1eef2:	f240 4306 	movw	r3, #1030	; 0x406
   1eef6:	429e      	cmp	r6, r3
   1eef8:	d004      	beq.n	1ef04 <hci_internal_cmd_put+0x60c>
   1eefa:	f240 431d 	movw	r3, #1053	; 0x41d
   1eefe:	429e      	cmp	r6, r3
   1ef00:	f47f adf9 	bne.w	1eaf6 <hci_internal_cmd_put+0x1fe>
   1ef04:	2000      	movs	r0, #0
   1ef06:	e529      	b.n	1e95c <hci_internal_cmd_put+0x64>
   1ef08:	20002b4f 	.word	0x20002b4f

0001ef0c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1ef0c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1ef0e:	4c07      	ldr	r4, [pc, #28]	; (1ef2c <hci_internal_evt_get+0x20>)
   1ef10:	7823      	ldrb	r3, [r4, #0]
   1ef12:	b13b      	cbz	r3, 1ef24 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1ef14:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1ef16:	1c61      	adds	r1, r4, #1
   1ef18:	3202      	adds	r2, #2
   1ef1a:	f006 fd23 	bl	25964 <memcpy>
		cmd_complete_or_status.occurred = false;
   1ef1e:	2000      	movs	r0, #0
   1ef20:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1ef22:	bd10      	pop	{r4, pc}
   1ef24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1ef28:	f7ee ba26 	b.w	d378 <sdc_hci_evt_get>
   1ef2c:	20002b48 	.word	0x20002b48

0001ef30 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ef30:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1ef32:	b570      	push	{r4, r5, r6, lr}
   1ef34:	4604      	mov	r4, r0
   1ef36:	460d      	mov	r5, r1
   1ef38:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ef3c:	d919      	bls.n	1ef72 <sys_memcpy_swap.constprop.0+0x42>
   1ef3e:	42b0      	cmp	r0, r6
   1ef40:	d20e      	bcs.n	1ef60 <sys_memcpy_swap.constprop.0+0x30>
   1ef42:	490e      	ldr	r1, [pc, #56]	; (1ef7c <sys_memcpy_swap.constprop.0+0x4c>)
   1ef44:	4a0e      	ldr	r2, [pc, #56]	; (1ef80 <sys_memcpy_swap.constprop.0+0x50>)
   1ef46:	480f      	ldr	r0, [pc, #60]	; (1ef84 <sys_memcpy_swap.constprop.0+0x54>)
   1ef48:	f240 2317 	movw	r3, #535	; 0x217
   1ef4c:	f005 fbd4 	bl	246f8 <printk>
   1ef50:	480d      	ldr	r0, [pc, #52]	; (1ef88 <sys_memcpy_swap.constprop.0+0x58>)
   1ef52:	f005 fbd1 	bl	246f8 <printk>
   1ef56:	480a      	ldr	r0, [pc, #40]	; (1ef80 <sys_memcpy_swap.constprop.0+0x50>)
   1ef58:	f240 2117 	movw	r1, #535	; 0x217
   1ef5c:	f005 fdbd 	bl	24ada <assert_post_action>
	for (; length > 0; length--) {
   1ef60:	4633      	mov	r3, r6
   1ef62:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   1ef64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ef68:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   1ef6c:	42ab      	cmp	r3, r5
   1ef6e:	d1f9      	bne.n	1ef64 <sys_memcpy_swap.constprop.0+0x34>
}
   1ef70:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ef72:	d0e6      	beq.n	1ef42 <sys_memcpy_swap.constprop.0+0x12>
   1ef74:	f100 0310 	add.w	r3, r0, #16
   1ef78:	4299      	cmp	r1, r3
   1ef7a:	e7e1      	b.n	1ef40 <sys_memcpy_swap.constprop.0+0x10>
   1ef7c:	0002ee15 	.word	0x0002ee15
   1ef80:	0002edea 	.word	0x0002edea
   1ef84:	000290f5 	.word	0x000290f5
   1ef88:	0002ee6c 	.word	0x0002ee6c

0001ef8c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1ef90:	4e14      	ldr	r6, [pc, #80]	; (1efe4 <bt_rand+0x58>)
   1ef92:	6833      	ldr	r3, [r6, #0]
{
   1ef94:	4605      	mov	r5, r0
   1ef96:	460c      	mov	r4, r1
   1ef98:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   1ef9a:	b1c3      	cbz	r3, 1efce <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ef9c:	683e      	ldr	r6, [r7, #0]
   1ef9e:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   1efa0:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1efa2:	683b      	ldr	r3, [r7, #0]
   1efa4:	b963      	cbnz	r3, 1efc0 <bt_rand+0x34>
   1efa6:	4910      	ldr	r1, [pc, #64]	; (1efe8 <bt_rand+0x5c>)
   1efa8:	4a10      	ldr	r2, [pc, #64]	; (1efec <bt_rand+0x60>)
   1efaa:	4811      	ldr	r0, [pc, #68]	; (1eff0 <bt_rand+0x64>)
   1efac:	234b      	movs	r3, #75	; 0x4b
   1efae:	f005 fba3 	bl	246f8 <printk>
   1efb2:	4810      	ldr	r0, [pc, #64]	; (1eff4 <bt_rand+0x68>)
   1efb4:	f005 fba0 	bl	246f8 <printk>
   1efb8:	480c      	ldr	r0, [pc, #48]	; (1efec <bt_rand+0x60>)
   1efba:	214b      	movs	r1, #75	; 0x4b
   1efbc:	f005 fd8d 	bl	24ada <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1efc0:	683b      	ldr	r3, [r7, #0]
   1efc2:	4622      	mov	r2, r4
   1efc4:	4629      	mov	r1, r5
   1efc6:	4630      	mov	r0, r6
}
   1efc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1efcc:	4718      	bx	r3
   1efce:	480a      	ldr	r0, [pc, #40]	; (1eff8 <bt_rand+0x6c>)
   1efd0:	f001 fc98 	bl	20904 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1efd4:	6030      	str	r0, [r6, #0]
		if (!dev) {
   1efd6:	2800      	cmp	r0, #0
   1efd8:	d1e0      	bne.n	1ef9c <bt_rand+0x10>
}
   1efda:	f06f 0012 	mvn.w	r0, #18
   1efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1efe2:	bf00      	nop
   1efe4:	200023b4 	.word	0x200023b4
   1efe8:	0002fa23 	.word	0x0002fa23
   1efec:	0002f9f6 	.word	0x0002f9f6
   1eff0:	000290f5 	.word	0x000290f5
   1eff4:	0002fa43 	.word	0x0002fa43
   1eff8:	0002f9b0 	.word	0x0002f9b0

0001effc <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1effc:	b538      	push	{r3, r4, r5, lr}
   1effe:	4b0b      	ldr	r3, [pc, #44]	; (1f02c <m_assert_handler+0x30>)
   1f000:	4c0b      	ldr	r4, [pc, #44]	; (1f030 <m_assert_handler+0x34>)
   1f002:	1ae4      	subs	r4, r4, r3
   1f004:	460d      	mov	r5, r1
   1f006:	08e4      	lsrs	r4, r4, #3
   1f008:	f7f2 feb4 	bl	11d74 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1f00c:	01a4      	lsls	r4, r4, #6
   1f00e:	f044 0401 	orr.w	r4, r4, #1
   1f012:	4601      	mov	r1, r0
   1f014:	4623      	mov	r3, r4
   1f016:	4807      	ldr	r0, [pc, #28]	; (1f034 <m_assert_handler+0x38>)
   1f018:	462a      	mov	r2, r5
   1f01a:	f005 fdad 	bl	24b78 <log_2>
	k_oops();
   1f01e:	4040      	eors	r0, r0
   1f020:	f380 8811 	msr	BASEPRI, r0
   1f024:	f04f 0003 	mov.w	r0, #3
   1f028:	df02      	svc	2
}
   1f02a:	bd38      	pop	{r3, r4, r5, pc}
   1f02c:	00028618 	.word	0x00028618
   1f030:	000286e0 	.word	0x000286e0
   1f034:	0002fc72 	.word	0x0002fc72

0001f038 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1f038:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f03a:	2332      	movs	r3, #50	; 0x32
   1f03c:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f040:	4a13      	ldr	r2, [pc, #76]	; (1f090 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   1f042:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1f044:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f046:	2119      	movs	r1, #25
   1f048:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1f04a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1f04e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1f052:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f056:	f7e4 fc69 	bl	392c <mpsl_init>
	if (err) {
   1f05a:	4604      	mov	r4, r0
   1f05c:	b9a0      	cbnz	r0, 1f088 <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   1f05e:	480d      	ldr	r0, [pc, #52]	; (1f094 <mpsl_lib_init+0x5c>)
   1f060:	4629      	mov	r1, r5
   1f062:	f7ed fb9e 	bl	c7a2 <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   1f066:	4604      	mov	r4, r0
   1f068:	b970      	cbnz	r0, 1f088 <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f06a:	4601      	mov	r1, r0
   1f06c:	462a      	mov	r2, r5
   1f06e:	2008      	movs	r0, #8
   1f070:	f7f4 fcfc 	bl	13a6c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f074:	462a      	mov	r2, r5
   1f076:	4621      	mov	r1, r4
   1f078:	200b      	movs	r0, #11
   1f07a:	f7f4 fcf7 	bl	13a6c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f07e:	462a      	mov	r2, r5
   1f080:	4621      	mov	r1, r4
   1f082:	4628      	mov	r0, r5
   1f084:	f7f4 fcf2 	bl	13a6c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1f088:	4620      	mov	r0, r4
   1f08a:	b003      	add	sp, #12
   1f08c:	bd30      	pop	{r4, r5, pc}
   1f08e:	bf00      	nop
   1f090:	0001effd 	.word	0x0001effd
   1f094:	200023b8 	.word	0x200023b8

0001f098 <mpsl_low_prio_irq_handler>:
   1f098:	4801      	ldr	r0, [pc, #4]	; (1f0a0 <mpsl_low_prio_irq_handler+0x8>)
   1f09a:	f002 bc9b 	b.w	219d4 <z_impl_k_sem_give>
   1f09e:	bf00      	nop
   1f0a0:	2000071c 	.word	0x2000071c

0001f0a4 <signal_thread>:
{
   1f0a4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   1f0a6:	4d0f      	ldr	r5, [pc, #60]	; (1f0e4 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   1f0a8:	4c0f      	ldr	r4, [pc, #60]	; (1f0e8 <signal_thread+0x44>)
   1f0aa:	f04f 32ff 	mov.w	r2, #4294967295
   1f0ae:	f04f 33ff 	mov.w	r3, #4294967295
   1f0b2:	4628      	mov	r0, r5
   1f0b4:	f002 fcd2 	bl	21a5c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f0b8:	f04f 30ff 	mov.w	r0, #4294967295
   1f0bc:	f04f 31ff 	mov.w	r1, #4294967295
   1f0c0:	f7ff f98a 	bl	1e3d8 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   1f0c4:	b148      	cbz	r0, 1f0da <signal_thread+0x36>
   1f0c6:	4909      	ldr	r1, [pc, #36]	; (1f0ec <signal_thread+0x48>)
   1f0c8:	4809      	ldr	r0, [pc, #36]	; (1f0f0 <signal_thread+0x4c>)
   1f0ca:	2346      	movs	r3, #70	; 0x46
   1f0cc:	4622      	mov	r2, r4
   1f0ce:	f005 fb13 	bl	246f8 <printk>
   1f0d2:	2146      	movs	r1, #70	; 0x46
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	f005 fd00 	bl	24ada <assert_post_action>
		mpsl_low_priority_process();
   1f0da:	f7ed fc79 	bl	c9d0 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1f0de:	f7ff f983 	bl	1e3e8 <multithreading_lock_release>
	while (true) {
   1f0e2:	e7e2      	b.n	1f0aa <signal_thread+0x6>
   1f0e4:	2000071c 	.word	0x2000071c
   1f0e8:	0002fc86 	.word	0x0002fc86
   1f0ec:	0002fcb3 	.word	0x0002fcb3
   1f0f0:	000290f5 	.word	0x000290f5

0001f0f4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1f0f4:	b530      	push	{r4, r5, lr}
   1f0f6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f0f8:	4d0f      	ldr	r5, [pc, #60]	; (1f138 <mpsl_signal_thread_init+0x44>)
   1f0fa:	4910      	ldr	r1, [pc, #64]	; (1f13c <mpsl_signal_thread_init+0x48>)
   1f0fc:	2200      	movs	r2, #0
   1f0fe:	2300      	movs	r3, #0
   1f100:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f104:	2400      	movs	r4, #0
   1f106:	f06f 0309 	mvn.w	r3, #9
   1f10a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1f10e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f112:	4b0b      	ldr	r3, [pc, #44]	; (1f140 <mpsl_signal_thread_init+0x4c>)
   1f114:	9400      	str	r4, [sp, #0]
   1f116:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f11a:	4628      	mov	r0, r5
   1f11c:	f001 fffe 	bl	2111c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f120:	4908      	ldr	r1, [pc, #32]	; (1f144 <mpsl_signal_thread_init+0x50>)
   1f122:	4628      	mov	r0, r5
   1f124:	f008 ff8c 	bl	28040 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f128:	4622      	mov	r2, r4
   1f12a:	2104      	movs	r1, #4
   1f12c:	2019      	movs	r0, #25
   1f12e:	f7f4 fc9d 	bl	13a6c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f132:	4620      	mov	r0, r4
   1f134:	b009      	add	sp, #36	; 0x24
   1f136:	bd30      	pop	{r4, r5, pc}
   1f138:	20001c98 	.word	0x20001c98
   1f13c:	200036e0 	.word	0x200036e0
   1f140:	0001f0a5 	.word	0x0001f0a5
   1f144:	0002fcc0 	.word	0x0002fcc0

0001f148 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f148:	4b01      	ldr	r3, [pc, #4]	; (1f150 <mpsl_hfclk_callback+0x8>)
   1f14a:	2000      	movs	r0, #0
   1f14c:	681b      	ldr	r3, [r3, #0]
   1f14e:	4718      	bx	r3
   1f150:	200023dc 	.word	0x200023dc

0001f154 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f154:	b510      	push	{r4, lr}
	switch (domain) {
   1f156:	b130      	cbz	r0, 1f166 <nrfx_clock_start+0x12>
   1f158:	2801      	cmp	r0, #1
   1f15a:	d10a      	bne.n	1f172 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f160:	480b      	ldr	r0, [pc, #44]	; (1f190 <nrfx_clock_start+0x3c>)
   1f162:	f7e4 ba4d 	b.w	3600 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f166:	4b0b      	ldr	r3, [pc, #44]	; (1f194 <nrfx_clock_start+0x40>)
}
   1f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f16c:	681b      	ldr	r3, [r3, #0]
   1f16e:	2001      	movs	r0, #1
   1f170:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1f172:	4909      	ldr	r1, [pc, #36]	; (1f198 <nrfx_clock_start+0x44>)
   1f174:	4a09      	ldr	r2, [pc, #36]	; (1f19c <nrfx_clock_start+0x48>)
   1f176:	480a      	ldr	r0, [pc, #40]	; (1f1a0 <nrfx_clock_start+0x4c>)
   1f178:	231c      	movs	r3, #28
   1f17a:	f005 fabd 	bl	246f8 <printk>
   1f17e:	4809      	ldr	r0, [pc, #36]	; (1f1a4 <nrfx_clock_start+0x50>)
   1f180:	f005 faba 	bl	246f8 <printk>
}
   1f184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   1f188:	4804      	ldr	r0, [pc, #16]	; (1f19c <nrfx_clock_start+0x48>)
   1f18a:	211c      	movs	r1, #28
   1f18c:	f005 bca5 	b.w	24ada <assert_post_action>
   1f190:	0001f149 	.word	0x0001f149
   1f194:	200023dc 	.word	0x200023dc
   1f198:	0002cf26 	.word	0x0002cf26
   1f19c:	0002fcd6 	.word	0x0002fcd6
   1f1a0:	000290f5 	.word	0x000290f5
   1f1a4:	0002fd13 	.word	0x0002fd13

0001f1a8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f1a8:	b508      	push	{r3, lr}
	switch (domain) {
   1f1aa:	b1a0      	cbz	r0, 1f1d6 <nrfx_clock_stop+0x2e>
   1f1ac:	2801      	cmp	r0, #1
   1f1ae:	d103      	bne.n	1f1b8 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f1b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1f1b4:	f7e4 ba16 	b.w	35e4 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1f1b8:	4907      	ldr	r1, [pc, #28]	; (1f1d8 <nrfx_clock_stop+0x30>)
   1f1ba:	4a08      	ldr	r2, [pc, #32]	; (1f1dc <nrfx_clock_stop+0x34>)
   1f1bc:	4808      	ldr	r0, [pc, #32]	; (1f1e0 <nrfx_clock_stop+0x38>)
   1f1be:	232a      	movs	r3, #42	; 0x2a
   1f1c0:	f005 fa9a 	bl	246f8 <printk>
   1f1c4:	4807      	ldr	r0, [pc, #28]	; (1f1e4 <nrfx_clock_stop+0x3c>)
   1f1c6:	f005 fa97 	bl	246f8 <printk>
}
   1f1ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1f1ce:	4803      	ldr	r0, [pc, #12]	; (1f1dc <nrfx_clock_stop+0x34>)
   1f1d0:	212a      	movs	r1, #42	; 0x2a
   1f1d2:	f005 bc82 	b.w	24ada <assert_post_action>
}
   1f1d6:	bd08      	pop	{r3, pc}
   1f1d8:	0002cf26 	.word	0x0002cf26
   1f1dc:	0002fcd6 	.word	0x0002fcd6
   1f1e0:	000290f5 	.word	0x000290f5
   1f1e4:	0002fd13 	.word	0x0002fd13

0001f1e8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f1e8:	4b01      	ldr	r3, [pc, #4]	; (1f1f0 <nrfx_clock_init+0x8>)
   1f1ea:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f1ec:	4801      	ldr	r0, [pc, #4]	; (1f1f4 <nrfx_clock_init+0xc>)
   1f1ee:	4770      	bx	lr
   1f1f0:	200023dc 	.word	0x200023dc
   1f1f4:	0bad0000 	.word	0x0bad0000

0001f1f8 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   1f1f8:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1f1fa:	4d37      	ldr	r5, [pc, #220]	; (1f2d8 <timeslot_callback+0xe0>)
   1f1fc:	7e2b      	ldrb	r3, [r5, #24]
   1f1fe:	4283      	cmp	r3, r0
{
   1f200:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   1f202:	d009      	beq.n	1f218 <timeslot_callback+0x20>
   1f204:	4935      	ldr	r1, [pc, #212]	; (1f2dc <timeslot_callback+0xe4>)
   1f206:	4836      	ldr	r0, [pc, #216]	; (1f2e0 <timeslot_callback+0xe8>)
   1f208:	4a36      	ldr	r2, [pc, #216]	; (1f2e4 <timeslot_callback+0xec>)
   1f20a:	234c      	movs	r3, #76	; 0x4c
   1f20c:	f005 fa74 	bl	246f8 <printk>
   1f210:	4834      	ldr	r0, [pc, #208]	; (1f2e4 <timeslot_callback+0xec>)
   1f212:	214c      	movs	r1, #76	; 0x4c
   1f214:	f005 fc61 	bl	24ada <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f218:	f3bf 8f5b 	dmb	ish
   1f21c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1f21e:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   1f222:	b10b      	cbz	r3, 1f228 <timeslot_callback+0x30>
   1f224:	2000      	movs	r0, #0
   1f226:	e024      	b.n	1f272 <timeslot_callback+0x7a>
		return NULL;
	}

	switch (signal) {
   1f228:	2c09      	cmp	r4, #9
   1f22a:	d849      	bhi.n	1f2c0 <timeslot_callback+0xc8>
   1f22c:	a301      	add	r3, pc, #4	; (adr r3, 1f234 <timeslot_callback+0x3c>)
   1f22e:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1f232:	bf00      	nop
   1f234:	0001f25d 	.word	0x0001f25d
   1f238:	0001f2c1 	.word	0x0001f2c1
   1f23c:	0001f2c1 	.word	0x0001f2c1
   1f240:	0001f2c1 	.word	0x0001f2c1
   1f244:	0001f2c1 	.word	0x0001f2c1
   1f248:	0001f28f 	.word	0x0001f28f
   1f24c:	0001f28f 	.word	0x0001f28f
   1f250:	0001f287 	.word	0x0001f287
   1f254:	0001f2c1 	.word	0x0001f2c1
   1f258:	0001f225 	.word	0x0001f225
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   1f25c:	6a2b      	ldr	r3, [r5, #32]
   1f25e:	e9d3 2000 	ldrd	r2, r0, [r3]
   1f262:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   1f264:	2801      	cmp	r0, #1
   1f266:	d005      	beq.n	1f274 <timeslot_callback+0x7c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   1f268:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   1f26a:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   1f26c:	481e      	ldr	r0, [pc, #120]	; (1f2e8 <timeslot_callback+0xf0>)
			_context.return_param.callback_action =
   1f26e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   1f272:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.priority =
   1f274:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   1f278:	481c      	ldr	r0, [pc, #112]	; (1f2ec <timeslot_callback+0xf4>)
   1f27a:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   1f27c:	2303      	movs	r3, #3
   1f27e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   1f282:	3010      	adds	r0, #16
   1f284:	e7f5      	b.n	1f272 <timeslot_callback+0x7a>
	z_impl_k_sem_give(sem);
   1f286:	4814      	ldr	r0, [pc, #80]	; (1f2d8 <timeslot_callback+0xe0>)
   1f288:	f002 fba4 	bl	219d4 <z_impl_k_sem_give>
   1f28c:	e7ca      	b.n	1f224 <timeslot_callback+0x2c>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1f28e:	7e28      	ldrb	r0, [r5, #24]
   1f290:	4916      	ldr	r1, [pc, #88]	; (1f2ec <timeslot_callback+0xf4>)
	_context.timeslot_request.params.earliest.priority =
   1f292:	2400      	movs	r4, #0
   1f294:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   1f298:	f7ed fa2c 	bl	c6f4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1f29c:	4605      	mov	r5, r0
   1f29e:	2800      	cmp	r0, #0
   1f2a0:	d0c0      	beq.n	1f224 <timeslot_callback+0x2c>
   1f2a2:	4a10      	ldr	r2, [pc, #64]	; (1f2e4 <timeslot_callback+0xec>)
   1f2a4:	4912      	ldr	r1, [pc, #72]	; (1f2f0 <timeslot_callback+0xf8>)
   1f2a6:	480e      	ldr	r0, [pc, #56]	; (1f2e0 <timeslot_callback+0xe8>)
   1f2a8:	2344      	movs	r3, #68	; 0x44
   1f2aa:	f005 fa25 	bl	246f8 <printk>
   1f2ae:	4629      	mov	r1, r5
   1f2b0:	4810      	ldr	r0, [pc, #64]	; (1f2f4 <timeslot_callback+0xfc>)
   1f2b2:	f005 fa21 	bl	246f8 <printk>
   1f2b6:	2144      	movs	r1, #68	; 0x44
		__ASSERT(false, "unexpected signal: %u", signal);
   1f2b8:	480a      	ldr	r0, [pc, #40]	; (1f2e4 <timeslot_callback+0xec>)
   1f2ba:	f005 fc0e 	bl	24ada <assert_post_action>
		return NULL;
   1f2be:	e7b1      	b.n	1f224 <timeslot_callback+0x2c>
		__ASSERT(false, "unexpected signal: %u", signal);
   1f2c0:	4a08      	ldr	r2, [pc, #32]	; (1f2e4 <timeslot_callback+0xec>)
   1f2c2:	490d      	ldr	r1, [pc, #52]	; (1f2f8 <timeslot_callback+0x100>)
   1f2c4:	4806      	ldr	r0, [pc, #24]	; (1f2e0 <timeslot_callback+0xe8>)
   1f2c6:	2376      	movs	r3, #118	; 0x76
   1f2c8:	f005 fa16 	bl	246f8 <printk>
   1f2cc:	4621      	mov	r1, r4
   1f2ce:	480b      	ldr	r0, [pc, #44]	; (1f2fc <timeslot_callback+0x104>)
   1f2d0:	f005 fa12 	bl	246f8 <printk>
   1f2d4:	2176      	movs	r1, #118	; 0x76
   1f2d6:	e7ef      	b.n	1f2b8 <timeslot_callback+0xc0>
   1f2d8:	200023e0 	.word	0x200023e0
   1f2dc:	0002fd5d 	.word	0x0002fd5d
   1f2e0:	000290f5 	.word	0x000290f5
   1f2e4:	0002fd23 	.word	0x0002fd23
   1f2e8:	20002414 	.word	0x20002414
   1f2ec:	20002404 	.word	0x20002404
   1f2f0:	0002fd7f 	.word	0x0002fd7f
   1f2f4:	0002fd88 	.word	0x0002fd88
   1f2f8:	0002cf26 	.word	0x0002cf26
   1f2fc:	0002fdab 	.word	0x0002fdab

0001f300 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f300:	4802      	ldr	r0, [pc, #8]	; (1f30c <nrf_flash_sync_init+0xc>)
   1f302:	2201      	movs	r2, #1
   1f304:	2100      	movs	r1, #0
   1f306:	f008 bed7 	b.w	280b8 <z_impl_k_sem_init>
   1f30a:	bf00      	nop
   1f30c:	200023e0 	.word	0x200023e0

0001f310 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   1f310:	4b01      	ldr	r3, [pc, #4]	; (1f318 <nrf_flash_sync_set_context+0x8>)
   1f312:	61d8      	str	r0, [r3, #28]
}
   1f314:	4770      	bx	lr
   1f316:	bf00      	nop
   1f318:	200023e0 	.word	0x200023e0

0001f31c <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   1f31c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f31e:	f04f 31ff 	mov.w	r1, #4294967295
{
   1f322:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f324:	f04f 30ff 	mov.w	r0, #4294967295
   1f328:	f7ff f856 	bl	1e3d8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f32c:	b148      	cbz	r0, 1f342 <nrf_flash_sync_exe+0x26>
   1f32e:	4957      	ldr	r1, [pc, #348]	; (1f48c <nrf_flash_sync_exe+0x170>)
   1f330:	4857      	ldr	r0, [pc, #348]	; (1f490 <nrf_flash_sync_exe+0x174>)
   1f332:	4a58      	ldr	r2, [pc, #352]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f334:	2393      	movs	r3, #147	; 0x93
   1f336:	f005 f9df 	bl	246f8 <printk>
   1f33a:	4856      	ldr	r0, [pc, #344]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f33c:	2193      	movs	r1, #147	; 0x93
   1f33e:	f005 fbcc 	bl	24ada <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   1f342:	4c55      	ldr	r4, [pc, #340]	; (1f498 <nrf_flash_sync_exe+0x17c>)
   1f344:	4855      	ldr	r0, [pc, #340]	; (1f49c <nrf_flash_sync_exe+0x180>)
   1f346:	f104 0118 	add.w	r1, r4, #24
   1f34a:	f7e1 f899 	bl	480 <mpsl_timeslot_session_open>
   1f34e:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   1f350:	f7ff f84a 	bl	1e3e8 <multithreading_lock_release>

	if (ret < 0) {
   1f354:	2d00      	cmp	r5, #0
   1f356:	da0d      	bge.n	1f374 <nrf_flash_sync_exe+0x58>
   1f358:	4b51      	ldr	r3, [pc, #324]	; (1f4a0 <nrf_flash_sync_exe+0x184>)
   1f35a:	4a52      	ldr	r2, [pc, #328]	; (1f4a4 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   1f35c:	4852      	ldr	r0, [pc, #328]	; (1f4a8 <nrf_flash_sync_exe+0x18c>)
   1f35e:	1ad2      	subs	r2, r2, r3
   1f360:	08d2      	lsrs	r2, r2, #3
   1f362:	0192      	lsls	r2, r2, #6
   1f364:	f042 0201 	orr.w	r2, r2, #1
   1f368:	4629      	mov	r1, r5
   1f36a:	f005 fbf1 	bl	24b50 <log_1>
		return -ENOMEM;
   1f36e:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   1f372:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   1f374:	f240 1301 	movw	r3, #257	; 0x101
   1f378:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1f37a:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   1f37c:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   1f37e:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   1f380:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   1f382:	4b4a      	ldr	r3, [pc, #296]	; (1f4ac <nrf_flash_sync_exe+0x190>)
   1f384:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1f386:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   1f388:	f06f 0373 	mvn.w	r3, #115	; 0x73
   1f38c:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   1f38e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f392:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1f396:	f3bf 8f5b 	dmb	ish
   1f39a:	e853 1f00 	ldrex	r1, [r3]
   1f39e:	e843 2000 	strex	r0, r2, [r3]
   1f3a2:	2800      	cmp	r0, #0
   1f3a4:	d1f9      	bne.n	1f39a <nrf_flash_sync_exe+0x7e>
   1f3a6:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   1f3aa:	68a2      	ldr	r2, [r4, #8]
   1f3ac:	461e      	mov	r6, r3
   1f3ae:	b14a      	cbz	r2, 1f3c4 <nrf_flash_sync_exe+0xa8>
   1f3b0:	493f      	ldr	r1, [pc, #252]	; (1f4b0 <nrf_flash_sync_exe+0x194>)
   1f3b2:	4837      	ldr	r0, [pc, #220]	; (1f490 <nrf_flash_sync_exe+0x174>)
   1f3b4:	4a37      	ldr	r2, [pc, #220]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f3b6:	23a9      	movs	r3, #169	; 0xa9
   1f3b8:	f005 f99e 	bl	246f8 <printk>
   1f3bc:	4835      	ldr	r0, [pc, #212]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f3be:	21a9      	movs	r1, #169	; 0xa9
   1f3c0:	f005 fb8b 	bl	24ada <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f3c4:	f04f 30ff 	mov.w	r0, #4294967295
   1f3c8:	f04f 31ff 	mov.w	r1, #4294967295
   1f3cc:	f7ff f804 	bl	1e3d8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f3d0:	b148      	cbz	r0, 1f3e6 <nrf_flash_sync_exe+0xca>
   1f3d2:	492e      	ldr	r1, [pc, #184]	; (1f48c <nrf_flash_sync_exe+0x170>)
   1f3d4:	482e      	ldr	r0, [pc, #184]	; (1f490 <nrf_flash_sync_exe+0x174>)
   1f3d6:	4a2f      	ldr	r2, [pc, #188]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f3d8:	23ac      	movs	r3, #172	; 0xac
   1f3da:	f005 f98d 	bl	246f8 <printk>
   1f3de:	482d      	ldr	r0, [pc, #180]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f3e0:	21ac      	movs	r1, #172	; 0xac
   1f3e2:	f005 fb7a 	bl	24ada <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   1f3e6:	4933      	ldr	r1, [pc, #204]	; (1f4b4 <nrf_flash_sync_exe+0x198>)
   1f3e8:	7e20      	ldrb	r0, [r4, #24]
   1f3ea:	f7ed f983 	bl	c6f4 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   1f3ee:	4605      	mov	r5, r0
   1f3f0:	b168      	cbz	r0, 1f40e <nrf_flash_sync_exe+0xf2>
   1f3f2:	4a28      	ldr	r2, [pc, #160]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f3f4:	4930      	ldr	r1, [pc, #192]	; (1f4b8 <nrf_flash_sync_exe+0x19c>)
   1f3f6:	4826      	ldr	r0, [pc, #152]	; (1f490 <nrf_flash_sync_exe+0x174>)
   1f3f8:	23ae      	movs	r3, #174	; 0xae
   1f3fa:	f005 f97d 	bl	246f8 <printk>
   1f3fe:	482f      	ldr	r0, [pc, #188]	; (1f4bc <nrf_flash_sync_exe+0x1a0>)
   1f400:	4629      	mov	r1, r5
   1f402:	f005 f979 	bl	246f8 <printk>
   1f406:	4823      	ldr	r0, [pc, #140]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f408:	21ae      	movs	r1, #174	; 0xae
   1f40a:	f005 fb66 	bl	24ada <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   1f40e:	f7fe ffeb 	bl	1e3e8 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   1f412:	4a2b      	ldr	r2, [pc, #172]	; (1f4c0 <nrf_flash_sync_exe+0x1a4>)
   1f414:	4820      	ldr	r0, [pc, #128]	; (1f498 <nrf_flash_sync_exe+0x17c>)
   1f416:	2300      	movs	r3, #0
   1f418:	f002 fb20 	bl	21a5c <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   1f41c:	2800      	cmp	r0, #0
   1f41e:	da14      	bge.n	1f44a <nrf_flash_sync_exe+0x12e>
   1f420:	4b1f      	ldr	r3, [pc, #124]	; (1f4a0 <nrf_flash_sync_exe+0x184>)
   1f422:	4920      	ldr	r1, [pc, #128]	; (1f4a4 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("timeout");
   1f424:	4827      	ldr	r0, [pc, #156]	; (1f4c4 <nrf_flash_sync_exe+0x1a8>)
   1f426:	1ac9      	subs	r1, r1, r3
   1f428:	08c9      	lsrs	r1, r1, #3
   1f42a:	0189      	lsls	r1, r1, #6
   1f42c:	f041 0101 	orr.w	r1, r1, #1
   1f430:	f005 fb81 	bl	24b36 <log_0>
   1f434:	f3bf 8f5b 	dmb	ish
   1f438:	2301      	movs	r3, #1
   1f43a:	e856 2f00 	ldrex	r2, [r6]
   1f43e:	e846 3100 	strex	r1, r3, [r6]
   1f442:	2900      	cmp	r1, #0
   1f444:	d1f9      	bne.n	1f43a <nrf_flash_sync_exe+0x11e>
   1f446:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f44a:	f04f 30ff 	mov.w	r0, #4294967295
   1f44e:	f04f 31ff 	mov.w	r1, #4294967295
   1f452:	f7fe ffc1 	bl	1e3d8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f456:	b148      	cbz	r0, 1f46c <nrf_flash_sync_exe+0x150>
   1f458:	490c      	ldr	r1, [pc, #48]	; (1f48c <nrf_flash_sync_exe+0x170>)
   1f45a:	480d      	ldr	r0, [pc, #52]	; (1f490 <nrf_flash_sync_exe+0x174>)
   1f45c:	4a0d      	ldr	r2, [pc, #52]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f45e:	23b9      	movs	r3, #185	; 0xb9
   1f460:	f005 f94a 	bl	246f8 <printk>
   1f464:	480b      	ldr	r0, [pc, #44]	; (1f494 <nrf_flash_sync_exe+0x178>)
   1f466:	21b9      	movs	r1, #185	; 0xb9
   1f468:	f005 fb37 	bl	24ada <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   1f46c:	7e20      	ldrb	r0, [r4, #24]
   1f46e:	f7ed f97a 	bl	c766 <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   1f472:	f7fe ffb9 	bl	1e3e8 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f476:	f3bf 8f5b 	dmb	ish
   1f47a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f47c:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   1f480:	b113      	cbz	r3, 1f488 <nrf_flash_sync_exe+0x16c>
	z_impl_k_sem_reset(sem);
   1f482:	4805      	ldr	r0, [pc, #20]	; (1f498 <nrf_flash_sync_exe+0x17c>)
   1f484:	f002 fb74 	bl	21b70 <z_impl_k_sem_reset>
	return _context.status;
   1f488:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1f48a:	e772      	b.n	1f372 <nrf_flash_sync_exe+0x56>
   1f48c:	0002fcb3 	.word	0x0002fcb3
   1f490:	000290f5 	.word	0x000290f5
   1f494:	0002fd23 	.word	0x0002fd23
   1f498:	200023e0 	.word	0x200023e0
   1f49c:	0001f1f9 	.word	0x0001f1f9
   1f4a0:	00028618 	.word	0x00028618
   1f4a4:	000286b8 	.word	0x000286b8
   1f4a8:	0002fdc3 	.word	0x0002fdc3
   1f4ac:	07a11fff 	.word	0x07a11fff
   1f4b0:	0002fde9 	.word	0x0002fde9
   1f4b4:	20002404 	.word	0x20002404
   1f4b8:	0002fd7f 	.word	0x0002fd7f
   1f4bc:	0002fd88 	.word	0x0002fd88
   1f4c0:	000b7b44 	.word	0x000b7b44
   1f4c4:	0002e51e 	.word	0x0002e51e

0001f4c8 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4c8:	4b07      	ldr	r3, [pc, #28]	; (1f4e8 <nrf_flash_sync_check_time_limit+0x20>)
   1f4ca:	2201      	movs	r2, #1
   1f4cc:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   1f4ce:	3b40      	subs	r3, #64	; 0x40
   1f4d0:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   1f4d4:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   1f4d8:	4418      	add	r0, r3
   1f4da:	4b04      	ldr	r3, [pc, #16]	; (1f4ec <nrf_flash_sync_check_time_limit+0x24>)
   1f4dc:	69db      	ldr	r3, [r3, #28]
}
   1f4de:	4298      	cmp	r0, r3
   1f4e0:	bf34      	ite	cc
   1f4e2:	2000      	movcc	r0, #0
   1f4e4:	2001      	movcs	r0, #1
   1f4e6:	4770      	bx	lr
   1f4e8:	40008040 	.word	0x40008040
   1f4ec:	200023e0 	.word	0x200023e0

0001f4f0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f4f0:	4b04      	ldr	r3, [pc, #16]	; (1f504 <nrf52_errata_108+0x14>)
   1f4f2:	6818      	ldr	r0, [r3, #0]
   1f4f4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f4f6:	bf04      	itt	eq
   1f4f8:	4b03      	ldreq	r3, [pc, #12]	; (1f508 <nrf52_errata_108+0x18>)
   1f4fa:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1f4fc:	1f83      	subs	r3, r0, #6
   1f4fe:	4258      	negs	r0, r3
   1f500:	4158      	adcs	r0, r3
   1f502:	4770      	bx	lr
   1f504:	10000130 	.word	0x10000130
   1f508:	f0000fe0 	.word	0xf0000fe0

0001f50c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f50c:	4b07      	ldr	r3, [pc, #28]	; (1f52c <nrf52_errata_16+0x20>)
   1f50e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f510:	2b06      	cmp	r3, #6
   1f512:	d109      	bne.n	1f528 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f514:	4b06      	ldr	r3, [pc, #24]	; (1f530 <nrf52_errata_16+0x24>)
   1f516:	681b      	ldr	r3, [r3, #0]
   1f518:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f51c:	3b03      	subs	r3, #3
   1f51e:	2b04      	cmp	r3, #4
   1f520:	d802      	bhi.n	1f528 <nrf52_errata_16+0x1c>
   1f522:	4a04      	ldr	r2, [pc, #16]	; (1f534 <nrf52_errata_16+0x28>)
   1f524:	5cd0      	ldrb	r0, [r2, r3]
   1f526:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f528:	2000      	movs	r0, #0
    #endif
}
   1f52a:	4770      	bx	lr
   1f52c:	f0000fe0 	.word	0xf0000fe0
   1f530:	f0000fe8 	.word	0xf0000fe8
   1f534:	0002fe34 	.word	0x0002fe34

0001f538 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f538:	4a02      	ldr	r2, [pc, #8]	; (1f544 <nvmc_wait+0xc>)
   1f53a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f53e:	2b00      	cmp	r3, #0
   1f540:	d0fb      	beq.n	1f53a <nvmc_wait+0x2>
}
   1f542:	4770      	bx	lr
   1f544:	4001e000 	.word	0x4001e000

0001f548 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f548:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1f54a:	f7ff ffd1 	bl	1f4f0 <nrf52_errata_108>
   1f54e:	b128      	cbz	r0, 1f55c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f550:	4b81      	ldr	r3, [pc, #516]	; (1f758 <SystemInit+0x210>)
   1f552:	4a82      	ldr	r2, [pc, #520]	; (1f75c <SystemInit+0x214>)
   1f554:	681b      	ldr	r3, [r3, #0]
   1f556:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f55a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1f55c:	f7ff ffd6 	bl	1f50c <nrf52_errata_16>
   1f560:	b110      	cbz	r0, 1f568 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f562:	4b7f      	ldr	r3, [pc, #508]	; (1f760 <SystemInit+0x218>)
   1f564:	4a7f      	ldr	r2, [pc, #508]	; (1f764 <SystemInit+0x21c>)
   1f566:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1f568:	f7ff ffc2 	bl	1f4f0 <nrf52_errata_108>
   1f56c:	b128      	cbz	r0, 1f57a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f56e:	4b7e      	ldr	r3, [pc, #504]	; (1f768 <SystemInit+0x220>)
   1f570:	4a7e      	ldr	r2, [pc, #504]	; (1f76c <SystemInit+0x224>)
   1f572:	681b      	ldr	r3, [r3, #0]
   1f574:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f578:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1f57a:	f7ff ffc7 	bl	1f50c <nrf52_errata_16>
   1f57e:	b120      	cbz	r0, 1f58a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f580:	4a7b      	ldr	r2, [pc, #492]	; (1f770 <SystemInit+0x228>)
   1f582:	68d3      	ldr	r3, [r2, #12]
   1f584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f588:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f58a:	f7ff ffb1 	bl	1f4f0 <nrf52_errata_108>
   1f58e:	b140      	cbz	r0, 1f5a2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f594:	2200      	movs	r2, #0
   1f596:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f59a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f59e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1f5a2:	f7ff ffb3 	bl	1f50c <nrf52_errata_16>
   1f5a6:	b110      	cbz	r0, 1f5ae <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1f5a8:	4b72      	ldr	r3, [pc, #456]	; (1f774 <SystemInit+0x22c>)
   1f5aa:	2203      	movs	r2, #3
   1f5ac:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1f5ae:	f7ff ffad 	bl	1f50c <nrf52_errata_16>
   1f5b2:	b140      	cbz	r0, 1f5c6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f5b4:	4b70      	ldr	r3, [pc, #448]	; (1f778 <SystemInit+0x230>)
   1f5b6:	2205      	movs	r2, #5
   1f5b8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f5ba:	2201      	movs	r2, #1
   1f5bc:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f5be:	2200      	movs	r2, #0
   1f5c0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f5c2:	223f      	movs	r2, #63	; 0x3f
   1f5c4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f5c6:	4b6d      	ldr	r3, [pc, #436]	; (1f77c <SystemInit+0x234>)
   1f5c8:	681a      	ldr	r2, [r3, #0]
   1f5ca:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f5cc:	bf0b      	itete	eq
   1f5ce:	4b6c      	ldreq	r3, [pc, #432]	; (1f780 <SystemInit+0x238>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f5d0:	4b6c      	ldrne	r3, [pc, #432]	; (1f784 <SystemInit+0x23c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f5d2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1f5d4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f5d6:	bf02      	ittt	eq
   1f5d8:	3308      	addeq	r3, #8
   1f5da:	681b      	ldreq	r3, [r3, #0]
   1f5dc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f5e0:	2a06      	cmp	r2, #6
   1f5e2:	d14d      	bne.n	1f680 <SystemInit+0x138>
            {
                switch(var2)
   1f5e4:	3b03      	subs	r3, #3
   1f5e6:	2b04      	cmp	r3, #4
   1f5e8:	d803      	bhi.n	1f5f2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f5ea:	4a67      	ldr	r2, [pc, #412]	; (1f788 <SystemInit+0x240>)
   1f5ec:	5cd3      	ldrb	r3, [r2, r3]
   1f5ee:	2b00      	cmp	r3, #0
   1f5f0:	d046      	beq.n	1f680 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f5f6:	4b65      	ldr	r3, [pc, #404]	; (1f78c <SystemInit+0x244>)
   1f5f8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f5fc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f600:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f604:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f608:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f60c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f610:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f614:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f618:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f61c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f620:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f624:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f628:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f62c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f630:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f634:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f638:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f63c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f640:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f644:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f648:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f64c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f650:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f654:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f658:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f65c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f660:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f664:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f668:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f66c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f670:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f674:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f678:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f67c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f680:	f7ff ff36 	bl	1f4f0 <nrf52_errata_108>
   1f684:	b128      	cbz	r0, 1f692 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f686:	4b42      	ldr	r3, [pc, #264]	; (1f790 <SystemInit+0x248>)
   1f688:	4a42      	ldr	r2, [pc, #264]	; (1f794 <SystemInit+0x24c>)
   1f68a:	681b      	ldr	r3, [r3, #0]
   1f68c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f690:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f692:	f7ff ff2d 	bl	1f4f0 <nrf52_errata_108>
   1f696:	b148      	cbz	r0, 1f6ac <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f69c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f6a0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f6a2:	bf44      	itt	mi
   1f6a4:	f06f 0201 	mvnmi.w	r2, #1
   1f6a8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f6ac:	4b33      	ldr	r3, [pc, #204]	; (1f77c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f6ae:	681b      	ldr	r3, [r3, #0]
   1f6b0:	2b06      	cmp	r3, #6
   1f6b2:	d120      	bne.n	1f6f6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f6b4:	4b33      	ldr	r3, [pc, #204]	; (1f784 <SystemInit+0x23c>)
   1f6b6:	681b      	ldr	r3, [r3, #0]
   1f6b8:	3b03      	subs	r3, #3
   1f6ba:	2b04      	cmp	r3, #4
   1f6bc:	d802      	bhi.n	1f6c4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f6be:	4a36      	ldr	r2, [pc, #216]	; (1f798 <SystemInit+0x250>)
   1f6c0:	5cd3      	ldrb	r3, [r2, r3]
   1f6c2:	b143      	cbz	r3, 1f6d6 <SystemInit+0x18e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f6c4:	4a35      	ldr	r2, [pc, #212]	; (1f79c <SystemInit+0x254>)
   1f6c6:	6813      	ldr	r3, [r2, #0]
   1f6c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f6cc:	6013      	str	r3, [r2, #0]
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f6ce:	4b2b      	ldr	r3, [pc, #172]	; (1f77c <SystemInit+0x234>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f6d0:	681b      	ldr	r3, [r3, #0]
   1f6d2:	2b06      	cmp	r3, #6
   1f6d4:	d10f      	bne.n	1f6f6 <SystemInit+0x1ae>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f6d6:	4b2b      	ldr	r3, [pc, #172]	; (1f784 <SystemInit+0x23c>)
   1f6d8:	681b      	ldr	r3, [r3, #0]
   1f6da:	3b03      	subs	r3, #3
   1f6dc:	2b04      	cmp	r3, #4
   1f6de:	d802      	bhi.n	1f6e6 <SystemInit+0x19e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f6e0:	4a2f      	ldr	r2, [pc, #188]	; (1f7a0 <SystemInit+0x258>)
   1f6e2:	5cd3      	ldrb	r3, [r2, r3]
   1f6e4:	b13b      	cbz	r3, 1f6f6 <SystemInit+0x1ae>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f6e6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f6ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f6ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f6f2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f6f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f6fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f6fe:	2a00      	cmp	r2, #0
   1f700:	db03      	blt.n	1f70a <SystemInit+0x1c2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f702:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f706:	2b00      	cmp	r3, #0
   1f708:	da22      	bge.n	1f750 <SystemInit+0x208>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f70a:	4926      	ldr	r1, [pc, #152]	; (1f7a4 <SystemInit+0x25c>)
   1f70c:	2301      	movs	r3, #1
   1f70e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f712:	f7ff ff11 	bl	1f538 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f716:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1f71a:	2415      	movs	r4, #21
   1f71c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f720:	f7ff ff0a 	bl	1f538 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f724:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f728:	f7ff ff06 	bl	1f538 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f72c:	2300      	movs	r3, #0
   1f72e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f732:	f7ff ff01 	bl	1f538 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1f736:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f73a:	491b      	ldr	r1, [pc, #108]	; (1f7a8 <SystemInit+0x260>)
   1f73c:	4b1b      	ldr	r3, [pc, #108]	; (1f7ac <SystemInit+0x264>)
   1f73e:	68ca      	ldr	r2, [r1, #12]
   1f740:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f744:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f746:	60cb      	str	r3, [r1, #12]
   1f748:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f74c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f74e:	e7fd      	b.n	1f74c <SystemInit+0x204>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f750:	4b17      	ldr	r3, [pc, #92]	; (1f7b0 <SystemInit+0x268>)
   1f752:	4a18      	ldr	r2, [pc, #96]	; (1f7b4 <SystemInit+0x26c>)
   1f754:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f756:	bd10      	pop	{r4, pc}
   1f758:	10000324 	.word	0x10000324
   1f75c:	40013540 	.word	0x40013540
   1f760:	4007c074 	.word	0x4007c074
   1f764:	baadf00d 	.word	0xbaadf00d
   1f768:	10000244 	.word	0x10000244
   1f76c:	4000053c 	.word	0x4000053c
   1f770:	e000edf0 	.word	0xe000edf0
   1f774:	400005a0 	.word	0x400005a0
   1f778:	40005610 	.word	0x40005610
   1f77c:	10000130 	.word	0x10000130
   1f780:	f0000fe0 	.word	0xf0000fe0
   1f784:	10000134 	.word	0x10000134
   1f788:	0002fe25 	.word	0x0002fe25
   1f78c:	4000c000 	.word	0x4000c000
   1f790:	10000258 	.word	0x10000258
   1f794:	40000ee4 	.word	0x40000ee4
   1f798:	0002fe2a 	.word	0x0002fe2a
   1f79c:	4000173c 	.word	0x4000173c
   1f7a0:	0002fe2f 	.word	0x0002fe2f
   1f7a4:	4001e000 	.word	0x4001e000
   1f7a8:	e000ed00 	.word	0xe000ed00
   1f7ac:	05fa0004 	.word	0x05fa0004
   1f7b0:	20000544 	.word	0x20000544
   1f7b4:	03d09000 	.word	0x03d09000

0001f7b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f7b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f7ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f7bc:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1f7be:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   1f7c2:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   1f7c4:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   1f7c8:	d014      	beq.n	1f7f4 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f7ca:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f7ce:	fa05 f204 	lsl.w	r2, r5, r4
   1f7d2:	ea23 0202 	bic.w	r2, r3, r2
   1f7d6:	e850 6f00 	ldrex	r6, [r0]
   1f7da:	429e      	cmp	r6, r3
   1f7dc:	d104      	bne.n	1f7e8 <nrfx_flag32_alloc+0x30>
   1f7de:	e840 2c00 	strex	ip, r2, [r0]
   1f7e2:	f1bc 0f00 	cmp.w	ip, #0
   1f7e6:	d1f6      	bne.n	1f7d6 <nrfx_flag32_alloc+0x1e>
   1f7e8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f7ec:	d1e6      	bne.n	1f7bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1f7ee:	4802      	ldr	r0, [pc, #8]	; (1f7f8 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   1f7f0:	700c      	strb	r4, [r1, #0]
}
   1f7f2:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1f7f4:	4801      	ldr	r0, [pc, #4]	; (1f7fc <nrfx_flag32_alloc+0x44>)
   1f7f6:	e7fc      	b.n	1f7f2 <nrfx_flag32_alloc+0x3a>
   1f7f8:	0bad0000 	.word	0x0bad0000
   1f7fc:	0bad0002 	.word	0x0bad0002

0001f800 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f800:	6803      	ldr	r3, [r0, #0]
   1f802:	40cb      	lsrs	r3, r1
   1f804:	07db      	lsls	r3, r3, #31
{
   1f806:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   1f808:	d415      	bmi.n	1f836 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f80a:	2301      	movs	r3, #1
   1f80c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1f810:	6803      	ldr	r3, [r0, #0]
   1f812:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f816:	ea41 0203 	orr.w	r2, r1, r3
   1f81a:	e850 4f00 	ldrex	r4, [r0]
   1f81e:	429c      	cmp	r4, r3
   1f820:	d104      	bne.n	1f82c <nrfx_flag32_free+0x2c>
   1f822:	e840 2c00 	strex	ip, r2, [r0]
   1f826:	f1bc 0f00 	cmp.w	ip, #0
   1f82a:	d1f6      	bne.n	1f81a <nrfx_flag32_free+0x1a>
   1f82c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f830:	d1ee      	bne.n	1f810 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1f832:	4802      	ldr	r0, [pc, #8]	; (1f83c <nrfx_flag32_free+0x3c>)
}
   1f834:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f836:	4802      	ldr	r0, [pc, #8]	; (1f840 <nrfx_flag32_free+0x40>)
   1f838:	e7fc      	b.n	1f834 <nrfx_flag32_free+0x34>
   1f83a:	bf00      	nop
   1f83c:	0bad0000 	.word	0x0bad0000
   1f840:	0bad0004 	.word	0x0bad0004

0001f844 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1f844:	4b05      	ldr	r3, [pc, #20]	; (1f85c <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f846:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1f848:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1f84c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   1f850:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   1f854:	4258      	negs	r0, r3
   1f856:	4158      	adcs	r0, r3
   1f858:	4770      	bx	lr
   1f85a:	bf00      	nop
   1f85c:	20000548 	.word	0x20000548

0001f860 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f860:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f862:	f100 0308 	add.w	r3, r0, #8
   1f866:	4c0c      	ldr	r4, [pc, #48]	; (1f898 <call_handler+0x38>)
   1f868:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f86c:	05da      	lsls	r2, r3, #23
{
   1f86e:	4605      	mov	r5, r0
   1f870:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f872:	d507      	bpl.n	1f884 <call_handler+0x24>
   1f874:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f878:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f87c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f880:	6852      	ldr	r2, [r2, #4]
   1f882:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f884:	68a3      	ldr	r3, [r4, #8]
   1f886:	b12b      	cbz	r3, 1f894 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f888:	68e2      	ldr	r2, [r4, #12]
   1f88a:	4631      	mov	r1, r6
   1f88c:	4628      	mov	r0, r5
    }
}
   1f88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f892:	4718      	bx	r3
}
   1f894:	bd70      	pop	{r4, r5, r6, pc}
   1f896:	bf00      	nop
   1f898:	20000548 	.word	0x20000548

0001f89c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f89c:	4b19      	ldr	r3, [pc, #100]	; (1f904 <release_handler+0x68>)
   1f89e:	3008      	adds	r0, #8
{
   1f8a0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f8a2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1f8a6:	05d1      	lsls	r1, r2, #23
   1f8a8:	d51d      	bpl.n	1f8e6 <release_handler+0x4a>
   1f8aa:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f8ae:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   1f8b2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f8b6:	f103 0410 	add.w	r4, r3, #16
   1f8ba:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f8bc:	f834 2b02 	ldrh.w	r2, [r4], #2
   1f8c0:	f412 7f80 	tst.w	r2, #256	; 0x100
   1f8c4:	d003      	beq.n	1f8ce <release_handler+0x32>
   1f8c6:	f3c2 2243 	ubfx	r2, r2, #9, #4
   1f8ca:	4291      	cmp	r1, r2
   1f8cc:	d00b      	beq.n	1f8e6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f8ce:	3001      	adds	r0, #1
   1f8d0:	2820      	cmp	r0, #32
   1f8d2:	d1f3      	bne.n	1f8bc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f8d4:	2200      	movs	r2, #0
   1f8d6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f8da:	480b      	ldr	r0, [pc, #44]	; (1f908 <release_handler+0x6c>)
   1f8dc:	f7ff ff90 	bl	1f800 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f8e0:	4b0a      	ldr	r3, [pc, #40]	; (1f90c <release_handler+0x70>)
   1f8e2:	4298      	cmp	r0, r3
   1f8e4:	d100      	bne.n	1f8e8 <release_handler+0x4c>
}
   1f8e6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f8e8:	4909      	ldr	r1, [pc, #36]	; (1f910 <release_handler+0x74>)
   1f8ea:	480a      	ldr	r0, [pc, #40]	; (1f914 <release_handler+0x78>)
   1f8ec:	4a0a      	ldr	r2, [pc, #40]	; (1f918 <release_handler+0x7c>)
   1f8ee:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f8f2:	f004 ff01 	bl	246f8 <printk>
}
   1f8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f8fa:	4807      	ldr	r0, [pc, #28]	; (1f918 <release_handler+0x7c>)
   1f8fc:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f900:	f005 b8eb 	b.w	24ada <assert_post_action>
   1f904:	20000548 	.word	0x20000548
   1f908:	2000059c 	.word	0x2000059c
   1f90c:	0bad0000 	.word	0x0bad0000
   1f910:	0002fe9d 	.word	0x0002fe9d
   1f914:	000290f5 	.word	0x000290f5
   1f918:	0002fe39 	.word	0x0002fe39

0001f91c <pin_handler_trigger_uninit>:
{
   1f91c:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f91e:	4c0a      	ldr	r4, [pc, #40]	; (1f948 <pin_handler_trigger_uninit+0x2c>)
   1f920:	f100 0508 	add.w	r5, r0, #8
   1f924:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   1f928:	069a      	lsls	r2, r3, #26
   1f92a:	d506      	bpl.n	1f93a <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f92c:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f92e:	4a07      	ldr	r2, [pc, #28]	; (1f94c <pin_handler_trigger_uninit+0x30>)
   1f930:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f934:	2100      	movs	r1, #0
   1f936:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   1f93a:	f7ff ffaf 	bl	1f89c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f93e:	2300      	movs	r3, #0
   1f940:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f944:	bd38      	pop	{r3, r4, r5, pc}
   1f946:	bf00      	nop
   1f948:	20000548 	.word	0x20000548
   1f94c:	40006000 	.word	0x40006000

0001f950 <nrf_gpio_pin_port_decode>:
{
   1f950:	b510      	push	{r4, lr}
   1f952:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f954:	6800      	ldr	r0, [r0, #0]
   1f956:	f008 f9f4 	bl	27d42 <nrf_gpio_pin_present_check>
   1f95a:	b958      	cbnz	r0, 1f974 <nrf_gpio_pin_port_decode+0x24>
   1f95c:	4910      	ldr	r1, [pc, #64]	; (1f9a0 <nrf_gpio_pin_port_decode+0x50>)
   1f95e:	4811      	ldr	r0, [pc, #68]	; (1f9a4 <nrf_gpio_pin_port_decode+0x54>)
   1f960:	4a11      	ldr	r2, [pc, #68]	; (1f9a8 <nrf_gpio_pin_port_decode+0x58>)
   1f962:	f240 2329 	movw	r3, #553	; 0x229
   1f966:	f004 fec7 	bl	246f8 <printk>
   1f96a:	480f      	ldr	r0, [pc, #60]	; (1f9a8 <nrf_gpio_pin_port_decode+0x58>)
   1f96c:	f240 2129 	movw	r1, #553	; 0x229
   1f970:	f005 f8b3 	bl	24ada <assert_post_action>
    uint32_t pin_number = *p_pin;
   1f974:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1f976:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f97a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1f97c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f97e:	d00b      	beq.n	1f998 <nrf_gpio_pin_port_decode+0x48>
            NRFX_ASSERT(0);
   1f980:	490a      	ldr	r1, [pc, #40]	; (1f9ac <nrf_gpio_pin_port_decode+0x5c>)
   1f982:	4808      	ldr	r0, [pc, #32]	; (1f9a4 <nrf_gpio_pin_port_decode+0x54>)
   1f984:	4a08      	ldr	r2, [pc, #32]	; (1f9a8 <nrf_gpio_pin_port_decode+0x58>)
   1f986:	f240 232e 	movw	r3, #558	; 0x22e
   1f98a:	f004 feb5 	bl	246f8 <printk>
   1f98e:	4806      	ldr	r0, [pc, #24]	; (1f9a8 <nrf_gpio_pin_port_decode+0x58>)
   1f990:	f240 212e 	movw	r1, #558	; 0x22e
   1f994:	f005 f8a1 	bl	24ada <assert_post_action>
}
   1f998:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1f99c:	bd10      	pop	{r4, pc}
   1f99e:	bf00      	nop
   1f9a0:	0002f77e 	.word	0x0002f77e
   1f9a4:	000290f5 	.word	0x000290f5
   1f9a8:	0002f74b 	.word	0x0002f74b
   1f9ac:	0002cf26 	.word	0x0002cf26

0001f9b0 <nrfx_gpiote_input_configure>:
{
   1f9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9b2:	4604      	mov	r4, r0
   1f9b4:	b085      	sub	sp, #20
   1f9b6:	4617      	mov	r7, r2
   1f9b8:	461d      	mov	r5, r3
    if (p_input_config)
   1f9ba:	b1f1      	cbz	r1, 1f9fa <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   1f9bc:	f7ff ff42 	bl	1f844 <pin_is_task_output>
   1f9c0:	b110      	cbz	r0, 1f9c8 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   1f9c2:	484a      	ldr	r0, [pc, #296]	; (1faec <nrfx_gpiote_input_configure+0x13c>)
}
   1f9c4:	b005      	add	sp, #20
   1f9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f9c8:	460b      	mov	r3, r1
   1f9ca:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f9ce:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f9d2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f9d6:	f10d 020f 	add.w	r2, sp, #15
   1f9da:	f10d 010e 	add.w	r1, sp, #14
   1f9de:	4620      	mov	r0, r4
   1f9e0:	f008 f9bf 	bl	27d62 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f9e4:	4a42      	ldr	r2, [pc, #264]	; (1faf0 <nrfx_gpiote_input_configure+0x140>)
   1f9e6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f9ea:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f9ee:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f9f2:	f043 0301 	orr.w	r3, r3, #1
   1f9f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f9fa:	b197      	cbz	r7, 1fa22 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f9fc:	4b3c      	ldr	r3, [pc, #240]	; (1faf0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f9fe:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1fa00:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fa02:	f104 0008 	add.w	r0, r4, #8
   1fa06:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1fa0a:	078f      	lsls	r7, r1, #30
   1fa0c:	d50c      	bpl.n	1fa28 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   1fa0e:	2a00      	cmp	r2, #0
   1fa10:	d1d7      	bne.n	1f9c2 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1fa12:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1fa16:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1fa1a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1fa1e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   1fa22:	bbcd      	cbnz	r5, 1fa98 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   1fa24:	4833      	ldr	r0, [pc, #204]	; (1faf4 <nrfx_gpiote_input_configure+0x144>)
   1fa26:	e7cd      	b.n	1f9c4 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1fa28:	f021 0120 	bic.w	r1, r1, #32
   1fa2c:	04c9      	lsls	r1, r1, #19
   1fa2e:	0cc9      	lsrs	r1, r1, #19
   1fa30:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   1fa34:	2a00      	cmp	r2, #0
   1fa36:	d0ec      	beq.n	1fa12 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   1fa38:	2e03      	cmp	r6, #3
   1fa3a:	d8c2      	bhi.n	1f9c2 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1fa3c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1fa3e:	b92e      	cbnz	r6, 1fa4c <nrfx_gpiote_input_configure+0x9c>
   1fa40:	4a2d      	ldr	r2, [pc, #180]	; (1faf8 <nrfx_gpiote_input_configure+0x148>)
   1fa42:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1fa46:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1fa4a:	e7e2      	b.n	1fa12 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fa4c:	00ba      	lsls	r2, r7, #2
   1fa4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1fa52:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fa56:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1fa5a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1fa5e:	f02c 0c03 	bic.w	ip, ip, #3
   1fa62:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1fa66:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1fa6a:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   1fa6e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   1fa72:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fa76:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1fa7a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   1fa7e:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   1fa82:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1fa86:	ea4c 0c0e 	orr.w	ip, ip, lr
   1fa8a:	f041 0120 	orr.w	r1, r1, #32
   1fa8e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   1fa92:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1fa96:	e7bc      	b.n	1fa12 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1fa98:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1fa9c:	4620      	mov	r0, r4
   1fa9e:	f7ff fefd 	bl	1f89c <release_handler>
    if (!handler)
   1faa2:	2e00      	cmp	r6, #0
   1faa4:	d0be      	beq.n	1fa24 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1faa6:	4d12      	ldr	r5, [pc, #72]	; (1faf0 <nrfx_gpiote_input_configure+0x140>)
   1faa8:	682b      	ldr	r3, [r5, #0]
   1faaa:	429e      	cmp	r6, r3
   1faac:	d104      	bne.n	1fab8 <nrfx_gpiote_input_configure+0x108>
   1faae:	686b      	ldr	r3, [r5, #4]
   1fab0:	429f      	cmp	r7, r3
   1fab2:	d101      	bne.n	1fab8 <nrfx_gpiote_input_configure+0x108>
   1fab4:	2200      	movs	r2, #0
   1fab6:	e00a      	b.n	1face <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1fab8:	4810      	ldr	r0, [pc, #64]	; (1fafc <nrfx_gpiote_input_configure+0x14c>)
   1faba:	f10d 010f 	add.w	r1, sp, #15
   1fabe:	f7ff fe7b 	bl	1f7b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1fac2:	4b0c      	ldr	r3, [pc, #48]	; (1faf4 <nrfx_gpiote_input_configure+0x144>)
   1fac4:	4298      	cmp	r0, r3
   1fac6:	f47f af7d 	bne.w	1f9c4 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   1faca:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1face:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1fad2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1fad6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1fad8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1fada:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1fade:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1fae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1fae6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1faea:	e79b      	b.n	1fa24 <nrfx_gpiote_input_configure+0x74>
   1faec:	0bad0004 	.word	0x0bad0004
   1faf0:	20000548 	.word	0x20000548
   1faf4:	0bad0000 	.word	0x0bad0000
   1faf8:	40006000 	.word	0x40006000
   1fafc:	2000059c 	.word	0x2000059c

0001fb00 <nrfx_gpiote_output_configure>:
{
   1fb00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb02:	4604      	mov	r4, r0
   1fb04:	b085      	sub	sp, #20
   1fb06:	4615      	mov	r5, r2
    if (p_config)
   1fb08:	b309      	cbz	r1, 1fb4e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fb0a:	f100 0708 	add.w	r7, r0, #8
   1fb0e:	4e31      	ldr	r6, [pc, #196]	; (1fbd4 <nrfx_gpiote_output_configure+0xd4>)
   1fb10:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1fb14:	0798      	lsls	r0, r3, #30
   1fb16:	d401      	bmi.n	1fb1c <nrfx_gpiote_output_configure+0x1c>
   1fb18:	069a      	lsls	r2, r3, #26
   1fb1a:	d458      	bmi.n	1fbce <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1fb1c:	f013 0f1c 	tst.w	r3, #28
   1fb20:	d002      	beq.n	1fb28 <nrfx_gpiote_output_configure+0x28>
   1fb22:	784b      	ldrb	r3, [r1, #1]
   1fb24:	2b01      	cmp	r3, #1
   1fb26:	d052      	beq.n	1fbce <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1fb28:	2301      	movs	r3, #1
   1fb2a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1fb2e:	2300      	movs	r3, #0
   1fb30:	e9cd 1300 	strd	r1, r3, [sp]
   1fb34:	1c4a      	adds	r2, r1, #1
   1fb36:	1c8b      	adds	r3, r1, #2
   1fb38:	4620      	mov	r0, r4
   1fb3a:	f10d 010f 	add.w	r1, sp, #15
   1fb3e:	f008 f910 	bl	27d62 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1fb42:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1fb46:	f043 0303 	orr.w	r3, r3, #3
   1fb4a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1fb4e:	b915      	cbnz	r5, 1fb56 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   1fb50:	4821      	ldr	r0, [pc, #132]	; (1fbd8 <nrfx_gpiote_output_configure+0xd8>)
}
   1fb52:	b005      	add	sp, #20
   1fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1fb56:	4e1f      	ldr	r6, [pc, #124]	; (1fbd4 <nrfx_gpiote_output_configure+0xd4>)
   1fb58:	f104 0708 	add.w	r7, r4, #8
   1fb5c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1fb60:	0783      	lsls	r3, r0, #30
   1fb62:	d534      	bpl.n	1fbce <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   1fb64:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1fb68:	4661      	mov	r1, ip
   1fb6a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1fb6c:	f020 0020 	bic.w	r0, r0, #32
   1fb70:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1fb74:	04c0      	lsls	r0, r0, #19
   1fb76:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1fb7a:	0cc0      	lsrs	r0, r0, #19
   1fb7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1fb80:	2300      	movs	r3, #0
   1fb82:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1fb86:	786a      	ldrb	r2, [r5, #1]
   1fb88:	2a00      	cmp	r2, #0
   1fb8a:	d0e1      	beq.n	1fb50 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1fb8c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1fb90:	78ad      	ldrb	r5, [r5, #2]
   1fb92:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1fb96:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1fb9a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fb9e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1fba2:	0223      	lsls	r3, r4, #8
   1fba4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1fba8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fbaa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1fbae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1fbb2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fbb4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1fbb6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fbba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fbbe:	432b      	orrs	r3, r5
   1fbc0:	f040 0020 	orr.w	r0, r0, #32
   1fbc4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1fbc8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1fbcc:	e7c0      	b.n	1fb50 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   1fbce:	4803      	ldr	r0, [pc, #12]	; (1fbdc <nrfx_gpiote_output_configure+0xdc>)
   1fbd0:	e7bf      	b.n	1fb52 <nrfx_gpiote_output_configure+0x52>
   1fbd2:	bf00      	nop
   1fbd4:	20000548 	.word	0x20000548
   1fbd8:	0bad0000 	.word	0x0bad0000
   1fbdc:	0bad0004 	.word	0x0bad0004

0001fbe0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1fbe0:	4b01      	ldr	r3, [pc, #4]	; (1fbe8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1fbe2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1fbe6:	4770      	bx	lr
   1fbe8:	20000548 	.word	0x20000548

0001fbec <nrfx_gpiote_channel_get>:
{
   1fbec:	b538      	push	{r3, r4, r5, lr}
   1fbee:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   1fbf0:	460d      	mov	r5, r1
   1fbf2:	b959      	cbnz	r1, 1fc0c <nrfx_gpiote_channel_get+0x20>
   1fbf4:	490b      	ldr	r1, [pc, #44]	; (1fc24 <nrfx_gpiote_channel_get+0x38>)
   1fbf6:	480c      	ldr	r0, [pc, #48]	; (1fc28 <nrfx_gpiote_channel_get+0x3c>)
   1fbf8:	4a0c      	ldr	r2, [pc, #48]	; (1fc2c <nrfx_gpiote_channel_get+0x40>)
   1fbfa:	f240 2335 	movw	r3, #565	; 0x235
   1fbfe:	f004 fd7b 	bl	246f8 <printk>
   1fc02:	480a      	ldr	r0, [pc, #40]	; (1fc2c <nrfx_gpiote_channel_get+0x40>)
   1fc04:	f240 2135 	movw	r1, #565	; 0x235
   1fc08:	f004 ff67 	bl	24ada <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fc0c:	3408      	adds	r4, #8
   1fc0e:	4b08      	ldr	r3, [pc, #32]	; (1fc30 <nrfx_gpiote_channel_get+0x44>)
   1fc10:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   1fc14:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fc16:	bf43      	ittte	mi
   1fc18:	0b5b      	lsrmi	r3, r3, #13
   1fc1a:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   1fc1c:	4805      	ldrmi	r0, [pc, #20]	; (1fc34 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   1fc1e:	4806      	ldrpl	r0, [pc, #24]	; (1fc38 <nrfx_gpiote_channel_get+0x4c>)
}
   1fc20:	bd38      	pop	{r3, r4, r5, pc}
   1fc22:	bf00      	nop
   1fc24:	0002feb1 	.word	0x0002feb1
   1fc28:	000290f5 	.word	0x000290f5
   1fc2c:	0002fe39 	.word	0x0002fe39
   1fc30:	20000548 	.word	0x20000548
   1fc34:	0bad0000 	.word	0x0bad0000
   1fc38:	0bad0004 	.word	0x0bad0004

0001fc3c <nrfx_gpiote_init>:
{
   1fc3c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1fc3e:	4c0e      	ldr	r4, [pc, #56]	; (1fc78 <nrfx_gpiote_init+0x3c>)
   1fc40:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1fc44:	b9b5      	cbnz	r5, 1fc74 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1fc46:	2240      	movs	r2, #64	; 0x40
   1fc48:	4629      	mov	r1, r5
   1fc4a:	f104 0010 	add.w	r0, r4, #16
   1fc4e:	f005 fe94 	bl	2597a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1fc52:	2006      	movs	r0, #6
   1fc54:	f7f3 fed8 	bl	13a08 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fc58:	4b08      	ldr	r3, [pc, #32]	; (1fc7c <nrfx_gpiote_init+0x40>)
    return err_code;
   1fc5a:	4809      	ldr	r0, [pc, #36]	; (1fc80 <nrfx_gpiote_init+0x44>)
   1fc5c:	601d      	str	r5, [r3, #0]
   1fc5e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1fc60:	4b08      	ldr	r3, [pc, #32]	; (1fc84 <nrfx_gpiote_init+0x48>)
   1fc62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1fc66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1fc6a:	2301      	movs	r3, #1
   1fc6c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1fc70:	6563      	str	r3, [r4, #84]	; 0x54
}
   1fc72:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1fc74:	4804      	ldr	r0, [pc, #16]	; (1fc88 <nrfx_gpiote_init+0x4c>)
   1fc76:	e7fc      	b.n	1fc72 <nrfx_gpiote_init+0x36>
   1fc78:	20000548 	.word	0x20000548
   1fc7c:	4000617c 	.word	0x4000617c
   1fc80:	0bad0000 	.word	0x0bad0000
   1fc84:	40006000 	.word	0x40006000
   1fc88:	0bad0005 	.word	0x0bad0005

0001fc8c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1fc8c:	4b03      	ldr	r3, [pc, #12]	; (1fc9c <nrfx_gpiote_is_init+0x10>)
   1fc8e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1fc92:	3800      	subs	r0, #0
   1fc94:	bf18      	it	ne
   1fc96:	2001      	movne	r0, #1
   1fc98:	4770      	bx	lr
   1fc9a:	bf00      	nop
   1fc9c:	20000548 	.word	0x20000548

0001fca0 <nrfx_gpiote_channel_free>:
{
   1fca0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1fca2:	4801      	ldr	r0, [pc, #4]	; (1fca8 <nrfx_gpiote_channel_free+0x8>)
   1fca4:	f7ff bdac 	b.w	1f800 <nrfx_flag32_free>
   1fca8:	20000598 	.word	0x20000598

0001fcac <nrfx_gpiote_channel_alloc>:
{
   1fcac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1fcae:	4801      	ldr	r0, [pc, #4]	; (1fcb4 <nrfx_gpiote_channel_alloc+0x8>)
   1fcb0:	f7ff bd82 	b.w	1f7b8 <nrfx_flag32_alloc>
   1fcb4:	20000598 	.word	0x20000598

0001fcb8 <nrfx_gpiote_trigger_enable>:
{
   1fcb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1fcba:	4d31      	ldr	r5, [pc, #196]	; (1fd80 <nrfx_gpiote_trigger_enable+0xc8>)
   1fcbc:	f100 0708 	add.w	r7, r0, #8
{
   1fcc0:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1fcc2:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   1fcc6:	f013 0f1c 	tst.w	r3, #28
{
   1fcca:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   1fccc:	d10b      	bne.n	1fce6 <nrfx_gpiote_trigger_enable+0x2e>
   1fcce:	492d      	ldr	r1, [pc, #180]	; (1fd84 <nrfx_gpiote_trigger_enable+0xcc>)
   1fcd0:	482d      	ldr	r0, [pc, #180]	; (1fd88 <nrfx_gpiote_trigger_enable+0xd0>)
   1fcd2:	4a2e      	ldr	r2, [pc, #184]	; (1fd8c <nrfx_gpiote_trigger_enable+0xd4>)
   1fcd4:	f240 33df 	movw	r3, #991	; 0x3df
   1fcd8:	f004 fd0e 	bl	246f8 <printk>
   1fcdc:	482b      	ldr	r0, [pc, #172]	; (1fd8c <nrfx_gpiote_trigger_enable+0xd4>)
   1fcde:	f240 31df 	movw	r1, #991	; 0x3df
   1fce2:	f004 fefa 	bl	24ada <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fce6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fcea:	0683      	lsls	r3, r0, #26
   1fcec:	d51f      	bpl.n	1fd2e <nrfx_gpiote_trigger_enable+0x76>
   1fcee:	f010 0302 	ands.w	r3, r0, #2
   1fcf2:	d11c      	bne.n	1fd2e <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fcf4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   1fcf6:	4608      	mov	r0, r1
   1fcf8:	f008 f82f 	bl	27d5a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   1fcfc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1fd00:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fd04:	6003      	str	r3, [r0, #0]
   1fd06:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1fd08:	008b      	lsls	r3, r1, #2
   1fd0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fd0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fd12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fd16:	f042 0201 	orr.w	r2, r2, #1
   1fd1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   1fd1e:	b126      	cbz	r6, 1fd2a <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   1fd20:	4a1b      	ldr	r2, [pc, #108]	; (1fd90 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1fd22:	2301      	movs	r3, #1
   1fd24:	408b      	lsls	r3, r1
   1fd26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1fd2a:	b003      	add	sp, #12
   1fd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   1fd2e:	b95e      	cbnz	r6, 1fd48 <nrfx_gpiote_trigger_enable+0x90>
   1fd30:	4918      	ldr	r1, [pc, #96]	; (1fd94 <nrfx_gpiote_trigger_enable+0xdc>)
   1fd32:	4815      	ldr	r0, [pc, #84]	; (1fd88 <nrfx_gpiote_trigger_enable+0xd0>)
   1fd34:	4a15      	ldr	r2, [pc, #84]	; (1fd8c <nrfx_gpiote_trigger_enable+0xd4>)
   1fd36:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1fd3a:	f004 fcdd 	bl	246f8 <printk>
   1fd3e:	4813      	ldr	r0, [pc, #76]	; (1fd8c <nrfx_gpiote_trigger_enable+0xd4>)
   1fd40:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1fd44:	f004 fec9 	bl	24ada <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fd48:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   1fd4c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1fd50:	2b04      	cmp	r3, #4
   1fd52:	d010      	beq.n	1fd76 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1fd54:	2b05      	cmp	r3, #5
   1fd56:	d010      	beq.n	1fd7a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fd58:	a801      	add	r0, sp, #4
   1fd5a:	9401      	str	r4, [sp, #4]
   1fd5c:	f7ff fdf8 	bl	1f950 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fd60:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1fd62:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fd66:	40d9      	lsrs	r1, r3
   1fd68:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fd6c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1fd6e:	4620      	mov	r0, r4
   1fd70:	f008 f842 	bl	27df8 <nrf_gpio_cfg_sense_set>
}
   1fd74:	e7d9      	b.n	1fd2a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1fd76:	2103      	movs	r1, #3
   1fd78:	e7f9      	b.n	1fd6e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1fd7a:	2102      	movs	r1, #2
   1fd7c:	e7f7      	b.n	1fd6e <nrfx_gpiote_trigger_enable+0xb6>
   1fd7e:	bf00      	nop
   1fd80:	20000548 	.word	0x20000548
   1fd84:	0002febb 	.word	0x0002febb
   1fd88:	000290f5 	.word	0x000290f5
   1fd8c:	0002fe39 	.word	0x0002fe39
   1fd90:	40006000 	.word	0x40006000
   1fd94:	0002fed0 	.word	0x0002fed0

0001fd98 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1fd98:	4b0e      	ldr	r3, [pc, #56]	; (1fdd4 <nrfx_gpiote_trigger_disable+0x3c>)
   1fd9a:	f100 0208 	add.w	r2, r0, #8
   1fd9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fda2:	0699      	lsls	r1, r3, #26
   1fda4:	d513      	bpl.n	1fdce <nrfx_gpiote_trigger_disable+0x36>
   1fda6:	079a      	lsls	r2, r3, #30
   1fda8:	d411      	bmi.n	1fdce <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fdaa:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fdac:	2201      	movs	r2, #1
   1fdae:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1fdb0:	009b      	lsls	r3, r3, #2
   1fdb2:	4909      	ldr	r1, [pc, #36]	; (1fdd8 <nrfx_gpiote_trigger_disable+0x40>)
   1fdb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fdb8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fdbc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fdc0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fdc4:	f022 0203 	bic.w	r2, r2, #3
   1fdc8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1fdcc:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fdce:	2100      	movs	r1, #0
   1fdd0:	f008 b812 	b.w	27df8 <nrf_gpio_cfg_sense_set>
   1fdd4:	20000548 	.word	0x20000548
   1fdd8:	40006000 	.word	0x40006000

0001fddc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fddc:	4b0e      	ldr	r3, [pc, #56]	; (1fe18 <nrfx_gpiote_pin_uninit+0x3c>)
   1fdde:	f100 0208 	add.w	r2, r0, #8
{
   1fde2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fde4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1fde8:	07db      	lsls	r3, r3, #31
{
   1fdea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1fdec:	d511      	bpl.n	1fe12 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1fdee:	f7ff ffd3 	bl	1fd98 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1fdf2:	4620      	mov	r0, r4
   1fdf4:	f7ff fd92 	bl	1f91c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fdf8:	a801      	add	r0, sp, #4
   1fdfa:	9401      	str	r4, [sp, #4]
   1fdfc:	f7ff fda8 	bl	1f950 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fe00:	9b01      	ldr	r3, [sp, #4]
   1fe02:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fe06:	2202      	movs	r2, #2
   1fe08:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1fe0c:	4803      	ldr	r0, [pc, #12]	; (1fe1c <nrfx_gpiote_pin_uninit+0x40>)
}
   1fe0e:	b002      	add	sp, #8
   1fe10:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fe12:	4803      	ldr	r0, [pc, #12]	; (1fe20 <nrfx_gpiote_pin_uninit+0x44>)
   1fe14:	e7fb      	b.n	1fe0e <nrfx_gpiote_pin_uninit+0x32>
   1fe16:	bf00      	nop
   1fe18:	20000548 	.word	0x20000548
   1fe1c:	0bad0000 	.word	0x0bad0000
   1fe20:	0bad0004 	.word	0x0bad0004

0001fe24 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1fe24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe28:	4b57      	ldr	r3, [pc, #348]	; (1ff88 <nrfx_gpiote_irq_handler+0x164>)
    return p_reg->INTENSET & mask;
   1fe2a:	4858      	ldr	r0, [pc, #352]	; (1ff8c <nrfx_gpiote_irq_handler+0x168>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fe2c:	4958      	ldr	r1, [pc, #352]	; (1ff90 <nrfx_gpiote_irq_handler+0x16c>)
    uint32_t status = 0;
   1fe2e:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1fe30:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fe32:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe34:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1fe36:	b135      	cbz	r5, 1fe46 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1fe38:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1fe3c:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fe3e:	bf1e      	ittt	ne
   1fe40:	601c      	strne	r4, [r3, #0]
   1fe42:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1fe44:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   1fe46:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fe48:	428b      	cmp	r3, r1
        mask <<= 1;
   1fe4a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fe4e:	d1f1      	bne.n	1fe34 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe50:	4f50      	ldr	r7, [pc, #320]	; (1ff94 <nrfx_gpiote_irq_handler+0x170>)
   1fe52:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1fe54:	b1ab      	cbz	r3, 1fe82 <nrfx_gpiote_irq_handler+0x5e>
        *p_masks = gpio_regs[i]->LATCH;
   1fe56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fe5a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fe5e:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fe60:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1fe64:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1fe68:	9c00      	ldr	r4, [sp, #0]
   1fe6a:	b964      	cbnz	r4, 1fe86 <nrfx_gpiote_irq_handler+0x62>
        *p_masks = gpio_regs[i]->LATCH;
   1fe6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fe70:	603c      	str	r4, [r7, #0]
   1fe72:	683b      	ldr	r3, [r7, #0]
   1fe74:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1fe78:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fe7a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1fe7e:	2b00      	cmp	r3, #0
   1fe80:	d1f0      	bne.n	1fe64 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   1fe82:	2401      	movs	r4, #1
   1fe84:	e07a      	b.n	1ff7c <nrfx_gpiote_irq_handler+0x158>
                uint32_t pin = NRF_CTZ(latch[i]);
   1fe86:	fa94 f4a4 	rbit	r4, r4
   1fe8a:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fe8e:	4a42      	ldr	r2, [pc, #264]	; (1ff98 <nrfx_gpiote_irq_handler+0x174>)
   1fe90:	9401      	str	r4, [sp, #4]
   1fe92:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fe96:	08e0      	lsrs	r0, r4, #3
   1fe98:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   1fe9c:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1fea0:	fa08 f103 	lsl.w	r1, r8, r3
   1fea4:	f81d 3000 	ldrb.w	r3, [sp, r0]
   1fea8:	ea23 0301 	bic.w	r3, r3, r1
   1feac:	f80d 3000 	strb.w	r3, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1feb0:	a801      	add	r0, sp, #4
   1feb2:	f7ff fd4d 	bl	1f950 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1feb6:	9b01      	ldr	r3, [sp, #4]
   1feb8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1febc:	ea4f 099b 	mov.w	r9, fp, lsr #2
   1fec0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
   1fec4:	f3cb 0a82 	ubfx	sl, fp, #2, #3
    if (is_level(trigger))
   1fec8:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fecc:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1fece:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   1fed2:	d023      	beq.n	1ff1c <nrfx_gpiote_irq_handler+0xf8>
        call_handler(pin, trigger);
   1fed4:	4651      	mov	r1, sl
   1fed6:	4620      	mov	r0, r4
   1fed8:	f7ff fcc2 	bl	1f860 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fedc:	a801      	add	r0, sp, #4
   1fede:	9401      	str	r4, [sp, #4]
   1fee0:	f7ff fd36 	bl	1f950 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fee4:	9b01      	ldr	r3, [sp, #4]
   1fee6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1feea:	b2ed      	uxtb	r5, r5
   1feec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1fef0:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1fef4:	429d      	cmp	r5, r3
   1fef6:	d107      	bne.n	1ff08 <nrfx_gpiote_irq_handler+0xe4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fef8:	2100      	movs	r1, #0
   1fefa:	4620      	mov	r0, r4
   1fefc:	f007 ff7c 	bl	27df8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ff00:	4629      	mov	r1, r5
   1ff02:	4620      	mov	r0, r4
   1ff04:	f007 ff78 	bl	27df8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ff08:	a801      	add	r0, sp, #4
   1ff0a:	9401      	str	r4, [sp, #4]
   1ff0c:	f7ff fd20 	bl	1f950 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ff10:	9b01      	ldr	r3, [sp, #4]
   1ff12:	fa08 f303 	lsl.w	r3, r8, r3
   1ff16:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1ff1a:	e7a5      	b.n	1fe68 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ff1c:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ff1e:	bf0c      	ite	eq
   1ff20:	2103      	moveq	r1, #3
   1ff22:	2102      	movne	r1, #2
   1ff24:	4620      	mov	r0, r4
   1ff26:	f007 ff67 	bl	27df8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ff2a:	f1ba 0f03 	cmp.w	sl, #3
   1ff2e:	d004      	beq.n	1ff3a <nrfx_gpiote_irq_handler+0x116>
   1ff30:	2d02      	cmp	r5, #2
   1ff32:	d107      	bne.n	1ff44 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ff34:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ff38:	d1e6      	bne.n	1ff08 <nrfx_gpiote_irq_handler+0xe4>
            call_handler(pin, trigger);
   1ff3a:	4659      	mov	r1, fp
   1ff3c:	4620      	mov	r0, r4
   1ff3e:	f7ff fc8f 	bl	1f860 <call_handler>
   1ff42:	e7e1      	b.n	1ff08 <nrfx_gpiote_irq_handler+0xe4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ff44:	2d03      	cmp	r5, #3
   1ff46:	d1df      	bne.n	1ff08 <nrfx_gpiote_irq_handler+0xe4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ff48:	f1ba 0f02 	cmp.w	sl, #2
   1ff4c:	e7f4      	b.n	1ff38 <nrfx_gpiote_irq_handler+0x114>
        uint32_t ch = NRF_CTZ(mask);
   1ff4e:	fa96 f3a6 	rbit	r3, r6
   1ff52:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1ff56:	fa04 f203 	lsl.w	r2, r4, r3
   1ff5a:	009b      	lsls	r3, r3, #2
   1ff5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ff60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1ff64:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ff68:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1ff6c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1ff70:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1ff74:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1ff78:	f7ff fc72 	bl	1f860 <call_handler>
    while (mask)
   1ff7c:	2e00      	cmp	r6, #0
   1ff7e:	d1e6      	bne.n	1ff4e <nrfx_gpiote_irq_handler+0x12a>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1ff80:	b003      	add	sp, #12
   1ff82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff86:	bf00      	nop
   1ff88:	40006100 	.word	0x40006100
   1ff8c:	40006000 	.word	0x40006000
   1ff90:	40006120 	.word	0x40006120
   1ff94:	4000617c 	.word	0x4000617c
   1ff98:	20000548 	.word	0x20000548

0001ff9c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1ff9c:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   1ff9e:	2100      	movs	r1, #0
{
   1ffa0:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   1ffa2:	f007 ff38 	bl	27e16 <is_valid_address>
   1ffa6:	b958      	cbnz	r0, 1ffc0 <nrfx_nvmc_page_erase+0x24>
   1ffa8:	4912      	ldr	r1, [pc, #72]	; (1fff4 <nrfx_nvmc_page_erase+0x58>)
   1ffaa:	4813      	ldr	r0, [pc, #76]	; (1fff8 <nrfx_nvmc_page_erase+0x5c>)
   1ffac:	4a13      	ldr	r2, [pc, #76]	; (1fffc <nrfx_nvmc_page_erase+0x60>)
   1ffae:	f44f 7383 	mov.w	r3, #262	; 0x106
   1ffb2:	f004 fba1 	bl	246f8 <printk>
   1ffb6:	4811      	ldr	r0, [pc, #68]	; (1fffc <nrfx_nvmc_page_erase+0x60>)
   1ffb8:	f44f 7183 	mov.w	r1, #262	; 0x106
   1ffbc:	f004 fd8d 	bl	24ada <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1ffc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ffc4:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1ffc6:	fbb4 f3f2 	udiv	r3, r4, r2
   1ffca:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1ffce:	b973      	cbnz	r3, 1ffee <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1ffd0:	4b0b      	ldr	r3, [pc, #44]	; (20000 <nrfx_nvmc_page_erase+0x64>)
   1ffd2:	2202      	movs	r2, #2
   1ffd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1ffd8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1ffdc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1ffe0:	07d2      	lsls	r2, r2, #31
   1ffe2:	d5fb      	bpl.n	1ffdc <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
   1ffe4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1ffe6:	4807      	ldr	r0, [pc, #28]	; (20004 <nrfx_nvmc_page_erase+0x68>)
   1ffe8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1ffec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1ffee:	4806      	ldr	r0, [pc, #24]	; (20008 <nrfx_nvmc_page_erase+0x6c>)
   1fff0:	e7fc      	b.n	1ffec <nrfx_nvmc_page_erase+0x50>
   1fff2:	bf00      	nop
   1fff4:	0002ff37 	.word	0x0002ff37
   1fff8:	000290f5 	.word	0x000290f5
   1fffc:	0002fedb 	.word	0x0002fedb
   20000:	4001e000 	.word	0x4001e000
   20004:	0bad0000 	.word	0x0bad0000
   20008:	0bad000a 	.word	0x0bad000a

0002000c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2000c:	b538      	push	{r3, r4, r5, lr}
   2000e:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   20010:	2101      	movs	r1, #1
{
   20012:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   20014:	f007 feff 	bl	27e16 <is_valid_address>
   20018:	b958      	cbnz	r0, 20032 <nrfx_nvmc_word_write+0x26>
   2001a:	4914      	ldr	r1, [pc, #80]	; (2006c <nrfx_nvmc_word_write+0x60>)
   2001c:	4814      	ldr	r0, [pc, #80]	; (20070 <nrfx_nvmc_word_write+0x64>)
   2001e:	4a15      	ldr	r2, [pc, #84]	; (20074 <nrfx_nvmc_word_write+0x68>)
   20020:	f44f 73ca 	mov.w	r3, #404	; 0x194
   20024:	f004 fb68 	bl	246f8 <printk>
   20028:	4812      	ldr	r0, [pc, #72]	; (20074 <nrfx_nvmc_word_write+0x68>)
   2002a:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2002e:	f004 fd54 	bl	24ada <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   20032:	07a1      	lsls	r1, r4, #30
   20034:	d00b      	beq.n	2004e <nrfx_nvmc_word_write+0x42>
   20036:	4910      	ldr	r1, [pc, #64]	; (20078 <nrfx_nvmc_word_write+0x6c>)
   20038:	480d      	ldr	r0, [pc, #52]	; (20070 <nrfx_nvmc_word_write+0x64>)
   2003a:	4a0e      	ldr	r2, [pc, #56]	; (20074 <nrfx_nvmc_word_write+0x68>)
   2003c:	f240 1395 	movw	r3, #405	; 0x195
   20040:	f004 fb5a 	bl	246f8 <printk>
   20044:	480b      	ldr	r0, [pc, #44]	; (20074 <nrfx_nvmc_word_write+0x68>)
   20046:	f240 1195 	movw	r1, #405	; 0x195
   2004a:	f004 fd46 	bl	24ada <assert_post_action>
   2004e:	4b0b      	ldr	r3, [pc, #44]	; (2007c <nrfx_nvmc_word_write+0x70>)
   20050:	2201      	movs	r2, #1
   20052:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20056:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2005a:	07d2      	lsls	r2, r2, #31
   2005c:	d5fb      	bpl.n	20056 <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   2005e:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   20060:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   20064:	2200      	movs	r2, #0
   20066:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2006a:	bd38      	pop	{r3, r4, r5, pc}
   2006c:	0002ff51 	.word	0x0002ff51
   20070:	000290f5 	.word	0x000290f5
   20074:	0002fedb 	.word	0x0002fedb
   20078:	0002ff6b 	.word	0x0002ff6b
   2007c:	4001e000 	.word	0x4001e000

00020080 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   20080:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   20082:	4801      	ldr	r0, [pc, #4]	; (20088 <nrfx_ppi_channel_alloc+0x8>)
   20084:	f7ff bb98 	b.w	1f7b8 <nrfx_flag32_alloc>
   20088:	200005a4 	.word	0x200005a4

0002008c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2008c:	6803      	ldr	r3, [r0, #0]
    switch (port)
   2008e:	095a      	lsrs	r2, r3, #5
   20090:	bf0c      	ite	eq
   20092:	f04f 32ff 	moveq.w	r2, #4294967295
   20096:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   20098:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2009c:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   200a0:	07db      	lsls	r3, r3, #31
{
   200a2:	b510      	push	{r4, lr}
   200a4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   200a6:	d40b      	bmi.n	200c0 <nrf_gpio_pin_port_decode+0x34>
   200a8:	4910      	ldr	r1, [pc, #64]	; (200ec <nrf_gpio_pin_port_decode+0x60>)
   200aa:	4811      	ldr	r0, [pc, #68]	; (200f0 <nrf_gpio_pin_port_decode+0x64>)
   200ac:	4a11      	ldr	r2, [pc, #68]	; (200f4 <nrf_gpio_pin_port_decode+0x68>)
   200ae:	f240 2329 	movw	r3, #553	; 0x229
   200b2:	f004 fb21 	bl	246f8 <printk>
   200b6:	480f      	ldr	r0, [pc, #60]	; (200f4 <nrf_gpio_pin_port_decode+0x68>)
   200b8:	f240 2129 	movw	r1, #553	; 0x229
   200bc:	f004 fd0d 	bl	24ada <assert_post_action>
    uint32_t pin_number = *p_pin;
   200c0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   200c2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200c6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   200c8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200ca:	d00b      	beq.n	200e4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   200cc:	490a      	ldr	r1, [pc, #40]	; (200f8 <nrf_gpio_pin_port_decode+0x6c>)
   200ce:	4808      	ldr	r0, [pc, #32]	; (200f0 <nrf_gpio_pin_port_decode+0x64>)
   200d0:	4a08      	ldr	r2, [pc, #32]	; (200f4 <nrf_gpio_pin_port_decode+0x68>)
   200d2:	f240 232e 	movw	r3, #558	; 0x22e
   200d6:	f004 fb0f 	bl	246f8 <printk>
   200da:	4806      	ldr	r0, [pc, #24]	; (200f4 <nrf_gpio_pin_port_decode+0x68>)
   200dc:	f240 212e 	movw	r1, #558	; 0x22e
   200e0:	f004 fcfb 	bl	24ada <assert_post_action>
}
   200e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   200e8:	bd10      	pop	{r4, pc}
   200ea:	bf00      	nop
   200ec:	0002f77e 	.word	0x0002f77e
   200f0:	000290f5 	.word	0x000290f5
   200f4:	0002f74b 	.word	0x0002f74b
   200f8:	0002cf26 	.word	0x0002cf26

000200fc <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   200fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   200fe:	4b34      	ldr	r3, [pc, #208]	; (201d0 <twi_rx_start_transfer+0xd4>)
   20100:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20102:	2300      	movs	r3, #0
   20104:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   20108:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   2010c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   20110:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   20114:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   20118:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   2011c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   20120:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   20124:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   20126:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2012a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   2012c:	2b01      	cmp	r3, #1
{
   2012e:	4604      	mov	r4, r0
   20130:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   20132:	d117      	bne.n	20164 <twi_rx_start_transfer+0x68>
   20134:	6a0b      	ldr	r3, [r1, #32]
   20136:	065b      	lsls	r3, r3, #25
   20138:	d414      	bmi.n	20164 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   2013a:	2302      	movs	r3, #2
   2013c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20140:	2301      	movs	r3, #1
   20142:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   20144:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   20148:	2a02      	cmp	r2, #2
   2014a:	bf18      	it	ne
   2014c:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   2014e:	682b      	ldr	r3, [r5, #0]
   20150:	b193      	cbz	r3, 20178 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   20152:	f240 2386 	movw	r3, #646	; 0x286
   20156:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   20158:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   2015a:	481e      	ldr	r0, [pc, #120]	; (201d4 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   2015c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   20160:	b003      	add	sp, #12
   20162:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   20164:	2301      	movs	r3, #1
   20166:	e7e9      	b.n	2013c <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   20168:	4629      	mov	r1, r5
   2016a:	4620      	mov	r0, r4
   2016c:	f007 fe93 	bl	27e96 <twi_transfer>
        while ((hw_timeout > 0) &&
   20170:	b128      	cbz	r0, 2017e <twi_rx_start_transfer+0x82>
               hw_timeout--;
   20172:	9b01      	ldr	r3, [sp, #4]
   20174:	3b01      	subs	r3, #1
   20176:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   20178:	9b01      	ldr	r3, [sp, #4]
   2017a:	2b00      	cmp	r3, #0
   2017c:	dcf4      	bgt.n	20168 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   2017e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   20182:	b95b      	cbnz	r3, 2019c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   20184:	4813      	ldr	r0, [pc, #76]	; (201d4 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   20186:	9b01      	ldr	r3, [sp, #4]
   20188:	2b00      	cmp	r3, #0
   2018a:	dce9      	bgt.n	20160 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2018c:	2300      	movs	r3, #0
   2018e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   20192:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   20194:	4810      	ldr	r0, [pc, #64]	; (201d8 <twi_rx_start_transfer+0xdc>)
   20196:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   2019a:	e7e1      	b.n	20160 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   2019c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   201a0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   201a4:	b18b      	cbz	r3, 201ca <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   201a6:	4a0d      	ldr	r2, [pc, #52]	; (201dc <twi_rx_start_transfer+0xe0>)
   201a8:	480b      	ldr	r0, [pc, #44]	; (201d8 <twi_rx_start_transfer+0xdc>)
   201aa:	f013 0f01 	tst.w	r3, #1
   201ae:	bf18      	it	ne
   201b0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   201b2:	f013 0f02 	tst.w	r3, #2
   201b6:	f102 0201 	add.w	r2, r2, #1
   201ba:	bf18      	it	ne
   201bc:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   201be:	f013 0f04 	tst.w	r3, #4
   201c2:	4b07      	ldr	r3, [pc, #28]	; (201e0 <twi_rx_start_transfer+0xe4>)
   201c4:	bf18      	it	ne
   201c6:	4618      	movne	r0, r3
   201c8:	e7dd      	b.n	20186 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   201ca:	4803      	ldr	r0, [pc, #12]	; (201d8 <twi_rx_start_transfer+0xdc>)
   201cc:	e7db      	b.n	20186 <twi_rx_start_transfer+0x8a>
   201ce:	bf00      	nop
   201d0:	000186a0 	.word	0x000186a0
   201d4:	0bad0000 	.word	0x0bad0000
   201d8:	0bad0001 	.word	0x0bad0001
   201dc:	0bae0000 	.word	0x0bae0000
   201e0:	0bae0002 	.word	0x0bae0002

000201e4 <twi_tx_start_transfer>:
{
   201e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   201e6:	4b30      	ldr	r3, [pc, #192]	; (202a8 <twi_tx_start_transfer+0xc4>)
   201e8:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201ea:	2300      	movs	r3, #0
   201ec:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   201f0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   201f4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   201f8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   201fc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   20200:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   20204:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   20208:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
   2020c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   20210:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   20212:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20216:	2301      	movs	r3, #1
   20218:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   2021a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   2021e:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   20220:	429a      	cmp	r2, r3
   20222:	bf18      	it	ne
   20224:	6083      	strne	r3, [r0, #8]
{
   20226:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   20228:	f007 fe18 	bl	27e5c <twi_send_byte>
    if (p_cb->handler)
   2022c:	682b      	ldr	r3, [r5, #0]
   2022e:	b183      	cbz	r3, 20252 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   20230:	f240 2386 	movw	r3, #646	; 0x286
   20234:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   20236:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   20238:	481c      	ldr	r0, [pc, #112]	; (202ac <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   2023a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2023e:	b003      	add	sp, #12
   20240:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   20242:	4629      	mov	r1, r5
   20244:	4620      	mov	r0, r4
   20246:	f007 fe26 	bl	27e96 <twi_transfer>
        while ((hw_timeout > 0) &&
   2024a:	b128      	cbz	r0, 20258 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   2024c:	9b01      	ldr	r3, [sp, #4]
   2024e:	3b01      	subs	r3, #1
   20250:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   20252:	9b01      	ldr	r3, [sp, #4]
   20254:	2b00      	cmp	r3, #0
   20256:	dcf4      	bgt.n	20242 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   20258:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   2025c:	b95b      	cbnz	r3, 20276 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   2025e:	4813      	ldr	r0, [pc, #76]	; (202ac <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   20260:	9b01      	ldr	r3, [sp, #4]
   20262:	2b00      	cmp	r3, #0
   20264:	dceb      	bgt.n	2023e <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   20266:	2300      	movs	r3, #0
   20268:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2026c:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   2026e:	4810      	ldr	r0, [pc, #64]	; (202b0 <twi_tx_start_transfer+0xcc>)
   20270:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   20274:	e7e3      	b.n	2023e <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   20276:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2027a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   2027e:	b18b      	cbz	r3, 202a4 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   20280:	4a0c      	ldr	r2, [pc, #48]	; (202b4 <twi_tx_start_transfer+0xd0>)
   20282:	480b      	ldr	r0, [pc, #44]	; (202b0 <twi_tx_start_transfer+0xcc>)
   20284:	f013 0f01 	tst.w	r3, #1
   20288:	bf18      	it	ne
   2028a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2028c:	f013 0f02 	tst.w	r3, #2
   20290:	f102 0201 	add.w	r2, r2, #1
   20294:	bf18      	it	ne
   20296:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   20298:	f013 0f04 	tst.w	r3, #4
   2029c:	4b06      	ldr	r3, [pc, #24]	; (202b8 <twi_tx_start_transfer+0xd4>)
   2029e:	bf18      	it	ne
   202a0:	4618      	movne	r0, r3
   202a2:	e7dd      	b.n	20260 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   202a4:	4802      	ldr	r0, [pc, #8]	; (202b0 <twi_tx_start_transfer+0xcc>)
   202a6:	e7db      	b.n	20260 <twi_tx_start_transfer+0x7c>
   202a8:	000186a0 	.word	0x000186a0
   202ac:	0bad0000 	.word	0x0bad0000
   202b0:	0bad0001 	.word	0x0bad0001
   202b4:	0bae0000 	.word	0x0bae0000
   202b8:	0bae0002 	.word	0x0bae0002

000202bc <nrfx_twi_init>:
{
   202bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   202c0:	4607      	mov	r7, r0
   202c2:	4691      	mov	r9, r2
   202c4:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   202c6:	460c      	mov	r4, r1
   202c8:	b949      	cbnz	r1, 202de <nrfx_twi_init+0x22>
   202ca:	492e      	ldr	r1, [pc, #184]	; (20384 <nrfx_twi_init+0xc8>)
   202cc:	482e      	ldr	r0, [pc, #184]	; (20388 <nrfx_twi_init+0xcc>)
   202ce:	4a2f      	ldr	r2, [pc, #188]	; (2038c <nrfx_twi_init+0xd0>)
   202d0:	23a4      	movs	r3, #164	; 0xa4
   202d2:	f004 fa11 	bl	246f8 <printk>
   202d6:	482d      	ldr	r0, [pc, #180]	; (2038c <nrfx_twi_init+0xd0>)
   202d8:	21a4      	movs	r1, #164	; 0xa4
   202da:	f004 fbfe 	bl	24ada <assert_post_action>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   202de:	793e      	ldrb	r6, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   202e0:	4d2b      	ldr	r5, [pc, #172]	; (20390 <nrfx_twi_init+0xd4>)
   202e2:	233c      	movs	r3, #60	; 0x3c
   202e4:	4373      	muls	r3, r6
   202e6:	18e9      	adds	r1, r5, r3
   202e8:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
   202ec:	2800      	cmp	r0, #0
   202ee:	d147      	bne.n	20380 <nrfx_twi_init+0xc4>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   202f0:	f8d7 a000 	ldr.w	sl, [r7]
    p_cb->handler         = event_handler;
   202f4:	f845 9003 	str.w	r9, [r5, r3]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   202f8:	7b63      	ldrb	r3, [r4, #13]
   202fa:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   202fe:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   20300:	6088      	str	r0, [r1, #8]
    p_cb->p_context       = p_context;
   20302:	f8c1 8004 	str.w	r8, [r1, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   20306:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
    p_cb->repeated        = false;
   2030a:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    p_cb->busy            = false;
   2030e:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   20312:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   20316:	b9ab      	cbnz	r3, 20344 <nrfx_twi_init+0x88>
        TWI_PIN_INIT(p_config->scl);
   20318:	6823      	ldr	r3, [r4, #0]
   2031a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2031c:	a801      	add	r0, sp, #4
   2031e:	f7ff feb5 	bl	2008c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20322:	9b01      	ldr	r3, [sp, #4]
   20324:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20328:	f240 680c 	movw	r8, #1548	; 0x60c
   2032c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   20330:	6863      	ldr	r3, [r4, #4]
   20332:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20334:	a801      	add	r0, sp, #4
   20336:	f7ff fea9 	bl	2008c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2033a:	9b01      	ldr	r3, [sp, #4]
   2033c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20340:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20344:	7be3      	ldrb	r3, [r4, #15]
   20346:	b92b      	cbnz	r3, 20354 <nrfx_twi_init+0x98>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   20348:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSELSCL = scl_pin;
   2034c:	f8ca 2508 	str.w	r2, [sl, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
   20350:	f8ca 350c 	str.w	r3, [sl, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   20354:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   20356:	f8ca 3524 	str.w	r3, [sl, #1316]	; 0x524
    if (p_cb->handler)
   2035a:	233c      	movs	r3, #60	; 0x3c
   2035c:	4373      	muls	r3, r6
   2035e:	58eb      	ldr	r3, [r5, r3]
   20360:	b123      	cbz	r3, 2036c <nrfx_twi_init+0xb0>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   20362:	6838      	ldr	r0, [r7, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   20364:	f340 3007 	sbfx	r0, r0, #12, #8
   20368:	f7f3 fb4e 	bl	13a08 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2036c:	233c      	movs	r3, #60	; 0x3c
   2036e:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   20372:	4808      	ldr	r0, [pc, #32]	; (20394 <nrfx_twi_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20374:	2301      	movs	r3, #1
   20376:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   2037a:	b002      	add	sp, #8
   2037c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   20380:	4805      	ldr	r0, [pc, #20]	; (20398 <nrfx_twi_init+0xdc>)
   20382:	e7fa      	b.n	2037a <nrfx_twi_init+0xbe>
   20384:	0002ffcf 	.word	0x0002ffcf
   20388:	000290f5 	.word	0x000290f5
   2038c:	0002ff94 	.word	0x0002ff94
   20390:	20002424 	.word	0x20002424
   20394:	0bad0000 	.word	0x0bad0000
   20398:	0bad0005 	.word	0x0bad0005

0002039c <nrfx_twi_enable>:
{
   2039c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2039e:	4d10      	ldr	r5, [pc, #64]	; (203e0 <nrfx_twi_enable+0x44>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   203a0:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   203a2:	223c      	movs	r2, #60	; 0x3c
   203a4:	fb02 5204 	mla	r2, r2, r4, r5
{
   203a8:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   203aa:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
   203ae:	2a01      	cmp	r2, #1
   203b0:	d00b      	beq.n	203ca <nrfx_twi_enable+0x2e>
   203b2:	490c      	ldr	r1, [pc, #48]	; (203e4 <nrfx_twi_enable+0x48>)
   203b4:	480c      	ldr	r0, [pc, #48]	; (203e8 <nrfx_twi_enable+0x4c>)
   203b6:	4a0d      	ldr	r2, [pc, #52]	; (203ec <nrfx_twi_enable+0x50>)
   203b8:	f240 130b 	movw	r3, #267	; 0x10b
   203bc:	f004 f99c 	bl	246f8 <printk>
   203c0:	480a      	ldr	r0, [pc, #40]	; (203ec <nrfx_twi_enable+0x50>)
   203c2:	f240 110b 	movw	r1, #267	; 0x10b
   203c6:	f004 fb88 	bl	24ada <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   203ca:	6833      	ldr	r3, [r6, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   203cc:	2205      	movs	r2, #5
   203ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   203d2:	233c      	movs	r3, #60	; 0x3c
   203d4:	fb03 5404 	mla	r4, r3, r4, r5
   203d8:	2302      	movs	r3, #2
   203da:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   203de:	bd70      	pop	{r4, r5, r6, pc}
   203e0:	20002424 	.word	0x20002424
   203e4:	0002ffd8 	.word	0x0002ffd8
   203e8:	000290f5 	.word	0x000290f5
   203ec:	0002ff94 	.word	0x0002ff94

000203f0 <nrfx_twi_disable>:
{
   203f0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   203f2:	4e15      	ldr	r6, [pc, #84]	; (20448 <nrfx_twi_disable+0x58>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   203f4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   203f6:	233c      	movs	r3, #60	; 0x3c
   203f8:	fb03 6304 	mla	r3, r3, r4, r6
{
   203fc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   203fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   20402:	b95b      	cbnz	r3, 2041c <nrfx_twi_disable+0x2c>
   20404:	4911      	ldr	r1, [pc, #68]	; (2044c <nrfx_twi_disable+0x5c>)
   20406:	4812      	ldr	r0, [pc, #72]	; (20450 <nrfx_twi_disable+0x60>)
   20408:	4a12      	ldr	r2, [pc, #72]	; (20454 <nrfx_twi_disable+0x64>)
   2040a:	f240 1317 	movw	r3, #279	; 0x117
   2040e:	f004 f973 	bl	246f8 <printk>
   20412:	4810      	ldr	r0, [pc, #64]	; (20454 <nrfx_twi_disable+0x64>)
   20414:	f240 1117 	movw	r1, #279	; 0x117
   20418:	f004 fb5f 	bl	24ada <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   2041c:	682b      	ldr	r3, [r5, #0]
    p_reg->INTENCLR = mask;
   2041e:	4a0e      	ldr	r2, [pc, #56]	; (20458 <nrfx_twi_disable+0x68>)
   20420:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   20424:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20428:	f022 0203 	bic.w	r2, r2, #3
   2042c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   20430:	2200      	movs	r2, #0
   20432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20436:	233c      	movs	r3, #60	; 0x3c
   20438:	fb03 6404 	mla	r4, r3, r4, r6
   2043c:	2301      	movs	r3, #1
   2043e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    p_cb->busy = false;
   20442:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
}
   20446:	bd70      	pop	{r4, r5, r6, pc}
   20448:	20002424 	.word	0x20002424
   2044c:	00030002 	.word	0x00030002
   20450:	000290f5 	.word	0x000290f5
   20454:	0002ff94 	.word	0x0002ff94
   20458:	00044286 	.word	0x00044286

0002045c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   2045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20460:	f890 8004 	ldrb.w	r8, [r0, #4]

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   20464:	4d47      	ldr	r5, [pc, #284]	; (20584 <nrfx_twi_xfer+0x128>)
   20466:	f04f 093c 	mov.w	r9, #60	; 0x3c
   2046a:	fb09 f908 	mul.w	r9, r9, r8
{
   2046e:	4606      	mov	r6, r0
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   20470:	f855 3009 	ldr.w	r3, [r5, r9]
{
   20474:	460c      	mov	r4, r1
   20476:	4617      	mov	r7, r2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   20478:	bb13      	cbnz	r3, 204c0 <nrfx_twi_xfer+0x64>
   2047a:	780b      	ldrb	r3, [r1, #0]
   2047c:	2b02      	cmp	r3, #2
   2047e:	d00f      	beq.n	204a0 <nrfx_twi_xfer+0x44>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   20480:	7823      	ldrb	r3, [r4, #0]
   20482:	2b03      	cmp	r3, #3
   20484:	d11c      	bne.n	204c0 <nrfx_twi_xfer+0x64>
   20486:	4a40      	ldr	r2, [pc, #256]	; (20588 <nrfx_twi_xfer+0x12c>)
   20488:	4940      	ldr	r1, [pc, #256]	; (2058c <nrfx_twi_xfer+0x130>)
   2048a:	4841      	ldr	r0, [pc, #260]	; (20590 <nrfx_twi_xfer+0x134>)
   2048c:	f240 2389 	movw	r3, #649	; 0x289
   20490:	f004 f932 	bl	246f8 <printk>
   20494:	483c      	ldr	r0, [pc, #240]	; (20588 <nrfx_twi_xfer+0x12c>)
   20496:	f240 2189 	movw	r1, #649	; 0x289
   2049a:	f004 fb1e 	bl	24ada <assert_post_action>
   2049e:	e00f      	b.n	204c0 <nrfx_twi_xfer+0x64>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   204a0:	f44f 7322 	mov.w	r3, #648	; 0x288
   204a4:	4a38      	ldr	r2, [pc, #224]	; (20588 <nrfx_twi_xfer+0x12c>)
   204a6:	493b      	ldr	r1, [pc, #236]	; (20594 <nrfx_twi_xfer+0x138>)
   204a8:	4839      	ldr	r0, [pc, #228]	; (20590 <nrfx_twi_xfer+0x134>)
   204aa:	f004 f925 	bl	246f8 <printk>
   204ae:	4836      	ldr	r0, [pc, #216]	; (20588 <nrfx_twi_xfer+0x12c>)
   204b0:	f44f 7122 	mov.w	r1, #648	; 0x288
   204b4:	f004 fb11 	bl	24ada <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   204b8:	f855 3009 	ldr.w	r3, [r5, r9]
   204bc:	2b00      	cmp	r3, #0
   204be:	d0df      	beq.n	20480 <nrfx_twi_xfer+0x24>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   204c0:	233c      	movs	r3, #60	; 0x3c
   204c2:	fb03 5308 	mla	r3, r3, r8, r5
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   204c6:	f8d6 9000 	ldr.w	r9, [r6]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   204ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   204ce:	2b01      	cmp	r3, #1
   204d0:	d104      	bne.n	204dc <nrfx_twi_xfer+0x80>
   204d2:	7823      	ldrb	r3, [r4, #0]
   204d4:	2b01      	cmp	r3, #1
   204d6:	d106      	bne.n	204e6 <nrfx_twi_xfer+0x8a>
        return NRFX_ERROR_INVALID_STATE;
   204d8:	482f      	ldr	r0, [pc, #188]	; (20598 <nrfx_twi_xfer+0x13c>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   204da:	e011      	b.n	20500 <nrfx_twi_xfer+0xa4>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   204dc:	2b02      	cmp	r3, #2
   204de:	d102      	bne.n	204e6 <nrfx_twi_xfer+0x8a>
   204e0:	7823      	ldrb	r3, [r4, #0]
   204e2:	2b01      	cmp	r3, #1
   204e4:	d1f8      	bne.n	204d8 <nrfx_twi_xfer+0x7c>
    if (p_cb->busy)
   204e6:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   204e8:	4b2c      	ldr	r3, [pc, #176]	; (2059c <nrfx_twi_xfer+0x140>)
   204ea:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   204ee:	fb06 5608 	mla	r6, r6, r8, r5
   204f2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   204f6:	b12b      	cbz	r3, 20504 <nrfx_twi_xfer+0xa8>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   204f8:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   204fa:	4829      	ldr	r0, [pc, #164]	; (205a0 <nrfx_twi_xfer+0x144>)
    p_reg->INTENSET = mask;
   204fc:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   20500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   20504:	f087 0304 	eor.w	r3, r7, #4
   20508:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2050c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   20510:	6237      	str	r7, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   20512:	46a6      	mov	lr, r4
   20514:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20518:	f106 0c0c 	add.w	ip, r6, #12
   2051c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20520:	f8de 3000 	ldr.w	r3, [lr]
   20524:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   20528:	6863      	ldr	r3, [r4, #4]
   2052a:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   2052c:	68e3      	ldr	r3, [r4, #12]
   2052e:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   20530:	7863      	ldrb	r3, [r4, #1]
   20532:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   20536:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20538:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   2053c:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2053e:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   20542:	d019      	beq.n	20578 <nrfx_twi_xfer+0x11c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   20544:	b9b3      	cbnz	r3, 20574 <nrfx_twi_xfer+0x118>
   20546:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   2054a:	233c      	movs	r3, #60	; 0x3c
   2054c:	fb03 5308 	mla	r3, r3, r8, r5
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   20550:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   20552:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   20556:	4648      	mov	r0, r9
   20558:	f7ff fe44 	bl	201e4 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   2055c:	233c      	movs	r3, #60	; 0x3c
   2055e:	fb03 f808 	mul.w	r8, r3, r8
   20562:	eb05 0208 	add.w	r2, r5, r8
   20566:	f855 3008 	ldr.w	r3, [r5, r8]
   2056a:	2b00      	cmp	r3, #0
   2056c:	d1c8      	bne.n	20500 <nrfx_twi_xfer+0xa4>
        p_cb->busy = false;
   2056e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   20572:	e7c5      	b.n	20500 <nrfx_twi_xfer+0xa4>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   20574:	2701      	movs	r7, #1
   20576:	e7e8      	b.n	2054a <nrfx_twi_xfer+0xee>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   20578:	4651      	mov	r1, sl
   2057a:	4648      	mov	r0, r9
   2057c:	f7ff fdbe 	bl	200fc <twi_rx_start_transfer>
   20580:	e7ec      	b.n	2055c <nrfx_twi_xfer+0x100>
   20582:	bf00      	nop
   20584:	20002424 	.word	0x20002424
   20588:	0002ff94 	.word	0x0002ff94
   2058c:	0003007d 	.word	0x0003007d
   20590:	000290f5 	.word	0x000290f5
   20594:	0003002e 	.word	0x0003002e
   20598:	0bad0005 	.word	0x0bad0005
   2059c:	00044286 	.word	0x00044286
   205a0:	0bad000b 	.word	0x0bad000b

000205a4 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   205a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   205a6:	4c30      	ldr	r4, [pc, #192]	; (20668 <nrfx_twi_0_irq_handler+0xc4>)
   205a8:	6823      	ldr	r3, [r4, #0]
{
   205aa:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   205ac:	b95b      	cbnz	r3, 205c6 <nrfx_twi_0_irq_handler+0x22>
   205ae:	492f      	ldr	r1, [pc, #188]	; (2066c <nrfx_twi_0_irq_handler+0xc8>)
   205b0:	482f      	ldr	r0, [pc, #188]	; (20670 <nrfx_twi_0_irq_handler+0xcc>)
   205b2:	4a30      	ldr	r2, [pc, #192]	; (20674 <nrfx_twi_0_irq_handler+0xd0>)
   205b4:	f240 23a9 	movw	r3, #681	; 0x2a9
   205b8:	f004 f89e 	bl	246f8 <printk>
   205bc:	482d      	ldr	r0, [pc, #180]	; (20674 <nrfx_twi_0_irq_handler+0xd0>)
   205be:	f240 21a9 	movw	r1, #681	; 0x2a9
   205c2:	f004 fa8a 	bl	24ada <assert_post_action>
    if (twi_transfer(p_twi, p_cb))
   205c6:	4928      	ldr	r1, [pc, #160]	; (20668 <nrfx_twi_0_irq_handler+0xc4>)
   205c8:	482b      	ldr	r0, [pc, #172]	; (20678 <nrfx_twi_0_irq_handler+0xd4>)
   205ca:	f007 fc64 	bl	27e96 <twi_transfer>
   205ce:	b9e0      	cbnz	r0, 2060a <nrfx_twi_0_irq_handler+0x66>
    if (!p_cb->error &&
   205d0:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   205d4:	f8d4 c020 	ldr.w	ip, [r4, #32]
   205d8:	b9e7      	cbnz	r7, 20614 <nrfx_twi_0_irq_handler+0x70>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   205da:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   205dc:	1e9a      	subs	r2, r3, #2
   205de:	2a01      	cmp	r2, #1
   205e0:	d818      	bhi.n	20614 <nrfx_twi_0_irq_handler+0x70>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   205e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   205e4:	69a2      	ldr	r2, [r4, #24]
   205e6:	4291      	cmp	r1, r2
   205e8:	d114      	bne.n	20614 <nrfx_twi_0_irq_handler+0x70>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   205ea:	69e2      	ldr	r2, [r4, #28]
   205ec:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   205ee:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   205f2:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   205f4:	491c      	ldr	r1, [pc, #112]	; (20668 <nrfx_twi_0_irq_handler+0xc4>)
   205f6:	4820      	ldr	r0, [pc, #128]	; (20678 <nrfx_twi_0_irq_handler+0xd4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   205f8:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   205fa:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   205fc:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   20600:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   20604:	d103      	bne.n	2060e <nrfx_twi_0_irq_handler+0x6a>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   20606:	f7ff fded 	bl	201e4 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   2060a:	b007      	add	sp, #28
   2060c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   2060e:	f7ff fd75 	bl	200fc <twi_rx_start_transfer>
   20612:	e7fa      	b.n	2060a <nrfx_twi_0_irq_handler+0x66>
        event.xfer_desc = p_cb->xfer_desc;
   20614:	4e19      	ldr	r6, [pc, #100]	; (2067c <nrfx_twi_0_irq_handler+0xd8>)
   20616:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20618:	ad01      	add	r5, sp, #4
   2061a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2061c:	6833      	ldr	r3, [r6, #0]
   2061e:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   20620:	b1ff      	cbz	r7, 20662 <nrfx_twi_0_irq_handler+0xbe>
    uint32_t error_source = p_reg->ERRORSRC;
   20622:	4a15      	ldr	r2, [pc, #84]	; (20678 <nrfx_twi_0_irq_handler+0xd4>)
   20624:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   20628:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   2062c:	0799      	lsls	r1, r3, #30
   2062e:	d50f      	bpl.n	20650 <nrfx_twi_0_irq_handler+0xac>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   20630:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   20632:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   20636:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   20638:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   2063c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   20640:	d001      	beq.n	20646 <nrfx_twi_0_irq_handler+0xa2>
   20642:	2f00      	cmp	r7, #0
   20644:	d0e1      	beq.n	2060a <nrfx_twi_0_irq_handler+0x66>
            p_cb->handler(&event, p_cb->p_context);
   20646:	e9d4 3100 	ldrd	r3, r1, [r4]
   2064a:	4668      	mov	r0, sp
   2064c:	4798      	blx	r3
}
   2064e:	e7dc      	b.n	2060a <nrfx_twi_0_irq_handler+0x66>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   20650:	075a      	lsls	r2, r3, #29
   20652:	d501      	bpl.n	20658 <nrfx_twi_0_irq_handler+0xb4>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   20654:	2302      	movs	r3, #2
   20656:	e7ec      	b.n	20632 <nrfx_twi_0_irq_handler+0x8e>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   20658:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   2065a:	bf4c      	ite	mi
   2065c:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   2065e:	2304      	movpl	r3, #4
   20660:	e7e7      	b.n	20632 <nrfx_twi_0_irq_handler+0x8e>
            event.type = NRFX_TWI_EVT_DONE;
   20662:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   20666:	e7e6      	b.n	20636 <nrfx_twi_0_irq_handler+0x92>
   20668:	20002424 	.word	0x20002424
   2066c:	000300cc 	.word	0x000300cc
   20670:	000290f5 	.word	0x000290f5
   20674:	0002ff94 	.word	0x0002ff94
   20678:	40003000 	.word	0x40003000
   2067c:	20002430 	.word	0x20002430

00020680 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20680:	6803      	ldr	r3, [r0, #0]
    switch (port)
   20682:	095a      	lsrs	r2, r3, #5
   20684:	bf0c      	ite	eq
   20686:	f04f 32ff 	moveq.w	r2, #4294967295
   2068a:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2068c:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20690:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20694:	07db      	lsls	r3, r3, #31
{
   20696:	b510      	push	{r4, lr}
   20698:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2069a:	d40b      	bmi.n	206b4 <nrf_gpio_pin_port_decode+0x34>
   2069c:	4910      	ldr	r1, [pc, #64]	; (206e0 <nrf_gpio_pin_port_decode+0x60>)
   2069e:	4811      	ldr	r0, [pc, #68]	; (206e4 <nrf_gpio_pin_port_decode+0x64>)
   206a0:	4a11      	ldr	r2, [pc, #68]	; (206e8 <nrf_gpio_pin_port_decode+0x68>)
   206a2:	f240 2329 	movw	r3, #553	; 0x229
   206a6:	f004 f827 	bl	246f8 <printk>
   206aa:	480f      	ldr	r0, [pc, #60]	; (206e8 <nrf_gpio_pin_port_decode+0x68>)
   206ac:	f240 2129 	movw	r1, #553	; 0x229
   206b0:	f004 fa13 	bl	24ada <assert_post_action>
    uint32_t pin_number = *p_pin;
   206b4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   206b6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   206ba:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   206bc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   206be:	d00b      	beq.n	206d8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   206c0:	490a      	ldr	r1, [pc, #40]	; (206ec <nrf_gpio_pin_port_decode+0x6c>)
   206c2:	4808      	ldr	r0, [pc, #32]	; (206e4 <nrf_gpio_pin_port_decode+0x64>)
   206c4:	4a08      	ldr	r2, [pc, #32]	; (206e8 <nrf_gpio_pin_port_decode+0x68>)
   206c6:	f240 232e 	movw	r3, #558	; 0x22e
   206ca:	f004 f815 	bl	246f8 <printk>
   206ce:	4806      	ldr	r0, [pc, #24]	; (206e8 <nrf_gpio_pin_port_decode+0x68>)
   206d0:	f240 212e 	movw	r1, #558	; 0x22e
   206d4:	f004 fa01 	bl	24ada <assert_post_action>
}
   206d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   206dc:	bd10      	pop	{r4, pc}
   206de:	bf00      	nop
   206e0:	0002f77e 	.word	0x0002f77e
   206e4:	000290f5 	.word	0x000290f5
   206e8:	0002f74b 	.word	0x0002f74b
   206ec:	0002cf26 	.word	0x0002cf26

000206f0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   206f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   206f2:	460c      	mov	r4, r1
   206f4:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   206f6:	f007 fc5a 	bl	27fae <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   206fa:	4620      	mov	r0, r4
   206fc:	f007 fc57 	bl	27fae <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20700:	a801      	add	r0, sp, #4
   20702:	9601      	str	r6, [sp, #4]
   20704:	f7ff ffbc 	bl	20680 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20708:	9b01      	ldr	r3, [sp, #4]
   2070a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2070e:	f240 650d 	movw	r5, #1549	; 0x60d
   20712:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20716:	a801      	add	r0, sp, #4
   20718:	9401      	str	r4, [sp, #4]
   2071a:	f7ff ffb1 	bl	20680 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2071e:	9b01      	ldr	r3, [sp, #4]
   20720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   20724:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   20726:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   2072a:	2004      	movs	r0, #4
   2072c:	f007 fb07 	bl	27d3e <nrfx_busy_wait>
   20730:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20732:	a801      	add	r0, sp, #4
   20734:	9401      	str	r4, [sp, #4]
   20736:	f7ff ffa3 	bl	20680 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2073a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2073c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20740:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   20742:	07db      	lsls	r3, r3, #31
   20744:	d415      	bmi.n	20772 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20746:	a801      	add	r0, sp, #4
   20748:	9601      	str	r6, [sp, #4]
   2074a:	f7ff ff99 	bl	20680 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2074e:	9b01      	ldr	r3, [sp, #4]
   20750:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   20754:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   20758:	2004      	movs	r0, #4
   2075a:	f007 faf0 	bl	27d3e <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   2075e:	4630      	mov	r0, r6
   20760:	f007 fc25 	bl	27fae <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   20764:	3d01      	subs	r5, #1
   20766:	2004      	movs	r0, #4
   20768:	f007 fae9 	bl	27d3e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2076c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   20770:	d1df      	bne.n	20732 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20772:	a801      	add	r0, sp, #4
   20774:	9401      	str	r4, [sp, #4]
   20776:	f7ff ff83 	bl	20680 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2077a:	9a01      	ldr	r2, [sp, #4]
   2077c:	2301      	movs	r3, #1
   2077e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   20780:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   20784:	2004      	movs	r0, #4
   20786:	f007 fada 	bl	27d3e <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   2078a:	4620      	mov	r0, r4
   2078c:	f007 fc0f 	bl	27fae <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   20790:	2004      	movs	r0, #4
   20792:	f007 fad4 	bl	27d3e <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20796:	a801      	add	r0, sp, #4
   20798:	9401      	str	r4, [sp, #4]
   2079a:	f7ff ff71 	bl	20680 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2079e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   207a0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   207a4:	4803      	ldr	r0, [pc, #12]	; (207b4 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   207a6:	40d3      	lsrs	r3, r2
   207a8:	f003 0301 	and.w	r3, r3, #1
   207ac:	1ac0      	subs	r0, r0, r3
   207ae:	b003      	add	sp, #12
   207b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   207b2:	bf00      	nop
   207b4:	0bad0001 	.word	0x0bad0001

000207b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   207b8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   207ba:	4c11      	ldr	r4, [pc, #68]	; (20800 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   207bc:	4a11      	ldr	r2, [pc, #68]	; (20804 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   207be:	4912      	ldr	r1, [pc, #72]	; (20808 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   207c0:	2303      	movs	r3, #3
   207c2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   207c4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   207c6:	4b11      	ldr	r3, [pc, #68]	; (2080c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   207c8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   207ca:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   207cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   207d0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   207d2:	2300      	movs	r3, #0
   207d4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   207d6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   207d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   207da:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   207dc:	4a0c      	ldr	r2, [pc, #48]	; (20810 <_DoInit+0x58>)
   207de:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   207e0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   207e2:	2210      	movs	r2, #16
   207e4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   207e6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   207e8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   207ea:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   207ec:	f005 f862 	bl	258b4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   207f0:	4908      	ldr	r1, [pc, #32]	; (20814 <_DoInit+0x5c>)
   207f2:	4620      	mov	r0, r4
   207f4:	f005 f85e 	bl	258b4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   207f8:	2320      	movs	r3, #32
   207fa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   207fc:	bd10      	pop	{r4, pc}
   207fe:	bf00      	nop
   20800:	20002460 	.word	0x20002460
   20804:	000300da 	.word	0x000300da
   20808:	000300e3 	.word	0x000300e3
   2080c:	20002b9f 	.word	0x20002b9f
   20810:	20002b8f 	.word	0x20002b8f
   20814:	000300e7 	.word	0x000300e7

00020818 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2081c:	4f23      	ldr	r7, [pc, #140]	; (208ac <SEGGER_RTT_WriteSkipNoLock+0x94>)
   2081e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20822:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   20824:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20828:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   2082a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2082c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2082e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20830:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   20832:	d834      	bhi.n	2089e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   20834:	f8d2 a020 	ldr.w	sl, [r2, #32]
   20838:	ebaa 0905 	sub.w	r9, sl, r5
   2083c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   20840:	4294      	cmp	r4, r2
   20842:	d811      	bhi.n	20868 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20844:	f04f 0918 	mov.w	r9, #24
   20848:	fb06 9309 	mla	r3, r6, r9, r9
   2084c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   2084e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20850:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   20852:	4641      	mov	r1, r8
   20854:	4428      	add	r0, r5
   20856:	f005 f885 	bl	25964 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   2085a:	fb09 7606 	mla	r6, r9, r6, r7
   2085e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   20860:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   20862:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   20864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   20868:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2086a:	429c      	cmp	r4, r3
   2086c:	d81b      	bhi.n	208a6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2086e:	fb00 bb0b 	mla	fp, r0, fp, fp
   20872:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   20874:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   20876:	f8db 0004 	ldr.w	r0, [fp, #4]
   2087a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   2087c:	4428      	add	r0, r5
   2087e:	f005 f871 	bl	25964 <memcpy>
      if (NumBytes) {
   20882:	ebb4 040a 	subs.w	r4, r4, sl
   20886:	d006      	beq.n	20896 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   20888:	f8db 0004 	ldr.w	r0, [fp, #4]
   2088c:	4622      	mov	r2, r4
   2088e:	eb08 0109 	add.w	r1, r8, r9
   20892:	f005 f867 	bl	25964 <memcpy>
      pRing->WrOff = NumBytes;
   20896:	2018      	movs	r0, #24
   20898:	fb00 7606 	mla	r6, r0, r6, r7
   2089c:	e7e0      	b.n	20860 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   2089e:	3b01      	subs	r3, #1
   208a0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   208a2:	42a3      	cmp	r3, r4
   208a4:	d2ce      	bcs.n	20844 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   208a6:	2000      	movs	r0, #0
   208a8:	e7dc      	b.n	20864 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   208aa:	bf00      	nop
   208ac:	20002460 	.word	0x20002460

000208b0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   208b0:	4b03      	ldr	r3, [pc, #12]	; (208c0 <SEGGER_RTT_HasDataUp+0x10>)
   208b2:	2218      	movs	r2, #24
   208b4:	fb02 3300 	mla	r3, r2, r0, r3
   208b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   208ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   208bc:	1a80      	subs	r0, r0, r2
   208be:	4770      	bx	lr
   208c0:	20002460 	.word	0x20002460

000208c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   208c4:	4b0e      	ldr	r3, [pc, #56]	; (20900 <z_sys_init_run_level+0x3c>)
{
   208c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   208c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   208cc:	3001      	adds	r0, #1
   208ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   208d2:	42a6      	cmp	r6, r4
   208d4:	d800      	bhi.n	208d8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   208d6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   208d8:	e9d4 3500 	ldrd	r3, r5, [r4]
   208dc:	4628      	mov	r0, r5
   208de:	4798      	blx	r3
		if (dev != NULL) {
   208e0:	b165      	cbz	r5, 208fc <z_sys_init_run_level+0x38>
			if (rc != 0) {
   208e2:	68eb      	ldr	r3, [r5, #12]
   208e4:	b130      	cbz	r0, 208f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   208e6:	2800      	cmp	r0, #0
   208e8:	bfb8      	it	lt
   208ea:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   208ec:	28ff      	cmp	r0, #255	; 0xff
   208ee:	bfa8      	it	ge
   208f0:	20ff      	movge	r0, #255	; 0xff
   208f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   208f4:	785a      	ldrb	r2, [r3, #1]
   208f6:	f042 0201 	orr.w	r2, r2, #1
   208fa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   208fc:	3408      	adds	r4, #8
   208fe:	e7e8      	b.n	208d2 <z_sys_init_run_level+0xe>
   20900:	00028db8 	.word	0x00028db8

00020904 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   20904:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   20906:	4605      	mov	r5, r0
   20908:	b910      	cbnz	r0, 20910 <z_impl_device_get_binding+0xc>
		return NULL;
   2090a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   2090c:	4620      	mov	r0, r4
   2090e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   20910:	7803      	ldrb	r3, [r0, #0]
   20912:	2b00      	cmp	r3, #0
   20914:	d0f9      	beq.n	2090a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   20916:	4a0f      	ldr	r2, [pc, #60]	; (20954 <z_impl_device_get_binding+0x50>)
   20918:	4c0f      	ldr	r4, [pc, #60]	; (20958 <z_impl_device_get_binding+0x54>)
   2091a:	4616      	mov	r6, r2
   2091c:	4294      	cmp	r4, r2
   2091e:	d108      	bne.n	20932 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   20920:	4c0d      	ldr	r4, [pc, #52]	; (20958 <z_impl_device_get_binding+0x54>)
   20922:	42b4      	cmp	r4, r6
   20924:	d0f1      	beq.n	2090a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20926:	4620      	mov	r0, r4
   20928:	f007 fb56 	bl	27fd8 <z_device_ready>
   2092c:	b950      	cbnz	r0, 20944 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   2092e:	3418      	adds	r4, #24
   20930:	e7f7      	b.n	20922 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   20932:	4620      	mov	r0, r4
   20934:	f007 fb50 	bl	27fd8 <z_device_ready>
   20938:	b110      	cbz	r0, 20940 <z_impl_device_get_binding+0x3c>
   2093a:	6823      	ldr	r3, [r4, #0]
   2093c:	42ab      	cmp	r3, r5
   2093e:	d0e5      	beq.n	2090c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   20940:	3418      	adds	r4, #24
   20942:	e7eb      	b.n	2091c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20944:	6821      	ldr	r1, [r4, #0]
   20946:	4628      	mov	r0, r5
   20948:	f004 ffe1 	bl	2590e <strcmp>
   2094c:	2800      	cmp	r0, #0
   2094e:	d1ee      	bne.n	2092e <z_impl_device_get_binding+0x2a>
   20950:	e7dc      	b.n	2090c <z_impl_device_get_binding+0x8>
   20952:	bf00      	nop
   20954:	00028418 	.word	0x00028418
   20958:	00028370 	.word	0x00028370

0002095c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2095c:	4b01      	ldr	r3, [pc, #4]	; (20964 <z_impl_z_errno+0x8>)
   2095e:	6898      	ldr	r0, [r3, #8]
}
   20960:	3064      	adds	r0, #100	; 0x64
   20962:	4770      	bx	lr
   20964:	20002508 	.word	0x20002508

00020968 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2096c:	4605      	mov	r5, r0
   2096e:	460f      	mov	r7, r1
	__asm__ volatile(
   20970:	f04f 0340 	mov.w	r3, #64	; 0x40
   20974:	f3ef 8811 	mrs	r8, BASEPRI
   20978:	f383 8812 	msr	BASEPRI_MAX, r3
   2097c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   20980:	f002 ff30 	bl	237e4 <z_impl_z_current_get>
   20984:	4c27      	ldr	r4, [pc, #156]	; (20a24 <z_fatal_error+0xbc>)
   20986:	4b28      	ldr	r3, [pc, #160]	; (20a28 <z_fatal_error+0xc0>)
   20988:	1ae4      	subs	r4, r4, r3
   2098a:	2d04      	cmp	r5, #4
   2098c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   20990:	bf96      	itet	ls
   20992:	4a26      	ldrls	r2, [pc, #152]	; (20a2c <z_fatal_error+0xc4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20994:	4a26      	ldrhi	r2, [pc, #152]	; (20a30 <z_fatal_error+0xc8>)
   20996:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   2099a:	01a4      	lsls	r4, r4, #6
   2099c:	f044 0301 	orr.w	r3, r4, #1
   209a0:	4606      	mov	r6, r0
   209a2:	f8ad 3000 	strh.w	r3, [sp]
   209a6:	4823      	ldr	r0, [pc, #140]	; (20a34 <z_fatal_error+0xcc>)
   209a8:	2300      	movs	r3, #0
   209aa:	4629      	mov	r1, r5
   209ac:	f004 f8fd 	bl	24baa <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   209b0:	b147      	cbz	r7, 209c4 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   209b2:	69fb      	ldr	r3, [r7, #28]
   209b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   209b8:	b123      	cbz	r3, 209c4 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   209ba:	481f      	ldr	r0, [pc, #124]	; (20a38 <z_fatal_error+0xd0>)
   209bc:	f044 0101 	orr.w	r1, r4, #1
   209c0:	f004 f8b9 	bl	24b36 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   209c4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   209c8:	b12e      	cbz	r6, 209d6 <z_fatal_error+0x6e>
   209ca:	4630      	mov	r0, r6
   209cc:	f007 fb3b 	bl	28046 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   209d0:	b108      	cbz	r0, 209d6 <z_fatal_error+0x6e>
   209d2:	7803      	ldrb	r3, [r0, #0]
   209d4:	b903      	cbnz	r3, 209d8 <z_fatal_error+0x70>
		thread_name = "unknown";
   209d6:	4819      	ldr	r0, [pc, #100]	; (20a3c <z_fatal_error+0xd4>)
   209d8:	f7f1 f9cc 	bl	11d74 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   209dc:	4623      	mov	r3, r4
   209de:	4602      	mov	r2, r0
   209e0:	4631      	mov	r1, r6
   209e2:	4817      	ldr	r0, [pc, #92]	; (20a40 <z_fatal_error+0xd8>)
   209e4:	f004 f8c8 	bl	24b78 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   209e8:	4639      	mov	r1, r7
   209ea:	4628      	mov	r0, r5
   209ec:	f7fd fd02 	bl	1e3f4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   209f0:	2d04      	cmp	r5, #4
   209f2:	d10c      	bne.n	20a0e <z_fatal_error+0xa6>
   209f4:	4913      	ldr	r1, [pc, #76]	; (20a44 <z_fatal_error+0xdc>)
   209f6:	4a14      	ldr	r2, [pc, #80]	; (20a48 <z_fatal_error+0xe0>)
   209f8:	4814      	ldr	r0, [pc, #80]	; (20a4c <z_fatal_error+0xe4>)
   209fa:	238f      	movs	r3, #143	; 0x8f
   209fc:	f003 fe7c 	bl	246f8 <printk>
   20a00:	4813      	ldr	r0, [pc, #76]	; (20a50 <z_fatal_error+0xe8>)
   20a02:	f003 fe79 	bl	246f8 <printk>
   20a06:	4810      	ldr	r0, [pc, #64]	; (20a48 <z_fatal_error+0xe0>)
   20a08:	218f      	movs	r1, #143	; 0x8f
   20a0a:	f004 f866 	bl	24ada <assert_post_action>
	__asm__ volatile(
   20a0e:	f388 8811 	msr	BASEPRI, r8
   20a12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20a16:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20a18:	b002      	add	sp, #8
   20a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20a1e:	f7f3 bc73 	b.w	14308 <z_impl_k_thread_abort>
   20a22:	bf00      	nop
   20a24:	00028708 	.word	0x00028708
   20a28:	00028618 	.word	0x00028618
   20a2c:	00028dd0 	.word	0x00028dd0
   20a30:	000300ee 	.word	0x000300ee
   20a34:	00030104 	.word	0x00030104
   20a38:	0003012c 	.word	0x0003012c
   20a3c:	000300fc 	.word	0x000300fc
   20a40:	0003014d 	.word	0x0003014d
   20a44:	00030187 	.word	0x00030187
   20a48:	00030165 	.word	0x00030165
   20a4c:	000290f5 	.word	0x000290f5
   20a50:	000301a4 	.word	0x000301a4

00020a54 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   20a54:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   20a56:	2300      	movs	r3, #0
{
   20a58:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   20a5a:	2201      	movs	r2, #1
   20a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   20a60:	220f      	movs	r2, #15
   20a62:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   20a66:	4c0d      	ldr	r4, [pc, #52]	; (20a9c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20a68:	4a0d      	ldr	r2, [pc, #52]	; (20aa0 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   20a6a:	9301      	str	r3, [sp, #4]
   20a6c:	490d      	ldr	r1, [pc, #52]	; (20aa4 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20a6e:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   20a70:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20a74:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   20a78:	f44f 75b0 	mov.w	r5, #352	; 0x160
   20a7c:	9300      	str	r3, [sp, #0]
   20a7e:	fb05 1100 	mla	r1, r5, r0, r1
   20a82:	4b09      	ldr	r3, [pc, #36]	; (20aa8 <init_idle_thread+0x54>)
   20a84:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20a88:	4620      	mov	r0, r4
   20a8a:	f000 fae3 	bl	21054 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20a8e:	7b63      	ldrb	r3, [r4, #13]
   20a90:	f023 0304 	bic.w	r3, r3, #4
   20a94:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   20a96:	b007      	add	sp, #28
   20a98:	bd30      	pop	{r4, r5, pc}
   20a9a:	bf00      	nop
   20a9c:	20001d18 	.word	0x20001d18
   20aa0:	20002508 	.word	0x20002508
   20aa4:	20003f20 	.word	0x20003f20
   20aa8:	00021325 	.word	0x00021325

00020aac <bg_thread_main>:
{
   20aac:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   20aae:	4b0a      	ldr	r3, [pc, #40]	; (20ad8 <bg_thread_main+0x2c>)
   20ab0:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20ab2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20ab4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20ab6:	f7ff ff05 	bl	208c4 <z_sys_init_run_level>
	boot_banner();
   20aba:	f003 fd75 	bl	245a8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20abe:	2003      	movs	r0, #3
   20ac0:	f7ff ff00 	bl	208c4 <z_sys_init_run_level>
	z_init_static_threads();
   20ac4:	f000 fb78 	bl	211b8 <z_init_static_threads>
	main();
   20ac8:	f7ef ff2a 	bl	10920 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20acc:	4a03      	ldr	r2, [pc, #12]	; (20adc <bg_thread_main+0x30>)
   20ace:	7b13      	ldrb	r3, [r2, #12]
   20ad0:	f023 0301 	bic.w	r3, r3, #1
   20ad4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20ad6:	bd08      	pop	{r3, pc}
   20ad8:	20002f9f 	.word	0x20002f9f
   20adc:	20001d98 	.word	0x20001d98

00020ae0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   20ae0:	4802      	ldr	r0, [pc, #8]	; (20aec <z_bss_zero+0xc>)
   20ae2:	4a03      	ldr	r2, [pc, #12]	; (20af0 <z_bss_zero+0x10>)
   20ae4:	2100      	movs	r1, #0
   20ae6:	1a12      	subs	r2, r2, r0
   20ae8:	f004 bf47 	b.w	2597a <memset>
   20aec:	20000888 	.word	0x20000888
   20af0:	20002fa0 	.word	0x20002fa0

00020af4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20af4:	b580      	push	{r7, lr}
   20af6:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20af8:	f7f1 f864 	bl	11bc4 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20afc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 20bd8 <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20b00:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   20b04:	4d2e      	ldr	r5, [pc, #184]	; (20bc0 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20b06:	4e2f      	ldr	r6, [pc, #188]	; (20bc4 <z_cstart+0xd0>)
   20b08:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20b0a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 20bdc <z_cstart+0xe8>
   20b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20b12:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20b14:	23e0      	movs	r3, #224	; 0xe0
   20b16:	2400      	movs	r4, #0
   20b18:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   20b1c:	2320      	movs	r3, #32
   20b1e:	77eb      	strb	r3, [r5, #31]
   20b20:	762c      	strb	r4, [r5, #24]
   20b22:	766c      	strb	r4, [r5, #25]
   20b24:	76ac      	strb	r4, [r5, #26]
   20b26:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20b2c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20b30:	626b      	str	r3, [r5, #36]	; 0x24
   20b32:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20b36:	f7f3 fb5d 	bl	141f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20b3a:	f7f2 ff0f 	bl	1395c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20b3e:	f04f 33ff 	mov.w	r3, #4294967295
   20b42:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20b44:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20b46:	f7f3 fcd5 	bl	144f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20b4a:	f7f3 fbef 	bl	1432c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20b4e:	f240 1301 	movw	r3, #257	; 0x101
   20b52:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20b56:	ab06      	add	r3, sp, #24
   20b58:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   20b5a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20b5e:	f007 fa3a 	bl	27fd6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20b62:	4620      	mov	r0, r4
   20b64:	f7ff feae 	bl	208c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20b68:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   20b6a:	4d17      	ldr	r5, [pc, #92]	; (20bc8 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20b6c:	f7ff feaa 	bl	208c4 <z_sys_init_run_level>
	z_sched_init();
   20b70:	f002 fca2 	bl	234b8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20b74:	4b15      	ldr	r3, [pc, #84]	; (20bcc <z_cstart+0xd8>)
   20b76:	9305      	str	r3, [sp, #20]
   20b78:	2301      	movs	r3, #1
   20b7a:	4915      	ldr	r1, [pc, #84]	; (20bd0 <z_cstart+0xdc>)
   20b7c:	9400      	str	r4, [sp, #0]
   20b7e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   20b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20b86:	464b      	mov	r3, r9
   20b88:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20b8c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   20b8e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20b90:	f000 fa60 	bl	21054 <z_setup_new_thread>
   20b94:	7b6a      	ldrb	r2, [r5, #13]
   20b96:	f022 0204 	bic.w	r2, r2, #4
   20b9a:	736a      	strb	r2, [r5, #13]
   20b9c:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   20b9e:	4628      	mov	r0, r5
   20ba0:	f002 f88a 	bl	22cb8 <z_ready_thread>
		init_idle_thread(i);
   20ba4:	4620      	mov	r0, r4
   20ba6:	f7ff ff55 	bl	20a54 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   20baa:	4b0a      	ldr	r3, [pc, #40]	; (20bd4 <z_cstart+0xe0>)
   20bac:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20bae:	464a      	mov	r2, r9
   20bb0:	4639      	mov	r1, r7
   20bb2:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   20bb4:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   20bb6:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20bba:	f7f3 f847 	bl	13c4c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20bbe:	bf00      	nop
   20bc0:	e000ed00 	.word	0xe000ed00
   20bc4:	20002508 	.word	0x20002508
   20bc8:	20001d98 	.word	0x20001d98
   20bcc:	00030223 	.word	0x00030223
   20bd0:	20003b00 	.word	0x20003b00
   20bd4:	20001d18 	.word	0x20001d18
   20bd8:	200048a0 	.word	0x200048a0
   20bdc:	00020aad 	.word	0x00020aad

00020be0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20be2:	4d0f      	ldr	r5, [pc, #60]	; (20c20 <statics_init+0x40>)
   20be4:	4c0f      	ldr	r4, [pc, #60]	; (20c24 <statics_init+0x44>)
   20be6:	4e10      	ldr	r6, [pc, #64]	; (20c28 <statics_init+0x48>)
   20be8:	462f      	mov	r7, r5
   20bea:	42ac      	cmp	r4, r5
   20bec:	d90c      	bls.n	20c08 <statics_init+0x28>
   20bee:	490f      	ldr	r1, [pc, #60]	; (20c2c <statics_init+0x4c>)
   20bf0:	480f      	ldr	r0, [pc, #60]	; (20c30 <statics_init+0x50>)
   20bf2:	2318      	movs	r3, #24
   20bf4:	4632      	mov	r2, r6
   20bf6:	f003 fd7f 	bl	246f8 <printk>
   20bfa:	480e      	ldr	r0, [pc, #56]	; (20c34 <statics_init+0x54>)
   20bfc:	f003 fd7c 	bl	246f8 <printk>
   20c00:	2118      	movs	r1, #24
   20c02:	4630      	mov	r0, r6
   20c04:	f003 ff69 	bl	24ada <assert_post_action>
   20c08:	42bc      	cmp	r4, r7
   20c0a:	d301      	bcc.n	20c10 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   20c0c:	2000      	movs	r0, #0
   20c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20c10:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20c14:	4620      	mov	r0, r4
   20c16:	f007 f9e9 	bl	27fec <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20c1a:	3418      	adds	r4, #24
   20c1c:	e7e5      	b.n	20bea <statics_init+0xa>
   20c1e:	bf00      	nop
   20c20:	20000698 	.word	0x20000698
   20c24:	20000680 	.word	0x20000680
   20c28:	0003022b 	.word	0x0003022b
   20c2c:	0003024d 	.word	0x0003024d
   20c30:	000290f5 	.word	0x000290f5
   20c34:	0002e327 	.word	0x0002e327

00020c38 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c3c:	b087      	sub	sp, #28
   20c3e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   20c42:	4606      	mov	r6, r0
   20c44:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20c46:	4640      	mov	r0, r8
   20c48:	4649      	mov	r1, r9
{
   20c4a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20c4c:	f007 fac4 	bl	281d8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20c50:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   20c58:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c5c:	f3ef 8511 	mrs	r5, BASEPRI
   20c60:	f383 8812 	msr	BASEPRI_MAX, r3
   20c64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c68:	4620      	mov	r0, r4
   20c6a:	f000 fb35 	bl	212d8 <z_spin_lock_valid>
   20c6e:	b968      	cbnz	r0, 20c8c <k_heap_aligned_alloc+0x54>
   20c70:	4a3f      	ldr	r2, [pc, #252]	; (20d70 <k_heap_aligned_alloc+0x138>)
   20c72:	4940      	ldr	r1, [pc, #256]	; (20d74 <k_heap_aligned_alloc+0x13c>)
   20c74:	4840      	ldr	r0, [pc, #256]	; (20d78 <k_heap_aligned_alloc+0x140>)
   20c76:	2381      	movs	r3, #129	; 0x81
   20c78:	f003 fd3e 	bl	246f8 <printk>
   20c7c:	483f      	ldr	r0, [pc, #252]	; (20d7c <k_heap_aligned_alloc+0x144>)
   20c7e:	4621      	mov	r1, r4
   20c80:	f003 fd3a 	bl	246f8 <printk>
   20c84:	483a      	ldr	r0, [pc, #232]	; (20d70 <k_heap_aligned_alloc+0x138>)
   20c86:	2181      	movs	r1, #129	; 0x81
   20c88:	f003 ff27 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   20c8c:	4620      	mov	r0, r4
   20c8e:	f000 fb41 	bl	21314 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20c92:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20c96:	b17b      	cbz	r3, 20cb8 <k_heap_aligned_alloc+0x80>
   20c98:	ea58 0309 	orrs.w	r3, r8, r9
   20c9c:	d00c      	beq.n	20cb8 <k_heap_aligned_alloc+0x80>
   20c9e:	4938      	ldr	r1, [pc, #224]	; (20d80 <k_heap_aligned_alloc+0x148>)
   20ca0:	4a38      	ldr	r2, [pc, #224]	; (20d84 <k_heap_aligned_alloc+0x14c>)
   20ca2:	4835      	ldr	r0, [pc, #212]	; (20d78 <k_heap_aligned_alloc+0x140>)
   20ca4:	2349      	movs	r3, #73	; 0x49
   20ca6:	f003 fd27 	bl	246f8 <printk>
   20caa:	4837      	ldr	r0, [pc, #220]	; (20d88 <k_heap_aligned_alloc+0x150>)
   20cac:	f003 fd24 	bl	246f8 <printk>
   20cb0:	4834      	ldr	r0, [pc, #208]	; (20d84 <k_heap_aligned_alloc+0x14c>)
   20cb2:	2149      	movs	r1, #73	; 0x49
   20cb4:	f003 ff11 	bl	24ada <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cb8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 20d70 <k_heap_aligned_alloc+0x138>
   20cbc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20d74 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20cc0:	4652      	mov	r2, sl
   20cc2:	4659      	mov	r1, fp
   20cc4:	4630      	mov	r0, r6
   20cc6:	f7f0 fa3d 	bl	11144 <sys_heap_aligned_alloc>
   20cca:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   20ccc:	f003 f9ae 	bl	2402c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20cd0:	b1cf      	cbz	r7, 20d06 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cd2:	4620      	mov	r0, r4
   20cd4:	f000 fb0e 	bl	212f4 <z_spin_unlock_valid>
   20cd8:	b968      	cbnz	r0, 20cf6 <k_heap_aligned_alloc+0xbe>
   20cda:	4a25      	ldr	r2, [pc, #148]	; (20d70 <k_heap_aligned_alloc+0x138>)
   20cdc:	492b      	ldr	r1, [pc, #172]	; (20d8c <k_heap_aligned_alloc+0x154>)
   20cde:	4826      	ldr	r0, [pc, #152]	; (20d78 <k_heap_aligned_alloc+0x140>)
   20ce0:	23ac      	movs	r3, #172	; 0xac
   20ce2:	f003 fd09 	bl	246f8 <printk>
   20ce6:	482a      	ldr	r0, [pc, #168]	; (20d90 <k_heap_aligned_alloc+0x158>)
   20ce8:	4621      	mov	r1, r4
   20cea:	f003 fd05 	bl	246f8 <printk>
   20cee:	4820      	ldr	r0, [pc, #128]	; (20d70 <k_heap_aligned_alloc+0x138>)
   20cf0:	21ac      	movs	r1, #172	; 0xac
   20cf2:	f003 fef2 	bl	24ada <assert_post_action>
	__asm__ volatile(
   20cf6:	f385 8811 	msr	BASEPRI, r5
   20cfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20cfe:	4638      	mov	r0, r7
   20d00:	b007      	add	sp, #28
   20d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   20d06:	9b04      	ldr	r3, [sp, #16]
   20d08:	1a1b      	subs	r3, r3, r0
   20d0a:	9302      	str	r3, [sp, #8]
   20d0c:	9b05      	ldr	r3, [sp, #20]
   20d0e:	eb63 0301 	sbc.w	r3, r3, r1
   20d12:	9303      	str	r3, [sp, #12]
   20d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20d18:	2a01      	cmp	r2, #1
   20d1a:	f173 0300 	sbcs.w	r3, r3, #0
   20d1e:	dbd8      	blt.n	20cd2 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20d24:	4629      	mov	r1, r5
   20d26:	e9cd 2300 	strd	r2, r3, [sp]
   20d2a:	4620      	mov	r0, r4
   20d2c:	f106 020c 	add.w	r2, r6, #12
   20d30:	f002 f974 	bl	2301c <z_pend_curr>
	__asm__ volatile(
   20d34:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d38:	f3ef 8511 	mrs	r5, BASEPRI
   20d3c:	f383 8812 	msr	BASEPRI_MAX, r3
   20d40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d44:	4620      	mov	r0, r4
   20d46:	f000 fac7 	bl	212d8 <z_spin_lock_valid>
   20d4a:	b968      	cbnz	r0, 20d68 <k_heap_aligned_alloc+0x130>
   20d4c:	480a      	ldr	r0, [pc, #40]	; (20d78 <k_heap_aligned_alloc+0x140>)
   20d4e:	2381      	movs	r3, #129	; 0x81
   20d50:	4642      	mov	r2, r8
   20d52:	4649      	mov	r1, r9
   20d54:	f003 fcd0 	bl	246f8 <printk>
   20d58:	4808      	ldr	r0, [pc, #32]	; (20d7c <k_heap_aligned_alloc+0x144>)
   20d5a:	4621      	mov	r1, r4
   20d5c:	f003 fccc 	bl	246f8 <printk>
   20d60:	2181      	movs	r1, #129	; 0x81
   20d62:	4640      	mov	r0, r8
   20d64:	f003 feb9 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   20d68:	4620      	mov	r0, r4
   20d6a:	f000 fad3 	bl	21314 <z_spin_lock_set_owner>
	return k;
   20d6e:	e7a7      	b.n	20cc0 <k_heap_aligned_alloc+0x88>
   20d70:	000291b5 	.word	0x000291b5
   20d74:	00029207 	.word	0x00029207
   20d78:	000290f5 	.word	0x000290f5
   20d7c:	0002921c 	.word	0x0002921c
   20d80:	00030263 	.word	0x00030263
   20d84:	0003022b 	.word	0x0003022b
   20d88:	0002f37f 	.word	0x0002f37f
   20d8c:	000291db 	.word	0x000291db
   20d90:	000291f2 	.word	0x000291f2

00020d94 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d96:	4605      	mov	r5, r0
   20d98:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20d9a:	f100 0414 	add.w	r4, r0, #20
   20d9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20da2:	f3ef 8711 	mrs	r7, BASEPRI
   20da6:	f383 8812 	msr	BASEPRI_MAX, r3
   20daa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dae:	4620      	mov	r0, r4
   20db0:	f000 fa92 	bl	212d8 <z_spin_lock_valid>
   20db4:	b968      	cbnz	r0, 20dd2 <k_heap_free+0x3e>
   20db6:	4a1b      	ldr	r2, [pc, #108]	; (20e24 <k_heap_free+0x90>)
   20db8:	491b      	ldr	r1, [pc, #108]	; (20e28 <k_heap_free+0x94>)
   20dba:	481c      	ldr	r0, [pc, #112]	; (20e2c <k_heap_free+0x98>)
   20dbc:	2381      	movs	r3, #129	; 0x81
   20dbe:	f003 fc9b 	bl	246f8 <printk>
   20dc2:	481b      	ldr	r0, [pc, #108]	; (20e30 <k_heap_free+0x9c>)
   20dc4:	4621      	mov	r1, r4
   20dc6:	f003 fc97 	bl	246f8 <printk>
   20dca:	4816      	ldr	r0, [pc, #88]	; (20e24 <k_heap_free+0x90>)
   20dcc:	2181      	movs	r1, #129	; 0x81
   20dce:	f003 fe84 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   20dd2:	4620      	mov	r0, r4
   20dd4:	f000 fa9e 	bl	21314 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20dd8:	4628      	mov	r0, r5
   20dda:	4631      	mov	r1, r6
   20ddc:	f7f0 f966 	bl	110ac <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20de0:	f105 000c 	add.w	r0, r5, #12
   20de4:	f007 f9e0 	bl	281a8 <z_unpend_all>
   20de8:	b128      	cbz	r0, 20df6 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   20dea:	4639      	mov	r1, r7
   20dec:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20dee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20df2:	f001 bcc1 	b.w	22778 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20df6:	4620      	mov	r0, r4
   20df8:	f000 fa7c 	bl	212f4 <z_spin_unlock_valid>
   20dfc:	b968      	cbnz	r0, 20e1a <k_heap_free+0x86>
   20dfe:	4a09      	ldr	r2, [pc, #36]	; (20e24 <k_heap_free+0x90>)
   20e00:	490c      	ldr	r1, [pc, #48]	; (20e34 <k_heap_free+0xa0>)
   20e02:	480a      	ldr	r0, [pc, #40]	; (20e2c <k_heap_free+0x98>)
   20e04:	23ac      	movs	r3, #172	; 0xac
   20e06:	f003 fc77 	bl	246f8 <printk>
   20e0a:	480b      	ldr	r0, [pc, #44]	; (20e38 <k_heap_free+0xa4>)
   20e0c:	4621      	mov	r1, r4
   20e0e:	f003 fc73 	bl	246f8 <printk>
   20e12:	4804      	ldr	r0, [pc, #16]	; (20e24 <k_heap_free+0x90>)
   20e14:	21ac      	movs	r1, #172	; 0xac
   20e16:	f003 fe60 	bl	24ada <assert_post_action>
	__asm__ volatile(
   20e1a:	f387 8811 	msr	BASEPRI, r7
   20e1e:	f3bf 8f6f 	isb	sy
}
   20e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20e24:	000291b5 	.word	0x000291b5
   20e28:	00029207 	.word	0x00029207
   20e2c:	000290f5 	.word	0x000290f5
   20e30:	0002921c 	.word	0x0002921c
   20e34:	000291db 	.word	0x000291db
   20e38:	000291f2 	.word	0x000291f2

00020e3c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20e40:	4d16      	ldr	r5, [pc, #88]	; (20e9c <init_mem_slab_module+0x60>)
   20e42:	4c17      	ldr	r4, [pc, #92]	; (20ea0 <init_mem_slab_module+0x64>)
   20e44:	4e17      	ldr	r6, [pc, #92]	; (20ea4 <init_mem_slab_module+0x68>)
   20e46:	46a8      	mov	r8, r5
   20e48:	42ac      	cmp	r4, r5
   20e4a:	d90c      	bls.n	20e66 <init_mem_slab_module+0x2a>
   20e4c:	4916      	ldr	r1, [pc, #88]	; (20ea8 <init_mem_slab_module+0x6c>)
   20e4e:	4817      	ldr	r0, [pc, #92]	; (20eac <init_mem_slab_module+0x70>)
   20e50:	233c      	movs	r3, #60	; 0x3c
   20e52:	4632      	mov	r2, r6
   20e54:	f003 fc50 	bl	246f8 <printk>
   20e58:	4815      	ldr	r0, [pc, #84]	; (20eb0 <init_mem_slab_module+0x74>)
   20e5a:	f003 fc4d 	bl	246f8 <printk>
   20e5e:	213c      	movs	r1, #60	; 0x3c
   20e60:	4630      	mov	r0, r6
   20e62:	f003 fe3a 	bl	24ada <assert_post_action>
   20e66:	4544      	cmp	r4, r8
   20e68:	d302      	bcc.n	20e70 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   20e6a:	2000      	movs	r0, #0
	return rc;
}
   20e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20e70:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   20e74:	ea41 0302 	orr.w	r3, r1, r2
   20e78:	f013 0303 	ands.w	r3, r3, #3
   20e7c:	d10b      	bne.n	20e96 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   20e7e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   20e80:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   20e82:	4283      	cmp	r3, r0
   20e84:	d101      	bne.n	20e8a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20e86:	3420      	adds	r4, #32
   20e88:	e7de      	b.n	20e48 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   20e8a:	69a7      	ldr	r7, [r4, #24]
   20e8c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20e8e:	3301      	adds	r3, #1
		slab->free_list = p;
   20e90:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   20e92:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   20e94:	e7f5      	b.n	20e82 <init_mem_slab_module+0x46>
		return -EINVAL;
   20e96:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20e9a:	e7e7      	b.n	20e6c <init_mem_slab_module+0x30>
   20e9c:	20000680 	.word	0x20000680
   20ea0:	20000620 	.word	0x20000620
   20ea4:	000302a8 	.word	0x000302a8
   20ea8:	000302cd 	.word	0x000302cd
   20eac:	000290f5 	.word	0x000290f5
   20eb0:	0002e327 	.word	0x0002e327

00020eb4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20eb8:	4604      	mov	r4, r0
   20eba:	460e      	mov	r6, r1
   20ebc:	4690      	mov	r8, r2
   20ebe:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20ec0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20ec4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ec8:	f3ef 8711 	mrs	r7, BASEPRI
   20ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   20ed0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ed4:	4628      	mov	r0, r5
   20ed6:	f000 f9ff 	bl	212d8 <z_spin_lock_valid>
   20eda:	b968      	cbnz	r0, 20ef8 <k_mem_slab_alloc+0x44>
   20edc:	4a24      	ldr	r2, [pc, #144]	; (20f70 <k_mem_slab_alloc+0xbc>)
   20ede:	4925      	ldr	r1, [pc, #148]	; (20f74 <k_mem_slab_alloc+0xc0>)
   20ee0:	4825      	ldr	r0, [pc, #148]	; (20f78 <k_mem_slab_alloc+0xc4>)
   20ee2:	2381      	movs	r3, #129	; 0x81
   20ee4:	f003 fc08 	bl	246f8 <printk>
   20ee8:	4824      	ldr	r0, [pc, #144]	; (20f7c <k_mem_slab_alloc+0xc8>)
   20eea:	4629      	mov	r1, r5
   20eec:	f003 fc04 	bl	246f8 <printk>
   20ef0:	481f      	ldr	r0, [pc, #124]	; (20f70 <k_mem_slab_alloc+0xbc>)
   20ef2:	2181      	movs	r1, #129	; 0x81
   20ef4:	f003 fdf1 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   20ef8:	4628      	mov	r0, r5
   20efa:	f000 fa0b 	bl	21314 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20efe:	69a3      	ldr	r3, [r4, #24]
   20f00:	b1eb      	cbz	r3, 20f3e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   20f02:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   20f04:	681b      	ldr	r3, [r3, #0]
   20f06:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20f08:	69e3      	ldr	r3, [r4, #28]
   20f0a:	3301      	adds	r3, #1
   20f0c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20f0e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f10:	4628      	mov	r0, r5
   20f12:	f000 f9ef 	bl	212f4 <z_spin_unlock_valid>
   20f16:	b968      	cbnz	r0, 20f34 <k_mem_slab_alloc+0x80>
   20f18:	4a15      	ldr	r2, [pc, #84]	; (20f70 <k_mem_slab_alloc+0xbc>)
   20f1a:	4919      	ldr	r1, [pc, #100]	; (20f80 <k_mem_slab_alloc+0xcc>)
   20f1c:	4816      	ldr	r0, [pc, #88]	; (20f78 <k_mem_slab_alloc+0xc4>)
   20f1e:	23ac      	movs	r3, #172	; 0xac
   20f20:	f003 fbea 	bl	246f8 <printk>
   20f24:	4817      	ldr	r0, [pc, #92]	; (20f84 <k_mem_slab_alloc+0xd0>)
   20f26:	4629      	mov	r1, r5
   20f28:	f003 fbe6 	bl	246f8 <printk>
   20f2c:	4810      	ldr	r0, [pc, #64]	; (20f70 <k_mem_slab_alloc+0xbc>)
   20f2e:	21ac      	movs	r1, #172	; 0xac
   20f30:	f003 fdd3 	bl	24ada <assert_post_action>
	__asm__ volatile(
   20f34:	f387 8811 	msr	BASEPRI, r7
   20f38:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   20f3c:	e013      	b.n	20f66 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20f3e:	ea58 0209 	orrs.w	r2, r8, r9
   20f42:	d103      	bne.n	20f4c <k_mem_slab_alloc+0x98>
		*mem = NULL;
   20f44:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   20f46:	f06f 040b 	mvn.w	r4, #11
   20f4a:	e7e1      	b.n	20f10 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20f4c:	4622      	mov	r2, r4
   20f4e:	e9cd 8900 	strd	r8, r9, [sp]
   20f52:	4639      	mov	r1, r7
   20f54:	4628      	mov	r0, r5
   20f56:	f002 f861 	bl	2301c <z_pend_curr>
		if (result == 0) {
   20f5a:	4604      	mov	r4, r0
   20f5c:	b918      	cbnz	r0, 20f66 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   20f5e:	4b0a      	ldr	r3, [pc, #40]	; (20f88 <k_mem_slab_alloc+0xd4>)
   20f60:	689b      	ldr	r3, [r3, #8]
   20f62:	695b      	ldr	r3, [r3, #20]
   20f64:	6033      	str	r3, [r6, #0]
}
   20f66:	4620      	mov	r0, r4
   20f68:	b003      	add	sp, #12
   20f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f6e:	bf00      	nop
   20f70:	000291b5 	.word	0x000291b5
   20f74:	00029207 	.word	0x00029207
   20f78:	000290f5 	.word	0x000290f5
   20f7c:	0002921c 	.word	0x0002921c
   20f80:	000291db 	.word	0x000291db
   20f84:	000291f2 	.word	0x000291f2
   20f88:	20002508 	.word	0x20002508

00020f8c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f90:	4604      	mov	r4, r0
   20f92:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20f94:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20f98:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f9c:	f3ef 8711 	mrs	r7, BASEPRI
   20fa0:	f383 8812 	msr	BASEPRI_MAX, r3
   20fa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20fa8:	4628      	mov	r0, r5
   20faa:	f000 f995 	bl	212d8 <z_spin_lock_valid>
   20fae:	b968      	cbnz	r0, 20fcc <k_mem_slab_free+0x40>
   20fb0:	4a22      	ldr	r2, [pc, #136]	; (2103c <k_mem_slab_free+0xb0>)
   20fb2:	4923      	ldr	r1, [pc, #140]	; (21040 <k_mem_slab_free+0xb4>)
   20fb4:	4823      	ldr	r0, [pc, #140]	; (21044 <k_mem_slab_free+0xb8>)
   20fb6:	2381      	movs	r3, #129	; 0x81
   20fb8:	f003 fb9e 	bl	246f8 <printk>
   20fbc:	4822      	ldr	r0, [pc, #136]	; (21048 <k_mem_slab_free+0xbc>)
   20fbe:	4629      	mov	r1, r5
   20fc0:	f003 fb9a 	bl	246f8 <printk>
   20fc4:	481d      	ldr	r0, [pc, #116]	; (2103c <k_mem_slab_free+0xb0>)
   20fc6:	2181      	movs	r1, #129	; 0x81
   20fc8:	f003 fd87 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   20fcc:	4628      	mov	r0, r5
   20fce:	f000 f9a1 	bl	21314 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20fd2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20fd6:	f1b8 0f00 	cmp.w	r8, #0
   20fda:	d10f      	bne.n	20ffc <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20fdc:	4620      	mov	r0, r4
   20fde:	f002 fa1b 	bl	23418 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20fe2:	b158      	cbz	r0, 20ffc <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20fe4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20fe6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20fe8:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20fec:	f001 fe64 	bl	22cb8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20ff0:	4639      	mov	r1, r7
   20ff2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20ff8:	f001 bbbe 	b.w	22778 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20ffc:	6833      	ldr	r3, [r6, #0]
   20ffe:	69a2      	ldr	r2, [r4, #24]
   21000:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   21002:	6833      	ldr	r3, [r6, #0]
   21004:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   21006:	69e3      	ldr	r3, [r4, #28]
   21008:	3b01      	subs	r3, #1
   2100a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2100c:	4628      	mov	r0, r5
   2100e:	f000 f971 	bl	212f4 <z_spin_unlock_valid>
   21012:	b968      	cbnz	r0, 21030 <k_mem_slab_free+0xa4>
   21014:	4a09      	ldr	r2, [pc, #36]	; (2103c <k_mem_slab_free+0xb0>)
   21016:	490d      	ldr	r1, [pc, #52]	; (2104c <k_mem_slab_free+0xc0>)
   21018:	480a      	ldr	r0, [pc, #40]	; (21044 <k_mem_slab_free+0xb8>)
   2101a:	23ac      	movs	r3, #172	; 0xac
   2101c:	f003 fb6c 	bl	246f8 <printk>
   21020:	480b      	ldr	r0, [pc, #44]	; (21050 <k_mem_slab_free+0xc4>)
   21022:	4629      	mov	r1, r5
   21024:	f003 fb68 	bl	246f8 <printk>
   21028:	4804      	ldr	r0, [pc, #16]	; (2103c <k_mem_slab_free+0xb0>)
   2102a:	21ac      	movs	r1, #172	; 0xac
   2102c:	f003 fd55 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21030:	f387 8811 	msr	BASEPRI, r7
   21034:	f3bf 8f6f 	isb	sy
}
   21038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2103c:	000291b5 	.word	0x000291b5
   21040:	00029207 	.word	0x00029207
   21044:	000290f5 	.word	0x000290f5
   21048:	0002921c 	.word	0x0002921c
   2104c:	000291db 	.word	0x000291db
   21050:	000291f2 	.word	0x000291f2

00021054 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21058:	b085      	sub	sp, #20
   2105a:	4604      	mov	r4, r0
   2105c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   21060:	f1b8 0f0f 	cmp.w	r8, #15
{
   21064:	460f      	mov	r7, r1
   21066:	4615      	mov	r5, r2
   21068:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2106a:	d132      	bne.n	210d2 <z_setup_new_thread+0x7e>
   2106c:	4b25      	ldr	r3, [pc, #148]	; (21104 <z_setup_new_thread+0xb0>)
   2106e:	4599      	cmp	r9, r3
   21070:	d133      	bne.n	210da <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21072:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   21076:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2107a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2107c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2107e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   21080:	2304      	movs	r3, #4
   21082:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21084:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   21088:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   2108c:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21090:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   21092:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21096:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21098:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2109c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2109e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   210a0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   210a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   210a4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   210a6:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   210a8:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   210aa:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   210ae:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   210b0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   210b2:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   210b4:	4642      	mov	r2, r8
   210b6:	4639      	mov	r1, r7
   210b8:	4620      	mov	r0, r4
   210ba:	f7f2 fd91 	bl	13be0 <arch_new_thread>
	if (!_current) {
   210be:	4b12      	ldr	r3, [pc, #72]	; (21108 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   210c0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   210c2:	689b      	ldr	r3, [r3, #8]
   210c4:	b103      	cbz	r3, 210c8 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   210c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   210c8:	6763      	str	r3, [r4, #116]	; 0x74
}
   210ca:	4640      	mov	r0, r8
   210cc:	b005      	add	sp, #20
   210ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   210d2:	f108 0310 	add.w	r3, r8, #16
   210d6:	2b1e      	cmp	r3, #30
   210d8:	d9cb      	bls.n	21072 <z_setup_new_thread+0x1e>
   210da:	4a0c      	ldr	r2, [pc, #48]	; (2110c <z_setup_new_thread+0xb8>)
   210dc:	490c      	ldr	r1, [pc, #48]	; (21110 <z_setup_new_thread+0xbc>)
   210de:	480d      	ldr	r0, [pc, #52]	; (21114 <z_setup_new_thread+0xc0>)
   210e0:	f240 13ff 	movw	r3, #511	; 0x1ff
   210e4:	f003 fb08 	bl	246f8 <printk>
   210e8:	4641      	mov	r1, r8
   210ea:	480b      	ldr	r0, [pc, #44]	; (21118 <z_setup_new_thread+0xc4>)
   210ec:	f06f 030f 	mvn.w	r3, #15
   210f0:	220e      	movs	r2, #14
   210f2:	f003 fb01 	bl	246f8 <printk>
   210f6:	4805      	ldr	r0, [pc, #20]	; (2110c <z_setup_new_thread+0xb8>)
   210f8:	f240 11ff 	movw	r1, #511	; 0x1ff
   210fc:	f003 fced 	bl	24ada <assert_post_action>
   21100:	e7b7      	b.n	21072 <z_setup_new_thread+0x1e>
   21102:	bf00      	nop
   21104:	00021325 	.word	0x00021325
   21108:	20002508 	.word	0x20002508
   2110c:	000302ea 	.word	0x000302ea
   21110:	0003030d 	.word	0x0003030d
   21114:	000290f5 	.word	0x000290f5
   21118:	0003038d 	.word	0x0003038d

0002111c <z_impl_k_thread_create>:
{
   2111c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21120:	b087      	sub	sp, #28
   21122:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   21126:	4604      	mov	r4, r0
   21128:	460d      	mov	r5, r1
   2112a:	4690      	mov	r8, r2
   2112c:	4699      	mov	r9, r3
   2112e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   21132:	b173      	cbz	r3, 21152 <z_impl_k_thread_create+0x36>
   21134:	491b      	ldr	r1, [pc, #108]	; (211a4 <z_impl_k_thread_create+0x88>)
   21136:	4a1c      	ldr	r2, [pc, #112]	; (211a8 <z_impl_k_thread_create+0x8c>)
   21138:	481c      	ldr	r0, [pc, #112]	; (211ac <z_impl_k_thread_create+0x90>)
   2113a:	f44f 731a 	mov.w	r3, #616	; 0x268
   2113e:	f003 fadb 	bl	246f8 <printk>
   21142:	481b      	ldr	r0, [pc, #108]	; (211b0 <z_impl_k_thread_create+0x94>)
   21144:	f003 fad8 	bl	246f8 <printk>
   21148:	4817      	ldr	r0, [pc, #92]	; (211a8 <z_impl_k_thread_create+0x8c>)
   2114a:	f44f 711a 	mov.w	r1, #616	; 0x268
   2114e:	f003 fcc4 	bl	24ada <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21152:	2300      	movs	r3, #0
   21154:	9305      	str	r3, [sp, #20]
   21156:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21158:	9304      	str	r3, [sp, #16]
   2115a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2115c:	9303      	str	r3, [sp, #12]
   2115e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21160:	9302      	str	r3, [sp, #8]
   21162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21164:	9301      	str	r3, [sp, #4]
   21166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21168:	9300      	str	r3, [sp, #0]
   2116a:	4642      	mov	r2, r8
   2116c:	464b      	mov	r3, r9
   2116e:	4629      	mov	r1, r5
   21170:	4620      	mov	r0, r4
   21172:	f7ff ff6f 	bl	21054 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   21176:	1c7b      	adds	r3, r7, #1
   21178:	bf08      	it	eq
   2117a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2117e:	d005      	beq.n	2118c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21180:	ea56 0307 	orrs.w	r3, r6, r7
   21184:	d106      	bne.n	21194 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   21186:	4620      	mov	r0, r4
   21188:	f001 fdde 	bl	22d48 <z_sched_start>
}
   2118c:	4620      	mov	r0, r4
   2118e:	b007      	add	sp, #28
   21190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21194:	4907      	ldr	r1, [pc, #28]	; (211b4 <z_impl_k_thread_create+0x98>)
   21196:	4632      	mov	r2, r6
   21198:	463b      	mov	r3, r7
   2119a:	f104 0018 	add.w	r0, r4, #24
   2119e:	f002 fcbf 	bl	23b20 <z_add_timeout>
   211a2:	e7f3      	b.n	2118c <z_impl_k_thread_create+0x70>
   211a4:	000303be 	.word	0x000303be
   211a8:	000302ea 	.word	0x000302ea
   211ac:	000290f5 	.word	0x000290f5
   211b0:	000303d0 	.word	0x000303d0
   211b4:	00022df1 	.word	0x00022df1

000211b8 <z_init_static_threads>:
{
   211b8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   211bc:	4f3f      	ldr	r7, [pc, #252]	; (212bc <z_init_static_threads+0x104>)
   211be:	4d40      	ldr	r5, [pc, #256]	; (212c0 <z_init_static_threads+0x108>)
   211c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 212d0 <z_init_static_threads+0x118>
{
   211c4:	b086      	sub	sp, #24
   211c6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   211c8:	42bd      	cmp	r5, r7
   211ca:	d90e      	bls.n	211ea <z_init_static_threads+0x32>
   211cc:	493d      	ldr	r1, [pc, #244]	; (212c4 <z_init_static_threads+0x10c>)
   211ce:	483e      	ldr	r0, [pc, #248]	; (212c8 <z_init_static_threads+0x110>)
   211d0:	f240 23cf 	movw	r3, #719	; 0x2cf
   211d4:	4642      	mov	r2, r8
   211d6:	f003 fa8f 	bl	246f8 <printk>
   211da:	483c      	ldr	r0, [pc, #240]	; (212cc <z_init_static_threads+0x114>)
   211dc:	f003 fa8c 	bl	246f8 <printk>
   211e0:	f240 21cf 	movw	r1, #719	; 0x2cf
   211e4:	4640      	mov	r0, r8
   211e6:	f003 fc78 	bl	24ada <assert_post_action>
   211ea:	42b5      	cmp	r5, r6
   211ec:	f105 0430 	add.w	r4, r5, #48	; 0x30
   211f0:	d31f      	bcc.n	21232 <z_init_static_threads+0x7a>
	k_sched_lock();
   211f2:	f001 fb05 	bl	22800 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   211f6:	4c32      	ldr	r4, [pc, #200]	; (212c0 <z_init_static_threads+0x108>)
   211f8:	4d35      	ldr	r5, [pc, #212]	; (212d0 <z_init_static_threads+0x118>)
   211fa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 212c4 <z_init_static_threads+0x10c>
   211fe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 212c8 <z_init_static_threads+0x110>
   21202:	42b4      	cmp	r4, r6
   21204:	d90e      	bls.n	21224 <z_init_static_threads+0x6c>
   21206:	4641      	mov	r1, r8
   21208:	f240 23ee 	movw	r3, #750	; 0x2ee
   2120c:	462a      	mov	r2, r5
   2120e:	4648      	mov	r0, r9
   21210:	f003 fa72 	bl	246f8 <printk>
   21214:	482d      	ldr	r0, [pc, #180]	; (212cc <z_init_static_threads+0x114>)
   21216:	f003 fa6f 	bl	246f8 <printk>
   2121a:	f240 21ee 	movw	r1, #750	; 0x2ee
   2121e:	4628      	mov	r0, r5
   21220:	f003 fc5b 	bl	24ada <assert_post_action>
   21224:	42b4      	cmp	r4, r6
   21226:	d321      	bcc.n	2126c <z_init_static_threads+0xb4>
}
   21228:	b006      	add	sp, #24
   2122a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   2122e:	f002 b82b 	b.w	23288 <k_sched_unlock>
		z_setup_new_thread(
   21232:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21236:	9305      	str	r3, [sp, #20]
   21238:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2123c:	9304      	str	r3, [sp, #16]
   2123e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   21242:	9303      	str	r3, [sp, #12]
   21244:	f854 3c18 	ldr.w	r3, [r4, #-24]
   21248:	9302      	str	r3, [sp, #8]
   2124a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2124e:	9301      	str	r3, [sp, #4]
   21250:	f854 3c20 	ldr.w	r3, [r4, #-32]
   21254:	9300      	str	r3, [sp, #0]
   21256:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2125a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2125e:	f7ff fef9 	bl	21054 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   21262:	f854 3c30 	ldr.w	r3, [r4, #-48]
   21266:	655d      	str	r5, [r3, #84]	; 0x54
   21268:	4625      	mov	r5, r4
   2126a:	e7ad      	b.n	211c8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2126c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2126e:	1c4b      	adds	r3, r1, #1
   21270:	d014      	beq.n	2129c <z_init_static_threads+0xe4>
   21272:	f240 32e7 	movw	r2, #999	; 0x3e7
   21276:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   21278:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2127c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   21280:	4693      	mov	fp, r2
   21282:	469c      	mov	ip, r3
   21284:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21288:	459c      	cmp	ip, r3
   2128a:	bf08      	it	eq
   2128c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   2128e:	6827      	ldr	r7, [r4, #0]
   21290:	4658      	mov	r0, fp
   21292:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21294:	d104      	bne.n	212a0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   21296:	4638      	mov	r0, r7
   21298:	f001 fd56 	bl	22d48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2129c:	3430      	adds	r4, #48	; 0x30
   2129e:	e7b0      	b.n	21202 <z_init_static_threads+0x4a>
   212a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   212a4:	2300      	movs	r3, #0
   212a6:	f7de ff1b 	bl	e0 <__aeabi_uldivmod>
   212aa:	4602      	mov	r2, r0
   212ac:	460b      	mov	r3, r1
   212ae:	f107 0018 	add.w	r0, r7, #24
   212b2:	4908      	ldr	r1, [pc, #32]	; (212d4 <z_init_static_threads+0x11c>)
   212b4:	f002 fc34 	bl	23b20 <z_add_timeout>
   212b8:	e7f0      	b.n	2129c <z_init_static_threads+0xe4>
   212ba:	bf00      	nop
   212bc:	20000620 	.word	0x20000620
   212c0:	20000620 	.word	0x20000620
   212c4:	000303f5 	.word	0x000303f5
   212c8:	000290f5 	.word	0x000290f5
   212cc:	0002e327 	.word	0x0002e327
   212d0:	000302ea 	.word	0x000302ea
   212d4:	00022df1 	.word	0x00022df1

000212d8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   212d8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   212da:	b138      	cbz	r0, 212ec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   212dc:	4b04      	ldr	r3, [pc, #16]	; (212f0 <z_spin_lock_valid+0x18>)
   212de:	7d1b      	ldrb	r3, [r3, #20]
   212e0:	f000 0003 	and.w	r0, r0, #3
   212e4:	1ac0      	subs	r0, r0, r3
   212e6:	bf18      	it	ne
   212e8:	2001      	movne	r0, #1
   212ea:	4770      	bx	lr
			return false;
		}
	}
	return true;
   212ec:	2001      	movs	r0, #1
}
   212ee:	4770      	bx	lr
   212f0:	20002508 	.word	0x20002508

000212f4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   212f4:	4906      	ldr	r1, [pc, #24]	; (21310 <z_spin_unlock_valid+0x1c>)
{
   212f6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   212f8:	688a      	ldr	r2, [r1, #8]
   212fa:	7d08      	ldrb	r0, [r1, #20]
   212fc:	6819      	ldr	r1, [r3, #0]
   212fe:	4302      	orrs	r2, r0
   21300:	4291      	cmp	r1, r2
   21302:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   21306:	bf04      	itt	eq
   21308:	6018      	streq	r0, [r3, #0]
	return true;
   2130a:	2001      	moveq	r0, #1
}
   2130c:	4770      	bx	lr
   2130e:	bf00      	nop
   21310:	20002508 	.word	0x20002508

00021314 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   21314:	4a02      	ldr	r2, [pc, #8]	; (21320 <z_spin_lock_set_owner+0xc>)
   21316:	7d11      	ldrb	r1, [r2, #20]
   21318:	6893      	ldr	r3, [r2, #8]
   2131a:	430b      	orrs	r3, r1
   2131c:	6003      	str	r3, [r0, #0]
}
   2131e:	4770      	bx	lr
   21320:	20002508 	.word	0x20002508

00021324 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   21324:	4c11      	ldr	r4, [pc, #68]	; (2136c <idle+0x48>)
   21326:	68a2      	ldr	r2, [r4, #8]
   21328:	f992 200e 	ldrsb.w	r2, [r2, #14]
   2132c:	2a00      	cmp	r2, #0
{
   2132e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   21330:	da09      	bge.n	21346 <idle+0x22>
   21332:	490f      	ldr	r1, [pc, #60]	; (21370 <idle+0x4c>)
   21334:	480f      	ldr	r0, [pc, #60]	; (21374 <idle+0x50>)
   21336:	4a10      	ldr	r2, [pc, #64]	; (21378 <idle+0x54>)
   21338:	2327      	movs	r3, #39	; 0x27
   2133a:	f003 f9dd 	bl	246f8 <printk>
   2133e:	480e      	ldr	r0, [pc, #56]	; (21378 <idle+0x54>)
   21340:	2127      	movs	r1, #39	; 0x27
   21342:	f003 fbca 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21346:	f04f 0240 	mov.w	r2, #64	; 0x40
   2134a:	f3ef 8311 	mrs	r3, BASEPRI
   2134e:	f382 8812 	msr	BASEPRI_MAX, r2
   21352:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   21356:	f002 fd05 	bl	23d64 <z_get_next_timeout_expiry>
   2135a:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   2135c:	f7f1 fd7c 	bl	12e58 <pm_system_suspend>
   21360:	2800      	cmp	r0, #0
   21362:	d1f0      	bne.n	21346 <idle+0x22>
	arch_cpu_idle();
   21364:	f7f2 fb00 	bl	13968 <arch_cpu_idle>
}
   21368:	e7ed      	b.n	21346 <idle+0x22>
   2136a:	bf00      	nop
   2136c:	20002508 	.word	0x20002508
   21370:	00030443 	.word	0x00030443
   21374:	000290f5 	.word	0x000290f5
   21378:	00030422 	.word	0x00030422

0002137c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2137c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21380:	4604      	mov	r4, r0
   21382:	4616      	mov	r6, r2
   21384:	461f      	mov	r7, r3
   21386:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2138a:	b163      	cbz	r3, 213a6 <z_impl_k_mutex_lock+0x2a>
   2138c:	4970      	ldr	r1, [pc, #448]	; (21550 <z_impl_k_mutex_lock+0x1d4>)
   2138e:	4a71      	ldr	r2, [pc, #452]	; (21554 <z_impl_k_mutex_lock+0x1d8>)
   21390:	4871      	ldr	r0, [pc, #452]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   21392:	2365      	movs	r3, #101	; 0x65
   21394:	f003 f9b0 	bl	246f8 <printk>
   21398:	4870      	ldr	r0, [pc, #448]	; (2155c <z_impl_k_mutex_lock+0x1e0>)
   2139a:	f003 f9ad 	bl	246f8 <printk>
   2139e:	486d      	ldr	r0, [pc, #436]	; (21554 <z_impl_k_mutex_lock+0x1d8>)
   213a0:	2165      	movs	r1, #101	; 0x65
   213a2:	f003 fb9a 	bl	24ada <assert_post_action>
   213a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   213aa:	f3ef 8811 	mrs	r8, BASEPRI
   213ae:	f383 8812 	msr	BASEPRI_MAX, r3
   213b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213b6:	486a      	ldr	r0, [pc, #424]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   213b8:	f7ff ff8e 	bl	212d8 <z_spin_lock_valid>
   213bc:	b968      	cbnz	r0, 213da <z_impl_k_mutex_lock+0x5e>
   213be:	4a69      	ldr	r2, [pc, #420]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   213c0:	4969      	ldr	r1, [pc, #420]	; (21568 <z_impl_k_mutex_lock+0x1ec>)
   213c2:	4865      	ldr	r0, [pc, #404]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   213c4:	2381      	movs	r3, #129	; 0x81
   213c6:	f003 f997 	bl	246f8 <printk>
   213ca:	4965      	ldr	r1, [pc, #404]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   213cc:	4867      	ldr	r0, [pc, #412]	; (2156c <z_impl_k_mutex_lock+0x1f0>)
   213ce:	f003 f993 	bl	246f8 <printk>
   213d2:	4864      	ldr	r0, [pc, #400]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   213d4:	2181      	movs	r1, #129	; 0x81
   213d6:	f003 fb80 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   213da:	4861      	ldr	r0, [pc, #388]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   213dc:	f7ff ff9a 	bl	21314 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   213e0:	68e3      	ldr	r3, [r4, #12]
   213e2:	4a63      	ldr	r2, [pc, #396]	; (21570 <z_impl_k_mutex_lock+0x1f4>)
   213e4:	b1fb      	cbz	r3, 21426 <z_impl_k_mutex_lock+0xaa>
   213e6:	68a0      	ldr	r0, [r4, #8]
   213e8:	6891      	ldr	r1, [r2, #8]
   213ea:	4288      	cmp	r0, r1
   213ec:	d03d      	beq.n	2146a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   213ee:	ea56 0307 	orrs.w	r3, r6, r7
   213f2:	d13c      	bne.n	2146e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213f4:	485a      	ldr	r0, [pc, #360]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   213f6:	f7ff ff7d 	bl	212f4 <z_spin_unlock_valid>
   213fa:	b968      	cbnz	r0, 21418 <z_impl_k_mutex_lock+0x9c>
   213fc:	4a59      	ldr	r2, [pc, #356]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   213fe:	495d      	ldr	r1, [pc, #372]	; (21574 <z_impl_k_mutex_lock+0x1f8>)
   21400:	4855      	ldr	r0, [pc, #340]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   21402:	23ac      	movs	r3, #172	; 0xac
   21404:	f003 f978 	bl	246f8 <printk>
   21408:	4955      	ldr	r1, [pc, #340]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   2140a:	485b      	ldr	r0, [pc, #364]	; (21578 <z_impl_k_mutex_lock+0x1fc>)
   2140c:	f003 f974 	bl	246f8 <printk>
   21410:	4854      	ldr	r0, [pc, #336]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   21412:	21ac      	movs	r1, #172	; 0xac
   21414:	f003 fb61 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21418:	f388 8811 	msr	BASEPRI, r8
   2141c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   21420:	f06f 000f 	mvn.w	r0, #15
   21424:	e01e      	b.n	21464 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   21426:	6891      	ldr	r1, [r2, #8]
   21428:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2142c:	484c      	ldr	r0, [pc, #304]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2142e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   21430:	3301      	adds	r3, #1
   21432:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   21434:	6893      	ldr	r3, [r2, #8]
   21436:	60a3      	str	r3, [r4, #8]
   21438:	f7ff ff5c 	bl	212f4 <z_spin_unlock_valid>
   2143c:	b968      	cbnz	r0, 2145a <z_impl_k_mutex_lock+0xde>
   2143e:	4a49      	ldr	r2, [pc, #292]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   21440:	494c      	ldr	r1, [pc, #304]	; (21574 <z_impl_k_mutex_lock+0x1f8>)
   21442:	4845      	ldr	r0, [pc, #276]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   21444:	23ac      	movs	r3, #172	; 0xac
   21446:	f003 f957 	bl	246f8 <printk>
   2144a:	4945      	ldr	r1, [pc, #276]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   2144c:	484a      	ldr	r0, [pc, #296]	; (21578 <z_impl_k_mutex_lock+0x1fc>)
   2144e:	f003 f953 	bl	246f8 <printk>
   21452:	4844      	ldr	r0, [pc, #272]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   21454:	21ac      	movs	r1, #172	; 0xac
   21456:	f003 fb40 	bl	24ada <assert_post_action>
   2145a:	f388 8811 	msr	BASEPRI, r8
   2145e:	f3bf 8f6f 	isb	sy
		return 0;
   21462:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21464:	b002      	add	sp, #8
   21466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2146a:	6921      	ldr	r1, [r4, #16]
   2146c:	e7de      	b.n	2142c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2146e:	f991 100e 	ldrsb.w	r1, [r1, #14]
   21472:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   21476:	4299      	cmp	r1, r3
   21478:	bfa8      	it	ge
   2147a:	4619      	movge	r1, r3
   2147c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   21480:	4291      	cmp	r1, r2
   21482:	bfb8      	it	lt
   21484:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   21486:	428b      	cmp	r3, r1
   21488:	dd44      	ble.n	21514 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   2148a:	f001 fdf7 	bl	2307c <z_set_prio>
   2148e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   21490:	e9cd 6700 	strd	r6, r7, [sp]
   21494:	4832      	ldr	r0, [pc, #200]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   21496:	4622      	mov	r2, r4
   21498:	4641      	mov	r1, r8
   2149a:	f001 fdbf 	bl	2301c <z_pend_curr>
	if (got_mutex == 0) {
   2149e:	2800      	cmp	r0, #0
   214a0:	d0e0      	beq.n	21464 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   214a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   214a6:	f3ef 8611 	mrs	r6, BASEPRI
   214aa:	f383 8812 	msr	BASEPRI_MAX, r3
   214ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214b2:	482b      	ldr	r0, [pc, #172]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   214b4:	f7ff ff10 	bl	212d8 <z_spin_lock_valid>
   214b8:	b968      	cbnz	r0, 214d6 <z_impl_k_mutex_lock+0x15a>
   214ba:	4a2a      	ldr	r2, [pc, #168]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   214bc:	492a      	ldr	r1, [pc, #168]	; (21568 <z_impl_k_mutex_lock+0x1ec>)
   214be:	4826      	ldr	r0, [pc, #152]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   214c0:	2381      	movs	r3, #129	; 0x81
   214c2:	f003 f919 	bl	246f8 <printk>
   214c6:	4926      	ldr	r1, [pc, #152]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   214c8:	4828      	ldr	r0, [pc, #160]	; (2156c <z_impl_k_mutex_lock+0x1f0>)
   214ca:	f003 f915 	bl	246f8 <printk>
   214ce:	4825      	ldr	r0, [pc, #148]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   214d0:	2181      	movs	r1, #129	; 0x81
   214d2:	f003 fb02 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   214d6:	4822      	ldr	r0, [pc, #136]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   214d8:	f7ff ff1c 	bl	21314 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   214dc:	6823      	ldr	r3, [r4, #0]
   214de:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214e0:	429c      	cmp	r4, r3
   214e2:	d00a      	beq.n	214fa <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   214e4:	b14b      	cbz	r3, 214fa <z_impl_k_mutex_lock+0x17e>
   214e6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   214ea:	4299      	cmp	r1, r3
   214ec:	bfa8      	it	ge
   214ee:	4619      	movge	r1, r3
   214f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   214f4:	4299      	cmp	r1, r3
   214f6:	bfb8      	it	lt
   214f8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   214fa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   214fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21500:	4299      	cmp	r1, r3
   21502:	d109      	bne.n	21518 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   21504:	b16d      	cbz	r5, 21522 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   21506:	4816      	ldr	r0, [pc, #88]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   21508:	4631      	mov	r1, r6
   2150a:	f001 f935 	bl	22778 <z_reschedule>
	return -EAGAIN;
   2150e:	f06f 000a 	mvn.w	r0, #10
   21512:	e7a7      	b.n	21464 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   21514:	2500      	movs	r5, #0
   21516:	e7bb      	b.n	21490 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   21518:	f001 fdb0 	bl	2307c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2151c:	2800      	cmp	r0, #0
   2151e:	d1f2      	bne.n	21506 <z_impl_k_mutex_lock+0x18a>
   21520:	e7f0      	b.n	21504 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21522:	480f      	ldr	r0, [pc, #60]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   21524:	f7ff fee6 	bl	212f4 <z_spin_unlock_valid>
   21528:	b968      	cbnz	r0, 21546 <z_impl_k_mutex_lock+0x1ca>
   2152a:	4a0e      	ldr	r2, [pc, #56]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   2152c:	4911      	ldr	r1, [pc, #68]	; (21574 <z_impl_k_mutex_lock+0x1f8>)
   2152e:	480a      	ldr	r0, [pc, #40]	; (21558 <z_impl_k_mutex_lock+0x1dc>)
   21530:	23ac      	movs	r3, #172	; 0xac
   21532:	f003 f8e1 	bl	246f8 <printk>
   21536:	490a      	ldr	r1, [pc, #40]	; (21560 <z_impl_k_mutex_lock+0x1e4>)
   21538:	480f      	ldr	r0, [pc, #60]	; (21578 <z_impl_k_mutex_lock+0x1fc>)
   2153a:	f003 f8dd 	bl	246f8 <printk>
   2153e:	4809      	ldr	r0, [pc, #36]	; (21564 <z_impl_k_mutex_lock+0x1e8>)
   21540:	21ac      	movs	r1, #172	; 0xac
   21542:	f003 faca 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21546:	f386 8811 	msr	BASEPRI, r6
   2154a:	f3bf 8f6f 	isb	sy
   2154e:	e7de      	b.n	2150e <z_impl_k_mutex_lock+0x192>
   21550:	000303be 	.word	0x000303be
   21554:	0003046b 	.word	0x0003046b
   21558:	000290f5 	.word	0x000290f5
   2155c:	0003048d 	.word	0x0003048d
   21560:	20002530 	.word	0x20002530
   21564:	000291b5 	.word	0x000291b5
   21568:	00029207 	.word	0x00029207
   2156c:	0002921c 	.word	0x0002921c
   21570:	20002508 	.word	0x20002508
   21574:	000291db 	.word	0x000291db
   21578:	000291f2 	.word	0x000291f2

0002157c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2157c:	b538      	push	{r3, r4, r5, lr}
   2157e:	4604      	mov	r4, r0
   21580:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   21584:	b163      	cbz	r3, 215a0 <z_impl_k_mutex_unlock+0x24>
   21586:	4952      	ldr	r1, [pc, #328]	; (216d0 <z_impl_k_mutex_unlock+0x154>)
   21588:	4a52      	ldr	r2, [pc, #328]	; (216d4 <z_impl_k_mutex_unlock+0x158>)
   2158a:	4853      	ldr	r0, [pc, #332]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   2158c:	23c7      	movs	r3, #199	; 0xc7
   2158e:	f003 f8b3 	bl	246f8 <printk>
   21592:	4852      	ldr	r0, [pc, #328]	; (216dc <z_impl_k_mutex_unlock+0x160>)
   21594:	f003 f8b0 	bl	246f8 <printk>
   21598:	484e      	ldr	r0, [pc, #312]	; (216d4 <z_impl_k_mutex_unlock+0x158>)
   2159a:	21c7      	movs	r1, #199	; 0xc7
   2159c:	f003 fa9d 	bl	24ada <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   215a0:	68a3      	ldr	r3, [r4, #8]
   215a2:	2b00      	cmp	r3, #0
   215a4:	f000 808d 	beq.w	216c2 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   215a8:	4d4d      	ldr	r5, [pc, #308]	; (216e0 <z_impl_k_mutex_unlock+0x164>)
   215aa:	68aa      	ldr	r2, [r5, #8]
   215ac:	4293      	cmp	r3, r2
   215ae:	f040 808b 	bne.w	216c8 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   215b2:	68e3      	ldr	r3, [r4, #12]
   215b4:	b94b      	cbnz	r3, 215ca <z_impl_k_mutex_unlock+0x4e>
   215b6:	494b      	ldr	r1, [pc, #300]	; (216e4 <z_impl_k_mutex_unlock+0x168>)
   215b8:	4847      	ldr	r0, [pc, #284]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   215ba:	4a46      	ldr	r2, [pc, #280]	; (216d4 <z_impl_k_mutex_unlock+0x158>)
   215bc:	23df      	movs	r3, #223	; 0xdf
   215be:	f003 f89b 	bl	246f8 <printk>
   215c2:	4844      	ldr	r0, [pc, #272]	; (216d4 <z_impl_k_mutex_unlock+0x158>)
   215c4:	21df      	movs	r1, #223	; 0xdf
   215c6:	f003 fa88 	bl	24ada <assert_post_action>
   215ca:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   215ce:	b163      	cbz	r3, 215ea <z_impl_k_mutex_unlock+0x6e>
   215d0:	493f      	ldr	r1, [pc, #252]	; (216d0 <z_impl_k_mutex_unlock+0x154>)
   215d2:	4a45      	ldr	r2, [pc, #276]	; (216e8 <z_impl_k_mutex_unlock+0x16c>)
   215d4:	4840      	ldr	r0, [pc, #256]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   215d6:	23fd      	movs	r3, #253	; 0xfd
   215d8:	f003 f88e 	bl	246f8 <printk>
   215dc:	4843      	ldr	r0, [pc, #268]	; (216ec <z_impl_k_mutex_unlock+0x170>)
   215de:	f003 f88b 	bl	246f8 <printk>
   215e2:	4841      	ldr	r0, [pc, #260]	; (216e8 <z_impl_k_mutex_unlock+0x16c>)
   215e4:	21fd      	movs	r1, #253	; 0xfd
   215e6:	f003 fa78 	bl	24ada <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   215ea:	68ab      	ldr	r3, [r5, #8]
   215ec:	7bdb      	ldrb	r3, [r3, #15]
   215ee:	2b01      	cmp	r3, #1
   215f0:	d10c      	bne.n	2160c <z_impl_k_mutex_unlock+0x90>
   215f2:	493f      	ldr	r1, [pc, #252]	; (216f0 <z_impl_k_mutex_unlock+0x174>)
   215f4:	4a3c      	ldr	r2, [pc, #240]	; (216e8 <z_impl_k_mutex_unlock+0x16c>)
   215f6:	4838      	ldr	r0, [pc, #224]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   215f8:	23fe      	movs	r3, #254	; 0xfe
   215fa:	f003 f87d 	bl	246f8 <printk>
   215fe:	483b      	ldr	r0, [pc, #236]	; (216ec <z_impl_k_mutex_unlock+0x170>)
   21600:	f003 f87a 	bl	246f8 <printk>
   21604:	4838      	ldr	r0, [pc, #224]	; (216e8 <z_impl_k_mutex_unlock+0x16c>)
   21606:	21fe      	movs	r1, #254	; 0xfe
   21608:	f003 fa67 	bl	24ada <assert_post_action>

	--_current->base.sched_locked;
   2160c:	68aa      	ldr	r2, [r5, #8]
   2160e:	7bd3      	ldrb	r3, [r2, #15]
   21610:	3b01      	subs	r3, #1
   21612:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21614:	68e3      	ldr	r3, [r4, #12]
   21616:	2b01      	cmp	r3, #1
   21618:	d905      	bls.n	21626 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   2161a:	3b01      	subs	r3, #1
   2161c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2161e:	f001 fe33 	bl	23288 <k_sched_unlock>

	return 0;
   21622:	2000      	movs	r0, #0
}
   21624:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   21626:	f04f 0340 	mov.w	r3, #64	; 0x40
   2162a:	f3ef 8511 	mrs	r5, BASEPRI
   2162e:	f383 8812 	msr	BASEPRI_MAX, r3
   21632:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21636:	482f      	ldr	r0, [pc, #188]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   21638:	f7ff fe4e 	bl	212d8 <z_spin_lock_valid>
   2163c:	b968      	cbnz	r0, 2165a <z_impl_k_mutex_unlock+0xde>
   2163e:	4a2e      	ldr	r2, [pc, #184]	; (216f8 <z_impl_k_mutex_unlock+0x17c>)
   21640:	492e      	ldr	r1, [pc, #184]	; (216fc <z_impl_k_mutex_unlock+0x180>)
   21642:	4825      	ldr	r0, [pc, #148]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   21644:	2381      	movs	r3, #129	; 0x81
   21646:	f003 f857 	bl	246f8 <printk>
   2164a:	492a      	ldr	r1, [pc, #168]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   2164c:	482c      	ldr	r0, [pc, #176]	; (21700 <z_impl_k_mutex_unlock+0x184>)
   2164e:	f003 f853 	bl	246f8 <printk>
   21652:	4829      	ldr	r0, [pc, #164]	; (216f8 <z_impl_k_mutex_unlock+0x17c>)
   21654:	2181      	movs	r1, #129	; 0x81
   21656:	f003 fa40 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2165a:	4826      	ldr	r0, [pc, #152]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   2165c:	f7ff fe5a 	bl	21314 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21660:	68a0      	ldr	r0, [r4, #8]
   21662:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   21664:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21668:	4299      	cmp	r1, r3
   2166a:	d001      	beq.n	21670 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   2166c:	f001 fd06 	bl	2307c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21670:	4620      	mov	r0, r4
   21672:	f001 fed1 	bl	23418 <z_unpend_first_thread>
	mutex->owner = new_owner;
   21676:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21678:	b158      	cbz	r0, 21692 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   2167a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2167e:	6122      	str	r2, [r4, #16]
   21680:	2200      	movs	r2, #0
   21682:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   21684:	f001 fb18 	bl	22cb8 <z_ready_thread>
		z_reschedule(&lock, key);
   21688:	481a      	ldr	r0, [pc, #104]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   2168a:	4629      	mov	r1, r5
   2168c:	f001 f874 	bl	22778 <z_reschedule>
   21690:	e7c5      	b.n	2161e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   21692:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21694:	4817      	ldr	r0, [pc, #92]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   21696:	f7ff fe2d 	bl	212f4 <z_spin_unlock_valid>
   2169a:	b968      	cbnz	r0, 216b8 <z_impl_k_mutex_unlock+0x13c>
   2169c:	4a16      	ldr	r2, [pc, #88]	; (216f8 <z_impl_k_mutex_unlock+0x17c>)
   2169e:	4919      	ldr	r1, [pc, #100]	; (21704 <z_impl_k_mutex_unlock+0x188>)
   216a0:	480d      	ldr	r0, [pc, #52]	; (216d8 <z_impl_k_mutex_unlock+0x15c>)
   216a2:	23ac      	movs	r3, #172	; 0xac
   216a4:	f003 f828 	bl	246f8 <printk>
   216a8:	4912      	ldr	r1, [pc, #72]	; (216f4 <z_impl_k_mutex_unlock+0x178>)
   216aa:	4817      	ldr	r0, [pc, #92]	; (21708 <z_impl_k_mutex_unlock+0x18c>)
   216ac:	f003 f824 	bl	246f8 <printk>
   216b0:	4811      	ldr	r0, [pc, #68]	; (216f8 <z_impl_k_mutex_unlock+0x17c>)
   216b2:	21ac      	movs	r1, #172	; 0xac
   216b4:	f003 fa11 	bl	24ada <assert_post_action>
	__asm__ volatile(
   216b8:	f385 8811 	msr	BASEPRI, r5
   216bc:	f3bf 8f6f 	isb	sy
   216c0:	e7ad      	b.n	2161e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   216c2:	f06f 0015 	mvn.w	r0, #21
   216c6:	e7ad      	b.n	21624 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   216c8:	f04f 30ff 	mov.w	r0, #4294967295
   216cc:	e7aa      	b.n	21624 <z_impl_k_mutex_unlock+0xa8>
   216ce:	bf00      	nop
   216d0:	000303be 	.word	0x000303be
   216d4:	0003046b 	.word	0x0003046b
   216d8:	000290f5 	.word	0x000290f5
   216dc:	0003048d 	.word	0x0003048d
   216e0:	20002508 	.word	0x20002508
   216e4:	000304b2 	.word	0x000304b2
   216e8:	000304c9 	.word	0x000304c9
   216ec:	0002f37f 	.word	0x0002f37f
   216f0:	000304f4 	.word	0x000304f4
   216f4:	20002530 	.word	0x20002530
   216f8:	000291b5 	.word	0x000291b5
   216fc:	00029207 	.word	0x00029207
   21700:	0002921c 	.word	0x0002921c
   21704:	000291db 	.word	0x000291db
   21708:	000291f2 	.word	0x000291f2

0002170c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2170c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21710:	4604      	mov	r4, r0
   21712:	f89d a020 	ldrb.w	sl, [sp, #32]
   21716:	460e      	mov	r6, r1
   21718:	4690      	mov	r8, r2
   2171a:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2171c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21720:	f04f 0340 	mov.w	r3, #64	; 0x40
   21724:	f3ef 8711 	mrs	r7, BASEPRI
   21728:	f383 8812 	msr	BASEPRI_MAX, r3
   2172c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21730:	4628      	mov	r0, r5
   21732:	f7ff fdd1 	bl	212d8 <z_spin_lock_valid>
   21736:	b968      	cbnz	r0, 21754 <queue_insert+0x48>
   21738:	4a3b      	ldr	r2, [pc, #236]	; (21828 <queue_insert+0x11c>)
   2173a:	493c      	ldr	r1, [pc, #240]	; (2182c <queue_insert+0x120>)
   2173c:	483c      	ldr	r0, [pc, #240]	; (21830 <queue_insert+0x124>)
   2173e:	2381      	movs	r3, #129	; 0x81
   21740:	f002 ffda 	bl	246f8 <printk>
   21744:	483b      	ldr	r0, [pc, #236]	; (21834 <queue_insert+0x128>)
   21746:	4629      	mov	r1, r5
   21748:	f002 ffd6 	bl	246f8 <printk>
   2174c:	4836      	ldr	r0, [pc, #216]	; (21828 <queue_insert+0x11c>)
   2174e:	2181      	movs	r1, #129	; 0x81
   21750:	f003 f9c3 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21754:	4628      	mov	r0, r5
   21756:	f7ff fddd 	bl	21314 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2175a:	f1ba 0f00 	cmp.w	sl, #0
   2175e:	d000      	beq.n	21762 <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   21760:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21762:	f104 000c 	add.w	r0, r4, #12
   21766:	f001 fe57 	bl	23418 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2176a:	b158      	cbz	r0, 21784 <queue_insert+0x78>
   2176c:	2400      	movs	r4, #0
   2176e:	67c4      	str	r4, [r0, #124]	; 0x7c
   21770:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   21774:	f001 faa0 	bl	22cb8 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   21778:	4628      	mov	r0, r5
   2177a:	4639      	mov	r1, r7
   2177c:	f000 fffc 	bl	22778 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   21780:	2000      	movs	r0, #0
   21782:	e01e      	b.n	217c2 <queue_insert+0xb6>
	if (alloc) {
   21784:	f1b9 0f00 	cmp.w	r9, #0
   21788:	d02d      	beq.n	217e6 <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   2178a:	2108      	movs	r1, #8
   2178c:	f002 fef4 	bl	24578 <z_thread_aligned_alloc>
		if (anode == NULL) {
   21790:	b9c8      	cbnz	r0, 217c6 <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21792:	4628      	mov	r0, r5
   21794:	f7ff fdae 	bl	212f4 <z_spin_unlock_valid>
   21798:	b968      	cbnz	r0, 217b6 <queue_insert+0xaa>
   2179a:	4a23      	ldr	r2, [pc, #140]	; (21828 <queue_insert+0x11c>)
   2179c:	4926      	ldr	r1, [pc, #152]	; (21838 <queue_insert+0x12c>)
   2179e:	4824      	ldr	r0, [pc, #144]	; (21830 <queue_insert+0x124>)
   217a0:	23ac      	movs	r3, #172	; 0xac
   217a2:	f002 ffa9 	bl	246f8 <printk>
   217a6:	4825      	ldr	r0, [pc, #148]	; (2183c <queue_insert+0x130>)
   217a8:	4629      	mov	r1, r5
   217aa:	f002 ffa5 	bl	246f8 <printk>
   217ae:	481e      	ldr	r0, [pc, #120]	; (21828 <queue_insert+0x11c>)
   217b0:	21ac      	movs	r1, #172	; 0xac
   217b2:	f003 f992 	bl	24ada <assert_post_action>
	__asm__ volatile(
   217b6:	f387 8811 	msr	BASEPRI, r7
   217ba:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   217be:	f06f 000b 	mvn.w	r0, #11
}
   217c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   217c6:	2301      	movs	r3, #1
		anode->data = data;
   217c8:	f8c0 8004 	str.w	r8, [r0, #4]
   217cc:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   217ce:	6803      	ldr	r3, [r0, #0]
   217d0:	f003 0303 	and.w	r3, r3, #3
   217d4:	b95e      	cbnz	r6, 217ee <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   217d6:	6822      	ldr	r2, [r4, #0]
   217d8:	4313      	orrs	r3, r2
   217da:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   217dc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   217de:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   217e0:	b973      	cbnz	r3, 21800 <queue_insert+0xf4>
	list->tail = node;
   217e2:	6060      	str	r0, [r4, #4]
}
   217e4:	e00c      	b.n	21800 <queue_insert+0xf4>
	node->next_and_flags = flags;
   217e6:	f8c8 9000 	str.w	r9, [r8]
}
   217ea:	4640      	mov	r0, r8
   217ec:	e7ef      	b.n	217ce <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   217ee:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   217f0:	f032 0203 	bics.w	r2, r2, #3
   217f4:	d110      	bne.n	21818 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   217f6:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   217f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   217fa:	b93a      	cbnz	r2, 2180c <queue_insert+0x100>
	list->head = node;
   217fc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21800:	2104      	movs	r1, #4
   21802:	f104 0014 	add.w	r0, r4, #20
   21806:	f006 fd39 	bl	2827c <z_handle_obj_poll_events>
   2180a:	e7b5      	b.n	21778 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2180c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2180e:	f003 0303 	and.w	r3, r3, #3
   21812:	4303      	orrs	r3, r0
   21814:	6013      	str	r3, [r2, #0]
   21816:	e7e4      	b.n	217e2 <queue_insert+0xd6>
   21818:	4313      	orrs	r3, r2
   2181a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2181c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2181e:	f003 0303 	and.w	r3, r3, #3
   21822:	4303      	orrs	r3, r0
   21824:	6033      	str	r3, [r6, #0]
}
   21826:	e7eb      	b.n	21800 <queue_insert+0xf4>
   21828:	000291b5 	.word	0x000291b5
   2182c:	00029207 	.word	0x00029207
   21830:	000290f5 	.word	0x000290f5
   21834:	0002921c 	.word	0x0002921c
   21838:	000291db 	.word	0x000291db
   2183c:	000291f2 	.word	0x000291f2

00021840 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   21840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21844:	4605      	mov	r5, r0
   21846:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   21848:	460c      	mov	r4, r1
   2184a:	2900      	cmp	r1, #0
   2184c:	d04a      	beq.n	218e4 <k_queue_append_list+0xa4>
   2184e:	2a00      	cmp	r2, #0
   21850:	d048      	beq.n	218e4 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21852:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   21856:	f04f 0340 	mov.w	r3, #64	; 0x40
   2185a:	f3ef 8911 	mrs	r9, BASEPRI
   2185e:	f383 8812 	msr	BASEPRI_MAX, r3
   21862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21866:	4630      	mov	r0, r6
   21868:	f7ff fd36 	bl	212d8 <z_spin_lock_valid>
   2186c:	b968      	cbnz	r0, 2188a <k_queue_append_list+0x4a>
   2186e:	4a1f      	ldr	r2, [pc, #124]	; (218ec <k_queue_append_list+0xac>)
   21870:	491f      	ldr	r1, [pc, #124]	; (218f0 <k_queue_append_list+0xb0>)
   21872:	4820      	ldr	r0, [pc, #128]	; (218f4 <k_queue_append_list+0xb4>)
   21874:	2381      	movs	r3, #129	; 0x81
   21876:	f002 ff3f 	bl	246f8 <printk>
   2187a:	481f      	ldr	r0, [pc, #124]	; (218f8 <k_queue_append_list+0xb8>)
   2187c:	4631      	mov	r1, r6
   2187e:	f002 ff3b 	bl	246f8 <printk>
   21882:	481a      	ldr	r0, [pc, #104]	; (218ec <k_queue_append_list+0xac>)
   21884:	2181      	movs	r1, #129	; 0x81
   21886:	f003 f928 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2188a:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   2188c:	f105 080c 	add.w	r8, r5, #12
   21890:	f7ff fd40 	bl	21314 <z_spin_lock_set_owner>
   21894:	4640      	mov	r0, r8
   21896:	f001 fdbf 	bl	23418 <z_unpend_first_thread>
   2189a:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   2189e:	b920      	cbnz	r0, 218aa <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   218a0:	686b      	ldr	r3, [r5, #4]
   218a2:	b9cb      	cbnz	r3, 218d8 <k_queue_append_list+0x98>
	list->head = node;
   218a4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   218a6:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   218a8:	e00a      	b.n	218c0 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   218aa:	6144      	str	r4, [r0, #20]
   218ac:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   218b0:	f001 fa02 	bl	22cb8 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   218b4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   218b6:	4640      	mov	r0, r8
   218b8:	f001 fdae 	bl	23418 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   218bc:	2c00      	cmp	r4, #0
   218be:	d1ee      	bne.n	2189e <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   218c0:	2104      	movs	r1, #4
   218c2:	f105 0014 	add.w	r0, r5, #20
   218c6:	f006 fcd9 	bl	2827c <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   218ca:	4630      	mov	r0, r6
   218cc:	4649      	mov	r1, r9
   218ce:	f000 ff53 	bl	22778 <z_reschedule>
	return 0;
   218d2:	2000      	movs	r0, #0
}
   218d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   218d8:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   218da:	f001 0103 	and.w	r1, r1, #3
   218de:	430c      	orrs	r4, r1
   218e0:	601c      	str	r4, [r3, #0]
}
   218e2:	e7e0      	b.n	218a6 <k_queue_append_list+0x66>
		return -EINVAL;
   218e4:	f06f 0015 	mvn.w	r0, #21
   218e8:	e7f4      	b.n	218d4 <k_queue_append_list+0x94>
   218ea:	bf00      	nop
   218ec:	000291b5 	.word	0x000291b5
   218f0:	00029207 	.word	0x00029207
   218f4:	000290f5 	.word	0x000290f5
   218f8:	0002921c 	.word	0x0002921c

000218fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   218fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21900:	4606      	mov	r6, r0
   21902:	4690      	mov	r8, r2
   21904:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21906:	f100 0508 	add.w	r5, r0, #8
   2190a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2190e:	f3ef 8711 	mrs	r7, BASEPRI
   21912:	f383 8812 	msr	BASEPRI_MAX, r3
   21916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2191a:	4628      	mov	r0, r5
   2191c:	f7ff fcdc 	bl	212d8 <z_spin_lock_valid>
   21920:	b968      	cbnz	r0, 2193e <z_impl_k_queue_get+0x42>
   21922:	4a25      	ldr	r2, [pc, #148]	; (219b8 <z_impl_k_queue_get+0xbc>)
   21924:	4925      	ldr	r1, [pc, #148]	; (219bc <z_impl_k_queue_get+0xc0>)
   21926:	4826      	ldr	r0, [pc, #152]	; (219c0 <z_impl_k_queue_get+0xc4>)
   21928:	2381      	movs	r3, #129	; 0x81
   2192a:	f002 fee5 	bl	246f8 <printk>
   2192e:	4825      	ldr	r0, [pc, #148]	; (219c4 <z_impl_k_queue_get+0xc8>)
   21930:	4629      	mov	r1, r5
   21932:	f002 fee1 	bl	246f8 <printk>
   21936:	4820      	ldr	r0, [pc, #128]	; (219b8 <z_impl_k_queue_get+0xbc>)
   21938:	2181      	movs	r1, #129	; 0x81
   2193a:	f003 f8ce 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2193e:	4628      	mov	r0, r5
   21940:	f7ff fce8 	bl	21314 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   21944:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21946:	b334      	cbz	r4, 21996 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21948:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2194a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2194c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21950:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21952:	4620      	mov	r0, r4
	list->head = node;
   21954:	6033      	str	r3, [r6, #0]
	list->tail = node;
   21956:	bf08      	it	eq
   21958:	6073      	streq	r3, [r6, #4]
   2195a:	2101      	movs	r1, #1
   2195c:	f006 fb7e 	bl	2805c <z_queue_node_peek>
   21960:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21962:	4628      	mov	r0, r5
   21964:	f7ff fcc6 	bl	212f4 <z_spin_unlock_valid>
   21968:	b968      	cbnz	r0, 21986 <z_impl_k_queue_get+0x8a>
   2196a:	4a13      	ldr	r2, [pc, #76]	; (219b8 <z_impl_k_queue_get+0xbc>)
   2196c:	4916      	ldr	r1, [pc, #88]	; (219c8 <z_impl_k_queue_get+0xcc>)
   2196e:	4814      	ldr	r0, [pc, #80]	; (219c0 <z_impl_k_queue_get+0xc4>)
   21970:	23ac      	movs	r3, #172	; 0xac
   21972:	f002 fec1 	bl	246f8 <printk>
   21976:	4815      	ldr	r0, [pc, #84]	; (219cc <z_impl_k_queue_get+0xd0>)
   21978:	4629      	mov	r1, r5
   2197a:	f002 febd 	bl	246f8 <printk>
   2197e:	480e      	ldr	r0, [pc, #56]	; (219b8 <z_impl_k_queue_get+0xbc>)
   21980:	21ac      	movs	r1, #172	; 0xac
   21982:	f003 f8aa 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21986:	f387 8811 	msr	BASEPRI, r7
   2198a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2198e:	4620      	mov	r0, r4
   21990:	b003      	add	sp, #12
   21992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21996:	ea58 0309 	orrs.w	r3, r8, r9
   2199a:	d0e2      	beq.n	21962 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2199c:	e9cd 8900 	strd	r8, r9, [sp]
   219a0:	f106 020c 	add.w	r2, r6, #12
   219a4:	4639      	mov	r1, r7
   219a6:	4628      	mov	r0, r5
   219a8:	f001 fb38 	bl	2301c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   219ac:	2800      	cmp	r0, #0
   219ae:	d1ee      	bne.n	2198e <z_impl_k_queue_get+0x92>
   219b0:	4b07      	ldr	r3, [pc, #28]	; (219d0 <z_impl_k_queue_get+0xd4>)
   219b2:	689b      	ldr	r3, [r3, #8]
   219b4:	695c      	ldr	r4, [r3, #20]
   219b6:	e7ea      	b.n	2198e <z_impl_k_queue_get+0x92>
   219b8:	000291b5 	.word	0x000291b5
   219bc:	00029207 	.word	0x00029207
   219c0:	000290f5 	.word	0x000290f5
   219c4:	0002921c 	.word	0x0002921c
   219c8:	000291db 	.word	0x000291db
   219cc:	000291f2 	.word	0x000291f2
   219d0:	20002508 	.word	0x20002508

000219d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   219d4:	b538      	push	{r3, r4, r5, lr}
   219d6:	4604      	mov	r4, r0
	__asm__ volatile(
   219d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   219dc:	f3ef 8511 	mrs	r5, BASEPRI
   219e0:	f383 8812 	msr	BASEPRI_MAX, r3
   219e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219e8:	4817      	ldr	r0, [pc, #92]	; (21a48 <z_impl_k_sem_give+0x74>)
   219ea:	f7ff fc75 	bl	212d8 <z_spin_lock_valid>
   219ee:	b968      	cbnz	r0, 21a0c <z_impl_k_sem_give+0x38>
   219f0:	4a16      	ldr	r2, [pc, #88]	; (21a4c <z_impl_k_sem_give+0x78>)
   219f2:	4917      	ldr	r1, [pc, #92]	; (21a50 <z_impl_k_sem_give+0x7c>)
   219f4:	4817      	ldr	r0, [pc, #92]	; (21a54 <z_impl_k_sem_give+0x80>)
   219f6:	2381      	movs	r3, #129	; 0x81
   219f8:	f002 fe7e 	bl	246f8 <printk>
   219fc:	4912      	ldr	r1, [pc, #72]	; (21a48 <z_impl_k_sem_give+0x74>)
   219fe:	4816      	ldr	r0, [pc, #88]	; (21a58 <z_impl_k_sem_give+0x84>)
   21a00:	f002 fe7a 	bl	246f8 <printk>
   21a04:	4811      	ldr	r0, [pc, #68]	; (21a4c <z_impl_k_sem_give+0x78>)
   21a06:	2181      	movs	r1, #129	; 0x81
   21a08:	f003 f867 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21a0c:	480e      	ldr	r0, [pc, #56]	; (21a48 <z_impl_k_sem_give+0x74>)
   21a0e:	f7ff fc81 	bl	21314 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21a12:	4620      	mov	r0, r4
   21a14:	f001 fd00 	bl	23418 <z_unpend_first_thread>

	if (thread != NULL) {
   21a18:	b148      	cbz	r0, 21a2e <z_impl_k_sem_give+0x5a>
   21a1a:	2200      	movs	r2, #0
   21a1c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21a1e:	f001 f94b 	bl	22cb8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21a22:	4629      	mov	r1, r5
   21a24:	4808      	ldr	r0, [pc, #32]	; (21a48 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21a2a:	f000 bea5 	b.w	22778 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21a2e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21a32:	429a      	cmp	r2, r3
   21a34:	bf18      	it	ne
   21a36:	3301      	addne	r3, #1
   21a38:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21a3a:	2102      	movs	r1, #2
   21a3c:	f104 0010 	add.w	r0, r4, #16
   21a40:	f006 fc1c 	bl	2827c <z_handle_obj_poll_events>
}
   21a44:	e7ed      	b.n	21a22 <z_impl_k_sem_give+0x4e>
   21a46:	bf00      	nop
   21a48:	20002534 	.word	0x20002534
   21a4c:	000291b5 	.word	0x000291b5
   21a50:	00029207 	.word	0x00029207
   21a54:	000290f5 	.word	0x000290f5
   21a58:	0002921c 	.word	0x0002921c

00021a5c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a5e:	4604      	mov	r4, r0
   21a60:	4616      	mov	r6, r2
   21a62:	461f      	mov	r7, r3
   21a64:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21a68:	b17b      	cbz	r3, 21a8a <z_impl_k_sem_take+0x2e>
   21a6a:	ea56 0307 	orrs.w	r3, r6, r7
   21a6e:	d00c      	beq.n	21a8a <z_impl_k_sem_take+0x2e>
   21a70:	4935      	ldr	r1, [pc, #212]	; (21b48 <z_impl_k_sem_take+0xec>)
   21a72:	4a36      	ldr	r2, [pc, #216]	; (21b4c <z_impl_k_sem_take+0xf0>)
   21a74:	4836      	ldr	r0, [pc, #216]	; (21b50 <z_impl_k_sem_take+0xf4>)
   21a76:	2379      	movs	r3, #121	; 0x79
   21a78:	f002 fe3e 	bl	246f8 <printk>
   21a7c:	4835      	ldr	r0, [pc, #212]	; (21b54 <z_impl_k_sem_take+0xf8>)
   21a7e:	f002 fe3b 	bl	246f8 <printk>
   21a82:	4832      	ldr	r0, [pc, #200]	; (21b4c <z_impl_k_sem_take+0xf0>)
   21a84:	2179      	movs	r1, #121	; 0x79
   21a86:	f003 f828 	bl	24ada <assert_post_action>
   21a8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a8e:	f3ef 8511 	mrs	r5, BASEPRI
   21a92:	f383 8812 	msr	BASEPRI_MAX, r3
   21a96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a9a:	482f      	ldr	r0, [pc, #188]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21a9c:	f7ff fc1c 	bl	212d8 <z_spin_lock_valid>
   21aa0:	b968      	cbnz	r0, 21abe <z_impl_k_sem_take+0x62>
   21aa2:	4a2e      	ldr	r2, [pc, #184]	; (21b5c <z_impl_k_sem_take+0x100>)
   21aa4:	492e      	ldr	r1, [pc, #184]	; (21b60 <z_impl_k_sem_take+0x104>)
   21aa6:	482a      	ldr	r0, [pc, #168]	; (21b50 <z_impl_k_sem_take+0xf4>)
   21aa8:	2381      	movs	r3, #129	; 0x81
   21aaa:	f002 fe25 	bl	246f8 <printk>
   21aae:	492a      	ldr	r1, [pc, #168]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21ab0:	482c      	ldr	r0, [pc, #176]	; (21b64 <z_impl_k_sem_take+0x108>)
   21ab2:	f002 fe21 	bl	246f8 <printk>
   21ab6:	4829      	ldr	r0, [pc, #164]	; (21b5c <z_impl_k_sem_take+0x100>)
   21ab8:	2181      	movs	r1, #129	; 0x81
   21aba:	f003 f80e 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21abe:	4826      	ldr	r0, [pc, #152]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21ac0:	f7ff fc28 	bl	21314 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21ac4:	68a3      	ldr	r3, [r4, #8]
   21ac6:	b1d3      	cbz	r3, 21afe <z_impl_k_sem_take+0xa2>
		sem->count--;
   21ac8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21aca:	4823      	ldr	r0, [pc, #140]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21acc:	60a3      	str	r3, [r4, #8]
   21ace:	f7ff fc11 	bl	212f4 <z_spin_unlock_valid>
   21ad2:	b968      	cbnz	r0, 21af0 <z_impl_k_sem_take+0x94>
   21ad4:	4a21      	ldr	r2, [pc, #132]	; (21b5c <z_impl_k_sem_take+0x100>)
   21ad6:	4924      	ldr	r1, [pc, #144]	; (21b68 <z_impl_k_sem_take+0x10c>)
   21ad8:	481d      	ldr	r0, [pc, #116]	; (21b50 <z_impl_k_sem_take+0xf4>)
   21ada:	23ac      	movs	r3, #172	; 0xac
   21adc:	f002 fe0c 	bl	246f8 <printk>
   21ae0:	491d      	ldr	r1, [pc, #116]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21ae2:	4822      	ldr	r0, [pc, #136]	; (21b6c <z_impl_k_sem_take+0x110>)
   21ae4:	f002 fe08 	bl	246f8 <printk>
   21ae8:	481c      	ldr	r0, [pc, #112]	; (21b5c <z_impl_k_sem_take+0x100>)
   21aea:	21ac      	movs	r1, #172	; 0xac
   21aec:	f002 fff5 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21af0:	f385 8811 	msr	BASEPRI, r5
   21af4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21af8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21afa:	b003      	add	sp, #12
   21afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21afe:	ea56 0307 	orrs.w	r3, r6, r7
   21b02:	d118      	bne.n	21b36 <z_impl_k_sem_take+0xda>
   21b04:	4814      	ldr	r0, [pc, #80]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21b06:	f7ff fbf5 	bl	212f4 <z_spin_unlock_valid>
   21b0a:	b968      	cbnz	r0, 21b28 <z_impl_k_sem_take+0xcc>
   21b0c:	4a13      	ldr	r2, [pc, #76]	; (21b5c <z_impl_k_sem_take+0x100>)
   21b0e:	4916      	ldr	r1, [pc, #88]	; (21b68 <z_impl_k_sem_take+0x10c>)
   21b10:	480f      	ldr	r0, [pc, #60]	; (21b50 <z_impl_k_sem_take+0xf4>)
   21b12:	23ac      	movs	r3, #172	; 0xac
   21b14:	f002 fdf0 	bl	246f8 <printk>
   21b18:	490f      	ldr	r1, [pc, #60]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21b1a:	4814      	ldr	r0, [pc, #80]	; (21b6c <z_impl_k_sem_take+0x110>)
   21b1c:	f002 fdec 	bl	246f8 <printk>
   21b20:	480e      	ldr	r0, [pc, #56]	; (21b5c <z_impl_k_sem_take+0x100>)
   21b22:	21ac      	movs	r1, #172	; 0xac
   21b24:	f002 ffd9 	bl	24ada <assert_post_action>
   21b28:	f385 8811 	msr	BASEPRI, r5
   21b2c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21b30:	f06f 000f 	mvn.w	r0, #15
   21b34:	e7e1      	b.n	21afa <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21b36:	e9cd 6700 	strd	r6, r7, [sp]
   21b3a:	4622      	mov	r2, r4
   21b3c:	4629      	mov	r1, r5
   21b3e:	4806      	ldr	r0, [pc, #24]	; (21b58 <z_impl_k_sem_take+0xfc>)
   21b40:	f001 fa6c 	bl	2301c <z_pend_curr>
	return ret;
   21b44:	e7d9      	b.n	21afa <z_impl_k_sem_take+0x9e>
   21b46:	bf00      	nop
   21b48:	00030545 	.word	0x00030545
   21b4c:	00030525 	.word	0x00030525
   21b50:	000290f5 	.word	0x000290f5
   21b54:	0002f37f 	.word	0x0002f37f
   21b58:	20002534 	.word	0x20002534
   21b5c:	000291b5 	.word	0x000291b5
   21b60:	00029207 	.word	0x00029207
   21b64:	0002921c 	.word	0x0002921c
   21b68:	000291db 	.word	0x000291db
   21b6c:	000291f2 	.word	0x000291f2

00021b70 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   21b70:	b570      	push	{r4, r5, r6, lr}
   21b72:	4604      	mov	r4, r0
	__asm__ volatile(
   21b74:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b78:	f3ef 8511 	mrs	r5, BASEPRI
   21b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   21b80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b84:	4815      	ldr	r0, [pc, #84]	; (21bdc <z_impl_k_sem_reset+0x6c>)
   21b86:	f7ff fba7 	bl	212d8 <z_spin_lock_valid>
   21b8a:	b968      	cbnz	r0, 21ba8 <z_impl_k_sem_reset+0x38>
   21b8c:	4a14      	ldr	r2, [pc, #80]	; (21be0 <z_impl_k_sem_reset+0x70>)
   21b8e:	4915      	ldr	r1, [pc, #84]	; (21be4 <z_impl_k_sem_reset+0x74>)
   21b90:	4815      	ldr	r0, [pc, #84]	; (21be8 <z_impl_k_sem_reset+0x78>)
   21b92:	2381      	movs	r3, #129	; 0x81
   21b94:	f002 fdb0 	bl	246f8 <printk>
   21b98:	4910      	ldr	r1, [pc, #64]	; (21bdc <z_impl_k_sem_reset+0x6c>)
   21b9a:	4814      	ldr	r0, [pc, #80]	; (21bec <z_impl_k_sem_reset+0x7c>)
   21b9c:	f002 fdac 	bl	246f8 <printk>
   21ba0:	480f      	ldr	r0, [pc, #60]	; (21be0 <z_impl_k_sem_reset+0x70>)
   21ba2:	2181      	movs	r1, #129	; 0x81
   21ba4:	f002 ff99 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21ba8:	480c      	ldr	r0, [pc, #48]	; (21bdc <z_impl_k_sem_reset+0x6c>)
   21baa:	f7ff fbb3 	bl	21314 <z_spin_lock_set_owner>
   21bae:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   21bb2:	4620      	mov	r0, r4
   21bb4:	f001 fc30 	bl	23418 <z_unpend_first_thread>
		if (thread == NULL) {
   21bb8:	b118      	cbz	r0, 21bc2 <z_impl_k_sem_reset+0x52>
   21bba:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   21bbc:	f001 f87c 	bl	22cb8 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   21bc0:	e7f7      	b.n	21bb2 <z_impl_k_sem_reset+0x42>
	}
	sem->count = 0;
   21bc2:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21bc4:	2102      	movs	r1, #2
   21bc6:	f104 0010 	add.w	r0, r4, #16
   21bca:	f006 fb57 	bl	2827c <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   21bce:	4629      	mov	r1, r5
   21bd0:	4802      	ldr	r0, [pc, #8]	; (21bdc <z_impl_k_sem_reset+0x6c>)
}
   21bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   21bd6:	f000 bdcf 	b.w	22778 <z_reschedule>
   21bda:	bf00      	nop
   21bdc:	20002534 	.word	0x20002534
   21be0:	000291b5 	.word	0x000291b5
   21be4:	00029207 	.word	0x00029207
   21be8:	000290f5 	.word	0x000290f5
   21bec:	0002921c 	.word	0x0002921c

00021bf0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21bf2:	4b09      	ldr	r3, [pc, #36]	; (21c18 <k_sys_work_q_init+0x28>)
   21bf4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21bf6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21bf8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21bfa:	9300      	str	r3, [sp, #0]
   21bfc:	4907      	ldr	r1, [pc, #28]	; (21c1c <k_sys_work_q_init+0x2c>)
   21bfe:	4808      	ldr	r0, [pc, #32]	; (21c20 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21c00:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   21c04:	f04f 33ff 	mov.w	r3, #4294967295
   21c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21c0c:	f000 fa60 	bl	220d0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21c10:	4620      	mov	r0, r4
   21c12:	b004      	add	sp, #16
   21c14:	bd10      	pop	{r4, pc}
   21c16:	bf00      	nop
   21c18:	00030592 	.word	0x00030592
   21c1c:	200048a0 	.word	0x200048a0
   21c20:	20001e18 	.word	0x20001e18

00021c24 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c28:	4e7e      	ldr	r6, [pc, #504]	; (21e24 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21c2a:	4f7f      	ldr	r7, [pc, #508]	; (21e28 <work_queue_main+0x204>)
{
   21c2c:	b085      	sub	sp, #20
   21c2e:	4604      	mov	r4, r0
   21c30:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c34:	f3ef 8811 	mrs	r8, BASEPRI
   21c38:	f383 8812 	msr	BASEPRI_MAX, r3
   21c3c:	f3bf 8f6f 	isb	sy
   21c40:	4630      	mov	r0, r6
   21c42:	f7ff fb49 	bl	212d8 <z_spin_lock_valid>
   21c46:	b968      	cbnz	r0, 21c64 <work_queue_main+0x40>
   21c48:	4a78      	ldr	r2, [pc, #480]	; (21e2c <work_queue_main+0x208>)
   21c4a:	4979      	ldr	r1, [pc, #484]	; (21e30 <work_queue_main+0x20c>)
   21c4c:	4879      	ldr	r0, [pc, #484]	; (21e34 <work_queue_main+0x210>)
   21c4e:	2381      	movs	r3, #129	; 0x81
   21c50:	f002 fd52 	bl	246f8 <printk>
   21c54:	4878      	ldr	r0, [pc, #480]	; (21e38 <work_queue_main+0x214>)
   21c56:	4631      	mov	r1, r6
   21c58:	f002 fd4e 	bl	246f8 <printk>
   21c5c:	4873      	ldr	r0, [pc, #460]	; (21e2c <work_queue_main+0x208>)
   21c5e:	2181      	movs	r1, #129	; 0x81
   21c60:	f002 ff3b 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21c64:	4630      	mov	r0, r6
   21c66:	f7ff fb55 	bl	21314 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   21c6a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   21c6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   21c72:	b9ad      	cbnz	r5, 21ca0 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   21c74:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21c78:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   21c7a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   21c7e:	f100 8092 	bmi.w	21da6 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21c82:	2300      	movs	r3, #0
   21c84:	9302      	str	r3, [sp, #8]
   21c86:	f04f 32ff 	mov.w	r2, #4294967295
   21c8a:	f04f 33ff 	mov.w	r3, #4294967295
   21c8e:	e9cd 2300 	strd	r2, r3, [sp]
   21c92:	4641      	mov	r1, r8
   21c94:	f104 0288 	add.w	r2, r4, #136	; 0x88
   21c98:	4630      	mov	r0, r6
   21c9a:	f001 fec5 	bl	23a28 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   21c9e:	e7c7      	b.n	21c30 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21ca0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   21ca4:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   21ca6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21caa:	428d      	cmp	r5, r1
   21cac:	d101      	bne.n	21cb2 <work_queue_main+0x8e>
	list->tail = node;
   21cae:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   21cb2:	f043 0302 	orr.w	r3, r3, #2
   21cb6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   21cba:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   21cbc:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   21cc0:	f023 0304 	bic.w	r3, r3, #4
   21cc4:	f043 0301 	orr.w	r3, r3, #1
   21cc8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cca:	4630      	mov	r0, r6
   21ccc:	f7ff fb12 	bl	212f4 <z_spin_unlock_valid>
   21cd0:	b968      	cbnz	r0, 21cee <work_queue_main+0xca>
   21cd2:	4a56      	ldr	r2, [pc, #344]	; (21e2c <work_queue_main+0x208>)
   21cd4:	4959      	ldr	r1, [pc, #356]	; (21e3c <work_queue_main+0x218>)
   21cd6:	4857      	ldr	r0, [pc, #348]	; (21e34 <work_queue_main+0x210>)
   21cd8:	23ac      	movs	r3, #172	; 0xac
   21cda:	f002 fd0d 	bl	246f8 <printk>
   21cde:	4858      	ldr	r0, [pc, #352]	; (21e40 <work_queue_main+0x21c>)
   21ce0:	4631      	mov	r1, r6
   21ce2:	f002 fd09 	bl	246f8 <printk>
   21ce6:	4851      	ldr	r0, [pc, #324]	; (21e2c <work_queue_main+0x208>)
   21ce8:	21ac      	movs	r1, #172	; 0xac
   21cea:	f002 fef6 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21cee:	f388 8811 	msr	BASEPRI, r8
   21cf2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   21cf6:	f1b9 0f00 	cmp.w	r9, #0
   21cfa:	d10b      	bne.n	21d14 <work_queue_main+0xf0>
   21cfc:	4951      	ldr	r1, [pc, #324]	; (21e44 <work_queue_main+0x220>)
   21cfe:	484d      	ldr	r0, [pc, #308]	; (21e34 <work_queue_main+0x210>)
   21d00:	4a51      	ldr	r2, [pc, #324]	; (21e48 <work_queue_main+0x224>)
   21d02:	f44f 7322 	mov.w	r3, #648	; 0x288
   21d06:	f002 fcf7 	bl	246f8 <printk>
   21d0a:	484f      	ldr	r0, [pc, #316]	; (21e48 <work_queue_main+0x224>)
   21d0c:	f44f 7122 	mov.w	r1, #648	; 0x288
   21d10:	f002 fee3 	bl	24ada <assert_post_action>
		handler(work);
   21d14:	4628      	mov	r0, r5
   21d16:	47c8      	blx	r9
	__asm__ volatile(
   21d18:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d1c:	f3ef 8a11 	mrs	sl, BASEPRI
   21d20:	f383 8812 	msr	BASEPRI_MAX, r3
   21d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d28:	4630      	mov	r0, r6
   21d2a:	f7ff fad5 	bl	212d8 <z_spin_lock_valid>
   21d2e:	b968      	cbnz	r0, 21d4c <work_queue_main+0x128>
   21d30:	4a3e      	ldr	r2, [pc, #248]	; (21e2c <work_queue_main+0x208>)
   21d32:	493f      	ldr	r1, [pc, #252]	; (21e30 <work_queue_main+0x20c>)
   21d34:	483f      	ldr	r0, [pc, #252]	; (21e34 <work_queue_main+0x210>)
   21d36:	2381      	movs	r3, #129	; 0x81
   21d38:	f002 fcde 	bl	246f8 <printk>
   21d3c:	483e      	ldr	r0, [pc, #248]	; (21e38 <work_queue_main+0x214>)
   21d3e:	4631      	mov	r1, r6
   21d40:	f002 fcda 	bl	246f8 <printk>
   21d44:	4839      	ldr	r0, [pc, #228]	; (21e2c <work_queue_main+0x208>)
   21d46:	2181      	movs	r1, #129	; 0x81
   21d48:	f002 fec7 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21d4c:	4630      	mov	r0, r6
   21d4e:	f7ff fae1 	bl	21314 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   21d52:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21d54:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21d56:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21d5a:	d42e      	bmi.n	21dba <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   21d5c:	60ea      	str	r2, [r5, #12]
   21d5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   21d62:	f023 0302 	bic.w	r3, r3, #2
   21d66:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d6a:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   21d6c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   21d70:	f7ff fac0 	bl	212f4 <z_spin_unlock_valid>
   21d74:	b968      	cbnz	r0, 21d92 <work_queue_main+0x16e>
   21d76:	4a2d      	ldr	r2, [pc, #180]	; (21e2c <work_queue_main+0x208>)
   21d78:	4930      	ldr	r1, [pc, #192]	; (21e3c <work_queue_main+0x218>)
   21d7a:	482e      	ldr	r0, [pc, #184]	; (21e34 <work_queue_main+0x210>)
   21d7c:	23ac      	movs	r3, #172	; 0xac
   21d7e:	f002 fcbb 	bl	246f8 <printk>
   21d82:	482f      	ldr	r0, [pc, #188]	; (21e40 <work_queue_main+0x21c>)
   21d84:	4631      	mov	r1, r6
   21d86:	f002 fcb7 	bl	246f8 <printk>
   21d8a:	4828      	ldr	r0, [pc, #160]	; (21e2c <work_queue_main+0x208>)
   21d8c:	21ac      	movs	r1, #172	; 0xac
   21d8e:	f002 fea4 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21d92:	f38a 8811 	msr	BASEPRI, sl
   21d96:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   21d9a:	2d00      	cmp	r5, #0
   21d9c:	f47f af48 	bne.w	21c30 <work_queue_main+0xc>
	z_impl_k_yield();
   21da0:	f001 fb96 	bl	234d0 <z_impl_k_yield>
}
   21da4:	e744      	b.n	21c30 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21da6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21daa:	2200      	movs	r2, #0
   21dac:	2101      	movs	r1, #1
   21dae:	4628      	mov	r0, r5
   21db0:	f001 fde2 	bl	23978 <z_sched_wake>
   21db4:	2800      	cmp	r0, #0
   21db6:	d1f8      	bne.n	21daa <work_queue_main+0x186>
   21db8:	e763      	b.n	21c82 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21dba:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21dbc:	f023 0303 	bic.w	r3, r3, #3
   21dc0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21dc2:	2800      	cmp	r0, #0
   21dc4:	d0cb      	beq.n	21d5e <work_queue_main+0x13a>
	return node->next;
   21dc6:	6803      	ldr	r3, [r0, #0]
   21dc8:	2b00      	cmp	r3, #0
   21dca:	bf38      	it	cc
   21dcc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21dce:	f04f 0900 	mov.w	r9, #0
   21dd2:	4698      	mov	r8, r3
	parent->next = child;
   21dd4:	46cb      	mov	fp, r9
		if (wc->work == work) {
   21dd6:	6843      	ldr	r3, [r0, #4]
   21dd8:	429d      	cmp	r5, r3
   21dda:	4602      	mov	r2, r0
   21ddc:	d10d      	bne.n	21dfa <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   21dde:	6802      	ldr	r2, [r0, #0]
   21de0:	f1b9 0f00 	cmp.w	r9, #0
   21de4:	d115      	bne.n	21e12 <work_queue_main+0x1ee>
   21de6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   21de8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   21dea:	4283      	cmp	r3, r0
   21dec:	d100      	bne.n	21df0 <work_queue_main+0x1cc>
	list->tail = node;
   21dee:	607a      	str	r2, [r7, #4]
	parent->next = child;
   21df0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   21df4:	f7ff fdee 	bl	219d4 <z_impl_k_sem_give>
}
   21df8:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21dfa:	f1b8 0f00 	cmp.w	r8, #0
   21dfe:	d0ae      	beq.n	21d5e <work_queue_main+0x13a>
	return node->next;
   21e00:	f8d8 3000 	ldr.w	r3, [r8]
   21e04:	2b00      	cmp	r3, #0
   21e06:	bf38      	it	cc
   21e08:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e0a:	4640      	mov	r0, r8
   21e0c:	4691      	mov	r9, r2
   21e0e:	4698      	mov	r8, r3
   21e10:	e7e1      	b.n	21dd6 <work_queue_main+0x1b2>
	parent->next = child;
   21e12:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   21e16:	687b      	ldr	r3, [r7, #4]
   21e18:	4283      	cmp	r3, r0
	list->tail = node;
   21e1a:	bf08      	it	eq
   21e1c:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   21e20:	e7e6      	b.n	21df0 <work_queue_main+0x1cc>
   21e22:	bf00      	nop
   21e24:	20002538 	.word	0x20002538
   21e28:	2000253c 	.word	0x2000253c
   21e2c:	000291b5 	.word	0x000291b5
   21e30:	00029207 	.word	0x00029207
   21e34:	000290f5 	.word	0x000290f5
   21e38:	0002921c 	.word	0x0002921c
   21e3c:	000291db 	.word	0x000291db
   21e40:	000291f2 	.word	0x000291f2
   21e44:	000305bc 	.word	0x000305bc
   21e48:	0003059b 	.word	0x0003059b

00021e4c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   21e4c:	68c3      	ldr	r3, [r0, #12]
{
   21e4e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21e50:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   21e54:	079b      	lsls	r3, r3, #30
{
   21e56:	4605      	mov	r5, r0
   21e58:	460c      	mov	r4, r1
	if (ret) {
   21e5a:	d50d      	bpl.n	21e78 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21e5c:	2201      	movs	r2, #1
   21e5e:	2100      	movs	r1, #0
   21e60:	f104 0008 	add.w	r0, r4, #8
   21e64:	f006 f928 	bl	280b8 <z_impl_k_sem_init>
	parent->next = child;
   21e68:	2300      	movs	r3, #0
   21e6a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21e6c:	4b05      	ldr	r3, [pc, #20]	; (21e84 <cancel_sync_locked+0x38>)
	canceler->work = work;
   21e6e:	6065      	str	r5, [r4, #4]
   21e70:	685a      	ldr	r2, [r3, #4]
   21e72:	b91a      	cbnz	r2, 21e7c <cancel_sync_locked+0x30>
	list->head = node;
   21e74:	e9c3 4400 	strd	r4, r4, [r3]
}
   21e78:	4630      	mov	r0, r6
   21e7a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21e7c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21e7e:	605c      	str	r4, [r3, #4]
}
   21e80:	e7fa      	b.n	21e78 <cancel_sync_locked+0x2c>
   21e82:	bf00      	nop
   21e84:	2000253c 	.word	0x2000253c

00021e88 <submit_to_queue_locked>:
{
   21e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21e8a:	68c3      	ldr	r3, [r0, #12]
   21e8c:	079a      	lsls	r2, r3, #30
{
   21e8e:	4604      	mov	r4, r0
   21e90:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21e92:	f3c3 0540 	ubfx	r5, r3, #1, #1
   21e96:	d42b      	bmi.n	21ef0 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21e98:	075f      	lsls	r7, r3, #29
   21e9a:	d42b      	bmi.n	21ef4 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   21e9c:	680a      	ldr	r2, [r1, #0]
   21e9e:	b90a      	cbnz	r2, 21ea4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21ea0:	6882      	ldr	r2, [r0, #8]
   21ea2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   21ea4:	07d8      	lsls	r0, r3, #31
   21ea6:	d528      	bpl.n	21efa <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   21ea8:	68a3      	ldr	r3, [r4, #8]
   21eaa:	b95b      	cbnz	r3, 21ec4 <submit_to_queue_locked+0x3c>
   21eac:	4924      	ldr	r1, [pc, #144]	; (21f40 <submit_to_queue_locked+0xb8>)
   21eae:	4825      	ldr	r0, [pc, #148]	; (21f44 <submit_to_queue_locked+0xbc>)
   21eb0:	4a25      	ldr	r2, [pc, #148]	; (21f48 <submit_to_queue_locked+0xc0>)
   21eb2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   21eb6:	f002 fc1f 	bl	246f8 <printk>
   21eba:	4823      	ldr	r0, [pc, #140]	; (21f48 <submit_to_queue_locked+0xc0>)
   21ebc:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21ec0:	f002 fe0b 	bl	24ada <assert_post_action>
			*queuep = work->queue;
   21ec4:	68a3      	ldr	r3, [r4, #8]
   21ec6:	6033      	str	r3, [r6, #0]
			ret = 2;
   21ec8:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   21eca:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   21ecc:	b38f      	cbz	r7, 21f32 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21ece:	4b1f      	ldr	r3, [pc, #124]	; (21f4c <submit_to_queue_locked+0xc4>)
   21ed0:	689b      	ldr	r3, [r3, #8]
   21ed2:	42bb      	cmp	r3, r7
   21ed4:	d113      	bne.n	21efe <submit_to_queue_locked+0x76>
   21ed6:	f006 f8ad 	bl	28034 <k_is_in_isr>
   21eda:	f080 0001 	eor.w	r0, r0, #1
   21ede:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   21ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21ee4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21ee6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21eea:	d525      	bpl.n	21f38 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   21eec:	b14a      	cbz	r2, 21f02 <submit_to_queue_locked+0x7a>
   21eee:	b950      	cbnz	r0, 21f06 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   21ef0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   21ef4:	2300      	movs	r3, #0
   21ef6:	6033      	str	r3, [r6, #0]
	return ret;
   21ef8:	e015      	b.n	21f26 <submit_to_queue_locked+0x9e>
		ret = 1;
   21efa:	2501      	movs	r5, #1
   21efc:	e7e5      	b.n	21eca <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21efe:	2000      	movs	r0, #0
   21f00:	e7ee      	b.n	21ee0 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   21f02:	071b      	lsls	r3, r3, #28
   21f04:	d4f4      	bmi.n	21ef0 <submit_to_queue_locked+0x68>
	parent->next = child;
   21f06:	2300      	movs	r3, #0
   21f08:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   21f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   21f0e:	b963      	cbnz	r3, 21f2a <submit_to_queue_locked+0xa2>
	list->head = node;
   21f10:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   21f14:	4638      	mov	r0, r7
   21f16:	f006 f8df 	bl	280d8 <notify_queue_locked>
	*flagp |= BIT(bit);
   21f1a:	68e3      	ldr	r3, [r4, #12]
   21f1c:	f043 0304 	orr.w	r3, r3, #4
   21f20:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21f22:	6833      	ldr	r3, [r6, #0]
   21f24:	60a3      	str	r3, [r4, #8]
}
   21f26:	4628      	mov	r0, r5
   21f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   21f2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21f2c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   21f30:	e7f0      	b.n	21f14 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   21f32:	f06f 0515 	mvn.w	r5, #21
   21f36:	e7dd      	b.n	21ef4 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   21f38:	f06f 0512 	mvn.w	r5, #18
   21f3c:	e7da      	b.n	21ef4 <submit_to_queue_locked+0x6c>
   21f3e:	bf00      	nop
   21f40:	000305d3 	.word	0x000305d3
   21f44:	000290f5 	.word	0x000290f5
   21f48:	0003059b 	.word	0x0003059b
   21f4c:	20002508 	.word	0x20002508

00021f50 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f52:	4604      	mov	r4, r0
	__asm__ volatile(
   21f54:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f58:	f3ef 8511 	mrs	r5, BASEPRI
   21f5c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f64:	481e      	ldr	r0, [pc, #120]	; (21fe0 <work_timeout+0x90>)
   21f66:	f7ff f9b7 	bl	212d8 <z_spin_lock_valid>
   21f6a:	b968      	cbnz	r0, 21f88 <work_timeout+0x38>
   21f6c:	4a1d      	ldr	r2, [pc, #116]	; (21fe4 <work_timeout+0x94>)
   21f6e:	491e      	ldr	r1, [pc, #120]	; (21fe8 <work_timeout+0x98>)
   21f70:	481e      	ldr	r0, [pc, #120]	; (21fec <work_timeout+0x9c>)
   21f72:	2381      	movs	r3, #129	; 0x81
   21f74:	f002 fbc0 	bl	246f8 <printk>
   21f78:	4919      	ldr	r1, [pc, #100]	; (21fe0 <work_timeout+0x90>)
   21f7a:	481d      	ldr	r0, [pc, #116]	; (21ff0 <work_timeout+0xa0>)
   21f7c:	f002 fbbc 	bl	246f8 <printk>
   21f80:	4818      	ldr	r0, [pc, #96]	; (21fe4 <work_timeout+0x94>)
   21f82:	2181      	movs	r1, #129	; 0x81
   21f84:	f002 fda9 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   21f88:	4815      	ldr	r0, [pc, #84]	; (21fe0 <work_timeout+0x90>)
   21f8a:	f7ff f9c3 	bl	21314 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21f8e:	2300      	movs	r3, #0
   21f90:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   21f92:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   21f96:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21f9a:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   21f9c:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21fa0:	d506      	bpl.n	21fb0 <work_timeout+0x60>
		queue = dw->queue;
   21fa2:	69a3      	ldr	r3, [r4, #24]
   21fa4:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21fa6:	a901      	add	r1, sp, #4
   21fa8:	f1a4 0010 	sub.w	r0, r4, #16
   21fac:	f7ff ff6c 	bl	21e88 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fb0:	480b      	ldr	r0, [pc, #44]	; (21fe0 <work_timeout+0x90>)
   21fb2:	f7ff f99f 	bl	212f4 <z_spin_unlock_valid>
   21fb6:	b968      	cbnz	r0, 21fd4 <work_timeout+0x84>
   21fb8:	4a0a      	ldr	r2, [pc, #40]	; (21fe4 <work_timeout+0x94>)
   21fba:	490e      	ldr	r1, [pc, #56]	; (21ff4 <work_timeout+0xa4>)
   21fbc:	480b      	ldr	r0, [pc, #44]	; (21fec <work_timeout+0x9c>)
   21fbe:	23ac      	movs	r3, #172	; 0xac
   21fc0:	f002 fb9a 	bl	246f8 <printk>
   21fc4:	4906      	ldr	r1, [pc, #24]	; (21fe0 <work_timeout+0x90>)
   21fc6:	480c      	ldr	r0, [pc, #48]	; (21ff8 <work_timeout+0xa8>)
   21fc8:	f002 fb96 	bl	246f8 <printk>
   21fcc:	4805      	ldr	r0, [pc, #20]	; (21fe4 <work_timeout+0x94>)
   21fce:	21ac      	movs	r1, #172	; 0xac
   21fd0:	f002 fd83 	bl	24ada <assert_post_action>
	__asm__ volatile(
   21fd4:	f385 8811 	msr	BASEPRI, r5
   21fd8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21fdc:	b003      	add	sp, #12
   21fde:	bd30      	pop	{r4, r5, pc}
   21fe0:	20002538 	.word	0x20002538
   21fe4:	000291b5 	.word	0x000291b5
   21fe8:	00029207 	.word	0x00029207
   21fec:	000290f5 	.word	0x000290f5
   21ff0:	0002921c 	.word	0x0002921c
   21ff4:	000291db 	.word	0x000291db
   21ff8:	000291f2 	.word	0x000291f2

00021ffc <k_work_submit_to_queue>:
{
   21ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21ffe:	460c      	mov	r4, r1
{
   22000:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   22002:	b959      	cbnz	r1, 2201c <k_work_submit_to_queue+0x20>
   22004:	4926      	ldr	r1, [pc, #152]	; (220a0 <k_work_submit_to_queue+0xa4>)
   22006:	4827      	ldr	r0, [pc, #156]	; (220a4 <k_work_submit_to_queue+0xa8>)
   22008:	4a27      	ldr	r2, [pc, #156]	; (220a8 <k_work_submit_to_queue+0xac>)
   2200a:	f240 1369 	movw	r3, #361	; 0x169
   2200e:	f002 fb73 	bl	246f8 <printk>
   22012:	4825      	ldr	r0, [pc, #148]	; (220a8 <k_work_submit_to_queue+0xac>)
   22014:	f240 1169 	movw	r1, #361	; 0x169
   22018:	f002 fd5f 	bl	24ada <assert_post_action>
	__asm__ volatile(
   2201c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22020:	f3ef 8511 	mrs	r5, BASEPRI
   22024:	f383 8812 	msr	BASEPRI_MAX, r3
   22028:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2202c:	481f      	ldr	r0, [pc, #124]	; (220ac <k_work_submit_to_queue+0xb0>)
   2202e:	f7ff f953 	bl	212d8 <z_spin_lock_valid>
   22032:	b968      	cbnz	r0, 22050 <k_work_submit_to_queue+0x54>
   22034:	4a1e      	ldr	r2, [pc, #120]	; (220b0 <k_work_submit_to_queue+0xb4>)
   22036:	491f      	ldr	r1, [pc, #124]	; (220b4 <k_work_submit_to_queue+0xb8>)
   22038:	481a      	ldr	r0, [pc, #104]	; (220a4 <k_work_submit_to_queue+0xa8>)
   2203a:	2381      	movs	r3, #129	; 0x81
   2203c:	f002 fb5c 	bl	246f8 <printk>
   22040:	491a      	ldr	r1, [pc, #104]	; (220ac <k_work_submit_to_queue+0xb0>)
   22042:	481d      	ldr	r0, [pc, #116]	; (220b8 <k_work_submit_to_queue+0xbc>)
   22044:	f002 fb58 	bl	246f8 <printk>
   22048:	4819      	ldr	r0, [pc, #100]	; (220b0 <k_work_submit_to_queue+0xb4>)
   2204a:	2181      	movs	r1, #129	; 0x81
   2204c:	f002 fd45 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22050:	4816      	ldr	r0, [pc, #88]	; (220ac <k_work_submit_to_queue+0xb0>)
   22052:	f7ff f95f 	bl	21314 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   22056:	4620      	mov	r0, r4
   22058:	a901      	add	r1, sp, #4
   2205a:	f7ff ff15 	bl	21e88 <submit_to_queue_locked>
   2205e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22060:	4812      	ldr	r0, [pc, #72]	; (220ac <k_work_submit_to_queue+0xb0>)
   22062:	f7ff f947 	bl	212f4 <z_spin_unlock_valid>
   22066:	b968      	cbnz	r0, 22084 <k_work_submit_to_queue+0x88>
   22068:	4a11      	ldr	r2, [pc, #68]	; (220b0 <k_work_submit_to_queue+0xb4>)
   2206a:	4914      	ldr	r1, [pc, #80]	; (220bc <k_work_submit_to_queue+0xc0>)
   2206c:	480d      	ldr	r0, [pc, #52]	; (220a4 <k_work_submit_to_queue+0xa8>)
   2206e:	23ac      	movs	r3, #172	; 0xac
   22070:	f002 fb42 	bl	246f8 <printk>
   22074:	490d      	ldr	r1, [pc, #52]	; (220ac <k_work_submit_to_queue+0xb0>)
   22076:	4812      	ldr	r0, [pc, #72]	; (220c0 <k_work_submit_to_queue+0xc4>)
   22078:	f002 fb3e 	bl	246f8 <printk>
   2207c:	480c      	ldr	r0, [pc, #48]	; (220b0 <k_work_submit_to_queue+0xb4>)
   2207e:	21ac      	movs	r1, #172	; 0xac
   22080:	f002 fd2b 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22084:	f385 8811 	msr	BASEPRI, r5
   22088:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2208c:	2c00      	cmp	r4, #0
   2208e:	dd04      	ble.n	2209a <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   22090:	f001 fbae 	bl	237f0 <z_impl_k_is_preempt_thread>
   22094:	b108      	cbz	r0, 2209a <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   22096:	f001 fa1b 	bl	234d0 <z_impl_k_yield>
}
   2209a:	4620      	mov	r0, r4
   2209c:	b003      	add	sp, #12
   2209e:	bd30      	pop	{r4, r5, pc}
   220a0:	00030672 	.word	0x00030672
   220a4:	000290f5 	.word	0x000290f5
   220a8:	0003059b 	.word	0x0003059b
   220ac:	20002538 	.word	0x20002538
   220b0:	000291b5 	.word	0x000291b5
   220b4:	00029207 	.word	0x00029207
   220b8:	0002921c 	.word	0x0002921c
   220bc:	000291db 	.word	0x000291db
   220c0:	000291f2 	.word	0x000291f2

000220c4 <k_work_submit>:
{
   220c4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   220c6:	4801      	ldr	r0, [pc, #4]	; (220cc <k_work_submit+0x8>)
   220c8:	f7ff bf98 	b.w	21ffc <k_work_submit_to_queue>
   220cc:	20001e18 	.word	0x20001e18

000220d0 <k_work_queue_start>:
{
   220d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220d4:	b088      	sub	sp, #32
   220d6:	460e      	mov	r6, r1
   220d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   220da:	4617      	mov	r7, r2
   220dc:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   220de:	4604      	mov	r4, r0
   220e0:	b958      	cbnz	r0, 220fa <k_work_queue_start+0x2a>
   220e2:	492e      	ldr	r1, [pc, #184]	; (2219c <k_work_queue_start+0xcc>)
   220e4:	482e      	ldr	r0, [pc, #184]	; (221a0 <k_work_queue_start+0xd0>)
   220e6:	4a2f      	ldr	r2, [pc, #188]	; (221a4 <k_work_queue_start+0xd4>)
   220e8:	f240 23b5 	movw	r3, #693	; 0x2b5
   220ec:	f002 fb04 	bl	246f8 <printk>
   220f0:	482c      	ldr	r0, [pc, #176]	; (221a4 <k_work_queue_start+0xd4>)
   220f2:	f240 21b5 	movw	r1, #693	; 0x2b5
   220f6:	f002 fcf0 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(stack);
   220fa:	b95e      	cbnz	r6, 22114 <k_work_queue_start+0x44>
   220fc:	492a      	ldr	r1, [pc, #168]	; (221a8 <k_work_queue_start+0xd8>)
   220fe:	4828      	ldr	r0, [pc, #160]	; (221a0 <k_work_queue_start+0xd0>)
   22100:	4a28      	ldr	r2, [pc, #160]	; (221a4 <k_work_queue_start+0xd4>)
   22102:	f240 23b6 	movw	r3, #694	; 0x2b6
   22106:	f002 faf7 	bl	246f8 <printk>
   2210a:	4826      	ldr	r0, [pc, #152]	; (221a4 <k_work_queue_start+0xd4>)
   2210c:	f240 21b6 	movw	r1, #694	; 0x2b6
   22110:	f002 fce3 	bl	24ada <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   22114:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   22118:	07db      	lsls	r3, r3, #31
   2211a:	d50b      	bpl.n	22134 <k_work_queue_start+0x64>
   2211c:	4923      	ldr	r1, [pc, #140]	; (221ac <k_work_queue_start+0xdc>)
   2211e:	4820      	ldr	r0, [pc, #128]	; (221a0 <k_work_queue_start+0xd0>)
   22120:	4a20      	ldr	r2, [pc, #128]	; (221a4 <k_work_queue_start+0xd4>)
   22122:	f240 23b7 	movw	r3, #695	; 0x2b7
   22126:	f002 fae7 	bl	246f8 <printk>
   2212a:	481e      	ldr	r0, [pc, #120]	; (221a4 <k_work_queue_start+0xd4>)
   2212c:	f240 21b7 	movw	r1, #695	; 0x2b7
   22130:	f002 fcd3 	bl	24ada <assert_post_action>
	list->head = NULL;
   22134:	2300      	movs	r3, #0
	list->tail = NULL;
   22136:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   2213a:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2213e:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   22142:	f104 0390 	add.w	r3, r4, #144	; 0x90
   22146:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   2214a:	b32d      	cbz	r5, 22198 <k_work_queue_start+0xc8>
   2214c:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2214e:	2b00      	cmp	r3, #0
   22150:	f240 1101 	movw	r1, #257	; 0x101
   22154:	bf08      	it	eq
   22156:	2101      	moveq	r1, #1
	*flagp = flags;
   22158:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2215c:	f04f 32ff 	mov.w	r2, #4294967295
   22160:	f04f 33ff 	mov.w	r3, #4294967295
   22164:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22168:	2200      	movs	r2, #0
   2216a:	e9cd 8203 	strd	r8, r2, [sp, #12]
   2216e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   22172:	4b0f      	ldr	r3, [pc, #60]	; (221b0 <k_work_queue_start+0xe0>)
   22174:	9400      	str	r4, [sp, #0]
   22176:	463a      	mov	r2, r7
   22178:	4631      	mov	r1, r6
   2217a:	4620      	mov	r0, r4
   2217c:	f7fe ffce 	bl	2111c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   22180:	b125      	cbz	r5, 2218c <k_work_queue_start+0xbc>
   22182:	6829      	ldr	r1, [r5, #0]
   22184:	b111      	cbz	r1, 2218c <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   22186:	4620      	mov	r0, r4
   22188:	f005 ff5a 	bl	28040 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2218c:	4620      	mov	r0, r4
}
   2218e:	b008      	add	sp, #32
   22190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22194:	f005 bf59 	b.w	2804a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22198:	2101      	movs	r1, #1
   2219a:	e7dd      	b.n	22158 <k_work_queue_start+0x88>
   2219c:	00030631 	.word	0x00030631
   221a0:	000290f5 	.word	0x000290f5
   221a4:	0003059b 	.word	0x0003059b
   221a8:	00030637 	.word	0x00030637
   221ac:	0003063d 	.word	0x0003063d
   221b0:	00021c25 	.word	0x00021c25

000221b4 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   221b4:	b538      	push	{r3, r4, r5, lr}
   221b6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   221b8:	4604      	mov	r4, r0
   221ba:	b958      	cbnz	r0, 221d4 <k_work_init_delayable+0x20>
   221bc:	4911      	ldr	r1, [pc, #68]	; (22204 <k_work_init_delayable+0x50>)
   221be:	4812      	ldr	r0, [pc, #72]	; (22208 <k_work_init_delayable+0x54>)
   221c0:	4a12      	ldr	r2, [pc, #72]	; (2220c <k_work_init_delayable+0x58>)
   221c2:	f240 332d 	movw	r3, #813	; 0x32d
   221c6:	f002 fa97 	bl	246f8 <printk>
   221ca:	4810      	ldr	r0, [pc, #64]	; (2220c <k_work_init_delayable+0x58>)
   221cc:	f240 312d 	movw	r1, #813	; 0x32d
   221d0:	f002 fc83 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   221d4:	b95d      	cbnz	r5, 221ee <k_work_init_delayable+0x3a>
   221d6:	490e      	ldr	r1, [pc, #56]	; (22210 <k_work_init_delayable+0x5c>)
   221d8:	480b      	ldr	r0, [pc, #44]	; (22208 <k_work_init_delayable+0x54>)
   221da:	4a0c      	ldr	r2, [pc, #48]	; (2220c <k_work_init_delayable+0x58>)
   221dc:	f240 332e 	movw	r3, #814	; 0x32e
   221e0:	f002 fa8a 	bl	246f8 <printk>
   221e4:	4809      	ldr	r0, [pc, #36]	; (2220c <k_work_init_delayable+0x58>)
   221e6:	f240 312e 	movw	r1, #814	; 0x32e
   221ea:	f002 fc76 	bl	24ada <assert_post_action>

	*dwork = (struct k_work_delayable){
   221ee:	2230      	movs	r2, #48	; 0x30
   221f0:	2100      	movs	r1, #0
   221f2:	4620      	mov	r0, r4
   221f4:	f003 fbc1 	bl	2597a <memset>
   221f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   221fc:	6065      	str	r5, [r4, #4]
   221fe:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   22200:	bd38      	pop	{r3, r4, r5, pc}
   22202:	bf00      	nop
   22204:	00030671 	.word	0x00030671
   22208:	000290f5 	.word	0x000290f5
   2220c:	0003059b 	.word	0x0003059b
   22210:	000305bc 	.word	0x000305bc

00022214 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   22214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22216:	4616      	mov	r6, r2
   22218:	9001      	str	r0, [sp, #4]
   2221a:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2221c:	460c      	mov	r4, r1
   2221e:	b959      	cbnz	r1, 22238 <k_work_schedule_for_queue+0x24>
   22220:	492e      	ldr	r1, [pc, #184]	; (222dc <k_work_schedule_for_queue+0xc8>)
   22222:	482f      	ldr	r0, [pc, #188]	; (222e0 <k_work_schedule_for_queue+0xcc>)
   22224:	4a2f      	ldr	r2, [pc, #188]	; (222e4 <k_work_schedule_for_queue+0xd0>)
   22226:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   2222a:	f002 fa65 	bl	246f8 <printk>
   2222e:	482d      	ldr	r0, [pc, #180]	; (222e4 <k_work_schedule_for_queue+0xd0>)
   22230:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   22234:	f002 fc51 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22238:	f04f 0340 	mov.w	r3, #64	; 0x40
   2223c:	f3ef 8511 	mrs	r5, BASEPRI
   22240:	f383 8812 	msr	BASEPRI_MAX, r3
   22244:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22248:	4827      	ldr	r0, [pc, #156]	; (222e8 <k_work_schedule_for_queue+0xd4>)
   2224a:	f7ff f845 	bl	212d8 <z_spin_lock_valid>
   2224e:	b968      	cbnz	r0, 2226c <k_work_schedule_for_queue+0x58>
   22250:	4a26      	ldr	r2, [pc, #152]	; (222ec <k_work_schedule_for_queue+0xd8>)
   22252:	4927      	ldr	r1, [pc, #156]	; (222f0 <k_work_schedule_for_queue+0xdc>)
   22254:	4822      	ldr	r0, [pc, #136]	; (222e0 <k_work_schedule_for_queue+0xcc>)
   22256:	2381      	movs	r3, #129	; 0x81
   22258:	f002 fa4e 	bl	246f8 <printk>
   2225c:	4922      	ldr	r1, [pc, #136]	; (222e8 <k_work_schedule_for_queue+0xd4>)
   2225e:	4825      	ldr	r0, [pc, #148]	; (222f4 <k_work_schedule_for_queue+0xe0>)
   22260:	f002 fa4a 	bl	246f8 <printk>
   22264:	4821      	ldr	r0, [pc, #132]	; (222ec <k_work_schedule_for_queue+0xd8>)
   22266:	2181      	movs	r1, #129	; 0x81
   22268:	f002 fc37 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2226c:	481e      	ldr	r0, [pc, #120]	; (222e8 <k_work_schedule_for_queue+0xd4>)
   2226e:	f7ff f851 	bl	21314 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   22272:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   22274:	f013 0f0e 	tst.w	r3, #14
   22278:	d12e      	bne.n	222d8 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2227a:	ea56 0207 	orrs.w	r2, r6, r7
   2227e:	d11d      	bne.n	222bc <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   22280:	4620      	mov	r0, r4
   22282:	a901      	add	r1, sp, #4
   22284:	f7ff fe00 	bl	21e88 <submit_to_queue_locked>
   22288:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2228a:	4817      	ldr	r0, [pc, #92]	; (222e8 <k_work_schedule_for_queue+0xd4>)
   2228c:	f7ff f832 	bl	212f4 <z_spin_unlock_valid>
   22290:	b968      	cbnz	r0, 222ae <k_work_schedule_for_queue+0x9a>
   22292:	4a16      	ldr	r2, [pc, #88]	; (222ec <k_work_schedule_for_queue+0xd8>)
   22294:	4918      	ldr	r1, [pc, #96]	; (222f8 <k_work_schedule_for_queue+0xe4>)
   22296:	4812      	ldr	r0, [pc, #72]	; (222e0 <k_work_schedule_for_queue+0xcc>)
   22298:	23ac      	movs	r3, #172	; 0xac
   2229a:	f002 fa2d 	bl	246f8 <printk>
   2229e:	4912      	ldr	r1, [pc, #72]	; (222e8 <k_work_schedule_for_queue+0xd4>)
   222a0:	4816      	ldr	r0, [pc, #88]	; (222fc <k_work_schedule_for_queue+0xe8>)
   222a2:	f002 fa29 	bl	246f8 <printk>
   222a6:	4811      	ldr	r0, [pc, #68]	; (222ec <k_work_schedule_for_queue+0xd8>)
   222a8:	21ac      	movs	r1, #172	; 0xac
   222aa:	f002 fc16 	bl	24ada <assert_post_action>
	__asm__ volatile(
   222ae:	f385 8811 	msr	BASEPRI, r5
   222b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   222b6:	4620      	mov	r0, r4
   222b8:	b003      	add	sp, #12
   222ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   222bc:	f043 0308 	orr.w	r3, r3, #8
   222c0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   222c2:	9b01      	ldr	r3, [sp, #4]
   222c4:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   222c6:	f104 0010 	add.w	r0, r4, #16
   222ca:	490d      	ldr	r1, [pc, #52]	; (22300 <k_work_schedule_for_queue+0xec>)
   222cc:	4632      	mov	r2, r6
   222ce:	463b      	mov	r3, r7
   222d0:	f001 fc26 	bl	23b20 <z_add_timeout>
	return ret;
   222d4:	2401      	movs	r4, #1
   222d6:	e7d8      	b.n	2228a <k_work_schedule_for_queue+0x76>
	int ret = 0;
   222d8:	2400      	movs	r4, #0
   222da:	e7d6      	b.n	2228a <k_work_schedule_for_queue+0x76>
   222dc:	00030671 	.word	0x00030671
   222e0:	000290f5 	.word	0x000290f5
   222e4:	0003059b 	.word	0x0003059b
   222e8:	20002538 	.word	0x20002538
   222ec:	000291b5 	.word	0x000291b5
   222f0:	00029207 	.word	0x00029207
   222f4:	0002921c 	.word	0x0002921c
   222f8:	000291db 	.word	0x000291db
   222fc:	000291f2 	.word	0x000291f2
   22300:	00021f51 	.word	0x00021f51

00022304 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   22304:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   22306:	4801      	ldr	r0, [pc, #4]	; (2230c <k_work_schedule+0x8>)
   22308:	f7ff bf84 	b.w	22214 <k_work_schedule_for_queue>
   2230c:	20001e18 	.word	0x20001e18

00022310 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   22310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22312:	4616      	mov	r6, r2
   22314:	9001      	str	r0, [sp, #4]
   22316:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   22318:	460c      	mov	r4, r1
   2231a:	b959      	cbnz	r1, 22334 <k_work_reschedule_for_queue+0x24>
   2231c:	492d      	ldr	r1, [pc, #180]	; (223d4 <k_work_reschedule_for_queue+0xc4>)
   2231e:	482e      	ldr	r0, [pc, #184]	; (223d8 <k_work_reschedule_for_queue+0xc8>)
   22320:	4a2e      	ldr	r2, [pc, #184]	; (223dc <k_work_reschedule_for_queue+0xcc>)
   22322:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   22326:	f002 f9e7 	bl	246f8 <printk>
   2232a:	482c      	ldr	r0, [pc, #176]	; (223dc <k_work_reschedule_for_queue+0xcc>)
   2232c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   22330:	f002 fbd3 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22334:	f04f 0340 	mov.w	r3, #64	; 0x40
   22338:	f3ef 8511 	mrs	r5, BASEPRI
   2233c:	f383 8812 	msr	BASEPRI_MAX, r3
   22340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22344:	4826      	ldr	r0, [pc, #152]	; (223e0 <k_work_reschedule_for_queue+0xd0>)
   22346:	f7fe ffc7 	bl	212d8 <z_spin_lock_valid>
   2234a:	b968      	cbnz	r0, 22368 <k_work_reschedule_for_queue+0x58>
   2234c:	4a25      	ldr	r2, [pc, #148]	; (223e4 <k_work_reschedule_for_queue+0xd4>)
   2234e:	4926      	ldr	r1, [pc, #152]	; (223e8 <k_work_reschedule_for_queue+0xd8>)
   22350:	4821      	ldr	r0, [pc, #132]	; (223d8 <k_work_reschedule_for_queue+0xc8>)
   22352:	2381      	movs	r3, #129	; 0x81
   22354:	f002 f9d0 	bl	246f8 <printk>
   22358:	4921      	ldr	r1, [pc, #132]	; (223e0 <k_work_reschedule_for_queue+0xd0>)
   2235a:	4824      	ldr	r0, [pc, #144]	; (223ec <k_work_reschedule_for_queue+0xdc>)
   2235c:	f002 f9cc 	bl	246f8 <printk>
   22360:	4820      	ldr	r0, [pc, #128]	; (223e4 <k_work_reschedule_for_queue+0xd4>)
   22362:	2181      	movs	r1, #129	; 0x81
   22364:	f002 fbb9 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22368:	481d      	ldr	r0, [pc, #116]	; (223e0 <k_work_reschedule_for_queue+0xd0>)
   2236a:	f7fe ffd3 	bl	21314 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2236e:	4620      	mov	r0, r4
   22370:	f005 feb9 	bl	280e6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22374:	ea56 0307 	orrs.w	r3, r6, r7
   22378:	d11d      	bne.n	223b6 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2237a:	4620      	mov	r0, r4
   2237c:	a901      	add	r1, sp, #4
   2237e:	f7ff fd83 	bl	21e88 <submit_to_queue_locked>
   22382:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22384:	4816      	ldr	r0, [pc, #88]	; (223e0 <k_work_reschedule_for_queue+0xd0>)
   22386:	f7fe ffb5 	bl	212f4 <z_spin_unlock_valid>
   2238a:	b968      	cbnz	r0, 223a8 <k_work_reschedule_for_queue+0x98>
   2238c:	4a15      	ldr	r2, [pc, #84]	; (223e4 <k_work_reschedule_for_queue+0xd4>)
   2238e:	4918      	ldr	r1, [pc, #96]	; (223f0 <k_work_reschedule_for_queue+0xe0>)
   22390:	4811      	ldr	r0, [pc, #68]	; (223d8 <k_work_reschedule_for_queue+0xc8>)
   22392:	23ac      	movs	r3, #172	; 0xac
   22394:	f002 f9b0 	bl	246f8 <printk>
   22398:	4911      	ldr	r1, [pc, #68]	; (223e0 <k_work_reschedule_for_queue+0xd0>)
   2239a:	4816      	ldr	r0, [pc, #88]	; (223f4 <k_work_reschedule_for_queue+0xe4>)
   2239c:	f002 f9ac 	bl	246f8 <printk>
   223a0:	4810      	ldr	r0, [pc, #64]	; (223e4 <k_work_reschedule_for_queue+0xd4>)
   223a2:	21ac      	movs	r1, #172	; 0xac
   223a4:	f002 fb99 	bl	24ada <assert_post_action>
	__asm__ volatile(
   223a8:	f385 8811 	msr	BASEPRI, r5
   223ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   223b0:	4620      	mov	r0, r4
   223b2:	b003      	add	sp, #12
   223b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   223b6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   223b8:	490f      	ldr	r1, [pc, #60]	; (223f8 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   223ba:	f043 0308 	orr.w	r3, r3, #8
   223be:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   223c0:	9b01      	ldr	r3, [sp, #4]
   223c2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   223c4:	f104 0010 	add.w	r0, r4, #16
   223c8:	4632      	mov	r2, r6
   223ca:	463b      	mov	r3, r7
   223cc:	f001 fba8 	bl	23b20 <z_add_timeout>
	return ret;
   223d0:	2401      	movs	r4, #1
   223d2:	e7d7      	b.n	22384 <k_work_reschedule_for_queue+0x74>
   223d4:	00030671 	.word	0x00030671
   223d8:	000290f5 	.word	0x000290f5
   223dc:	0003059b 	.word	0x0003059b
   223e0:	20002538 	.word	0x20002538
   223e4:	000291b5 	.word	0x000291b5
   223e8:	00029207 	.word	0x00029207
   223ec:	0002921c 	.word	0x0002921c
   223f0:	000291db 	.word	0x000291db
   223f4:	000291f2 	.word	0x000291f2
   223f8:	00021f51 	.word	0x00021f51

000223fc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   223fc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   223fe:	4801      	ldr	r0, [pc, #4]	; (22404 <k_work_reschedule+0x8>)
   22400:	f7ff bf86 	b.w	22310 <k_work_reschedule_for_queue>
   22404:	20001e18 	.word	0x20001e18

00022408 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   22408:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2240a:	4604      	mov	r4, r0
   2240c:	b958      	cbnz	r0, 22426 <k_work_cancel_delayable+0x1e>
   2240e:	4924      	ldr	r1, [pc, #144]	; (224a0 <k_work_cancel_delayable+0x98>)
   22410:	4824      	ldr	r0, [pc, #144]	; (224a4 <k_work_cancel_delayable+0x9c>)
   22412:	4a25      	ldr	r2, [pc, #148]	; (224a8 <k_work_cancel_delayable+0xa0>)
   22414:	f240 33ea 	movw	r3, #1002	; 0x3ea
   22418:	f002 f96e 	bl	246f8 <printk>
   2241c:	4822      	ldr	r0, [pc, #136]	; (224a8 <k_work_cancel_delayable+0xa0>)
   2241e:	f240 31ea 	movw	r1, #1002	; 0x3ea
   22422:	f002 fb5a 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22426:	f04f 0340 	mov.w	r3, #64	; 0x40
   2242a:	f3ef 8511 	mrs	r5, BASEPRI
   2242e:	f383 8812 	msr	BASEPRI_MAX, r3
   22432:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22436:	481d      	ldr	r0, [pc, #116]	; (224ac <k_work_cancel_delayable+0xa4>)
   22438:	f7fe ff4e 	bl	212d8 <z_spin_lock_valid>
   2243c:	b968      	cbnz	r0, 2245a <k_work_cancel_delayable+0x52>
   2243e:	4a1c      	ldr	r2, [pc, #112]	; (224b0 <k_work_cancel_delayable+0xa8>)
   22440:	491c      	ldr	r1, [pc, #112]	; (224b4 <k_work_cancel_delayable+0xac>)
   22442:	4818      	ldr	r0, [pc, #96]	; (224a4 <k_work_cancel_delayable+0x9c>)
   22444:	2381      	movs	r3, #129	; 0x81
   22446:	f002 f957 	bl	246f8 <printk>
   2244a:	4918      	ldr	r1, [pc, #96]	; (224ac <k_work_cancel_delayable+0xa4>)
   2244c:	481a      	ldr	r0, [pc, #104]	; (224b8 <k_work_cancel_delayable+0xb0>)
   2244e:	f002 f953 	bl	246f8 <printk>
   22452:	4817      	ldr	r0, [pc, #92]	; (224b0 <k_work_cancel_delayable+0xa8>)
   22454:	2181      	movs	r1, #129	; 0x81
   22456:	f002 fb40 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2245a:	4814      	ldr	r0, [pc, #80]	; (224ac <k_work_cancel_delayable+0xa4>)
   2245c:	f7fe ff5a 	bl	21314 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   22460:	4620      	mov	r0, r4
   22462:	f005 fe40 	bl	280e6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22466:	4620      	mov	r0, r4
   22468:	f005 fe4b 	bl	28102 <cancel_async_locked>
   2246c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2246e:	480f      	ldr	r0, [pc, #60]	; (224ac <k_work_cancel_delayable+0xa4>)
   22470:	f7fe ff40 	bl	212f4 <z_spin_unlock_valid>
   22474:	b968      	cbnz	r0, 22492 <k_work_cancel_delayable+0x8a>
   22476:	4a0e      	ldr	r2, [pc, #56]	; (224b0 <k_work_cancel_delayable+0xa8>)
   22478:	4910      	ldr	r1, [pc, #64]	; (224bc <k_work_cancel_delayable+0xb4>)
   2247a:	480a      	ldr	r0, [pc, #40]	; (224a4 <k_work_cancel_delayable+0x9c>)
   2247c:	23ac      	movs	r3, #172	; 0xac
   2247e:	f002 f93b 	bl	246f8 <printk>
   22482:	490a      	ldr	r1, [pc, #40]	; (224ac <k_work_cancel_delayable+0xa4>)
   22484:	480e      	ldr	r0, [pc, #56]	; (224c0 <k_work_cancel_delayable+0xb8>)
   22486:	f002 f937 	bl	246f8 <printk>
   2248a:	4809      	ldr	r0, [pc, #36]	; (224b0 <k_work_cancel_delayable+0xa8>)
   2248c:	21ac      	movs	r1, #172	; 0xac
   2248e:	f002 fb24 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22492:	f385 8811 	msr	BASEPRI, r5
   22496:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2249a:	4620      	mov	r0, r4
   2249c:	bd38      	pop	{r3, r4, r5, pc}
   2249e:	bf00      	nop
   224a0:	00030671 	.word	0x00030671
   224a4:	000290f5 	.word	0x000290f5
   224a8:	0003059b 	.word	0x0003059b
   224ac:	20002538 	.word	0x20002538
   224b0:	000291b5 	.word	0x000291b5
   224b4:	00029207 	.word	0x00029207
   224b8:	0002921c 	.word	0x0002921c
   224bc:	000291db 	.word	0x000291db
   224c0:	000291f2 	.word	0x000291f2

000224c4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   224c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   224c8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   224ca:	4605      	mov	r5, r0
   224cc:	b958      	cbnz	r0, 224e6 <k_work_cancel_delayable_sync+0x22>
   224ce:	493d      	ldr	r1, [pc, #244]	; (225c4 <k_work_cancel_delayable_sync+0x100>)
   224d0:	483d      	ldr	r0, [pc, #244]	; (225c8 <k_work_cancel_delayable_sync+0x104>)
   224d2:	4a3e      	ldr	r2, [pc, #248]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   224d4:	f240 33fb 	movw	r3, #1019	; 0x3fb
   224d8:	f002 f90e 	bl	246f8 <printk>
   224dc:	483b      	ldr	r0, [pc, #236]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   224de:	f240 31fb 	movw	r1, #1019	; 0x3fb
   224e2:	f002 fafa 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   224e6:	b95e      	cbnz	r6, 22500 <k_work_cancel_delayable_sync+0x3c>
   224e8:	4939      	ldr	r1, [pc, #228]	; (225d0 <k_work_cancel_delayable_sync+0x10c>)
   224ea:	4837      	ldr	r0, [pc, #220]	; (225c8 <k_work_cancel_delayable_sync+0x104>)
   224ec:	4a37      	ldr	r2, [pc, #220]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   224ee:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   224f2:	f002 f901 	bl	246f8 <printk>
   224f6:	4835      	ldr	r0, [pc, #212]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   224f8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   224fc:	f002 faed 	bl	24ada <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   22500:	f005 fd98 	bl	28034 <k_is_in_isr>
   22504:	b158      	cbz	r0, 2251e <k_work_cancel_delayable_sync+0x5a>
   22506:	4933      	ldr	r1, [pc, #204]	; (225d4 <k_work_cancel_delayable_sync+0x110>)
   22508:	482f      	ldr	r0, [pc, #188]	; (225c8 <k_work_cancel_delayable_sync+0x104>)
   2250a:	4a30      	ldr	r2, [pc, #192]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   2250c:	f240 33fd 	movw	r3, #1021	; 0x3fd
   22510:	f002 f8f2 	bl	246f8 <printk>
   22514:	482d      	ldr	r0, [pc, #180]	; (225cc <k_work_cancel_delayable_sync+0x108>)
   22516:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2251a:	f002 fade 	bl	24ada <assert_post_action>
	__asm__ volatile(
   2251e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22522:	f3ef 8811 	mrs	r8, BASEPRI
   22526:	f383 8812 	msr	BASEPRI_MAX, r3
   2252a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2252e:	482a      	ldr	r0, [pc, #168]	; (225d8 <k_work_cancel_delayable_sync+0x114>)
   22530:	f7fe fed2 	bl	212d8 <z_spin_lock_valid>
   22534:	b968      	cbnz	r0, 22552 <k_work_cancel_delayable_sync+0x8e>
   22536:	4a29      	ldr	r2, [pc, #164]	; (225dc <k_work_cancel_delayable_sync+0x118>)
   22538:	4929      	ldr	r1, [pc, #164]	; (225e0 <k_work_cancel_delayable_sync+0x11c>)
   2253a:	4823      	ldr	r0, [pc, #140]	; (225c8 <k_work_cancel_delayable_sync+0x104>)
   2253c:	2381      	movs	r3, #129	; 0x81
   2253e:	f002 f8db 	bl	246f8 <printk>
   22542:	4925      	ldr	r1, [pc, #148]	; (225d8 <k_work_cancel_delayable_sync+0x114>)
   22544:	4827      	ldr	r0, [pc, #156]	; (225e4 <k_work_cancel_delayable_sync+0x120>)
   22546:	f002 f8d7 	bl	246f8 <printk>
   2254a:	4824      	ldr	r0, [pc, #144]	; (225dc <k_work_cancel_delayable_sync+0x118>)
   2254c:	2181      	movs	r1, #129	; 0x81
   2254e:	f002 fac4 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22552:	4821      	ldr	r0, [pc, #132]	; (225d8 <k_work_cancel_delayable_sync+0x114>)
   22554:	f7fe fede 	bl	21314 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   22558:	68ec      	ldr	r4, [r5, #12]
   2255a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2255e:	2c00      	cmp	r4, #0
   22560:	bf14      	ite	ne
   22562:	2701      	movne	r7, #1
   22564:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   22566:	d00a      	beq.n	2257e <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
   22568:	4628      	mov	r0, r5
   2256a:	f005 fdbc 	bl	280e6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2256e:	4628      	mov	r0, r5
   22570:	f005 fdc7 	bl	28102 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22574:	4631      	mov	r1, r6
   22576:	4628      	mov	r0, r5
   22578:	f7ff fc68 	bl	21e4c <cancel_sync_locked>
   2257c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2257e:	4816      	ldr	r0, [pc, #88]	; (225d8 <k_work_cancel_delayable_sync+0x114>)
   22580:	f7fe feb8 	bl	212f4 <z_spin_unlock_valid>
   22584:	b968      	cbnz	r0, 225a2 <k_work_cancel_delayable_sync+0xde>
   22586:	4a15      	ldr	r2, [pc, #84]	; (225dc <k_work_cancel_delayable_sync+0x118>)
   22588:	4917      	ldr	r1, [pc, #92]	; (225e8 <k_work_cancel_delayable_sync+0x124>)
   2258a:	480f      	ldr	r0, [pc, #60]	; (225c8 <k_work_cancel_delayable_sync+0x104>)
   2258c:	23ac      	movs	r3, #172	; 0xac
   2258e:	f002 f8b3 	bl	246f8 <printk>
   22592:	4911      	ldr	r1, [pc, #68]	; (225d8 <k_work_cancel_delayable_sync+0x114>)
   22594:	4815      	ldr	r0, [pc, #84]	; (225ec <k_work_cancel_delayable_sync+0x128>)
   22596:	f002 f8af 	bl	246f8 <printk>
   2259a:	4810      	ldr	r0, [pc, #64]	; (225dc <k_work_cancel_delayable_sync+0x118>)
   2259c:	21ac      	movs	r1, #172	; 0xac
   2259e:	f002 fa9c 	bl	24ada <assert_post_action>
	__asm__ volatile(
   225a2:	f388 8811 	msr	BASEPRI, r8
   225a6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   225aa:	b13c      	cbz	r4, 225bc <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
   225ac:	f04f 32ff 	mov.w	r2, #4294967295
   225b0:	f04f 33ff 	mov.w	r3, #4294967295
   225b4:	f106 0008 	add.w	r0, r6, #8
   225b8:	f7ff fa50 	bl	21a5c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   225bc:	4638      	mov	r0, r7
   225be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   225c2:	bf00      	nop
   225c4:	00030671 	.word	0x00030671
   225c8:	000290f5 	.word	0x000290f5
   225cc:	0003059b 	.word	0x0003059b
   225d0:	0003061d 	.word	0x0003061d
   225d4:	0002e4ee 	.word	0x0002e4ee
   225d8:	20002538 	.word	0x20002538
   225dc:	000291b5 	.word	0x000291b5
   225e0:	00029207 	.word	0x00029207
   225e4:	0002921c 	.word	0x0002921c
   225e8:	000291db 	.word	0x000291db
   225ec:	000291f2 	.word	0x000291f2

000225f0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   225f0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   225f2:	4c08      	ldr	r4, [pc, #32]	; (22614 <z_reset_time_slice+0x24>)
   225f4:	6823      	ldr	r3, [r4, #0]
   225f6:	b15b      	cbz	r3, 22610 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   225f8:	f7fb fee4 	bl	1e3c4 <sys_clock_elapsed>
   225fc:	4603      	mov	r3, r0
   225fe:	6820      	ldr	r0, [r4, #0]
   22600:	4a05      	ldr	r2, [pc, #20]	; (22618 <z_reset_time_slice+0x28>)
   22602:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   22604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   22608:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2260a:	2100      	movs	r1, #0
   2260c:	f001 bbf2 	b.w	23df4 <z_set_timeout_expiry>
}
   22610:	bd10      	pop	{r4, pc}
   22612:	bf00      	nop
   22614:	20002550 	.word	0x20002550
   22618:	20002508 	.word	0x20002508

0002261c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2261e:	4604      	mov	r4, r0
   22620:	460d      	mov	r5, r1
	__asm__ volatile(
   22622:	f04f 0340 	mov.w	r3, #64	; 0x40
   22626:	f3ef 8611 	mrs	r6, BASEPRI
   2262a:	f383 8812 	msr	BASEPRI_MAX, r3
   2262e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22632:	4823      	ldr	r0, [pc, #140]	; (226c0 <k_sched_time_slice_set+0xa4>)
   22634:	f7fe fe50 	bl	212d8 <z_spin_lock_valid>
   22638:	b968      	cbnz	r0, 22656 <k_sched_time_slice_set+0x3a>
   2263a:	4a22      	ldr	r2, [pc, #136]	; (226c4 <k_sched_time_slice_set+0xa8>)
   2263c:	4922      	ldr	r1, [pc, #136]	; (226c8 <k_sched_time_slice_set+0xac>)
   2263e:	4823      	ldr	r0, [pc, #140]	; (226cc <k_sched_time_slice_set+0xb0>)
   22640:	2381      	movs	r3, #129	; 0x81
   22642:	f002 f859 	bl	246f8 <printk>
   22646:	491e      	ldr	r1, [pc, #120]	; (226c0 <k_sched_time_slice_set+0xa4>)
   22648:	4821      	ldr	r0, [pc, #132]	; (226d0 <k_sched_time_slice_set+0xb4>)
   2264a:	f002 f855 	bl	246f8 <printk>
   2264e:	481d      	ldr	r0, [pc, #116]	; (226c4 <k_sched_time_slice_set+0xa8>)
   22650:	2181      	movs	r1, #129	; 0x81
   22652:	f002 fa42 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22656:	481a      	ldr	r0, [pc, #104]	; (226c0 <k_sched_time_slice_set+0xa4>)
   22658:	f7fe fe5c 	bl	21314 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2265c:	4b1d      	ldr	r3, [pc, #116]	; (226d4 <k_sched_time_slice_set+0xb8>)
   2265e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   22660:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   22664:	f240 30e7 	movw	r0, #999	; 0x3e7
   22668:	2100      	movs	r1, #0
   2266a:	611a      	str	r2, [r3, #16]
   2266c:	fbe7 0104 	umlal	r0, r1, r7, r4
   22670:	2300      	movs	r3, #0
   22672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22676:	f7dd fd33 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2267a:	2c00      	cmp	r4, #0
   2267c:	4b16      	ldr	r3, [pc, #88]	; (226d8 <k_sched_time_slice_set+0xbc>)
   2267e:	dc1b      	bgt.n	226b8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   22680:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   22682:	4b16      	ldr	r3, [pc, #88]	; (226dc <k_sched_time_slice_set+0xc0>)
   22684:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   22686:	f7ff ffb3 	bl	225f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2268a:	480d      	ldr	r0, [pc, #52]	; (226c0 <k_sched_time_slice_set+0xa4>)
   2268c:	f7fe fe32 	bl	212f4 <z_spin_unlock_valid>
   22690:	b968      	cbnz	r0, 226ae <k_sched_time_slice_set+0x92>
   22692:	4a0c      	ldr	r2, [pc, #48]	; (226c4 <k_sched_time_slice_set+0xa8>)
   22694:	4912      	ldr	r1, [pc, #72]	; (226e0 <k_sched_time_slice_set+0xc4>)
   22696:	480d      	ldr	r0, [pc, #52]	; (226cc <k_sched_time_slice_set+0xb0>)
   22698:	23ac      	movs	r3, #172	; 0xac
   2269a:	f002 f82d 	bl	246f8 <printk>
   2269e:	4908      	ldr	r1, [pc, #32]	; (226c0 <k_sched_time_slice_set+0xa4>)
   226a0:	4810      	ldr	r0, [pc, #64]	; (226e4 <k_sched_time_slice_set+0xc8>)
   226a2:	f002 f829 	bl	246f8 <printk>
   226a6:	4807      	ldr	r0, [pc, #28]	; (226c4 <k_sched_time_slice_set+0xa8>)
   226a8:	21ac      	movs	r1, #172	; 0xac
   226aa:	f002 fa16 	bl	24ada <assert_post_action>
	__asm__ volatile(
   226ae:	f386 8811 	msr	BASEPRI, r6
   226b2:	f3bf 8f6f 	isb	sy
	}
}
   226b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   226b8:	2802      	cmp	r0, #2
   226ba:	bfb8      	it	lt
   226bc:	2002      	movlt	r0, #2
   226be:	e7df      	b.n	22680 <k_sched_time_slice_set+0x64>
   226c0:	20002548 	.word	0x20002548
   226c4:	000291b5 	.word	0x000291b5
   226c8:	00029207 	.word	0x00029207
   226cc:	000290f5 	.word	0x000290f5
   226d0:	0002921c 	.word	0x0002921c
   226d4:	20002508 	.word	0x20002508
   226d8:	20002550 	.word	0x20002550
   226dc:	2000254c 	.word	0x2000254c
   226e0:	000291db 	.word	0x000291db
   226e4:	000291f2 	.word	0x000291f2

000226e8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   226e8:	b538      	push	{r3, r4, r5, lr}
   226ea:	4604      	mov	r4, r0
	__asm__ volatile(
   226ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   226f0:	f3ef 8511 	mrs	r5, BASEPRI
   226f4:	f383 8812 	msr	BASEPRI_MAX, r3
   226f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226fc:	4817      	ldr	r0, [pc, #92]	; (2275c <z_unpend_thread_no_timeout+0x74>)
   226fe:	f7fe fdeb 	bl	212d8 <z_spin_lock_valid>
   22702:	b968      	cbnz	r0, 22720 <z_unpend_thread_no_timeout+0x38>
   22704:	4a16      	ldr	r2, [pc, #88]	; (22760 <z_unpend_thread_no_timeout+0x78>)
   22706:	4917      	ldr	r1, [pc, #92]	; (22764 <z_unpend_thread_no_timeout+0x7c>)
   22708:	4817      	ldr	r0, [pc, #92]	; (22768 <z_unpend_thread_no_timeout+0x80>)
   2270a:	2381      	movs	r3, #129	; 0x81
   2270c:	f001 fff4 	bl	246f8 <printk>
   22710:	4912      	ldr	r1, [pc, #72]	; (2275c <z_unpend_thread_no_timeout+0x74>)
   22712:	4816      	ldr	r0, [pc, #88]	; (2276c <z_unpend_thread_no_timeout+0x84>)
   22714:	f001 fff0 	bl	246f8 <printk>
   22718:	4811      	ldr	r0, [pc, #68]	; (22760 <z_unpend_thread_no_timeout+0x78>)
   2271a:	2181      	movs	r1, #129	; 0x81
   2271c:	f002 f9dd 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22720:	480e      	ldr	r0, [pc, #56]	; (2275c <z_unpend_thread_no_timeout+0x74>)
   22722:	f7fe fdf7 	bl	21314 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   22726:	4620      	mov	r0, r4
   22728:	f000 f900 	bl	2292c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2272c:	480b      	ldr	r0, [pc, #44]	; (2275c <z_unpend_thread_no_timeout+0x74>)
   2272e:	f7fe fde1 	bl	212f4 <z_spin_unlock_valid>
   22732:	b968      	cbnz	r0, 22750 <z_unpend_thread_no_timeout+0x68>
   22734:	4a0a      	ldr	r2, [pc, #40]	; (22760 <z_unpend_thread_no_timeout+0x78>)
   22736:	490e      	ldr	r1, [pc, #56]	; (22770 <z_unpend_thread_no_timeout+0x88>)
   22738:	480b      	ldr	r0, [pc, #44]	; (22768 <z_unpend_thread_no_timeout+0x80>)
   2273a:	23ac      	movs	r3, #172	; 0xac
   2273c:	f001 ffdc 	bl	246f8 <printk>
   22740:	4906      	ldr	r1, [pc, #24]	; (2275c <z_unpend_thread_no_timeout+0x74>)
   22742:	480c      	ldr	r0, [pc, #48]	; (22774 <z_unpend_thread_no_timeout+0x8c>)
   22744:	f001 ffd8 	bl	246f8 <printk>
   22748:	4805      	ldr	r0, [pc, #20]	; (22760 <z_unpend_thread_no_timeout+0x78>)
   2274a:	21ac      	movs	r1, #172	; 0xac
   2274c:	f002 f9c5 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22750:	f385 8811 	msr	BASEPRI, r5
   22754:	f3bf 8f6f 	isb	sy
	}
}
   22758:	bd38      	pop	{r3, r4, r5, pc}
   2275a:	bf00      	nop
   2275c:	20002548 	.word	0x20002548
   22760:	000291b5 	.word	0x000291b5
   22764:	00029207 	.word	0x00029207
   22768:	000290f5 	.word	0x000290f5
   2276c:	0002921c 	.word	0x0002921c
   22770:	000291db 	.word	0x000291db
   22774:	000291f2 	.word	0x000291f2

00022778 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22778:	b538      	push	{r3, r4, r5, lr}
   2277a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2277c:	460d      	mov	r5, r1
   2277e:	b9e9      	cbnz	r1, 227bc <z_reschedule+0x44>
   22780:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   22784:	b9d3      	cbnz	r3, 227bc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   22786:	4b19      	ldr	r3, [pc, #100]	; (227ec <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   22788:	69da      	ldr	r2, [r3, #28]
   2278a:	689b      	ldr	r3, [r3, #8]
   2278c:	429a      	cmp	r2, r3
   2278e:	d015      	beq.n	227bc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22790:	f7fe fdb0 	bl	212f4 <z_spin_unlock_valid>
   22794:	b968      	cbnz	r0, 227b2 <z_reschedule+0x3a>
   22796:	4a16      	ldr	r2, [pc, #88]	; (227f0 <z_reschedule+0x78>)
   22798:	4916      	ldr	r1, [pc, #88]	; (227f4 <z_reschedule+0x7c>)
   2279a:	4817      	ldr	r0, [pc, #92]	; (227f8 <z_reschedule+0x80>)
   2279c:	23c3      	movs	r3, #195	; 0xc3
   2279e:	f001 ffab 	bl	246f8 <printk>
   227a2:	4816      	ldr	r0, [pc, #88]	; (227fc <z_reschedule+0x84>)
   227a4:	4621      	mov	r1, r4
   227a6:	f001 ffa7 	bl	246f8 <printk>
   227aa:	4811      	ldr	r0, [pc, #68]	; (227f0 <z_reschedule+0x78>)
   227ac:	21c3      	movs	r1, #195	; 0xc3
   227ae:	f002 f994 	bl	24ada <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   227b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   227b6:	2000      	movs	r0, #0
   227b8:	f7f1 b9be 	b.w	13b38 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227bc:	4620      	mov	r0, r4
   227be:	f7fe fd99 	bl	212f4 <z_spin_unlock_valid>
   227c2:	b968      	cbnz	r0, 227e0 <z_reschedule+0x68>
   227c4:	4a0a      	ldr	r2, [pc, #40]	; (227f0 <z_reschedule+0x78>)
   227c6:	490b      	ldr	r1, [pc, #44]	; (227f4 <z_reschedule+0x7c>)
   227c8:	480b      	ldr	r0, [pc, #44]	; (227f8 <z_reschedule+0x80>)
   227ca:	23ac      	movs	r3, #172	; 0xac
   227cc:	f001 ff94 	bl	246f8 <printk>
   227d0:	480a      	ldr	r0, [pc, #40]	; (227fc <z_reschedule+0x84>)
   227d2:	4621      	mov	r1, r4
   227d4:	f001 ff90 	bl	246f8 <printk>
   227d8:	4805      	ldr	r0, [pc, #20]	; (227f0 <z_reschedule+0x78>)
   227da:	21ac      	movs	r1, #172	; 0xac
   227dc:	f002 f97d 	bl	24ada <assert_post_action>
   227e0:	f385 8811 	msr	BASEPRI, r5
   227e4:	f3bf 8f6f 	isb	sy
   227e8:	bd38      	pop	{r3, r4, r5, pc}
   227ea:	bf00      	nop
   227ec:	20002508 	.word	0x20002508
   227f0:	000291b5 	.word	0x000291b5
   227f4:	000291db 	.word	0x000291db
   227f8:	000290f5 	.word	0x000290f5
   227fc:	000291f2 	.word	0x000291f2

00022800 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   22800:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22802:	f04f 0340 	mov.w	r3, #64	; 0x40
   22806:	f3ef 8511 	mrs	r5, BASEPRI
   2280a:	f383 8812 	msr	BASEPRI_MAX, r3
   2280e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22812:	4829      	ldr	r0, [pc, #164]	; (228b8 <k_sched_lock+0xb8>)
   22814:	f7fe fd60 	bl	212d8 <z_spin_lock_valid>
   22818:	b968      	cbnz	r0, 22836 <k_sched_lock+0x36>
   2281a:	4a28      	ldr	r2, [pc, #160]	; (228bc <k_sched_lock+0xbc>)
   2281c:	4928      	ldr	r1, [pc, #160]	; (228c0 <k_sched_lock+0xc0>)
   2281e:	4829      	ldr	r0, [pc, #164]	; (228c4 <k_sched_lock+0xc4>)
   22820:	2381      	movs	r3, #129	; 0x81
   22822:	f001 ff69 	bl	246f8 <printk>
   22826:	4924      	ldr	r1, [pc, #144]	; (228b8 <k_sched_lock+0xb8>)
   22828:	4827      	ldr	r0, [pc, #156]	; (228c8 <k_sched_lock+0xc8>)
   2282a:	f001 ff65 	bl	246f8 <printk>
   2282e:	4823      	ldr	r0, [pc, #140]	; (228bc <k_sched_lock+0xbc>)
   22830:	2181      	movs	r1, #129	; 0x81
   22832:	f002 f952 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22836:	4820      	ldr	r0, [pc, #128]	; (228b8 <k_sched_lock+0xb8>)
   22838:	f7fe fd6c 	bl	21314 <z_spin_lock_set_owner>
   2283c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22840:	b163      	cbz	r3, 2285c <k_sched_lock+0x5c>
   22842:	4922      	ldr	r1, [pc, #136]	; (228cc <k_sched_lock+0xcc>)
   22844:	4a22      	ldr	r2, [pc, #136]	; (228d0 <k_sched_lock+0xd0>)
   22846:	481f      	ldr	r0, [pc, #124]	; (228c4 <k_sched_lock+0xc4>)
   22848:	23fd      	movs	r3, #253	; 0xfd
   2284a:	f001 ff55 	bl	246f8 <printk>
   2284e:	4821      	ldr	r0, [pc, #132]	; (228d4 <k_sched_lock+0xd4>)
   22850:	f001 ff52 	bl	246f8 <printk>
   22854:	481e      	ldr	r0, [pc, #120]	; (228d0 <k_sched_lock+0xd0>)
   22856:	21fd      	movs	r1, #253	; 0xfd
   22858:	f002 f93f 	bl	24ada <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2285c:	4c1e      	ldr	r4, [pc, #120]	; (228d8 <k_sched_lock+0xd8>)
   2285e:	68a2      	ldr	r2, [r4, #8]
   22860:	7bd2      	ldrb	r2, [r2, #15]
   22862:	2a01      	cmp	r2, #1
   22864:	d10c      	bne.n	22880 <k_sched_lock+0x80>
   22866:	491d      	ldr	r1, [pc, #116]	; (228dc <k_sched_lock+0xdc>)
   22868:	4a19      	ldr	r2, [pc, #100]	; (228d0 <k_sched_lock+0xd0>)
   2286a:	4816      	ldr	r0, [pc, #88]	; (228c4 <k_sched_lock+0xc4>)
   2286c:	23fe      	movs	r3, #254	; 0xfe
   2286e:	f001 ff43 	bl	246f8 <printk>
   22872:	4818      	ldr	r0, [pc, #96]	; (228d4 <k_sched_lock+0xd4>)
   22874:	f001 ff40 	bl	246f8 <printk>
   22878:	4815      	ldr	r0, [pc, #84]	; (228d0 <k_sched_lock+0xd0>)
   2287a:	21fe      	movs	r1, #254	; 0xfe
   2287c:	f002 f92d 	bl	24ada <assert_post_action>
	--_current->base.sched_locked;
   22880:	68a2      	ldr	r2, [r4, #8]
   22882:	7bd3      	ldrb	r3, [r2, #15]
   22884:	3b01      	subs	r3, #1
   22886:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22888:	480b      	ldr	r0, [pc, #44]	; (228b8 <k_sched_lock+0xb8>)
   2288a:	f7fe fd33 	bl	212f4 <z_spin_unlock_valid>
   2288e:	b968      	cbnz	r0, 228ac <k_sched_lock+0xac>
   22890:	4a0a      	ldr	r2, [pc, #40]	; (228bc <k_sched_lock+0xbc>)
   22892:	4913      	ldr	r1, [pc, #76]	; (228e0 <k_sched_lock+0xe0>)
   22894:	480b      	ldr	r0, [pc, #44]	; (228c4 <k_sched_lock+0xc4>)
   22896:	23ac      	movs	r3, #172	; 0xac
   22898:	f001 ff2e 	bl	246f8 <printk>
   2289c:	4906      	ldr	r1, [pc, #24]	; (228b8 <k_sched_lock+0xb8>)
   2289e:	4811      	ldr	r0, [pc, #68]	; (228e4 <k_sched_lock+0xe4>)
   228a0:	f001 ff2a 	bl	246f8 <printk>
   228a4:	4805      	ldr	r0, [pc, #20]	; (228bc <k_sched_lock+0xbc>)
   228a6:	21ac      	movs	r1, #172	; 0xac
   228a8:	f002 f917 	bl	24ada <assert_post_action>
	__asm__ volatile(
   228ac:	f385 8811 	msr	BASEPRI, r5
   228b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   228b4:	bd38      	pop	{r3, r4, r5, pc}
   228b6:	bf00      	nop
   228b8:	20002548 	.word	0x20002548
   228bc:	000291b5 	.word	0x000291b5
   228c0:	00029207 	.word	0x00029207
   228c4:	000290f5 	.word	0x000290f5
   228c8:	0002921c 	.word	0x0002921c
   228cc:	000303be 	.word	0x000303be
   228d0:	000304c9 	.word	0x000304c9
   228d4:	0002f37f 	.word	0x0002f37f
   228d8:	20002508 	.word	0x20002508
   228dc:	000304f4 	.word	0x000304f4
   228e0:	000291db 	.word	0x000291db
   228e4:	000291f2 	.word	0x000291f2

000228e8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228e8:	4b0c      	ldr	r3, [pc, #48]	; (2291c <z_priq_dumb_remove+0x34>)
   228ea:	4299      	cmp	r1, r3
{
   228ec:	b510      	push	{r4, lr}
   228ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228f0:	d10b      	bne.n	2290a <z_priq_dumb_remove+0x22>
   228f2:	490b      	ldr	r1, [pc, #44]	; (22920 <z_priq_dumb_remove+0x38>)
   228f4:	480b      	ldr	r0, [pc, #44]	; (22924 <z_priq_dumb_remove+0x3c>)
   228f6:	4a0c      	ldr	r2, [pc, #48]	; (22928 <z_priq_dumb_remove+0x40>)
   228f8:	f240 33e7 	movw	r3, #999	; 0x3e7
   228fc:	f001 fefc 	bl	246f8 <printk>
   22900:	4809      	ldr	r0, [pc, #36]	; (22928 <z_priq_dumb_remove+0x40>)
   22902:	f240 31e7 	movw	r1, #999	; 0x3e7
   22906:	f002 f8e8 	bl	24ada <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2290a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   2290e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22910:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22912:	2300      	movs	r3, #0
	node->prev = NULL;
   22914:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   22918:	bd10      	pop	{r4, pc}
   2291a:	bf00      	nop
   2291c:	20001d18 	.word	0x20001d18
   22920:	000306a8 	.word	0x000306a8
   22924:	000290f5 	.word	0x000290f5
   22928:	00030686 	.word	0x00030686

0002292c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   2292c:	6883      	ldr	r3, [r0, #8]
{
   2292e:	b510      	push	{r4, lr}
   22930:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   22932:	b95b      	cbnz	r3, 2294c <unpend_thread_no_timeout+0x20>
   22934:	490b      	ldr	r1, [pc, #44]	; (22964 <unpend_thread_no_timeout+0x38>)
   22936:	480c      	ldr	r0, [pc, #48]	; (22968 <unpend_thread_no_timeout+0x3c>)
   22938:	4a0c      	ldr	r2, [pc, #48]	; (2296c <unpend_thread_no_timeout+0x40>)
   2293a:	f240 2383 	movw	r3, #643	; 0x283
   2293e:	f001 fedb 	bl	246f8 <printk>
   22942:	480a      	ldr	r0, [pc, #40]	; (2296c <unpend_thread_no_timeout+0x40>)
   22944:	f240 2183 	movw	r1, #643	; 0x283
   22948:	f002 f8c7 	bl	24ada <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2294c:	68a0      	ldr	r0, [r4, #8]
   2294e:	4621      	mov	r1, r4
   22950:	f7ff ffca 	bl	228e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22954:	7b63      	ldrb	r3, [r4, #13]
   22956:	f023 0302 	bic.w	r3, r3, #2
   2295a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2295c:	2300      	movs	r3, #0
   2295e:	60a3      	str	r3, [r4, #8]
}
   22960:	bd10      	pop	{r4, pc}
   22962:	bf00      	nop
   22964:	000306c9 	.word	0x000306c9
   22968:	000290f5 	.word	0x000290f5
   2296c:	00030686 	.word	0x00030686

00022970 <z_unpend_thread>:
{
   22970:	b538      	push	{r3, r4, r5, lr}
   22972:	4604      	mov	r4, r0
	__asm__ volatile(
   22974:	f04f 0340 	mov.w	r3, #64	; 0x40
   22978:	f3ef 8511 	mrs	r5, BASEPRI
   2297c:	f383 8812 	msr	BASEPRI_MAX, r3
   22980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22984:	4819      	ldr	r0, [pc, #100]	; (229ec <z_unpend_thread+0x7c>)
   22986:	f7fe fca7 	bl	212d8 <z_spin_lock_valid>
   2298a:	b968      	cbnz	r0, 229a8 <z_unpend_thread+0x38>
   2298c:	4a18      	ldr	r2, [pc, #96]	; (229f0 <z_unpend_thread+0x80>)
   2298e:	4919      	ldr	r1, [pc, #100]	; (229f4 <z_unpend_thread+0x84>)
   22990:	4819      	ldr	r0, [pc, #100]	; (229f8 <z_unpend_thread+0x88>)
   22992:	2381      	movs	r3, #129	; 0x81
   22994:	f001 feb0 	bl	246f8 <printk>
   22998:	4914      	ldr	r1, [pc, #80]	; (229ec <z_unpend_thread+0x7c>)
   2299a:	4818      	ldr	r0, [pc, #96]	; (229fc <z_unpend_thread+0x8c>)
   2299c:	f001 feac 	bl	246f8 <printk>
   229a0:	4813      	ldr	r0, [pc, #76]	; (229f0 <z_unpend_thread+0x80>)
   229a2:	2181      	movs	r1, #129	; 0x81
   229a4:	f002 f899 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   229a8:	4810      	ldr	r0, [pc, #64]	; (229ec <z_unpend_thread+0x7c>)
   229aa:	f7fe fcb3 	bl	21314 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   229ae:	4620      	mov	r0, r4
   229b0:	f7ff ffbc 	bl	2292c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229b4:	480d      	ldr	r0, [pc, #52]	; (229ec <z_unpend_thread+0x7c>)
   229b6:	f7fe fc9d 	bl	212f4 <z_spin_unlock_valid>
   229ba:	b968      	cbnz	r0, 229d8 <z_unpend_thread+0x68>
   229bc:	4a0c      	ldr	r2, [pc, #48]	; (229f0 <z_unpend_thread+0x80>)
   229be:	4910      	ldr	r1, [pc, #64]	; (22a00 <z_unpend_thread+0x90>)
   229c0:	480d      	ldr	r0, [pc, #52]	; (229f8 <z_unpend_thread+0x88>)
   229c2:	23ac      	movs	r3, #172	; 0xac
   229c4:	f001 fe98 	bl	246f8 <printk>
   229c8:	4908      	ldr	r1, [pc, #32]	; (229ec <z_unpend_thread+0x7c>)
   229ca:	480e      	ldr	r0, [pc, #56]	; (22a04 <z_unpend_thread+0x94>)
   229cc:	f001 fe94 	bl	246f8 <printk>
   229d0:	4807      	ldr	r0, [pc, #28]	; (229f0 <z_unpend_thread+0x80>)
   229d2:	21ac      	movs	r1, #172	; 0xac
   229d4:	f002 f881 	bl	24ada <assert_post_action>
	__asm__ volatile(
   229d8:	f385 8811 	msr	BASEPRI, r5
   229dc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   229e0:	f104 0018 	add.w	r0, r4, #24
}
   229e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   229e8:	f001 b96e 	b.w	23cc8 <z_abort_timeout>
   229ec:	20002548 	.word	0x20002548
   229f0:	000291b5 	.word	0x000291b5
   229f4:	00029207 	.word	0x00029207
   229f8:	000290f5 	.word	0x000290f5
   229fc:	0002921c 	.word	0x0002921c
   22a00:	000291db 	.word	0x000291db
   22a04:	000291f2 	.word	0x000291f2

00022a08 <update_cache>:
{
   22a08:	b538      	push	{r3, r4, r5, lr}
   22a0a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   22a0c:	4814      	ldr	r0, [pc, #80]	; (22a60 <update_cache+0x58>)
   22a0e:	4d15      	ldr	r5, [pc, #84]	; (22a64 <update_cache+0x5c>)
   22a10:	f005 fbc0 	bl	28194 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22a14:	4604      	mov	r4, r0
   22a16:	b900      	cbnz	r0, 22a1a <update_cache+0x12>
   22a18:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   22a1a:	b9ca      	cbnz	r2, 22a50 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   22a1c:	68ab      	ldr	r3, [r5, #8]
   22a1e:	b963      	cbnz	r3, 22a3a <update_cache+0x32>
   22a20:	4911      	ldr	r1, [pc, #68]	; (22a68 <update_cache+0x60>)
   22a22:	4a12      	ldr	r2, [pc, #72]	; (22a6c <update_cache+0x64>)
   22a24:	4812      	ldr	r0, [pc, #72]	; (22a70 <update_cache+0x68>)
   22a26:	2389      	movs	r3, #137	; 0x89
   22a28:	f001 fe66 	bl	246f8 <printk>
   22a2c:	4811      	ldr	r0, [pc, #68]	; (22a74 <update_cache+0x6c>)
   22a2e:	f001 fe63 	bl	246f8 <printk>
   22a32:	480e      	ldr	r0, [pc, #56]	; (22a6c <update_cache+0x64>)
   22a34:	2189      	movs	r1, #137	; 0x89
   22a36:	f002 f850 	bl	24ada <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   22a3a:	68ab      	ldr	r3, [r5, #8]
   22a3c:	7b5a      	ldrb	r2, [r3, #13]
   22a3e:	06d2      	lsls	r2, r2, #27
   22a40:	d106      	bne.n	22a50 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22a42:	69a2      	ldr	r2, [r4, #24]
   22a44:	b922      	cbnz	r2, 22a50 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   22a46:	89da      	ldrh	r2, [r3, #14]
   22a48:	2a7f      	cmp	r2, #127	; 0x7f
   22a4a:	d901      	bls.n	22a50 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   22a4c:	61eb      	str	r3, [r5, #28]
}
   22a4e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   22a50:	68ab      	ldr	r3, [r5, #8]
   22a52:	42a3      	cmp	r3, r4
   22a54:	d001      	beq.n	22a5a <update_cache+0x52>
			z_reset_time_slice();
   22a56:	f7ff fdcb 	bl	225f0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   22a5a:	61ec      	str	r4, [r5, #28]
}
   22a5c:	e7f7      	b.n	22a4e <update_cache+0x46>
   22a5e:	bf00      	nop
   22a60:	20002528 	.word	0x20002528
   22a64:	20002508 	.word	0x20002508
   22a68:	000306e0 	.word	0x000306e0
   22a6c:	00030686 	.word	0x00030686
   22a70:	000290f5 	.word	0x000290f5
   22a74:	0002f37f 	.word	0x0002f37f

00022a78 <move_thread_to_end_of_prio_q>:
{
   22a78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   22a7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22a7e:	7b43      	ldrb	r3, [r0, #13]
   22a80:	2a00      	cmp	r2, #0
{
   22a82:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22a84:	da06      	bge.n	22a94 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22a8a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22a8c:	4601      	mov	r1, r0
   22a8e:	481f      	ldr	r0, [pc, #124]	; (22b0c <move_thread_to_end_of_prio_q+0x94>)
   22a90:	f7ff ff2a 	bl	228e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22a94:	7b63      	ldrb	r3, [r4, #13]
   22a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22a9a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22a9c:	4b1c      	ldr	r3, [pc, #112]	; (22b10 <move_thread_to_end_of_prio_q+0x98>)
   22a9e:	429c      	cmp	r4, r3
   22aa0:	d109      	bne.n	22ab6 <move_thread_to_end_of_prio_q+0x3e>
   22aa2:	491c      	ldr	r1, [pc, #112]	; (22b14 <move_thread_to_end_of_prio_q+0x9c>)
   22aa4:	481c      	ldr	r0, [pc, #112]	; (22b18 <move_thread_to_end_of_prio_q+0xa0>)
   22aa6:	4a1d      	ldr	r2, [pc, #116]	; (22b1c <move_thread_to_end_of_prio_q+0xa4>)
   22aa8:	23ba      	movs	r3, #186	; 0xba
   22aaa:	f001 fe25 	bl	246f8 <printk>
   22aae:	481b      	ldr	r0, [pc, #108]	; (22b1c <move_thread_to_end_of_prio_q+0xa4>)
   22ab0:	21ba      	movs	r1, #186	; 0xba
   22ab2:	f002 f812 	bl	24ada <assert_post_action>
	return list->head == list;
   22ab6:	4a1a      	ldr	r2, [pc, #104]	; (22b20 <move_thread_to_end_of_prio_q+0xa8>)
   22ab8:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22aba:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   22abc:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ac0:	428b      	cmp	r3, r1
   22ac2:	bf08      	it	eq
   22ac4:	2300      	moveq	r3, #0
   22ac6:	2b00      	cmp	r3, #0
   22ac8:	bf38      	it	cc
   22aca:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22acc:	b1cb      	cbz	r3, 22b02 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   22ace:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22ad2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   22ad6:	4286      	cmp	r6, r0
   22ad8:	d00f      	beq.n	22afa <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   22ada:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22adc:	2800      	cmp	r0, #0
   22ade:	dd0c      	ble.n	22afa <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   22ae0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22ae2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   22ae6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   22ae8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22aea:	6890      	ldr	r0, [r2, #8]
   22aec:	1b03      	subs	r3, r0, r4
   22aee:	4258      	negs	r0, r3
}
   22af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   22af4:	4158      	adcs	r0, r3
   22af6:	f7ff bf87 	b.w	22a08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22afa:	42ab      	cmp	r3, r5
   22afc:	d001      	beq.n	22b02 <move_thread_to_end_of_prio_q+0x8a>
   22afe:	681b      	ldr	r3, [r3, #0]
   22b00:	e7e4      	b.n	22acc <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   22b02:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   22b06:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22b08:	6254      	str	r4, [r2, #36]	; 0x24
}
   22b0a:	e7ee      	b.n	22aea <move_thread_to_end_of_prio_q+0x72>
   22b0c:	20002528 	.word	0x20002528
   22b10:	20001d18 	.word	0x20001d18
   22b14:	000306a8 	.word	0x000306a8
   22b18:	000290f5 	.word	0x000290f5
   22b1c:	00030686 	.word	0x00030686
   22b20:	20002508 	.word	0x20002508

00022b24 <z_time_slice>:
{
   22b24:	b570      	push	{r4, r5, r6, lr}
   22b26:	4604      	mov	r4, r0
	__asm__ volatile(
   22b28:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b2c:	f3ef 8511 	mrs	r5, BASEPRI
   22b30:	f383 8812 	msr	BASEPRI_MAX, r3
   22b34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b38:	482a      	ldr	r0, [pc, #168]	; (22be4 <z_time_slice+0xc0>)
   22b3a:	f7fe fbcd 	bl	212d8 <z_spin_lock_valid>
   22b3e:	b968      	cbnz	r0, 22b5c <z_time_slice+0x38>
   22b40:	4a29      	ldr	r2, [pc, #164]	; (22be8 <z_time_slice+0xc4>)
   22b42:	492a      	ldr	r1, [pc, #168]	; (22bec <z_time_slice+0xc8>)
   22b44:	482a      	ldr	r0, [pc, #168]	; (22bf0 <z_time_slice+0xcc>)
   22b46:	2381      	movs	r3, #129	; 0x81
   22b48:	f001 fdd6 	bl	246f8 <printk>
   22b4c:	4925      	ldr	r1, [pc, #148]	; (22be4 <z_time_slice+0xc0>)
   22b4e:	4829      	ldr	r0, [pc, #164]	; (22bf4 <z_time_slice+0xd0>)
   22b50:	f001 fdd2 	bl	246f8 <printk>
   22b54:	4824      	ldr	r0, [pc, #144]	; (22be8 <z_time_slice+0xc4>)
   22b56:	2181      	movs	r1, #129	; 0x81
   22b58:	f001 ffbf 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22b5c:	4821      	ldr	r0, [pc, #132]	; (22be4 <z_time_slice+0xc0>)
   22b5e:	f7fe fbd9 	bl	21314 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   22b62:	4b25      	ldr	r3, [pc, #148]	; (22bf8 <z_time_slice+0xd4>)
   22b64:	4a25      	ldr	r2, [pc, #148]	; (22bfc <z_time_slice+0xd8>)
   22b66:	6898      	ldr	r0, [r3, #8]
   22b68:	6811      	ldr	r1, [r2, #0]
   22b6a:	4288      	cmp	r0, r1
   22b6c:	4619      	mov	r1, r3
   22b6e:	d118      	bne.n	22ba2 <z_time_slice+0x7e>
			z_reset_time_slice();
   22b70:	f7ff fd3e 	bl	225f0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b74:	481b      	ldr	r0, [pc, #108]	; (22be4 <z_time_slice+0xc0>)
   22b76:	f7fe fbbd 	bl	212f4 <z_spin_unlock_valid>
   22b7a:	b968      	cbnz	r0, 22b98 <z_time_slice+0x74>
   22b7c:	4a1a      	ldr	r2, [pc, #104]	; (22be8 <z_time_slice+0xc4>)
   22b7e:	4920      	ldr	r1, [pc, #128]	; (22c00 <z_time_slice+0xdc>)
   22b80:	481b      	ldr	r0, [pc, #108]	; (22bf0 <z_time_slice+0xcc>)
   22b82:	23ac      	movs	r3, #172	; 0xac
   22b84:	f001 fdb8 	bl	246f8 <printk>
   22b88:	4916      	ldr	r1, [pc, #88]	; (22be4 <z_time_slice+0xc0>)
   22b8a:	481e      	ldr	r0, [pc, #120]	; (22c04 <z_time_slice+0xe0>)
   22b8c:	f001 fdb4 	bl	246f8 <printk>
   22b90:	4815      	ldr	r0, [pc, #84]	; (22be8 <z_time_slice+0xc4>)
   22b92:	21ac      	movs	r1, #172	; 0xac
   22b94:	f001 ffa1 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22b98:	f385 8811 	msr	BASEPRI, r5
   22b9c:	f3bf 8f6f 	isb	sy
}
   22ba0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   22ba2:	2600      	movs	r6, #0
   22ba4:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   22ba6:	4a18      	ldr	r2, [pc, #96]	; (22c08 <z_time_slice+0xe4>)
   22ba8:	6812      	ldr	r2, [r2, #0]
   22baa:	b1ba      	cbz	r2, 22bdc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   22bac:	89c2      	ldrh	r2, [r0, #14]
   22bae:	2a7f      	cmp	r2, #127	; 0x7f
   22bb0:	d814      	bhi.n	22bdc <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   22bb2:	7b42      	ldrb	r2, [r0, #13]
   22bb4:	06d2      	lsls	r2, r2, #27
   22bb6:	d111      	bne.n	22bdc <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22bb8:	4a14      	ldr	r2, [pc, #80]	; (22c0c <z_time_slice+0xe8>)
   22bba:	f990 600e 	ldrsb.w	r6, [r0, #14]
   22bbe:	6812      	ldr	r2, [r2, #0]
   22bc0:	4296      	cmp	r6, r2
   22bc2:	db0b      	blt.n	22bdc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   22bc4:	4a12      	ldr	r2, [pc, #72]	; (22c10 <z_time_slice+0xec>)
   22bc6:	4290      	cmp	r0, r2
   22bc8:	d008      	beq.n	22bdc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   22bca:	691a      	ldr	r2, [r3, #16]
   22bcc:	42a2      	cmp	r2, r4
   22bce:	dc02      	bgt.n	22bd6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   22bd0:	f7ff ff52 	bl	22a78 <move_thread_to_end_of_prio_q>
   22bd4:	e7cc      	b.n	22b70 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   22bd6:	1b12      	subs	r2, r2, r4
   22bd8:	611a      	str	r2, [r3, #16]
   22bda:	e7cb      	b.n	22b74 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   22bdc:	2300      	movs	r3, #0
   22bde:	610b      	str	r3, [r1, #16]
   22be0:	e7c8      	b.n	22b74 <z_time_slice+0x50>
   22be2:	bf00      	nop
   22be4:	20002548 	.word	0x20002548
   22be8:	000291b5 	.word	0x000291b5
   22bec:	00029207 	.word	0x00029207
   22bf0:	000290f5 	.word	0x000290f5
   22bf4:	0002921c 	.word	0x0002921c
   22bf8:	20002508 	.word	0x20002508
   22bfc:	20002544 	.word	0x20002544
   22c00:	000291db 	.word	0x000291db
   22c04:	000291f2 	.word	0x000291f2
   22c08:	20002550 	.word	0x20002550
   22c0c:	2000254c 	.word	0x2000254c
   22c10:	20001d18 	.word	0x20001d18

00022c14 <ready_thread>:
{
   22c14:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22c16:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22c1a:	7b43      	ldrb	r3, [r0, #13]
   22c1c:	2a00      	cmp	r2, #0
{
   22c1e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22c20:	db3e      	blt.n	22ca0 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22c22:	06da      	lsls	r2, r3, #27
   22c24:	d13c      	bne.n	22ca0 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   22c26:	6985      	ldr	r5, [r0, #24]
   22c28:	2d00      	cmp	r5, #0
   22c2a:	d139      	bne.n	22ca0 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   22c2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22c30:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22c32:	4b1c      	ldr	r3, [pc, #112]	; (22ca4 <ready_thread+0x90>)
   22c34:	4298      	cmp	r0, r3
   22c36:	d109      	bne.n	22c4c <ready_thread+0x38>
   22c38:	491b      	ldr	r1, [pc, #108]	; (22ca8 <ready_thread+0x94>)
   22c3a:	481c      	ldr	r0, [pc, #112]	; (22cac <ready_thread+0x98>)
   22c3c:	4a1c      	ldr	r2, [pc, #112]	; (22cb0 <ready_thread+0x9c>)
   22c3e:	23ba      	movs	r3, #186	; 0xba
   22c40:	f001 fd5a 	bl	246f8 <printk>
   22c44:	481a      	ldr	r0, [pc, #104]	; (22cb0 <ready_thread+0x9c>)
   22c46:	21ba      	movs	r1, #186	; 0xba
   22c48:	f001 ff47 	bl	24ada <assert_post_action>
	return list->head == list;
   22c4c:	4919      	ldr	r1, [pc, #100]	; (22cb4 <ready_thread+0xa0>)
   22c4e:	460b      	mov	r3, r1
   22c50:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c54:	4298      	cmp	r0, r3
   22c56:	bf18      	it	ne
   22c58:	4605      	movne	r5, r0
   22c5a:	2d00      	cmp	r5, #0
   22c5c:	461a      	mov	r2, r3
   22c5e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22c60:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   22c62:	bf38      	it	cc
   22c64:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22c66:	b1b3      	cbz	r3, 22c96 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   22c68:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22c6c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   22c70:	4286      	cmp	r6, r0
   22c72:	d00c      	beq.n	22c8e <ready_thread+0x7a>
		return b2 - b1;
   22c74:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22c76:	2800      	cmp	r0, #0
   22c78:	dd09      	ble.n	22c8e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   22c7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22c7c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22c80:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22c82:	605c      	str	r4, [r3, #4]
}
   22c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   22c88:	2000      	movs	r0, #0
   22c8a:	f7ff bebd 	b.w	22a08 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22c8e:	42ab      	cmp	r3, r5
   22c90:	d001      	beq.n	22c96 <ready_thread+0x82>
   22c92:	681b      	ldr	r3, [r3, #0]
   22c94:	e7e7      	b.n	22c66 <ready_thread+0x52>
	node->prev = tail;
   22c96:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   22c9a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22c9c:	624c      	str	r4, [r1, #36]	; 0x24
}
   22c9e:	e7f1      	b.n	22c84 <ready_thread+0x70>
}
   22ca0:	bd70      	pop	{r4, r5, r6, pc}
   22ca2:	bf00      	nop
   22ca4:	20001d18 	.word	0x20001d18
   22ca8:	000306a8 	.word	0x000306a8
   22cac:	000290f5 	.word	0x000290f5
   22cb0:	00030686 	.word	0x00030686
   22cb4:	20002508 	.word	0x20002508

00022cb8 <z_ready_thread>:
{
   22cb8:	b538      	push	{r3, r4, r5, lr}
   22cba:	4604      	mov	r4, r0
	__asm__ volatile(
   22cbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cc0:	f3ef 8511 	mrs	r5, BASEPRI
   22cc4:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ccc:	4817      	ldr	r0, [pc, #92]	; (22d2c <z_ready_thread+0x74>)
   22cce:	f7fe fb03 	bl	212d8 <z_spin_lock_valid>
   22cd2:	b968      	cbnz	r0, 22cf0 <z_ready_thread+0x38>
   22cd4:	4a16      	ldr	r2, [pc, #88]	; (22d30 <z_ready_thread+0x78>)
   22cd6:	4917      	ldr	r1, [pc, #92]	; (22d34 <z_ready_thread+0x7c>)
   22cd8:	4817      	ldr	r0, [pc, #92]	; (22d38 <z_ready_thread+0x80>)
   22cda:	2381      	movs	r3, #129	; 0x81
   22cdc:	f001 fd0c 	bl	246f8 <printk>
   22ce0:	4912      	ldr	r1, [pc, #72]	; (22d2c <z_ready_thread+0x74>)
   22ce2:	4816      	ldr	r0, [pc, #88]	; (22d3c <z_ready_thread+0x84>)
   22ce4:	f001 fd08 	bl	246f8 <printk>
   22ce8:	4811      	ldr	r0, [pc, #68]	; (22d30 <z_ready_thread+0x78>)
   22cea:	2181      	movs	r1, #129	; 0x81
   22cec:	f001 fef5 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22cf0:	480e      	ldr	r0, [pc, #56]	; (22d2c <z_ready_thread+0x74>)
   22cf2:	f7fe fb0f 	bl	21314 <z_spin_lock_set_owner>
			ready_thread(thread);
   22cf6:	4620      	mov	r0, r4
   22cf8:	f7ff ff8c 	bl	22c14 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cfc:	480b      	ldr	r0, [pc, #44]	; (22d2c <z_ready_thread+0x74>)
   22cfe:	f7fe faf9 	bl	212f4 <z_spin_unlock_valid>
   22d02:	b968      	cbnz	r0, 22d20 <z_ready_thread+0x68>
   22d04:	4a0a      	ldr	r2, [pc, #40]	; (22d30 <z_ready_thread+0x78>)
   22d06:	490e      	ldr	r1, [pc, #56]	; (22d40 <z_ready_thread+0x88>)
   22d08:	480b      	ldr	r0, [pc, #44]	; (22d38 <z_ready_thread+0x80>)
   22d0a:	23ac      	movs	r3, #172	; 0xac
   22d0c:	f001 fcf4 	bl	246f8 <printk>
   22d10:	4906      	ldr	r1, [pc, #24]	; (22d2c <z_ready_thread+0x74>)
   22d12:	480c      	ldr	r0, [pc, #48]	; (22d44 <z_ready_thread+0x8c>)
   22d14:	f001 fcf0 	bl	246f8 <printk>
   22d18:	4805      	ldr	r0, [pc, #20]	; (22d30 <z_ready_thread+0x78>)
   22d1a:	21ac      	movs	r1, #172	; 0xac
   22d1c:	f001 fedd 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22d20:	f385 8811 	msr	BASEPRI, r5
   22d24:	f3bf 8f6f 	isb	sy
}
   22d28:	bd38      	pop	{r3, r4, r5, pc}
   22d2a:	bf00      	nop
   22d2c:	20002548 	.word	0x20002548
   22d30:	000291b5 	.word	0x000291b5
   22d34:	00029207 	.word	0x00029207
   22d38:	000290f5 	.word	0x000290f5
   22d3c:	0002921c 	.word	0x0002921c
   22d40:	000291db 	.word	0x000291db
   22d44:	000291f2 	.word	0x000291f2

00022d48 <z_sched_start>:
{
   22d48:	b538      	push	{r3, r4, r5, lr}
   22d4a:	4604      	mov	r4, r0
	__asm__ volatile(
   22d4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d50:	f3ef 8511 	mrs	r5, BASEPRI
   22d54:	f383 8812 	msr	BASEPRI_MAX, r3
   22d58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d5c:	481d      	ldr	r0, [pc, #116]	; (22dd4 <z_sched_start+0x8c>)
   22d5e:	f7fe fabb 	bl	212d8 <z_spin_lock_valid>
   22d62:	b968      	cbnz	r0, 22d80 <z_sched_start+0x38>
   22d64:	4a1c      	ldr	r2, [pc, #112]	; (22dd8 <z_sched_start+0x90>)
   22d66:	491d      	ldr	r1, [pc, #116]	; (22ddc <z_sched_start+0x94>)
   22d68:	481d      	ldr	r0, [pc, #116]	; (22de0 <z_sched_start+0x98>)
   22d6a:	2381      	movs	r3, #129	; 0x81
   22d6c:	f001 fcc4 	bl	246f8 <printk>
   22d70:	4918      	ldr	r1, [pc, #96]	; (22dd4 <z_sched_start+0x8c>)
   22d72:	481c      	ldr	r0, [pc, #112]	; (22de4 <z_sched_start+0x9c>)
   22d74:	f001 fcc0 	bl	246f8 <printk>
   22d78:	4817      	ldr	r0, [pc, #92]	; (22dd8 <z_sched_start+0x90>)
   22d7a:	2181      	movs	r1, #129	; 0x81
   22d7c:	f001 fead 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22d80:	4814      	ldr	r0, [pc, #80]	; (22dd4 <z_sched_start+0x8c>)
   22d82:	f7fe fac7 	bl	21314 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   22d86:	7b63      	ldrb	r3, [r4, #13]
   22d88:	075a      	lsls	r2, r3, #29
   22d8a:	d416      	bmi.n	22dba <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d8c:	4811      	ldr	r0, [pc, #68]	; (22dd4 <z_sched_start+0x8c>)
   22d8e:	f7fe fab1 	bl	212f4 <z_spin_unlock_valid>
   22d92:	b968      	cbnz	r0, 22db0 <z_sched_start+0x68>
   22d94:	4a10      	ldr	r2, [pc, #64]	; (22dd8 <z_sched_start+0x90>)
   22d96:	4914      	ldr	r1, [pc, #80]	; (22de8 <z_sched_start+0xa0>)
   22d98:	4811      	ldr	r0, [pc, #68]	; (22de0 <z_sched_start+0x98>)
   22d9a:	23ac      	movs	r3, #172	; 0xac
   22d9c:	f001 fcac 	bl	246f8 <printk>
   22da0:	490c      	ldr	r1, [pc, #48]	; (22dd4 <z_sched_start+0x8c>)
   22da2:	4812      	ldr	r0, [pc, #72]	; (22dec <z_sched_start+0xa4>)
   22da4:	f001 fca8 	bl	246f8 <printk>
   22da8:	480b      	ldr	r0, [pc, #44]	; (22dd8 <z_sched_start+0x90>)
   22daa:	21ac      	movs	r1, #172	; 0xac
   22dac:	f001 fe95 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22db0:	f385 8811 	msr	BASEPRI, r5
   22db4:	f3bf 8f6f 	isb	sy
}
   22db8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22dba:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   22dbe:	4620      	mov	r0, r4
   22dc0:	7363      	strb	r3, [r4, #13]
   22dc2:	f7ff ff27 	bl	22c14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22dc6:	4629      	mov	r1, r5
   22dc8:	4802      	ldr	r0, [pc, #8]	; (22dd4 <z_sched_start+0x8c>)
}
   22dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   22dce:	f7ff bcd3 	b.w	22778 <z_reschedule>
   22dd2:	bf00      	nop
   22dd4:	20002548 	.word	0x20002548
   22dd8:	000291b5 	.word	0x000291b5
   22ddc:	00029207 	.word	0x00029207
   22de0:	000290f5 	.word	0x000290f5
   22de4:	0002921c 	.word	0x0002921c
   22de8:	000291db 	.word	0x000291db
   22dec:	000291f2 	.word	0x000291f2

00022df0 <z_thread_timeout>:
{
   22df0:	b570      	push	{r4, r5, r6, lr}
   22df2:	4604      	mov	r4, r0
	__asm__ volatile(
   22df4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22df8:	f3ef 8611 	mrs	r6, BASEPRI
   22dfc:	f383 8812 	msr	BASEPRI_MAX, r3
   22e00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e04:	4820      	ldr	r0, [pc, #128]	; (22e88 <z_thread_timeout+0x98>)
   22e06:	f7fe fa67 	bl	212d8 <z_spin_lock_valid>
   22e0a:	b968      	cbnz	r0, 22e28 <z_thread_timeout+0x38>
   22e0c:	4a1f      	ldr	r2, [pc, #124]	; (22e8c <z_thread_timeout+0x9c>)
   22e0e:	4920      	ldr	r1, [pc, #128]	; (22e90 <z_thread_timeout+0xa0>)
   22e10:	4820      	ldr	r0, [pc, #128]	; (22e94 <z_thread_timeout+0xa4>)
   22e12:	2381      	movs	r3, #129	; 0x81
   22e14:	f001 fc70 	bl	246f8 <printk>
   22e18:	491b      	ldr	r1, [pc, #108]	; (22e88 <z_thread_timeout+0x98>)
   22e1a:	481f      	ldr	r0, [pc, #124]	; (22e98 <z_thread_timeout+0xa8>)
   22e1c:	f001 fc6c 	bl	246f8 <printk>
   22e20:	481a      	ldr	r0, [pc, #104]	; (22e8c <z_thread_timeout+0x9c>)
   22e22:	2181      	movs	r1, #129	; 0x81
   22e24:	f001 fe59 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22e28:	4817      	ldr	r0, [pc, #92]	; (22e88 <z_thread_timeout+0x98>)
   22e2a:	f7fe fa73 	bl	21314 <z_spin_lock_set_owner>
		if (!killed) {
   22e2e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22e32:	f013 0f28 	tst.w	r3, #40	; 0x28
   22e36:	d110      	bne.n	22e5a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   22e38:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22e3c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   22e40:	b113      	cbz	r3, 22e48 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   22e42:	4628      	mov	r0, r5
   22e44:	f7ff fd72 	bl	2292c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22e48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22e4c:	f023 0314 	bic.w	r3, r3, #20
   22e50:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   22e54:	4628      	mov	r0, r5
   22e56:	f7ff fedd 	bl	22c14 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e5a:	480b      	ldr	r0, [pc, #44]	; (22e88 <z_thread_timeout+0x98>)
   22e5c:	f7fe fa4a 	bl	212f4 <z_spin_unlock_valid>
   22e60:	b968      	cbnz	r0, 22e7e <z_thread_timeout+0x8e>
   22e62:	4a0a      	ldr	r2, [pc, #40]	; (22e8c <z_thread_timeout+0x9c>)
   22e64:	490d      	ldr	r1, [pc, #52]	; (22e9c <z_thread_timeout+0xac>)
   22e66:	480b      	ldr	r0, [pc, #44]	; (22e94 <z_thread_timeout+0xa4>)
   22e68:	23ac      	movs	r3, #172	; 0xac
   22e6a:	f001 fc45 	bl	246f8 <printk>
   22e6e:	4906      	ldr	r1, [pc, #24]	; (22e88 <z_thread_timeout+0x98>)
   22e70:	480b      	ldr	r0, [pc, #44]	; (22ea0 <z_thread_timeout+0xb0>)
   22e72:	f001 fc41 	bl	246f8 <printk>
   22e76:	4805      	ldr	r0, [pc, #20]	; (22e8c <z_thread_timeout+0x9c>)
   22e78:	21ac      	movs	r1, #172	; 0xac
   22e7a:	f001 fe2e 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22e7e:	f386 8811 	msr	BASEPRI, r6
   22e82:	f3bf 8f6f 	isb	sy
}
   22e86:	bd70      	pop	{r4, r5, r6, pc}
   22e88:	20002548 	.word	0x20002548
   22e8c:	000291b5 	.word	0x000291b5
   22e90:	00029207 	.word	0x00029207
   22e94:	000290f5 	.word	0x000290f5
   22e98:	0002921c 	.word	0x0002921c
   22e9c:	000291db 	.word	0x000291db
   22ea0:	000291f2 	.word	0x000291f2

00022ea4 <unready_thread>:
{
   22ea4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   22ea6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   22eaa:	7b43      	ldrb	r3, [r0, #13]
   22eac:	2a00      	cmp	r2, #0
{
   22eae:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22eb0:	da06      	bge.n	22ec0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22eb6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22eb8:	4601      	mov	r1, r0
   22eba:	4806      	ldr	r0, [pc, #24]	; (22ed4 <unready_thread+0x30>)
   22ebc:	f7ff fd14 	bl	228e8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   22ec0:	4b05      	ldr	r3, [pc, #20]	; (22ed8 <unready_thread+0x34>)
   22ec2:	6898      	ldr	r0, [r3, #8]
   22ec4:	1b03      	subs	r3, r0, r4
   22ec6:	4258      	negs	r0, r3
}
   22ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   22ecc:	4158      	adcs	r0, r3
   22ece:	f7ff bd9b 	b.w	22a08 <update_cache>
   22ed2:	bf00      	nop
   22ed4:	20002528 	.word	0x20002528
   22ed8:	20002508 	.word	0x20002508

00022edc <add_to_waitq_locked>:
{
   22edc:	b538      	push	{r3, r4, r5, lr}
   22ede:	4604      	mov	r4, r0
   22ee0:	460d      	mov	r5, r1
	unready_thread(thread);
   22ee2:	f7ff ffdf 	bl	22ea4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22ee6:	7b63      	ldrb	r3, [r4, #13]
   22ee8:	f043 0302 	orr.w	r3, r3, #2
   22eec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22eee:	b31d      	cbz	r5, 22f38 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22ef0:	4b17      	ldr	r3, [pc, #92]	; (22f50 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   22ef2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22ef4:	429c      	cmp	r4, r3
   22ef6:	d109      	bne.n	22f0c <add_to_waitq_locked+0x30>
   22ef8:	4916      	ldr	r1, [pc, #88]	; (22f54 <add_to_waitq_locked+0x78>)
   22efa:	4817      	ldr	r0, [pc, #92]	; (22f58 <add_to_waitq_locked+0x7c>)
   22efc:	4a17      	ldr	r2, [pc, #92]	; (22f5c <add_to_waitq_locked+0x80>)
   22efe:	23ba      	movs	r3, #186	; 0xba
   22f00:	f001 fbfa 	bl	246f8 <printk>
   22f04:	4815      	ldr	r0, [pc, #84]	; (22f5c <add_to_waitq_locked+0x80>)
   22f06:	21ba      	movs	r1, #186	; 0xba
   22f08:	f001 fde7 	bl	24ada <assert_post_action>
	return list->head == list;
   22f0c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f0e:	429d      	cmp	r5, r3
   22f10:	bf08      	it	eq
   22f12:	2300      	moveq	r3, #0
   22f14:	2b00      	cmp	r3, #0
   22f16:	bf38      	it	cc
   22f18:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22f1a:	b19b      	cbz	r3, 22f44 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   22f1c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22f20:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22f24:	4291      	cmp	r1, r2
   22f26:	d008      	beq.n	22f3a <add_to_waitq_locked+0x5e>
		return b2 - b1;
   22f28:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22f2a:	2a00      	cmp	r2, #0
   22f2c:	dd05      	ble.n	22f3a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   22f2e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22f30:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22f34:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22f36:	605c      	str	r4, [r3, #4]
}
   22f38:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22f3a:	686a      	ldr	r2, [r5, #4]
   22f3c:	4293      	cmp	r3, r2
   22f3e:	d001      	beq.n	22f44 <add_to_waitq_locked+0x68>
   22f40:	681b      	ldr	r3, [r3, #0]
   22f42:	e7ea      	b.n	22f1a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   22f44:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22f46:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22f4a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22f4c:	606c      	str	r4, [r5, #4]
   22f4e:	e7f3      	b.n	22f38 <add_to_waitq_locked+0x5c>
   22f50:	20001d18 	.word	0x20001d18
   22f54:	000306a8 	.word	0x000306a8
   22f58:	000290f5 	.word	0x000290f5
   22f5c:	00030686 	.word	0x00030686

00022f60 <pend>:
{
   22f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f64:	4604      	mov	r4, r0
   22f66:	460d      	mov	r5, r1
   22f68:	4616      	mov	r6, r2
   22f6a:	461f      	mov	r7, r3
	__asm__ volatile(
   22f6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f70:	f3ef 8811 	mrs	r8, BASEPRI
   22f74:	f383 8812 	msr	BASEPRI_MAX, r3
   22f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f7c:	481f      	ldr	r0, [pc, #124]	; (22ffc <pend+0x9c>)
   22f7e:	f7fe f9ab 	bl	212d8 <z_spin_lock_valid>
   22f82:	b968      	cbnz	r0, 22fa0 <pend+0x40>
   22f84:	4a1e      	ldr	r2, [pc, #120]	; (23000 <pend+0xa0>)
   22f86:	491f      	ldr	r1, [pc, #124]	; (23004 <pend+0xa4>)
   22f88:	481f      	ldr	r0, [pc, #124]	; (23008 <pend+0xa8>)
   22f8a:	2381      	movs	r3, #129	; 0x81
   22f8c:	f001 fbb4 	bl	246f8 <printk>
   22f90:	491a      	ldr	r1, [pc, #104]	; (22ffc <pend+0x9c>)
   22f92:	481e      	ldr	r0, [pc, #120]	; (2300c <pend+0xac>)
   22f94:	f001 fbb0 	bl	246f8 <printk>
   22f98:	4819      	ldr	r0, [pc, #100]	; (23000 <pend+0xa0>)
   22f9a:	2181      	movs	r1, #129	; 0x81
   22f9c:	f001 fd9d 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   22fa0:	4816      	ldr	r0, [pc, #88]	; (22ffc <pend+0x9c>)
   22fa2:	f7fe f9b7 	bl	21314 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   22fa6:	4620      	mov	r0, r4
   22fa8:	4629      	mov	r1, r5
   22faa:	f7ff ff97 	bl	22edc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fae:	4813      	ldr	r0, [pc, #76]	; (22ffc <pend+0x9c>)
   22fb0:	f7fe f9a0 	bl	212f4 <z_spin_unlock_valid>
   22fb4:	b968      	cbnz	r0, 22fd2 <pend+0x72>
   22fb6:	4a12      	ldr	r2, [pc, #72]	; (23000 <pend+0xa0>)
   22fb8:	4915      	ldr	r1, [pc, #84]	; (23010 <pend+0xb0>)
   22fba:	4813      	ldr	r0, [pc, #76]	; (23008 <pend+0xa8>)
   22fbc:	23ac      	movs	r3, #172	; 0xac
   22fbe:	f001 fb9b 	bl	246f8 <printk>
   22fc2:	490e      	ldr	r1, [pc, #56]	; (22ffc <pend+0x9c>)
   22fc4:	4813      	ldr	r0, [pc, #76]	; (23014 <pend+0xb4>)
   22fc6:	f001 fb97 	bl	246f8 <printk>
   22fca:	480d      	ldr	r0, [pc, #52]	; (23000 <pend+0xa0>)
   22fcc:	21ac      	movs	r1, #172	; 0xac
   22fce:	f001 fd84 	bl	24ada <assert_post_action>
	__asm__ volatile(
   22fd2:	f388 8811 	msr	BASEPRI, r8
   22fd6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22fda:	1c7b      	adds	r3, r7, #1
   22fdc:	bf08      	it	eq
   22fde:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22fe2:	d008      	beq.n	22ff6 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22fe4:	4632      	mov	r2, r6
   22fe6:	463b      	mov	r3, r7
   22fe8:	f104 0018 	add.w	r0, r4, #24
   22fec:	490a      	ldr	r1, [pc, #40]	; (23018 <pend+0xb8>)
}
   22fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22ff2:	f000 bd95 	b.w	23b20 <z_add_timeout>
   22ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22ffa:	bf00      	nop
   22ffc:	20002548 	.word	0x20002548
   23000:	000291b5 	.word	0x000291b5
   23004:	00029207 	.word	0x00029207
   23008:	000290f5 	.word	0x000290f5
   2300c:	0002921c 	.word	0x0002921c
   23010:	000291db 	.word	0x000291db
   23014:	000291f2 	.word	0x000291f2
   23018:	00022df1 	.word	0x00022df1

0002301c <z_pend_curr>:
{
   2301c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   2301e:	4b11      	ldr	r3, [pc, #68]	; (23064 <z_pend_curr+0x48>)
{
   23020:	4604      	mov	r4, r0
	pending_current = _current;
   23022:	6898      	ldr	r0, [r3, #8]
   23024:	4b10      	ldr	r3, [pc, #64]	; (23068 <z_pend_curr+0x4c>)
{
   23026:	460d      	mov	r5, r1
	pending_current = _current;
   23028:	6018      	str	r0, [r3, #0]
{
   2302a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2302c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23030:	f7ff ff96 	bl	22f60 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23034:	4620      	mov	r0, r4
   23036:	f7fe f95d 	bl	212f4 <z_spin_unlock_valid>
   2303a:	b968      	cbnz	r0, 23058 <z_pend_curr+0x3c>
   2303c:	4a0b      	ldr	r2, [pc, #44]	; (2306c <z_pend_curr+0x50>)
   2303e:	490c      	ldr	r1, [pc, #48]	; (23070 <z_pend_curr+0x54>)
   23040:	480c      	ldr	r0, [pc, #48]	; (23074 <z_pend_curr+0x58>)
   23042:	23c3      	movs	r3, #195	; 0xc3
   23044:	f001 fb58 	bl	246f8 <printk>
   23048:	480b      	ldr	r0, [pc, #44]	; (23078 <z_pend_curr+0x5c>)
   2304a:	4621      	mov	r1, r4
   2304c:	f001 fb54 	bl	246f8 <printk>
   23050:	4806      	ldr	r0, [pc, #24]	; (2306c <z_pend_curr+0x50>)
   23052:	21c3      	movs	r1, #195	; 0xc3
   23054:	f001 fd41 	bl	24ada <assert_post_action>
   23058:	4628      	mov	r0, r5
}
   2305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2305e:	f7f0 bd6b 	b.w	13b38 <arch_swap>
   23062:	bf00      	nop
   23064:	20002508 	.word	0x20002508
   23068:	20002544 	.word	0x20002544
   2306c:	000291b5 	.word	0x000291b5
   23070:	000291db 	.word	0x000291db
   23074:	000290f5 	.word	0x000290f5
   23078:	000291f2 	.word	0x000291f2

0002307c <z_set_prio>:
{
   2307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2307e:	4604      	mov	r4, r0
   23080:	460e      	mov	r6, r1
	__asm__ volatile(
   23082:	f04f 0340 	mov.w	r3, #64	; 0x40
   23086:	f3ef 8711 	mrs	r7, BASEPRI
   2308a:	f383 8812 	msr	BASEPRI_MAX, r3
   2308e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23092:	483c      	ldr	r0, [pc, #240]	; (23184 <z_set_prio+0x108>)
   23094:	f7fe f920 	bl	212d8 <z_spin_lock_valid>
   23098:	b968      	cbnz	r0, 230b6 <z_set_prio+0x3a>
   2309a:	4a3b      	ldr	r2, [pc, #236]	; (23188 <z_set_prio+0x10c>)
   2309c:	493b      	ldr	r1, [pc, #236]	; (2318c <z_set_prio+0x110>)
   2309e:	483c      	ldr	r0, [pc, #240]	; (23190 <z_set_prio+0x114>)
   230a0:	2381      	movs	r3, #129	; 0x81
   230a2:	f001 fb29 	bl	246f8 <printk>
   230a6:	4937      	ldr	r1, [pc, #220]	; (23184 <z_set_prio+0x108>)
   230a8:	483a      	ldr	r0, [pc, #232]	; (23194 <z_set_prio+0x118>)
   230aa:	f001 fb25 	bl	246f8 <printk>
   230ae:	4836      	ldr	r0, [pc, #216]	; (23188 <z_set_prio+0x10c>)
   230b0:	2181      	movs	r1, #129	; 0x81
   230b2:	f001 fd12 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   230b6:	4833      	ldr	r0, [pc, #204]	; (23184 <z_set_prio+0x108>)
   230b8:	f7fe f92c 	bl	21314 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   230bc:	7b63      	ldrb	r3, [r4, #13]
   230be:	06da      	lsls	r2, r3, #27
   230c0:	b276      	sxtb	r6, r6
   230c2:	d15c      	bne.n	2317e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   230c4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   230c6:	2d00      	cmp	r5, #0
   230c8:	d159      	bne.n	2317e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   230ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   230ce:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   230d0:	4831      	ldr	r0, [pc, #196]	; (23198 <z_set_prio+0x11c>)
   230d2:	4621      	mov	r1, r4
   230d4:	f7ff fc08 	bl	228e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   230d8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   230da:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   230dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   230e0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   230e2:	4b2e      	ldr	r3, [pc, #184]	; (2319c <z_set_prio+0x120>)
   230e4:	429c      	cmp	r4, r3
   230e6:	d109      	bne.n	230fc <z_set_prio+0x80>
   230e8:	492d      	ldr	r1, [pc, #180]	; (231a0 <z_set_prio+0x124>)
   230ea:	4829      	ldr	r0, [pc, #164]	; (23190 <z_set_prio+0x114>)
   230ec:	4a2d      	ldr	r2, [pc, #180]	; (231a4 <z_set_prio+0x128>)
   230ee:	23ba      	movs	r3, #186	; 0xba
   230f0:	f001 fb02 	bl	246f8 <printk>
   230f4:	482b      	ldr	r0, [pc, #172]	; (231a4 <z_set_prio+0x128>)
   230f6:	21ba      	movs	r1, #186	; 0xba
   230f8:	f001 fcef 	bl	24ada <assert_post_action>
	return list->head == list;
   230fc:	492a      	ldr	r1, [pc, #168]	; (231a8 <z_set_prio+0x12c>)
   230fe:	460b      	mov	r3, r1
   23100:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23104:	4298      	cmp	r0, r3
   23106:	bf18      	it	ne
   23108:	4605      	movne	r5, r0
   2310a:	2d00      	cmp	r5, #0
   2310c:	461a      	mov	r2, r3
   2310e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23110:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   23112:	bf38      	it	cc
   23114:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23116:	b36b      	cbz	r3, 23174 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   23118:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2311c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   23120:	4286      	cmp	r6, r0
   23122:	d023      	beq.n	2316c <z_set_prio+0xf0>
		return b2 - b1;
   23124:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23126:	2800      	cmp	r0, #0
   23128:	dd20      	ble.n	2316c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   2312a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2312c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23130:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23132:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23134:	2001      	movs	r0, #1
   23136:	f7ff fc67 	bl	22a08 <update_cache>
   2313a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2313c:	4811      	ldr	r0, [pc, #68]	; (23184 <z_set_prio+0x108>)
   2313e:	f7fe f8d9 	bl	212f4 <z_spin_unlock_valid>
   23142:	b968      	cbnz	r0, 23160 <z_set_prio+0xe4>
   23144:	4a10      	ldr	r2, [pc, #64]	; (23188 <z_set_prio+0x10c>)
   23146:	4919      	ldr	r1, [pc, #100]	; (231ac <z_set_prio+0x130>)
   23148:	4811      	ldr	r0, [pc, #68]	; (23190 <z_set_prio+0x114>)
   2314a:	23ac      	movs	r3, #172	; 0xac
   2314c:	f001 fad4 	bl	246f8 <printk>
   23150:	490c      	ldr	r1, [pc, #48]	; (23184 <z_set_prio+0x108>)
   23152:	4817      	ldr	r0, [pc, #92]	; (231b0 <z_set_prio+0x134>)
   23154:	f001 fad0 	bl	246f8 <printk>
   23158:	480b      	ldr	r0, [pc, #44]	; (23188 <z_set_prio+0x10c>)
   2315a:	21ac      	movs	r1, #172	; 0xac
   2315c:	f001 fcbd 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23160:	f387 8811 	msr	BASEPRI, r7
   23164:	f3bf 8f6f 	isb	sy
}
   23168:	4620      	mov	r0, r4
   2316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2316c:	42ab      	cmp	r3, r5
   2316e:	d001      	beq.n	23174 <z_set_prio+0xf8>
   23170:	681b      	ldr	r3, [r3, #0]
   23172:	e7d0      	b.n	23116 <z_set_prio+0x9a>
	node->prev = tail;
   23174:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   23178:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2317a:	624c      	str	r4, [r1, #36]	; 0x24
}
   2317c:	e7da      	b.n	23134 <z_set_prio+0xb8>
			thread->base.prio = prio;
   2317e:	73a6      	strb	r6, [r4, #14]
   23180:	2400      	movs	r4, #0
   23182:	e7db      	b.n	2313c <z_set_prio+0xc0>
   23184:	20002548 	.word	0x20002548
   23188:	000291b5 	.word	0x000291b5
   2318c:	00029207 	.word	0x00029207
   23190:	000290f5 	.word	0x000290f5
   23194:	0002921c 	.word	0x0002921c
   23198:	20002528 	.word	0x20002528
   2319c:	20001d18 	.word	0x20001d18
   231a0:	000306a8 	.word	0x000306a8
   231a4:	00030686 	.word	0x00030686
   231a8:	20002508 	.word	0x20002508
   231ac:	000291db 	.word	0x000291db
   231b0:	000291f2 	.word	0x000291f2

000231b4 <z_impl_k_thread_suspend>:
{
   231b4:	b570      	push	{r4, r5, r6, lr}
   231b6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   231b8:	3018      	adds	r0, #24
   231ba:	f000 fd85 	bl	23cc8 <z_abort_timeout>
	__asm__ volatile(
   231be:	f04f 0340 	mov.w	r3, #64	; 0x40
   231c2:	f3ef 8611 	mrs	r6, BASEPRI
   231c6:	f383 8812 	msr	BASEPRI_MAX, r3
   231ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231ce:	4825      	ldr	r0, [pc, #148]	; (23264 <z_impl_k_thread_suspend+0xb0>)
   231d0:	f7fe f882 	bl	212d8 <z_spin_lock_valid>
   231d4:	b968      	cbnz	r0, 231f2 <z_impl_k_thread_suspend+0x3e>
   231d6:	4a24      	ldr	r2, [pc, #144]	; (23268 <z_impl_k_thread_suspend+0xb4>)
   231d8:	4924      	ldr	r1, [pc, #144]	; (2326c <z_impl_k_thread_suspend+0xb8>)
   231da:	4825      	ldr	r0, [pc, #148]	; (23270 <z_impl_k_thread_suspend+0xbc>)
   231dc:	2381      	movs	r3, #129	; 0x81
   231de:	f001 fa8b 	bl	246f8 <printk>
   231e2:	4920      	ldr	r1, [pc, #128]	; (23264 <z_impl_k_thread_suspend+0xb0>)
   231e4:	4823      	ldr	r0, [pc, #140]	; (23274 <z_impl_k_thread_suspend+0xc0>)
   231e6:	f001 fa87 	bl	246f8 <printk>
   231ea:	481f      	ldr	r0, [pc, #124]	; (23268 <z_impl_k_thread_suspend+0xb4>)
   231ec:	2181      	movs	r1, #129	; 0x81
   231ee:	f001 fc74 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   231f2:	481c      	ldr	r0, [pc, #112]	; (23264 <z_impl_k_thread_suspend+0xb0>)
   231f4:	f7fe f88e 	bl	21314 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   231f8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   231fc:	7b63      	ldrb	r3, [r4, #13]
   231fe:	2a00      	cmp	r2, #0
   23200:	da06      	bge.n	23210 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   23206:	481c      	ldr	r0, [pc, #112]	; (23278 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23208:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2320a:	4621      	mov	r1, r4
   2320c:	f7ff fb6c 	bl	228e8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   23210:	4d1a      	ldr	r5, [pc, #104]	; (2327c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23212:	7b63      	ldrb	r3, [r4, #13]
   23214:	68a8      	ldr	r0, [r5, #8]
   23216:	f043 0310 	orr.w	r3, r3, #16
   2321a:	7363      	strb	r3, [r4, #13]
   2321c:	1b03      	subs	r3, r0, r4
   2321e:	4258      	negs	r0, r3
   23220:	4158      	adcs	r0, r3
   23222:	f7ff fbf1 	bl	22a08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23226:	480f      	ldr	r0, [pc, #60]	; (23264 <z_impl_k_thread_suspend+0xb0>)
   23228:	f7fe f864 	bl	212f4 <z_spin_unlock_valid>
   2322c:	b968      	cbnz	r0, 2324a <z_impl_k_thread_suspend+0x96>
   2322e:	4a0e      	ldr	r2, [pc, #56]	; (23268 <z_impl_k_thread_suspend+0xb4>)
   23230:	4913      	ldr	r1, [pc, #76]	; (23280 <z_impl_k_thread_suspend+0xcc>)
   23232:	480f      	ldr	r0, [pc, #60]	; (23270 <z_impl_k_thread_suspend+0xbc>)
   23234:	23ac      	movs	r3, #172	; 0xac
   23236:	f001 fa5f 	bl	246f8 <printk>
   2323a:	490a      	ldr	r1, [pc, #40]	; (23264 <z_impl_k_thread_suspend+0xb0>)
   2323c:	4811      	ldr	r0, [pc, #68]	; (23284 <z_impl_k_thread_suspend+0xd0>)
   2323e:	f001 fa5b 	bl	246f8 <printk>
   23242:	4809      	ldr	r0, [pc, #36]	; (23268 <z_impl_k_thread_suspend+0xb4>)
   23244:	21ac      	movs	r1, #172	; 0xac
   23246:	f001 fc48 	bl	24ada <assert_post_action>
	__asm__ volatile(
   2324a:	f386 8811 	msr	BASEPRI, r6
   2324e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23252:	68ab      	ldr	r3, [r5, #8]
   23254:	42a3      	cmp	r3, r4
   23256:	d103      	bne.n	23260 <z_impl_k_thread_suspend+0xac>
}
   23258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2325c:	f004 bf90 	b.w	28180 <z_reschedule_unlocked>
}
   23260:	bd70      	pop	{r4, r5, r6, pc}
   23262:	bf00      	nop
   23264:	20002548 	.word	0x20002548
   23268:	000291b5 	.word	0x000291b5
   2326c:	00029207 	.word	0x00029207
   23270:	000290f5 	.word	0x000290f5
   23274:	0002921c 	.word	0x0002921c
   23278:	20002528 	.word	0x20002528
   2327c:	20002508 	.word	0x20002508
   23280:	000291db 	.word	0x000291db
   23284:	000291f2 	.word	0x000291f2

00023288 <k_sched_unlock>:
{
   23288:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2328a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2328e:	f3ef 8511 	mrs	r5, BASEPRI
   23292:	f383 8812 	msr	BASEPRI_MAX, r3
   23296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2329a:	482d      	ldr	r0, [pc, #180]	; (23350 <k_sched_unlock+0xc8>)
   2329c:	f7fe f81c 	bl	212d8 <z_spin_lock_valid>
   232a0:	b968      	cbnz	r0, 232be <k_sched_unlock+0x36>
   232a2:	4a2c      	ldr	r2, [pc, #176]	; (23354 <k_sched_unlock+0xcc>)
   232a4:	492c      	ldr	r1, [pc, #176]	; (23358 <k_sched_unlock+0xd0>)
   232a6:	482d      	ldr	r0, [pc, #180]	; (2335c <k_sched_unlock+0xd4>)
   232a8:	2381      	movs	r3, #129	; 0x81
   232aa:	f001 fa25 	bl	246f8 <printk>
   232ae:	4928      	ldr	r1, [pc, #160]	; (23350 <k_sched_unlock+0xc8>)
   232b0:	482b      	ldr	r0, [pc, #172]	; (23360 <k_sched_unlock+0xd8>)
   232b2:	f001 fa21 	bl	246f8 <printk>
   232b6:	4827      	ldr	r0, [pc, #156]	; (23354 <k_sched_unlock+0xcc>)
   232b8:	2181      	movs	r1, #129	; 0x81
   232ba:	f001 fc0e 	bl	24ada <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   232be:	4c29      	ldr	r4, [pc, #164]	; (23364 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   232c0:	4823      	ldr	r0, [pc, #140]	; (23350 <k_sched_unlock+0xc8>)
   232c2:	f7fe f827 	bl	21314 <z_spin_lock_set_owner>
   232c6:	68a2      	ldr	r2, [r4, #8]
   232c8:	7bd2      	ldrb	r2, [r2, #15]
   232ca:	b972      	cbnz	r2, 232ea <k_sched_unlock+0x62>
   232cc:	4926      	ldr	r1, [pc, #152]	; (23368 <k_sched_unlock+0xe0>)
   232ce:	4a27      	ldr	r2, [pc, #156]	; (2336c <k_sched_unlock+0xe4>)
   232d0:	4822      	ldr	r0, [pc, #136]	; (2335c <k_sched_unlock+0xd4>)
   232d2:	f240 3385 	movw	r3, #901	; 0x385
   232d6:	f001 fa0f 	bl	246f8 <printk>
   232da:	4825      	ldr	r0, [pc, #148]	; (23370 <k_sched_unlock+0xe8>)
   232dc:	f001 fa0c 	bl	246f8 <printk>
   232e0:	4822      	ldr	r0, [pc, #136]	; (2336c <k_sched_unlock+0xe4>)
   232e2:	f240 3185 	movw	r1, #901	; 0x385
   232e6:	f001 fbf8 	bl	24ada <assert_post_action>
   232ea:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   232ee:	b173      	cbz	r3, 2330e <k_sched_unlock+0x86>
   232f0:	4920      	ldr	r1, [pc, #128]	; (23374 <k_sched_unlock+0xec>)
   232f2:	4a1e      	ldr	r2, [pc, #120]	; (2336c <k_sched_unlock+0xe4>)
   232f4:	4819      	ldr	r0, [pc, #100]	; (2335c <k_sched_unlock+0xd4>)
   232f6:	f240 3386 	movw	r3, #902	; 0x386
   232fa:	f001 f9fd 	bl	246f8 <printk>
   232fe:	481c      	ldr	r0, [pc, #112]	; (23370 <k_sched_unlock+0xe8>)
   23300:	f001 f9fa 	bl	246f8 <printk>
   23304:	4819      	ldr	r0, [pc, #100]	; (2336c <k_sched_unlock+0xe4>)
   23306:	f240 3186 	movw	r1, #902	; 0x386
   2330a:	f001 fbe6 	bl	24ada <assert_post_action>
		++_current->base.sched_locked;
   2330e:	68a2      	ldr	r2, [r4, #8]
   23310:	7bd3      	ldrb	r3, [r2, #15]
   23312:	3301      	adds	r3, #1
		update_cache(0);
   23314:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   23316:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23318:	f7ff fb76 	bl	22a08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2331c:	480c      	ldr	r0, [pc, #48]	; (23350 <k_sched_unlock+0xc8>)
   2331e:	f7fd ffe9 	bl	212f4 <z_spin_unlock_valid>
   23322:	b968      	cbnz	r0, 23340 <k_sched_unlock+0xb8>
   23324:	4a0b      	ldr	r2, [pc, #44]	; (23354 <k_sched_unlock+0xcc>)
   23326:	4914      	ldr	r1, [pc, #80]	; (23378 <k_sched_unlock+0xf0>)
   23328:	480c      	ldr	r0, [pc, #48]	; (2335c <k_sched_unlock+0xd4>)
   2332a:	23ac      	movs	r3, #172	; 0xac
   2332c:	f001 f9e4 	bl	246f8 <printk>
   23330:	4907      	ldr	r1, [pc, #28]	; (23350 <k_sched_unlock+0xc8>)
   23332:	4812      	ldr	r0, [pc, #72]	; (2337c <k_sched_unlock+0xf4>)
   23334:	f001 f9e0 	bl	246f8 <printk>
   23338:	4806      	ldr	r0, [pc, #24]	; (23354 <k_sched_unlock+0xcc>)
   2333a:	21ac      	movs	r1, #172	; 0xac
   2333c:	f001 fbcd 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23340:	f385 8811 	msr	BASEPRI, r5
   23344:	f3bf 8f6f 	isb	sy
}
   23348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2334c:	f004 bf18 	b.w	28180 <z_reschedule_unlocked>
   23350:	20002548 	.word	0x20002548
   23354:	000291b5 	.word	0x000291b5
   23358:	00029207 	.word	0x00029207
   2335c:	000290f5 	.word	0x000290f5
   23360:	0002921c 	.word	0x0002921c
   23364:	20002508 	.word	0x20002508
   23368:	00030707 	.word	0x00030707
   2336c:	00030686 	.word	0x00030686
   23370:	0002f37f 	.word	0x0002f37f
   23374:	000303be 	.word	0x000303be
   23378:	000291db 	.word	0x000291db
   2337c:	000291f2 	.word	0x000291f2

00023380 <z_unpend1_no_timeout>:
{
   23380:	b538      	push	{r3, r4, r5, lr}
   23382:	4604      	mov	r4, r0
	__asm__ volatile(
   23384:	f04f 0340 	mov.w	r3, #64	; 0x40
   23388:	f3ef 8511 	mrs	r5, BASEPRI
   2338c:	f383 8812 	msr	BASEPRI_MAX, r3
   23390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23394:	4819      	ldr	r0, [pc, #100]	; (233fc <z_unpend1_no_timeout+0x7c>)
   23396:	f7fd ff9f 	bl	212d8 <z_spin_lock_valid>
   2339a:	b968      	cbnz	r0, 233b8 <z_unpend1_no_timeout+0x38>
   2339c:	4a18      	ldr	r2, [pc, #96]	; (23400 <z_unpend1_no_timeout+0x80>)
   2339e:	4919      	ldr	r1, [pc, #100]	; (23404 <z_unpend1_no_timeout+0x84>)
   233a0:	4819      	ldr	r0, [pc, #100]	; (23408 <z_unpend1_no_timeout+0x88>)
   233a2:	2381      	movs	r3, #129	; 0x81
   233a4:	f001 f9a8 	bl	246f8 <printk>
   233a8:	4914      	ldr	r1, [pc, #80]	; (233fc <z_unpend1_no_timeout+0x7c>)
   233aa:	4818      	ldr	r0, [pc, #96]	; (2340c <z_unpend1_no_timeout+0x8c>)
   233ac:	f001 f9a4 	bl	246f8 <printk>
   233b0:	4813      	ldr	r0, [pc, #76]	; (23400 <z_unpend1_no_timeout+0x80>)
   233b2:	2181      	movs	r1, #129	; 0x81
   233b4:	f001 fb91 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   233b8:	4810      	ldr	r0, [pc, #64]	; (233fc <z_unpend1_no_timeout+0x7c>)
   233ba:	f7fd ffab 	bl	21314 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   233be:	4620      	mov	r0, r4
   233c0:	f004 fee8 	bl	28194 <z_priq_dumb_best>
		if (thread != NULL) {
   233c4:	4604      	mov	r4, r0
   233c6:	b108      	cbz	r0, 233cc <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   233c8:	f7ff fab0 	bl	2292c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233cc:	480b      	ldr	r0, [pc, #44]	; (233fc <z_unpend1_no_timeout+0x7c>)
   233ce:	f7fd ff91 	bl	212f4 <z_spin_unlock_valid>
   233d2:	b968      	cbnz	r0, 233f0 <z_unpend1_no_timeout+0x70>
   233d4:	4a0a      	ldr	r2, [pc, #40]	; (23400 <z_unpend1_no_timeout+0x80>)
   233d6:	490e      	ldr	r1, [pc, #56]	; (23410 <z_unpend1_no_timeout+0x90>)
   233d8:	480b      	ldr	r0, [pc, #44]	; (23408 <z_unpend1_no_timeout+0x88>)
   233da:	23ac      	movs	r3, #172	; 0xac
   233dc:	f001 f98c 	bl	246f8 <printk>
   233e0:	4906      	ldr	r1, [pc, #24]	; (233fc <z_unpend1_no_timeout+0x7c>)
   233e2:	480c      	ldr	r0, [pc, #48]	; (23414 <z_unpend1_no_timeout+0x94>)
   233e4:	f001 f988 	bl	246f8 <printk>
   233e8:	4805      	ldr	r0, [pc, #20]	; (23400 <z_unpend1_no_timeout+0x80>)
   233ea:	21ac      	movs	r1, #172	; 0xac
   233ec:	f001 fb75 	bl	24ada <assert_post_action>
	__asm__ volatile(
   233f0:	f385 8811 	msr	BASEPRI, r5
   233f4:	f3bf 8f6f 	isb	sy
}
   233f8:	4620      	mov	r0, r4
   233fa:	bd38      	pop	{r3, r4, r5, pc}
   233fc:	20002548 	.word	0x20002548
   23400:	000291b5 	.word	0x000291b5
   23404:	00029207 	.word	0x00029207
   23408:	000290f5 	.word	0x000290f5
   2340c:	0002921c 	.word	0x0002921c
   23410:	000291db 	.word	0x000291db
   23414:	000291f2 	.word	0x000291f2

00023418 <z_unpend_first_thread>:
{
   23418:	b538      	push	{r3, r4, r5, lr}
   2341a:	4604      	mov	r4, r0
	__asm__ volatile(
   2341c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23420:	f3ef 8511 	mrs	r5, BASEPRI
   23424:	f383 8812 	msr	BASEPRI_MAX, r3
   23428:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2342c:	481b      	ldr	r0, [pc, #108]	; (2349c <z_unpend_first_thread+0x84>)
   2342e:	f7fd ff53 	bl	212d8 <z_spin_lock_valid>
   23432:	b968      	cbnz	r0, 23450 <z_unpend_first_thread+0x38>
   23434:	4a1a      	ldr	r2, [pc, #104]	; (234a0 <z_unpend_first_thread+0x88>)
   23436:	491b      	ldr	r1, [pc, #108]	; (234a4 <z_unpend_first_thread+0x8c>)
   23438:	481b      	ldr	r0, [pc, #108]	; (234a8 <z_unpend_first_thread+0x90>)
   2343a:	2381      	movs	r3, #129	; 0x81
   2343c:	f001 f95c 	bl	246f8 <printk>
   23440:	4916      	ldr	r1, [pc, #88]	; (2349c <z_unpend_first_thread+0x84>)
   23442:	481a      	ldr	r0, [pc, #104]	; (234ac <z_unpend_first_thread+0x94>)
   23444:	f001 f958 	bl	246f8 <printk>
   23448:	4815      	ldr	r0, [pc, #84]	; (234a0 <z_unpend_first_thread+0x88>)
   2344a:	2181      	movs	r1, #129	; 0x81
   2344c:	f001 fb45 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23450:	4812      	ldr	r0, [pc, #72]	; (2349c <z_unpend_first_thread+0x84>)
   23452:	f7fd ff5f 	bl	21314 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   23456:	4620      	mov	r0, r4
   23458:	f004 fe9c 	bl	28194 <z_priq_dumb_best>
		if (thread != NULL) {
   2345c:	4604      	mov	r4, r0
   2345e:	b128      	cbz	r0, 2346c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   23460:	f7ff fa64 	bl	2292c <unpend_thread_no_timeout>
   23464:	f104 0018 	add.w	r0, r4, #24
   23468:	f000 fc2e 	bl	23cc8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2346c:	480b      	ldr	r0, [pc, #44]	; (2349c <z_unpend_first_thread+0x84>)
   2346e:	f7fd ff41 	bl	212f4 <z_spin_unlock_valid>
   23472:	b968      	cbnz	r0, 23490 <z_unpend_first_thread+0x78>
   23474:	4a0a      	ldr	r2, [pc, #40]	; (234a0 <z_unpend_first_thread+0x88>)
   23476:	490e      	ldr	r1, [pc, #56]	; (234b0 <z_unpend_first_thread+0x98>)
   23478:	480b      	ldr	r0, [pc, #44]	; (234a8 <z_unpend_first_thread+0x90>)
   2347a:	23ac      	movs	r3, #172	; 0xac
   2347c:	f001 f93c 	bl	246f8 <printk>
   23480:	4906      	ldr	r1, [pc, #24]	; (2349c <z_unpend_first_thread+0x84>)
   23482:	480c      	ldr	r0, [pc, #48]	; (234b4 <z_unpend_first_thread+0x9c>)
   23484:	f001 f938 	bl	246f8 <printk>
   23488:	4805      	ldr	r0, [pc, #20]	; (234a0 <z_unpend_first_thread+0x88>)
   2348a:	21ac      	movs	r1, #172	; 0xac
   2348c:	f001 fb25 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23490:	f385 8811 	msr	BASEPRI, r5
   23494:	f3bf 8f6f 	isb	sy
}
   23498:	4620      	mov	r0, r4
   2349a:	bd38      	pop	{r3, r4, r5, pc}
   2349c:	20002548 	.word	0x20002548
   234a0:	000291b5 	.word	0x000291b5
   234a4:	00029207 	.word	0x00029207
   234a8:	000290f5 	.word	0x000290f5
   234ac:	0002921c 	.word	0x0002921c
   234b0:	000291db 	.word	0x000291db
   234b4:	000291f2 	.word	0x000291f2

000234b8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   234b8:	4b04      	ldr	r3, [pc, #16]	; (234cc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   234ba:	2100      	movs	r1, #0
   234bc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   234c0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   234c4:	4608      	mov	r0, r1
   234c6:	f7ff b8a9 	b.w	2261c <k_sched_time_slice_set>
   234ca:	bf00      	nop
   234cc:	20002508 	.word	0x20002508

000234d0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   234d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234d2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   234d6:	b173      	cbz	r3, 234f6 <z_impl_k_yield+0x26>
   234d8:	4941      	ldr	r1, [pc, #260]	; (235e0 <z_impl_k_yield+0x110>)
   234da:	4a42      	ldr	r2, [pc, #264]	; (235e4 <z_impl_k_yield+0x114>)
   234dc:	4842      	ldr	r0, [pc, #264]	; (235e8 <z_impl_k_yield+0x118>)
   234de:	f240 43dc 	movw	r3, #1244	; 0x4dc
   234e2:	f001 f909 	bl	246f8 <printk>
   234e6:	4841      	ldr	r0, [pc, #260]	; (235ec <z_impl_k_yield+0x11c>)
   234e8:	f001 f906 	bl	246f8 <printk>
   234ec:	483d      	ldr	r0, [pc, #244]	; (235e4 <z_impl_k_yield+0x114>)
   234ee:	f240 41dc 	movw	r1, #1244	; 0x4dc
   234f2:	f001 faf2 	bl	24ada <assert_post_action>
	__asm__ volatile(
   234f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   234fa:	f3ef 8611 	mrs	r6, BASEPRI
   234fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23502:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23506:	483a      	ldr	r0, [pc, #232]	; (235f0 <z_impl_k_yield+0x120>)
   23508:	f7fd fee6 	bl	212d8 <z_spin_lock_valid>
   2350c:	b968      	cbnz	r0, 2352a <z_impl_k_yield+0x5a>
   2350e:	4a39      	ldr	r2, [pc, #228]	; (235f4 <z_impl_k_yield+0x124>)
   23510:	4939      	ldr	r1, [pc, #228]	; (235f8 <z_impl_k_yield+0x128>)
   23512:	4835      	ldr	r0, [pc, #212]	; (235e8 <z_impl_k_yield+0x118>)
   23514:	2381      	movs	r3, #129	; 0x81
   23516:	f001 f8ef 	bl	246f8 <printk>
   2351a:	4935      	ldr	r1, [pc, #212]	; (235f0 <z_impl_k_yield+0x120>)
   2351c:	4837      	ldr	r0, [pc, #220]	; (235fc <z_impl_k_yield+0x12c>)
   2351e:	f001 f8eb 	bl	246f8 <printk>
   23522:	4834      	ldr	r0, [pc, #208]	; (235f4 <z_impl_k_yield+0x124>)
   23524:	2181      	movs	r1, #129	; 0x81
   23526:	f001 fad8 	bl	24ada <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2352a:	4d35      	ldr	r5, [pc, #212]	; (23600 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   2352c:	4830      	ldr	r0, [pc, #192]	; (235f0 <z_impl_k_yield+0x120>)
   2352e:	f7fd fef1 	bl	21314 <z_spin_lock_set_owner>
   23532:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23534:	7b4b      	ldrb	r3, [r1, #13]
   23536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2353a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2353c:	f105 0020 	add.w	r0, r5, #32
   23540:	f7ff f9d2 	bl	228e8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   23544:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   23546:	7b63      	ldrb	r3, [r4, #13]
   23548:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2354c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2354e:	4b2d      	ldr	r3, [pc, #180]	; (23604 <z_impl_k_yield+0x134>)
   23550:	429c      	cmp	r4, r3
   23552:	d109      	bne.n	23568 <z_impl_k_yield+0x98>
   23554:	492c      	ldr	r1, [pc, #176]	; (23608 <z_impl_k_yield+0x138>)
   23556:	4824      	ldr	r0, [pc, #144]	; (235e8 <z_impl_k_yield+0x118>)
   23558:	4a22      	ldr	r2, [pc, #136]	; (235e4 <z_impl_k_yield+0x114>)
   2355a:	23ba      	movs	r3, #186	; 0xba
   2355c:	f001 f8cc 	bl	246f8 <printk>
   23560:	4820      	ldr	r0, [pc, #128]	; (235e4 <z_impl_k_yield+0x114>)
   23562:	21ba      	movs	r1, #186	; 0xba
   23564:	f001 fab9 	bl	24ada <assert_post_action>
	return list->head == list;
   23568:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2356a:	4828      	ldr	r0, [pc, #160]	; (2360c <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2356c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2356e:	4283      	cmp	r3, r0
   23570:	bf08      	it	eq
   23572:	2300      	moveq	r3, #0
   23574:	2b00      	cmp	r3, #0
   23576:	bf38      	it	cc
   23578:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2357a:	b35b      	cbz	r3, 235d4 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   2357c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23580:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23584:	4297      	cmp	r7, r2
   23586:	d021      	beq.n	235cc <z_impl_k_yield+0xfc>
		return b2 - b1;
   23588:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2358a:	2a00      	cmp	r2, #0
   2358c:	dd1e      	ble.n	235cc <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   2358e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23590:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23594:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23596:	605c      	str	r4, [r3, #4]
	update_cache(1);
   23598:	2001      	movs	r0, #1
   2359a:	f7ff fa35 	bl	22a08 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2359e:	4814      	ldr	r0, [pc, #80]	; (235f0 <z_impl_k_yield+0x120>)
   235a0:	f7fd fea8 	bl	212f4 <z_spin_unlock_valid>
   235a4:	b968      	cbnz	r0, 235c2 <z_impl_k_yield+0xf2>
   235a6:	4a13      	ldr	r2, [pc, #76]	; (235f4 <z_impl_k_yield+0x124>)
   235a8:	4919      	ldr	r1, [pc, #100]	; (23610 <z_impl_k_yield+0x140>)
   235aa:	480f      	ldr	r0, [pc, #60]	; (235e8 <z_impl_k_yield+0x118>)
   235ac:	23c3      	movs	r3, #195	; 0xc3
   235ae:	f001 f8a3 	bl	246f8 <printk>
   235b2:	490f      	ldr	r1, [pc, #60]	; (235f0 <z_impl_k_yield+0x120>)
   235b4:	4817      	ldr	r0, [pc, #92]	; (23614 <z_impl_k_yield+0x144>)
   235b6:	f001 f89f 	bl	246f8 <printk>
   235ba:	480e      	ldr	r0, [pc, #56]	; (235f4 <z_impl_k_yield+0x124>)
   235bc:	21c3      	movs	r1, #195	; 0xc3
   235be:	f001 fa8c 	bl	24ada <assert_post_action>
   235c2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   235c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   235c8:	f7f0 bab6 	b.w	13b38 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   235cc:	428b      	cmp	r3, r1
   235ce:	d001      	beq.n	235d4 <z_impl_k_yield+0x104>
   235d0:	681b      	ldr	r3, [r3, #0]
   235d2:	e7d2      	b.n	2357a <z_impl_k_yield+0xaa>
	node->prev = tail;
   235d4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   235d8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   235da:	626c      	str	r4, [r5, #36]	; 0x24
}
   235dc:	e7dc      	b.n	23598 <z_impl_k_yield+0xc8>
   235de:	bf00      	nop
   235e0:	000303be 	.word	0x000303be
   235e4:	00030686 	.word	0x00030686
   235e8:	000290f5 	.word	0x000290f5
   235ec:	0002f37f 	.word	0x0002f37f
   235f0:	20002548 	.word	0x20002548
   235f4:	000291b5 	.word	0x000291b5
   235f8:	00029207 	.word	0x00029207
   235fc:	0002921c 	.word	0x0002921c
   23600:	20002508 	.word	0x20002508
   23604:	20001d18 	.word	0x20001d18
   23608:	000306a8 	.word	0x000306a8
   2360c:	20002528 	.word	0x20002528
   23610:	000291db 	.word	0x000291db
   23614:	000291f2 	.word	0x000291f2

00023618 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   23618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2361c:	4604      	mov	r4, r0
   2361e:	460d      	mov	r5, r1
   23620:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   23624:	b173      	cbz	r3, 23644 <z_tick_sleep+0x2c>
   23626:	4945      	ldr	r1, [pc, #276]	; (2373c <z_tick_sleep+0x124>)
   23628:	4a45      	ldr	r2, [pc, #276]	; (23740 <z_tick_sleep+0x128>)
   2362a:	4846      	ldr	r0, [pc, #280]	; (23744 <z_tick_sleep+0x12c>)
   2362c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   23630:	f001 f862 	bl	246f8 <printk>
   23634:	4844      	ldr	r0, [pc, #272]	; (23748 <z_tick_sleep+0x130>)
   23636:	f001 f85f 	bl	246f8 <printk>
   2363a:	4841      	ldr	r0, [pc, #260]	; (23740 <z_tick_sleep+0x128>)
   2363c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   23640:	f001 fa4b 	bl	24ada <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   23644:	ea54 0305 	orrs.w	r3, r4, r5
   23648:	d104      	bne.n	23654 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2364a:	f7ff ff41 	bl	234d0 <z_impl_k_yield>
		k_yield();
		return 0;
   2364e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   23650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   23654:	f06f 0301 	mvn.w	r3, #1
   23658:	1b1e      	subs	r6, r3, r4
   2365a:	f04f 33ff 	mov.w	r3, #4294967295
   2365e:	eb63 0705 	sbc.w	r7, r3, r5
   23662:	2e01      	cmp	r6, #1
   23664:	f177 0300 	sbcs.w	r3, r7, #0
   23668:	da64      	bge.n	23734 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2366a:	f004 fdad 	bl	281c8 <sys_clock_tick_get_32>
   2366e:	1906      	adds	r6, r0, r4
   23670:	f04f 0340 	mov.w	r3, #64	; 0x40
   23674:	f3ef 8811 	mrs	r8, BASEPRI
   23678:	f383 8812 	msr	BASEPRI_MAX, r3
   2367c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23680:	4832      	ldr	r0, [pc, #200]	; (2374c <z_tick_sleep+0x134>)
   23682:	f7fd fe29 	bl	212d8 <z_spin_lock_valid>
   23686:	b968      	cbnz	r0, 236a4 <z_tick_sleep+0x8c>
   23688:	4a31      	ldr	r2, [pc, #196]	; (23750 <z_tick_sleep+0x138>)
   2368a:	4932      	ldr	r1, [pc, #200]	; (23754 <z_tick_sleep+0x13c>)
   2368c:	482d      	ldr	r0, [pc, #180]	; (23744 <z_tick_sleep+0x12c>)
   2368e:	2381      	movs	r3, #129	; 0x81
   23690:	f001 f832 	bl	246f8 <printk>
   23694:	492d      	ldr	r1, [pc, #180]	; (2374c <z_tick_sleep+0x134>)
   23696:	4830      	ldr	r0, [pc, #192]	; (23758 <z_tick_sleep+0x140>)
   23698:	f001 f82e 	bl	246f8 <printk>
   2369c:	482c      	ldr	r0, [pc, #176]	; (23750 <z_tick_sleep+0x138>)
   2369e:	2181      	movs	r1, #129	; 0x81
   236a0:	f001 fa1b 	bl	24ada <assert_post_action>
	pending_current = _current;
   236a4:	4f2d      	ldr	r7, [pc, #180]	; (2375c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   236a6:	4829      	ldr	r0, [pc, #164]	; (2374c <z_tick_sleep+0x134>)
   236a8:	f7fd fe34 	bl	21314 <z_spin_lock_set_owner>
   236ac:	4b2c      	ldr	r3, [pc, #176]	; (23760 <z_tick_sleep+0x148>)
   236ae:	68b8      	ldr	r0, [r7, #8]
   236b0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   236b2:	f7ff fbf7 	bl	22ea4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   236b6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   236b8:	492a      	ldr	r1, [pc, #168]	; (23764 <z_tick_sleep+0x14c>)
   236ba:	4622      	mov	r2, r4
   236bc:	462b      	mov	r3, r5
   236be:	3018      	adds	r0, #24
   236c0:	f000 fa2e 	bl	23b20 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   236c4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   236c6:	4821      	ldr	r0, [pc, #132]	; (2374c <z_tick_sleep+0x134>)
   236c8:	7b53      	ldrb	r3, [r2, #13]
   236ca:	f043 0310 	orr.w	r3, r3, #16
   236ce:	7353      	strb	r3, [r2, #13]
   236d0:	f7fd fe10 	bl	212f4 <z_spin_unlock_valid>
   236d4:	b968      	cbnz	r0, 236f2 <z_tick_sleep+0xda>
   236d6:	4a1e      	ldr	r2, [pc, #120]	; (23750 <z_tick_sleep+0x138>)
   236d8:	4923      	ldr	r1, [pc, #140]	; (23768 <z_tick_sleep+0x150>)
   236da:	481a      	ldr	r0, [pc, #104]	; (23744 <z_tick_sleep+0x12c>)
   236dc:	23c3      	movs	r3, #195	; 0xc3
   236de:	f001 f80b 	bl	246f8 <printk>
   236e2:	491a      	ldr	r1, [pc, #104]	; (2374c <z_tick_sleep+0x134>)
   236e4:	4821      	ldr	r0, [pc, #132]	; (2376c <z_tick_sleep+0x154>)
   236e6:	f001 f807 	bl	246f8 <printk>
   236ea:	4819      	ldr	r0, [pc, #100]	; (23750 <z_tick_sleep+0x138>)
   236ec:	21c3      	movs	r1, #195	; 0xc3
   236ee:	f001 f9f4 	bl	24ada <assert_post_action>
   236f2:	4640      	mov	r0, r8
   236f4:	f7f0 fa20 	bl	13b38 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   236f8:	68bb      	ldr	r3, [r7, #8]
   236fa:	7b5b      	ldrb	r3, [r3, #13]
   236fc:	06db      	lsls	r3, r3, #27
   236fe:	d50e      	bpl.n	2371e <z_tick_sleep+0x106>
   23700:	491b      	ldr	r1, [pc, #108]	; (23770 <z_tick_sleep+0x158>)
   23702:	4a0f      	ldr	r2, [pc, #60]	; (23740 <z_tick_sleep+0x128>)
   23704:	480f      	ldr	r0, [pc, #60]	; (23744 <z_tick_sleep+0x12c>)
   23706:	f240 5319 	movw	r3, #1305	; 0x519
   2370a:	f000 fff5 	bl	246f8 <printk>
   2370e:	480e      	ldr	r0, [pc, #56]	; (23748 <z_tick_sleep+0x130>)
   23710:	f000 fff2 	bl	246f8 <printk>
   23714:	480a      	ldr	r0, [pc, #40]	; (23740 <z_tick_sleep+0x128>)
   23716:	f240 5119 	movw	r1, #1305	; 0x519
   2371a:	f001 f9de 	bl	24ada <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2371e:	f004 fd53 	bl	281c8 <sys_clock_tick_get_32>
   23722:	1a30      	subs	r0, r6, r0
   23724:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   23728:	2801      	cmp	r0, #1
   2372a:	f171 0300 	sbcs.w	r3, r1, #0
   2372e:	bfb8      	it	lt
   23730:	2000      	movlt	r0, #0
   23732:	e78d      	b.n	23650 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   23734:	f06f 0601 	mvn.w	r6, #1
   23738:	1b36      	subs	r6, r6, r4
   2373a:	e799      	b.n	23670 <z_tick_sleep+0x58>
   2373c:	000303be 	.word	0x000303be
   23740:	00030686 	.word	0x00030686
   23744:	000290f5 	.word	0x000290f5
   23748:	0002f37f 	.word	0x0002f37f
   2374c:	20002548 	.word	0x20002548
   23750:	000291b5 	.word	0x000291b5
   23754:	00029207 	.word	0x00029207
   23758:	0002921c 	.word	0x0002921c
   2375c:	20002508 	.word	0x20002508
   23760:	20002544 	.word	0x20002544
   23764:	00022df1 	.word	0x00022df1
   23768:	000291db 	.word	0x000291db
   2376c:	000291f2 	.word	0x000291f2
   23770:	00030738 	.word	0x00030738

00023774 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23774:	b538      	push	{r3, r4, r5, lr}
   23776:	4604      	mov	r4, r0
   23778:	460d      	mov	r5, r1
   2377a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2377e:	b173      	cbz	r3, 2379e <z_impl_k_sleep+0x2a>
   23780:	4913      	ldr	r1, [pc, #76]	; (237d0 <z_impl_k_sleep+0x5c>)
   23782:	4a14      	ldr	r2, [pc, #80]	; (237d4 <z_impl_k_sleep+0x60>)
   23784:	4814      	ldr	r0, [pc, #80]	; (237d8 <z_impl_k_sleep+0x64>)
   23786:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   2378a:	f000 ffb5 	bl	246f8 <printk>
   2378e:	4813      	ldr	r0, [pc, #76]	; (237dc <z_impl_k_sleep+0x68>)
   23790:	f000 ffb2 	bl	246f8 <printk>
   23794:	480f      	ldr	r0, [pc, #60]	; (237d4 <z_impl_k_sleep+0x60>)
   23796:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   2379a:	f001 f99e 	bl	24ada <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2379e:	1c6b      	adds	r3, r5, #1
   237a0:	bf08      	it	eq
   237a2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   237a6:	d106      	bne.n	237b6 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   237a8:	4b0d      	ldr	r3, [pc, #52]	; (237e0 <z_impl_k_sleep+0x6c>)
   237aa:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   237ac:	f7ff fd02 	bl	231b4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   237b0:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   237b4:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   237b6:	4620      	mov	r0, r4
   237b8:	4629      	mov	r1, r5
   237ba:	f7ff ff2d 	bl	23618 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   237be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   237c2:	fb80 3403 	smull	r3, r4, r0, r3
   237c6:	0bd8      	lsrs	r0, r3, #15
   237c8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   237cc:	e7f2      	b.n	237b4 <z_impl_k_sleep+0x40>
   237ce:	bf00      	nop
   237d0:	000303be 	.word	0x000303be
   237d4:	00030686 	.word	0x00030686
   237d8:	000290f5 	.word	0x000290f5
   237dc:	0002f37f 	.word	0x0002f37f
   237e0:	20002508 	.word	0x20002508

000237e4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   237e4:	4b01      	ldr	r3, [pc, #4]	; (237ec <z_impl_z_current_get+0x8>)
   237e6:	6898      	ldr	r0, [r3, #8]
   237e8:	4770      	bx	lr
   237ea:	bf00      	nop
   237ec:	20002508 	.word	0x20002508

000237f0 <z_impl_k_is_preempt_thread>:
   237f0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   237f4:	b93b      	cbnz	r3, 23806 <z_impl_k_is_preempt_thread+0x16>
   237f6:	4b05      	ldr	r3, [pc, #20]	; (2380c <z_impl_k_is_preempt_thread+0x1c>)
   237f8:	689b      	ldr	r3, [r3, #8]
   237fa:	89d8      	ldrh	r0, [r3, #14]
   237fc:	287f      	cmp	r0, #127	; 0x7f
   237fe:	bf8c      	ite	hi
   23800:	2000      	movhi	r0, #0
   23802:	2001      	movls	r0, #1
   23804:	4770      	bx	lr
   23806:	2000      	movs	r0, #0
}
   23808:	4770      	bx	lr
   2380a:	bf00      	nop
   2380c:	20002508 	.word	0x20002508

00023810 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   23810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23814:	4604      	mov	r4, r0
   23816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2381a:	f3ef 8611 	mrs	r6, BASEPRI
   2381e:	f383 8812 	msr	BASEPRI_MAX, r3
   23822:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23826:	4848      	ldr	r0, [pc, #288]	; (23948 <z_thread_abort+0x138>)
   23828:	f7fd fd56 	bl	212d8 <z_spin_lock_valid>
   2382c:	b968      	cbnz	r0, 2384a <z_thread_abort+0x3a>
   2382e:	4a47      	ldr	r2, [pc, #284]	; (2394c <z_thread_abort+0x13c>)
   23830:	4947      	ldr	r1, [pc, #284]	; (23950 <z_thread_abort+0x140>)
   23832:	4848      	ldr	r0, [pc, #288]	; (23954 <z_thread_abort+0x144>)
   23834:	2381      	movs	r3, #129	; 0x81
   23836:	f000 ff5f 	bl	246f8 <printk>
   2383a:	4943      	ldr	r1, [pc, #268]	; (23948 <z_thread_abort+0x138>)
   2383c:	4846      	ldr	r0, [pc, #280]	; (23958 <z_thread_abort+0x148>)
   2383e:	f000 ff5b 	bl	246f8 <printk>
   23842:	4842      	ldr	r0, [pc, #264]	; (2394c <z_thread_abort+0x13c>)
   23844:	2181      	movs	r1, #129	; 0x81
   23846:	f001 f948 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2384a:	483f      	ldr	r0, [pc, #252]	; (23948 <z_thread_abort+0x138>)
   2384c:	f7fd fd62 	bl	21314 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   23850:	7b63      	ldrb	r3, [r4, #13]
   23852:	071a      	lsls	r2, r3, #28
   23854:	d517      	bpl.n	23886 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23856:	483c      	ldr	r0, [pc, #240]	; (23948 <z_thread_abort+0x138>)
   23858:	f7fd fd4c 	bl	212f4 <z_spin_unlock_valid>
   2385c:	b968      	cbnz	r0, 2387a <z_thread_abort+0x6a>
   2385e:	4a3b      	ldr	r2, [pc, #236]	; (2394c <z_thread_abort+0x13c>)
   23860:	493e      	ldr	r1, [pc, #248]	; (2395c <z_thread_abort+0x14c>)
   23862:	483c      	ldr	r0, [pc, #240]	; (23954 <z_thread_abort+0x144>)
   23864:	23ac      	movs	r3, #172	; 0xac
   23866:	f000 ff47 	bl	246f8 <printk>
   2386a:	4937      	ldr	r1, [pc, #220]	; (23948 <z_thread_abort+0x138>)
   2386c:	483c      	ldr	r0, [pc, #240]	; (23960 <z_thread_abort+0x150>)
   2386e:	f000 ff43 	bl	246f8 <printk>
   23872:	4836      	ldr	r0, [pc, #216]	; (2394c <z_thread_abort+0x13c>)
   23874:	21ac      	movs	r1, #172	; 0xac
   23876:	f001 f930 	bl	24ada <assert_post_action>
	__asm__ volatile(
   2387a:	f386 8811 	msr	BASEPRI, r6
   2387e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   23882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23886:	f023 0220 	bic.w	r2, r3, #32
   2388a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2388e:	09d2      	lsrs	r2, r2, #7
   23890:	d142      	bne.n	23918 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   23892:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   23894:	68a3      	ldr	r3, [r4, #8]
   23896:	b113      	cbz	r3, 2389e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   23898:	4620      	mov	r0, r4
   2389a:	f7ff f847 	bl	2292c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2389e:	f104 0018 	add.w	r0, r4, #24
   238a2:	f000 fa11 	bl	23cc8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   238a6:	f104 0758 	add.w	r7, r4, #88	; 0x58
   238aa:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   238ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   238b0:	42bd      	cmp	r5, r7
   238b2:	d001      	beq.n	238b8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   238b4:	2d00      	cmp	r5, #0
   238b6:	d139      	bne.n	2392c <z_thread_abort+0x11c>
		update_cache(1);
   238b8:	2001      	movs	r0, #1
   238ba:	f7ff f8a5 	bl	22a08 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   238be:	4b29      	ldr	r3, [pc, #164]	; (23964 <z_thread_abort+0x154>)
   238c0:	689b      	ldr	r3, [r3, #8]
   238c2:	42a3      	cmp	r3, r4
   238c4:	d1c7      	bne.n	23856 <z_thread_abort+0x46>
   238c6:	f3ef 8305 	mrs	r3, IPSR
   238ca:	2b00      	cmp	r3, #0
   238cc:	d1c3      	bne.n	23856 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238ce:	481e      	ldr	r0, [pc, #120]	; (23948 <z_thread_abort+0x138>)
   238d0:	f7fd fd10 	bl	212f4 <z_spin_unlock_valid>
   238d4:	b968      	cbnz	r0, 238f2 <z_thread_abort+0xe2>
   238d6:	4a1d      	ldr	r2, [pc, #116]	; (2394c <z_thread_abort+0x13c>)
   238d8:	4920      	ldr	r1, [pc, #128]	; (2395c <z_thread_abort+0x14c>)
   238da:	481e      	ldr	r0, [pc, #120]	; (23954 <z_thread_abort+0x144>)
   238dc:	23c3      	movs	r3, #195	; 0xc3
   238de:	f000 ff0b 	bl	246f8 <printk>
   238e2:	4919      	ldr	r1, [pc, #100]	; (23948 <z_thread_abort+0x138>)
   238e4:	481e      	ldr	r0, [pc, #120]	; (23960 <z_thread_abort+0x150>)
   238e6:	f000 ff07 	bl	246f8 <printk>
   238ea:	4818      	ldr	r0, [pc, #96]	; (2394c <z_thread_abort+0x13c>)
   238ec:	21c3      	movs	r1, #195	; 0xc3
   238ee:	f001 f8f4 	bl	24ada <assert_post_action>
   238f2:	4630      	mov	r0, r6
   238f4:	f7f0 f920 	bl	13b38 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   238f8:	4a1b      	ldr	r2, [pc, #108]	; (23968 <z_thread_abort+0x158>)
   238fa:	491c      	ldr	r1, [pc, #112]	; (2396c <z_thread_abort+0x15c>)
   238fc:	4815      	ldr	r0, [pc, #84]	; (23954 <z_thread_abort+0x144>)
   238fe:	f240 634b 	movw	r3, #1611	; 0x64b
   23902:	f000 fef9 	bl	246f8 <printk>
   23906:	481a      	ldr	r0, [pc, #104]	; (23970 <z_thread_abort+0x160>)
   23908:	f000 fef6 	bl	246f8 <printk>
   2390c:	4816      	ldr	r0, [pc, #88]	; (23968 <z_thread_abort+0x158>)
   2390e:	f240 614b 	movw	r1, #1611	; 0x64b
   23912:	f001 f8e2 	bl	24ada <assert_post_action>
   23916:	e79e      	b.n	23856 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23918:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2391c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   23920:	4814      	ldr	r0, [pc, #80]	; (23974 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23922:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23924:	4621      	mov	r1, r4
   23926:	f7fe ffdf 	bl	228e8 <z_priq_dumb_remove>
}
   2392a:	e7b3      	b.n	23894 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   2392c:	4628      	mov	r0, r5
   2392e:	f7fe fffd 	bl	2292c <unpend_thread_no_timeout>
   23932:	f105 0018 	add.w	r0, r5, #24
   23936:	f000 f9c7 	bl	23cc8 <z_abort_timeout>
   2393a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2393e:	4628      	mov	r0, r5
   23940:	f7ff f968 	bl	22c14 <ready_thread>
   23944:	e7b3      	b.n	238ae <z_thread_abort+0x9e>
   23946:	bf00      	nop
   23948:	20002548 	.word	0x20002548
   2394c:	000291b5 	.word	0x000291b5
   23950:	00029207 	.word	0x00029207
   23954:	000290f5 	.word	0x000290f5
   23958:	0002921c 	.word	0x0002921c
   2395c:	000291db 	.word	0x000291db
   23960:	000291f2 	.word	0x000291f2
   23964:	20002508 	.word	0x20002508
   23968:	00030686 	.word	0x00030686
   2396c:	0002cf26 	.word	0x0002cf26
   23970:	00030778 	.word	0x00030778
   23974:	20002528 	.word	0x20002528

00023978 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   23978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2397a:	4604      	mov	r4, r0
   2397c:	460e      	mov	r6, r1
   2397e:	4615      	mov	r5, r2
	__asm__ volatile(
   23980:	f04f 0340 	mov.w	r3, #64	; 0x40
   23984:	f3ef 8711 	mrs	r7, BASEPRI
   23988:	f383 8812 	msr	BASEPRI_MAX, r3
   2398c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23990:	481e      	ldr	r0, [pc, #120]	; (23a0c <z_sched_wake+0x94>)
   23992:	f7fd fca1 	bl	212d8 <z_spin_lock_valid>
   23996:	b968      	cbnz	r0, 239b4 <z_sched_wake+0x3c>
   23998:	4a1d      	ldr	r2, [pc, #116]	; (23a10 <z_sched_wake+0x98>)
   2399a:	491e      	ldr	r1, [pc, #120]	; (23a14 <z_sched_wake+0x9c>)
   2399c:	481e      	ldr	r0, [pc, #120]	; (23a18 <z_sched_wake+0xa0>)
   2399e:	2381      	movs	r3, #129	; 0x81
   239a0:	f000 feaa 	bl	246f8 <printk>
   239a4:	4919      	ldr	r1, [pc, #100]	; (23a0c <z_sched_wake+0x94>)
   239a6:	481d      	ldr	r0, [pc, #116]	; (23a1c <z_sched_wake+0xa4>)
   239a8:	f000 fea6 	bl	246f8 <printk>
   239ac:	4818      	ldr	r0, [pc, #96]	; (23a10 <z_sched_wake+0x98>)
   239ae:	2181      	movs	r1, #129	; 0x81
   239b0:	f001 f893 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   239b4:	4815      	ldr	r0, [pc, #84]	; (23a0c <z_sched_wake+0x94>)
   239b6:	f7fd fcad 	bl	21314 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   239ba:	4620      	mov	r0, r4
   239bc:	f004 fbea 	bl	28194 <z_priq_dumb_best>

		if (thread != NULL) {
   239c0:	4604      	mov	r4, r0
   239c2:	b158      	cbz	r0, 239dc <z_sched_wake+0x64>
   239c4:	67c6      	str	r6, [r0, #124]	; 0x7c
   239c6:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   239c8:	f7fe ffb0 	bl	2292c <unpend_thread_no_timeout>
   239cc:	f104 0018 	add.w	r0, r4, #24
   239d0:	f000 f97a 	bl	23cc8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   239d4:	4620      	mov	r0, r4
   239d6:	f7ff f91d 	bl	22c14 <ready_thread>
			ret = true;
   239da:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239dc:	480b      	ldr	r0, [pc, #44]	; (23a0c <z_sched_wake+0x94>)
   239de:	f7fd fc89 	bl	212f4 <z_spin_unlock_valid>
   239e2:	b968      	cbnz	r0, 23a00 <z_sched_wake+0x88>
   239e4:	4a0a      	ldr	r2, [pc, #40]	; (23a10 <z_sched_wake+0x98>)
   239e6:	490e      	ldr	r1, [pc, #56]	; (23a20 <z_sched_wake+0xa8>)
   239e8:	480b      	ldr	r0, [pc, #44]	; (23a18 <z_sched_wake+0xa0>)
   239ea:	23ac      	movs	r3, #172	; 0xac
   239ec:	f000 fe84 	bl	246f8 <printk>
   239f0:	4906      	ldr	r1, [pc, #24]	; (23a0c <z_sched_wake+0x94>)
   239f2:	480c      	ldr	r0, [pc, #48]	; (23a24 <z_sched_wake+0xac>)
   239f4:	f000 fe80 	bl	246f8 <printk>
   239f8:	4805      	ldr	r0, [pc, #20]	; (23a10 <z_sched_wake+0x98>)
   239fa:	21ac      	movs	r1, #172	; 0xac
   239fc:	f001 f86d 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23a00:	f387 8811 	msr	BASEPRI, r7
   23a04:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23a08:	4620      	mov	r0, r4
   23a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23a0c:	20002548 	.word	0x20002548
   23a10:	000291b5 	.word	0x000291b5
   23a14:	00029207 	.word	0x00029207
   23a18:	000290f5 	.word	0x000290f5
   23a1c:	0002921c 	.word	0x0002921c
   23a20:	000291db 	.word	0x000291db
   23a24:	000291f2 	.word	0x000291f2

00023a28 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   23a28:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23a2a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   23a2e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   23a30:	e9cd 6700 	strd	r6, r7, [sp]
   23a34:	f7ff faf2 	bl	2301c <z_pend_curr>

	if (data != NULL) {
   23a38:	b11c      	cbz	r4, 23a42 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   23a3a:	4b03      	ldr	r3, [pc, #12]	; (23a48 <z_sched_wait+0x20>)
   23a3c:	689b      	ldr	r3, [r3, #8]
   23a3e:	695b      	ldr	r3, [r3, #20]
   23a40:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   23a42:	b002      	add	sp, #8
   23a44:	bdd0      	pop	{r4, r6, r7, pc}
   23a46:	bf00      	nop
   23a48:	20002508 	.word	0x20002508

00023a4c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   23a4c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   23a4e:	4806      	ldr	r0, [pc, #24]	; (23a68 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   23a50:	4a06      	ldr	r2, [pc, #24]	; (23a6c <z_data_copy+0x20>)
   23a52:	4907      	ldr	r1, [pc, #28]	; (23a70 <z_data_copy+0x24>)
   23a54:	1a12      	subs	r2, r2, r0
   23a56:	f001 ff85 	bl	25964 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   23a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   23a5e:	4a05      	ldr	r2, [pc, #20]	; (23a74 <z_data_copy+0x28>)
   23a60:	4905      	ldr	r1, [pc, #20]	; (23a78 <z_data_copy+0x2c>)
   23a62:	4806      	ldr	r0, [pc, #24]	; (23a7c <z_data_copy+0x30>)
   23a64:	f001 bf7e 	b.w	25964 <memcpy>
   23a68:	20000000 	.word	0x20000000
   23a6c:	20000888 	.word	0x20000888
   23a70:	00030a2c 	.word	0x00030a2c
   23a74:	00000000 	.word	0x00000000
   23a78:	00030a2c 	.word	0x00030a2c
   23a7c:	20000000 	.word	0x20000000

00023a80 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   23a80:	4b03      	ldr	r3, [pc, #12]	; (23a90 <elapsed+0x10>)
   23a82:	681b      	ldr	r3, [r3, #0]
   23a84:	b90b      	cbnz	r3, 23a8a <elapsed+0xa>
   23a86:	f7fa bc9d 	b.w	1e3c4 <sys_clock_elapsed>
}
   23a8a:	2000      	movs	r0, #0
   23a8c:	4770      	bx	lr
   23a8e:	bf00      	nop
   23a90:	20002554 	.word	0x20002554

00023a94 <next_timeout>:

static int32_t next_timeout(void)
{
   23a94:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23a96:	4b13      	ldr	r3, [pc, #76]	; (23ae4 <next_timeout+0x50>)
   23a98:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23a9a:	429c      	cmp	r4, r3
   23a9c:	bf08      	it	eq
   23a9e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23aa0:	f7ff ffee 	bl	23a80 <elapsed>
   23aa4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   23aa6:	b1bc      	cbz	r4, 23ad8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23aa8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   23aac:	1b40      	subs	r0, r0, r5
   23aae:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   23ab2:	2801      	cmp	r0, #1
   23ab4:	f171 0300 	sbcs.w	r3, r1, #0
   23ab8:	db11      	blt.n	23ade <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   23aba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   23abe:	2300      	movs	r3, #0
   23ac0:	4282      	cmp	r2, r0
   23ac2:	eb73 0401 	sbcs.w	r4, r3, r1
   23ac6:	da00      	bge.n	23aca <next_timeout+0x36>
   23ac8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23aca:	4b07      	ldr	r3, [pc, #28]	; (23ae8 <next_timeout+0x54>)
   23acc:	691b      	ldr	r3, [r3, #16]
   23ace:	b113      	cbz	r3, 23ad6 <next_timeout+0x42>
   23ad0:	4298      	cmp	r0, r3
   23ad2:	bfa8      	it	ge
   23ad4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23ad6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   23ad8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23adc:	e7f5      	b.n	23aca <next_timeout+0x36>
   23ade:	2000      	movs	r0, #0
   23ae0:	e7f3      	b.n	23aca <next_timeout+0x36>
   23ae2:	bf00      	nop
   23ae4:	200005a8 	.word	0x200005a8
   23ae8:	20002508 	.word	0x20002508

00023aec <remove_timeout>:
{
   23aec:	b530      	push	{r4, r5, lr}
   23aee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23af0:	b168      	cbz	r0, 23b0e <remove_timeout+0x22>
   23af2:	4a0a      	ldr	r2, [pc, #40]	; (23b1c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   23af4:	6852      	ldr	r2, [r2, #4]
   23af6:	4290      	cmp	r0, r2
   23af8:	d009      	beq.n	23b0e <remove_timeout+0x22>
	if (next(t) != NULL) {
   23afa:	b143      	cbz	r3, 23b0e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23afc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23b00:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23b04:	1912      	adds	r2, r2, r4
   23b06:	eb45 0101 	adc.w	r1, r5, r1
   23b0a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   23b0e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   23b10:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23b12:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23b14:	2300      	movs	r3, #0
	node->prev = NULL;
   23b16:	e9c0 3300 	strd	r3, r3, [r0]
}
   23b1a:	bd30      	pop	{r4, r5, pc}
   23b1c:	200005a8 	.word	0x200005a8

00023b20 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   23b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b24:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23b26:	1c6b      	adds	r3, r5, #1
   23b28:	bf08      	it	eq
   23b2a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23b2e:	4682      	mov	sl, r0
   23b30:	468b      	mov	fp, r1
   23b32:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23b34:	f000 80aa 	beq.w	23c8c <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   23b38:	6803      	ldr	r3, [r0, #0]
   23b3a:	b163      	cbz	r3, 23b56 <z_add_timeout+0x36>
   23b3c:	4955      	ldr	r1, [pc, #340]	; (23c94 <z_add_timeout+0x174>)
   23b3e:	4a56      	ldr	r2, [pc, #344]	; (23c98 <z_add_timeout+0x178>)
   23b40:	4856      	ldr	r0, [pc, #344]	; (23c9c <z_add_timeout+0x17c>)
   23b42:	235d      	movs	r3, #93	; 0x5d
   23b44:	f000 fdd8 	bl	246f8 <printk>
   23b48:	4855      	ldr	r0, [pc, #340]	; (23ca0 <z_add_timeout+0x180>)
   23b4a:	f000 fdd5 	bl	246f8 <printk>
   23b4e:	4852      	ldr	r0, [pc, #328]	; (23c98 <z_add_timeout+0x178>)
   23b50:	215d      	movs	r1, #93	; 0x5d
   23b52:	f000 ffc2 	bl	24ada <assert_post_action>
	to->fn = fn;
   23b56:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   23b5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b5e:	f3ef 8b11 	mrs	fp, BASEPRI
   23b62:	f383 8812 	msr	BASEPRI_MAX, r3
   23b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b6a:	484e      	ldr	r0, [pc, #312]	; (23ca4 <z_add_timeout+0x184>)
   23b6c:	f7fd fbb4 	bl	212d8 <z_spin_lock_valid>
   23b70:	b968      	cbnz	r0, 23b8e <z_add_timeout+0x6e>
   23b72:	4a4d      	ldr	r2, [pc, #308]	; (23ca8 <z_add_timeout+0x188>)
   23b74:	494d      	ldr	r1, [pc, #308]	; (23cac <z_add_timeout+0x18c>)
   23b76:	4849      	ldr	r0, [pc, #292]	; (23c9c <z_add_timeout+0x17c>)
   23b78:	2381      	movs	r3, #129	; 0x81
   23b7a:	f000 fdbd 	bl	246f8 <printk>
   23b7e:	4949      	ldr	r1, [pc, #292]	; (23ca4 <z_add_timeout+0x184>)
   23b80:	484b      	ldr	r0, [pc, #300]	; (23cb0 <z_add_timeout+0x190>)
   23b82:	f000 fdb9 	bl	246f8 <printk>
   23b86:	4848      	ldr	r0, [pc, #288]	; (23ca8 <z_add_timeout+0x188>)
   23b88:	2181      	movs	r1, #129	; 0x81
   23b8a:	f000 ffa6 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23b8e:	4845      	ldr	r0, [pc, #276]	; (23ca4 <z_add_timeout+0x184>)
   23b90:	f7fd fbc0 	bl	21314 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   23b94:	f06f 0301 	mvn.w	r3, #1
   23b98:	ebb3 0804 	subs.w	r8, r3, r4
   23b9c:	f04f 32ff 	mov.w	r2, #4294967295
   23ba0:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23ba4:	f1b8 0f00 	cmp.w	r8, #0
   23ba8:	f179 0100 	sbcs.w	r1, r9, #0
   23bac:	db1c      	blt.n	23be8 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23bae:	4841      	ldr	r0, [pc, #260]	; (23cb4 <z_add_timeout+0x194>)
   23bb0:	e9d0 1000 	ldrd	r1, r0, [r0]
   23bb4:	1a5b      	subs	r3, r3, r1
   23bb6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   23bba:	1b1e      	subs	r6, r3, r4
   23bbc:	eb62 0705 	sbc.w	r7, r2, r5
   23bc0:	2e01      	cmp	r6, #1
   23bc2:	f177 0300 	sbcs.w	r3, r7, #0
   23bc6:	bfbc      	itt	lt
   23bc8:	2601      	movlt	r6, #1
   23bca:	2700      	movlt	r7, #0
   23bcc:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   23bd0:	4a39      	ldr	r2, [pc, #228]	; (23cb8 <z_add_timeout+0x198>)
   23bd2:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23bd6:	4293      	cmp	r3, r2
   23bd8:	d11d      	bne.n	23c16 <z_add_timeout+0xf6>
	node->prev = tail;
   23bda:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   23bde:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   23be2:	f8c2 a004 	str.w	sl, [r2, #4]
}
   23be6:	e02c      	b.n	23c42 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   23be8:	f7ff ff4a 	bl	23a80 <elapsed>
   23bec:	1c63      	adds	r3, r4, #1
   23bee:	9300      	str	r3, [sp, #0]
   23bf0:	f145 0300 	adc.w	r3, r5, #0
   23bf4:	9301      	str	r3, [sp, #4]
   23bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
   23bfa:	1812      	adds	r2, r2, r0
   23bfc:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   23c00:	e9ca 2304 	strd	r2, r3, [sl, #16]
   23c04:	e7e4      	b.n	23bd0 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   23c06:	1be0      	subs	r0, r4, r7
   23c08:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   23c0c:	42b3      	cmp	r3, r6
   23c0e:	e9ca 0104 	strd	r0, r1, [sl, #16]
   23c12:	d0e2      	beq.n	23bda <z_add_timeout+0xba>
   23c14:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   23c16:	2b00      	cmp	r3, #0
   23c18:	d0df      	beq.n	23bda <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   23c1a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   23c1e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   23c22:	42bc      	cmp	r4, r7
   23c24:	eb75 0108 	sbcs.w	r1, r5, r8
   23c28:	daed      	bge.n	23c06 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   23c2a:	1b38      	subs	r0, r7, r4
   23c2c:	eb68 0105 	sbc.w	r1, r8, r5
   23c30:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   23c34:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23c36:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   23c3a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   23c3e:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   23c42:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23c44:	4293      	cmp	r3, r2
   23c46:	d00b      	beq.n	23c60 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   23c48:	459a      	cmp	sl, r3
   23c4a:	d109      	bne.n	23c60 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   23c4c:	f7ff ff22 	bl	23a94 <next_timeout>

			if (next_time == 0 ||
   23c50:	b118      	cbz	r0, 23c5a <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   23c52:	4b1a      	ldr	r3, [pc, #104]	; (23cbc <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   23c54:	691b      	ldr	r3, [r3, #16]
   23c56:	4283      	cmp	r3, r0
   23c58:	d002      	beq.n	23c60 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   23c5a:	2100      	movs	r1, #0
   23c5c:	f7fa fb82 	bl	1e364 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c60:	4810      	ldr	r0, [pc, #64]	; (23ca4 <z_add_timeout+0x184>)
   23c62:	f7fd fb47 	bl	212f4 <z_spin_unlock_valid>
   23c66:	b968      	cbnz	r0, 23c84 <z_add_timeout+0x164>
   23c68:	4a0f      	ldr	r2, [pc, #60]	; (23ca8 <z_add_timeout+0x188>)
   23c6a:	4915      	ldr	r1, [pc, #84]	; (23cc0 <z_add_timeout+0x1a0>)
   23c6c:	480b      	ldr	r0, [pc, #44]	; (23c9c <z_add_timeout+0x17c>)
   23c6e:	23ac      	movs	r3, #172	; 0xac
   23c70:	f000 fd42 	bl	246f8 <printk>
   23c74:	490b      	ldr	r1, [pc, #44]	; (23ca4 <z_add_timeout+0x184>)
   23c76:	4813      	ldr	r0, [pc, #76]	; (23cc4 <z_add_timeout+0x1a4>)
   23c78:	f000 fd3e 	bl	246f8 <printk>
   23c7c:	480a      	ldr	r0, [pc, #40]	; (23ca8 <z_add_timeout+0x188>)
   23c7e:	21ac      	movs	r1, #172	; 0xac
   23c80:	f000 ff2b 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23c84:	f38b 8811 	msr	BASEPRI, fp
   23c88:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23c8c:	b003      	add	sp, #12
   23c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c92:	bf00      	nop
   23c94:	000307be 	.word	0x000307be
   23c98:	0003079a 	.word	0x0003079a
   23c9c:	000290f5 	.word	0x000290f5
   23ca0:	0002f37f 	.word	0x0002f37f
   23ca4:	20002558 	.word	0x20002558
   23ca8:	000291b5 	.word	0x000291b5
   23cac:	00029207 	.word	0x00029207
   23cb0:	0002921c 	.word	0x0002921c
   23cb4:	20001eb8 	.word	0x20001eb8
   23cb8:	200005a8 	.word	0x200005a8
   23cbc:	20002508 	.word	0x20002508
   23cc0:	000291db 	.word	0x000291db
   23cc4:	000291f2 	.word	0x000291f2

00023cc8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23cc8:	b538      	push	{r3, r4, r5, lr}
   23cca:	4604      	mov	r4, r0
	__asm__ volatile(
   23ccc:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cd0:	f3ef 8511 	mrs	r5, BASEPRI
   23cd4:	f383 8812 	msr	BASEPRI_MAX, r3
   23cd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cdc:	481a      	ldr	r0, [pc, #104]	; (23d48 <z_abort_timeout+0x80>)
   23cde:	f7fd fafb 	bl	212d8 <z_spin_lock_valid>
   23ce2:	b968      	cbnz	r0, 23d00 <z_abort_timeout+0x38>
   23ce4:	4a19      	ldr	r2, [pc, #100]	; (23d4c <z_abort_timeout+0x84>)
   23ce6:	491a      	ldr	r1, [pc, #104]	; (23d50 <z_abort_timeout+0x88>)
   23ce8:	481a      	ldr	r0, [pc, #104]	; (23d54 <z_abort_timeout+0x8c>)
   23cea:	2381      	movs	r3, #129	; 0x81
   23cec:	f000 fd04 	bl	246f8 <printk>
   23cf0:	4915      	ldr	r1, [pc, #84]	; (23d48 <z_abort_timeout+0x80>)
   23cf2:	4819      	ldr	r0, [pc, #100]	; (23d58 <z_abort_timeout+0x90>)
   23cf4:	f000 fd00 	bl	246f8 <printk>
   23cf8:	4814      	ldr	r0, [pc, #80]	; (23d4c <z_abort_timeout+0x84>)
   23cfa:	2181      	movs	r1, #129	; 0x81
   23cfc:	f000 feed 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23d00:	4811      	ldr	r0, [pc, #68]	; (23d48 <z_abort_timeout+0x80>)
   23d02:	f7fd fb07 	bl	21314 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23d06:	6823      	ldr	r3, [r4, #0]
   23d08:	b1db      	cbz	r3, 23d42 <z_abort_timeout+0x7a>
			remove_timeout(to);
   23d0a:	4620      	mov	r0, r4
   23d0c:	f7ff feee 	bl	23aec <remove_timeout>
			ret = 0;
   23d10:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d12:	480d      	ldr	r0, [pc, #52]	; (23d48 <z_abort_timeout+0x80>)
   23d14:	f7fd faee 	bl	212f4 <z_spin_unlock_valid>
   23d18:	b968      	cbnz	r0, 23d36 <z_abort_timeout+0x6e>
   23d1a:	4a0c      	ldr	r2, [pc, #48]	; (23d4c <z_abort_timeout+0x84>)
   23d1c:	490f      	ldr	r1, [pc, #60]	; (23d5c <z_abort_timeout+0x94>)
   23d1e:	480d      	ldr	r0, [pc, #52]	; (23d54 <z_abort_timeout+0x8c>)
   23d20:	23ac      	movs	r3, #172	; 0xac
   23d22:	f000 fce9 	bl	246f8 <printk>
   23d26:	4908      	ldr	r1, [pc, #32]	; (23d48 <z_abort_timeout+0x80>)
   23d28:	480d      	ldr	r0, [pc, #52]	; (23d60 <z_abort_timeout+0x98>)
   23d2a:	f000 fce5 	bl	246f8 <printk>
   23d2e:	4807      	ldr	r0, [pc, #28]	; (23d4c <z_abort_timeout+0x84>)
   23d30:	21ac      	movs	r1, #172	; 0xac
   23d32:	f000 fed2 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23d36:	f385 8811 	msr	BASEPRI, r5
   23d3a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   23d3e:	4620      	mov	r0, r4
   23d40:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   23d42:	f06f 0415 	mvn.w	r4, #21
   23d46:	e7e4      	b.n	23d12 <z_abort_timeout+0x4a>
   23d48:	20002558 	.word	0x20002558
   23d4c:	000291b5 	.word	0x000291b5
   23d50:	00029207 	.word	0x00029207
   23d54:	000290f5 	.word	0x000290f5
   23d58:	0002921c 	.word	0x0002921c
   23d5c:	000291db 	.word	0x000291db
   23d60:	000291f2 	.word	0x000291f2

00023d64 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   23d64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23d66:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d6a:	f3ef 8511 	mrs	r5, BASEPRI
   23d6e:	f383 8812 	msr	BASEPRI_MAX, r3
   23d72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d76:	4818      	ldr	r0, [pc, #96]	; (23dd8 <z_get_next_timeout_expiry+0x74>)
   23d78:	f7fd faae 	bl	212d8 <z_spin_lock_valid>
   23d7c:	b968      	cbnz	r0, 23d9a <z_get_next_timeout_expiry+0x36>
   23d7e:	4a17      	ldr	r2, [pc, #92]	; (23ddc <z_get_next_timeout_expiry+0x78>)
   23d80:	4917      	ldr	r1, [pc, #92]	; (23de0 <z_get_next_timeout_expiry+0x7c>)
   23d82:	4818      	ldr	r0, [pc, #96]	; (23de4 <z_get_next_timeout_expiry+0x80>)
   23d84:	2381      	movs	r3, #129	; 0x81
   23d86:	f000 fcb7 	bl	246f8 <printk>
   23d8a:	4913      	ldr	r1, [pc, #76]	; (23dd8 <z_get_next_timeout_expiry+0x74>)
   23d8c:	4816      	ldr	r0, [pc, #88]	; (23de8 <z_get_next_timeout_expiry+0x84>)
   23d8e:	f000 fcb3 	bl	246f8 <printk>
   23d92:	4812      	ldr	r0, [pc, #72]	; (23ddc <z_get_next_timeout_expiry+0x78>)
   23d94:	2181      	movs	r1, #129	; 0x81
   23d96:	f000 fea0 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23d9a:	480f      	ldr	r0, [pc, #60]	; (23dd8 <z_get_next_timeout_expiry+0x74>)
   23d9c:	f7fd faba 	bl	21314 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   23da0:	f7ff fe78 	bl	23a94 <next_timeout>
   23da4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23da6:	480c      	ldr	r0, [pc, #48]	; (23dd8 <z_get_next_timeout_expiry+0x74>)
   23da8:	f7fd faa4 	bl	212f4 <z_spin_unlock_valid>
   23dac:	b968      	cbnz	r0, 23dca <z_get_next_timeout_expiry+0x66>
   23dae:	4a0b      	ldr	r2, [pc, #44]	; (23ddc <z_get_next_timeout_expiry+0x78>)
   23db0:	490e      	ldr	r1, [pc, #56]	; (23dec <z_get_next_timeout_expiry+0x88>)
   23db2:	480c      	ldr	r0, [pc, #48]	; (23de4 <z_get_next_timeout_expiry+0x80>)
   23db4:	23ac      	movs	r3, #172	; 0xac
   23db6:	f000 fc9f 	bl	246f8 <printk>
   23dba:	4907      	ldr	r1, [pc, #28]	; (23dd8 <z_get_next_timeout_expiry+0x74>)
   23dbc:	480c      	ldr	r0, [pc, #48]	; (23df0 <z_get_next_timeout_expiry+0x8c>)
   23dbe:	f000 fc9b 	bl	246f8 <printk>
   23dc2:	4806      	ldr	r0, [pc, #24]	; (23ddc <z_get_next_timeout_expiry+0x78>)
   23dc4:	21ac      	movs	r1, #172	; 0xac
   23dc6:	f000 fe88 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23dca:	f385 8811 	msr	BASEPRI, r5
   23dce:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23dd2:	4620      	mov	r0, r4
   23dd4:	bd38      	pop	{r3, r4, r5, pc}
   23dd6:	bf00      	nop
   23dd8:	20002558 	.word	0x20002558
   23ddc:	000291b5 	.word	0x000291b5
   23de0:	00029207 	.word	0x00029207
   23de4:	000290f5 	.word	0x000290f5
   23de8:	0002921c 	.word	0x0002921c
   23dec:	000291db 	.word	0x000291db
   23df0:	000291f2 	.word	0x000291f2

00023df4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   23df4:	b570      	push	{r4, r5, r6, lr}
   23df6:	4604      	mov	r4, r0
   23df8:	460d      	mov	r5, r1
	__asm__ volatile(
   23dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   23dfe:	f3ef 8611 	mrs	r6, BASEPRI
   23e02:	f383 8812 	msr	BASEPRI_MAX, r3
   23e06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e0a:	481b      	ldr	r0, [pc, #108]	; (23e78 <z_set_timeout_expiry+0x84>)
   23e0c:	f7fd fa64 	bl	212d8 <z_spin_lock_valid>
   23e10:	b968      	cbnz	r0, 23e2e <z_set_timeout_expiry+0x3a>
   23e12:	4a1a      	ldr	r2, [pc, #104]	; (23e7c <z_set_timeout_expiry+0x88>)
   23e14:	491a      	ldr	r1, [pc, #104]	; (23e80 <z_set_timeout_expiry+0x8c>)
   23e16:	481b      	ldr	r0, [pc, #108]	; (23e84 <z_set_timeout_expiry+0x90>)
   23e18:	2381      	movs	r3, #129	; 0x81
   23e1a:	f000 fc6d 	bl	246f8 <printk>
   23e1e:	4916      	ldr	r1, [pc, #88]	; (23e78 <z_set_timeout_expiry+0x84>)
   23e20:	4819      	ldr	r0, [pc, #100]	; (23e88 <z_set_timeout_expiry+0x94>)
   23e22:	f000 fc69 	bl	246f8 <printk>
   23e26:	4815      	ldr	r0, [pc, #84]	; (23e7c <z_set_timeout_expiry+0x88>)
   23e28:	2181      	movs	r1, #129	; 0x81
   23e2a:	f000 fe56 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23e2e:	4812      	ldr	r0, [pc, #72]	; (23e78 <z_set_timeout_expiry+0x84>)
   23e30:	f7fd fa70 	bl	21314 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   23e34:	f7ff fe2e 	bl	23a94 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   23e38:	2801      	cmp	r0, #1
   23e3a:	dd05      	ble.n	23e48 <z_set_timeout_expiry+0x54>
   23e3c:	42a0      	cmp	r0, r4
   23e3e:	db03      	blt.n	23e48 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23e40:	4629      	mov	r1, r5
   23e42:	4620      	mov	r0, r4
   23e44:	f7fa fa8e 	bl	1e364 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e48:	480b      	ldr	r0, [pc, #44]	; (23e78 <z_set_timeout_expiry+0x84>)
   23e4a:	f7fd fa53 	bl	212f4 <z_spin_unlock_valid>
   23e4e:	b968      	cbnz	r0, 23e6c <z_set_timeout_expiry+0x78>
   23e50:	4a0a      	ldr	r2, [pc, #40]	; (23e7c <z_set_timeout_expiry+0x88>)
   23e52:	490e      	ldr	r1, [pc, #56]	; (23e8c <z_set_timeout_expiry+0x98>)
   23e54:	480b      	ldr	r0, [pc, #44]	; (23e84 <z_set_timeout_expiry+0x90>)
   23e56:	23ac      	movs	r3, #172	; 0xac
   23e58:	f000 fc4e 	bl	246f8 <printk>
   23e5c:	4906      	ldr	r1, [pc, #24]	; (23e78 <z_set_timeout_expiry+0x84>)
   23e5e:	480c      	ldr	r0, [pc, #48]	; (23e90 <z_set_timeout_expiry+0x9c>)
   23e60:	f000 fc4a 	bl	246f8 <printk>
   23e64:	4805      	ldr	r0, [pc, #20]	; (23e7c <z_set_timeout_expiry+0x88>)
   23e66:	21ac      	movs	r1, #172	; 0xac
   23e68:	f000 fe37 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23e6c:	f386 8811 	msr	BASEPRI, r6
   23e70:	f3bf 8f6f 	isb	sy
		}
	}
}
   23e74:	bd70      	pop	{r4, r5, r6, pc}
   23e76:	bf00      	nop
   23e78:	20002558 	.word	0x20002558
   23e7c:	000291b5 	.word	0x000291b5
   23e80:	00029207 	.word	0x00029207
   23e84:	000290f5 	.word	0x000290f5
   23e88:	0002921c 	.word	0x0002921c
   23e8c:	000291db 	.word	0x000291db
   23e90:	000291f2 	.word	0x000291f2

00023e94 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e98:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   23e9a:	f7fe fe43 	bl	22b24 <z_time_slice>
	__asm__ volatile(
   23e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ea2:	f3ef 8711 	mrs	r7, BASEPRI
   23ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   23eaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23eae:	4855      	ldr	r0, [pc, #340]	; (24004 <sys_clock_announce+0x170>)
   23eb0:	f7fd fa12 	bl	212d8 <z_spin_lock_valid>
   23eb4:	b968      	cbnz	r0, 23ed2 <sys_clock_announce+0x3e>
   23eb6:	4a54      	ldr	r2, [pc, #336]	; (24008 <sys_clock_announce+0x174>)
   23eb8:	4954      	ldr	r1, [pc, #336]	; (2400c <sys_clock_announce+0x178>)
   23eba:	4855      	ldr	r0, [pc, #340]	; (24010 <sys_clock_announce+0x17c>)
   23ebc:	2381      	movs	r3, #129	; 0x81
   23ebe:	f000 fc1b 	bl	246f8 <printk>
   23ec2:	4950      	ldr	r1, [pc, #320]	; (24004 <sys_clock_announce+0x170>)
   23ec4:	4853      	ldr	r0, [pc, #332]	; (24014 <sys_clock_announce+0x180>)
   23ec6:	f000 fc17 	bl	246f8 <printk>
   23eca:	484f      	ldr	r0, [pc, #316]	; (24008 <sys_clock_announce+0x174>)
   23ecc:	2181      	movs	r1, #129	; 0x81
   23ece:	f000 fe04 	bl	24ada <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   23ed2:	4d51      	ldr	r5, [pc, #324]	; (24018 <sys_clock_announce+0x184>)
   23ed4:	4e51      	ldr	r6, [pc, #324]	; (2401c <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   23ed6:	484b      	ldr	r0, [pc, #300]	; (24004 <sys_clock_announce+0x170>)
	return list->head == list;
   23ed8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 24028 <sys_clock_announce+0x194>
   23edc:	f7fd fa1a 	bl	21314 <z_spin_lock_set_owner>
   23ee0:	46b3      	mov	fp, r6
   23ee2:	602c      	str	r4, [r5, #0]
   23ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
   23ee8:	f8d5 c000 	ldr.w	ip, [r5]
   23eec:	f8da 4000 	ldr.w	r4, [sl]
   23ef0:	e9cd 2300 	strd	r2, r3, [sp]
   23ef4:	4662      	mov	r2, ip
   23ef6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23ef8:	4554      	cmp	r4, sl
   23efa:	46e0      	mov	r8, ip
   23efc:	4699      	mov	r9, r3
   23efe:	d00c      	beq.n	23f1a <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   23f00:	b15c      	cbz	r4, 23f1a <sys_clock_announce+0x86>
   23f02:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   23f06:	458c      	cmp	ip, r1
   23f08:	eb79 0302 	sbcs.w	r3, r9, r2
   23f0c:	da2e      	bge.n	23f6c <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   23f0e:	ebb1 000c 	subs.w	r0, r1, ip
   23f12:	eb62 0109 	sbc.w	r1, r2, r9
   23f16:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   23f1a:	9a00      	ldr	r2, [sp, #0]
   23f1c:	9901      	ldr	r1, [sp, #4]
   23f1e:	eb18 0202 	adds.w	r2, r8, r2
   23f22:	464b      	mov	r3, r9
   23f24:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   23f28:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   23f2a:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   23f2e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   23f30:	f7ff fdb0 	bl	23a94 <next_timeout>
   23f34:	4621      	mov	r1, r4
   23f36:	f7fa fa15 	bl	1e364 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f3a:	4832      	ldr	r0, [pc, #200]	; (24004 <sys_clock_announce+0x170>)
   23f3c:	f7fd f9da 	bl	212f4 <z_spin_unlock_valid>
   23f40:	b968      	cbnz	r0, 23f5e <sys_clock_announce+0xca>
   23f42:	4a31      	ldr	r2, [pc, #196]	; (24008 <sys_clock_announce+0x174>)
   23f44:	4936      	ldr	r1, [pc, #216]	; (24020 <sys_clock_announce+0x18c>)
   23f46:	4832      	ldr	r0, [pc, #200]	; (24010 <sys_clock_announce+0x17c>)
   23f48:	23ac      	movs	r3, #172	; 0xac
   23f4a:	f000 fbd5 	bl	246f8 <printk>
   23f4e:	492d      	ldr	r1, [pc, #180]	; (24004 <sys_clock_announce+0x170>)
   23f50:	4834      	ldr	r0, [pc, #208]	; (24024 <sys_clock_announce+0x190>)
   23f52:	f000 fbd1 	bl	246f8 <printk>
   23f56:	482c      	ldr	r0, [pc, #176]	; (24008 <sys_clock_announce+0x174>)
   23f58:	21ac      	movs	r1, #172	; 0xac
   23f5a:	f000 fdbe 	bl	24ada <assert_post_action>
	__asm__ volatile(
   23f5e:	f387 8811 	msr	BASEPRI, r7
   23f62:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23f66:	b003      	add	sp, #12
   23f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   23f6c:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   23f70:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   23f74:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   23f78:	f04f 0200 	mov.w	r2, #0
   23f7c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   23f80:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   23f84:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   23f86:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   23f8a:	4620      	mov	r0, r4
		curr_tick += dt;
   23f8c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   23f90:	f7ff fdac 	bl	23aec <remove_timeout>
   23f94:	481b      	ldr	r0, [pc, #108]	; (24004 <sys_clock_announce+0x170>)
   23f96:	f7fd f9ad 	bl	212f4 <z_spin_unlock_valid>
   23f9a:	b968      	cbnz	r0, 23fb8 <sys_clock_announce+0x124>
   23f9c:	4a1a      	ldr	r2, [pc, #104]	; (24008 <sys_clock_announce+0x174>)
   23f9e:	4920      	ldr	r1, [pc, #128]	; (24020 <sys_clock_announce+0x18c>)
   23fa0:	481b      	ldr	r0, [pc, #108]	; (24010 <sys_clock_announce+0x17c>)
   23fa2:	23ac      	movs	r3, #172	; 0xac
   23fa4:	f000 fba8 	bl	246f8 <printk>
   23fa8:	4916      	ldr	r1, [pc, #88]	; (24004 <sys_clock_announce+0x170>)
   23faa:	481e      	ldr	r0, [pc, #120]	; (24024 <sys_clock_announce+0x190>)
   23fac:	f000 fba4 	bl	246f8 <printk>
   23fb0:	4815      	ldr	r0, [pc, #84]	; (24008 <sys_clock_announce+0x174>)
   23fb2:	21ac      	movs	r1, #172	; 0xac
   23fb4:	f000 fd91 	bl	24ada <assert_post_action>
   23fb8:	f387 8811 	msr	BASEPRI, r7
   23fbc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   23fc0:	68a3      	ldr	r3, [r4, #8]
   23fc2:	4620      	mov	r0, r4
   23fc4:	4798      	blx	r3
	__asm__ volatile(
   23fc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23fca:	f3ef 8711 	mrs	r7, BASEPRI
   23fce:	f383 8812 	msr	BASEPRI_MAX, r3
   23fd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fd6:	480b      	ldr	r0, [pc, #44]	; (24004 <sys_clock_announce+0x170>)
   23fd8:	f7fd f97e 	bl	212d8 <z_spin_lock_valid>
   23fdc:	b968      	cbnz	r0, 23ffa <sys_clock_announce+0x166>
   23fde:	4a0a      	ldr	r2, [pc, #40]	; (24008 <sys_clock_announce+0x174>)
   23fe0:	490a      	ldr	r1, [pc, #40]	; (2400c <sys_clock_announce+0x178>)
   23fe2:	480b      	ldr	r0, [pc, #44]	; (24010 <sys_clock_announce+0x17c>)
   23fe4:	2381      	movs	r3, #129	; 0x81
   23fe6:	f000 fb87 	bl	246f8 <printk>
   23fea:	4906      	ldr	r1, [pc, #24]	; (24004 <sys_clock_announce+0x170>)
   23fec:	4809      	ldr	r0, [pc, #36]	; (24014 <sys_clock_announce+0x180>)
   23fee:	f000 fb83 	bl	246f8 <printk>
   23ff2:	4805      	ldr	r0, [pc, #20]	; (24008 <sys_clock_announce+0x174>)
   23ff4:	2181      	movs	r1, #129	; 0x81
   23ff6:	f000 fd70 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   23ffa:	4802      	ldr	r0, [pc, #8]	; (24004 <sys_clock_announce+0x170>)
   23ffc:	f7fd f98a 	bl	21314 <z_spin_lock_set_owner>
	return k;
   24000:	e770      	b.n	23ee4 <sys_clock_announce+0x50>
   24002:	bf00      	nop
   24004:	20002558 	.word	0x20002558
   24008:	000291b5 	.word	0x000291b5
   2400c:	00029207 	.word	0x00029207
   24010:	000290f5 	.word	0x000290f5
   24014:	0002921c 	.word	0x0002921c
   24018:	20002554 	.word	0x20002554
   2401c:	20001eb8 	.word	0x20001eb8
   24020:	000291db 	.word	0x000291db
   24024:	000291f2 	.word	0x000291f2
   24028:	200005a8 	.word	0x200005a8

0002402c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2402c:	b570      	push	{r4, r5, r6, lr}
   2402e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24032:	f3ef 8611 	mrs	r6, BASEPRI
   24036:	f383 8812 	msr	BASEPRI_MAX, r3
   2403a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2403e:	481b      	ldr	r0, [pc, #108]	; (240ac <sys_clock_tick_get+0x80>)
   24040:	f7fd f94a 	bl	212d8 <z_spin_lock_valid>
   24044:	b968      	cbnz	r0, 24062 <sys_clock_tick_get+0x36>
   24046:	4a1a      	ldr	r2, [pc, #104]	; (240b0 <sys_clock_tick_get+0x84>)
   24048:	491a      	ldr	r1, [pc, #104]	; (240b4 <sys_clock_tick_get+0x88>)
   2404a:	481b      	ldr	r0, [pc, #108]	; (240b8 <sys_clock_tick_get+0x8c>)
   2404c:	2381      	movs	r3, #129	; 0x81
   2404e:	f000 fb53 	bl	246f8 <printk>
   24052:	4916      	ldr	r1, [pc, #88]	; (240ac <sys_clock_tick_get+0x80>)
   24054:	4819      	ldr	r0, [pc, #100]	; (240bc <sys_clock_tick_get+0x90>)
   24056:	f000 fb4f 	bl	246f8 <printk>
   2405a:	4815      	ldr	r0, [pc, #84]	; (240b0 <sys_clock_tick_get+0x84>)
   2405c:	2181      	movs	r1, #129	; 0x81
   2405e:	f000 fd3c 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   24062:	4812      	ldr	r0, [pc, #72]	; (240ac <sys_clock_tick_get+0x80>)
   24064:	f7fd f956 	bl	21314 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   24068:	f7fa f9ac 	bl	1e3c4 <sys_clock_elapsed>
   2406c:	4b14      	ldr	r3, [pc, #80]	; (240c0 <sys_clock_tick_get+0x94>)
   2406e:	e9d3 4500 	ldrd	r4, r5, [r3]
   24072:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24074:	480d      	ldr	r0, [pc, #52]	; (240ac <sys_clock_tick_get+0x80>)
   24076:	f145 0500 	adc.w	r5, r5, #0
   2407a:	f7fd f93b 	bl	212f4 <z_spin_unlock_valid>
   2407e:	b968      	cbnz	r0, 2409c <sys_clock_tick_get+0x70>
   24080:	4a0b      	ldr	r2, [pc, #44]	; (240b0 <sys_clock_tick_get+0x84>)
   24082:	4910      	ldr	r1, [pc, #64]	; (240c4 <sys_clock_tick_get+0x98>)
   24084:	480c      	ldr	r0, [pc, #48]	; (240b8 <sys_clock_tick_get+0x8c>)
   24086:	23ac      	movs	r3, #172	; 0xac
   24088:	f000 fb36 	bl	246f8 <printk>
   2408c:	4907      	ldr	r1, [pc, #28]	; (240ac <sys_clock_tick_get+0x80>)
   2408e:	480e      	ldr	r0, [pc, #56]	; (240c8 <sys_clock_tick_get+0x9c>)
   24090:	f000 fb32 	bl	246f8 <printk>
   24094:	4806      	ldr	r0, [pc, #24]	; (240b0 <sys_clock_tick_get+0x84>)
   24096:	21ac      	movs	r1, #172	; 0xac
   24098:	f000 fd1f 	bl	24ada <assert_post_action>
	__asm__ volatile(
   2409c:	f386 8811 	msr	BASEPRI, r6
   240a0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   240a4:	4620      	mov	r0, r4
   240a6:	4629      	mov	r1, r5
   240a8:	bd70      	pop	{r4, r5, r6, pc}
   240aa:	bf00      	nop
   240ac:	20002558 	.word	0x20002558
   240b0:	000291b5 	.word	0x000291b5
   240b4:	00029207 	.word	0x00029207
   240b8:	000290f5 	.word	0x000290f5
   240bc:	0002921c 	.word	0x0002921c
   240c0:	20001eb8 	.word	0x20001eb8
   240c4:	000291db 	.word	0x000291db
   240c8:	000291f2 	.word	0x000291f2

000240cc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   240cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240ce:	4604      	mov	r4, r0
	__asm__ volatile(
   240d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   240d4:	f3ef 8511 	mrs	r5, BASEPRI
   240d8:	f383 8812 	msr	BASEPRI_MAX, r3
   240dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240e0:	484c      	ldr	r0, [pc, #304]	; (24214 <z_timer_expiration_handler+0x148>)
   240e2:	f7fd f8f9 	bl	212d8 <z_spin_lock_valid>
   240e6:	b968      	cbnz	r0, 24104 <z_timer_expiration_handler+0x38>
   240e8:	4a4b      	ldr	r2, [pc, #300]	; (24218 <z_timer_expiration_handler+0x14c>)
   240ea:	494c      	ldr	r1, [pc, #304]	; (2421c <z_timer_expiration_handler+0x150>)
   240ec:	484c      	ldr	r0, [pc, #304]	; (24220 <z_timer_expiration_handler+0x154>)
   240ee:	2381      	movs	r3, #129	; 0x81
   240f0:	f000 fb02 	bl	246f8 <printk>
   240f4:	4947      	ldr	r1, [pc, #284]	; (24214 <z_timer_expiration_handler+0x148>)
   240f6:	484b      	ldr	r0, [pc, #300]	; (24224 <z_timer_expiration_handler+0x158>)
   240f8:	f000 fafe 	bl	246f8 <printk>
   240fc:	4846      	ldr	r0, [pc, #280]	; (24218 <z_timer_expiration_handler+0x14c>)
   240fe:	2181      	movs	r1, #129	; 0x81
   24100:	f000 fceb 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   24104:	4843      	ldr	r0, [pc, #268]	; (24214 <z_timer_expiration_handler+0x148>)
   24106:	f7fd f905 	bl	21314 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2410a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2410e:	1c56      	adds	r6, r2, #1
   24110:	f143 0700 	adc.w	r7, r3, #0
   24114:	2f00      	cmp	r7, #0
   24116:	bf08      	it	eq
   24118:	2e02      	cmpeq	r6, #2
   2411a:	d303      	bcc.n	24124 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2411c:	4942      	ldr	r1, [pc, #264]	; (24228 <z_timer_expiration_handler+0x15c>)
   2411e:	4620      	mov	r0, r4
   24120:	f7ff fcfe 	bl	23b20 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   24124:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24126:	3301      	adds	r3, #1
   24128:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2412a:	6a23      	ldr	r3, [r4, #32]
   2412c:	2b00      	cmp	r3, #0
   2412e:	d035      	beq.n	2419c <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24130:	4838      	ldr	r0, [pc, #224]	; (24214 <z_timer_expiration_handler+0x148>)
   24132:	f7fd f8df 	bl	212f4 <z_spin_unlock_valid>
   24136:	b968      	cbnz	r0, 24154 <z_timer_expiration_handler+0x88>
   24138:	4a37      	ldr	r2, [pc, #220]	; (24218 <z_timer_expiration_handler+0x14c>)
   2413a:	493c      	ldr	r1, [pc, #240]	; (2422c <z_timer_expiration_handler+0x160>)
   2413c:	4838      	ldr	r0, [pc, #224]	; (24220 <z_timer_expiration_handler+0x154>)
   2413e:	23ac      	movs	r3, #172	; 0xac
   24140:	f000 fada 	bl	246f8 <printk>
   24144:	4933      	ldr	r1, [pc, #204]	; (24214 <z_timer_expiration_handler+0x148>)
   24146:	483a      	ldr	r0, [pc, #232]	; (24230 <z_timer_expiration_handler+0x164>)
   24148:	f000 fad6 	bl	246f8 <printk>
   2414c:	4832      	ldr	r0, [pc, #200]	; (24218 <z_timer_expiration_handler+0x14c>)
   2414e:	21ac      	movs	r1, #172	; 0xac
   24150:	f000 fcc3 	bl	24ada <assert_post_action>
	__asm__ volatile(
   24154:	f385 8811 	msr	BASEPRI, r5
   24158:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2415c:	6a23      	ldr	r3, [r4, #32]
   2415e:	4620      	mov	r0, r4
   24160:	4798      	blx	r3
	__asm__ volatile(
   24162:	f04f 0340 	mov.w	r3, #64	; 0x40
   24166:	f3ef 8511 	mrs	r5, BASEPRI
   2416a:	f383 8812 	msr	BASEPRI_MAX, r3
   2416e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24172:	4828      	ldr	r0, [pc, #160]	; (24214 <z_timer_expiration_handler+0x148>)
   24174:	f7fd f8b0 	bl	212d8 <z_spin_lock_valid>
   24178:	b968      	cbnz	r0, 24196 <z_timer_expiration_handler+0xca>
   2417a:	4a27      	ldr	r2, [pc, #156]	; (24218 <z_timer_expiration_handler+0x14c>)
   2417c:	4927      	ldr	r1, [pc, #156]	; (2421c <z_timer_expiration_handler+0x150>)
   2417e:	4828      	ldr	r0, [pc, #160]	; (24220 <z_timer_expiration_handler+0x154>)
   24180:	2381      	movs	r3, #129	; 0x81
   24182:	f000 fab9 	bl	246f8 <printk>
   24186:	4923      	ldr	r1, [pc, #140]	; (24214 <z_timer_expiration_handler+0x148>)
   24188:	4826      	ldr	r0, [pc, #152]	; (24224 <z_timer_expiration_handler+0x158>)
   2418a:	f000 fab5 	bl	246f8 <printk>
   2418e:	4822      	ldr	r0, [pc, #136]	; (24218 <z_timer_expiration_handler+0x14c>)
   24190:	2181      	movs	r1, #129	; 0x81
   24192:	f000 fca2 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   24196:	481f      	ldr	r0, [pc, #124]	; (24214 <z_timer_expiration_handler+0x148>)
   24198:	f7fd f8bc 	bl	21314 <z_spin_lock_set_owner>
	return list->head == list;
   2419c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241a0:	42a6      	cmp	r6, r4
   241a2:	d000      	beq.n	241a6 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   241a4:	b9b6      	cbnz	r6, 241d4 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241a6:	481b      	ldr	r0, [pc, #108]	; (24214 <z_timer_expiration_handler+0x148>)
   241a8:	f7fd f8a4 	bl	212f4 <z_spin_unlock_valid>
   241ac:	b968      	cbnz	r0, 241ca <z_timer_expiration_handler+0xfe>
   241ae:	4a1a      	ldr	r2, [pc, #104]	; (24218 <z_timer_expiration_handler+0x14c>)
   241b0:	491e      	ldr	r1, [pc, #120]	; (2422c <z_timer_expiration_handler+0x160>)
   241b2:	481b      	ldr	r0, [pc, #108]	; (24220 <z_timer_expiration_handler+0x154>)
   241b4:	23ac      	movs	r3, #172	; 0xac
   241b6:	f000 fa9f 	bl	246f8 <printk>
   241ba:	4916      	ldr	r1, [pc, #88]	; (24214 <z_timer_expiration_handler+0x148>)
   241bc:	481c      	ldr	r0, [pc, #112]	; (24230 <z_timer_expiration_handler+0x164>)
   241be:	f000 fa9b 	bl	246f8 <printk>
   241c2:	4815      	ldr	r0, [pc, #84]	; (24218 <z_timer_expiration_handler+0x14c>)
   241c4:	21ac      	movs	r1, #172	; 0xac
   241c6:	f000 fc88 	bl	24ada <assert_post_action>
	__asm__ volatile(
   241ca:	f385 8811 	msr	BASEPRI, r5
   241ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   241d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   241d4:	4630      	mov	r0, r6
   241d6:	f7fe fa87 	bl	226e8 <z_unpend_thread_no_timeout>
   241da:	2300      	movs	r3, #0
   241dc:	480d      	ldr	r0, [pc, #52]	; (24214 <z_timer_expiration_handler+0x148>)
   241de:	67f3      	str	r3, [r6, #124]	; 0x7c
   241e0:	f7fd f888 	bl	212f4 <z_spin_unlock_valid>
   241e4:	b968      	cbnz	r0, 24202 <z_timer_expiration_handler+0x136>
   241e6:	4a0c      	ldr	r2, [pc, #48]	; (24218 <z_timer_expiration_handler+0x14c>)
   241e8:	4910      	ldr	r1, [pc, #64]	; (2422c <z_timer_expiration_handler+0x160>)
   241ea:	480d      	ldr	r0, [pc, #52]	; (24220 <z_timer_expiration_handler+0x154>)
   241ec:	23ac      	movs	r3, #172	; 0xac
   241ee:	f000 fa83 	bl	246f8 <printk>
   241f2:	4908      	ldr	r1, [pc, #32]	; (24214 <z_timer_expiration_handler+0x148>)
   241f4:	480e      	ldr	r0, [pc, #56]	; (24230 <z_timer_expiration_handler+0x164>)
   241f6:	f000 fa7f 	bl	246f8 <printk>
   241fa:	4807      	ldr	r0, [pc, #28]	; (24218 <z_timer_expiration_handler+0x14c>)
   241fc:	21ac      	movs	r1, #172	; 0xac
   241fe:	f000 fc6c 	bl	24ada <assert_post_action>
   24202:	f385 8811 	msr	BASEPRI, r5
   24206:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2420a:	4630      	mov	r0, r6
}
   2420c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   24210:	f7fe bd52 	b.w	22cb8 <z_ready_thread>
   24214:	2000255c 	.word	0x2000255c
   24218:	000291b5 	.word	0x000291b5
   2421c:	00029207 	.word	0x00029207
   24220:	000290f5 	.word	0x000290f5
   24224:	0002921c 	.word	0x0002921c
   24228:	000240cd 	.word	0x000240cd
   2422c:	000291db 	.word	0x000291db
   24230:	000291f2 	.word	0x000291f2

00024234 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   24234:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   24238:	4619      	mov	r1, r3
   2423a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2423c:	1c4c      	adds	r4, r1, #1
{
   2423e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24240:	bf08      	it	eq
   24242:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   24246:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2424a:	4680      	mov	r8, r0
   2424c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2424e:	d04c      	beq.n	242ea <z_impl_k_timer_start+0xb6>
   24250:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24252:	1c6b      	adds	r3, r5, #1
   24254:	bf08      	it	eq
   24256:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2425a:	4614      	mov	r4, r2
   2425c:	d019      	beq.n	24292 <z_impl_k_timer_start+0x5e>
   2425e:	ea54 0305 	orrs.w	r3, r4, r5
   24262:	d016      	beq.n	24292 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   24264:	f06f 0301 	mvn.w	r3, #1
   24268:	ebb3 0a02 	subs.w	sl, r3, r2
   2426c:	f04f 33ff 	mov.w	r3, #4294967295
   24270:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24274:	f1ba 0f00 	cmp.w	sl, #0
   24278:	f17b 0300 	sbcs.w	r3, fp, #0
   2427c:	da09      	bge.n	24292 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2427e:	f112 34ff 	adds.w	r4, r2, #4294967295
   24282:	f145 35ff 	adc.w	r5, r5, #4294967295
   24286:	2c01      	cmp	r4, #1
   24288:	f175 0300 	sbcs.w	r3, r5, #0
   2428c:	bfbc      	itt	lt
   2428e:	2401      	movlt	r4, #1
   24290:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24292:	f06f 0301 	mvn.w	r3, #1
   24296:	1a1b      	subs	r3, r3, r0
   24298:	9300      	str	r3, [sp, #0]
   2429a:	f04f 33ff 	mov.w	r3, #4294967295
   2429e:	eb63 0301 	sbc.w	r3, r3, r1
   242a2:	9301      	str	r3, [sp, #4]
   242a4:	e9dd 2300 	ldrd	r2, r3, [sp]
   242a8:	2a00      	cmp	r2, #0
   242aa:	f173 0300 	sbcs.w	r3, r3, #0
   242ae:	da0c      	bge.n	242ca <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   242b0:	f110 38ff 	adds.w	r8, r0, #4294967295
   242b4:	f141 39ff 	adc.w	r9, r1, #4294967295
   242b8:	f1b8 0f00 	cmp.w	r8, #0
   242bc:	f179 0300 	sbcs.w	r3, r9, #0
   242c0:	bfbc      	itt	lt
   242c2:	f04f 0800 	movlt.w	r8, #0
   242c6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   242ca:	4630      	mov	r0, r6
   242cc:	f7ff fcfc 	bl	23cc8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   242d0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   242d2:	4907      	ldr	r1, [pc, #28]	; (242f0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   242d4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   242d6:	4642      	mov	r2, r8
   242d8:	464b      	mov	r3, r9
   242da:	4630      	mov	r0, r6
	timer->period = period;
   242dc:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   242e0:	b002      	add	sp, #8
   242e2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   242e6:	f7ff bc1b 	b.w	23b20 <z_add_timeout>
}
   242ea:	b002      	add	sp, #8
   242ec:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   242f0:	000240cd 	.word	0x000240cd

000242f4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   242f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   242f8:	6884      	ldr	r4, [r0, #8]
{
   242fa:	4605      	mov	r5, r0
   242fc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   242fe:	b1d4      	cbz	r4, 24336 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   24300:	7863      	ldrb	r3, [r4, #1]
   24302:	2b01      	cmp	r3, #1
   24304:	d14b      	bne.n	2439e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   24306:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   2430a:	d10e      	bne.n	2432a <signal_poll_event+0x36>
   2430c:	4a30      	ldr	r2, [pc, #192]	; (243d0 <signal_poll_event+0xdc>)
   2430e:	4931      	ldr	r1, [pc, #196]	; (243d4 <signal_poll_event+0xe0>)
   24310:	4831      	ldr	r0, [pc, #196]	; (243d8 <signal_poll_event+0xe4>)
   24312:	23f9      	movs	r3, #249	; 0xf9
   24314:	f000 f9f0 	bl	246f8 <printk>
   24318:	4830      	ldr	r0, [pc, #192]	; (243dc <signal_poll_event+0xe8>)
   2431a:	f000 f9ed 	bl	246f8 <printk>
   2431e:	482c      	ldr	r0, [pc, #176]	; (243d0 <signal_poll_event+0xdc>)
   24320:	21f9      	movs	r1, #249	; 0xf9
   24322:	f000 fbda 	bl	24ada <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   24326:	7b7b      	ldrb	r3, [r7, #13]
   24328:	deff      	udf	#255	; 0xff
   2432a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2432e:	f013 0302 	ands.w	r3, r3, #2
   24332:	d10a      	bne.n	2434a <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   24334:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24336:	68eb      	ldr	r3, [r5, #12]
   24338:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2433c:	430e      	orrs	r6, r1
	event->poller = NULL;
   2433e:	2000      	movs	r0, #0
	event->state |= state;
   24340:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   24344:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   24346:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   24348:	e00d      	b.n	24366 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   2434a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2434e:	f04f 31ff 	mov.w	r1, #4294967295
   24352:	f06f 0001 	mvn.w	r0, #1
   24356:	428b      	cmp	r3, r1
   24358:	bf08      	it	eq
   2435a:	4282      	cmpeq	r2, r0
   2435c:	d105      	bne.n	2436a <signal_poll_event+0x76>
		poller->is_polling = false;
   2435e:	2300      	movs	r3, #0
   24360:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   24362:	f06f 000a 	mvn.w	r0, #10
}
   24366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   2436a:	4638      	mov	r0, r7
   2436c:	f7fe fb00 	bl	22970 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24370:	2e08      	cmp	r6, #8
   24372:	bf0c      	ite	eq
   24374:	f06f 0303 	mvneq.w	r3, #3
   24378:	2300      	movne	r3, #0
   2437a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2437c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24380:	06db      	lsls	r3, r3, #27
   24382:	d104      	bne.n	2438e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   24384:	f854 8c48 	ldr.w	r8, [r4, #-72]
   24388:	f1b8 0f00 	cmp.w	r8, #0
   2438c:	d001      	beq.n	24392 <signal_poll_event+0x9e>
		poller->is_polling = false;
   2438e:	2300      	movs	r3, #0
   24390:	e7d0      	b.n	24334 <signal_poll_event+0x40>
	z_ready_thread(thread);
   24392:	4638      	mov	r0, r7
   24394:	f7fe fc90 	bl	22cb8 <z_ready_thread>
		poller->is_polling = false;
   24398:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2439c:	e7cb      	b.n	24336 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   2439e:	2b02      	cmp	r3, #2
   243a0:	d1f5      	bne.n	2438e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   243a2:	7823      	ldrb	r3, [r4, #0]
   243a4:	2b00      	cmp	r3, #0
   243a6:	d0c6      	beq.n	24336 <signal_poll_event+0x42>
   243a8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   243ac:	b177      	cbz	r7, 243cc <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   243ae:	f1a4 0914 	sub.w	r9, r4, #20
   243b2:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   243b6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   243ba:	f7ff fc85 	bl	23cc8 <z_abort_timeout>
		twork->poll_result = 0;
   243be:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   243c2:	4649      	mov	r1, r9
   243c4:	4638      	mov	r0, r7
   243c6:	f7fd fe19 	bl	21ffc <k_work_submit_to_queue>
   243ca:	e7e5      	b.n	24398 <signal_poll_event+0xa4>
		poller->is_polling = false;
   243cc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   243ce:	e7b2      	b.n	24336 <signal_poll_event+0x42>
   243d0:	000307de 	.word	0x000307de
   243d4:	000308d9 	.word	0x000308d9
   243d8:	000290f5 	.word	0x000290f5
   243dc:	000308ef 	.word	0x000308ef

000243e0 <z_impl_k_poll_signal_raise>:
{
   243e0:	b570      	push	{r4, r5, r6, lr}
   243e2:	4604      	mov	r4, r0
   243e4:	460d      	mov	r5, r1
	__asm__ volatile(
   243e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   243ea:	f3ef 8611 	mrs	r6, BASEPRI
   243ee:	f383 8812 	msr	BASEPRI_MAX, r3
   243f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   243f6:	4821      	ldr	r0, [pc, #132]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   243f8:	f7fc ff6e 	bl	212d8 <z_spin_lock_valid>
   243fc:	b968      	cbnz	r0, 2441a <z_impl_k_poll_signal_raise+0x3a>
   243fe:	4a20      	ldr	r2, [pc, #128]	; (24480 <z_impl_k_poll_signal_raise+0xa0>)
   24400:	4920      	ldr	r1, [pc, #128]	; (24484 <z_impl_k_poll_signal_raise+0xa4>)
   24402:	4821      	ldr	r0, [pc, #132]	; (24488 <z_impl_k_poll_signal_raise+0xa8>)
   24404:	2381      	movs	r3, #129	; 0x81
   24406:	f000 f977 	bl	246f8 <printk>
   2440a:	491c      	ldr	r1, [pc, #112]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   2440c:	481f      	ldr	r0, [pc, #124]	; (2448c <z_impl_k_poll_signal_raise+0xac>)
   2440e:	f000 f973 	bl	246f8 <printk>
   24412:	481b      	ldr	r0, [pc, #108]	; (24480 <z_impl_k_poll_signal_raise+0xa0>)
   24414:	2181      	movs	r1, #129	; 0x81
   24416:	f000 fb60 	bl	24ada <assert_post_action>
	z_spin_lock_set_owner(l);
   2441a:	4818      	ldr	r0, [pc, #96]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   2441c:	f7fc ff7a 	bl	21314 <z_spin_lock_set_owner>
	return list->head == list;
   24420:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   24422:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   24424:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24426:	4284      	cmp	r4, r0
   24428:	60a1      	str	r1, [r4, #8]
   2442a:	d117      	bne.n	2445c <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2442c:	4813      	ldr	r0, [pc, #76]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   2442e:	f7fc ff61 	bl	212f4 <z_spin_unlock_valid>
   24432:	b968      	cbnz	r0, 24450 <z_impl_k_poll_signal_raise+0x70>
   24434:	4a12      	ldr	r2, [pc, #72]	; (24480 <z_impl_k_poll_signal_raise+0xa0>)
   24436:	4916      	ldr	r1, [pc, #88]	; (24490 <z_impl_k_poll_signal_raise+0xb0>)
   24438:	4813      	ldr	r0, [pc, #76]	; (24488 <z_impl_k_poll_signal_raise+0xa8>)
   2443a:	23ac      	movs	r3, #172	; 0xac
   2443c:	f000 f95c 	bl	246f8 <printk>
   24440:	490e      	ldr	r1, [pc, #56]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   24442:	4814      	ldr	r0, [pc, #80]	; (24494 <z_impl_k_poll_signal_raise+0xb4>)
   24444:	f000 f958 	bl	246f8 <printk>
   24448:	480d      	ldr	r0, [pc, #52]	; (24480 <z_impl_k_poll_signal_raise+0xa0>)
   2444a:	21ac      	movs	r1, #172	; 0xac
   2444c:	f000 fb45 	bl	24ada <assert_post_action>
	__asm__ volatile(
   24450:	f386 8811 	msr	BASEPRI, r6
   24454:	f3bf 8f6f 	isb	sy
		return 0;
   24458:	2400      	movs	r4, #0
   2445a:	e00d      	b.n	24478 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   2445c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24460:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24462:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24464:	2300      	movs	r3, #0
	node->prev = NULL;
   24466:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2446a:	f7ff ff43 	bl	242f4 <signal_poll_event>
	z_reschedule(&lock, key);
   2446e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24470:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24472:	4802      	ldr	r0, [pc, #8]	; (2447c <z_impl_k_poll_signal_raise+0x9c>)
   24474:	f7fe f980 	bl	22778 <z_reschedule>
}
   24478:	4620      	mov	r0, r4
   2447a:	bd70      	pop	{r4, r5, r6, pc}
   2447c:	20002560 	.word	0x20002560
   24480:	000291b5 	.word	0x000291b5
   24484:	00029207 	.word	0x00029207
   24488:	000290f5 	.word	0x000290f5
   2448c:	0002921c 	.word	0x0002921c
   24490:	000291db 	.word	0x000291db
   24494:	000291f2 	.word	0x000291f2

00024498 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24498:	2304      	movs	r3, #4
   2449a:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2449c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   244a0:	4606      	mov	r6, r0
   244a2:	460d      	mov	r5, r1
   244a4:	d20a      	bcs.n	244bc <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   244a6:	f04f 0800 	mov.w	r8, #0
   244aa:	f04f 0900 	mov.w	r9, #0
   244ae:	e9cd 8900 	strd	r8, r9, [sp]
   244b2:	4319      	orrs	r1, r3
   244b4:	f7fc fbc0 	bl	20c38 <k_heap_aligned_alloc>
	if (mem == NULL) {
   244b8:	4604      	mov	r4, r0
   244ba:	b920      	cbnz	r0, 244c6 <z_heap_aligned_alloc+0x2e>
		return NULL;
   244bc:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   244be:	4620      	mov	r0, r4
   244c0:	b002      	add	sp, #8
   244c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   244c6:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   244ca:	2d00      	cmp	r5, #0
   244cc:	d0f7      	beq.n	244be <z_heap_aligned_alloc+0x26>
   244ce:	1e6b      	subs	r3, r5, #1
   244d0:	421c      	tst	r4, r3
   244d2:	d0f4      	beq.n	244be <z_heap_aligned_alloc+0x26>
   244d4:	2325      	movs	r3, #37	; 0x25
   244d6:	4a07      	ldr	r2, [pc, #28]	; (244f4 <z_heap_aligned_alloc+0x5c>)
   244d8:	4907      	ldr	r1, [pc, #28]	; (244f8 <z_heap_aligned_alloc+0x60>)
   244da:	4808      	ldr	r0, [pc, #32]	; (244fc <z_heap_aligned_alloc+0x64>)
   244dc:	f000 f90c 	bl	246f8 <printk>
   244e0:	4621      	mov	r1, r4
   244e2:	4807      	ldr	r0, [pc, #28]	; (24500 <z_heap_aligned_alloc+0x68>)
   244e4:	462a      	mov	r2, r5
   244e6:	f000 f907 	bl	246f8 <printk>
   244ea:	4802      	ldr	r0, [pc, #8]	; (244f4 <z_heap_aligned_alloc+0x5c>)
   244ec:	2125      	movs	r1, #37	; 0x25
   244ee:	f000 faf4 	bl	24ada <assert_post_action>
   244f2:	e7e4      	b.n	244be <z_heap_aligned_alloc+0x26>
   244f4:	0003090e 	.word	0x0003090e
   244f8:	00030932 	.word	0x00030932
   244fc:	000290f5 	.word	0x000290f5
   24500:	00030964 	.word	0x00030964

00024504 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   24504:	2803      	cmp	r0, #3
{
   24506:	b538      	push	{r3, r4, r5, lr}
   24508:	4604      	mov	r4, r0
   2450a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   2450c:	d901      	bls.n	24512 <k_aligned_alloc+0xe>
   2450e:	0783      	lsls	r3, r0, #30
   24510:	d00c      	beq.n	2452c <k_aligned_alloc+0x28>
   24512:	4912      	ldr	r1, [pc, #72]	; (2455c <k_aligned_alloc+0x58>)
   24514:	4a12      	ldr	r2, [pc, #72]	; (24560 <k_aligned_alloc+0x5c>)
   24516:	4813      	ldr	r0, [pc, #76]	; (24564 <k_aligned_alloc+0x60>)
   24518:	2342      	movs	r3, #66	; 0x42
   2451a:	f000 f8ed 	bl	246f8 <printk>
   2451e:	4812      	ldr	r0, [pc, #72]	; (24568 <k_aligned_alloc+0x64>)
   24520:	f000 f8ea 	bl	246f8 <printk>
   24524:	480e      	ldr	r0, [pc, #56]	; (24560 <k_aligned_alloc+0x5c>)
   24526:	2142      	movs	r1, #66	; 0x42
   24528:	f000 fad7 	bl	24ada <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2452c:	1e63      	subs	r3, r4, #1
   2452e:	4223      	tst	r3, r4
   24530:	d00c      	beq.n	2454c <k_aligned_alloc+0x48>
   24532:	490e      	ldr	r1, [pc, #56]	; (2456c <k_aligned_alloc+0x68>)
   24534:	4a0a      	ldr	r2, [pc, #40]	; (24560 <k_aligned_alloc+0x5c>)
   24536:	480b      	ldr	r0, [pc, #44]	; (24564 <k_aligned_alloc+0x60>)
   24538:	2346      	movs	r3, #70	; 0x46
   2453a:	f000 f8dd 	bl	246f8 <printk>
   2453e:	480c      	ldr	r0, [pc, #48]	; (24570 <k_aligned_alloc+0x6c>)
   24540:	f000 f8da 	bl	246f8 <printk>
   24544:	4806      	ldr	r0, [pc, #24]	; (24560 <k_aligned_alloc+0x5c>)
   24546:	2146      	movs	r1, #70	; 0x46
   24548:	f000 fac7 	bl	24ada <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2454c:	462a      	mov	r2, r5
   2454e:	4621      	mov	r1, r4
   24550:	4808      	ldr	r0, [pc, #32]	; (24574 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   24552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   24556:	f7ff bf9f 	b.w	24498 <z_heap_aligned_alloc>
   2455a:	bf00      	nop
   2455c:	0003098c 	.word	0x0003098c
   24560:	0003090e 	.word	0x0003090e
   24564:	000290f5 	.word	0x000290f5
   24568:	000309c9 	.word	0x000309c9
   2456c:	00029300 	.word	0x00029300
   24570:	0002931b 	.word	0x0002931b
   24574:	20000680 	.word	0x20000680

00024578 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   24578:	b538      	push	{r3, r4, r5, lr}
   2457a:	4604      	mov	r4, r0
   2457c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2457e:	f003 fd59 	bl	28034 <k_is_in_isr>
   24582:	b950      	cbnz	r0, 2459a <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24584:	4b06      	ldr	r3, [pc, #24]	; (245a0 <z_thread_aligned_alloc+0x28>)
   24586:	689b      	ldr	r3, [r3, #8]
   24588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2458a:	b143      	cbz	r3, 2459e <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   2458c:	462a      	mov	r2, r5
   2458e:	4621      	mov	r1, r4
   24590:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   24592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   24596:	f7ff bf7f 	b.w	24498 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   2459a:	4b02      	ldr	r3, [pc, #8]	; (245a4 <z_thread_aligned_alloc+0x2c>)
   2459c:	e7f6      	b.n	2458c <z_thread_aligned_alloc+0x14>
}
   2459e:	bd38      	pop	{r3, r4, r5, pc}
   245a0:	20002508 	.word	0x20002508
   245a4:	20000680 	.word	0x20000680

000245a8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   245a8:	4a02      	ldr	r2, [pc, #8]	; (245b4 <boot_banner+0xc>)
   245aa:	4903      	ldr	r1, [pc, #12]	; (245b8 <boot_banner+0x10>)
   245ac:	4803      	ldr	r0, [pc, #12]	; (245bc <boot_banner+0x14>)
   245ae:	f000 b8a3 	b.w	246f8 <printk>
   245b2:	bf00      	nop
   245b4:	0002f381 	.word	0x0002f381
   245b8:	000309f6 	.word	0x000309f6
   245bc:	00030a05 	.word	0x00030a05

000245c0 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   245c0:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   245c2:	f04f 0c0a 	mov.w	ip, #10
{
   245c6:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   245c8:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   245ca:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   245cc:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   245ce:	b111      	cbz	r1, 245d6 <u8_to_dec+0x16>
   245d0:	3e01      	subs	r6, #1
   245d2:	d101      	bne.n	245d8 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   245d4:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   245d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   245d8:	42a2      	cmp	r2, r4
		digit = value / divisor;
   245da:	fbb2 f7f4 	udiv	r7, r2, r4
   245de:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   245e0:	d202      	bcs.n	245e8 <u8_to_dec+0x28>
   245e2:	2c01      	cmp	r4, #1
   245e4:	d000      	beq.n	245e8 <u8_to_dec+0x28>
   245e6:	b130      	cbz	r0, 245f6 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   245e8:	3330      	adds	r3, #48	; 0x30
   245ea:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   245ee:	3901      	subs	r1, #1
			num_digits++;
   245f0:	1c43      	adds	r3, r0, #1
			buflen--;
   245f2:	b2c9      	uxtb	r1, r1
			num_digits++;
   245f4:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   245f6:	fb04 2217 	mls	r2, r4, r7, r2
   245fa:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   245fc:	fbb4 f4fc 	udiv	r4, r4, ip
   24600:	e7e5      	b.n	245ce <u8_to_dec+0xe>

00024602 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   24602:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   24606:	b2db      	uxtb	r3, r3
   24608:	2b09      	cmp	r3, #9
   2460a:	d802      	bhi.n	24612 <char2hex+0x10>
		*x = c - '0';
   2460c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2460e:	2000      	movs	r0, #0
   24610:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   24612:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   24616:	2b05      	cmp	r3, #5
   24618:	d802      	bhi.n	24620 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2461a:	3857      	subs	r0, #87	; 0x57
   2461c:	7008      	strb	r0, [r1, #0]
   2461e:	e7f6      	b.n	2460e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   24620:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   24624:	2b05      	cmp	r3, #5
   24626:	d801      	bhi.n	2462c <char2hex+0x2a>
		*x = c - 'A' + 10;
   24628:	3837      	subs	r0, #55	; 0x37
   2462a:	e7f7      	b.n	2461c <char2hex+0x1a>
		return -EINVAL;
   2462c:	f06f 0015 	mvn.w	r0, #21
}
   24630:	4770      	bx	lr

00024632 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   24632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24634:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   24636:	f001 0001 	and.w	r0, r1, #1
   2463a:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2463e:	429d      	cmp	r5, r3
   24640:	ea4f 0651 	mov.w	r6, r1, lsr #1
   24644:	d903      	bls.n	2464e <hex2bin+0x1c>
		return 0;
   24646:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   24648:	4628      	mov	r0, r5
   2464a:	b003      	add	sp, #12
   2464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2464e:	b158      	cbz	r0, 24668 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   24650:	7820      	ldrb	r0, [r4, #0]
   24652:	f10d 0107 	add.w	r1, sp, #7
   24656:	f7ff ffd4 	bl	24602 <char2hex>
   2465a:	2800      	cmp	r0, #0
   2465c:	dbf3      	blt.n	24646 <hex2bin+0x14>
		buf[0] = dec;
   2465e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24662:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   24666:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   24668:	3401      	adds	r4, #1
   2466a:	4416      	add	r6, r2
   2466c:	42b2      	cmp	r2, r6
   2466e:	d0eb      	beq.n	24648 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   24670:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   24674:	f10d 0107 	add.w	r1, sp, #7
   24678:	f7ff ffc3 	bl	24602 <char2hex>
   2467c:	2800      	cmp	r0, #0
   2467e:	dbe2      	blt.n	24646 <hex2bin+0x14>
		buf[i] = dec << 4;
   24680:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24684:	011b      	lsls	r3, r3, #4
   24686:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   24688:	f814 0b02 	ldrb.w	r0, [r4], #2
   2468c:	f10d 0107 	add.w	r1, sp, #7
   24690:	f7ff ffb7 	bl	24602 <char2hex>
   24694:	2800      	cmp	r0, #0
   24696:	dbd6      	blt.n	24646 <hex2bin+0x14>
		buf[i] += dec;
   24698:	7813      	ldrb	r3, [r2, #0]
   2469a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2469e:	440b      	add	r3, r1
   246a0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   246a4:	e7e2      	b.n	2466c <hex2bin+0x3a>

000246a6 <sys_notify_validate>:
	if (notify == NULL) {
   246a6:	4603      	mov	r3, r0
   246a8:	b140      	cbz	r0, 246bc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   246aa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   246ac:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   246b0:	2a02      	cmp	r2, #2
   246b2:	d006      	beq.n	246c2 <sys_notify_validate+0x1c>
   246b4:	2a03      	cmp	r2, #3
   246b6:	d004      	beq.n	246c2 <sys_notify_validate+0x1c>
   246b8:	2a01      	cmp	r2, #1
   246ba:	d005      	beq.n	246c8 <sys_notify_validate+0x22>
		return -EINVAL;
   246bc:	f06f 0015 	mvn.w	r0, #21
}
   246c0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   246c2:	681a      	ldr	r2, [r3, #0]
   246c4:	2a00      	cmp	r2, #0
   246c6:	d0f9      	beq.n	246bc <sys_notify_validate+0x16>
		notify->result = 0;
   246c8:	2000      	movs	r0, #0
   246ca:	6098      	str	r0, [r3, #8]
   246cc:	4770      	bx	lr

000246ce <arch_printk_char_out>:
}
   246ce:	2000      	movs	r0, #0
   246d0:	4770      	bx	lr

000246d2 <str_out>:
{
   246d2:	b530      	push	{r4, r5, lr}
   246d4:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   246d6:	680c      	ldr	r4, [r1, #0]
   246d8:	1c55      	adds	r5, r2, #1
   246da:	b114      	cbz	r4, 246e2 <str_out+0x10>
   246dc:	684b      	ldr	r3, [r1, #4]
   246de:	4293      	cmp	r3, r2
   246e0:	dc01      	bgt.n	246e6 <str_out+0x14>
		ctx->count++;
   246e2:	608d      	str	r5, [r1, #8]
}
   246e4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   246e6:	3b01      	subs	r3, #1
   246e8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   246ea:	bf08      	it	eq
   246ec:	2200      	moveq	r2, #0
   246ee:	608d      	str	r5, [r1, #8]
   246f0:	bf0c      	ite	eq
   246f2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   246f4:	54a0      	strbne	r0, [r4, r2]
   246f6:	e7f5      	b.n	246e4 <str_out+0x12>

000246f8 <printk>:
{
   246f8:	b40f      	push	{r0, r1, r2, r3}
   246fa:	b507      	push	{r0, r1, r2, lr}
   246fc:	a904      	add	r1, sp, #16
   246fe:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24702:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   24704:	f7ec f9ec 	bl	10ae0 <vprintk>
}
   24708:	b003      	add	sp, #12
   2470a:	f85d eb04 	ldr.w	lr, [sp], #4
   2470e:	b004      	add	sp, #16
   24710:	4770      	bx	lr

00024712 <snprintk>:
{
   24712:	b40c      	push	{r2, r3}
   24714:	b507      	push	{r0, r1, r2, lr}
   24716:	ab04      	add	r3, sp, #16
   24718:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2471c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2471e:	f7ec f9ed 	bl	10afc <vsnprintk>
}
   24722:	b003      	add	sp, #12
   24724:	f85d eb04 	ldr.w	lr, [sp], #4
   24728:	b002      	add	sp, #8
   2472a:	4770      	bx	lr

0002472c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2472c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2472e:	f013 0307 	ands.w	r3, r3, #7
   24732:	d105      	bne.n	24740 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24734:	6803      	ldr	r3, [r0, #0]
   24736:	2b00      	cmp	r3, #0
		evt = EVT_START;
   24738:	bf0c      	ite	eq
   2473a:	2000      	moveq	r0, #0
   2473c:	2003      	movne	r0, #3
   2473e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24740:	2b02      	cmp	r3, #2
   24742:	d105      	bne.n	24750 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24744:	8bc3      	ldrh	r3, [r0, #30]
   24746:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   24748:	bf14      	ite	ne
   2474a:	2000      	movne	r0, #0
   2474c:	2004      	moveq	r0, #4
   2474e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24750:	2b01      	cmp	r3, #1
   24752:	d105      	bne.n	24760 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24754:	6803      	ldr	r3, [r0, #0]
   24756:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   24758:	bf0c      	ite	eq
   2475a:	2000      	moveq	r0, #0
   2475c:	2005      	movne	r0, #5
   2475e:	4770      	bx	lr
	int evt = EVT_NOP;
   24760:	2000      	movs	r0, #0
}
   24762:	4770      	bx	lr

00024764 <notify_one>:
{
   24764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24768:	460d      	mov	r5, r1
   2476a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2476c:	4619      	mov	r1, r3
   2476e:	1d28      	adds	r0, r5, #4
{
   24770:	4690      	mov	r8, r2
   24772:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24774:	f7ec f976 	bl	10a64 <sys_notify_finalize>
	if (cb) {
   24778:	4604      	mov	r4, r0
   2477a:	b138      	cbz	r0, 2478c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2477c:	4633      	mov	r3, r6
   2477e:	4642      	mov	r2, r8
   24780:	4629      	mov	r1, r5
   24782:	4638      	mov	r0, r7
   24784:	46a4      	mov	ip, r4
}
   24786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2478a:	4760      	bx	ip
}
   2478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024790 <validate_args>:
{
   24790:	b510      	push	{r4, lr}
   24792:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24794:	b140      	cbz	r0, 247a8 <validate_args+0x18>
   24796:	b139      	cbz	r1, 247a8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   24798:	1d08      	adds	r0, r1, #4
   2479a:	f7ff ff84 	bl	246a6 <sys_notify_validate>
	if ((rv == 0)
   2479e:	b928      	cbnz	r0, 247ac <validate_args+0x1c>
	    && ((cli->notify.flags
   247a0:	68a3      	ldr	r3, [r4, #8]
   247a2:	f033 0303 	bics.w	r3, r3, #3
   247a6:	d001      	beq.n	247ac <validate_args+0x1c>
		rv = -EINVAL;
   247a8:	f06f 0015 	mvn.w	r0, #21
}
   247ac:	bd10      	pop	{r4, pc}

000247ae <onoff_manager_init>:
{
   247ae:	b538      	push	{r3, r4, r5, lr}
   247b0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   247b2:	4605      	mov	r5, r0
   247b4:	b158      	cbz	r0, 247ce <onoff_manager_init+0x20>
	    || (transitions == NULL)
   247b6:	b151      	cbz	r1, 247ce <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   247b8:	680b      	ldr	r3, [r1, #0]
   247ba:	b143      	cbz	r3, 247ce <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   247bc:	684b      	ldr	r3, [r1, #4]
   247be:	b133      	cbz	r3, 247ce <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   247c0:	2220      	movs	r2, #32
   247c2:	2100      	movs	r1, #0
   247c4:	f001 f8d9 	bl	2597a <memset>
   247c8:	612c      	str	r4, [r5, #16]
	return 0;
   247ca:	2000      	movs	r0, #0
}
   247cc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   247ce:	f06f 0015 	mvn.w	r0, #21
   247d2:	e7fb      	b.n	247cc <onoff_manager_init+0x1e>

000247d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   247d4:	4604      	mov	r4, r0
   247d6:	b508      	push	{r3, lr}
   247d8:	4608      	mov	r0, r1
   247da:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   247dc:	461a      	mov	r2, r3
   247de:	47a0      	blx	r4
	return z_impl_z_current_get();
   247e0:	f7ff f800 	bl	237e4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   247e4:	f7ef fd90 	bl	14308 <z_impl_k_thread_abort>

000247e8 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   247e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   247ec:	8840      	ldrh	r0, [r0, #2]
}
   247ee:	0840      	lsrs	r0, r0, #1
   247f0:	4770      	bx	lr

000247f2 <free_list_add>:
{
   247f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   247f4:	4603      	mov	r3, r0
   247f6:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   247f8:	f7ff fff6 	bl	247e8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   247fc:	fab0 f080 	clz	r0, r0
   24800:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   24804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   24808:	00ca      	lsls	r2, r1, #3
   2480a:	f8dc 6010 	ldr.w	r6, [ip, #16]
   2480e:	1d17      	adds	r7, r2, #4
   24810:	b28d      	uxth	r5, r1
   24812:	3206      	adds	r2, #6
   24814:	b956      	cbnz	r6, 2482c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   24816:	2101      	movs	r1, #1
   24818:	fa01 f000 	lsl.w	r0, r1, r0
   2481c:	68d9      	ldr	r1, [r3, #12]
   2481e:	4301      	orrs	r1, r0
   24820:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24822:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   24826:	53dd      	strh	r5, [r3, r7]
   24828:	529d      	strh	r5, [r3, r2]
}
   2482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2482c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2482e:	3104      	adds	r1, #4
   24830:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24832:	53d8      	strh	r0, [r3, r7]
   24834:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24838:	529e      	strh	r6, [r3, r2]
   2483a:	80c5      	strh	r5, [r0, #6]
   2483c:	525d      	strh	r5, [r3, r1]
   2483e:	e7f4      	b.n	2482a <free_list_add+0x38>

00024840 <free_list_remove_bidx>:
{
   24840:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24842:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24846:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24848:	4299      	cmp	r1, r3
   2484a:	f102 0104 	add.w	r1, r2, #4
   2484e:	d10a      	bne.n	24866 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   24850:	2301      	movs	r3, #1
   24852:	fa03 f202 	lsl.w	r2, r3, r2
   24856:	68c3      	ldr	r3, [r0, #12]
   24858:	ea23 0302 	bic.w	r3, r3, r2
   2485c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2485e:	2300      	movs	r3, #0
   24860:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   24864:	bd10      	pop	{r4, pc}
   24866:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   24868:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2486c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   24870:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24874:	80cb      	strh	r3, [r1, #6]
   24876:	8082      	strh	r2, [r0, #4]
}
   24878:	e7f4      	b.n	24864 <free_list_remove_bidx+0x24>

0002487a <free_list_remove>:
{
   2487a:	b510      	push	{r4, lr}
   2487c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2487e:	f7ff ffb3 	bl	247e8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24882:	fab0 f280 	clz	r2, r0
}
   24886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   2488a:	f1c2 021f 	rsb	r2, r2, #31
   2488e:	4618      	mov	r0, r3
   24890:	f7ff bfd6 	b.w	24840 <free_list_remove_bidx>

00024894 <alloc_chunk>:
{
   24894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24898:	fab1 f581 	clz	r5, r1
   2489c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   248a0:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   248a4:	4603      	mov	r3, r0
	if (b->next) {
   248a6:	693a      	ldr	r2, [r7, #16]
{
   248a8:	460e      	mov	r6, r1
	if (b->next) {
   248aa:	b1ca      	cbz	r2, 248e0 <alloc_chunk+0x4c>
   248ac:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   248b0:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   248b2:	4618      	mov	r0, r3
   248b4:	4621      	mov	r1, r4
   248b6:	f7ff ff97 	bl	247e8 <chunk_size>
   248ba:	42b0      	cmp	r0, r6
   248bc:	d307      	bcc.n	248ce <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   248be:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   248c0:	4621      	mov	r1, r4
   248c2:	4618      	mov	r0, r3
   248c4:	f7ff ffbc 	bl	24840 <free_list_remove_bidx>
}
   248c8:	4620      	mov	r0, r4
   248ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   248ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   248d2:	f1b8 0801 	subs.w	r8, r8, #1
   248d6:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   248d8:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   248da:	d001      	beq.n	248e0 <alloc_chunk+0x4c>
   248dc:	428a      	cmp	r2, r1
   248de:	d1e7      	bne.n	248b0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   248e0:	68d9      	ldr	r1, [r3, #12]
   248e2:	f1c5 0520 	rsb	r5, r5, #32
   248e6:	f04f 34ff 	mov.w	r4, #4294967295
   248ea:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   248ec:	400c      	ands	r4, r1
   248ee:	d0eb      	beq.n	248c8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   248f0:	fa94 f2a4 	rbit	r2, r4
   248f4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   248f8:	1d11      	adds	r1, r2, #4
   248fa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   248fe:	e7df      	b.n	248c0 <alloc_chunk+0x2c>

00024900 <merge_chunks>:
{
   24900:	b538      	push	{r3, r4, r5, lr}
   24902:	4603      	mov	r3, r0
   24904:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24906:	f7ff ff6f 	bl	247e8 <chunk_size>
   2490a:	4611      	mov	r1, r2
   2490c:	4604      	mov	r4, r0
   2490e:	4618      	mov	r0, r3
   24910:	f7ff ff6a 	bl	247e8 <chunk_size>
   24914:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   24916:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2491a:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   2491c:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   2491e:	4618      	mov	r0, r3
   24920:	4611      	mov	r1, r2
   24922:	f7ff ff61 	bl	247e8 <chunk_size>
	void *cmem = &buf[c];
   24926:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   24928:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   2492c:	bd38      	pop	{r3, r4, r5, pc}

0002492e <split_chunks>:
{
   2492e:	b538      	push	{r3, r4, r5, lr}
   24930:	4603      	mov	r3, r0
   24932:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   24934:	f7ff ff58 	bl	247e8 <chunk_size>
	chunksz_t lsz = rc - lc;
   24938:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2493a:	1aa5      	subs	r5, r4, r2
   2493c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   24940:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24942:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24944:	8060      	strh	r0, [r4, #2]
   24946:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2494a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2494c:	8044      	strh	r4, [r0, #2]
   2494e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24952:	4618      	mov	r0, r3
   24954:	4611      	mov	r1, r2
   24956:	f7ff ff47 	bl	247e8 <chunk_size>
	void *cmem = &buf[c];
   2495a:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2495c:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   24960:	bd38      	pop	{r3, r4, r5, pc}

00024962 <free_chunk>:
{
   24962:	b538      	push	{r3, r4, r5, lr}
   24964:	4605      	mov	r5, r0
   24966:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   24968:	f7ff ff3e 	bl	247e8 <chunk_size>
   2496c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2496e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24972:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24974:	07da      	lsls	r2, r3, #31
   24976:	d40a      	bmi.n	2498e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   24978:	4628      	mov	r0, r5
   2497a:	f7ff ff7e 	bl	2487a <free_list_remove>
	return c + chunk_size(h, c);
   2497e:	4621      	mov	r1, r4
   24980:	4628      	mov	r0, r5
   24982:	f7ff ff31 	bl	247e8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24986:	1822      	adds	r2, r4, r0
   24988:	4628      	mov	r0, r5
   2498a:	f7ff ffb9 	bl	24900 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2498e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24992:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24994:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24998:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2499a:	07db      	lsls	r3, r3, #31
   2499c:	d40c      	bmi.n	249b8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2499e:	4628      	mov	r0, r5
   249a0:	f7ff ff6b 	bl	2487a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   249a4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   249a8:	4622      	mov	r2, r4
   249aa:	1a61      	subs	r1, r4, r1
   249ac:	4628      	mov	r0, r5
   249ae:	f7ff ffa7 	bl	24900 <merge_chunks>
   249b2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   249b6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   249b8:	4621      	mov	r1, r4
   249ba:	4628      	mov	r0, r5
}
   249bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   249c0:	f7ff bf17 	b.w	247f2 <free_list_add>

000249c4 <sys_heap_alloc>:
{
   249c4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   249c6:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   249c8:	b909      	cbnz	r1, 249ce <sys_heap_alloc+0xa>
		return NULL;
   249ca:	2000      	movs	r0, #0
}
   249cc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   249ce:	68ab      	ldr	r3, [r5, #8]
   249d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   249d4:	d9f9      	bls.n	249ca <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   249d6:	310b      	adds	r1, #11
   249d8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   249da:	4621      	mov	r1, r4
   249dc:	4628      	mov	r0, r5
   249de:	f7ff ff59 	bl	24894 <alloc_chunk>
	if (c == 0U) {
   249e2:	4606      	mov	r6, r0
   249e4:	2800      	cmp	r0, #0
   249e6:	d0f0      	beq.n	249ca <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   249e8:	4601      	mov	r1, r0
   249ea:	4628      	mov	r0, r5
   249ec:	f7ff fefc 	bl	247e8 <chunk_size>
   249f0:	42a0      	cmp	r0, r4
   249f2:	d908      	bls.n	24a06 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   249f4:	4434      	add	r4, r6
   249f6:	4628      	mov	r0, r5
   249f8:	4622      	mov	r2, r4
   249fa:	f7ff ff98 	bl	2492e <split_chunks>
		free_list_add(h, c + chunk_sz);
   249fe:	4621      	mov	r1, r4
   24a00:	4628      	mov	r0, r5
   24a02:	f7ff fef6 	bl	247f2 <free_list_add>
	void *cmem = &buf[c];
   24a06:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24a0a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24a0c:	8853      	ldrh	r3, [r2, #2]
   24a0e:	f043 0301 	orr.w	r3, r3, #1
   24a12:	8053      	strh	r3, [r2, #2]
   24a14:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   24a16:	e7d9      	b.n	249cc <sys_heap_alloc+0x8>

00024a18 <encode_uint>:
{
   24a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a1c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   24a1e:	78d3      	ldrb	r3, [r2, #3]
{
   24a20:	4614      	mov	r4, r2
	switch (specifier) {
   24a22:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24a24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   24a28:	4606      	mov	r6, r0
   24a2a:	460f      	mov	r7, r1
   24a2c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   24a2e:	d02d      	beq.n	24a8c <encode_uint+0x74>
   24a30:	d828      	bhi.n	24a84 <encode_uint+0x6c>
		return 16;
   24a32:	2b58      	cmp	r3, #88	; 0x58
   24a34:	bf14      	ite	ne
   24a36:	250a      	movne	r5, #10
   24a38:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   24a3a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   24a3e:	46aa      	mov	sl, r5
   24a40:	f04f 0b00 	mov.w	fp, #0
   24a44:	4652      	mov	r2, sl
   24a46:	465b      	mov	r3, fp
   24a48:	4630      	mov	r0, r6
   24a4a:	4639      	mov	r1, r7
   24a4c:	f7db fb48 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24a50:	2a09      	cmp	r2, #9
   24a52:	b2d3      	uxtb	r3, r2
   24a54:	d81f      	bhi.n	24a96 <encode_uint+0x7e>
   24a56:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   24a58:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24a5a:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   24a5c:	bf08      	it	eq
   24a5e:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24a60:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   24a64:	d301      	bcc.n	24a6a <encode_uint+0x52>
   24a66:	45c8      	cmp	r8, r9
   24a68:	d812      	bhi.n	24a90 <encode_uint+0x78>
	if (conv->flag_hash) {
   24a6a:	7823      	ldrb	r3, [r4, #0]
   24a6c:	069b      	lsls	r3, r3, #26
   24a6e:	d505      	bpl.n	24a7c <encode_uint+0x64>
		if (radix == 8) {
   24a70:	2d08      	cmp	r5, #8
   24a72:	d116      	bne.n	24aa2 <encode_uint+0x8a>
			conv->altform_0 = true;
   24a74:	78a3      	ldrb	r3, [r4, #2]
   24a76:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   24a7a:	70a3      	strb	r3, [r4, #2]
}
   24a7c:	4640      	mov	r0, r8
   24a7e:	b003      	add	sp, #12
   24a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   24a84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   24a88:	2b70      	cmp	r3, #112	; 0x70
   24a8a:	e7d3      	b.n	24a34 <encode_uint+0x1c>
	switch (specifier) {
   24a8c:	2508      	movs	r5, #8
   24a8e:	e7d4      	b.n	24a3a <encode_uint+0x22>
		value /= radix;
   24a90:	4606      	mov	r6, r0
   24a92:	460f      	mov	r7, r1
   24a94:	e7d6      	b.n	24a44 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24a96:	9a01      	ldr	r2, [sp, #4]
   24a98:	2a19      	cmp	r2, #25
   24a9a:	bf94      	ite	ls
   24a9c:	3337      	addls	r3, #55	; 0x37
   24a9e:	3357      	addhi	r3, #87	; 0x57
   24aa0:	e7da      	b.n	24a58 <encode_uint+0x40>
		} else if (radix == 16) {
   24aa2:	2d10      	cmp	r5, #16
   24aa4:	d1ea      	bne.n	24a7c <encode_uint+0x64>
			conv->altform_0c = true;
   24aa6:	78a3      	ldrb	r3, [r4, #2]
   24aa8:	f043 0310 	orr.w	r3, r3, #16
   24aac:	e7e5      	b.n	24a7a <encode_uint+0x62>

00024aae <outs>:
{
   24aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ab2:	4607      	mov	r7, r0
   24ab4:	4688      	mov	r8, r1
   24ab6:	4615      	mov	r5, r2
   24ab8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24aba:	4614      	mov	r4, r2
   24abc:	42b4      	cmp	r4, r6
   24abe:	eba4 0005 	sub.w	r0, r4, r5
   24ac2:	d302      	bcc.n	24aca <outs+0x1c>
   24ac4:	b93e      	cbnz	r6, 24ad6 <outs+0x28>
   24ac6:	7823      	ldrb	r3, [r4, #0]
   24ac8:	b12b      	cbz	r3, 24ad6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   24aca:	f814 0b01 	ldrb.w	r0, [r4], #1
   24ace:	4641      	mov	r1, r8
   24ad0:	47b8      	blx	r7
		if (rc < 0) {
   24ad2:	2800      	cmp	r0, #0
   24ad4:	daf2      	bge.n	24abc <outs+0xe>
}
   24ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024ada <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24ada:	4040      	eors	r0, r0
   24adc:	f380 8811 	msr	BASEPRI, r0
   24ae0:	f04f 0004 	mov.w	r0, #4
   24ae4:	df02      	svc	2
}
   24ae6:	4770      	bx	lr

00024ae8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   24ae8:	4770      	bx	lr

00024aea <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   24aea:	2300      	movs	r3, #0
	list->head = NULL;
   24aec:	e9c0 3300 	strd	r3, r3, [r0]
}
   24af0:	4770      	bx	lr

00024af2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   24af2:	6803      	ldr	r3, [r0, #0]
   24af4:	b923      	cbnz	r3, 24b00 <log_list_add_tail+0xe>
		list->head = msg;
   24af6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   24af8:	2300      	movs	r3, #0
	list->tail = msg;
   24afa:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   24afc:	600b      	str	r3, [r1, #0]
}
   24afe:	4770      	bx	lr
		list->tail->next = msg;
   24b00:	6843      	ldr	r3, [r0, #4]
   24b02:	6019      	str	r1, [r3, #0]
   24b04:	e7f8      	b.n	24af8 <log_list_add_tail+0x6>

00024b06 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   24b06:	6800      	ldr	r0, [r0, #0]
   24b08:	4770      	bx	lr

00024b0a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   24b0a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   24b0c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   24b0e:	b108      	cbz	r0, 24b14 <log_list_head_get+0xa>
		list->head = list->head->next;
   24b10:	6802      	ldr	r2, [r0, #0]
   24b12:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   24b14:	4770      	bx	lr

00024b16 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   24b16:	6843      	ldr	r3, [r0, #4]
}
   24b18:	7958      	ldrb	r0, [r3, #5]
   24b1a:	4770      	bx	lr

00024b1c <z_log_msg_std_alloc>:
{
   24b1c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24b1e:	f7ed fb45 	bl	121ac <log_msg_chunk_alloc>
	if (msg != NULL) {
   24b22:	b118      	cbz	r0, 24b2c <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   24b24:	2301      	movs	r3, #1
   24b26:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   24b28:	2300      	movs	r3, #0
   24b2a:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   24b2c:	bd08      	pop	{r3, pc}

00024b2e <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   24b2e:	f003 b8ac 	b.w	27c8a <sys_clock_cycle_get_32>

00024b32 <dummy_timestamp>:
   24b32:	2000      	movs	r0, #0
   24b34:	4770      	bx	lr

00024b36 <log_0>:
{
   24b36:	b538      	push	{r3, r4, r5, lr}
   24b38:	4605      	mov	r5, r0
   24b3a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   24b3c:	f7ff ffee 	bl	24b1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   24b40:	b128      	cbz	r0, 24b4e <log_0+0x18>
		msg->str = str;
   24b42:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   24b44:	4621      	mov	r1, r4
}
   24b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   24b4a:	f7ed b9fd 	b.w	11f48 <msg_finalize>
}
   24b4e:	bd38      	pop	{r3, r4, r5, pc}

00024b50 <log_1>:
{
   24b50:	b570      	push	{r4, r5, r6, lr}
   24b52:	4606      	mov	r6, r0
   24b54:	460d      	mov	r5, r1
   24b56:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24b58:	f7ff ffe0 	bl	24b1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   24b5c:	b158      	cbz	r0, 24b76 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   24b5e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   24b60:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   24b62:	2101      	movs	r1, #1
   24b64:	f361 1207 	bfi	r2, r1, #4, #4
   24b68:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   24b6a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   24b6c:	4621      	mov	r1, r4
}
   24b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   24b72:	f7ed b9e9 	b.w	11f48 <msg_finalize>
}
   24b76:	bd70      	pop	{r4, r5, r6, pc}

00024b78 <log_2>:
{
   24b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b7c:	4680      	mov	r8, r0
   24b7e:	460f      	mov	r7, r1
   24b80:	4616      	mov	r6, r2
   24b82:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24b84:	f7ff ffca 	bl	24b1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   24b88:	b168      	cbz	r0, 24ba6 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   24b8a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   24b8c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   24b90:	2202      	movs	r2, #2
   24b92:	f362 1307 	bfi	r3, r2, #4, #4
   24b96:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   24b98:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   24b9c:	4629      	mov	r1, r5
}
   24b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   24ba2:	f7ed b9d1 	b.w	11f48 <msg_finalize>
}
   24ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024baa <log_3>:
{
   24baa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24bae:	4680      	mov	r8, r0
   24bb0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   24bb4:	460f      	mov	r7, r1
   24bb6:	4616      	mov	r6, r2
   24bb8:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   24bba:	f7ff ffaf 	bl	24b1c <z_log_msg_std_alloc>

	if (msg != NULL) {
   24bbe:	b170      	cbz	r0, 24bde <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   24bc0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   24bc2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   24bc6:	2203      	movs	r2, #3
   24bc8:	f362 1307 	bfi	r3, r2, #4, #4
   24bcc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   24bce:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   24bd2:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   24bd4:	4649      	mov	r1, r9
}
   24bd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   24bda:	f7ed b9b5 	b.w	11f48 <msg_finalize>
}
   24bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024be2 <log_n>:
{
   24be2:	b510      	push	{r4, lr}
   24be4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   24be6:	f7ed fb33 	bl	12250 <log_msg_create_n>
		if (msg == NULL) {
   24bea:	b120      	cbz	r0, 24bf6 <log_n+0x14>
		msg_finalize(msg, src_level);
   24bec:	4621      	mov	r1, r4
}
   24bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   24bf2:	f7ed b9a9 	b.w	11f48 <msg_finalize>
}
   24bf6:	bd10      	pop	{r4, pc}

00024bf8 <log_hexdump>:
{
   24bf8:	b510      	push	{r4, lr}
   24bfa:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   24bfc:	f000 f8a3 	bl	24d46 <log_msg_hexdump_create>
		if (msg == NULL) {
   24c00:	b120      	cbz	r0, 24c0c <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   24c02:	4621      	mov	r1, r4
}
   24c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   24c08:	f7ed b99e 	b.w	11f48 <msg_finalize>
}
   24c0c:	bd10      	pop	{r4, pc}

00024c0e <z_log_get_tag>:
}
   24c0e:	2000      	movs	r0, #0
   24c10:	4770      	bx	lr

00024c12 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   24c12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c16:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   24c18:	8903      	ldrh	r3, [r0, #8]
{
   24c1a:	f89d 7020 	ldrb.w	r7, [sp, #32]
   24c1e:	460e      	mov	r6, r1
   24c20:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   24c22:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   24c26:	42a2      	cmp	r2, r4
   24c28:	d803      	bhi.n	24c32 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   24c2a:	2300      	movs	r3, #0
   24c2c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   24c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   24c32:	680b      	ldr	r3, [r1, #0]
   24c34:	4423      	add	r3, r4
   24c36:	4293      	cmp	r3, r2
		*length = available_len - offset;
   24c38:	bf84      	itt	hi
   24c3a:	1b13      	subhi	r3, r2, r4
   24c3c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   24c3e:	2a0c      	cmp	r2, #12
	req_len = *length;
   24c40:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   24c44:	d92a      	bls.n	24c9c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   24c46:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   24c48:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   24c4c:	d82d      	bhi.n	24caa <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   24c4e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   24c50:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   24c52:	454a      	cmp	r2, r9
   24c54:	bf28      	it	cs
   24c56:	464a      	movcs	r2, r9
   24c58:	4615      	mov	r5, r2
		if (put_op) {
   24c5a:	4420      	add	r0, r4
   24c5c:	b317      	cbz	r7, 24ca4 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   24c5e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   24c60:	f000 fe80 	bl	25964 <memcpy>
		req_len -= cpy_len;
   24c64:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   24c68:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   24c6a:	f1b9 0f00 	cmp.w	r9, #0
   24c6e:	d0de      	beq.n	24c2e <log_msg_hexdump_data_op+0x1c>
   24c70:	f1b8 0f00 	cmp.w	r8, #0
   24c74:	d0db      	beq.n	24c2e <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   24c76:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   24c7a:	454d      	cmp	r5, r9
   24c7c:	bf28      	it	cs
   24c7e:	464d      	movcs	r5, r9
		if (put_op) {
   24c80:	1d20      	adds	r0, r4, #4
   24c82:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   24c84:	462a      	mov	r2, r5
		if (put_op) {
   24c86:	b1bf      	cbz	r7, 24cb8 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   24c88:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   24c8a:	f000 fe6b 	bl	25964 <memcpy>
		req_len -= cpy_len;
   24c8e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   24c92:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   24c96:	442e      	add	r6, r5
		offset = 0;
   24c98:	2400      	movs	r4, #0
   24c9a:	e7e6      	b.n	24c6a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   24c9c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   24c9e:	f04f 0800 	mov.w	r8, #0
   24ca2:	e7d6      	b.n	24c52 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   24ca4:	4601      	mov	r1, r0
   24ca6:	4630      	mov	r0, r6
   24ca8:	e7da      	b.n	24c60 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   24caa:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   24cac:	2c1b      	cmp	r4, #27
   24cae:	d9dc      	bls.n	24c6a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   24cb0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   24cb4:	3c1c      	subs	r4, #28
   24cb6:	e7f9      	b.n	24cac <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   24cb8:	4601      	mov	r1, r0
   24cba:	4630      	mov	r0, r6
   24cbc:	e7e5      	b.n	24c8a <log_msg_hexdump_data_op+0x78>

00024cbe <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24cbe:	3004      	adds	r0, #4
   24cc0:	f3bf 8f5b 	dmb	ish
   24cc4:	e850 3f00 	ldrex	r3, [r0]
   24cc8:	3301      	adds	r3, #1
   24cca:	e840 3200 	strex	r2, r3, [r0]
   24cce:	2a00      	cmp	r2, #0
   24cd0:	d1f8      	bne.n	24cc4 <log_msg_get+0x6>
   24cd2:	f3bf 8f5b 	dmb	ish
}
   24cd6:	4770      	bx	lr

00024cd8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   24cd8:	7a40      	ldrb	r0, [r0, #9]
}
   24cda:	0900      	lsrs	r0, r0, #4
   24cdc:	4770      	bx	lr

00024cde <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   24cde:	7a43      	ldrb	r3, [r0, #9]
   24ce0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   24ce4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   24ce8:	d216      	bcs.n	24d18 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   24cea:	2a03      	cmp	r2, #3
   24cec:	d803      	bhi.n	24cf6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   24cee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24cf2:	6948      	ldr	r0, [r1, #20]
   24cf4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   24cf6:	2901      	cmp	r1, #1
   24cf8:	d803      	bhi.n	24d02 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   24cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24cfe:	6988      	ldr	r0, [r1, #24]
   24d00:	4770      	bx	lr
	cont = msg->payload.ext.next;
   24d02:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   24d04:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   24d06:	2906      	cmp	r1, #6
   24d08:	d803      	bhi.n	24d12 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   24d0a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   24d0e:	6848      	ldr	r0, [r1, #4]
   24d10:	4770      	bx	lr
		cont = cont->next;
   24d12:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   24d14:	3907      	subs	r1, #7
		cont = cont->next;
   24d16:	e7f6      	b.n	24d06 <log_msg_arg_get+0x28>
		return 0;
   24d18:	2000      	movs	r0, #0
}
   24d1a:	4770      	bx	lr

00024d1c <log_msg_put>:
{
   24d1c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24d1e:	1d02      	adds	r2, r0, #4
   24d20:	f3bf 8f5b 	dmb	ish
   24d24:	e852 1f00 	ldrex	r1, [r2]
   24d28:	3901      	subs	r1, #1
   24d2a:	e842 1c00 	strex	ip, r1, [r2]
   24d2e:	f1bc 0f00 	cmp.w	ip, #0
   24d32:	d1f7      	bne.n	24d24 <log_msg_put+0x8>
   24d34:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   24d38:	685b      	ldr	r3, [r3, #4]
   24d3a:	b90b      	cbnz	r3, 24d40 <log_msg_put+0x24>
		msg_free(msg);
   24d3c:	f7ed ba4a 	b.w	121d4 <msg_free>
}
   24d40:	4770      	bx	lr

00024d42 <log_msg_str_get>:
}
   24d42:	6900      	ldr	r0, [r0, #16]
   24d44:	4770      	bx	lr

00024d46 <log_msg_hexdump_create>:
{
   24d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   24d4a:	f643 75ff 	movw	r5, #16383	; 0x3fff
   24d4e:	4295      	cmp	r5, r2
{
   24d50:	4680      	mov	r8, r0
   24d52:	460e      	mov	r6, r1
   24d54:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   24d56:	bf28      	it	cs
   24d58:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   24d5a:	f7ed fa27 	bl	121ac <log_msg_chunk_alloc>
	if (msg == NULL) {
   24d5e:	4604      	mov	r4, r0
   24d60:	b380      	cbz	r0, 24dc4 <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   24d62:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   24d64:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   24d68:	2301      	movs	r3, #1
   24d6a:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   24d6c:	00ab      	lsls	r3, r5, #2
   24d6e:	f043 0301 	orr.w	r3, r3, #1
   24d72:	f002 0202 	and.w	r2, r2, #2
   24d76:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   24d78:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   24d7a:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   24d7c:	f100 0814 	add.w	r8, r0, #20
   24d80:	d917      	bls.n	24db2 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   24d82:	2208      	movs	r2, #8
   24d84:	4631      	mov	r1, r6
   24d86:	3018      	adds	r0, #24
   24d88:	f000 fdec 	bl	25964 <memcpy>
		msg->hdr.params.generic.ext = 1;
   24d8c:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   24d8e:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   24d90:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   24d94:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   24d96:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   24d98:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   24d9a:	3d08      	subs	r5, #8
	while (length > 0) {
   24d9c:	4699      	mov	r9, r3
   24d9e:	b18d      	cbz	r5, 24dc4 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   24da0:	f7ed fa04 	bl	121ac <log_msg_chunk_alloc>
		if (cont == NULL) {
   24da4:	4607      	mov	r7, r0
   24da6:	b980      	cbnz	r0, 24dca <log_msg_hexdump_create+0x84>
			msg_free(msg);
   24da8:	4620      	mov	r0, r4
   24daa:	f7ed fa13 	bl	121d4 <msg_free>
			return NULL;
   24dae:	463c      	mov	r4, r7
   24db0:	e008      	b.n	24dc4 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   24db2:	462a      	mov	r2, r5
   24db4:	4631      	mov	r1, r6
   24db6:	4640      	mov	r0, r8
   24db8:	f000 fdd4 	bl	25964 <memcpy>
		msg->hdr.params.generic.ext = 0;
   24dbc:	7a23      	ldrb	r3, [r4, #8]
   24dbe:	f36f 0341 	bfc	r3, #1, #1
   24dc2:	7223      	strb	r3, [r4, #8]
}
   24dc4:	4620      	mov	r0, r4
   24dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   24dca:	2d1c      	cmp	r5, #28
   24dcc:	462f      	mov	r7, r5
   24dce:	bf28      	it	cs
   24dd0:	271c      	movcs	r7, #28
		*prev_cont = cont;
   24dd2:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   24dd6:	4631      	mov	r1, r6
		cont->next = NULL;
   24dd8:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   24ddc:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   24dde:	463a      	mov	r2, r7
   24de0:	3004      	adds	r0, #4
   24de2:	f000 fdbf 	bl	25964 <memcpy>
		data += chunk_length;
   24de6:	443e      	add	r6, r7
		length -= chunk_length;
   24de8:	1bed      	subs	r5, r5, r7
   24dea:	e7d8      	b.n	24d9e <log_msg_hexdump_create+0x58>

00024dec <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   24dec:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   24dee:	2400      	movs	r4, #0
   24df0:	9400      	str	r4, [sp, #0]
   24df2:	f7ff ff0e 	bl	24c12 <log_msg_hexdump_data_op>
}
   24df6:	b002      	add	sp, #8
   24df8:	bd10      	pop	{r4, pc}

00024dfa <buffer_write>:
{
   24dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24dfc:	4606      	mov	r6, r0
   24dfe:	460d      	mov	r5, r1
   24e00:	4614      	mov	r4, r2
   24e02:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   24e04:	4621      	mov	r1, r4
   24e06:	4628      	mov	r0, r5
   24e08:	463a      	mov	r2, r7
   24e0a:	47b0      	blx	r6
	} while (len != 0);
   24e0c:	1a24      	subs	r4, r4, r0
		buf += processed;
   24e0e:	4405      	add	r5, r0
	} while (len != 0);
   24e10:	d1f8      	bne.n	24e04 <buffer_write+0xa>
}
   24e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024e14 <std_print>:
{
   24e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e18:	b08e      	sub	sp, #56	; 0x38
   24e1a:	af0e      	add	r7, sp, #56	; 0x38
   24e1c:	4680      	mov	r8, r0
   24e1e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   24e20:	f7ff ff8f 	bl	24d42 <log_msg_str_get>
   24e24:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   24e26:	4640      	mov	r0, r8
   24e28:	f7ff ff56 	bl	24cd8 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   24e2c:	0083      	lsls	r3, r0, #2
   24e2e:	3307      	adds	r3, #7
   24e30:	f023 0307 	bic.w	r3, r3, #7
   24e34:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   24e38:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   24e3a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   24e3c:	f04f 0900 	mov.w	r9, #0
   24e40:	45d1      	cmp	r9, sl
   24e42:	d116      	bne.n	24e72 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   24e44:	4640      	mov	r0, r8
   24e46:	f7ff ff47 	bl	24cd8 <log_msg_nargs_get>
   24e4a:	280f      	cmp	r0, #15
   24e4c:	d81e      	bhi.n	24e8c <std_print+0x78>
   24e4e:	e8df f010 	tbh	[pc, r0, lsl #1]
   24e52:	0019      	.short	0x0019
   24e54:	00260020 	.word	0x00260020
   24e58:	0036002d 	.word	0x0036002d
   24e5c:	004e0041 	.word	0x004e0041
   24e60:	006e005d 	.word	0x006e005d
   24e64:	00960081 	.word	0x00960081
   24e68:	00c600ad 	.word	0x00c600ad
   24e6c:	00fe00e1 	.word	0x00fe00e1
   24e70:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   24e72:	4649      	mov	r1, r9
   24e74:	4640      	mov	r0, r8
   24e76:	f7ff ff32 	bl	24cde <log_msg_arg_get>
   24e7a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   24e7e:	f109 0901 	add.w	r9, r9, #1
   24e82:	e7dd      	b.n	24e40 <std_print+0x2c>
		print_formatted(output, str);
   24e84:	4631      	mov	r1, r6
   24e86:	4628      	mov	r0, r5
   24e88:	f7ed fa4a 	bl	12320 <print_formatted>
}
   24e8c:	46bd      	mov	sp, r7
   24e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   24e92:	6822      	ldr	r2, [r4, #0]
   24e94:	4631      	mov	r1, r6
   24e96:	4628      	mov	r0, r5
   24e98:	f7ed fa42 	bl	12320 <print_formatted>
		break;
   24e9c:	e7f6      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   24e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24ea2:	4631      	mov	r1, r6
   24ea4:	4628      	mov	r0, r5
   24ea6:	f7ed fa3b 	bl	12320 <print_formatted>
		break;
   24eaa:	e7ef      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   24eac:	68a3      	ldr	r3, [r4, #8]
   24eae:	9300      	str	r3, [sp, #0]
   24eb0:	e9d4 2300 	ldrd	r2, r3, [r4]
   24eb4:	4631      	mov	r1, r6
   24eb6:	4628      	mov	r0, r5
   24eb8:	f7ed fa32 	bl	12320 <print_formatted>
		break;
   24ebc:	e7e6      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24ebe:	68e3      	ldr	r3, [r4, #12]
   24ec0:	9301      	str	r3, [sp, #4]
   24ec2:	68a3      	ldr	r3, [r4, #8]
   24ec4:	9300      	str	r3, [sp, #0]
   24ec6:	e9d4 2300 	ldrd	r2, r3, [r4]
   24eca:	4631      	mov	r1, r6
   24ecc:	4628      	mov	r0, r5
   24ece:	f7ed fa27 	bl	12320 <print_formatted>
		break;
   24ed2:	e7db      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24ed4:	6923      	ldr	r3, [r4, #16]
   24ed6:	9302      	str	r3, [sp, #8]
   24ed8:	68e3      	ldr	r3, [r4, #12]
   24eda:	9301      	str	r3, [sp, #4]
   24edc:	68a3      	ldr	r3, [r4, #8]
   24ede:	9300      	str	r3, [sp, #0]
   24ee0:	e9d4 2300 	ldrd	r2, r3, [r4]
   24ee4:	4631      	mov	r1, r6
   24ee6:	4628      	mov	r0, r5
   24ee8:	f7ed fa1a 	bl	12320 <print_formatted>
		break;
   24eec:	e7ce      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24eee:	6963      	ldr	r3, [r4, #20]
   24ef0:	9303      	str	r3, [sp, #12]
   24ef2:	6923      	ldr	r3, [r4, #16]
   24ef4:	9302      	str	r3, [sp, #8]
   24ef6:	68e3      	ldr	r3, [r4, #12]
   24ef8:	9301      	str	r3, [sp, #4]
   24efa:	68a3      	ldr	r3, [r4, #8]
   24efc:	9300      	str	r3, [sp, #0]
   24efe:	e9d4 2300 	ldrd	r2, r3, [r4]
   24f02:	4631      	mov	r1, r6
   24f04:	4628      	mov	r0, r5
   24f06:	f7ed fa0b 	bl	12320 <print_formatted>
		break;
   24f0a:	e7bf      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24f0c:	69a3      	ldr	r3, [r4, #24]
   24f0e:	9304      	str	r3, [sp, #16]
   24f10:	6963      	ldr	r3, [r4, #20]
   24f12:	9303      	str	r3, [sp, #12]
   24f14:	6923      	ldr	r3, [r4, #16]
   24f16:	9302      	str	r3, [sp, #8]
   24f18:	68e3      	ldr	r3, [r4, #12]
   24f1a:	9301      	str	r3, [sp, #4]
   24f1c:	68a3      	ldr	r3, [r4, #8]
   24f1e:	9300      	str	r3, [sp, #0]
   24f20:	e9d4 2300 	ldrd	r2, r3, [r4]
   24f24:	4631      	mov	r1, r6
   24f26:	4628      	mov	r0, r5
   24f28:	f7ed f9fa 	bl	12320 <print_formatted>
		break;
   24f2c:	e7ae      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24f2e:	69e3      	ldr	r3, [r4, #28]
   24f30:	9305      	str	r3, [sp, #20]
   24f32:	69a3      	ldr	r3, [r4, #24]
   24f34:	9304      	str	r3, [sp, #16]
   24f36:	6963      	ldr	r3, [r4, #20]
   24f38:	9303      	str	r3, [sp, #12]
   24f3a:	6923      	ldr	r3, [r4, #16]
   24f3c:	9302      	str	r3, [sp, #8]
   24f3e:	68e3      	ldr	r3, [r4, #12]
   24f40:	9301      	str	r3, [sp, #4]
   24f42:	68a3      	ldr	r3, [r4, #8]
   24f44:	9300      	str	r3, [sp, #0]
   24f46:	e9d4 2300 	ldrd	r2, r3, [r4]
   24f4a:	4631      	mov	r1, r6
   24f4c:	4628      	mov	r0, r5
   24f4e:	f7ed f9e7 	bl	12320 <print_formatted>
		break;
   24f52:	e79b      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24f54:	6a23      	ldr	r3, [r4, #32]
   24f56:	9306      	str	r3, [sp, #24]
   24f58:	69e3      	ldr	r3, [r4, #28]
   24f5a:	9305      	str	r3, [sp, #20]
   24f5c:	69a3      	ldr	r3, [r4, #24]
   24f5e:	9304      	str	r3, [sp, #16]
   24f60:	6963      	ldr	r3, [r4, #20]
   24f62:	9303      	str	r3, [sp, #12]
   24f64:	6923      	ldr	r3, [r4, #16]
   24f66:	9302      	str	r3, [sp, #8]
   24f68:	68e3      	ldr	r3, [r4, #12]
   24f6a:	9301      	str	r3, [sp, #4]
   24f6c:	68a3      	ldr	r3, [r4, #8]
   24f6e:	9300      	str	r3, [sp, #0]
   24f70:	e9d4 2300 	ldrd	r2, r3, [r4]
   24f74:	4631      	mov	r1, r6
   24f76:	4628      	mov	r0, r5
   24f78:	f7ed f9d2 	bl	12320 <print_formatted>
		break;
   24f7c:	e786      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24f80:	9307      	str	r3, [sp, #28]
   24f82:	6a23      	ldr	r3, [r4, #32]
   24f84:	9306      	str	r3, [sp, #24]
   24f86:	69e3      	ldr	r3, [r4, #28]
   24f88:	9305      	str	r3, [sp, #20]
   24f8a:	69a3      	ldr	r3, [r4, #24]
   24f8c:	9304      	str	r3, [sp, #16]
   24f8e:	6963      	ldr	r3, [r4, #20]
   24f90:	9303      	str	r3, [sp, #12]
   24f92:	6923      	ldr	r3, [r4, #16]
   24f94:	9302      	str	r3, [sp, #8]
   24f96:	68e3      	ldr	r3, [r4, #12]
   24f98:	9301      	str	r3, [sp, #4]
   24f9a:	68a3      	ldr	r3, [r4, #8]
   24f9c:	9300      	str	r3, [sp, #0]
   24f9e:	e9d4 2300 	ldrd	r2, r3, [r4]
   24fa2:	4631      	mov	r1, r6
   24fa4:	4628      	mov	r0, r5
   24fa6:	f7ed f9bb 	bl	12320 <print_formatted>
		break;
   24faa:	e76f      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24fac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24fae:	9308      	str	r3, [sp, #32]
   24fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24fb2:	9307      	str	r3, [sp, #28]
   24fb4:	6a23      	ldr	r3, [r4, #32]
   24fb6:	9306      	str	r3, [sp, #24]
   24fb8:	69e3      	ldr	r3, [r4, #28]
   24fba:	9305      	str	r3, [sp, #20]
   24fbc:	69a3      	ldr	r3, [r4, #24]
   24fbe:	9304      	str	r3, [sp, #16]
   24fc0:	6963      	ldr	r3, [r4, #20]
   24fc2:	9303      	str	r3, [sp, #12]
   24fc4:	6923      	ldr	r3, [r4, #16]
   24fc6:	9302      	str	r3, [sp, #8]
   24fc8:	68e3      	ldr	r3, [r4, #12]
   24fca:	9301      	str	r3, [sp, #4]
   24fcc:	68a3      	ldr	r3, [r4, #8]
   24fce:	9300      	str	r3, [sp, #0]
   24fd0:	e9d4 2300 	ldrd	r2, r3, [r4]
   24fd4:	4631      	mov	r1, r6
   24fd6:	4628      	mov	r0, r5
   24fd8:	f7ed f9a2 	bl	12320 <print_formatted>
		break;
   24fdc:	e756      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   24fde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24fe0:	9309      	str	r3, [sp, #36]	; 0x24
   24fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24fe4:	9308      	str	r3, [sp, #32]
   24fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24fe8:	9307      	str	r3, [sp, #28]
   24fea:	6a23      	ldr	r3, [r4, #32]
   24fec:	9306      	str	r3, [sp, #24]
   24fee:	69e3      	ldr	r3, [r4, #28]
   24ff0:	9305      	str	r3, [sp, #20]
   24ff2:	69a3      	ldr	r3, [r4, #24]
   24ff4:	9304      	str	r3, [sp, #16]
   24ff6:	6963      	ldr	r3, [r4, #20]
   24ff8:	9303      	str	r3, [sp, #12]
   24ffa:	6923      	ldr	r3, [r4, #16]
   24ffc:	9302      	str	r3, [sp, #8]
   24ffe:	68e3      	ldr	r3, [r4, #12]
   25000:	9301      	str	r3, [sp, #4]
   25002:	68a3      	ldr	r3, [r4, #8]
   25004:	9300      	str	r3, [sp, #0]
   25006:	e9d4 2300 	ldrd	r2, r3, [r4]
   2500a:	4631      	mov	r1, r6
   2500c:	4628      	mov	r0, r5
   2500e:	f7ed f987 	bl	12320 <print_formatted>
		break;
   25012:	e73b      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25014:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25016:	930a      	str	r3, [sp, #40]	; 0x28
   25018:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2501a:	9309      	str	r3, [sp, #36]	; 0x24
   2501c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2501e:	9308      	str	r3, [sp, #32]
   25020:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25022:	9307      	str	r3, [sp, #28]
   25024:	6a23      	ldr	r3, [r4, #32]
   25026:	9306      	str	r3, [sp, #24]
   25028:	69e3      	ldr	r3, [r4, #28]
   2502a:	9305      	str	r3, [sp, #20]
   2502c:	69a3      	ldr	r3, [r4, #24]
   2502e:	9304      	str	r3, [sp, #16]
   25030:	6963      	ldr	r3, [r4, #20]
   25032:	9303      	str	r3, [sp, #12]
   25034:	6923      	ldr	r3, [r4, #16]
   25036:	9302      	str	r3, [sp, #8]
   25038:	68e3      	ldr	r3, [r4, #12]
   2503a:	9301      	str	r3, [sp, #4]
   2503c:	68a3      	ldr	r3, [r4, #8]
   2503e:	9300      	str	r3, [sp, #0]
   25040:	e9d4 2300 	ldrd	r2, r3, [r4]
   25044:	4631      	mov	r1, r6
   25046:	4628      	mov	r0, r5
   25048:	f7ed f96a 	bl	12320 <print_formatted>
		break;
   2504c:	e71e      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2504e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25050:	930b      	str	r3, [sp, #44]	; 0x2c
   25052:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25054:	930a      	str	r3, [sp, #40]	; 0x28
   25056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25058:	9309      	str	r3, [sp, #36]	; 0x24
   2505a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2505c:	9308      	str	r3, [sp, #32]
   2505e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25060:	9307      	str	r3, [sp, #28]
   25062:	6a23      	ldr	r3, [r4, #32]
   25064:	9306      	str	r3, [sp, #24]
   25066:	69e3      	ldr	r3, [r4, #28]
   25068:	9305      	str	r3, [sp, #20]
   2506a:	69a3      	ldr	r3, [r4, #24]
   2506c:	9304      	str	r3, [sp, #16]
   2506e:	6963      	ldr	r3, [r4, #20]
   25070:	9303      	str	r3, [sp, #12]
   25072:	6923      	ldr	r3, [r4, #16]
   25074:	9302      	str	r3, [sp, #8]
   25076:	68e3      	ldr	r3, [r4, #12]
   25078:	9301      	str	r3, [sp, #4]
   2507a:	68a3      	ldr	r3, [r4, #8]
   2507c:	9300      	str	r3, [sp, #0]
   2507e:	e9d4 2300 	ldrd	r2, r3, [r4]
   25082:	4631      	mov	r1, r6
   25084:	4628      	mov	r0, r5
   25086:	f7ed f94b 	bl	12320 <print_formatted>
		break;
   2508a:	e6ff      	b.n	24e8c <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2508c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2508e:	930c      	str	r3, [sp, #48]	; 0x30
   25090:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25092:	930b      	str	r3, [sp, #44]	; 0x2c
   25094:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25096:	930a      	str	r3, [sp, #40]	; 0x28
   25098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2509a:	9309      	str	r3, [sp, #36]	; 0x24
   2509c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2509e:	9308      	str	r3, [sp, #32]
   250a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   250a2:	9307      	str	r3, [sp, #28]
   250a4:	6a23      	ldr	r3, [r4, #32]
   250a6:	9306      	str	r3, [sp, #24]
   250a8:	69e3      	ldr	r3, [r4, #28]
   250aa:	9305      	str	r3, [sp, #20]
   250ac:	69a3      	ldr	r3, [r4, #24]
   250ae:	9304      	str	r3, [sp, #16]
   250b0:	6963      	ldr	r3, [r4, #20]
   250b2:	9303      	str	r3, [sp, #12]
   250b4:	6923      	ldr	r3, [r4, #16]
   250b6:	9302      	str	r3, [sp, #8]
   250b8:	68e3      	ldr	r3, [r4, #12]
   250ba:	9301      	str	r3, [sp, #4]
   250bc:	68a3      	ldr	r3, [r4, #8]
   250be:	9300      	str	r3, [sp, #0]
   250c0:	e9d4 2300 	ldrd	r2, r3, [r4]
   250c4:	4631      	mov	r1, r6
   250c6:	4628      	mov	r0, r5
   250c8:	f7ed f92a 	bl	12320 <print_formatted>
}
   250cc:	e6de      	b.n	24e8c <std_print+0x78>

000250ce <log_output_flush>:
		     output->control_block->offset,
   250ce:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   250d0:	6881      	ldr	r1, [r0, #8]
{
   250d2:	b510      	push	{r4, lr}
   250d4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   250d6:	e9d2 2300 	ldrd	r2, r3, [r2]
   250da:	6800      	ldr	r0, [r0, #0]
   250dc:	f7ff fe8d 	bl	24dfa <buffer_write>
	output->control_block->offset = 0;
   250e0:	6863      	ldr	r3, [r4, #4]
   250e2:	2200      	movs	r2, #0
   250e4:	601a      	str	r2, [r3, #0]
}
   250e6:	bd10      	pop	{r4, pc}

000250e8 <settings_delete>:

int settings_delete(const char *name)
{
	return settings_save_one(name, NULL, 0);
   250e8:	2200      	movs	r2, #0
   250ea:	4611      	mov	r1, r2
   250ec:	f7ed bbe6 	b.w	128bc <settings_save_one>

000250f0 <settings_name_steq>:
	return rc;
}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

int settings_name_steq(const char *name, const char *key, const char **next)
{
   250f0:	4603      	mov	r3, r0
   250f2:	b530      	push	{r4, r5, lr}
   250f4:	4608      	mov	r0, r1
	if (next) {
   250f6:	b10a      	cbz	r2, 250fc <settings_name_steq+0xc>
		*next = NULL;
   250f8:	2100      	movs	r1, #0
   250fa:	6011      	str	r1, [r2, #0]
	}

	if ((!name) || (!key)) {
   250fc:	b163      	cbz	r3, 25118 <settings_name_steq+0x28>
   250fe:	b190      	cbz	r0, 25126 <settings_name_steq+0x36>
   25100:	1e41      	subs	r1, r0, #1
   25102:	4618      	mov	r0, r3
	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */

	while ((*key != '\0') && (*key == *name) &&
   25104:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   25108:	4604      	mov	r4, r0
   2510a:	f810 3b01 	ldrb.w	r3, [r0], #1
   2510e:	b15d      	cbz	r5, 25128 <settings_name_steq+0x38>
   25110:	429d      	cmp	r5, r3
   25112:	d101      	bne.n	25118 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   25114:	2d3d      	cmp	r5, #61	; 0x3d
   25116:	d1f5      	bne.n	25104 <settings_name_steq+0x14>

	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
		return 1;
	}

	return 0;
   25118:	2000      	movs	r0, #0
   2511a:	e004      	b.n	25126 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2511c:	2b3d      	cmp	r3, #61	; 0x3d
   2511e:	d008      	beq.n	25132 <settings_name_steq+0x42>
   25120:	fab3 f083 	clz	r0, r3
   25124:	0940      	lsrs	r0, r0, #5
}
   25126:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   25128:	2b2f      	cmp	r3, #47	; 0x2f
   2512a:	d1f7      	bne.n	2511c <settings_name_steq+0x2c>
		if (next) {
   2512c:	b10a      	cbz	r2, 25132 <settings_name_steq+0x42>
			*next = name + 1;
   2512e:	3401      	adds	r4, #1
   25130:	6014      	str	r4, [r2, #0]
		return 1;
   25132:	2001      	movs	r0, #1
   25134:	e7f7      	b.n	25126 <settings_name_steq+0x36>

00025136 <settings_name_next>:

int settings_name_next(const char *name, const char **next)
{
   25136:	b530      	push	{r4, r5, lr}
   25138:	4603      	mov	r3, r0
	int rc = 0;

	if (next) {
   2513a:	b109      	cbz	r1, 25140 <settings_name_next+0xa>
		*next = NULL;
   2513c:	2200      	movs	r2, #0
   2513e:	600a      	str	r2, [r1, #0]
	}

	if (!name) {
   25140:	b16b      	cbz	r3, 2515e <settings_name_next+0x28>
   25142:	461a      	mov	r2, r3
   25144:	4614      	mov	r4, r2
   25146:	1ad0      	subs	r0, r2, r3

	/* name might come from flash directly, in flash the name would end
	 * with '=' or '\0' depending how storage is done. Flash reading is
	 * limited to what can be read
	 */
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   25148:	f812 5b01 	ldrb.w	r5, [r2], #1
   2514c:	b135      	cbz	r5, 2515c <settings_name_next+0x26>
   2514e:	2d3d      	cmp	r5, #61	; 0x3d
   25150:	d004      	beq.n	2515c <settings_name_next+0x26>
   25152:	2d2f      	cmp	r5, #47	; 0x2f
   25154:	d1f6      	bne.n	25144 <settings_name_next+0xe>
		rc++;
		name++;
	}

	if (*name == SETTINGS_NAME_SEPARATOR) {
		if (next) {
   25156:	b109      	cbz	r1, 2515c <settings_name_next+0x26>
			*next = name + 1;
   25158:	3401      	adds	r4, #1
   2515a:	600c      	str	r4, [r1, #0]
		}
		return rc;
	}

	return rc;
}
   2515c:	bd30      	pop	{r4, r5, pc}
		return 0;
   2515e:	4618      	mov	r0, r3
   25160:	e7fc      	b.n	2515c <settings_name_next+0x26>

00025162 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   25162:	2200      	movs	r2, #0
   25164:	e9c0 2200 	strd	r2, r2, [r0]
   25168:	6082      	str	r2, [r0, #8]
}
   2516a:	4770      	bx	lr

0002516c <attr_find_by_handle>:
{
   2516c:	b570      	push	{r4, r5, r6, lr}
   2516e:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   25170:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   25174:	b1a8      	cbz	r0, 251a2 <attr_find_by_handle+0x36>
	ssize_t upper = dm->cur_attr_id - 1;
   25176:	3801      	subs	r0, #1
	ssize_t lower = 0;
   25178:	2600      	movs	r6, #0
	while (upper >= lower) {
   2517a:	4286      	cmp	r6, r0
   2517c:	dd01      	ble.n	25182 <attr_find_by_handle+0x16>
		return NULL;
   2517e:	2000      	movs	r0, #0
   25180:	e00f      	b.n	251a2 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   25182:	1832      	adds	r2, r6, r0
   25184:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   25188:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   2518a:	1cd5      	adds	r5, r2, #3
   2518c:	00eb      	lsls	r3, r5, #3
   2518e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   25192:	892d      	ldrh	r5, [r5, #8]
   25194:	428d      	cmp	r5, r1
   25196:	d201      	bcs.n	2519c <attr_find_by_handle+0x30>
			lower = m + 1;
   25198:	1c56      	adds	r6, r2, #1
   2519a:	e7ee      	b.n	2517a <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   2519c:	d802      	bhi.n	251a4 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2519e:	3304      	adds	r3, #4
   251a0:	18e0      	adds	r0, r4, r3
}
   251a2:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   251a4:	1e50      	subs	r0, r2, #1
   251a6:	e7e8      	b.n	2517a <attr_find_by_handle+0xe>

000251a8 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   251a8:	2300      	movs	r3, #0
{
   251aa:	b510      	push	{r4, lr}
   251ac:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   251ae:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
Z_GENLIST_IS_EMPTY(slist)
   251b2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   251b6:	b910      	cbnz	r0, 251be <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   251b8:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   251bc:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   251be:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   251c2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   251c4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   251c8:	4290      	cmp	r0, r2
	list->tail = node;
   251ca:	bf08      	it	eq
   251cc:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   251d0:	f003 f862 	bl	28298 <k_free>
   251d4:	e7ed      	b.n	251b2 <svc_attr_memory_release+0xa>

000251d6 <atomic_and>:
{
   251d6:	4603      	mov	r3, r0
}
   251d8:	f3bf 8f5b 	dmb	ish
   251dc:	e853 0f00 	ldrex	r0, [r3]
   251e0:	ea00 0201 	and.w	r2, r0, r1
   251e4:	e843 2c00 	strex	ip, r2, [r3]
   251e8:	f1bc 0f00 	cmp.w	ip, #0
   251ec:	d1f6      	bne.n	251dc <atomic_and+0x6>
   251ee:	f3bf 8f5b 	dmb	ish
   251f2:	4770      	bx	lr

000251f4 <discovery_complete_not_found>:
{
   251f4:	b510      	push	{r4, lr}
   251f6:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   251f8:	f7ff ffd6 	bl	251a8 <svc_attr_memory_release>
   251fc:	f06f 0101 	mvn.w	r1, #1
   25200:	f504 709c 	add.w	r0, r4, #312	; 0x138
   25204:	f7ff ffe7 	bl	251d6 <atomic_and>
	if (dm->callback->service_not_found) {
   25208:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2520c:	685b      	ldr	r3, [r3, #4]
   2520e:	b123      	cbz	r3, 2521a <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   25210:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   25214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   25218:	4718      	bx	r3
}
   2521a:	bd10      	pop	{r4, pc}

0002521c <discovery_complete_error>:
{
   2521c:	b570      	push	{r4, r5, r6, lr}
   2521e:	4604      	mov	r4, r0
   25220:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   25222:	f7ff ffc1 	bl	251a8 <svc_attr_memory_release>
   25226:	f06f 0101 	mvn.w	r1, #1
   2522a:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2522e:	f7ff ffd2 	bl	251d6 <atomic_and>
	if (dm->callback->error_found) {
   25232:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   25236:	689b      	ldr	r3, [r3, #8]
   25238:	b12b      	cbz	r3, 25246 <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2523a:	6862      	ldr	r2, [r4, #4]
   2523c:	6820      	ldr	r0, [r4, #0]
   2523e:	4629      	mov	r1, r5
}
   25240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   25244:	4718      	bx	r3
}
   25246:	bd70      	pop	{r4, r5, r6, pc}

00025248 <bt_gatt_dm_attr_service_val>:
{
   25248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2524a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2524e:	6801      	ldr	r1, [r0, #0]
   25250:	f8ad 3002 	strh.w	r3, [sp, #2]
{
   25254:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   25256:	2400      	movs	r4, #0
   25258:	4668      	mov	r0, sp
   2525a:	f88d 4000 	strb.w	r4, [sp]
   2525e:	f000 fbf4 	bl	25a4a <bt_uuid_cmp>
   25262:	b918      	cbnz	r0, 2526c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   25264:	6828      	ldr	r0, [r5, #0]
   25266:	3808      	subs	r0, #8
}
   25268:	b003      	add	sp, #12
   2526a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2526c:	f642 0301 	movw	r3, #10241	; 0x2801
   25270:	6829      	ldr	r1, [r5, #0]
   25272:	f88d 4004 	strb.w	r4, [sp, #4]
   25276:	a801      	add	r0, sp, #4
   25278:	f8ad 3006 	strh.w	r3, [sp, #6]
   2527c:	f000 fbe5 	bl	25a4a <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   25280:	2800      	cmp	r0, #0
   25282:	d0ef      	beq.n	25264 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   25284:	4620      	mov	r0, r4
   25286:	e7ef      	b.n	25268 <bt_gatt_dm_attr_service_val+0x20>

00025288 <bt_gatt_dm_attr_chrc_val>:
{
   25288:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2528a:	f642 0303 	movw	r3, #10243	; 0x2803
   2528e:	6801      	ldr	r1, [r0, #0]
   25290:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   25294:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   25296:	2400      	movs	r4, #0
   25298:	a801      	add	r0, sp, #4
   2529a:	f88d 4004 	strb.w	r4, [sp, #4]
   2529e:	f000 fbd4 	bl	25a4a <bt_uuid_cmp>
   252a2:	b918      	cbnz	r0, 252ac <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   252a4:	6828      	ldr	r0, [r5, #0]
   252a6:	3808      	subs	r0, #8
}
   252a8:	b003      	add	sp, #12
   252aa:	bd30      	pop	{r4, r5, pc}
	return NULL;
   252ac:	4620      	mov	r0, r4
   252ae:	e7fb      	b.n	252a8 <bt_gatt_dm_attr_chrc_val+0x20>

000252b0 <bt_gatt_dm_conn_get>:
}
   252b0:	6800      	ldr	r0, [r0, #0]
   252b2:	4770      	bx	lr

000252b4 <bt_gatt_dm_service_get>:
}
   252b4:	301c      	adds	r0, #28
   252b6:	4770      	bx	lr

000252b8 <bt_gatt_dm_char_next>:
{
   252b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   252ba:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   252be:	b131      	cbz	r1, 252ce <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   252c0:	42a9      	cmp	r1, r5
   252c2:	d203      	bcs.n	252cc <bt_gatt_dm_char_next+0x14>
	return NULL;
   252c4:	2500      	movs	r5, #0
}
   252c6:	4628      	mov	r0, r5
   252c8:	b003      	add	sp, #12
   252ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   252cc:	460d      	mov	r5, r1
		const struct bt_gatt_dm_attr *const end =
   252ce:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   252d2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   252d6:	f100 041c 	add.w	r4, r0, #28
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   252da:	2600      	movs	r6, #0
   252dc:	f642 0703 	movw	r7, #10243	; 0x2803
		while (++prev < end) {
   252e0:	3508      	adds	r5, #8
   252e2:	42ac      	cmp	r4, r5
   252e4:	d9ee      	bls.n	252c4 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   252e6:	6829      	ldr	r1, [r5, #0]
   252e8:	f88d 6004 	strb.w	r6, [sp, #4]
   252ec:	a801      	add	r0, sp, #4
   252ee:	f8ad 7006 	strh.w	r7, [sp, #6]
   252f2:	f000 fbaa 	bl	25a4a <bt_uuid_cmp>
   252f6:	2800      	cmp	r0, #0
   252f8:	d1f2      	bne.n	252e0 <bt_gatt_dm_char_next+0x28>
   252fa:	e7e4      	b.n	252c6 <bt_gatt_dm_char_next+0xe>

000252fc <bt_gatt_dm_attr_next>:
{
   252fc:	4602      	mov	r2, r0
   252fe:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   25302:	b111      	cbz	r1, 2530a <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   25304:	4299      	cmp	r1, r3
   25306:	d30b      	bcc.n	25320 <bt_gatt_dm_attr_next+0x24>
   25308:	460b      	mov	r3, r1
		if (++prev < end) {
   2530a:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   2530e:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   25312:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   25316:	321c      	adds	r2, #28
	return NULL;
   25318:	4290      	cmp	r0, r2
   2531a:	bf28      	it	cs
   2531c:	2000      	movcs	r0, #0
   2531e:	4770      	bx	lr
   25320:	2000      	movs	r0, #0
}
   25322:	4770      	bx	lr

00025324 <bt_gatt_dm_desc_next>:
{
   25324:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   25326:	f7ff ffe9 	bl	252fc <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2532a:	4604      	mov	r4, r0
   2532c:	b158      	cbz	r0, 25346 <bt_gatt_dm_desc_next+0x22>
   2532e:	2300      	movs	r3, #0
   25330:	f88d 3004 	strb.w	r3, [sp, #4]
   25334:	6801      	ldr	r1, [r0, #0]
   25336:	f642 0303 	movw	r3, #10243	; 0x2803
   2533a:	a801      	add	r0, sp, #4
   2533c:	f8ad 3006 	strh.w	r3, [sp, #6]
   25340:	f000 fb83 	bl	25a4a <bt_uuid_cmp>
   25344:	b900      	cbnz	r0, 25348 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   25346:	2400      	movs	r4, #0
}
   25348:	4620      	mov	r0, r4
   2534a:	b002      	add	sp, #8
   2534c:	bd10      	pop	{r4, pc}

0002534e <bt_gatt_dm_desc_by_uuid>:
{
   2534e:	b570      	push	{r4, r5, r6, lr}
   25350:	4605      	mov	r5, r0
   25352:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   25354:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   25356:	4621      	mov	r1, r4
   25358:	4628      	mov	r0, r5
   2535a:	f7ff ffe3 	bl	25324 <bt_gatt_dm_desc_next>
   2535e:	4604      	mov	r4, r0
   25360:	b128      	cbz	r0, 2536e <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   25362:	6821      	ldr	r1, [r4, #0]
   25364:	4630      	mov	r0, r6
   25366:	f000 fb70 	bl	25a4a <bt_uuid_cmp>
   2536a:	2800      	cmp	r0, #0
   2536c:	d1f3      	bne.n	25356 <bt_gatt_dm_desc_by_uuid+0x8>
}
   2536e:	4620      	mov	r0, r4
   25370:	bd70      	pop	{r4, r5, r6, pc}

00025372 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   25372:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   25374:	f500 749c 	add.w	r4, r0, #312	; 0x138
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25378:	f3bf 8f5b 	dmb	ish
   2537c:	e854 3f00 	ldrex	r3, [r4]
   25380:	f023 0202 	bic.w	r2, r3, #2
   25384:	e844 2100 	strex	r1, r2, [r4]
   25388:	2900      	cmp	r1, #0
   2538a:	d1f7      	bne.n	2537c <bt_gatt_dm_data_release+0xa>
   2538c:	f3bf 8f5b 	dmb	ish
   25390:	079b      	lsls	r3, r3, #30
   25392:	d508      	bpl.n	253a6 <bt_gatt_dm_data_release+0x34>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   25394:	f7ff ff08 	bl	251a8 <svc_attr_memory_release>
   25398:	f06f 0101 	mvn.w	r1, #1
   2539c:	4620      	mov	r0, r4
   2539e:	f7ff ff1a 	bl	251d6 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   253a2:	2000      	movs	r0, #0
}
   253a4:	bd10      	pop	{r4, pc}
		return -EALREADY;
   253a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   253aa:	e7fb      	b.n	253a4 <bt_gatt_dm_data_release+0x32>

000253ac <bt_scan_stop>:
	return bt_le_scan_stop();
   253ac:	f7f0 bb7e 	b.w	15aac <bt_le_scan_stop>

000253b0 <on_received>:
{
   253b0:	b570      	push	{r4, r5, r6, lr}
   253b2:	4615      	mov	r5, r2
   253b4:	460c      	mov	r4, r1
   253b6:	461a      	mov	r2, r3
	nus = CONTAINER_OF(params, struct bt_nus_client, tx_notif_params);
   253b8:	f1a1 0010 	sub.w	r0, r1, #16
	if (!data) {
   253bc:	b99d      	cbnz	r5, 253e6 <on_received+0x36>
		params->value_handle = 0;
   253be:	810d      	strh	r5, [r1, #8]
   253c0:	f1a1 030c 	sub.w	r3, r1, #12
   253c4:	f3bf 8f5b 	dmb	ish
   253c8:	e853 2f00 	ldrex	r2, [r3]
   253cc:	f022 0202 	bic.w	r2, r2, #2
   253d0:	e843 2100 	strex	r1, r2, [r3]
   253d4:	2900      	cmp	r1, #0
   253d6:	d1f7      	bne.n	253c8 <on_received+0x18>
   253d8:	f3bf 8f5b 	dmb	ish
		if (nus->cb.unsubscribed) {
   253dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   253de:	b143      	cbz	r3, 253f2 <on_received+0x42>
			nus->cb.unsubscribed(nus);
   253e0:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   253e2:	4628      	mov	r0, r5
}
   253e4:	bd70      	pop	{r4, r5, r6, pc}
	if (nus->cb.received) {
   253e6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   253e8:	b12b      	cbz	r3, 253f6 <on_received+0x46>
		return nus->cb.received(nus, data, length);
   253ea:	4629      	mov	r1, r5
}
   253ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return nus->cb.received(nus, data, length);
   253f0:	4718      	bx	r3
		return BT_GATT_ITER_STOP;
   253f2:	4618      	mov	r0, r3
   253f4:	e7f6      	b.n	253e4 <on_received+0x34>
	return BT_GATT_ITER_CONTINUE;
   253f6:	2001      	movs	r0, #1
   253f8:	e7f4      	b.n	253e4 <on_received+0x34>

000253fa <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   253fa:	b538      	push	{r3, r4, r5, lr}
   253fc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   253fe:	42ab      	cmp	r3, r5
{
   25400:	4611      	mov	r1, r2
   25402:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   25404:	d804      	bhi.n	25410 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   25406:	461a      	mov	r2, r3
   25408:	f000 faac 	bl	25964 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2540c:	4620      	mov	r0, r4
   2540e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   25410:	2400      	movs	r4, #0
   25412:	e7fb      	b.n	2540c <_copy+0x12>

00025414 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   25414:	f000 bab1 	b.w	2597a <memset>

00025418 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   25418:	09c3      	lsrs	r3, r0, #7
   2541a:	005a      	lsls	r2, r3, #1
   2541c:	4413      	add	r3, r2
   2541e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   25422:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25426:	b2c0      	uxtb	r0, r0
   25428:	4770      	bx	lr

0002542a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2542a:	78cb      	ldrb	r3, [r1, #3]
   2542c:	7802      	ldrb	r2, [r0, #0]
   2542e:	4053      	eors	r3, r2
   25430:	7003      	strb	r3, [r0, #0]
   25432:	884b      	ldrh	r3, [r1, #2]
   25434:	7842      	ldrb	r2, [r0, #1]
   25436:	4053      	eors	r3, r2
   25438:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2543a:	680a      	ldr	r2, [r1, #0]
   2543c:	7883      	ldrb	r3, [r0, #2]
   2543e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25442:	7083      	strb	r3, [r0, #2]
   25444:	680a      	ldr	r2, [r1, #0]
   25446:	78c3      	ldrb	r3, [r0, #3]
   25448:	4053      	eors	r3, r2
   2544a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2544c:	79cb      	ldrb	r3, [r1, #7]
   2544e:	7902      	ldrb	r2, [r0, #4]
   25450:	4053      	eors	r3, r2
   25452:	7103      	strb	r3, [r0, #4]
   25454:	88cb      	ldrh	r3, [r1, #6]
   25456:	7942      	ldrb	r2, [r0, #5]
   25458:	4053      	eors	r3, r2
   2545a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2545c:	684a      	ldr	r2, [r1, #4]
   2545e:	7983      	ldrb	r3, [r0, #6]
   25460:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25464:	7183      	strb	r3, [r0, #6]
   25466:	684a      	ldr	r2, [r1, #4]
   25468:	79c3      	ldrb	r3, [r0, #7]
   2546a:	4053      	eors	r3, r2
   2546c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2546e:	7acb      	ldrb	r3, [r1, #11]
   25470:	7a02      	ldrb	r2, [r0, #8]
   25472:	4053      	eors	r3, r2
   25474:	7203      	strb	r3, [r0, #8]
   25476:	7a42      	ldrb	r2, [r0, #9]
   25478:	894b      	ldrh	r3, [r1, #10]
   2547a:	4053      	eors	r3, r2
   2547c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2547e:	688a      	ldr	r2, [r1, #8]
   25480:	7a83      	ldrb	r3, [r0, #10]
   25482:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25486:	7283      	strb	r3, [r0, #10]
   25488:	688a      	ldr	r2, [r1, #8]
   2548a:	7ac3      	ldrb	r3, [r0, #11]
   2548c:	4053      	eors	r3, r2
   2548e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   25490:	7bcb      	ldrb	r3, [r1, #15]
   25492:	7b02      	ldrb	r2, [r0, #12]
   25494:	4053      	eors	r3, r2
   25496:	7303      	strb	r3, [r0, #12]
   25498:	89cb      	ldrh	r3, [r1, #14]
   2549a:	7b42      	ldrb	r2, [r0, #13]
   2549c:	4053      	eors	r3, r2
   2549e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   254a0:	68ca      	ldr	r2, [r1, #12]
   254a2:	7b83      	ldrb	r3, [r0, #14]
   254a4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   254a8:	7383      	strb	r3, [r0, #14]
   254aa:	68ca      	ldr	r2, [r1, #12]
   254ac:	7bc3      	ldrb	r3, [r0, #15]
   254ae:	4053      	eors	r3, r2
   254b0:	73c3      	strb	r3, [r0, #15]
}
   254b2:	4770      	bx	lr

000254b4 <shift_rows>:
{
   254b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   254b6:	7802      	ldrb	r2, [r0, #0]
   254b8:	f88d 2000 	strb.w	r2, [sp]
   254bc:	7942      	ldrb	r2, [r0, #5]
   254be:	f88d 2001 	strb.w	r2, [sp, #1]
   254c2:	7a82      	ldrb	r2, [r0, #10]
   254c4:	f88d 2002 	strb.w	r2, [sp, #2]
   254c8:	7bc2      	ldrb	r2, [r0, #15]
   254ca:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   254ce:	7902      	ldrb	r2, [r0, #4]
   254d0:	f88d 2004 	strb.w	r2, [sp, #4]
   254d4:	7a42      	ldrb	r2, [r0, #9]
   254d6:	f88d 2005 	strb.w	r2, [sp, #5]
   254da:	7b82      	ldrb	r2, [r0, #14]
   254dc:	f88d 2006 	strb.w	r2, [sp, #6]
   254e0:	78c2      	ldrb	r2, [r0, #3]
   254e2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   254e6:	7a02      	ldrb	r2, [r0, #8]
   254e8:	f88d 2008 	strb.w	r2, [sp, #8]
   254ec:	7b42      	ldrb	r2, [r0, #13]
   254ee:	f88d 2009 	strb.w	r2, [sp, #9]
   254f2:	7882      	ldrb	r2, [r0, #2]
   254f4:	f88d 200a 	strb.w	r2, [sp, #10]
   254f8:	79c2      	ldrb	r2, [r0, #7]
   254fa:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   254fe:	7b02      	ldrb	r2, [r0, #12]
   25500:	f88d 200c 	strb.w	r2, [sp, #12]
   25504:	7842      	ldrb	r2, [r0, #1]
   25506:	7ac3      	ldrb	r3, [r0, #11]
   25508:	f88d 200d 	strb.w	r2, [sp, #13]
   2550c:	7982      	ldrb	r2, [r0, #6]
   2550e:	f88d 200e 	strb.w	r2, [sp, #14]
   25512:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25516:	2310      	movs	r3, #16
   25518:	466a      	mov	r2, sp
   2551a:	4619      	mov	r1, r3
   2551c:	f7ff ff6d 	bl	253fa <_copy>
}
   25520:	b005      	add	sp, #20
   25522:	f85d fb04 	ldr.w	pc, [sp], #4

00025526 <mult_row_column>:
{
   25526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25528:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2552a:	7808      	ldrb	r0, [r1, #0]
{
   2552c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2552e:	f7ff ff73 	bl	25418 <_double_byte>
   25532:	4605      	mov	r5, r0
   25534:	7860      	ldrb	r0, [r4, #1]
   25536:	f7ff ff6f 	bl	25418 <_double_byte>
   2553a:	78a2      	ldrb	r2, [r4, #2]
   2553c:	7863      	ldrb	r3, [r4, #1]
   2553e:	4053      	eors	r3, r2
   25540:	78e2      	ldrb	r2, [r4, #3]
   25542:	4053      	eors	r3, r2
   25544:	405d      	eors	r5, r3
   25546:	4045      	eors	r5, r0
   25548:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2554a:	7860      	ldrb	r0, [r4, #1]
   2554c:	7827      	ldrb	r7, [r4, #0]
   2554e:	f7ff ff63 	bl	25418 <_double_byte>
   25552:	4605      	mov	r5, r0
   25554:	78a0      	ldrb	r0, [r4, #2]
   25556:	f7ff ff5f 	bl	25418 <_double_byte>
   2555a:	78a3      	ldrb	r3, [r4, #2]
   2555c:	405f      	eors	r7, r3
   2555e:	78e3      	ldrb	r3, [r4, #3]
   25560:	405f      	eors	r7, r3
   25562:	407d      	eors	r5, r7
   25564:	4045      	eors	r5, r0
   25566:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   25568:	78a0      	ldrb	r0, [r4, #2]
   2556a:	7865      	ldrb	r5, [r4, #1]
   2556c:	7827      	ldrb	r7, [r4, #0]
   2556e:	f7ff ff53 	bl	25418 <_double_byte>
   25572:	406f      	eors	r7, r5
   25574:	4605      	mov	r5, r0
   25576:	78e0      	ldrb	r0, [r4, #3]
   25578:	f7ff ff4e 	bl	25418 <_double_byte>
   2557c:	78e3      	ldrb	r3, [r4, #3]
   2557e:	405f      	eors	r7, r3
   25580:	407d      	eors	r5, r7
   25582:	4045      	eors	r5, r0
   25584:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   25586:	7820      	ldrb	r0, [r4, #0]
   25588:	f7ff ff46 	bl	25418 <_double_byte>
   2558c:	7863      	ldrb	r3, [r4, #1]
   2558e:	7825      	ldrb	r5, [r4, #0]
   25590:	405d      	eors	r5, r3
   25592:	78a3      	ldrb	r3, [r4, #2]
   25594:	405d      	eors	r5, r3
   25596:	4045      	eors	r5, r0
   25598:	78e0      	ldrb	r0, [r4, #3]
   2559a:	f7ff ff3d 	bl	25418 <_double_byte>
   2559e:	b2ed      	uxtb	r5, r5
   255a0:	4045      	eors	r5, r0
   255a2:	70f5      	strb	r5, [r6, #3]
}
   255a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000255a6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   255a6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   255a8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   255aa:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   255ac:	f912 3b10 	ldrsb.w	r3, [r2], #16
   255b0:	2b00      	cmp	r3, #0
   255b2:	bfb4      	ite	lt
   255b4:	2387      	movlt	r3, #135	; 0x87
   255b6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   255b8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   255bc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   255c0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   255c2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   255c6:	d002      	beq.n	255ce <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   255c8:	7813      	ldrb	r3, [r2, #0]
   255ca:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   255cc:	e7f4      	b.n	255b8 <gf_double+0x12>
	}
}
   255ce:	bd10      	pop	{r4, pc}

000255d0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   255d0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   255d2:	b120      	cbz	r0, 255de <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   255d4:	2258      	movs	r2, #88	; 0x58
   255d6:	2100      	movs	r1, #0
   255d8:	f7ff ff1c 	bl	25414 <_set>
   255dc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   255de:	bd08      	pop	{r3, pc}

000255e0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   255e0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   255e2:	4604      	mov	r4, r0
   255e4:	b188      	cbz	r0, 2560a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   255e6:	2210      	movs	r2, #16
   255e8:	2100      	movs	r1, #0
   255ea:	f7ff ff13 	bl	25414 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   255ee:	2210      	movs	r2, #16
   255f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   255f4:	2100      	movs	r1, #0
   255f6:	f7ff ff0d 	bl	25414 <_set>
	s->leftover_offset = 0;
   255fa:	2300      	movs	r3, #0
   255fc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   255fe:	2200      	movs	r2, #0
   25600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25604:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   25608:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2560a:	bd10      	pop	{r4, pc}

0002560c <tc_cmac_setup>:
{
   2560c:	b570      	push	{r4, r5, r6, lr}
   2560e:	460d      	mov	r5, r1
   25610:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   25612:	4604      	mov	r4, r0
   25614:	b310      	cbz	r0, 2565c <tc_cmac_setup+0x50>
   25616:	b311      	cbz	r1, 2565e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   25618:	2258      	movs	r2, #88	; 0x58
   2561a:	2100      	movs	r1, #0
   2561c:	f7ff fefa 	bl	25414 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   25620:	4629      	mov	r1, r5
	s->sched = sched;
   25622:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   25624:	4630      	mov	r0, r6
   25626:	f7ee f8dd 	bl	137e4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2562a:	2210      	movs	r2, #16
   2562c:	2100      	movs	r1, #0
   2562e:	4620      	mov	r0, r4
   25630:	f7ff fef0 	bl	25414 <_set>
	gf_double (s->K1, s->iv);
   25634:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   25638:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2563a:	4621      	mov	r1, r4
   2563c:	4620      	mov	r0, r4
   2563e:	f7ee f923 	bl	13888 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   25642:	4621      	mov	r1, r4
   25644:	4628      	mov	r0, r5
   25646:	f7ff ffae 	bl	255a6 <gf_double>
	gf_double (s->K2, s->K1);
   2564a:	4629      	mov	r1, r5
   2564c:	f104 0020 	add.w	r0, r4, #32
   25650:	f7ff ffa9 	bl	255a6 <gf_double>
	tc_cmac_init(s);
   25654:	4620      	mov	r0, r4
   25656:	f7ff ffc3 	bl	255e0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2565a:	2001      	movs	r0, #1
}
   2565c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2565e:	4608      	mov	r0, r1
   25660:	e7fc      	b.n	2565c <tc_cmac_setup+0x50>

00025662 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   25662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25666:	460d      	mov	r5, r1
   25668:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2566a:	4604      	mov	r4, r0
   2566c:	2800      	cmp	r0, #0
   2566e:	d062      	beq.n	25736 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   25670:	b912      	cbnz	r2, 25678 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   25672:	2001      	movs	r0, #1
}
   25674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   25678:	2900      	cmp	r1, #0
   2567a:	d05c      	beq.n	25736 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2567c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   25680:	ea50 0301 	orrs.w	r3, r0, r1
   25684:	d057      	beq.n	25736 <tc_cmac_update+0xd4>
	s->countdown--;
   25686:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2568a:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2568e:	f141 33ff 	adc.w	r3, r1, #4294967295
   25692:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   25696:	f1b8 0f00 	cmp.w	r8, #0
   2569a:	d02a      	beq.n	256f2 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2569c:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   256a0:	f108 0030 	add.w	r0, r8, #48	; 0x30
   256a4:	42be      	cmp	r6, r7
   256a6:	4420      	add	r0, r4
   256a8:	d208      	bcs.n	256bc <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   256aa:	462a      	mov	r2, r5
   256ac:	4633      	mov	r3, r6
   256ae:	4631      	mov	r1, r6
   256b0:	f7ff fea3 	bl	253fa <_copy>
			s->leftover_offset += data_length;
   256b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   256b6:	4432      	add	r2, r6
   256b8:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   256ba:	e7da      	b.n	25672 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   256bc:	463b      	mov	r3, r7
   256be:	462a      	mov	r2, r5
   256c0:	4639      	mov	r1, r7
   256c2:	f7ff fe9a 	bl	253fa <_copy>
		data_length -= remaining_space;
   256c6:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   256c8:	2300      	movs	r3, #0
   256ca:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   256cc:	4446      	add	r6, r8
		data += remaining_space;
   256ce:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   256d0:	1e63      	subs	r3, r4, #1
   256d2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   256d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   256da:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   256de:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   256e0:	ea82 0200 	eor.w	r2, r2, r0
   256e4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   256e6:	d1f6      	bne.n	256d6 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   256e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   256ea:	4621      	mov	r1, r4
   256ec:	4620      	mov	r0, r4
   256ee:	f7ee f8cb 	bl	13888 <tc_aes_encrypt>
   256f2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   256f6:	2e10      	cmp	r6, #16
   256f8:	d80a      	bhi.n	25710 <tc_cmac_update+0xae>
	if (data_length > 0) {
   256fa:	2e00      	cmp	r6, #0
   256fc:	d0b9      	beq.n	25672 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   256fe:	4633      	mov	r3, r6
   25700:	462a      	mov	r2, r5
   25702:	4631      	mov	r1, r6
   25704:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25708:	f7ff fe77 	bl	253fa <_copy>
		s->leftover_offset = data_length;
   2570c:	6466      	str	r6, [r4, #68]	; 0x44
   2570e:	e7b0      	b.n	25672 <tc_cmac_update+0x10>
   25710:	1e63      	subs	r3, r4, #1
   25712:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   25714:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2571c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2571e:	ea82 0200 	eor.w	r2, r2, r0
   25722:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25724:	d1f6      	bne.n	25714 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25726:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25728:	4621      	mov	r1, r4
   2572a:	4620      	mov	r0, r4
   2572c:	f7ee f8ac 	bl	13888 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   25730:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   25732:	3e10      	subs	r6, #16
   25734:	e7df      	b.n	256f6 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   25736:	2000      	movs	r0, #0
   25738:	e79c      	b.n	25674 <tc_cmac_update+0x12>

0002573a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2573a:	b570      	push	{r4, r5, r6, lr}
   2573c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2573e:	4605      	mov	r5, r0
   25740:	b1e8      	cbz	r0, 2577e <tc_cmac_final+0x44>
   25742:	b369      	cbz	r1, 257a0 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   25744:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   25746:	2a10      	cmp	r2, #16
   25748:	d11a      	bne.n	25780 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2574a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2574c:	1e63      	subs	r3, r4, #1
   2574e:	3901      	subs	r1, #1
   25750:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25754:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25758:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2575c:	4072      	eors	r2, r6
   2575e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25762:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25764:	ea82 0206 	eor.w	r2, r2, r6
   25768:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2576a:	d1f3      	bne.n	25754 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2576c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2576e:	4621      	mov	r1, r4
   25770:	4628      	mov	r0, r5
   25772:	f7ee f889 	bl	13888 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   25776:	4620      	mov	r0, r4
   25778:	f7ff ff2a 	bl	255d0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2577c:	2001      	movs	r0, #1
}
   2577e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   25780:	f102 0030 	add.w	r0, r2, #48	; 0x30
   25784:	2100      	movs	r1, #0
   25786:	f1c2 0210 	rsb	r2, r2, #16
   2578a:	4420      	add	r0, r4
   2578c:	f7ff fe42 	bl	25414 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25790:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25792:	4423      	add	r3, r4
   25794:	2280      	movs	r2, #128	; 0x80
   25796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2579a:	f104 0120 	add.w	r1, r4, #32
   2579e:	e7d5      	b.n	2574c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   257a0:	4608      	mov	r0, r1
   257a2:	e7ec      	b.n	2577e <tc_cmac_final+0x44>

000257a4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   257a4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   257a6:	6800      	ldr	r0, [r0, #0]
   257a8:	f7ee b8f6 	b.w	13998 <z_arm_fatal_error>

000257ac <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   257ac:	2100      	movs	r1, #0
   257ae:	2001      	movs	r0, #1
   257b0:	f7ee b8f2 	b.w	13998 <z_arm_fatal_error>

000257b4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   257b4:	b508      	push	{r3, lr}
	handler();
   257b6:	f7ee f99f 	bl	13af8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   257ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   257be:	f7ee ba7b 	b.w	13cb8 <z_arm_exc_exit>

000257c2 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   257c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257c6:	4684      	mov	ip, r0
   257c8:	460f      	mov	r7, r1
	register const char *s = nptr;
   257ca:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   257cc:	462c      	mov	r4, r5
   257ce:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   257d2:	2b20      	cmp	r3, #32
   257d4:	d035      	beq.n	25842 <strtoul+0x80>
   257d6:	f1a3 0109 	sub.w	r1, r3, #9
   257da:	2904      	cmp	r1, #4
   257dc:	d931      	bls.n	25842 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   257de:	2b2d      	cmp	r3, #45	; 0x2d
   257e0:	d131      	bne.n	25846 <strtoul+0x84>
		neg = 1;
		c = *s++;
   257e2:	786b      	ldrb	r3, [r5, #1]
   257e4:	1cac      	adds	r4, r5, #2
		neg = 1;
   257e6:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   257ea:	2a00      	cmp	r2, #0
   257ec:	d05e      	beq.n	258ac <strtoul+0xea>
   257ee:	2a10      	cmp	r2, #16
   257f0:	d109      	bne.n	25806 <strtoul+0x44>
   257f2:	2b30      	cmp	r3, #48	; 0x30
   257f4:	d107      	bne.n	25806 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   257f6:	7823      	ldrb	r3, [r4, #0]
   257f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   257fc:	2b58      	cmp	r3, #88	; 0x58
   257fe:	d150      	bne.n	258a2 <strtoul+0xe0>
		c = s[1];
   25800:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   25802:	2210      	movs	r2, #16
		s += 2;
   25804:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   25806:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2580a:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2580c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   25810:	fb02 f801 	mul.w	r8, r2, r1
   25814:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   25818:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2581a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2581e:	2d09      	cmp	r5, #9
   25820:	d818      	bhi.n	25854 <strtoul+0x92>
			c -= '0';
   25822:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   25824:	429a      	cmp	r2, r3
   25826:	dd25      	ble.n	25874 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   25828:	2e00      	cmp	r6, #0
   2582a:	db20      	blt.n	2586e <strtoul+0xac>
   2582c:	4288      	cmp	r0, r1
   2582e:	d81e      	bhi.n	2586e <strtoul+0xac>
   25830:	d101      	bne.n	25836 <strtoul+0x74>
   25832:	4543      	cmp	r3, r8
   25834:	dc1b      	bgt.n	2586e <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   25836:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2583a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2583c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   25840:	e7eb      	b.n	2581a <strtoul+0x58>
{
   25842:	4625      	mov	r5, r4
   25844:	e7c2      	b.n	257cc <strtoul+0xa>
	} else if (c == '+') {
   25846:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   25848:	bf04      	itt	eq
   2584a:	786b      	ldrbeq	r3, [r5, #1]
   2584c:	1cac      	addeq	r4, r5, #2
	register int neg = 0, any, cutlim;
   2584e:	f04f 0e00 	mov.w	lr, #0
   25852:	e7ca      	b.n	257ea <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   25854:	f043 0520 	orr.w	r5, r3, #32
   25858:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2585a:	2d19      	cmp	r5, #25
   2585c:	d80a      	bhi.n	25874 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2585e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   25862:	2d1a      	cmp	r5, #26
   25864:	bf34      	ite	cc
   25866:	2537      	movcc	r5, #55	; 0x37
   25868:	2557      	movcs	r5, #87	; 0x57
   2586a:	1b5b      	subs	r3, r3, r5
   2586c:	e7da      	b.n	25824 <strtoul+0x62>
			any = -1;
   2586e:	f04f 36ff 	mov.w	r6, #4294967295
   25872:	e7e3      	b.n	2583c <strtoul+0x7a>
		}
	}
	if (any < 0) {
   25874:	2e00      	cmp	r6, #0
   25876:	da08      	bge.n	2588a <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   25878:	f7fb f870 	bl	2095c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2587c:	2322      	movs	r3, #34	; 0x22
   2587e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   25880:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   25884:	b947      	cbnz	r7, 25898 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   25886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2588a:	f1be 0f00 	cmp.w	lr, #0
   2588e:	d000      	beq.n	25892 <strtoul+0xd0>
		acc = -acc;
   25890:	4240      	negs	r0, r0
	if (endptr != NULL) {
   25892:	2f00      	cmp	r7, #0
   25894:	d0f7      	beq.n	25886 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   25896:	b10e      	cbz	r6, 2589c <strtoul+0xda>
   25898:	f104 3cff 	add.w	ip, r4, #4294967295
   2589c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   258a0:	e7f1      	b.n	25886 <strtoul+0xc4>
	if (base == 0) {
   258a2:	2330      	movs	r3, #48	; 0x30
   258a4:	2a00      	cmp	r2, #0
   258a6:	d1ae      	bne.n	25806 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   258a8:	2208      	movs	r2, #8
   258aa:	e7ac      	b.n	25806 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   258ac:	2b30      	cmp	r3, #48	; 0x30
   258ae:	d0a2      	beq.n	257f6 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   258b0:	220a      	movs	r2, #10
   258b2:	e7a8      	b.n	25806 <strtoul+0x44>

000258b4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   258b4:	3901      	subs	r1, #1
   258b6:	4603      	mov	r3, r0
   258b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   258bc:	b90a      	cbnz	r2, 258c2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   258be:	701a      	strb	r2, [r3, #0]

	return dest;
}
   258c0:	4770      	bx	lr
		*d = *s;
   258c2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   258c6:	e7f7      	b.n	258b8 <strcpy+0x4>

000258c8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   258c8:	b570      	push	{r4, r5, r6, lr}
   258ca:	3901      	subs	r1, #1
   258cc:	4605      	mov	r5, r0
   258ce:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   258d0:	b142      	cbz	r2, 258e4 <strncpy+0x1c>
   258d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   258d6:	1e56      	subs	r6, r2, #1
   258d8:	b92b      	cbnz	r3, 258e6 <strncpy+0x1e>
   258da:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   258dc:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   258e0:	42a2      	cmp	r2, r4
   258e2:	d1fb      	bne.n	258dc <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   258e4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   258e6:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   258ea:	4632      	mov	r2, r6
   258ec:	e7ef      	b.n	258ce <strncpy+0x6>

000258ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   258ee:	4603      	mov	r3, r0
	size_t n = 0;
   258f0:	2000      	movs	r0, #0

	while (*s != '\0') {
   258f2:	5c1a      	ldrb	r2, [r3, r0]
   258f4:	b902      	cbnz	r2, 258f8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   258f6:	4770      	bx	lr
		n++;
   258f8:	3001      	adds	r0, #1
   258fa:	e7fa      	b.n	258f2 <strlen+0x4>

000258fc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   258fc:	4603      	mov	r3, r0
	size_t n = 0;
   258fe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   25900:	5c1a      	ldrb	r2, [r3, r0]
   25902:	b10a      	cbz	r2, 25908 <strnlen+0xc>
   25904:	4288      	cmp	r0, r1
   25906:	d100      	bne.n	2590a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   25908:	4770      	bx	lr
		n++;
   2590a:	3001      	adds	r0, #1
   2590c:	e7f8      	b.n	25900 <strnlen+0x4>

0002590e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2590e:	1e43      	subs	r3, r0, #1
   25910:	3901      	subs	r1, #1
   25912:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25916:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2591a:	4282      	cmp	r2, r0
   2591c:	d101      	bne.n	25922 <strcmp+0x14>
   2591e:	2a00      	cmp	r2, #0
   25920:	d1f7      	bne.n	25912 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   25922:	1a10      	subs	r0, r2, r0
   25924:	4770      	bx	lr

00025926 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   25926:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   25928:	2400      	movs	r4, #0
   2592a:	42a2      	cmp	r2, r4
   2592c:	d008      	beq.n	25940 <strncmp+0x1a>
   2592e:	5d03      	ldrb	r3, [r0, r4]
   25930:	5d0d      	ldrb	r5, [r1, r4]
   25932:	42ab      	cmp	r3, r5
   25934:	d102      	bne.n	2593c <strncmp+0x16>
   25936:	3401      	adds	r4, #1
   25938:	2b00      	cmp	r3, #0
   2593a:	d1f6      	bne.n	2592a <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2593c:	1b58      	subs	r0, r3, r5
   2593e:	e000      	b.n	25942 <strncmp+0x1c>
   25940:	2000      	movs	r0, #0
}
   25942:	bd30      	pop	{r4, r5, pc}

00025944 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   25944:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   25946:	b15a      	cbz	r2, 25960 <memcmp+0x1c>
   25948:	3901      	subs	r1, #1
   2594a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2594c:	f810 2b01 	ldrb.w	r2, [r0], #1
   25950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   25954:	42a0      	cmp	r0, r4
   25956:	d001      	beq.n	2595c <memcmp+0x18>
   25958:	429a      	cmp	r2, r3
   2595a:	d0f7      	beq.n	2594c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2595c:	1ad0      	subs	r0, r2, r3
}
   2595e:	bd10      	pop	{r4, pc}
		return 0;
   25960:	4610      	mov	r0, r2
   25962:	e7fc      	b.n	2595e <memcmp+0x1a>

00025964 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   25964:	b510      	push	{r4, lr}
   25966:	1e43      	subs	r3, r0, #1
   25968:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2596a:	4291      	cmp	r1, r2
   2596c:	d100      	bne.n	25970 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2596e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   25970:	f811 4b01 	ldrb.w	r4, [r1], #1
   25974:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   25978:	e7f7      	b.n	2596a <memcpy+0x6>

0002597a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2597a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2597c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2597e:	4603      	mov	r3, r0
	while (n > 0) {
   25980:	4293      	cmp	r3, r2
   25982:	d100      	bne.n	25986 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   25984:	4770      	bx	lr
		*(d_byte++) = c_byte;
   25986:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2598a:	e7f9      	b.n	25980 <memset+0x6>

0002598c <_stdout_hook_default>:
}
   2598c:	f04f 30ff 	mov.w	r0, #4294967295
   25990:	4770      	bx	lr

00025992 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   25992:	684b      	ldr	r3, [r1, #4]
   25994:	2b01      	cmp	r3, #1
   25996:	dd07      	ble.n	259a8 <sprintf_out+0x16>
		*(p->ptr) = c;
   25998:	680b      	ldr	r3, [r1, #0]
   2599a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2599c:	680b      	ldr	r3, [r1, #0]
   2599e:	3301      	adds	r3, #1
   259a0:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   259a2:	684b      	ldr	r3, [r1, #4]
   259a4:	3b01      	subs	r3, #1
   259a6:	604b      	str	r3, [r1, #4]
}
   259a8:	2000      	movs	r0, #0
   259aa:	4770      	bx	lr

000259ac <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   259ac:	b084      	sub	sp, #16
   259ae:	ab04      	add	r3, sp, #16
   259b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   259b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   259b8:	2b06      	cmp	r3, #6
   259ba:	d108      	bne.n	259ce <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   259bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   259c0:	2201      	movs	r2, #1
   259c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   259c6:	f3bf 8f4f 	dsb	sy
        __WFE();
   259ca:	bf20      	wfe
    while (true)
   259cc:	e7fd      	b.n	259ca <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   259ce:	b004      	add	sp, #16
   259d0:	4770      	bx	lr

000259d2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   259d2:	b084      	sub	sp, #16
   259d4:	ab04      	add	r3, sp, #16
   259d6:	e903 0007 	stmdb	r3, {r0, r1, r2}
   259da:	2300      	movs	r3, #0
   259dc:	f383 8811 	msr	BASEPRI, r3
   259e0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   259e4:	b004      	add	sp, #16
   259e6:	4770      	bx	lr

000259e8 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   259e8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   259ec:	f043 0306 	orr.w	r3, r3, #6
   259f0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   259f4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   259f8:	f043 0304 	orr.w	r3, r3, #4
   259fc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   25a00:	4770      	bx	lr

00025a02 <bt_settings_decode_key>:
{
   25a02:	b570      	push	{r4, r5, r6, lr}
   25a04:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   25a06:	2100      	movs	r1, #0
{
   25a08:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   25a0a:	f7ff fb94 	bl	25136 <settings_name_next>
   25a0e:	280d      	cmp	r0, #13
   25a10:	d118      	bne.n	25a44 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   25a12:	7b23      	ldrb	r3, [r4, #12]
   25a14:	2b30      	cmp	r3, #48	; 0x30
   25a16:	d111      	bne.n	25a3c <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   25a18:	2300      	movs	r3, #0
   25a1a:	702b      	strb	r3, [r5, #0]
   25a1c:	f104 060c 	add.w	r6, r4, #12
   25a20:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   25a22:	462a      	mov	r2, r5
   25a24:	4620      	mov	r0, r4
   25a26:	2301      	movs	r3, #1
   25a28:	2102      	movs	r1, #2
   25a2a:	3402      	adds	r4, #2
   25a2c:	f7fe fe01 	bl	24632 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   25a30:	42b4      	cmp	r4, r6
   25a32:	f105 35ff 	add.w	r5, r5, #4294967295
   25a36:	d1f4      	bne.n	25a22 <bt_settings_decode_key+0x20>
	return 0;
   25a38:	2000      	movs	r0, #0
}
   25a3a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   25a3c:	2b31      	cmp	r3, #49	; 0x31
   25a3e:	d101      	bne.n	25a44 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   25a40:	2301      	movs	r3, #1
   25a42:	e7ea      	b.n	25a1a <bt_settings_decode_key+0x18>
		return -EINVAL;
   25a44:	f06f 0015 	mvn.w	r0, #21
   25a48:	e7f7      	b.n	25a3a <bt_settings_decode_key+0x38>

00025a4a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   25a4a:	b510      	push	{r4, lr}
   25a4c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   25a4e:	7801      	ldrb	r1, [r0, #0]
   25a50:	7822      	ldrb	r2, [r4, #0]
   25a52:	428a      	cmp	r2, r1
{
   25a54:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   25a56:	d00e      	beq.n	25a76 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   25a58:	4669      	mov	r1, sp
   25a5a:	f7ee ff5d 	bl	14918 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   25a5e:	a905      	add	r1, sp, #20
   25a60:	4620      	mov	r0, r4
   25a62:	f7ee ff59 	bl	14918 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   25a66:	2210      	movs	r2, #16
   25a68:	f10d 0115 	add.w	r1, sp, #21
   25a6c:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25a70:	f7ff ff68 	bl	25944 <memcmp>
   25a74:	e007      	b.n	25a86 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   25a76:	2a01      	cmp	r2, #1
   25a78:	d007      	beq.n	25a8a <bt_uuid_cmp+0x40>
   25a7a:	2a02      	cmp	r2, #2
   25a7c:	d008      	beq.n	25a90 <bt_uuid_cmp+0x46>
   25a7e:	b95a      	cbnz	r2, 25a98 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   25a80:	8840      	ldrh	r0, [r0, #2]
   25a82:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25a84:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   25a86:	b00a      	add	sp, #40	; 0x28
   25a88:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   25a8a:	6840      	ldr	r0, [r0, #4]
   25a8c:	6863      	ldr	r3, [r4, #4]
   25a8e:	e7f9      	b.n	25a84 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   25a90:	2210      	movs	r2, #16
   25a92:	1c61      	adds	r1, r4, #1
   25a94:	3001      	adds	r0, #1
   25a96:	e7eb      	b.n	25a70 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   25a98:	f06f 0015 	mvn.w	r0, #21
   25a9c:	e7f3      	b.n	25a86 <bt_uuid_cmp+0x3c>

00025a9e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   25a9e:	2a04      	cmp	r2, #4
{
   25aa0:	b538      	push	{r3, r4, r5, lr}
   25aa2:	460c      	mov	r4, r1
	switch (data_len) {
   25aa4:	d00d      	beq.n	25ac2 <bt_uuid_create+0x24>
   25aa6:	2a10      	cmp	r2, #16
   25aa8:	d019      	beq.n	25ade <bt_uuid_create+0x40>
   25aaa:	2a02      	cmp	r2, #2
   25aac:	f04f 0300 	mov.w	r3, #0
   25ab0:	d11b      	bne.n	25aea <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   25ab2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   25ab4:	784a      	ldrb	r2, [r1, #1]
   25ab6:	780b      	ldrb	r3, [r1, #0]
   25ab8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   25abc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   25abe:	2001      	movs	r0, #1
}
   25ac0:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   25ac2:	2301      	movs	r3, #1
   25ac4:	7003      	strb	r3, [r0, #0]
   25ac6:	78a2      	ldrb	r2, [r4, #2]
   25ac8:	78c9      	ldrb	r1, [r1, #3]
   25aca:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   25acc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   25ad0:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   25ad2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   25ad6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   25ada:	6042      	str	r2, [r0, #4]
		break;
   25adc:	e7ef      	b.n	25abe <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   25ade:	2302      	movs	r3, #2
   25ae0:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   25ae4:	f7ff ff3e 	bl	25964 <memcpy>
		break;
   25ae8:	e7e9      	b.n	25abe <bt_uuid_create+0x20>
	switch (data_len) {
   25aea:	4618      	mov	r0, r3
   25aec:	e7e8      	b.n	25ac0 <bt_uuid_create+0x22>

00025aee <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25aee:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25af0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25af2:	2106      	movs	r1, #6
{
   25af4:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   25af6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   25afa:	f7f9 fa47 	bl	1ef8c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25afe:	b918      	cbnz	r0, 25b08 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25b00:	79a3      	ldrb	r3, [r4, #6]
   25b02:	f063 033f 	orn	r3, r3, #63	; 0x3f
   25b06:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   25b08:	bd10      	pop	{r4, pc}

00025b0a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   25b0a:	280f      	cmp	r0, #15
   25b0c:	d806      	bhi.n	25b1c <bt_hci_evt_get_flags+0x12>
   25b0e:	280d      	cmp	r0, #13
   25b10:	d80b      	bhi.n	25b2a <bt_hci_evt_get_flags+0x20>
   25b12:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   25b14:	bf14      	ite	ne
   25b16:	2002      	movne	r0, #2
   25b18:	2003      	moveq	r0, #3
   25b1a:	4770      	bx	lr
	switch (evt) {
   25b1c:	2813      	cmp	r0, #19
   25b1e:	d004      	beq.n	25b2a <bt_hci_evt_get_flags+0x20>
   25b20:	281a      	cmp	r0, #26
   25b22:	bf14      	ite	ne
   25b24:	2002      	movne	r0, #2
   25b26:	2001      	moveq	r0, #1
   25b28:	4770      	bx	lr
   25b2a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   25b2c:	4770      	bx	lr

00025b2e <atomic_or>:
{
   25b2e:	4603      	mov	r3, r0
}
   25b30:	f3bf 8f5b 	dmb	ish
   25b34:	e853 0f00 	ldrex	r0, [r3]
   25b38:	ea40 0201 	orr.w	r2, r0, r1
   25b3c:	e843 2c00 	strex	ip, r2, [r3]
   25b40:	f1bc 0f00 	cmp.w	ip, #0
   25b44:	d1f6      	bne.n	25b34 <atomic_or+0x6>
   25b46:	f3bf 8f5b 	dmb	ish
   25b4a:	4770      	bx	lr

00025b4c <sys_put_le64>:
	dst[1] = val >> 8;
   25b4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   25b50:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   25b52:	0e00      	lsrs	r0, r0, #24
   25b54:	7053      	strb	r3, [r2, #1]
   25b56:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   25b58:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   25b5a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   25b5e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   25b60:	7093      	strb	r3, [r2, #2]
   25b62:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   25b64:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   25b66:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   25b68:	71d1      	strb	r1, [r2, #7]
}
   25b6a:	4770      	bx	lr

00025b6c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   25b6c:	8802      	ldrh	r2, [r0, #0]
   25b6e:	8843      	ldrh	r3, [r0, #2]
   25b70:	429a      	cmp	r2, r3
{
   25b72:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   25b74:	d818      	bhi.n	25ba8 <bt_le_conn_params_valid+0x3c>
   25b76:	2a05      	cmp	r2, #5
   25b78:	d916      	bls.n	25ba8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   25b7a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   25b7e:	d813      	bhi.n	25ba8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   25b80:	8884      	ldrh	r4, [r0, #4]
   25b82:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   25b86:	d20f      	bcs.n	25ba8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   25b88:	88c1      	ldrh	r1, [r0, #6]
   25b8a:	f1a1 020a 	sub.w	r2, r1, #10
   25b8e:	b292      	uxth	r2, r2
   25b90:	f640 4076 	movw	r0, #3190	; 0xc76
   25b94:	4282      	cmp	r2, r0
   25b96:	d807      	bhi.n	25ba8 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   25b98:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   25b9c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   25ba0:	bf34      	ite	cc
   25ba2:	2001      	movcc	r0, #1
   25ba4:	2000      	movcs	r0, #0
}
   25ba6:	bd10      	pop	{r4, pc}
		return false;
   25ba8:	2000      	movs	r0, #0
   25baa:	e7fc      	b.n	25ba6 <bt_le_conn_params_valid+0x3a>

00025bac <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   25bac:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   25bae:	f7f5 fda1 	bl	1b6f4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   25bb2:	b118      	cbz	r0, 25bbc <bt_addr_le_is_bonded+0x10>
   25bb4:	89c0      	ldrh	r0, [r0, #14]
   25bb6:	3800      	subs	r0, #0
   25bb8:	bf18      	it	ne
   25bba:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   25bbc:	bd08      	pop	{r3, pc}

00025bbe <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25bbe:	2207      	movs	r2, #7
   25bc0:	f7ff bed0 	b.w	25964 <memcpy>

00025bc4 <addr_res_enable>:
{
   25bc4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25bc6:	2101      	movs	r1, #1
{
   25bc8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   25bca:	f242 002d 	movw	r0, #8237	; 0x202d
   25bce:	f7ef f923 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   25bd2:	4604      	mov	r4, r0
   25bd4:	b158      	cbz	r0, 25bee <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   25bd6:	4629      	mov	r1, r5
   25bd8:	3008      	adds	r0, #8
   25bda:	f001 fd66 	bl	276aa <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25bde:	4621      	mov	r1, r4
   25be0:	2200      	movs	r2, #0
}
   25be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   25be6:	f242 002d 	movw	r0, #8237	; 0x202d
   25bea:	f7ef b95d 	b.w	14ea8 <bt_hci_cmd_send_sync>
}
   25bee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25bf2:	bd38      	pop	{r3, r4, r5, pc}

00025bf4 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   25bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bf6:	4607      	mov	r7, r0
   25bf8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   25bfa:	f242 0027 	movw	r0, #8231	; 0x2027
   25bfe:	2127      	movs	r1, #39	; 0x27
   25c00:	f7ef f90a 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   25c04:	4604      	mov	r4, r0
   25c06:	b1d0      	cbz	r0, 25c3e <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   25c08:	2127      	movs	r1, #39	; 0x27
   25c0a:	3008      	adds	r0, #8
   25c0c:	f7f6 f9bc 	bl	1bf88 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   25c10:	4639      	mov	r1, r7
   25c12:	4605      	mov	r5, r0
   25c14:	f7ff ffd3 	bl	25bbe <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   25c18:	4631      	mov	r1, r6
   25c1a:	2210      	movs	r2, #16
   25c1c:	1de8      	adds	r0, r5, #7
   25c1e:	f7ff fea1 	bl	25964 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   25c22:	2210      	movs	r2, #16
   25c24:	2100      	movs	r1, #0
   25c26:	f105 0017 	add.w	r0, r5, #23
   25c2a:	f7ff fea6 	bl	2597a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25c2e:	4621      	mov	r1, r4
   25c30:	2200      	movs	r2, #0
}
   25c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   25c36:	f242 0027 	movw	r0, #8231	; 0x2027
   25c3a:	f7ef b935 	b.w	14ea8 <bt_hci_cmd_send_sync>
}
   25c3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025c44 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   25c44:	7a03      	ldrb	r3, [r0, #8]
   25c46:	075b      	lsls	r3, r3, #29
   25c48:	d504      	bpl.n	25c54 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   25c4a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   25c4e:	3001      	adds	r0, #1
   25c50:	f7ff bfd0 	b.w	25bf4 <hci_id_add.isra.0>
}
   25c54:	4770      	bx	lr

00025c56 <bt_id_set_private_addr>:
{
   25c56:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   25c58:	2106      	movs	r1, #6
   25c5a:	4668      	mov	r0, sp
   25c5c:	f7f9 f996 	bl	1ef8c <bt_rand>
	if (err) {
   25c60:	b940      	cbnz	r0, 25c74 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   25c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   25c66:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   25c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25c6c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   25c70:	f7ef fa9e 	bl	151b0 <set_random_address>
}
   25c74:	b003      	add	sp, #12
   25c76:	f85d fb04 	ldr.w	pc, [sp], #4

00025c7a <bt_id_scan_random_addr_check>:
}
   25c7a:	2001      	movs	r0, #1
   25c7c:	4770      	bx	lr

00025c7e <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   25c7e:	2000      	movs	r0, #0
   25c80:	4770      	bx	lr

00025c82 <atomic_and>:
{
   25c82:	4603      	mov	r3, r0
}
   25c84:	f3bf 8f5b 	dmb	ish
   25c88:	e853 0f00 	ldrex	r0, [r3]
   25c8c:	ea00 0201 	and.w	r2, r0, r1
   25c90:	e843 2c00 	strex	ip, r2, [r3]
   25c94:	f1bc 0f00 	cmp.w	ip, #0
   25c98:	d1f6      	bne.n	25c88 <atomic_and+0x6>
   25c9a:	f3bf 8f5b 	dmb	ish
   25c9e:	4770      	bx	lr

00025ca0 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   25ca0:	f7ef bdb8 	b.w	15814 <bt_le_scan_set_enable_legacy>

00025ca4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25ca4:	f3bf 8f5b 	dmb	ish
   25ca8:	6800      	ldr	r0, [r0, #0]
   25caa:	f3bf 8f5b 	dmb	ish
}
   25cae:	4770      	bx	lr

00025cb0 <tx_notify>:
{
   25cb0:	b570      	push	{r4, r5, r6, lr}
   25cb2:	4604      	mov	r4, r0
	__asm__ volatile(
   25cb4:	f04f 0240 	mov.w	r2, #64	; 0x40
   25cb8:	f3ef 8311 	mrs	r3, BASEPRI
   25cbc:	f382 8812 	msr	BASEPRI_MAX, r2
   25cc0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   25cc4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   25cc6:	b920      	cbnz	r0, 25cd2 <tx_notify+0x22>
	__asm__ volatile(
   25cc8:	f383 8811 	msr	BASEPRI, r3
   25ccc:	f3bf 8f6f 	isb	sy
}
   25cd0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   25cd4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25cd6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25cd8:	4288      	cmp	r0, r1
	list->tail = node;
   25cda:	bf08      	it	eq
   25cdc:	6262      	streq	r2, [r4, #36]	; 0x24
   25cde:	f383 8811 	msr	BASEPRI, r3
   25ce2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   25ce6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   25cea:	f7f0 f801 	bl	15cf0 <tx_free>
		cb(conn, user_data);
   25cee:	4631      	mov	r1, r6
   25cf0:	4620      	mov	r0, r4
   25cf2:	47a8      	blx	r5
	while (1) {
   25cf4:	e7de      	b.n	25cb4 <tx_notify+0x4>

00025cf6 <bt_conn_ref>:
{
   25cf6:	b510      	push	{r4, lr}
   25cf8:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   25cfa:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   25cfe:	4610      	mov	r0, r2
   25d00:	f7ff ffd0 	bl	25ca4 <atomic_get>
		if (!old) {
   25d04:	b180      	cbz	r0, 25d28 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25d06:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   25d0a:	1c41      	adds	r1, r0, #1
   25d0c:	e852 4f00 	ldrex	r4, [r2]
   25d10:	4284      	cmp	r4, r0
   25d12:	d104      	bne.n	25d1e <bt_conn_ref+0x28>
   25d14:	e842 1c00 	strex	ip, r1, [r2]
   25d18:	f1bc 0f00 	cmp.w	ip, #0
   25d1c:	d1f6      	bne.n	25d0c <bt_conn_ref+0x16>
   25d1e:	f3bf 8f5b 	dmb	ish
   25d22:	d1ec      	bne.n	25cfe <bt_conn_ref+0x8>
}
   25d24:	4618      	mov	r0, r3
   25d26:	bd10      	pop	{r4, pc}
			return NULL;
   25d28:	4603      	mov	r3, r0
   25d2a:	e7fb      	b.n	25d24 <bt_conn_ref+0x2e>

00025d2c <conn_lookup_handle>:
{
   25d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d30:	4607      	mov	r7, r0
   25d32:	460e      	mov	r6, r1
   25d34:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   25d36:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25d38:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   25d3c:	42b4      	cmp	r4, r6
   25d3e:	d103      	bne.n	25d48 <conn_lookup_handle+0x1c>
	return NULL;
   25d40:	2300      	movs	r3, #0
}
   25d42:	4618      	mov	r0, r3
   25d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25d48:	fb09 7004 	mla	r0, r9, r4, r7
   25d4c:	f7ff ffd3 	bl	25cf6 <bt_conn_ref>
   25d50:	4603      	mov	r3, r0
		if (!conn) {
   25d52:	b158      	cbz	r0, 25d6c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   25d54:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   25d56:	2d01      	cmp	r5, #1
   25d58:	d002      	beq.n	25d60 <conn_lookup_handle+0x34>
   25d5a:	3d07      	subs	r5, #7
   25d5c:	2d01      	cmp	r5, #1
   25d5e:	d803      	bhi.n	25d68 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25d60:	881a      	ldrh	r2, [r3, #0]
   25d62:	4542      	cmp	r2, r8
   25d64:	d0ed      	beq.n	25d42 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25d66:	4618      	mov	r0, r3
   25d68:	f7f0 f876 	bl	15e58 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   25d6c:	3401      	adds	r4, #1
   25d6e:	e7e5      	b.n	25d3c <conn_lookup_handle+0x10>

00025d70 <bt_conn_le_start_encryption>:
{
   25d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d74:	4682      	mov	sl, r0
   25d76:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   25d78:	f242 0019 	movw	r0, #8217	; 0x2019
   25d7c:	211c      	movs	r1, #28
{
   25d7e:	9e08      	ldr	r6, [sp, #32]
   25d80:	4690      	mov	r8, r2
   25d82:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   25d84:	f7ef f848 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   25d88:	4605      	mov	r5, r0
   25d8a:	b340      	cbz	r0, 25dde <bt_conn_le_start_encryption+0x6e>
   25d8c:	211c      	movs	r1, #28
   25d8e:	3008      	adds	r0, #8
   25d90:	f7f6 f8fa 	bl	1bf88 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d94:	f8ba 3000 	ldrh.w	r3, [sl]
   25d98:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   25d9a:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   25d9c:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   25da0:	4649      	mov	r1, r9
   25da2:	f7ff fddf 	bl	25964 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   25da6:	2202      	movs	r2, #2
   25da8:	4641      	mov	r1, r8
   25daa:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   25dae:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   25db0:	f7ff fdd8 	bl	25964 <memcpy>
	memcpy(cp->ltk, ltk, len);
   25db4:	4632      	mov	r2, r6
   25db6:	4639      	mov	r1, r7
   25db8:	4620      	mov	r0, r4
   25dba:	f7ff fdd3 	bl	25964 <memcpy>
	if (len < sizeof(cp->ltk)) {
   25dbe:	2e0f      	cmp	r6, #15
   25dc0:	d805      	bhi.n	25dce <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   25dc2:	f1c6 0210 	rsb	r2, r6, #16
   25dc6:	2100      	movs	r1, #0
   25dc8:	19a0      	adds	r0, r4, r6
   25dca:	f7ff fdd6 	bl	2597a <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   25dce:	4629      	mov	r1, r5
   25dd0:	2200      	movs	r2, #0
}
   25dd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   25dd6:	f242 0019 	movw	r0, #8217	; 0x2019
   25dda:	f7ef b865 	b.w	14ea8 <bt_hci_cmd_send_sync>
}
   25dde:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025de6 <bt_conn_set_security>:
{
   25de6:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25de8:	7b43      	ldrb	r3, [r0, #13]
   25dea:	2b07      	cmp	r3, #7
{
   25dec:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   25dee:	d128      	bne.n	25e42 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   25df0:	7a43      	ldrb	r3, [r0, #9]
   25df2:	428b      	cmp	r3, r1
   25df4:	d228      	bcs.n	25e48 <bt_conn_set_security+0x62>
   25df6:	7a83      	ldrb	r3, [r0, #10]
   25df8:	428b      	cmp	r3, r1
   25dfa:	d225      	bcs.n	25e48 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25dfc:	f3bf 8f5b 	dmb	ish
	if (val) {
   25e00:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   25e02:	f100 0304 	add.w	r3, r0, #4
   25e06:	d513      	bpl.n	25e30 <bt_conn_set_security+0x4a>
   25e08:	e853 2f00 	ldrex	r2, [r3]
   25e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25e10:	e843 2000 	strex	r0, r2, [r3]
   25e14:	2800      	cmp	r0, #0
   25e16:	d1f7      	bne.n	25e08 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e18:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   25e1c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   25e20:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   25e22:	4620      	mov	r0, r4
   25e24:	f001 faec 	bl	27400 <bt_smp_start_security>
	if (err) {
   25e28:	b108      	cbz	r0, 25e2e <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   25e2a:	7a63      	ldrb	r3, [r4, #9]
   25e2c:	72a3      	strb	r3, [r4, #10]
}
   25e2e:	bd10      	pop	{r4, pc}
   25e30:	e853 2f00 	ldrex	r2, [r3]
   25e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   25e38:	e843 2000 	strex	r0, r2, [r3]
   25e3c:	2800      	cmp	r0, #0
   25e3e:	d0eb      	beq.n	25e18 <bt_conn_set_security+0x32>
   25e40:	e7f6      	b.n	25e30 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   25e42:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25e46:	e7f2      	b.n	25e2e <bt_conn_set_security+0x48>
		return 0;
   25e48:	2000      	movs	r0, #0
   25e4a:	e7f0      	b.n	25e2e <bt_conn_set_security+0x48>

00025e4c <bt_conn_get_security>:
}
   25e4c:	7a40      	ldrb	r0, [r0, #9]
   25e4e:	4770      	bx	lr

00025e50 <bt_conn_is_peer_addr_le>:
{
   25e50:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   25e52:	7a03      	ldrb	r3, [r0, #8]
   25e54:	428b      	cmp	r3, r1
{
   25e56:	4604      	mov	r4, r0
   25e58:	4615      	mov	r5, r2
	if (id != conn->id) {
   25e5a:	d115      	bne.n	25e88 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   25e5c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25e60:	2207      	movs	r2, #7
   25e62:	4628      	mov	r0, r5
   25e64:	f7ff fd6e 	bl	25944 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   25e68:	b180      	cbz	r0, 25e8c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   25e6a:	78e3      	ldrb	r3, [r4, #3]
   25e6c:	2207      	movs	r2, #7
   25e6e:	b943      	cbnz	r3, 25e82 <bt_conn_is_peer_addr_le+0x32>
   25e70:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   25e74:	4628      	mov	r0, r5
   25e76:	f7ff fd65 	bl	25944 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   25e7a:	fab0 f080 	clz	r0, r0
   25e7e:	0940      	lsrs	r0, r0, #5
}
   25e80:	bd38      	pop	{r3, r4, r5, pc}
   25e82:	f104 0197 	add.w	r1, r4, #151	; 0x97
   25e86:	e7f5      	b.n	25e74 <bt_conn_is_peer_addr_le+0x24>
		return false;
   25e88:	2000      	movs	r0, #0
   25e8a:	e7f9      	b.n	25e80 <bt_conn_is_peer_addr_le+0x30>
		return true;
   25e8c:	2001      	movs	r0, #1
   25e8e:	e7f7      	b.n	25e80 <bt_conn_is_peer_addr_le+0x30>

00025e90 <bt_conn_get_dst>:
}
   25e90:	3090      	adds	r0, #144	; 0x90
   25e92:	4770      	bx	lr

00025e94 <bt_conn_le_conn_update>:
{
   25e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e96:	4607      	mov	r7, r0
   25e98:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   25e9a:	f242 0013 	movw	r0, #8211	; 0x2013
   25e9e:	210e      	movs	r1, #14
   25ea0:	f7ee ffba 	bl	14e18 <bt_hci_cmd_create>
	if (!buf) {
   25ea4:	4606      	mov	r6, r0
   25ea6:	b1d0      	cbz	r0, 25ede <bt_conn_le_conn_update+0x4a>
   25ea8:	210e      	movs	r1, #14
   25eaa:	3008      	adds	r0, #8
   25eac:	f7f6 f86c 	bl	1bf88 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25eb0:	220e      	movs	r2, #14
   25eb2:	4604      	mov	r4, r0
   25eb4:	2100      	movs	r1, #0
   25eb6:	f7ff fd60 	bl	2597a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25eba:	883b      	ldrh	r3, [r7, #0]
   25ebc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25ebe:	882b      	ldrh	r3, [r5, #0]
   25ec0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25ec2:	886b      	ldrh	r3, [r5, #2]
   25ec4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25ec6:	88ab      	ldrh	r3, [r5, #4]
   25ec8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25eca:	88eb      	ldrh	r3, [r5, #6]
   25ecc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25ece:	4631      	mov	r1, r6
   25ed0:	2200      	movs	r2, #0
}
   25ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25ed6:	f242 0013 	movw	r0, #8211	; 0x2013
   25eda:	f7ee bfe5 	b.w	14ea8 <bt_hci_cmd_send_sync>
}
   25ede:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025ee4 <l2cap_connected>:
}
   25ee4:	4770      	bx	lr

00025ee6 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   25ee6:	3010      	adds	r0, #16
   25ee8:	f7fc ba8e 	b.w	22408 <k_work_cancel_delayable>

00025eec <bt_l2cap_security_changed>:
{
   25eec:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25eee:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   25ef0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25ef2:	b1a3      	cbz	r3, 25f1e <bt_l2cap_security_changed+0x32>
   25ef4:	f1b3 0008 	subs.w	r0, r3, #8
   25ef8:	d011      	beq.n	25f1e <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25efa:	681c      	ldr	r4, [r3, #0]
   25efc:	b104      	cbz	r4, 25f00 <bt_l2cap_security_changed+0x14>
   25efe:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25f00:	6843      	ldr	r3, [r0, #4]
   25f02:	689b      	ldr	r3, [r3, #8]
   25f04:	b10b      	cbz	r3, 25f0a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   25f06:	4629      	mov	r1, r5
   25f08:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25f0a:	b144      	cbz	r4, 25f1e <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25f0c:	f114 0308 	adds.w	r3, r4, #8
   25f10:	d002      	beq.n	25f18 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25f12:	68a3      	ldr	r3, [r4, #8]
   25f14:	b103      	cbz	r3, 25f18 <bt_l2cap_security_changed+0x2c>
   25f16:	3b08      	subs	r3, #8
{
   25f18:	4620      	mov	r0, r4
   25f1a:	461c      	mov	r4, r3
   25f1c:	e7f0      	b.n	25f00 <bt_l2cap_security_changed+0x14>
}
   25f1e:	bd38      	pop	{r3, r4, r5, pc}

00025f20 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   25f20:	3104      	adds	r1, #4
   25f22:	f7f0 b8fd 	b.w	16120 <bt_conn_create_pdu_timeout>

00025f26 <bt_l2cap_send_cb>:
{
   25f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f2a:	4614      	mov	r4, r2
   25f2c:	4605      	mov	r5, r0
   25f2e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   25f30:	f102 0008 	add.w	r0, r2, #8
   25f34:	2104      	movs	r1, #4
   25f36:	461e      	mov	r6, r3
   25f38:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25f3c:	f7f5 ffc0 	bl	1bec0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25f40:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   25f42:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25f44:	3a04      	subs	r2, #4
   25f46:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25f48:	4643      	mov	r3, r8
   25f4a:	4632      	mov	r2, r6
   25f4c:	4621      	mov	r1, r4
   25f4e:	4628      	mov	r0, r5
}
   25f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25f54:	f7ef bf1c 	b.w	15d90 <bt_conn_send_cb>

00025f58 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   25f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25f5a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   25f5c:	2202      	movs	r2, #2
   25f5e:	2001      	movs	r0, #1
   25f60:	f7f0 fa94 	bl	1648c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   25f64:	4604      	mov	r4, r0
   25f66:	b198      	cbz	r0, 25f90 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   25f68:	2102      	movs	r1, #2
   25f6a:	3008      	adds	r0, #8
   25f6c:	f7f6 f80c 	bl	1bf88 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   25f70:	2300      	movs	r3, #0
   25f72:	7003      	strb	r3, [r0, #0]
   25f74:	7043      	strb	r3, [r0, #1]
   25f76:	4622      	mov	r2, r4
   25f78:	9300      	str	r3, [sp, #0]
   25f7a:	2105      	movs	r1, #5
   25f7c:	4628      	mov	r0, r5
   25f7e:	f7ff ffd2 	bl	25f26 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   25f82:	b128      	cbz	r0, 25f90 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   25f84:	4620      	mov	r0, r4
}
   25f86:	b003      	add	sp, #12
   25f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   25f8c:	f7f5 becc 	b.w	1bd28 <net_buf_unref>
}
   25f90:	b003      	add	sp, #12
   25f92:	bd30      	pop	{r4, r5, pc}

00025f94 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25f94:	6d40      	ldr	r0, [r0, #84]	; 0x54
   25f96:	b160      	cbz	r0, 25fb2 <bt_l2cap_le_lookup_tx_cid+0x1e>
   25f98:	3808      	subs	r0, #8
   25f9a:	b900      	cbnz	r0, 25f9e <bt_l2cap_le_lookup_tx_cid+0xa>
   25f9c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25f9e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   25fa2:	428b      	cmp	r3, r1
   25fa4:	d005      	beq.n	25fb2 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25fa6:	f110 0308 	adds.w	r3, r0, #8
   25faa:	d001      	beq.n	25fb0 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25fac:	6880      	ldr	r0, [r0, #8]
   25fae:	e7f2      	b.n	25f96 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   25fb0:	4618      	mov	r0, r3
}
   25fb2:	4770      	bx	lr

00025fb4 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25fb4:	6d40      	ldr	r0, [r0, #84]	; 0x54
   25fb6:	b160      	cbz	r0, 25fd2 <bt_l2cap_le_lookup_rx_cid+0x1e>
   25fb8:	3808      	subs	r0, #8
   25fba:	b900      	cbnz	r0, 25fbe <bt_l2cap_le_lookup_rx_cid+0xa>
   25fbc:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25fbe:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   25fc2:	428b      	cmp	r3, r1
   25fc4:	d005      	beq.n	25fd2 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25fc6:	f110 0308 	adds.w	r3, r0, #8
   25fca:	d001      	beq.n	25fd0 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25fcc:	6880      	ldr	r0, [r0, #8]
   25fce:	e7f2      	b.n	25fb6 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   25fd0:	4618      	mov	r0, r3
}
   25fd2:	4770      	bx	lr

00025fd4 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   25fd4:	4770      	bx	lr

00025fd6 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25fd6:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   25fd8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   25fda:	b128      	cbz	r0, 25fe8 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25fdc:	6859      	ldr	r1, [r3, #4]
   25fde:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25fe0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25fe2:	4288      	cmp	r0, r1
	list->tail = node;
   25fe4:	bf08      	it	eq
   25fe6:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25fe8:	4770      	bx	lr

00025fea <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fea:	4603      	mov	r3, r0
   25fec:	6800      	ldr	r0, [r0, #0]
   25fee:	2200      	movs	r2, #0
   25ff0:	b900      	cbnz	r0, 25ff4 <sys_slist_find_and_remove+0xa>
   25ff2:	4770      	bx	lr
   25ff4:	4288      	cmp	r0, r1
   25ff6:	d110      	bne.n	2601a <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   25ff8:	6808      	ldr	r0, [r1, #0]
   25ffa:	b942      	cbnz	r2, 2600e <sys_slist_find_and_remove+0x24>
   25ffc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   25ffe:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26000:	4291      	cmp	r1, r2
   26002:	d100      	bne.n	26006 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   26004:	6058      	str	r0, [r3, #4]
	parent->next = child;
   26006:	2300      	movs	r3, #0
   26008:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2600a:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2600c:	4770      	bx	lr
	parent->next = child;
   2600e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26010:	6858      	ldr	r0, [r3, #4]
   26012:	4281      	cmp	r1, r0
	list->tail = node;
   26014:	bf08      	it	eq
   26016:	605a      	streq	r2, [r3, #4]
}
   26018:	e7f5      	b.n	26006 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2601a:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2601c:	6800      	ldr	r0, [r0, #0]
   2601e:	e7e7      	b.n	25ff0 <sys_slist_find_and_remove+0x6>

00026020 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   26020:	4603      	mov	r3, r0
	size_t bytes = 0;
   26022:	2000      	movs	r0, #0

	while (buf) {
   26024:	b903      	cbnz	r3, 26028 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   26026:	4770      	bx	lr
		bytes += buf->len;
   26028:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2602a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2602c:	4410      	add	r0, r2
		buf = buf->frags;
   2602e:	e7f9      	b.n	26024 <net_buf_frags_len+0x4>

00026030 <att_sent>:
	if (chan->ops->sent) {
   26030:	684b      	ldr	r3, [r1, #4]
   26032:	695b      	ldr	r3, [r3, #20]
{
   26034:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   26036:	b103      	cbz	r3, 2603a <att_sent+0xa>
		chan->ops->sent(chan);
   26038:	4718      	bx	r3
}
   2603a:	4770      	bx	lr

0002603c <attr_read_type_cb>:
{
   2603c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2603e:	68d4      	ldr	r4, [r2, #12]
   26040:	7823      	ldrb	r3, [r4, #0]
   26042:	3102      	adds	r1, #2
   26044:	b913      	cbnz	r3, 2604c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   26046:	7021      	strb	r1, [r4, #0]
	return true;
   26048:	2001      	movs	r0, #1
   2604a:	e006      	b.n	2605a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2604c:	428b      	cmp	r3, r1
   2604e:	d0fb      	beq.n	26048 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   26050:	8983      	ldrh	r3, [r0, #12]
   26052:	3b02      	subs	r3, #2
   26054:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   26056:	2000      	movs	r0, #0
   26058:	6110      	str	r0, [r2, #16]
}
   2605a:	bd10      	pop	{r4, pc}

0002605c <att_prepare_write_req>:
}
   2605c:	2006      	movs	r0, #6
   2605e:	4770      	bx	lr

00026060 <att_op_get_type>:
	switch (op) {
   26060:	281e      	cmp	r0, #30
   26062:	d816      	bhi.n	26092 <att_op_get_type+0x32>
   26064:	b308      	cbz	r0, 260aa <att_op_get_type+0x4a>
   26066:	1e43      	subs	r3, r0, #1
   26068:	2b1d      	cmp	r3, #29
   2606a:	d81e      	bhi.n	260aa <att_op_get_type+0x4a>
   2606c:	e8df f003 	tbb	[pc, r3]
   26070:	23172317 	.word	0x23172317
   26074:	23172317 	.word	0x23172317
   26078:	23172317 	.word	0x23172317
   2607c:	23172317 	.word	0x23172317
   26080:	1d172317 	.word	0x1d172317
   26084:	2317231d 	.word	0x2317231d
   26088:	1d191d17 	.word	0x1d191d17
   2608c:	0f1b      	.short	0x0f1b
   2608e:	2004      	movs	r0, #4
   26090:	4770      	bx	lr
   26092:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   26096:	2b52      	cmp	r3, #82	; 0x52
   26098:	d107      	bne.n	260aa <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2609a:	2000      	movs	r0, #0
}
   2609c:	4770      	bx	lr
		return ATT_RESPONSE;
   2609e:	2002      	movs	r0, #2
   260a0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   260a2:	2003      	movs	r0, #3
   260a4:	4770      	bx	lr
		return ATT_INDICATION;
   260a6:	2005      	movs	r0, #5
   260a8:	4770      	bx	lr
		return ATT_COMMAND;
   260aa:	f010 0f40 	tst.w	r0, #64	; 0x40
   260ae:	bf0c      	ite	eq
   260b0:	2006      	moveq	r0, #6
   260b2:	2000      	movne	r0, #0
   260b4:	4770      	bx	lr
		return ATT_REQUEST;
   260b6:	2001      	movs	r0, #1
   260b8:	4770      	bx	lr

000260ba <chan_req_send>:
{
   260ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   260bc:	688f      	ldr	r7, [r1, #8]
{
   260be:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   260c0:	4638      	mov	r0, r7
{
   260c2:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   260c4:	f7ff ffac 	bl	26020 <net_buf_frags_len>
   260c8:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   260cc:	4283      	cmp	r3, r0
   260ce:	d30d      	bcc.n	260ec <chan_req_send+0x32>
	req->buf = NULL;
   260d0:	2600      	movs	r6, #0
	chan->req = req;
   260d2:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   260d6:	4632      	mov	r2, r6
	req->buf = NULL;
   260d8:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   260da:	4620      	mov	r0, r4
   260dc:	4639      	mov	r1, r7
   260de:	f7f0 fad7 	bl	16690 <chan_send>
	if (err) {
   260e2:	b110      	cbz	r0, 260ea <chan_req_send+0x30>
		req->buf = buf;
   260e4:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   260e6:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
   260ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   260ec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   260f0:	e7fb      	b.n	260ea <chan_req_send+0x30>

000260f2 <process_queue>:
{
   260f2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   260f4:	2200      	movs	r2, #0
{
   260f6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   260f8:	2300      	movs	r3, #0
   260fa:	4608      	mov	r0, r1
{
   260fc:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   260fe:	f7f5 fd81 	bl	1bc04 <net_buf_get>
	if (buf) {
   26102:	4605      	mov	r5, r0
   26104:	b160      	cbz	r0, 26120 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   26106:	4601      	mov	r1, r0
   26108:	2200      	movs	r2, #0
   2610a:	4620      	mov	r0, r4
   2610c:	f7f0 fac0 	bl	16690 <chan_send>
		if (err) {
   26110:	4604      	mov	r4, r0
   26112:	b118      	cbz	r0, 2611c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   26114:	4629      	mov	r1, r5
   26116:	4630      	mov	r0, r6
   26118:	f001 ffc4 	bl	280a4 <k_queue_prepend>
}
   2611c:	4620      	mov	r0, r4
   2611e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   26120:	f06f 0401 	mvn.w	r4, #1
   26124:	e7fa      	b.n	2611c <process_queue+0x2a>

00026126 <att_notify_mult>:
{
   26126:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   26128:	6803      	ldr	r3, [r0, #0]
   2612a:	898a      	ldrh	r2, [r1, #12]
   2612c:	6818      	ldr	r0, [r3, #0]
   2612e:	6889      	ldr	r1, [r1, #8]
   26130:	f7f3 fbde 	bl	198f0 <bt_gatt_mult_notification>
}
   26134:	2000      	movs	r0, #0
   26136:	bd08      	pop	{r3, pc}

00026138 <att_notify>:
{
   26138:	b538      	push	{r3, r4, r5, lr}
   2613a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2613c:	f101 0008 	add.w	r0, r1, #8
   26140:	460c      	mov	r4, r1
   26142:	f001 fa92 	bl	2766a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   26146:	682d      	ldr	r5, [r5, #0]
   26148:	89a3      	ldrh	r3, [r4, #12]
   2614a:	68a2      	ldr	r2, [r4, #8]
   2614c:	4601      	mov	r1, r0
   2614e:	6828      	ldr	r0, [r5, #0]
   26150:	f000 feb9 	bl	26ec6 <bt_gatt_notification>
}
   26154:	2000      	movs	r0, #0
   26156:	bd38      	pop	{r3, r4, r5, pc}

00026158 <bt_att_chan_send_rsp>:
{
   26158:	b538      	push	{r3, r4, r5, lr}
   2615a:	4604      	mov	r4, r0
   2615c:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2615e:	f7f0 fa97 	bl	16690 <chan_send>
	if (err) {
   26162:	b130      	cbz	r0, 26172 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   26164:	4629      	mov	r1, r5
   26166:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   2616a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2616e:	f7f5 bda7 	b.w	1bcc0 <net_buf_put>
}
   26172:	bd38      	pop	{r3, r4, r5, pc}

00026174 <att_chan_mtu_updated>:
{
   26174:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   26176:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26178:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2617a:	b30a      	cbz	r2, 261c0 <att_chan_mtu_updated+0x4c>
   2617c:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   26180:	d01d      	beq.n	261be <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26182:	6813      	ldr	r3, [r2, #0]
   26184:	b10b      	cbz	r3, 2618a <att_chan_mtu_updated+0x16>
   26186:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2618a:	2200      	movs	r2, #0
   2618c:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2618e:	42a0      	cmp	r0, r4
   26190:	d009      	beq.n	261a6 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   26192:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   26196:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2619a:	42a9      	cmp	r1, r5
   2619c:	bf38      	it	cc
   2619e:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   261a0:	42a2      	cmp	r2, r4
   261a2:	bf38      	it	cc
   261a4:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   261a6:	b163      	cbz	r3, 261c2 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   261a8:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   261ac:	d004      	beq.n	261b8 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   261ae:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   261b2:	b10d      	cbz	r5, 261b8 <att_chan_mtu_updated+0x44>
   261b4:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   261b8:	461c      	mov	r4, r3
   261ba:	462b      	mov	r3, r5
   261bc:	e7e7      	b.n	2618e <att_chan_mtu_updated+0x1a>
   261be:	4622      	mov	r2, r4
   261c0:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   261c2:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   261c6:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   261ca:	428b      	cmp	r3, r1
   261cc:	d801      	bhi.n	261d2 <att_chan_mtu_updated+0x5e>
   261ce:	4290      	cmp	r0, r2
   261d0:	d909      	bls.n	261e6 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   261d2:	4282      	cmp	r2, r0
   261d4:	bf38      	it	cc
   261d6:	4602      	movcc	r2, r0
   261d8:	4299      	cmp	r1, r3
   261da:	6830      	ldr	r0, [r6, #0]
   261dc:	bf38      	it	cc
   261de:	4619      	movcc	r1, r3
}
   261e0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   261e2:	f7f3 bc4f 	b.w	19a84 <bt_gatt_att_max_mtu_changed>
}
   261e6:	bc70      	pop	{r4, r5, r6}
   261e8:	4770      	bx	lr

000261ea <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   261ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   261ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
   261f0:	2300      	movs	r3, #0
   261f2:	9300      	str	r3, [sp, #0]
   261f4:	461a      	mov	r2, r3
   261f6:	f7f2 f957 	bl	184a8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   261fa:	b005      	add	sp, #20
   261fc:	f85d fb04 	ldr.w	pc, [sp], #4

00026200 <att_chan_read>:
{
   26200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26204:	4680      	mov	r8, r0
   26206:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26208:	4610      	mov	r0, r2
{
   2620a:	4699      	mov	r9, r3
   2620c:	468b      	mov	fp, r1
   2620e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26210:	f7ff ff06 	bl	26020 <net_buf_frags_len>
   26214:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   26218:	4283      	cmp	r3, r0
   2621a:	d97a      	bls.n	26312 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2621c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26220:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   26222:	4630      	mov	r0, r6
   26224:	f7f5 fde0 	bl	1bde8 <net_buf_frag_last>
	size_t len, total = 0;
   26228:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2622c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2622e:	4630      	mov	r0, r6
   26230:	f7ff fef6 	bl	26020 <net_buf_frags_len>
   26234:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   26238:	f105 0708 	add.w	r7, r5, #8
   2623c:	1a24      	subs	r4, r4, r0
   2623e:	4638      	mov	r0, r7
   26240:	f001 fa1f 	bl	27682 <net_buf_simple_tailroom>
   26244:	4284      	cmp	r4, r0
   26246:	d211      	bcs.n	2626c <att_chan_read+0x6c>
   26248:	4630      	mov	r0, r6
   2624a:	f7ff fee9 	bl	26020 <net_buf_frags_len>
   2624e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   26252:	1a24      	subs	r4, r4, r0
		if (!len) {
   26254:	bb34      	cbnz	r4, 262a4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26256:	79b0      	ldrb	r0, [r6, #6]
   26258:	f7f5 fb64 	bl	1b924 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2625c:	2200      	movs	r2, #0
   2625e:	2300      	movs	r3, #0
   26260:	f001 f9f8 	bl	27654 <net_buf_alloc_fixed>
			if (!frag) {
   26264:	4605      	mov	r5, r0
   26266:	b930      	cbnz	r0, 26276 <att_chan_read+0x76>
	return total;
   26268:	4657      	mov	r7, sl
   2626a:	e02c      	b.n	262c6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2626c:	4638      	mov	r0, r7
   2626e:	f001 fa08 	bl	27682 <net_buf_simple_tailroom>
   26272:	4604      	mov	r4, r0
   26274:	e7ee      	b.n	26254 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   26276:	4601      	mov	r1, r0
   26278:	4630      	mov	r0, r6
   2627a:	f7f5 fdfd 	bl	1be78 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2627e:	4630      	mov	r0, r6
   26280:	f7ff fece 	bl	26020 <net_buf_frags_len>
   26284:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   26288:	f105 0708 	add.w	r7, r5, #8
   2628c:	1a24      	subs	r4, r4, r0
   2628e:	4638      	mov	r0, r7
   26290:	f001 f9f7 	bl	27682 <net_buf_simple_tailroom>
   26294:	4284      	cmp	r4, r0
   26296:	d21a      	bcs.n	262ce <att_chan_read+0xce>
   26298:	4630      	mov	r0, r6
   2629a:	f7ff fec1 	bl	26020 <net_buf_frags_len>
   2629e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   262a2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   262a4:	68a9      	ldr	r1, [r5, #8]
   262a6:	89aa      	ldrh	r2, [r5, #12]
   262a8:	f8db 7004 	ldr.w	r7, [fp, #4]
   262ac:	9803      	ldr	r0, [sp, #12]
   262ae:	f8cd 9000 	str.w	r9, [sp]
   262b2:	440a      	add	r2, r1
   262b4:	b2a3      	uxth	r3, r4
   262b6:	4659      	mov	r1, fp
   262b8:	47b8      	blx	r7
		if (read < 0) {
   262ba:	1e07      	subs	r7, r0, #0
   262bc:	da0c      	bge.n	262d8 <att_chan_read+0xd8>
				return total;
   262be:	f1ba 0f00 	cmp.w	sl, #0
   262c2:	bf18      	it	ne
   262c4:	4657      	movne	r7, sl
}
   262c6:	4638      	mov	r0, r7
   262c8:	b005      	add	sp, #20
   262ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ce:	4638      	mov	r0, r7
   262d0:	f001 f9d7 	bl	27682 <net_buf_simple_tailroom>
   262d4:	4604      	mov	r4, r0
   262d6:	e7e5      	b.n	262a4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   262d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   262da:	b993      	cbnz	r3, 26302 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   262dc:	4639      	mov	r1, r7
   262de:	f105 0008 	add.w	r0, r5, #8
   262e2:	f7f5 fe51 	bl	1bf88 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   262e6:	4630      	mov	r0, r6
   262e8:	f7ff fe9a 	bl	26020 <net_buf_frags_len>
   262ec:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   262f0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   262f2:	4283      	cmp	r3, r0
		total += read;
   262f4:	44ba      	add	sl, r7
		offset += read;
   262f6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   262fa:	d9b5      	bls.n	26268 <att_chan_read+0x68>
   262fc:	42a7      	cmp	r7, r4
   262fe:	d096      	beq.n	2622e <att_chan_read+0x2e>
   26300:	e7b2      	b.n	26268 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   26302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26306:	4639      	mov	r1, r7
   26308:	4628      	mov	r0, r5
   2630a:	4798      	blx	r3
   2630c:	2800      	cmp	r0, #0
   2630e:	d1e5      	bne.n	262dc <att_chan_read+0xdc>
   26310:	e7aa      	b.n	26268 <att_chan_read+0x68>
		return 0;
   26312:	2700      	movs	r7, #0
   26314:	e7d7      	b.n	262c6 <att_chan_read+0xc6>

00026316 <find_info_cb>:
{
   26316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   26318:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2631a:	6817      	ldr	r7, [r2, #0]
{
   2631c:	4605      	mov	r5, r0
   2631e:	460e      	mov	r6, r1
   26320:	4614      	mov	r4, r2
	if (!data->rsp) {
   26322:	b963      	cbnz	r3, 2633e <find_info_cb+0x28>
   26324:	6850      	ldr	r0, [r2, #4]
   26326:	2101      	movs	r1, #1
   26328:	3008      	adds	r0, #8
   2632a:	f7f5 fe2d 	bl	1bf88 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2632e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   26330:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26332:	781b      	ldrb	r3, [r3, #0]
   26334:	2b00      	cmp	r3, #0
   26336:	bf0c      	ite	eq
   26338:	2301      	moveq	r3, #1
   2633a:	2302      	movne	r3, #2
   2633c:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2633e:	68a3      	ldr	r3, [r4, #8]
   26340:	781b      	ldrb	r3, [r3, #0]
   26342:	2b01      	cmp	r3, #1
   26344:	d003      	beq.n	2634e <find_info_cb+0x38>
   26346:	2b02      	cmp	r3, #2
   26348:	d019      	beq.n	2637e <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2634a:	2000      	movs	r0, #0
   2634c:	e016      	b.n	2637c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2634e:	682b      	ldr	r3, [r5, #0]
   26350:	781b      	ldrb	r3, [r3, #0]
   26352:	2b00      	cmp	r3, #0
   26354:	d1f9      	bne.n	2634a <find_info_cb+0x34>
   26356:	6860      	ldr	r0, [r4, #4]
   26358:	2104      	movs	r1, #4
   2635a:	3008      	adds	r0, #8
   2635c:	f7f5 fe14 	bl	1bf88 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26360:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   26362:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26364:	885b      	ldrh	r3, [r3, #2]
   26366:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   26368:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2636a:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2636c:	899b      	ldrh	r3, [r3, #12]
   2636e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   26372:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   26374:	2804      	cmp	r0, #4
   26376:	bf94      	ite	ls
   26378:	2000      	movls	r0, #0
   2637a:	2001      	movhi	r0, #1
}
   2637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2637e:	682b      	ldr	r3, [r5, #0]
   26380:	781b      	ldrb	r3, [r3, #0]
   26382:	2b02      	cmp	r3, #2
   26384:	d1e1      	bne.n	2634a <find_info_cb+0x34>
   26386:	6860      	ldr	r0, [r4, #4]
   26388:	2112      	movs	r1, #18
   2638a:	3008      	adds	r0, #8
   2638c:	f7f5 fdfc 	bl	1bf88 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   26390:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   26392:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   26394:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   26396:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2639a:	3101      	adds	r1, #1
   2639c:	f7ff fae2 	bl	25964 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   263a0:	6863      	ldr	r3, [r4, #4]
   263a2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   263a6:	899b      	ldrh	r3, [r3, #12]
   263a8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   263aa:	2812      	cmp	r0, #18
   263ac:	e7e3      	b.n	26376 <find_info_cb+0x60>

000263ae <attr_read_group_cb>:
	if (!data->rsp->len) {
   263ae:	68d0      	ldr	r0, [r2, #12]
   263b0:	7803      	ldrb	r3, [r0, #0]
   263b2:	3104      	adds	r1, #4
   263b4:	b913      	cbnz	r3, 263bc <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   263b6:	7001      	strb	r1, [r0, #0]
	return true;
   263b8:	2001      	movs	r0, #1
}
   263ba:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   263bc:	428b      	cmp	r3, r1
   263be:	d0fb      	beq.n	263b8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   263c0:	6891      	ldr	r1, [r2, #8]
   263c2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   263c4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   263c6:	3b04      	subs	r3, #4
   263c8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   263ca:	6110      	str	r0, [r2, #16]
		return false;
   263cc:	4770      	bx	lr

000263ce <chan_req_sent>:
	if (chan->req) {
   263ce:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   263d2:	b133      	cbz	r3, 263e2 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   263d4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   263d8:	2300      	movs	r3, #0
   263da:	f500 7090 	add.w	r0, r0, #288	; 0x120
   263de:	f7fc b80d 	b.w	223fc <k_work_reschedule>
}
   263e2:	4770      	bx	lr

000263e4 <att_exec_write_req>:
   263e4:	2006      	movs	r0, #6
   263e6:	4770      	bx	lr

000263e8 <chan_cfm_sent>:
   263e8:	30f8      	adds	r0, #248	; 0xf8
   263ea:	f3bf 8f5b 	dmb	ish
   263ee:	e850 3f00 	ldrex	r3, [r0]
   263f2:	f023 0302 	bic.w	r3, r3, #2
   263f6:	e840 3200 	strex	r2, r3, [r0]
   263fa:	2a00      	cmp	r2, #0
   263fc:	d1f7      	bne.n	263ee <chan_cfm_sent+0x6>
   263fe:	f3bf 8f5b 	dmb	ish
}
   26402:	4770      	bx	lr

00026404 <chan_rsp_sent>:
   26404:	30f8      	adds	r0, #248	; 0xf8
   26406:	f3bf 8f5b 	dmb	ish
   2640a:	e850 3f00 	ldrex	r3, [r0]
   2640e:	f023 0301 	bic.w	r3, r3, #1
   26412:	e840 3200 	strex	r2, r3, [r0]
   26416:	2a00      	cmp	r2, #0
   26418:	d1f7      	bne.n	2640a <chan_rsp_sent+0x6>
   2641a:	f3bf 8f5b 	dmb	ish
}
   2641e:	4770      	bx	lr

00026420 <bt_att_status>:
{
   26420:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26422:	f3bf 8f5b 	dmb	ish
   26426:	680b      	ldr	r3, [r1, #0]
   26428:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2642c:	07db      	lsls	r3, r3, #31
{
   2642e:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   26430:	d519      	bpl.n	26466 <bt_att_status+0x46>
	if (!chan->att) {
   26432:	f850 0c08 	ldr.w	r0, [r0, #-8]
   26436:	b1b0      	cbz	r0, 26466 <bt_att_status+0x46>
	if (chan->req) {
   26438:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2643c:	b99b      	cbnz	r3, 26466 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2643e:	3004      	adds	r0, #4
   26440:	f7ff fdc9 	bl	25fd6 <sys_slist_get>
	if (!node) {
   26444:	4604      	mov	r4, r0
   26446:	b170      	cbz	r0, 26466 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26448:	4601      	mov	r1, r0
   2644a:	f1a5 0008 	sub.w	r0, r5, #8
   2644e:	f7f0 f98d 	bl	1676c <bt_att_chan_req_send>
   26452:	2800      	cmp	r0, #0
   26454:	da07      	bge.n	26466 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   26456:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2645a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2645c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2645e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   26460:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26462:	b902      	cbnz	r2, 26466 <bt_att_status+0x46>
	list->tail = node;
   26464:	609c      	str	r4, [r3, #8]
}
   26466:	bd38      	pop	{r3, r4, r5, pc}

00026468 <att_req_send_process>:
{
   26468:	b570      	push	{r4, r5, r6, lr}
   2646a:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2646c:	3004      	adds	r0, #4
   2646e:	f7ff fdb2 	bl	25fd6 <sys_slist_get>
	if (!node) {
   26472:	4606      	mov	r6, r0
   26474:	b1c0      	cbz	r0, 264a8 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   26476:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26478:	b153      	cbz	r3, 26490 <att_req_send_process+0x28>
   2647a:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   2647e:	d007      	beq.n	26490 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26480:	681c      	ldr	r4, [r3, #0]
   26482:	b10c      	cbz	r4, 26488 <att_req_send_process+0x20>
   26484:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   26488:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2648c:	b13b      	cbz	r3, 2649e <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2648e:	b964      	cbnz	r4, 264aa <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   26490:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   26492:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   26494:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   26496:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   26498:	b933      	cbnz	r3, 264a8 <att_req_send_process+0x40>
	list->tail = node;
   2649a:	60ae      	str	r6, [r5, #8]
}
   2649c:	e004      	b.n	264a8 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2649e:	4631      	mov	r1, r6
   264a0:	f7f0 f964 	bl	1676c <bt_att_chan_req_send>
   264a4:	2800      	cmp	r0, #0
   264a6:	dbf2      	blt.n	2648e <att_req_send_process+0x26>
}
   264a8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   264aa:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   264ae:	d004      	beq.n	264ba <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   264b0:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   264b4:	b10b      	cbz	r3, 264ba <att_req_send_process+0x52>
   264b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   264ba:	4620      	mov	r0, r4
   264bc:	461c      	mov	r4, r3
   264be:	e7e3      	b.n	26488 <att_req_send_process+0x20>

000264c0 <write_cb>:
{
   264c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   264c2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   264c4:	4601      	mov	r1, r0
{
   264c6:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   264c8:	222a      	movs	r2, #42	; 0x2a
   264ca:	6820      	ldr	r0, [r4, #0]
   264cc:	f000 fc68 	bl	26da0 <bt_gatt_check_perm>
   264d0:	4605      	mov	r5, r0
   264d2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   264d4:	bb20      	cbnz	r0, 26520 <write_cb+0x60>
	if (!data->req) {
   264d6:	7a23      	ldrb	r3, [r4, #8]
   264d8:	b1ab      	cbz	r3, 26506 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   264da:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   264dc:	bf14      	ite	ne
   264de:	2300      	movne	r3, #0
   264e0:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   264e2:	9301      	str	r3, [sp, #4]
   264e4:	8a63      	ldrh	r3, [r4, #18]
   264e6:	9300      	str	r3, [sp, #0]
   264e8:	68b7      	ldr	r7, [r6, #8]
   264ea:	8a23      	ldrh	r3, [r4, #16]
   264ec:	68e2      	ldr	r2, [r4, #12]
   264ee:	6820      	ldr	r0, [r4, #0]
   264f0:	4631      	mov	r1, r6
   264f2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   264f4:	1e03      	subs	r3, r0, #0
   264f6:	db08      	blt.n	2650a <write_cb+0x4a>
   264f8:	8a22      	ldrh	r2, [r4, #16]
   264fa:	4293      	cmp	r3, r2
   264fc:	d10e      	bne.n	2651c <write_cb+0x5c>
	data->err = 0U;
   264fe:	2300      	movs	r3, #0
   26500:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   26502:	2501      	movs	r5, #1
   26504:	e007      	b.n	26516 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   26506:	2302      	movs	r3, #2
   26508:	e7eb      	b.n	264e2 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2650a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2650e:	d305      	bcc.n	2651c <write_cb+0x5c>
		return -err;
   26510:	425b      	negs	r3, r3
   26512:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   26514:	7523      	strb	r3, [r4, #20]
}
   26516:	4628      	mov	r0, r5
   26518:	b003      	add	sp, #12
   2651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2651c:	230e      	movs	r3, #14
   2651e:	e7f9      	b.n	26514 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   26520:	2500      	movs	r5, #0
   26522:	e7f8      	b.n	26516 <write_cb+0x56>

00026524 <bt_att_sent>:
{
   26524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   26526:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   2652a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2652e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   26530:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   26534:	b10b      	cbz	r3, 2653a <bt_att_sent+0x16>
		chan->sent(chan);
   26536:	4638      	mov	r0, r7
   26538:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2653a:	f3bf 8f5b 	dmb	ish
   2653e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   26542:	e853 2f00 	ldrex	r2, [r3]
   26546:	f022 0210 	bic.w	r2, r2, #16
   2654a:	e843 2100 	strex	r1, r2, [r3]
   2654e:	2900      	cmp	r1, #0
   26550:	d1f7      	bne.n	26542 <bt_att_sent+0x1e>
   26552:	f3bf 8f5b 	dmb	ish
	if (!att) {
   26556:	b30c      	cbz	r4, 2659c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   26558:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2655c:	b98b      	cbnz	r3, 26582 <bt_att_sent+0x5e>
   2655e:	6863      	ldr	r3, [r4, #4]
   26560:	b17b      	cbz	r3, 26582 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   26562:	1d20      	adds	r0, r4, #4
   26564:	f7ff fd37 	bl	25fd6 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26568:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2656a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2656c:	4638      	mov	r0, r7
   2656e:	f7ff fda4 	bl	260ba <chan_req_send>
   26572:	2800      	cmp	r0, #0
   26574:	da12      	bge.n	2659c <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   26576:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   26578:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2657a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2657c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2657e:	b903      	cbnz	r3, 26582 <bt_att_sent+0x5e>
	list->tail = node;
   26580:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   26582:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   26586:	4638      	mov	r0, r7
   26588:	f7ff fdb3 	bl	260f2 <process_queue>
	if (!err) {
   2658c:	b130      	cbz	r0, 2659c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2658e:	f104 010c 	add.w	r1, r4, #12
   26592:	4638      	mov	r0, r7
}
   26594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   26598:	f7ff bdab 	b.w	260f2 <process_queue>
}
   2659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002659e <read_cb>:
{
   2659e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   265a2:	f8d2 8000 	ldr.w	r8, [r2]
{
   265a6:	4606      	mov	r6, r0
	data->err = 0x00;
   265a8:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   265aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   265ae:	7317      	strb	r7, [r2, #12]
{
   265b0:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   265b2:	4631      	mov	r1, r6
   265b4:	2215      	movs	r2, #21
   265b6:	f000 fbf3 	bl	26da0 <bt_gatt_check_perm>
   265ba:	4604      	mov	r4, r0
   265bc:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   265be:	b9a0      	cbnz	r0, 265ea <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   265c0:	e9cd 0000 	strd	r0, r0, [sp]
   265c4:	88ab      	ldrh	r3, [r5, #4]
   265c6:	68aa      	ldr	r2, [r5, #8]
   265c8:	4631      	mov	r1, r6
   265ca:	4640      	mov	r0, r8
   265cc:	f7ff fe18 	bl	26200 <att_chan_read>
	if (ret < 0) {
   265d0:	1e03      	subs	r3, r0, #0
   265d2:	da0c      	bge.n	265ee <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   265d4:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   265d8:	bf26      	itte	cs
   265da:	425b      	negcs	r3, r3
   265dc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   265de:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   265e0:	732b      	strb	r3, [r5, #12]
}
   265e2:	4620      	mov	r0, r4
   265e4:	b002      	add	sp, #8
   265e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   265ea:	463c      	mov	r4, r7
   265ec:	e7f9      	b.n	265e2 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   265ee:	2401      	movs	r4, #1
   265f0:	e7f7      	b.n	265e2 <read_cb+0x44>

000265f2 <att_read_blob_req>:
{
   265f2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   265f4:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   265f6:	8813      	ldrh	r3, [r2, #0]
   265f8:	8852      	ldrh	r2, [r2, #2]
   265fa:	9200      	str	r2, [sp, #0]
   265fc:	210c      	movs	r1, #12
   265fe:	220d      	movs	r2, #13
   26600:	f7f0 fe2c 	bl	1725c <att_read_rsp>
}
   26604:	b003      	add	sp, #12
   26606:	f85d fb04 	ldr.w	pc, [sp], #4

0002660a <att_read_req>:
{
   2660a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2660c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2660e:	2200      	movs	r2, #0
   26610:	881b      	ldrh	r3, [r3, #0]
   26612:	9200      	str	r2, [sp, #0]
   26614:	210a      	movs	r1, #10
   26616:	220b      	movs	r2, #11
   26618:	f7f0 fe20 	bl	1725c <att_read_rsp>
}
   2661c:	b003      	add	sp, #12
   2661e:	f85d fb04 	ldr.w	pc, [sp], #4

00026622 <bt_att_init>:
	bt_gatt_init();
   26622:	f7f1 be79 	b.w	18318 <bt_gatt_init>

00026626 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   26626:	898a      	ldrh	r2, [r1, #12]
   26628:	6889      	ldr	r1, [r1, #8]
   2662a:	2300      	movs	r3, #0
   2662c:	f7f0 bfce 	b.w	175cc <att_handle_rsp>

00026630 <att_handle_find_type_rsp>:
   26630:	f7ff bff9 	b.w	26626 <att_handle_find_info_rsp>

00026634 <att_handle_read_type_rsp>:
   26634:	f7ff bff7 	b.w	26626 <att_handle_find_info_rsp>

00026638 <att_handle_read_rsp>:
   26638:	f7ff bff5 	b.w	26626 <att_handle_find_info_rsp>

0002663c <att_handle_read_blob_rsp>:
   2663c:	f7ff bff3 	b.w	26626 <att_handle_find_info_rsp>

00026640 <att_handle_read_mult_rsp>:
   26640:	f7ff bff1 	b.w	26626 <att_handle_find_info_rsp>

00026644 <att_handle_read_group_rsp>:
   26644:	f7ff bfef 	b.w	26626 <att_handle_find_info_rsp>

00026648 <att_handle_write_rsp>:
   26648:	f7ff bfed 	b.w	26626 <att_handle_find_info_rsp>

0002664c <att_handle_prepare_write_rsp>:
   2664c:	f7ff bfeb 	b.w	26626 <att_handle_find_info_rsp>

00026650 <att_handle_exec_write_rsp>:
   26650:	f7ff bfe9 	b.w	26626 <att_handle_find_info_rsp>

00026654 <att_confirm>:
   26654:	f7ff bfe7 	b.w	26626 <att_handle_find_info_rsp>

00026658 <att_mtu_rsp>:
{
   26658:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2665a:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2665c:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2665e:	2b16      	cmp	r3, #22
{
   26660:	4604      	mov	r4, r0
   26662:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   26664:	d806      	bhi.n	26674 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   26666:	2200      	movs	r2, #0
   26668:	2304      	movs	r3, #4
   2666a:	4611      	mov	r1, r2
}
   2666c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   26670:	f7f0 bfac 	b.w	175cc <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   26674:	2b41      	cmp	r3, #65	; 0x41
   26676:	bf28      	it	cs
   26678:	2341      	movcs	r3, #65	; 0x41
   2667a:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2667e:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   26682:	f7ff fd77 	bl	26174 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   26686:	89aa      	ldrh	r2, [r5, #12]
   26688:	2300      	movs	r3, #0
   2668a:	4631      	mov	r1, r6
   2668c:	4620      	mov	r0, r4
   2668e:	e7ed      	b.n	2666c <att_mtu_rsp+0x14>

00026690 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   26690:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   26694:	b570      	push	{r4, r5, r6, lr}
   26696:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   26698:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2669c:	2b00      	cmp	r3, #0
   2669e:	d037      	beq.n	26710 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   266a0:	b171      	cbz	r1, 266c0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   266a2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   266a6:	2b00      	cmp	r3, #0
   266a8:	d032      	beq.n	26710 <bt_att_encrypt_change+0x80>
   266aa:	7c1b      	ldrb	r3, [r3, #16]
   266ac:	07da      	lsls	r2, r3, #31
   266ae:	d52f      	bpl.n	26710 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   266b0:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   266b2:	2200      	movs	r2, #0
   266b4:	4630      	mov	r0, r6
   266b6:	4611      	mov	r1, r2
}
   266b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   266bc:	f7f0 bf86 	b.w	175cc <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   266c0:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   266c2:	4628      	mov	r0, r5
   266c4:	f7f3 f9f4 	bl	19ab0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   266c8:	7a6b      	ldrb	r3, [r5, #9]
   266ca:	2b01      	cmp	r3, #1
   266cc:	d020      	beq.n	26710 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   266ce:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   266d2:	b1ec      	cbz	r4, 26710 <bt_att_encrypt_change+0x80>
   266d4:	7c23      	ldrb	r3, [r4, #16]
   266d6:	07db      	lsls	r3, r3, #31
   266d8:	d51a      	bpl.n	26710 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   266da:	68e3      	ldr	r3, [r4, #12]
   266dc:	2b00      	cmp	r3, #0
   266de:	d0e7      	beq.n	266b0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   266e0:	6962      	ldr	r2, [r4, #20]
   266e2:	7c61      	ldrb	r1, [r4, #17]
   266e4:	4630      	mov	r0, r6
   266e6:	f7f0 fb1b 	bl	16d20 <bt_att_chan_create_pdu>
	if (!buf) {
   266ea:	4605      	mov	r5, r0
   266ec:	b140      	cbz	r0, 26700 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   266ee:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   266f2:	68e3      	ldr	r3, [r4, #12]
   266f4:	4798      	blx	r3
   266f6:	4602      	mov	r2, r0
   266f8:	b120      	cbz	r0, 26704 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   266fa:	4628      	mov	r0, r5
   266fc:	f7f5 fb14 	bl	1bd28 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   26700:	230e      	movs	r3, #14
   26702:	e7d6      	b.n	266b2 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   26704:	4629      	mov	r1, r5
   26706:	4630      	mov	r0, r6
   26708:	f7ef ffc2 	bl	16690 <chan_send>
   2670c:	2800      	cmp	r0, #0
   2670e:	d1f4      	bne.n	266fa <bt_att_encrypt_change+0x6a>
}
   26710:	bd70      	pop	{r4, r5, r6, pc}

00026712 <gatt_ccc_changed>:
{
   26712:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   26714:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   26716:	895a      	ldrh	r2, [r3, #10]
   26718:	428a      	cmp	r2, r1
   2671a:	d003      	beq.n	26724 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2671c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2671e:	68db      	ldr	r3, [r3, #12]
   26720:	b103      	cbz	r3, 26724 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   26722:	4718      	bx	r3
}
   26724:	4770      	bx	lr

00026726 <gatt_indicate_rsp>:
{
   26726:	b510      	push	{r4, lr}
   26728:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2672a:	68a3      	ldr	r3, [r4, #8]
{
   2672c:	460a      	mov	r2, r1
	if (params->func) {
   2672e:	b10b      	cbz	r3, 26734 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   26730:	4621      	mov	r1, r4
   26732:	4798      	blx	r3
	params->_ref--;
   26734:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   26736:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   26738:	3b01      	subs	r3, #1
   2673a:	b2db      	uxtb	r3, r3
   2673c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2673e:	b122      	cbz	r2, 2674a <gatt_indicate_rsp+0x24>
   26740:	b91b      	cbnz	r3, 2674a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   26742:	4620      	mov	r0, r4
}
   26744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   26748:	4710      	bx	r2
}
   2674a:	bd10      	pop	{r4, pc}

0002674c <match_uuid>:
	data->attr = attr;
   2674c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2674e:	8091      	strh	r1, [r2, #4]
}
   26750:	2000      	movs	r0, #0
   26752:	4770      	bx	lr

00026754 <gatt_mtu_rsp>:
{
   26754:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   26756:	6813      	ldr	r3, [r2, #0]
   26758:	4718      	bx	r3

0002675a <ccc_set_cb>:
}
   2675a:	2000      	movs	r0, #0
   2675c:	4770      	bx	lr

0002675e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2675e:	f3bf 8f5b 	dmb	ish
   26762:	6800      	ldr	r0, [r0, #0]
   26764:	f3bf 8f5b 	dmb	ish
}
   26768:	4770      	bx	lr

0002676a <gen_hash_m>:
{
   2676a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2676c:	6807      	ldr	r7, [r0, #0]
   2676e:	783d      	ldrb	r5, [r7, #0]
{
   26770:	b089      	sub	sp, #36	; 0x24
   26772:	4606      	mov	r6, r0
   26774:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   26776:	b10d      	cbz	r5, 2677c <gen_hash_m+0x12>
	switch (u16->val) {
   26778:	2501      	movs	r5, #1
   2677a:	e014      	b.n	267a6 <gen_hash_m+0x3c>
   2677c:	887b      	ldrh	r3, [r7, #2]
   2677e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   26782:	d004      	beq.n	2678e <gen_hash_m+0x24>
   26784:	d812      	bhi.n	267ac <gen_hash_m+0x42>
   26786:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2678a:	2b03      	cmp	r3, #3
   2678c:	d8f4      	bhi.n	26778 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2678e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   26792:	2202      	movs	r2, #2
   26794:	f10d 010e 	add.w	r1, sp, #14
   26798:	4620      	mov	r0, r4
   2679a:	f7fe ff62 	bl	25662 <tc_cmac_update>
   2679e:	b9e0      	cbnz	r0, 267da <gen_hash_m+0x70>
			state->err = -EINVAL;
   267a0:	f06f 0315 	mvn.w	r3, #21
   267a4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   267a6:	4628      	mov	r0, r5
   267a8:	b009      	add	sp, #36	; 0x24
   267aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   267ac:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   267b0:	33ff      	adds	r3, #255	; 0xff
   267b2:	b29b      	uxth	r3, r3
   267b4:	2b04      	cmp	r3, #4
   267b6:	d8df      	bhi.n	26778 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   267b8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   267bc:	2202      	movs	r2, #2
   267be:	f10d 010e 	add.w	r1, sp, #14
   267c2:	4620      	mov	r0, r4
   267c4:	f7fe ff4d 	bl	25662 <tc_cmac_update>
   267c8:	2800      	cmp	r0, #0
   267ca:	d0e9      	beq.n	267a0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   267cc:	887b      	ldrh	r3, [r7, #2]
   267ce:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   267d2:	2202      	movs	r2, #2
   267d4:	f10d 010e 	add.w	r1, sp, #14
   267d8:	e017      	b.n	2680a <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   267da:	887b      	ldrh	r3, [r7, #2]
   267dc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   267e0:	2202      	movs	r2, #2
   267e2:	f10d 010e 	add.w	r1, sp, #14
   267e6:	4620      	mov	r0, r4
   267e8:	f7fe ff3b 	bl	25662 <tc_cmac_update>
   267ec:	2800      	cmp	r0, #0
   267ee:	d0d7      	beq.n	267a0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   267f0:	2000      	movs	r0, #0
   267f2:	2310      	movs	r3, #16
   267f4:	eb0d 0203 	add.w	r2, sp, r3
   267f8:	6877      	ldr	r7, [r6, #4]
   267fa:	9000      	str	r0, [sp, #0]
   267fc:	4631      	mov	r1, r6
   267fe:	47b8      	blx	r7
		if (len < 0) {
   26800:	1e02      	subs	r2, r0, #0
   26802:	da01      	bge.n	26808 <gen_hash_m+0x9e>
			state->err = len;
   26804:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   26806:	e7ce      	b.n	267a6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   26808:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2680a:	4620      	mov	r0, r4
   2680c:	f7fe ff29 	bl	25662 <tc_cmac_update>
   26810:	2800      	cmp	r0, #0
   26812:	d1b1      	bne.n	26778 <gen_hash_m+0xe>
   26814:	e7c4      	b.n	267a0 <gen_hash_m+0x36>

00026816 <atomic_or>:
{
   26816:	4603      	mov	r3, r0
}
   26818:	f3bf 8f5b 	dmb	ish
   2681c:	e853 0f00 	ldrex	r0, [r3]
   26820:	ea40 0201 	orr.w	r2, r0, r1
   26824:	e843 2c00 	strex	ip, r2, [r3]
   26828:	f1bc 0f00 	cmp.w	ip, #0
   2682c:	d1f6      	bne.n	2681c <atomic_or+0x6>
   2682e:	f3bf 8f5b 	dmb	ish
   26832:	4770      	bx	lr

00026834 <bt_addr_le_cmp>:
   26834:	2207      	movs	r2, #7
   26836:	f7ff b885 	b.w	25944 <memcmp>

0002683a <find_ccc_cfg>:
{
   2683a:	b513      	push	{r0, r1, r4, lr}
   2683c:	1c4a      	adds	r2, r1, #1
   2683e:	460c      	mov	r4, r1
		if (conn) {
   26840:	b140      	cbz	r0, 26854 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   26842:	7809      	ldrb	r1, [r1, #0]
   26844:	f7ff fb04 	bl	25e50 <bt_conn_is_peer_addr_le>
   26848:	2800      	cmp	r0, #0
	return NULL;
   2684a:	bf08      	it	eq
   2684c:	2400      	moveq	r4, #0
}
   2684e:	4620      	mov	r0, r4
   26850:	b002      	add	sp, #8
   26852:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   26854:	9000      	str	r0, [sp, #0]
   26856:	4669      	mov	r1, sp
   26858:	f8cd 0003 	str.w	r0, [sp, #3]
   2685c:	4610      	mov	r0, r2
   2685e:	f7ff ffe9 	bl	26834 <bt_addr_le_cmp>
   26862:	2800      	cmp	r0, #0
	return NULL;
   26864:	bf18      	it	ne
   26866:	2400      	movne	r4, #0
   26868:	e7f1      	b.n	2684e <find_ccc_cfg+0x14>

0002686a <ccc_find_cfg>:
{
   2686a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2686c:	7803      	ldrb	r3, [r0, #0]
   2686e:	4293      	cmp	r3, r2
{
   26870:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   26872:	d001      	beq.n	26878 <ccc_find_cfg+0xe>
	return NULL;
   26874:	2000      	movs	r0, #0
}
   26876:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   26878:	3001      	adds	r0, #1
   2687a:	f7ff ffdb 	bl	26834 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   2687e:	2800      	cmp	r0, #0
   26880:	d1f8      	bne.n	26874 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   26882:	4620      	mov	r0, r4
   26884:	e7f7      	b.n	26876 <ccc_find_cfg+0xc>

00026886 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26886:	2207      	movs	r2, #7
   26888:	f7ff b86c 	b.w	25964 <memcpy>

0002688c <clear_ccc_cfg>:
{
   2688c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2688e:	2500      	movs	r5, #0
{
   26890:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   26892:	4669      	mov	r1, sp
   26894:	3001      	adds	r0, #1
   26896:	9500      	str	r5, [sp, #0]
   26898:	f8cd 5003 	str.w	r5, [sp, #3]
   2689c:	f7ff fff3 	bl	26886 <bt_addr_le_copy>
	cfg->id = 0U;
   268a0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   268a2:	8125      	strh	r5, [r4, #8]
}
   268a4:	b003      	add	sp, #12
   268a6:	bd30      	pop	{r4, r5, pc}

000268a8 <atomic_and>:
{
   268a8:	4603      	mov	r3, r0
}
   268aa:	f3bf 8f5b 	dmb	ish
   268ae:	e853 0f00 	ldrex	r0, [r3]
   268b2:	ea00 0201 	and.w	r2, r0, r1
   268b6:	e843 2c00 	strex	ip, r2, [r3]
   268ba:	f1bc 0f00 	cmp.w	ip, #0
   268be:	d1f6      	bne.n	268ae <atomic_and+0x6>
   268c0:	f3bf 8f5b 	dmb	ish
   268c4:	4770      	bx	lr

000268c6 <gatt_exchange_mtu_encode>:
{
   268c6:	b508      	push	{r3, lr}
   268c8:	2102      	movs	r1, #2
   268ca:	3008      	adds	r0, #8
   268cc:	f7f5 fb5c 	bl	1bf88 <net_buf_simple_add>
   268d0:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   268d2:	2241      	movs	r2, #65	; 0x41
   268d4:	2000      	movs	r0, #0
   268d6:	701a      	strb	r2, [r3, #0]
   268d8:	7058      	strb	r0, [r3, #1]
}
   268da:	bd08      	pop	{r3, pc}

000268dc <read_included_uuid_encode>:
{
   268dc:	b510      	push	{r4, lr}
   268de:	2102      	movs	r1, #2
   268e0:	3008      	adds	r0, #8
   268e2:	4614      	mov	r4, r2
   268e4:	f7f5 fb50 	bl	1bf88 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   268e8:	8963      	ldrh	r3, [r4, #10]
   268ea:	8003      	strh	r3, [r0, #0]
}
   268ec:	2000      	movs	r0, #0
   268ee:	bd10      	pop	{r4, pc}

000268f0 <gatt_find_info_encode>:
{
   268f0:	b510      	push	{r4, lr}
   268f2:	2104      	movs	r1, #4
   268f4:	3008      	adds	r0, #8
   268f6:	4614      	mov	r4, r2
   268f8:	f7f5 fb46 	bl	1bf88 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   268fc:	8923      	ldrh	r3, [r4, #8]
   268fe:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   26900:	89e3      	ldrh	r3, [r4, #14]
   26902:	8043      	strh	r3, [r0, #2]
}
   26904:	2000      	movs	r0, #0
   26906:	bd10      	pop	{r4, pc}

00026908 <gatt_read_group_encode>:
{
   26908:	b538      	push	{r3, r4, r5, lr}
   2690a:	f100 0408 	add.w	r4, r0, #8
   2690e:	2104      	movs	r1, #4
   26910:	4620      	mov	r0, r4
   26912:	4615      	mov	r5, r2
   26914:	f7f5 fb38 	bl	1bf88 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   26918:	892b      	ldrh	r3, [r5, #8]
   2691a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2691c:	89eb      	ldrh	r3, [r5, #14]
   2691e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   26920:	7c2b      	ldrb	r3, [r5, #16]
   26922:	b933      	cbnz	r3, 26932 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   26924:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   26928:	4620      	mov	r0, r4
   2692a:	f000 fec5 	bl	276b8 <net_buf_simple_add_le16>
}
   2692e:	2000      	movs	r0, #0
   26930:	bd38      	pop	{r3, r4, r5, pc}
   26932:	f642 0101 	movw	r1, #10241	; 0x2801
   26936:	e7f7      	b.n	26928 <gatt_read_group_encode+0x20>

00026938 <gatt_read_type_encode>:
{
   26938:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2693a:	f100 0408 	add.w	r4, r0, #8
   2693e:	2104      	movs	r1, #4
   26940:	4620      	mov	r0, r4
   26942:	4615      	mov	r5, r2
   26944:	f7f5 fb20 	bl	1bf88 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   26948:	892b      	ldrh	r3, [r5, #8]
   2694a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2694c:	89eb      	ldrh	r3, [r5, #14]
   2694e:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   26950:	7c2b      	ldrb	r3, [r5, #16]
   26952:	2b02      	cmp	r3, #2
   26954:	d004      	beq.n	26960 <gatt_read_type_encode+0x28>
   26956:	2b03      	cmp	r3, #3
   26958:	d009      	beq.n	2696e <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2695a:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2695c:	8859      	ldrh	r1, [r3, #2]
   2695e:	e001      	b.n	26964 <gatt_read_type_encode+0x2c>
   26960:	f642 0102 	movw	r1, #10242	; 0x2802
   26964:	4620      	mov	r0, r4
   26966:	f000 fea7 	bl	276b8 <net_buf_simple_add_le16>
}
   2696a:	2000      	movs	r0, #0
   2696c:	bd38      	pop	{r3, r4, r5, pc}
   2696e:	f642 0103 	movw	r1, #10243	; 0x2803
   26972:	e7f7      	b.n	26964 <gatt_read_type_encode+0x2c>

00026974 <gatt_find_type_encode>:
{
   26974:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   26976:	f100 0508 	add.w	r5, r0, #8
   2697a:	2106      	movs	r1, #6
   2697c:	4628      	mov	r0, r5
   2697e:	4614      	mov	r4, r2
   26980:	f7f5 fb02 	bl	1bf88 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   26984:	8923      	ldrh	r3, [r4, #8]
   26986:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   26988:	89e3      	ldrh	r3, [r4, #14]
   2698a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2698c:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   2698e:	6821      	ldr	r1, [r4, #0]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   26990:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
   26992:	f642 0301 	movw	r3, #10241	; 0x2801
   26996:	bf08      	it	eq
   26998:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   2699c:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2699e:	780b      	ldrb	r3, [r1, #0]
   269a0:	b11b      	cbz	r3, 269aa <gatt_find_type_encode+0x36>
   269a2:	2b02      	cmp	r3, #2
   269a4:	d006      	beq.n	269b4 <gatt_find_type_encode+0x40>
}
   269a6:	2000      	movs	r0, #0
   269a8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   269aa:	8849      	ldrh	r1, [r1, #2]
   269ac:	4628      	mov	r0, r5
   269ae:	f000 fe83 	bl	276b8 <net_buf_simple_add_le16>
}
   269b2:	e7f8      	b.n	269a6 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   269b4:	2210      	movs	r2, #16
   269b6:	3101      	adds	r1, #1
   269b8:	4628      	mov	r0, r5
   269ba:	f000 fe6a 	bl	27692 <net_buf_simple_add_mem>
   269be:	e7f2      	b.n	269a6 <gatt_find_type_encode+0x32>

000269c0 <clear_cf_cfg>:
{
   269c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   269c2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   269c4:	2500      	movs	r5, #0
   269c6:	4669      	mov	r1, sp
   269c8:	3001      	adds	r0, #1
   269ca:	9500      	str	r5, [sp, #0]
   269cc:	f8cd 5003 	str.w	r5, [sp, #3]
   269d0:	f7ff ff59 	bl	26886 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   269d4:	f104 0008 	add.w	r0, r4, #8
   269d8:	2201      	movs	r2, #1
   269da:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   269dc:	340c      	adds	r4, #12
   269de:	f7fe ffcc 	bl	2597a <memset>
   269e2:	f3bf 8f5b 	dmb	ish
   269e6:	e854 3f00 	ldrex	r3, [r4]
   269ea:	e844 5200 	strex	r2, r5, [r4]
   269ee:	2a00      	cmp	r2, #0
   269f0:	d1f9      	bne.n	269e6 <clear_cf_cfg+0x26>
   269f2:	f3bf 8f5b 	dmb	ish
}
   269f6:	b003      	add	sp, #12
   269f8:	bd30      	pop	{r4, r5, pc}

000269fa <gatt_write_ccc_buf>:
{
   269fa:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   269fc:	f100 0508 	add.w	r5, r0, #8
   26a00:	2102      	movs	r1, #2
   26a02:	4628      	mov	r0, r5
   26a04:	4614      	mov	r4, r2
   26a06:	f7f5 fabf 	bl	1bf88 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   26a0a:	8963      	ldrh	r3, [r4, #10]
   26a0c:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   26a0e:	89a1      	ldrh	r1, [r4, #12]
   26a10:	4628      	mov	r0, r5
   26a12:	f000 fe51 	bl	276b8 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26a16:	2104      	movs	r1, #4
   26a18:	f104 0010 	add.w	r0, r4, #16
   26a1c:	f7ff fefb 	bl	26816 <atomic_or>
}
   26a20:	2000      	movs	r0, #0
   26a22:	bd38      	pop	{r3, r4, r5, pc}

00026a24 <sc_restore_rsp>:
{
   26a24:	b538      	push	{r3, r4, r5, lr}
   26a26:	4604      	mov	r4, r0
   26a28:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   26a2a:	f7f0 ffd1 	bl	179d0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   26a2e:	b130      	cbz	r0, 26a3e <sc_restore_rsp+0x1a>
   26a30:	7a03      	ldrb	r3, [r0, #8]
   26a32:	07db      	lsls	r3, r3, #31
   26a34:	d503      	bpl.n	26a3e <sc_restore_rsp+0x1a>
   26a36:	2101      	movs	r1, #1
   26a38:	300c      	adds	r0, #12
   26a3a:	f7ff feec 	bl	26816 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   26a3e:	b985      	cbnz	r5, 26a62 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   26a40:	7a20      	ldrb	r0, [r4, #8]
   26a42:	f104 0190 	add.w	r1, r4, #144	; 0x90
   26a46:	f7f0 fff1 	bl	17a2c <find_sc_cfg>
		if (sc_cfg) {
   26a4a:	4604      	mov	r4, r0
   26a4c:	b148      	cbz	r0, 26a62 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   26a4e:	4629      	mov	r1, r5
   26a50:	2204      	movs	r2, #4
   26a52:	3008      	adds	r0, #8
   26a54:	f7fe ff91 	bl	2597a <memset>
		sc_store(cfg);
   26a58:	4620      	mov	r0, r4
}
   26a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   26a5e:	f7f1 b853 	b.w	17b08 <sc_store>
}
   26a62:	bd38      	pop	{r3, r4, r5, pc}

00026a64 <read_appearance>:
{
   26a64:	b513      	push	{r0, r1, r4, lr}
   26a66:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   26a6a:	4610      	mov	r0, r2
	if (offset > value_len) {
   26a6c:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   26a6e:	f04f 0200 	mov.w	r2, #0
   26a72:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   26a76:	d80d      	bhi.n	26a94 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   26a78:	f1c1 0402 	rsb	r4, r1, #2
   26a7c:	429c      	cmp	r4, r3
   26a7e:	bfa8      	it	ge
   26a80:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   26a82:	f10d 0306 	add.w	r3, sp, #6
   26a86:	4622      	mov	r2, r4
   26a88:	4419      	add	r1, r3
   26a8a:	f7fe ff6b 	bl	25964 <memcpy>
}
   26a8e:	4620      	mov	r0, r4
   26a90:	b002      	add	sp, #8
   26a92:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26a94:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   26a98:	e7f9      	b.n	26a8e <read_appearance+0x2a>

00026a9a <read_name>:
{
   26a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a9e:	4698      	mov	r8, r3
   26aa0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   26aa4:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   26aa6:	f7ee fb5b 	bl	15160 <bt_get_name>
   26aaa:	4607      	mov	r7, r0
				 strlen(name));
   26aac:	f7fe ff1f 	bl	258ee <strlen>
	if (offset > value_len) {
   26ab0:	b283      	uxth	r3, r0
   26ab2:	42b3      	cmp	r3, r6
   26ab4:	d30c      	bcc.n	26ad0 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   26ab6:	1b9c      	subs	r4, r3, r6
   26ab8:	4544      	cmp	r4, r8
   26aba:	bfa8      	it	ge
   26abc:	4644      	movge	r4, r8
   26abe:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26ac0:	4622      	mov	r2, r4
   26ac2:	19b9      	adds	r1, r7, r6
   26ac4:	4628      	mov	r0, r5
   26ac6:	f7fe ff4d 	bl	25964 <memcpy>
}
   26aca:	4620      	mov	r0, r4
   26acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26ad0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   26ad4:	e7f9      	b.n	26aca <read_name+0x30>

00026ad6 <bt_gatt_attr_read_ccc>:
{
   26ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   26ad8:	68c9      	ldr	r1, [r1, #12]
{
   26ada:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   26ade:	4615      	mov	r5, r2
   26ae0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   26ae2:	f7ff feaa 	bl	2683a <find_ccc_cfg>
	if (cfg) {
   26ae6:	b100      	cbz	r0, 26aea <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   26ae8:	8900      	ldrh	r0, [r0, #8]
   26aea:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   26aee:	2e02      	cmp	r6, #2
   26af0:	d80e      	bhi.n	26b10 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   26af2:	f1c6 0402 	rsb	r4, r6, #2
   26af6:	42bc      	cmp	r4, r7
   26af8:	bfa8      	it	ge
   26afa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26afc:	f10d 0306 	add.w	r3, sp, #6
   26b00:	4622      	mov	r2, r4
   26b02:	1999      	adds	r1, r3, r6
   26b04:	4628      	mov	r0, r5
   26b06:	f7fe ff2d 	bl	25964 <memcpy>
}
   26b0a:	4620      	mov	r0, r4
   26b0c:	b003      	add	sp, #12
   26b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26b10:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   26b14:	e7f9      	b.n	26b0a <bt_gatt_attr_read_ccc+0x34>

00026b16 <cf_read>:
{
   26b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26b18:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   26b1a:	2300      	movs	r3, #0
{
   26b1c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   26b20:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26b24:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   26b26:	f7f0 ff53 	bl	179d0 <find_cf_cfg>
	if (cfg) {
   26b2a:	b128      	cbz	r0, 26b38 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   26b2c:	f100 0108 	add.w	r1, r0, #8
   26b30:	2201      	movs	r2, #1
   26b32:	a801      	add	r0, sp, #4
   26b34:	f7fe ff16 	bl	25964 <memcpy>
	if (offset > value_len) {
   26b38:	2e01      	cmp	r6, #1
   26b3a:	d80d      	bhi.n	26b58 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   26b3c:	f1c6 0401 	rsb	r4, r6, #1
   26b40:	42bc      	cmp	r4, r7
   26b42:	bfa8      	it	ge
   26b44:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26b46:	ab01      	add	r3, sp, #4
   26b48:	4622      	mov	r2, r4
   26b4a:	1999      	adds	r1, r3, r6
   26b4c:	4628      	mov	r0, r5
   26b4e:	f7fe ff09 	bl	25964 <memcpy>
}
   26b52:	4620      	mov	r0, r4
   26b54:	b003      	add	sp, #12
   26b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26b58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   26b5c:	e7f9      	b.n	26b52 <cf_read+0x3c>

00026b5e <bt_gatt_attr_read_service>:
{
   26b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   26b60:	68c9      	ldr	r1, [r1, #12]
{
   26b62:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   26b66:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   26b68:	780b      	ldrb	r3, [r1, #0]
{
   26b6a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26b6c:	b993      	cbnz	r3, 26b94 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26b6e:	884b      	ldrh	r3, [r1, #2]
   26b70:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   26b74:	2d02      	cmp	r5, #2
   26b76:	d819      	bhi.n	26bac <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26b78:	f1c5 0202 	rsb	r2, r5, #2
   26b7c:	4294      	cmp	r4, r2
   26b7e:	bfa8      	it	ge
   26b80:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26b82:	f10d 0306 	add.w	r3, sp, #6
   26b86:	4622      	mov	r2, r4
   26b88:	1959      	adds	r1, r3, r5
   26b8a:	f7fe feeb 	bl	25964 <memcpy>
}
   26b8e:	4620      	mov	r0, r4
   26b90:	b003      	add	sp, #12
   26b92:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   26b94:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   26b96:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   26b9a:	d807      	bhi.n	26bac <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   26b9c:	f1c5 0210 	rsb	r2, r5, #16
   26ba0:	4294      	cmp	r4, r2
   26ba2:	bfa8      	it	ge
   26ba4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26ba6:	4622      	mov	r2, r4
   26ba8:	4429      	add	r1, r5
   26baa:	e7ee      	b.n	26b8a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26bac:	f06f 0406 	mvn.w	r4, #6
   26bb0:	e7ed      	b.n	26b8e <bt_gatt_attr_read_service+0x30>

00026bb2 <gatt_sub_remove>:
{
   26bb2:	b538      	push	{r3, r4, r5, lr}
   26bb4:	460c      	mov	r4, r1
	if (params) {
   26bb6:	4619      	mov	r1, r3
   26bb8:	b16b      	cbz	r3, 26bd6 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   26bba:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   26bbe:	695b      	ldr	r3, [r3, #20]
   26bc0:	b982      	cbnz	r2, 26be4 <gatt_sub_remove+0x32>
   26bc2:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   26bc4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   26bc6:	4295      	cmp	r5, r2
   26bc8:	d100      	bne.n	26bcc <gatt_sub_remove+0x1a>
	list->tail = node;
   26bca:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   26bcc:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   26bce:	680d      	ldr	r5, [r1, #0]
   26bd0:	614b      	str	r3, [r1, #20]
   26bd2:	461a      	mov	r2, r3
   26bd4:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   26bd6:	68a3      	ldr	r3, [r4, #8]
   26bd8:	b953      	cbnz	r3, 26bf0 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   26bda:	4620      	mov	r0, r4
}
   26bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   26be0:	f7f1 b808 	b.w	17bf4 <gatt_sub_free>
   26be4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26be6:	68e3      	ldr	r3, [r4, #12]
   26be8:	429d      	cmp	r5, r3
	list->tail = node;
   26bea:	bf08      	it	eq
   26bec:	60e2      	streq	r2, [r4, #12]
}
   26bee:	e7ed      	b.n	26bcc <gatt_sub_remove+0x1a>
}
   26bf0:	bd38      	pop	{r3, r4, r5, pc}

00026bf2 <gatt_write_ccc_rsp>:
{
   26bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26bf6:	9c06      	ldr	r4, [sp, #24]
   26bf8:	460e      	mov	r6, r1
   26bfa:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26bfc:	f06f 0104 	mvn.w	r1, #4
   26c00:	f104 0010 	add.w	r0, r4, #16
   26c04:	f7ff fe50 	bl	268a8 <atomic_and>
	if (err) {
   26c08:	b1e6      	cbz	r6, 26c44 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   26c0a:	4628      	mov	r0, r5
   26c0c:	f7f0 ff2e 	bl	17a6c <gatt_sub_find>
		if (!sub) {
   26c10:	4601      	mov	r1, r0
   26c12:	b308      	cbz	r0, 26c58 <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   26c14:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   26c16:	b143      	cbz	r3, 26c2a <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26c18:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   26c1a:	f104 0014 	add.w	r0, r4, #20
   26c1e:	4283      	cmp	r3, r0
   26c20:	d10b      	bne.n	26c3a <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   26c22:	4623      	mov	r3, r4
   26c24:	4628      	mov	r0, r5
   26c26:	f7ff ffc4 	bl	26bb2 <gatt_sub_remove>
	if (params->write) {
   26c2a:	6863      	ldr	r3, [r4, #4]
   26c2c:	b1a3      	cbz	r3, 26c58 <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   26c2e:	4631      	mov	r1, r6
   26c30:	4628      	mov	r0, r5
   26c32:	2200      	movs	r2, #0
}
   26c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   26c38:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   26c3a:	2a00      	cmp	r2, #0
   26c3c:	d0f5      	beq.n	26c2a <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26c3e:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   26c40:	6812      	ldr	r2, [r2, #0]
   26c42:	e7ec      	b.n	26c1e <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   26c44:	89a3      	ldrh	r3, [r4, #12]
   26c46:	2b00      	cmp	r3, #0
   26c48:	d1ef      	bne.n	26c2a <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   26c4a:	6827      	ldr	r7, [r4, #0]
   26c4c:	4633      	mov	r3, r6
   26c4e:	4632      	mov	r2, r6
   26c50:	4621      	mov	r1, r4
   26c52:	4628      	mov	r0, r5
   26c54:	47b8      	blx	r7
   26c56:	e7e8      	b.n	26c2a <gatt_write_ccc_rsp+0x38>
}
   26c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026c5c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   26c5c:	2a02      	cmp	r2, #2
{
   26c5e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   26c60:	d108      	bne.n	26c74 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   26c62:	2300      	movs	r3, #0
   26c64:	f100 0190 	add.w	r1, r0, #144	; 0x90
   26c68:	461a      	mov	r2, r3
   26c6a:	7a00      	ldrb	r0, [r0, #8]
   26c6c:	f7f0 ff7e 	bl	17b6c <sc_save>
}
   26c70:	2002      	movs	r0, #2
   26c72:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   26c74:	f7f1 facc 	bl	18210 <sc_clear>
   26c78:	e7fa      	b.n	26c70 <sc_ccc_cfg_write+0x14>

00026c7a <gatt_req_send>:
{
   26c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c7e:	4606      	mov	r6, r0
   26c80:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   26c82:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   26c86:	2100      	movs	r1, #0
{
   26c88:	f89d a020 	ldrb.w	sl, [sp, #32]
   26c8c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   26c90:	4617      	mov	r7, r2
   26c92:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   26c94:	f7f0 fc72 	bl	1757c <bt_att_req_alloc>
	if (!req) {
   26c98:	4604      	mov	r4, r0
   26c9a:	b920      	cbnz	r0, 26ca6 <gatt_req_send+0x2c>
		return -ENOMEM;
   26c9c:	f06f 050b 	mvn.w	r5, #11
}
   26ca0:	4628      	mov	r0, r5
   26ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   26ca6:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   26caa:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   26cae:	60c5      	str	r5, [r0, #12]
	req->func = func;
   26cb0:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   26cb4:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   26cb6:	4642      	mov	r2, r8
   26cb8:	4651      	mov	r1, sl
   26cba:	4630      	mov	r0, r6
   26cbc:	f7f0 f9c4 	bl	17048 <bt_att_create_pdu>
	if (!buf) {
   26cc0:	b918      	cbnz	r0, 26cca <gatt_req_send+0x50>
		bt_att_req_free(req);
   26cc2:	4620      	mov	r0, r4
   26cc4:	f7f0 fc70 	bl	175a8 <bt_att_req_free>
   26cc8:	e7e8      	b.n	26c9c <gatt_req_send+0x22>
	req->buf = buf;
   26cca:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   26ccc:	463a      	mov	r2, r7
   26cce:	4641      	mov	r1, r8
   26cd0:	47a8      	blx	r5
	if (err) {
   26cd2:	4605      	mov	r5, r0
   26cd4:	b118      	cbz	r0, 26cde <gatt_req_send+0x64>
		bt_att_req_free(req);
   26cd6:	4620      	mov	r0, r4
   26cd8:	f7f0 fc66 	bl	175a8 <bt_att_req_free>
   26cdc:	e7e0      	b.n	26ca0 <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   26cde:	4621      	mov	r1, r4
   26ce0:	4630      	mov	r0, r6
   26ce2:	f7f0 fdcb 	bl	1787c <bt_att_req_send>
	if (err) {
   26ce6:	4605      	mov	r5, r0
   26ce8:	2800      	cmp	r0, #0
   26cea:	d0d9      	beq.n	26ca0 <gatt_req_send+0x26>
   26cec:	e7f3      	b.n	26cd6 <gatt_req_send+0x5c>

00026cee <bt_gatt_attr_value_handle>:
{
   26cee:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26cf0:	4604      	mov	r4, r0
   26cf2:	b910      	cbnz	r0, 26cfa <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   26cf4:	2000      	movs	r0, #0
}
   26cf6:	b002      	add	sp, #8
   26cf8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26cfa:	2300      	movs	r3, #0
   26cfc:	f88d 3004 	strb.w	r3, [sp, #4]
   26d00:	6800      	ldr	r0, [r0, #0]
   26d02:	f642 0303 	movw	r3, #10243	; 0x2803
   26d06:	a901      	add	r1, sp, #4
   26d08:	f8ad 3006 	strh.w	r3, [sp, #6]
   26d0c:	f7fe fe9d 	bl	25a4a <bt_uuid_cmp>
   26d10:	2800      	cmp	r0, #0
   26d12:	d1ef      	bne.n	26cf4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   26d14:	68e3      	ldr	r3, [r4, #12]
   26d16:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26d18:	2800      	cmp	r0, #0
   26d1a:	d1ec      	bne.n	26cf6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26d1c:	4620      	mov	r0, r4
   26d1e:	f7f1 fb77 	bl	18410 <bt_gatt_attr_get_handle>
   26d22:	3001      	adds	r0, #1
   26d24:	b280      	uxth	r0, r0
	return handle;
   26d26:	e7e6      	b.n	26cf6 <bt_gatt_attr_value_handle+0x8>

00026d28 <bt_gatt_attr_read_chrc>:
{
   26d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   26d2a:	68cf      	ldr	r7, [r1, #12]
{
   26d2c:	b087      	sub	sp, #28
   26d2e:	4608      	mov	r0, r1
   26d30:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   26d32:	79bb      	ldrb	r3, [r7, #6]
   26d34:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26d38:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   26d3c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26d3e:	f7ff ffd6 	bl	26cee <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26d42:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26d44:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26d48:	780b      	ldrb	r3, [r1, #0]
   26d4a:	b99b      	cbnz	r3, 26d74 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   26d4c:	884b      	ldrh	r3, [r1, #2]
   26d4e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   26d52:	2105      	movs	r1, #5
	if (offset > value_len) {
   26d54:	42b1      	cmp	r1, r6
   26d56:	d315      	bcc.n	26d84 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   26d58:	1b89      	subs	r1, r1, r6
   26d5a:	42a1      	cmp	r1, r4
   26d5c:	bfa8      	it	ge
   26d5e:	4621      	movge	r1, r4
   26d60:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   26d62:	ab01      	add	r3, sp, #4
   26d64:	4622      	mov	r2, r4
   26d66:	1999      	adds	r1, r3, r6
   26d68:	4628      	mov	r0, r5
   26d6a:	f7fe fdfb 	bl	25964 <memcpy>
}
   26d6e:	4620      	mov	r0, r4
   26d70:	b007      	add	sp, #28
   26d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   26d74:	3101      	adds	r1, #1
   26d76:	2210      	movs	r2, #16
   26d78:	f10d 0007 	add.w	r0, sp, #7
   26d7c:	f7fe fdf2 	bl	25964 <memcpy>
		value_len += 16U;
   26d80:	2113      	movs	r1, #19
   26d82:	e7e7      	b.n	26d54 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26d84:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   26d88:	e7f1      	b.n	26d6e <bt_gatt_attr_read_chrc+0x46>

00026d8a <bt_gatt_foreach_attr>:
{
   26d8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   26d8c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26d90:	2300      	movs	r3, #0
   26d92:	9300      	str	r3, [sp, #0]
   26d94:	461a      	mov	r2, r3
   26d96:	f7f1 fb87 	bl	184a8 <bt_gatt_foreach_attr_type>
}
   26d9a:	b005      	add	sp, #20
   26d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00026da0 <bt_gatt_check_perm>:
{
   26da0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   26da2:	07d4      	lsls	r4, r2, #31
{
   26da4:	4605      	mov	r5, r0
   26da6:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   26da8:	d504      	bpl.n	26db4 <bt_gatt_check_perm+0x14>
   26daa:	f010 0f15 	tst.w	r0, #21
   26dae:	d01e      	beq.n	26dee <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26db0:	684b      	ldr	r3, [r1, #4]
   26db2:	b1e3      	cbz	r3, 26dee <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   26db4:	0793      	lsls	r3, r2, #30
   26db6:	d504      	bpl.n	26dc2 <bt_gatt_check_perm+0x22>
   26db8:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   26dbc:	d019      	beq.n	26df2 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26dbe:	688b      	ldr	r3, [r1, #8]
   26dc0:	b1bb      	cbz	r3, 26df2 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   26dc2:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26dc6:	f014 0f30 	tst.w	r4, #48	; 0x30
   26dca:	d103      	bne.n	26dd4 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26dcc:	f014 000c 	ands.w	r0, r4, #12
   26dd0:	d107      	bne.n	26de2 <bt_gatt_check_perm+0x42>
}
   26dd2:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   26dd4:	4628      	mov	r0, r5
   26dd6:	f7ff f839 	bl	25e4c <bt_conn_get_security>
   26dda:	2802      	cmp	r0, #2
   26ddc:	d8f6      	bhi.n	26dcc <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   26dde:	2005      	movs	r0, #5
   26de0:	e7f7      	b.n	26dd2 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   26de2:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   26de4:	2b00      	cmp	r3, #0
   26de6:	bf14      	ite	ne
   26de8:	2000      	movne	r0, #0
   26dea:	200f      	moveq	r0, #15
   26dec:	e7f1      	b.n	26dd2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   26dee:	2002      	movs	r0, #2
   26df0:	e7ef      	b.n	26dd2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   26df2:	2003      	movs	r0, #3
   26df4:	e7ed      	b.n	26dd2 <bt_gatt_check_perm+0x32>

00026df6 <gatt_discover_next>:
{
   26df6:	b570      	push	{r4, r5, r6, lr}
   26df8:	4605      	mov	r5, r0
   26dfa:	4614      	mov	r4, r2
	if (!last_handle)
   26dfc:	b929      	cbnz	r1, 26e0a <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   26dfe:	4621      	mov	r1, r4
   26e00:	4628      	mov	r0, r5
   26e02:	f7f2 f809 	bl	18e18 <bt_gatt_discover>
   26e06:	b928      	cbnz	r0, 26e14 <gatt_discover_next+0x1e>
}
   26e08:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   26e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   26e0e:	4291      	cmp	r1, r2
   26e10:	d107      	bne.n	26e22 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   26e12:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   26e14:	6863      	ldr	r3, [r4, #4]
   26e16:	4622      	mov	r2, r4
   26e18:	4628      	mov	r0, r5
   26e1a:	2100      	movs	r1, #0
}
   26e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   26e20:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   26e22:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   26e24:	1c4b      	adds	r3, r1, #1
   26e26:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   26e28:	429a      	cmp	r2, r3
		params->start_handle++;
   26e2a:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   26e2c:	d2e7      	bcs.n	26dfe <gatt_discover_next+0x8>
   26e2e:	e7f1      	b.n	26e14 <gatt_discover_next+0x1e>

00026e30 <gatt_find_type_rsp>:
{
   26e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e34:	b088      	sub	sp, #32
   26e36:	4607      	mov	r7, r0
   26e38:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   26e3c:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   26e3e:	b911      	cbnz	r1, 26e46 <gatt_find_type_rsp+0x16>
   26e40:	f013 0803 	ands.w	r8, r3, #3
   26e44:	d008      	beq.n	26e58 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   26e46:	f8d9 3004 	ldr.w	r3, [r9, #4]
   26e4a:	464a      	mov	r2, r9
   26e4c:	2100      	movs	r1, #0
   26e4e:	4638      	mov	r0, r7
   26e50:	4798      	blx	r3
}
   26e52:	b008      	add	sp, #32
   26e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   26e58:	f3c3 0387 	ubfx	r3, r3, #2, #8
   26e5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   26e60:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26e62:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   26e66:	42ac      	cmp	r4, r5
   26e68:	d105      	bne.n	26e76 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   26e6a:	464a      	mov	r2, r9
   26e6c:	4641      	mov	r1, r8
   26e6e:	4638      	mov	r0, r7
   26e70:	f7ff ffc1 	bl	26df6 <gatt_discover_next>
	return;
   26e74:	e7ed      	b.n	26e52 <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   26e76:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   26e78:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   26e7c:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26e80:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   26e82:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   26e86:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   26e8a:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   26e8c:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   26e8e:	bf0c      	ite	eq
   26e90:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   26e94:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26e96:	ab01      	add	r3, sp, #4
   26e98:	f8ad 1002 	strh.w	r1, [sp, #2]
   26e9c:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   26e9e:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26ea2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   26ea6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   26eaa:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   26eae:	f8cd d00c 	str.w	sp, [sp, #12]
   26eb2:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   26eb6:	464a      	mov	r2, r9
   26eb8:	a903      	add	r1, sp, #12
   26eba:	4638      	mov	r0, r7
   26ebc:	4798      	blx	r3
   26ebe:	3404      	adds	r4, #4
   26ec0:	2800      	cmp	r0, #0
   26ec2:	d1d0      	bne.n	26e66 <gatt_find_type_rsp+0x36>
   26ec4:	e7c5      	b.n	26e52 <gatt_find_type_rsp+0x22>

00026ec6 <bt_gatt_notification>:
{
   26ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26eca:	4607      	mov	r7, r0
   26ecc:	4688      	mov	r8, r1
   26ece:	4691      	mov	r9, r2
   26ed0:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   26ed2:	f7f0 fdcb 	bl	17a6c <gatt_sub_find>
	if (!sub) {
   26ed6:	b1f8      	cbz	r0, 26f18 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   26ed8:	6883      	ldr	r3, [r0, #8]
   26eda:	b1eb      	cbz	r3, 26f18 <bt_gatt_notification+0x52>
   26edc:	f1b3 0614 	subs.w	r6, r3, #20
   26ee0:	d01a      	beq.n	26f18 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26ee2:	681c      	ldr	r4, [r3, #0]
   26ee4:	b104      	cbz	r4, 26ee8 <bt_gatt_notification+0x22>
   26ee6:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   26ee8:	8933      	ldrh	r3, [r6, #8]
   26eea:	4543      	cmp	r3, r8
   26eec:	d10a      	bne.n	26f04 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   26eee:	6835      	ldr	r5, [r6, #0]
   26ef0:	4653      	mov	r3, sl
   26ef2:	464a      	mov	r2, r9
   26ef4:	4631      	mov	r1, r6
   26ef6:	4638      	mov	r0, r7
   26ef8:	47a8      	blx	r5
   26efa:	b918      	cbnz	r0, 26f04 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   26efc:	4631      	mov	r1, r6
   26efe:	4638      	mov	r0, r7
   26f00:	f7f2 fc4e 	bl	197a0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   26f04:	b144      	cbz	r4, 26f18 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   26f06:	f114 0514 	adds.w	r5, r4, #20
   26f0a:	d002      	beq.n	26f12 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26f0c:	6965      	ldr	r5, [r4, #20]
   26f0e:	b105      	cbz	r5, 26f12 <bt_gatt_notification+0x4c>
   26f10:	3d14      	subs	r5, #20
{
   26f12:	4626      	mov	r6, r4
   26f14:	462c      	mov	r4, r5
   26f16:	e7e7      	b.n	26ee8 <bt_gatt_notification+0x22>
}
   26f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026f1c <bt_gatt_change_aware>:
{
   26f1c:	b538      	push	{r3, r4, r5, lr}
   26f1e:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   26f20:	f7f0 fd56 	bl	179d0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26f24:	b910      	cbnz	r0, 26f2c <bt_gatt_change_aware+0x10>
		return true;
   26f26:	2501      	movs	r5, #1
}
   26f28:	4628      	mov	r0, r5
   26f2a:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26f2c:	7a03      	ldrb	r3, [r0, #8]
   26f2e:	07d9      	lsls	r1, r3, #31
   26f30:	d5f9      	bpl.n	26f26 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26f32:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   26f36:	4620      	mov	r0, r4
   26f38:	f7ff fc11 	bl	2675e <atomic_get>
   26f3c:	07c2      	lsls	r2, r0, #31
   26f3e:	d4f2      	bmi.n	26f26 <bt_gatt_change_aware+0xa>
	if (!req) {
   26f40:	2d00      	cmp	r5, #0
   26f42:	d0f1      	beq.n	26f28 <bt_gatt_change_aware+0xc>
   26f44:	4620      	mov	r0, r4
   26f46:	f7ff fc0a 	bl	2675e <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   26f4a:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26f4c:	f3c0 0540 	ubfx	r5, r0, #1, #1
   26f50:	d509      	bpl.n	26f66 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26f52:	f06f 0102 	mvn.w	r1, #2
   26f56:	4620      	mov	r0, r4
   26f58:	f7ff fca6 	bl	268a8 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26f5c:	2101      	movs	r1, #1
   26f5e:	4620      	mov	r0, r4
   26f60:	f7ff fc59 	bl	26816 <atomic_or>
}
   26f64:	e7e0      	b.n	26f28 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   26f66:	2102      	movs	r1, #2
   26f68:	e7f9      	b.n	26f5e <bt_gatt_change_aware+0x42>

00026f6a <ccc_delayed_store>:
{
   26f6a:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   26f6c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   26f70:	4605      	mov	r5, r0
		if (!conn) {
   26f72:	b194      	cbz	r4, 26f9a <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   26f74:	f104 0690 	add.w	r6, r4, #144	; 0x90
   26f78:	7a20      	ldrb	r0, [r4, #8]
   26f7a:	4631      	mov	r1, r6
   26f7c:	f7fe fe16 	bl	25bac <bt_addr_le_is_bonded>
   26f80:	b158      	cbz	r0, 26f9a <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   26f82:	2300      	movs	r3, #0
   26f84:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   26f88:	7a20      	ldrb	r0, [r4, #8]
   26f8a:	4631      	mov	r1, r6
   26f8c:	f7f2 fdd0 	bl	19b30 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   26f90:	4620      	mov	r0, r4
}
   26f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   26f96:	f7ee bf5f 	b.w	15e58 <bt_conn_unref>
}
   26f9a:	bd70      	pop	{r4, r5, r6, pc}

00026f9c <smp_pairing_req>:
}
   26f9c:	2007      	movs	r0, #7
   26f9e:	4770      	bx	lr

00026fa0 <bt_smp_aes_cmac>:
{
   26fa0:	b570      	push	{r4, r5, r6, lr}
   26fa2:	b0c2      	sub	sp, #264	; 0x108
   26fa4:	460d      	mov	r5, r1
   26fa6:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26fa8:	4601      	mov	r1, r0
   26faa:	aa16      	add	r2, sp, #88	; 0x58
   26fac:	4668      	mov	r0, sp
{
   26fae:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   26fb0:	f7fe fb2c 	bl	2560c <tc_cmac_setup>
   26fb4:	b150      	cbz	r0, 26fcc <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   26fb6:	4632      	mov	r2, r6
   26fb8:	4629      	mov	r1, r5
   26fba:	4668      	mov	r0, sp
   26fbc:	f7fe fb51 	bl	25662 <tc_cmac_update>
   26fc0:	b120      	cbz	r0, 26fcc <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   26fc2:	4669      	mov	r1, sp
   26fc4:	4620      	mov	r0, r4
   26fc6:	f7fe fbb8 	bl	2573a <tc_cmac_final>
   26fca:	b918      	cbnz	r0, 26fd4 <bt_smp_aes_cmac+0x34>
		return -EIO;
   26fcc:	f06f 0004 	mvn.w	r0, #4
}
   26fd0:	b042      	add	sp, #264	; 0x108
   26fd2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26fd4:	2000      	movs	r0, #0
   26fd6:	e7fb      	b.n	26fd0 <bt_smp_aes_cmac+0x30>

00026fd8 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26fda:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   26fdc:	2200      	movs	r2, #0
   26fde:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   26fe0:	4604      	mov	r4, r0
   26fe2:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   26fe4:	460a      	mov	r2, r1
   26fe6:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   26fea:	2106      	movs	r1, #6
   26fec:	f7fe ff9b 	bl	25f26 <bt_l2cap_send_cb>
   26ff0:	b128      	cbz	r0, 26ffe <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   26ff2:	4628      	mov	r0, r5
}
   26ff4:	b003      	add	sp, #12
   26ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   26ffa:	f7f4 be95 	b.w	1bd28 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   26ffe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27002:	2300      	movs	r3, #0
   27004:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
   27008:	b003      	add	sp, #12
   2700a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2700e:	f7fb b9f5 	b.w	223fc <k_work_reschedule>

00027012 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   27012:	b510      	push	{r4, lr}
   27014:	1e43      	subs	r3, r0, #1
   27016:	f100 0210 	add.w	r2, r0, #16
   2701a:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2701c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   27020:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27024:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   27026:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   27028:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2702a:	d1f7      	bne.n	2701c <sys_mem_swap.constprop.0+0xa>
	}
}
   2702c:	bd10      	pop	{r4, pc}

0002702e <smp_f6>:
{
   2702e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27030:	b097      	sub	sp, #92	; 0x5c
   27032:	4605      	mov	r5, r0
   27034:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   27036:	a805      	add	r0, sp, #20
   27038:	2210      	movs	r2, #16
{
   2703a:	461c      	mov	r4, r3
   2703c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2703e:	f7f2 feb1 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   27042:	2210      	movs	r2, #16
   27044:	4631      	mov	r1, r6
   27046:	a809      	add	r0, sp, #36	; 0x24
   27048:	f7f2 feac 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2704c:	4621      	mov	r1, r4
   2704e:	2210      	movs	r2, #16
   27050:	a80d      	add	r0, sp, #52	; 0x34
   27052:	f7f2 fea7 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   27056:	991c      	ldr	r1, [sp, #112]	; 0x70
   27058:	2203      	movs	r2, #3
   2705a:	a811      	add	r0, sp, #68	; 0x44
   2705c:	f7f2 fea2 	bl	19da4 <sys_memcpy_swap>
	m[51] = a1->type;
   27060:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   27062:	f814 3b01 	ldrb.w	r3, [r4], #1
   27066:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2706a:	4621      	mov	r1, r4
   2706c:	2206      	movs	r2, #6
   2706e:	a812      	add	r0, sp, #72	; 0x48
   27070:	f7fe fc78 	bl	25964 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   27074:	4621      	mov	r1, r4
   27076:	2206      	movs	r2, #6
   27078:	a812      	add	r0, sp, #72	; 0x48
   2707a:	f7f2 fe93 	bl	19da4 <sys_memcpy_swap>
	m[58] = a2->type;
   2707e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   27080:	f814 3b01 	ldrb.w	r3, [r4], #1
   27084:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   27088:	4621      	mov	r1, r4
   2708a:	2206      	movs	r2, #6
   2708c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   27090:	f7fe fc68 	bl	25964 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   27094:	4621      	mov	r1, r4
   27096:	2206      	movs	r2, #6
   27098:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2709c:	f7f2 fe82 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   270a0:	2210      	movs	r2, #16
   270a2:	4629      	mov	r1, r5
   270a4:	a801      	add	r0, sp, #4
   270a6:	f7f2 fe7d 	bl	19da4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   270aa:	463b      	mov	r3, r7
   270ac:	2241      	movs	r2, #65	; 0x41
   270ae:	a905      	add	r1, sp, #20
   270b0:	a801      	add	r0, sp, #4
   270b2:	f7ff ff75 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   270b6:	4604      	mov	r4, r0
   270b8:	b910      	cbnz	r0, 270c0 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   270ba:	4638      	mov	r0, r7
   270bc:	f7ff ffa9 	bl	27012 <sys_mem_swap.constprop.0>
}
   270c0:	4620      	mov	r0, r4
   270c2:	b017      	add	sp, #92	; 0x5c
   270c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000270c6 <smp_f4>:
{
   270c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270c8:	b097      	sub	sp, #92	; 0x5c
   270ca:	4614      	mov	r4, r2
   270cc:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   270ce:	2220      	movs	r2, #32
   270d0:	4601      	mov	r1, r0
   270d2:	a805      	add	r0, sp, #20
{
   270d4:	461d      	mov	r5, r3
   270d6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   270d8:	f7f2 fe64 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   270dc:	2220      	movs	r2, #32
   270de:	4631      	mov	r1, r6
   270e0:	a80d      	add	r0, sp, #52	; 0x34
   270e2:	f7f2 fe5f 	bl	19da4 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   270e6:	4621      	mov	r1, r4
   270e8:	2210      	movs	r2, #16
   270ea:	a801      	add	r0, sp, #4
	m[64] = z;
   270ec:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   270f0:	f7f2 fe58 	bl	19da4 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   270f4:	463b      	mov	r3, r7
   270f6:	2241      	movs	r2, #65	; 0x41
   270f8:	a905      	add	r1, sp, #20
   270fa:	a801      	add	r0, sp, #4
   270fc:	f7ff ff50 	bl	26fa0 <bt_smp_aes_cmac>
	if (err) {
   27100:	4604      	mov	r4, r0
   27102:	b910      	cbnz	r0, 2710a <smp_f4+0x44>
	sys_mem_swap(res, 16);
   27104:	4638      	mov	r0, r7
   27106:	f7ff ff84 	bl	27012 <sys_mem_swap.constprop.0>
}
   2710a:	4620      	mov	r0, r4
   2710c:	b017      	add	sp, #92	; 0x5c
   2710e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027110 <smp_signing_info>:
   27110:	2007      	movs	r0, #7
   27112:	4770      	bx	lr

00027114 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27114:	f3bf 8f5b 	dmb	ish
   27118:	6800      	ldr	r0, [r0, #0]
   2711a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2711e:	4108      	asrs	r0, r1
}
   27120:	f000 0001 	and.w	r0, r0, #1
   27124:	4770      	bx	lr

00027126 <update_keys_check>:
{
   27126:	b510      	push	{r4, lr}
   27128:	4603      	mov	r3, r0
	if (!keys ||
   2712a:	b1d9      	cbz	r1, 27164 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2712c:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2712e:	f010 0f24 	tst.w	r0, #36	; 0x24
   27132:	d017      	beq.n	27164 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   27134:	7d1a      	ldrb	r2, [r3, #20]
   27136:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   27138:	7b09      	ldrb	r1, [r1, #12]
   2713a:	42a2      	cmp	r2, r4
   2713c:	bf28      	it	cs
   2713e:	4622      	movcs	r2, r4
   27140:	4291      	cmp	r1, r2
   27142:	d901      	bls.n	27148 <update_keys_check+0x22>
		return false;
   27144:	2000      	movs	r0, #0
}
   27146:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   27148:	0682      	lsls	r2, r0, #26
   2714a:	d404      	bmi.n	27156 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2714c:	7a18      	ldrb	r0, [r3, #8]
   2714e:	3800      	subs	r0, #0
   27150:	bf18      	it	ne
   27152:	2001      	movne	r0, #1
   27154:	e7f7      	b.n	27146 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   27156:	2105      	movs	r1, #5
   27158:	1d18      	adds	r0, r3, #4
   2715a:	f7ff ffdb 	bl	27114 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2715e:	2800      	cmp	r0, #0
   27160:	d1f4      	bne.n	2714c <update_keys_check+0x26>
   27162:	e7ef      	b.n	27144 <update_keys_check+0x1e>
		return true;
   27164:	2001      	movs	r0, #1
   27166:	e7ee      	b.n	27146 <update_keys_check+0x20>

00027168 <atomic_test_and_clear_bit>:
{
   27168:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2716a:	2301      	movs	r3, #1
   2716c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27170:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27172:	f3bf 8f5b 	dmb	ish
   27176:	e850 3f00 	ldrex	r3, [r0]
   2717a:	ea03 0c02 	and.w	ip, r3, r2
   2717e:	e840 ce00 	strex	lr, ip, [r0]
   27182:	f1be 0f00 	cmp.w	lr, #0
   27186:	d1f6      	bne.n	27176 <atomic_test_and_clear_bit+0xe>
   27188:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2718c:	420b      	tst	r3, r1
}
   2718e:	bf14      	ite	ne
   27190:	2001      	movne	r0, #1
   27192:	2000      	moveq	r0, #0
   27194:	f85d fb04 	ldr.w	pc, [sp], #4

00027198 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27198:	2301      	movs	r3, #1
   2719a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2719c:	f3bf 8f5b 	dmb	ish
   271a0:	e850 2f00 	ldrex	r2, [r0]
   271a4:	431a      	orrs	r2, r3
   271a6:	e840 2100 	strex	r1, r2, [r0]
   271aa:	2900      	cmp	r1, #0
   271ac:	d1f8      	bne.n	271a0 <atomic_set_bit+0x8>
   271ae:	f3bf 8f5b 	dmb	ish
}
   271b2:	4770      	bx	lr

000271b4 <smp_keypress_notif>:
{
   271b4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   271b6:	210e      	movs	r1, #14
   271b8:	f7ff ffee 	bl	27198 <atomic_set_bit>
}
   271bc:	2000      	movs	r0, #0
   271be:	bd08      	pop	{r3, pc}

000271c0 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   271c0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   271c2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   271c4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   271c6:	4628      	mov	r0, r5
   271c8:	2104      	movs	r1, #4
   271ca:	f7ff ffa3 	bl	27114 <atomic_test_bit>
   271ce:	b168      	cbz	r0, 271ec <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   271d0:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   271d2:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   271d4:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   271d6:	4608      	mov	r0, r1
   271d8:	f7fe fea2 	bl	25f20 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   271dc:	4604      	mov	r4, r0
   271de:	b940      	cbnz	r0, 271f2 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   271e0:	2104      	movs	r1, #4
   271e2:	4628      	mov	r0, r5
   271e4:	f7ff ffd8 	bl	27198 <atomic_set_bit>
}
   271e8:	4620      	mov	r0, r4
   271ea:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   271ec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   271f0:	e7ef      	b.n	271d2 <smp_create_pdu.isra.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   271f2:	2101      	movs	r1, #1
   271f4:	3008      	adds	r0, #8
   271f6:	f7f4 fec7 	bl	1bf88 <net_buf_simple_add>
	hdr->code = op;
   271fa:	7006      	strb	r6, [r0, #0]
	return buf;
   271fc:	e7f4      	b.n	271e8 <smp_create_pdu.isra.0+0x28>

000271fe <smp_send_pairing_random>:
{
   271fe:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   27200:	2104      	movs	r1, #4
{
   27202:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   27204:	f7ff ffdc 	bl	271c0 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   27208:	4604      	mov	r4, r0
   2720a:	b178      	cbz	r0, 2722c <smp_send_pairing_random+0x2e>
   2720c:	2110      	movs	r1, #16
   2720e:	3008      	adds	r0, #8
   27210:	f7f4 feba 	bl	1bf88 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   27214:	2210      	movs	r2, #16
   27216:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2721a:	f7fe fba3 	bl	25964 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2721e:	4628      	mov	r0, r5
   27220:	2200      	movs	r2, #0
   27222:	4621      	mov	r1, r4
   27224:	f7ff fed8 	bl	26fd8 <smp_send.isra.0>
	return 0;
   27228:	2000      	movs	r0, #0
}
   2722a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2722c:	2008      	movs	r0, #8
   2722e:	e7fc      	b.n	2722a <smp_send_pairing_random+0x2c>

00027230 <smp_pairing_confirm>:
{
   27230:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27232:	1d03      	adds	r3, r0, #4
   27234:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   27236:	6889      	ldr	r1, [r1, #8]
   27238:	f3bf 8f5b 	dmb	ish
   2723c:	e853 2f00 	ldrex	r2, [r3]
   27240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   27244:	e843 2000 	strex	r0, r2, [r3]
   27248:	2800      	cmp	r0, #0
   2724a:	d1f7      	bne.n	2723c <smp_pairing_confirm+0xc>
   2724c:	f3bf 8f5b 	dmb	ish
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   27250:	2210      	movs	r2, #16
   27252:	f104 0017 	add.w	r0, r4, #23
   27256:	f7fe fb85 	bl	25964 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2725a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2725e:	78db      	ldrb	r3, [r3, #3]
   27260:	b93b      	cbnz	r3, 27272 <smp_pairing_confirm+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   27262:	4620      	mov	r0, r4
   27264:	2104      	movs	r1, #4
   27266:	f7ff ff97 	bl	27198 <atomic_set_bit>
}
   2726a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   2726e:	f7ff bfc6 	b.w	271fe <smp_send_pairing_random>
}
   27272:	2000      	movs	r0, #0
   27274:	bd10      	pop	{r4, pc}

00027276 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27276:	2301      	movs	r3, #1
   27278:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2727a:	43db      	mvns	r3, r3
   2727c:	f3bf 8f5b 	dmb	ish
   27280:	e850 2f00 	ldrex	r2, [r0]
   27284:	401a      	ands	r2, r3
   27286:	e840 2100 	strex	r1, r2, [r0]
   2728a:	2900      	cmp	r1, #0
   2728c:	d1f8      	bne.n	27280 <atomic_clear_bit+0xa>
   2728e:	f3bf 8f5b 	dmb	ish
}
   27292:	4770      	bx	lr

00027294 <smp_reset>:
{
   27294:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27296:	1d03      	adds	r3, r0, #4
   27298:	4604      	mov	r4, r0
   2729a:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2729c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   272a0:	f3bf 8f5b 	dmb	ish
   272a4:	e853 2f00 	ldrex	r2, [r3]
   272a8:	e843 5100 	strex	r1, r5, [r3]
   272ac:	2900      	cmp	r1, #0
   272ae:	d1f9      	bne.n	272a4 <smp_reset+0x10>
   272b0:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   272b4:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   272b8:	f7fb f8a6 	bl	22408 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   272bc:	7225      	strb	r5, [r4, #8]
   272be:	f3bf 8f5b 	dmb	ish
   272c2:	e854 3f00 	ldrex	r3, [r4]
   272c6:	e844 5200 	strex	r2, r5, [r4]
   272ca:	2a00      	cmp	r2, #0
   272cc:	d1f9      	bne.n	272c2 <smp_reset+0x2e>
   272ce:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   272d2:	78f3      	ldrb	r3, [r6, #3]
   272d4:	b92b      	cbnz	r3, 272e2 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   272d6:	4620      	mov	r0, r4
   272d8:	210b      	movs	r1, #11
}
   272da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   272de:	f7ff bf5b 	b.w	27198 <atomic_set_bit>
}
   272e2:	bd70      	pop	{r4, r5, r6, pc}

000272e4 <smp_c1>:
{
   272e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   272e8:	b089      	sub	sp, #36	; 0x24
   272ea:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   272ee:	4699      	mov	r9, r3
	p1[0] = ia->type;
   272f0:	783b      	ldrb	r3, [r7, #0]
{
   272f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   272f4:	f88d 3000 	strb.w	r3, [sp]
{
   272f8:	460c      	mov	r4, r1
	p1[1] = ra->type;
   272fa:	f898 3000 	ldrb.w	r3, [r8]
   272fe:	f88d 3001 	strb.w	r3, [sp, #1]
{
   27302:	4611      	mov	r1, r2
   27304:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   27306:	2207      	movs	r2, #7
   27308:	f10d 0002 	add.w	r0, sp, #2
   2730c:	f7fe fb2a 	bl	25964 <memcpy>
	memcpy(p1 + 9, pres, 7);
   27310:	2207      	movs	r2, #7
   27312:	4649      	mov	r1, r9
   27314:	f10d 0009 	add.w	r0, sp, #9
   27318:	f7fe fb24 	bl	25964 <memcpy>
	while (len--) {
   2731c:	f104 0010 	add.w	r0, r4, #16
   27320:	4629      	mov	r1, r5
   27322:	466a      	mov	r2, sp
   27324:	4284      	cmp	r4, r0
   27326:	d127      	bne.n	27378 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   27328:	462a      	mov	r2, r5
   2732a:	4629      	mov	r1, r5
   2732c:	4630      	mov	r0, r6
   2732e:	f000 fcb0 	bl	27c92 <bt_encrypt_le>
	if (err) {
   27332:	4604      	mov	r4, r0
   27334:	b9e0      	cbnz	r0, 27370 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   27336:	2206      	movs	r2, #6
   27338:	f108 0101 	add.w	r1, r8, #1
   2733c:	a804      	add	r0, sp, #16
   2733e:	f7fe fb11 	bl	25964 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   27342:	2206      	movs	r2, #6
   27344:	1c79      	adds	r1, r7, #1
   27346:	f10d 0016 	add.w	r0, sp, #22
   2734a:	f7fe fb0b 	bl	25964 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2734e:	2204      	movs	r2, #4
   27350:	4621      	mov	r1, r4
   27352:	a807      	add	r0, sp, #28
   27354:	f7fe fb11 	bl	2597a <memset>
	while (len--) {
   27358:	f105 0010 	add.w	r0, r5, #16
   2735c:	462a      	mov	r2, r5
   2735e:	ab04      	add	r3, sp, #16
   27360:	4282      	cmp	r2, r0
   27362:	d112      	bne.n	2738a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   27364:	462a      	mov	r2, r5
   27366:	4629      	mov	r1, r5
   27368:	4630      	mov	r0, r6
   2736a:	f000 fc92 	bl	27c92 <bt_encrypt_le>
   2736e:	4604      	mov	r4, r0
}
   27370:	4620      	mov	r0, r4
   27372:	b009      	add	sp, #36	; 0x24
   27374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   27378:	f814 3b01 	ldrb.w	r3, [r4], #1
   2737c:	f812 cb01 	ldrb.w	ip, [r2], #1
   27380:	ea83 030c 	eor.w	r3, r3, ip
   27384:	f801 3b01 	strb.w	r3, [r1], #1
   27388:	e7cc      	b.n	27324 <smp_c1+0x40>
   2738a:	f812 1b01 	ldrb.w	r1, [r2], #1
   2738e:	f813 4b01 	ldrb.w	r4, [r3], #1
   27392:	4061      	eors	r1, r4
   27394:	f802 1c01 	strb.w	r1, [r2, #-1]
   27398:	e7e2      	b.n	27360 <smp_c1+0x7c>

0002739a <legacy_send_pairing_confirm>:
{
   2739a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2739c:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2739e:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   273a2:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   273a4:	f7ff ff0c 	bl	271c0 <smp_create_pdu.isra.0>
	if (!buf) {
   273a8:	4606      	mov	r6, r0
   273aa:	b1c0      	cbz	r0, 273de <legacy_send_pairing_confirm+0x44>
   273ac:	2110      	movs	r1, #16
   273ae:	3008      	adds	r0, #8
   273b0:	f7f4 fdea 	bl	1bf88 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   273b4:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   273b8:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   273ba:	9002      	str	r0, [sp, #8]
   273bc:	9301      	str	r3, [sp, #4]
   273be:	9400      	str	r4, [sp, #0]
   273c0:	f105 0310 	add.w	r3, r5, #16
   273c4:	f105 0209 	add.w	r2, r5, #9
   273c8:	f105 0127 	add.w	r1, r5, #39	; 0x27
   273cc:	f105 0047 	add.w	r0, r5, #71	; 0x47
   273d0:	f7ff ff88 	bl	272e4 <smp_c1>
   273d4:	4604      	mov	r4, r0
   273d6:	b120      	cbz	r0, 273e2 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   273d8:	4630      	mov	r0, r6
   273da:	f7f4 fca5 	bl	1bd28 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   273de:	2008      	movs	r0, #8
   273e0:	e009      	b.n	273f6 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   273e2:	4602      	mov	r2, r0
   273e4:	4631      	mov	r1, r6
   273e6:	4628      	mov	r0, r5
   273e8:	f7ff fdf6 	bl	26fd8 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   273ec:	1d28      	adds	r0, r5, #4
   273ee:	4621      	mov	r1, r4
   273f0:	f7ff ff41 	bl	27276 <atomic_clear_bit>
	return 0;
   273f4:	4620      	mov	r0, r4
}
   273f6:	b004      	add	sp, #16
   273f8:	bd70      	pop	{r4, r5, r6, pc}

000273fa <bt_smp_sign>:
   273fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   273fe:	4770      	bx	lr

00027400 <bt_smp_start_security>:
{
   27400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   27402:	78c3      	ldrb	r3, [r0, #3]
{
   27404:	4604      	mov	r4, r0
	switch (conn->role) {
   27406:	2b00      	cmp	r3, #0
   27408:	d157      	bne.n	274ba <bt_smp_start_security+0xba>
		smp = smp_chan_get(conn);
   2740a:	f7f2 fcf9 	bl	19e00 <smp_chan_get>
		if (!smp) {
   2740e:	4605      	mov	r5, r0
   27410:	2800      	cmp	r0, #0
   27412:	d055      	beq.n	274c0 <bt_smp_start_security+0xc0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   27414:	1d06      	adds	r6, r0, #4
   27416:	2103      	movs	r1, #3
   27418:	4630      	mov	r0, r6
   2741a:	f7ff fe7b 	bl	27114 <atomic_test_bit>
   2741e:	b120      	cbz	r0, 2742a <bt_smp_start_security+0x2a>
			return -EBUSY;
   27420:	f06f 040f 	mvn.w	r4, #15
}
   27424:	4620      	mov	r0, r4
   27426:	b003      	add	sp, #12
   27428:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2742a:	2101      	movs	r1, #1
   2742c:	4630      	mov	r0, r6
   2742e:	f7ff fe71 	bl	27114 <atomic_test_bit>
   27432:	2800      	cmp	r0, #0
   27434:	d1f4      	bne.n	27420 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   27436:	210b      	movs	r1, #11
   27438:	1d20      	adds	r0, r4, #4
   2743a:	f7ff fe6b 	bl	27114 <atomic_test_bit>
   2743e:	bb00      	cbnz	r0, 27482 <bt_smp_start_security+0x82>
	if (!conn->le.keys) {
   27440:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   27444:	b983      	cbnz	r3, 27468 <bt_smp_start_security+0x68>
						     conn->id, &conn->le.dst);
   27446:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2744a:	7a21      	ldrb	r1, [r4, #8]
   2744c:	463a      	mov	r2, r7
   2744e:	2020      	movs	r0, #32
   27450:	f7f4 f93a 	bl	1b6c8 <bt_keys_find>
   27454:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   27458:	b930      	cbnz	r0, 27468 <bt_smp_start_security+0x68>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2745a:	7a21      	ldrb	r1, [r4, #8]
   2745c:	463a      	mov	r2, r7
   2745e:	2004      	movs	r0, #4
   27460:	f7f4 f932 	bl	1b6c8 <bt_keys_find>
   27464:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   27468:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2746c:	b149      	cbz	r1, 27482 <bt_smp_start_security+0x82>
   2746e:	89cb      	ldrh	r3, [r1, #14]
   27470:	f003 0324 	and.w	r3, r3, #36	; 0x24
   27474:	b12b      	cbz	r3, 27482 <bt_smp_start_security+0x82>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   27476:	7aa3      	ldrb	r3, [r4, #10]
   27478:	2b02      	cmp	r3, #2
   2747a:	d908      	bls.n	2748e <bt_smp_start_security+0x8e>
   2747c:	7b4b      	ldrb	r3, [r1, #13]
   2747e:	07db      	lsls	r3, r3, #31
   27480:	d405      	bmi.n	2748e <bt_smp_start_security+0x8e>
			return smp_send_pairing_req(conn);
   27482:	4620      	mov	r0, r4
}
   27484:	b003      	add	sp, #12
   27486:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2748a:	f7f2 bf47 	b.w	1a31c <smp_send_pairing_req>
		err = bt_conn_le_start_encryption(conn,
   2748e:	7b0b      	ldrb	r3, [r1, #12]
   27490:	9300      	str	r3, [sp, #0]
   27492:	f101 0218 	add.w	r2, r1, #24
   27496:	f101 031a 	add.w	r3, r1, #26
   2749a:	4620      	mov	r0, r4
   2749c:	3110      	adds	r1, #16
   2749e:	f7fe fc67 	bl	25d70 <bt_conn_le_start_encryption>
		if (err) {
   274a2:	4604      	mov	r4, r0
   274a4:	2800      	cmp	r0, #0
   274a6:	d1bd      	bne.n	27424 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   274a8:	4628      	mov	r0, r5
   274aa:	210b      	movs	r1, #11
   274ac:	f7ff fe74 	bl	27198 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   274b0:	2101      	movs	r1, #1
   274b2:	4630      	mov	r0, r6
   274b4:	f7ff fe70 	bl	27198 <atomic_set_bit>
		return 0;
   274b8:	e7b4      	b.n	27424 <bt_smp_start_security+0x24>
		return -EINVAL;
   274ba:	f06f 0415 	mvn.w	r4, #21
   274be:	e7b1      	b.n	27424 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   274c0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   274c4:	e7ae      	b.n	27424 <bt_smp_start_security+0x24>

000274c6 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   274c6:	1d03      	adds	r3, r0, #4
{
   274c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   274ca:	4605      	mov	r5, r0
   274cc:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   274ce:	4618      	mov	r0, r3
   274d0:	2103      	movs	r1, #3
   274d2:	f7ff fe1f 	bl	27114 <atomic_test_bit>
   274d6:	b1f0      	cbz	r0, 27516 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   274d8:	4631      	mov	r1, r6
   274da:	4628      	mov	r0, r5
   274dc:	f7f3 fd52 	bl	1af84 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   274e0:	2105      	movs	r1, #5
   274e2:	4628      	mov	r0, r5
   274e4:	f7ff fe6c 	bl	271c0 <smp_create_pdu.isra.0>
	if (!buf) {
   274e8:	4604      	mov	r4, r0
   274ea:	b308      	cbz	r0, 27530 <smp_error+0x6a>
   274ec:	2101      	movs	r1, #1
   274ee:	3008      	adds	r0, #8
   274f0:	f7f4 fd4a 	bl	1bf88 <net_buf_simple_add>
	rsp->reason = reason;
   274f4:	7006      	strb	r6, [r0, #0]
   274f6:	2600      	movs	r6, #0
   274f8:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   274fc:	9600      	str	r6, [sp, #0]
   274fe:	4633      	mov	r3, r6
   27500:	4622      	mov	r2, r4
   27502:	2106      	movs	r1, #6
   27504:	f7fe fd0f 	bl	25f26 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   27508:	b118      	cbz	r0, 27512 <smp_error+0x4c>
		net_buf_unref(buf);
   2750a:	4620      	mov	r0, r4
   2750c:	f7f4 fc0c 	bl	1bd28 <net_buf_unref>
	return 0;
   27510:	4630      	mov	r0, r6
}
   27512:	b002      	add	sp, #8
   27514:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27516:	2101      	movs	r1, #1
   27518:	4618      	mov	r0, r3
   2751a:	f7ff fdfb 	bl	27114 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2751e:	2800      	cmp	r0, #0
   27520:	d1da      	bne.n	274d8 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27522:	210f      	movs	r1, #15
   27524:	4618      	mov	r0, r3
   27526:	f7ff fdf5 	bl	27114 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2752a:	2800      	cmp	r0, #0
   2752c:	d1d4      	bne.n	274d8 <smp_error+0x12>
   2752e:	e7d7      	b.n	274e0 <smp_error+0x1a>
		return -ENOBUFS;
   27530:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27534:	e7ed      	b.n	27512 <smp_error+0x4c>

00027536 <bt_smp_dhkey_ready>:
{
   27536:	b570      	push	{r4, r5, r6, lr}
   27538:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2753a:	2008      	movs	r0, #8
   2753c:	f7f2 fca0 	bl	19e80 <smp_find>
	if (smp) {
   27540:	4604      	mov	r4, r0
   27542:	b1b8      	cbz	r0, 27574 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   27544:	1d05      	adds	r5, r0, #4
   27546:	2108      	movs	r1, #8
   27548:	4628      	mov	r0, r5
   2754a:	f7ff fe94 	bl	27276 <atomic_clear_bit>
	if (!dhkey) {
   2754e:	b3b6      	cbz	r6, 275be <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   27550:	2107      	movs	r1, #7
   27552:	f7ff fe90 	bl	27276 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   27556:	4631      	mov	r1, r6
   27558:	2220      	movs	r2, #32
   2755a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2755e:	f7fe fa01 	bl	25964 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   27562:	210a      	movs	r1, #10
   27564:	4628      	mov	r0, r5
   27566:	f7ff fdd5 	bl	27114 <atomic_test_bit>
   2756a:	b168      	cbz	r0, 27588 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2756c:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2756e:	4628      	mov	r0, r5
   27570:	f7ff fe12 	bl	27198 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   27574:	2007      	movs	r0, #7
   27576:	f7f2 fc83 	bl	19e80 <smp_find>
		if (smp) {
   2757a:	4604      	mov	r4, r0
   2757c:	b118      	cbz	r0, 27586 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2757e:	f7f3 f8fd 	bl	1a77c <smp_dhkey_generate>
			if (err) {
   27582:	4601      	mov	r1, r0
   27584:	b9b8      	cbnz	r0, 275b6 <bt_smp_dhkey_ready+0x80>
}
   27586:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27588:	2110      	movs	r1, #16
   2758a:	4628      	mov	r0, r5
   2758c:	f7ff fdc2 	bl	27114 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   27590:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   27592:	2800      	cmp	r0, #0
   27594:	d1eb      	bne.n	2756e <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   27596:	4628      	mov	r0, r5
   27598:	f7ff fdbc 	bl	27114 <atomic_test_bit>
   2759c:	2800      	cmp	r0, #0
   2759e:	d0e9      	beq.n	27574 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   275a0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   275a4:	78db      	ldrb	r3, [r3, #3]
   275a6:	2b00      	cmp	r3, #0
   275a8:	d1e4      	bne.n	27574 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   275aa:	4620      	mov	r0, r4
   275ac:	f7f2 fd4c 	bl	1a048 <compute_and_send_central_dhcheck>
		if (err) {
   275b0:	4601      	mov	r1, r0
   275b2:	2800      	cmp	r0, #0
   275b4:	d0de      	beq.n	27574 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   275b6:	4620      	mov	r0, r4
   275b8:	f7ff ff85 	bl	274c6 <smp_error>
   275bc:	e7da      	b.n	27574 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   275be:	210b      	movs	r1, #11
   275c0:	e7f9      	b.n	275b6 <bt_smp_dhkey_ready+0x80>

000275c2 <bt_smp_disconnected>:
{
   275c2:	b570      	push	{r4, r5, r6, lr}
   275c4:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   275c6:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   275ca:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   275ce:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   275d0:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   275d4:	f7fa ff18 	bl	22408 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   275d8:	2103      	movs	r1, #3
   275da:	4620      	mov	r0, r4
   275dc:	f7ff fd9a 	bl	27114 <atomic_test_bit>
   275e0:	b1a0      	cbz	r0, 2760c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   275e2:	2108      	movs	r1, #8
   275e4:	4630      	mov	r0, r6
   275e6:	f7f3 fccd 	bl	1af84 <smp_pairing_complete>
	if (keys) {
   275ea:	b13d      	cbz	r5, 275fc <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   275ec:	89eb      	ldrh	r3, [r5, #14]
   275ee:	b113      	cbz	r3, 275f6 <bt_smp_disconnected+0x34>
   275f0:	7b6b      	ldrb	r3, [r5, #13]
   275f2:	079b      	lsls	r3, r3, #30
   275f4:	d502      	bpl.n	275fc <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   275f6:	4628      	mov	r0, r5
   275f8:	f7f4 f88c 	bl	1b714 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   275fc:	4630      	mov	r0, r6
   275fe:	f44f 7204 	mov.w	r2, #528	; 0x210
}
   27602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   27606:	2100      	movs	r1, #0
   27608:	f7fe b9b7 	b.w	2597a <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2760c:	2101      	movs	r1, #1
   2760e:	4620      	mov	r0, r4
   27610:	f7ff fd80 	bl	27114 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   27614:	2800      	cmp	r0, #0
   27616:	d1e4      	bne.n	275e2 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27618:	210f      	movs	r1, #15
   2761a:	4620      	mov	r0, r4
   2761c:	f7ff fd7a 	bl	27114 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   27620:	2800      	cmp	r0, #0
   27622:	d1de      	bne.n	275e2 <bt_smp_disconnected+0x20>
   27624:	e7e1      	b.n	275ea <bt_smp_disconnected+0x28>

00027626 <id_add>:
	bt_id_add(keys);
   27626:	f7ed be2d 	b.w	15284 <bt_id_add>

0002762a <bt_keys_get_type>:
{
   2762a:	b570      	push	{r4, r5, r6, lr}
   2762c:	4604      	mov	r4, r0
   2762e:	460d      	mov	r5, r1
   27630:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   27632:	f7f4 f849 	bl	1b6c8 <bt_keys_find>
	if (keys) {
   27636:	b938      	cbnz	r0, 27648 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   27638:	4631      	mov	r1, r6
   2763a:	4628      	mov	r0, r5
   2763c:	f7f4 f804 	bl	1b648 <bt_keys_get_addr>
	if (!keys) {
   27640:	b110      	cbz	r0, 27648 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   27642:	89c3      	ldrh	r3, [r0, #14]
   27644:	431c      	orrs	r4, r3
   27646:	81c4      	strh	r4, [r0, #14]
}
   27648:	bd70      	pop	{r4, r5, r6, pc}

0002764a <bt_keys_add_type>:
	keys->keys |= type;
   2764a:	89c3      	ldrh	r3, [r0, #14]
   2764c:	4319      	orrs	r1, r3
   2764e:	81c1      	strh	r1, [r0, #14]
}
   27650:	4770      	bx	lr

00027652 <fixed_data_unref>:
}
   27652:	4770      	bx	lr

00027654 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   27654:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   27656:	6849      	ldr	r1, [r1, #4]
   27658:	6809      	ldr	r1, [r1, #0]
   2765a:	f7f4 b9bd 	b.w	1b9d8 <net_buf_alloc_len>

0002765e <net_buf_simple_init_with_data>:
	buf->size  = size;
   2765e:	b292      	uxth	r2, r2
	buf->__buf = data;
   27660:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   27662:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   27664:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   27666:	8082      	strh	r2, [r0, #4]
}
   27668:	4770      	bx	lr

0002766a <net_buf_simple_pull_le16>:
{
   2766a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2766c:	6803      	ldr	r3, [r0, #0]
   2766e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   27670:	2102      	movs	r1, #2
   27672:	f7f4 fc47 	bl	1bf04 <net_buf_simple_pull>
}
   27676:	4620      	mov	r0, r4
   27678:	bd10      	pop	{r4, pc}

0002767a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2767a:	6802      	ldr	r2, [r0, #0]
   2767c:	6880      	ldr	r0, [r0, #8]
}
   2767e:	1a10      	subs	r0, r2, r0
   27680:	4770      	bx	lr

00027682 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   27682:	8883      	ldrh	r3, [r0, #4]
   27684:	88c2      	ldrh	r2, [r0, #6]
   27686:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   27688:	6803      	ldr	r3, [r0, #0]
   2768a:	6880      	ldr	r0, [r0, #8]
   2768c:	1a18      	subs	r0, r3, r0
}
   2768e:	1a10      	subs	r0, r2, r0
   27690:	4770      	bx	lr

00027692 <net_buf_simple_add_mem>:
{
   27692:	b538      	push	{r3, r4, r5, lr}
   27694:	460d      	mov	r5, r1
   27696:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   27698:	4611      	mov	r1, r2
   2769a:	f7f4 fc75 	bl	1bf88 <net_buf_simple_add>
   2769e:	4622      	mov	r2, r4
   276a0:	4629      	mov	r1, r5
}
   276a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   276a6:	f7fe b95d 	b.w	25964 <memcpy>

000276aa <net_buf_simple_add_u8>:
{
   276aa:	b510      	push	{r4, lr}
   276ac:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   276ae:	2101      	movs	r1, #1
   276b0:	f7f4 fc6a 	bl	1bf88 <net_buf_simple_add>
	*u8 = val;
   276b4:	7004      	strb	r4, [r0, #0]
}
   276b6:	bd10      	pop	{r4, pc}

000276b8 <net_buf_simple_add_le16>:
{
   276b8:	b510      	push	{r4, lr}
   276ba:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   276bc:	2102      	movs	r1, #2
   276be:	f7f4 fc63 	bl	1bf88 <net_buf_simple_add>
	dst[0] = val;
   276c2:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   276c4:	0a24      	lsrs	r4, r4, #8
   276c6:	7044      	strb	r4, [r0, #1]
}
   276c8:	bd10      	pop	{r4, pc}

000276ca <set_starting_state>:
{
   276ca:	b510      	push	{r4, lr}
	__asm__ volatile(
   276cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   276d0:	f3ef 8211 	mrs	r2, BASEPRI
   276d4:	f383 8812 	msr	BASEPRI_MAX, r3
   276d8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   276dc:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   276de:	f003 0407 	and.w	r4, r3, #7
   276e2:	2c01      	cmp	r4, #1
   276e4:	d106      	bne.n	276f4 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   276e6:	6001      	str	r1, [r0, #0]
	int err = 0;
   276e8:	2000      	movs	r0, #0
	__asm__ volatile(
   276ea:	f382 8811 	msr	BASEPRI, r2
   276ee:	f3bf 8f6f 	isb	sy
}
   276f2:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   276f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   276f8:	428b      	cmp	r3, r1
		err = -EALREADY;
   276fa:	bf14      	ite	ne
   276fc:	f04f 30ff 	movne.w	r0, #4294967295
   27700:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   27704:	e7f1      	b.n	276ea <set_starting_state+0x20>

00027706 <set_on_state>:
	__asm__ volatile(
   27706:	f04f 0340 	mov.w	r3, #64	; 0x40
   2770a:	f3ef 8211 	mrs	r2, BASEPRI
   2770e:	f383 8812 	msr	BASEPRI_MAX, r3
   27712:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   27716:	6803      	ldr	r3, [r0, #0]
   27718:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2771c:	f043 0302 	orr.w	r3, r3, #2
   27720:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   27722:	f382 8811 	msr	BASEPRI, r2
   27726:	f3bf 8f6f 	isb	sy
}
   2772a:	4770      	bx	lr

0002772c <onoff_started_callback>:
	return &data->mgr[type];
   2772c:	6900      	ldr	r0, [r0, #16]
   2772e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27730:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   27734:	2100      	movs	r1, #0
   27736:	4710      	bx	r2

00027738 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27738:	2000      	movs	r0, #0
   2773a:	f7f7 bd35 	b.w	1f1a8 <nrfx_clock_stop>

0002773e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2773e:	2280      	movs	r2, #128	; 0x80
   27740:	f7f4 bc88 	b.w	1c054 <stop>

00027744 <blocking_start_callback>:
{
   27744:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   27746:	f7fa b945 	b.w	219d4 <z_impl_k_sem_give>

0002774a <api_start>:
{
   2774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2774e:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   27750:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   27752:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   27754:	434c      	muls	r4, r1
{
   27756:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   27758:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2775c:	2180      	movs	r1, #128	; 0x80
   2775e:	4428      	add	r0, r5
{
   27760:	4690      	mov	r8, r2
   27762:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   27764:	f7ff ffb1 	bl	276ca <set_starting_state>
	if (err < 0) {
   27768:	2800      	cmp	r0, #0
   2776a:	db06      	blt.n	2777a <api_start+0x30>
	subdata->cb = cb;
   2776c:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2776e:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   27772:	6873      	ldr	r3, [r6, #4]
   27774:	591b      	ldr	r3, [r3, r4]
   27776:	4798      	blx	r3
	return 0;
   27778:	2000      	movs	r0, #0
}
   2777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002777e <i2c_burst_write_dt>:
 */
static inline int i2c_burst_write_dt(const struct i2c_dt_spec *spec,
				     uint8_t start_addr,
				     const uint8_t *buf,
				     uint32_t num_bytes)
{
   2777e:	b530      	push	{r4, r5, lr}
   27780:	b089      	sub	sp, #36	; 0x24
   27782:	4604      	mov	r4, r0
   27784:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   27788:	f10d 0107 	add.w	r1, sp, #7
{
   2778c:	461d      	mov	r5, r3
	msg[0].buf = &start_addr;
   2778e:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   27790:	2101      	movs	r1, #1
	msg[1].len = num_bytes;
   27792:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = 1U;
   27796:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   27798:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   2779a:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   2779c:	6800      	ldr	r0, [r0, #0]
   2779e:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   277a0:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   277a4:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   277a8:	6881      	ldr	r1, [r0, #8]
   277aa:	688c      	ldr	r4, [r1, #8]
   277ac:	a902      	add	r1, sp, #8
   277ae:	47a0      	blx	r4
			       start_addr, buf, num_bytes);
}
   277b0:	b009      	add	sp, #36	; 0x24
   277b2:	bd30      	pop	{r4, r5, pc}

000277b4 <ssd1306_resume>:
{
   277b4:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   277b6:	23af      	movs	r3, #175	; 0xaf
   277b8:	f88d 3004 	strb.w	r3, [sp, #4]
	return i2c_burst_write_dt(&config->bus,
   277bc:	aa01      	add	r2, sp, #4
   277be:	2301      	movs	r3, #1
   277c0:	2100      	movs	r1, #0
   277c2:	6840      	ldr	r0, [r0, #4]
   277c4:	f7ff ffdb 	bl	2777e <i2c_burst_write_dt>
}
   277c8:	b003      	add	sp, #12
   277ca:	f85d fb04 	ldr.w	pc, [sp], #4

000277ce <ssd1306_suspend>:
{
   277ce:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   277d0:	23ae      	movs	r3, #174	; 0xae
   277d2:	f88d 3004 	strb.w	r3, [sp, #4]
	return i2c_burst_write_dt(&config->bus,
   277d6:	aa01      	add	r2, sp, #4
   277d8:	2301      	movs	r3, #1
   277da:	2100      	movs	r1, #0
   277dc:	6840      	ldr	r0, [r0, #4]
   277de:	f7ff ffce 	bl	2777e <i2c_burst_write_dt>
}
   277e2:	b003      	add	sp, #12
   277e4:	f85d fb04 	ldr.w	pc, [sp], #4

000277e8 <ssd1306_set_contrast>:
{
   277e8:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[] = {
   277ea:	2381      	movs	r3, #129	; 0x81
   277ec:	f88d 3004 	strb.w	r3, [sp, #4]
   277f0:	f88d 1005 	strb.w	r1, [sp, #5]
	return i2c_burst_write_dt(&config->bus,
   277f4:	2302      	movs	r3, #2
   277f6:	aa01      	add	r2, sp, #4
   277f8:	2100      	movs	r1, #0
   277fa:	6840      	ldr	r0, [r0, #4]
   277fc:	f7ff ffbf 	bl	2777e <i2c_burst_write_dt>
}
   27800:	b003      	add	sp, #12
   27802:	f85d fb04 	ldr.w	pc, [sp], #4

00027806 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27806:	6843      	ldr	r3, [r0, #4]
   27808:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2780a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2780e:	600b      	str	r3, [r1, #0]
}
   27810:	2000      	movs	r0, #0
   27812:	4770      	bx	lr

00027814 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27814:	6843      	ldr	r3, [r0, #4]
   27816:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   27818:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2781c:	4042      	eors	r2, r0
   2781e:	400a      	ands	r2, r1
   27820:	4042      	eors	r2, r0
    p_reg->OUT = value;
   27822:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   27826:	2000      	movs	r0, #0
   27828:	4770      	bx	lr

0002782a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2782a:	6843      	ldr	r3, [r0, #4]
   2782c:	685b      	ldr	r3, [r3, #4]
}
   2782e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   27830:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   27834:	4770      	bx	lr

00027836 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27836:	6843      	ldr	r3, [r0, #4]
   27838:	685b      	ldr	r3, [r3, #4]
}
   2783a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2783c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   27840:	4770      	bx	lr

00027842 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27842:	6843      	ldr	r3, [r0, #4]
   27844:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   27846:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2784a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2784c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   27850:	2000      	movs	r0, #0
   27852:	4770      	bx	lr

00027854 <is_regular_addr_valid>:
{
   27854:	b538      	push	{r3, r4, r5, lr}
   27856:	4604      	mov	r4, r0
   27858:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2785a:	f000 faf1 	bl	27e40 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2785e:	4284      	cmp	r4, r0
   27860:	d209      	bcs.n	27876 <is_regular_addr_valid+0x22>
   27862:	2c00      	cmp	r4, #0
   27864:	db07      	blt.n	27876 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   27866:	42a8      	cmp	r0, r5
   27868:	d305      	bcc.n	27876 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2786a:	442c      	add	r4, r5
	    len > flash_size ||
   2786c:	4284      	cmp	r4, r0
   2786e:	bf8c      	ite	hi
   27870:	2000      	movhi	r0, #0
   27872:	2001      	movls	r0, #1
}
   27874:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   27876:	2000      	movs	r0, #0
   27878:	e7fc      	b.n	27874 <is_regular_addr_valid+0x20>

0002787a <erase_op>:
{
   2787a:	b570      	push	{r4, r5, r6, lr}
   2787c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2787e:	f000 fae5 	bl	27e4c <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   27882:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27884:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   27886:	b10b      	cbz	r3, 2788c <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   27888:	f000 fa57 	bl	27d3a <nrf_flash_sync_get_timestamp_begin>
{
   2788c:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2788e:	6860      	ldr	r0, [r4, #4]
   27890:	f7f8 fb84 	bl	1ff9c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   27894:	68a3      	ldr	r3, [r4, #8]
   27896:	1b5b      	subs	r3, r3, r5
   27898:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2789a:	6863      	ldr	r3, [r4, #4]
   2789c:	442b      	add	r3, r5
   2789e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   278a0:	7b23      	ldrb	r3, [r4, #12]
		i++;
   278a2:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   278a4:	b93b      	cbnz	r3, 278b6 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   278a6:	68a3      	ldr	r3, [r4, #8]
   278a8:	2b00      	cmp	r3, #0
   278aa:	d1f0      	bne.n	2788e <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   278ac:	68a0      	ldr	r0, [r4, #8]
}
   278ae:	3800      	subs	r0, #0
   278b0:	bf18      	it	ne
   278b2:	2001      	movne	r0, #1
   278b4:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   278b6:	4630      	mov	r0, r6
   278b8:	f7f7 fe06 	bl	1f4c8 <nrf_flash_sync_check_time_limit>
   278bc:	2800      	cmp	r0, #0
   278be:	d0f2      	beq.n	278a6 <erase_op+0x2c>
   278c0:	e7f4      	b.n	278ac <erase_op+0x32>

000278c2 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   278c2:	6902      	ldr	r2, [r0, #16]
{
   278c4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   278c6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   278ca:	e883 0003 	stmia.w	r3, {r0, r1}
}
   278ce:	2000      	movs	r0, #0
   278d0:	4770      	bx	lr

000278d2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   278d2:	6843      	ldr	r3, [r0, #4]
   278d4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   278d6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   278da:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   278de:	4770      	bx	lr

000278e0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   278e0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   278e2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   278e4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   278e8:	b940      	cbnz	r0, 278fc <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   278ea:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   278ec:	0792      	lsls	r2, r2, #30
   278ee:	d406      	bmi.n	278fe <is_tx_ready+0x1e>
   278f0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   278f4:	3800      	subs	r0, #0
   278f6:	bf18      	it	ne
   278f8:	2001      	movne	r0, #1
   278fa:	4770      	bx	lr
   278fc:	2001      	movs	r0, #1
}
   278fe:	4770      	bx	lr

00027900 <user_callback>:
	if (data->async->user_callback) {
   27900:	6903      	ldr	r3, [r0, #16]
   27902:	68da      	ldr	r2, [r3, #12]
   27904:	6813      	ldr	r3, [r2, #0]
   27906:	b10b      	cbz	r3, 2790c <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   27908:	6852      	ldr	r2, [r2, #4]
   2790a:	4718      	bx	r3
}
   2790c:	4770      	bx	lr

0002790e <notify_uart_rx_rdy>:
{
   2790e:	b570      	push	{r4, r5, r6, lr}
   27910:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27912:	6906      	ldr	r6, [r0, #16]
{
   27914:	4604      	mov	r4, r0
   27916:	460d      	mov	r5, r1
	struct uart_event evt = {
   27918:	2214      	movs	r2, #20
   2791a:	2100      	movs	r1, #0
   2791c:	a801      	add	r0, sp, #4
   2791e:	f7fe f82c 	bl	2597a <memset>
   27922:	2302      	movs	r3, #2
   27924:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   27928:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2792a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2792c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2792e:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   27930:	a901      	add	r1, sp, #4
   27932:	4620      	mov	r0, r4
	struct uart_event evt = {
   27934:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   27938:	f7ff ffe2 	bl	27900 <user_callback>
}
   2793c:	b006      	add	sp, #24
   2793e:	bd70      	pop	{r4, r5, r6, pc}

00027940 <notify_rx_buf_release>:
{
   27940:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   27942:	680f      	ldr	r7, [r1, #0]
{
   27944:	b087      	sub	sp, #28
   27946:	4606      	mov	r6, r0
   27948:	460c      	mov	r4, r1
   2794a:	4615      	mov	r5, r2
	if (*buf) {
   2794c:	b187      	cbz	r7, 27970 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   2794e:	2100      	movs	r1, #0
   27950:	2214      	movs	r2, #20
   27952:	a801      	add	r0, sp, #4
   27954:	f7fe f811 	bl	2597a <memset>
   27958:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2795a:	eb0d 0103 	add.w	r1, sp, r3
   2795e:	4630      	mov	r0, r6
		struct uart_event evt = {
   27960:	f88d 3004 	strb.w	r3, [sp, #4]
   27964:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   27966:	f7ff ffcb 	bl	27900 <user_callback>
		if (clear) {
   2796a:	b10d      	cbz	r5, 27970 <notify_rx_buf_release+0x30>
			*buf = NULL;
   2796c:	2300      	movs	r3, #0
   2796e:	6023      	str	r3, [r4, #0]
}
   27970:	b007      	add	sp, #28
   27972:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027974 <notify_rx_disable>:
{
   27974:	b510      	push	{r4, lr}
   27976:	b086      	sub	sp, #24
   27978:	4604      	mov	r4, r0
	struct uart_event evt = {
   2797a:	2214      	movs	r2, #20
   2797c:	2100      	movs	r1, #0
   2797e:	a801      	add	r0, sp, #4
   27980:	f7fd fffb 	bl	2597a <memset>
   27984:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   27986:	a901      	add	r1, sp, #4
   27988:	4620      	mov	r0, r4
	struct uart_event evt = {
   2798a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2798e:	f7ff ffb7 	bl	27900 <user_callback>
}
   27992:	b006      	add	sp, #24
   27994:	bd10      	pop	{r4, pc}

00027996 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   27996:	6843      	ldr	r3, [r0, #4]
{
   27998:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2799a:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2799c:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2799e:	f04f 0040 	mov.w	r0, #64	; 0x40
   279a2:	f3ef 8511 	mrs	r5, BASEPRI
   279a6:	f380 8812 	msr	BASEPRI_MAX, r0
   279aa:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   279ae:	68e4      	ldr	r4, [r4, #12]
   279b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
   279b2:	b190      	cbz	r0, 279da <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   279b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   279b6:	b998      	cbnz	r0, 279e0 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   279b8:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   279bc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   279c0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   279c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   279c8:	f042 0220 	orr.w	r2, r2, #32
   279cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   279d0:	f385 8811 	msr	BASEPRI, r5
   279d4:	f3bf 8f6f 	isb	sy
}
   279d8:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   279da:	f06f 000c 	mvn.w	r0, #12
   279de:	e7f7      	b.n	279d0 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   279e0:	f06f 000f 	mvn.w	r0, #15
   279e4:	e7f4      	b.n	279d0 <uarte_nrfx_rx_buf_rsp+0x3a>

000279e6 <uarte_nrfx_callback_set>:
	if (!data->async) {
   279e6:	6903      	ldr	r3, [r0, #16]
   279e8:	68db      	ldr	r3, [r3, #12]
   279ea:	b11b      	cbz	r3, 279f4 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   279ec:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   279f0:	2000      	movs	r0, #0
   279f2:	4770      	bx	lr
		return -ENOTSUP;
   279f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   279f8:	4770      	bx	lr

000279fa <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   279fa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   279fc:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   279fe:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   27a00:	681b      	ldr	r3, [r3, #0]
{
   27a02:	b510      	push	{r4, lr}
	if (data->async) {
   27a04:	b958      	cbnz	r0, 27a1e <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27a06:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27a0a:	b15c      	cbz	r4, 27a24 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   27a0c:	7d52      	ldrb	r2, [r2, #21]
   27a0e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27a10:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   27a14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27a18:	2201      	movs	r2, #1
   27a1a:	601a      	str	r2, [r3, #0]
}
   27a1c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   27a1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27a22:	e7fb      	b.n	27a1c <uarte_nrfx_poll_in+0x22>
		return -1;
   27a24:	f04f 30ff 	mov.w	r0, #4294967295
   27a28:	e7f8      	b.n	27a1c <uarte_nrfx_poll_in+0x22>

00027a2a <rx_timeout>:
{
   27a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   27a2c:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   27a2e:	68f3      	ldr	r3, [r6, #12]
   27a30:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   27a34:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   27a38:	bb42      	cbnz	r2, 27a8c <rx_timeout+0x62>
	const struct device *dev = data->dev;
   27a3a:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   27a3c:	686a      	ldr	r2, [r5, #4]
   27a3e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
   27a40:	2110      	movs	r1, #16
   27a42:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   27a46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   27a4a:	6f59      	ldr	r1, [r3, #116]	; 0x74
   27a4c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   27a4e:	bf1e      	ittt	ne
   27a50:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   27a52:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   27a54:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   27a58:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   27a5c:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   27a5e:	bf48      	it	mi
   27a60:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   27a64:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
   27a68:	bf48      	it	mi
   27a6a:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   27a6c:	18a0      	adds	r0, r4, r2
   27a6e:	4288      	cmp	r0, r1
   27a70:	d90d      	bls.n	27a8e <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
   27a72:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   27a74:	2c00      	cmp	r4, #0
   27a76:	dd04      	ble.n	27a82 <rx_timeout+0x58>
		clipped = true;
   27a78:	2701      	movs	r7, #1
   27a7a:	e00e      	b.n	27a9a <rx_timeout+0x70>
			data->async->rx_timeout_left -=
   27a7c:	1a52      	subs	r2, r2, r1
   27a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   27a82:	686b      	ldr	r3, [r5, #4]
   27a84:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   27a86:	2210      	movs	r2, #16
   27a88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   27a8e:	2c00      	cmp	r4, #0
   27a90:	d0f7      	beq.n	27a82 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
   27a92:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   27a96:	428a      	cmp	r2, r1
   27a98:	daf0      	bge.n	27a7c <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
   27a9a:	4621      	mov	r1, r4
   27a9c:	4628      	mov	r0, r5
   27a9e:	f7ff ff36 	bl	2790e <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   27aa2:	68f0      	ldr	r0, [r6, #12]
   27aa4:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   27aa6:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   27aa8:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   27aaa:	4421      	add	r1, r4
			data->async->rx_offset += len;
   27aac:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   27aae:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   27ab0:	2f00      	cmp	r7, #0
   27ab2:	d0e6      	beq.n	27a82 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
   27ab4:	3088      	adds	r0, #136	; 0x88
   27ab6:	f000 fbc4 	bl	28242 <z_impl_k_timer_stop>
}
   27aba:	e7e2      	b.n	27a82 <rx_timeout+0x58>

00027abc <rx_flush>:
	return config->uarte_regs;
   27abc:	6843      	ldr	r3, [r0, #4]
{
   27abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   27ac0:	681d      	ldr	r5, [r3, #0]
{
   27ac2:	4616      	mov	r6, r2
    return p_reg->RXD.AMOUNT;
   27ac4:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   27ac8:	460c      	mov	r4, r1
   27aca:	bb31      	cbnz	r1, 27b1a <rx_flush+0x5e>
   27acc:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
   27ace:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   27ad0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27ad4:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   27ad6:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27ada:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   27ade:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27ae2:	2201      	movs	r2, #1
   27ae4:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27ae6:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   27aea:	2a00      	cmp	r2, #0
   27aec:	d0fb      	beq.n	27ae6 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27aee:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   27af2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   27af6:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
   27afa:	b914      	cbnz	r4, 27b02 <rx_flush+0x46>
			return rx_amount;
   27afc:	b2c0      	uxtb	r0, r0
}
   27afe:	b003      	add	sp, #12
   27b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
   27b02:	4287      	cmp	r7, r0
   27b04:	d1fa      	bne.n	27afc <rx_flush+0x40>
   27b06:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
   27b08:	42b4      	cmp	r4, r6
   27b0a:	d101      	bne.n	27b10 <rx_flush+0x54>
	return 0;
   27b0c:	2000      	movs	r0, #0
   27b0e:	e7f6      	b.n	27afe <rx_flush+0x42>
		if (buf[i] != dirty) {
   27b10:	f814 3b01 	ldrb.w	r3, [r4], #1
   27b14:	2b00      	cmp	r3, #0
   27b16:	d0f7      	beq.n	27b08 <rx_flush+0x4c>
   27b18:	e7f0      	b.n	27afc <rx_flush+0x40>
		memset(buf, dirty, len);
   27b1a:	2100      	movs	r1, #0
   27b1c:	4620      	mov	r0, r4
   27b1e:	f7fd ff2c 	bl	2597a <memset>
		flush_len = len;
   27b22:	4623      	mov	r3, r4
   27b24:	e7d4      	b.n	27ad0 <rx_flush+0x14>

00027b26 <async_uart_release>:
{
   27b26:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27b28:	6903      	ldr	r3, [r0, #16]
{
   27b2a:	4604      	mov	r4, r0
	__asm__ volatile(
   27b2c:	f04f 0240 	mov.w	r2, #64	; 0x40
   27b30:	f3ef 8611 	mrs	r6, BASEPRI
   27b34:	f382 8812 	msr	BASEPRI_MAX, r2
   27b38:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   27b3c:	68dd      	ldr	r5, [r3, #12]
   27b3e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   27b42:	ea23 0301 	bic.w	r3, r3, r1
   27b46:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   27b4a:	b96b      	cbnz	r3, 27b68 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   27b4c:	2902      	cmp	r1, #2
   27b4e:	d106      	bne.n	27b5e <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   27b50:	2205      	movs	r2, #5
   27b52:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   27b56:	f7ff ffb1 	bl	27abc <rx_flush>
			data->async->rx_flush_cnt =
   27b5a:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
   27b5e:	6863      	ldr	r3, [r4, #4]
   27b60:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   27b62:	2200      	movs	r2, #0
   27b64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   27b68:	f386 8811 	msr	BASEPRI, r6
   27b6c:	f3bf 8f6f 	isb	sy
}
   27b70:	bd70      	pop	{r4, r5, r6, pc}

00027b72 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   27b72:	68c2      	ldr	r2, [r0, #12]
   27b74:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
   27b76:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   27b78:	b508      	push	{r3, lr}
   27b7a:	4603      	mov	r3, r0
	if (!remaining) {
   27b7c:	d00b      	beq.n	27b96 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   27b7e:	2a08      	cmp	r2, #8
   27b80:	bf28      	it	cs
   27b82:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   27b84:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
   27b86:	3018      	adds	r0, #24
   27b88:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   27b8a:	689b      	ldr	r3, [r3, #8]
   27b8c:	4419      	add	r1, r3
   27b8e:	f7fd fee9 	bl	25964 <memcpy>
	return true;
   27b92:	2001      	movs	r0, #1
}
   27b94:	bd08      	pop	{r3, pc}
		return false;
   27b96:	4610      	mov	r0, r2
   27b98:	e7fc      	b.n	27b94 <setup_tx_cache.isra.0+0x22>

00027b9a <uarte_nrfx_tx_abort>:
{
   27b9a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   27b9c:	6843      	ldr	r3, [r0, #4]
   27b9e:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   27ba0:	6903      	ldr	r3, [r0, #16]
   27ba2:	68d8      	ldr	r0, [r3, #12]
   27ba4:	6883      	ldr	r3, [r0, #8]
   27ba6:	b14b      	cbz	r3, 27bbc <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   27ba8:	2400      	movs	r4, #0
   27baa:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   27bae:	3028      	adds	r0, #40	; 0x28
   27bb0:	f000 fb47 	bl	28242 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27bb4:	2301      	movs	r3, #1
   27bb6:	60eb      	str	r3, [r5, #12]
	return 0;
   27bb8:	4620      	mov	r0, r4
}
   27bba:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   27bbc:	f06f 000d 	mvn.w	r0, #13
   27bc0:	e7fb      	b.n	27bba <uarte_nrfx_tx_abort+0x20>

00027bc2 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   27bc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27bc4:	6818      	ldr	r0, [r3, #0]
   27bc6:	f7ff bfe8 	b.w	27b9a <uarte_nrfx_tx_abort>

00027bca <uarte_nrfx_rx_disable>:
{
   27bca:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27bcc:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   27bce:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   27bd0:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   27bd2:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   27bd4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   27bd6:	b1b3      	cbz	r3, 27c06 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   27bd8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   27bda:	b153      	cbz	r3, 27bf2 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   27bdc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   27be0:	f023 0320 	bic.w	r3, r3, #32
   27be4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27be8:	2300      	movs	r3, #0
   27bea:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   27bee:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   27bf2:	3088      	adds	r0, #136	; 0x88
   27bf4:	f000 fb25 	bl	28242 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   27bf8:	68eb      	ldr	r3, [r5, #12]
   27bfa:	2000      	movs	r0, #0
   27bfc:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27c00:	2301      	movs	r3, #1
   27c02:	6063      	str	r3, [r4, #4]
}
   27c04:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   27c06:	f06f 000d 	mvn.w	r0, #13
   27c0a:	e7fb      	b.n	27c04 <uarte_nrfx_rx_disable+0x3a>

00027c0c <tx_start>:
{
   27c0c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   27c0e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   27c10:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27c12:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27c16:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27c1a:	2200      	movs	r2, #0
   27c1c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   27c20:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   27c24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   27c28:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   27c2c:	6862      	ldr	r2, [r4, #4]
   27c2e:	06d2      	lsls	r2, r2, #27
   27c30:	d50f      	bpl.n	27c52 <tx_start+0x46>
	if (data->async) {
   27c32:	6902      	ldr	r2, [r0, #16]
   27c34:	68d2      	ldr	r2, [r2, #12]
   27c36:	b12a      	cbz	r2, 27c44 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   27c38:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
   27c3c:	f041 0101 	orr.w	r1, r1, #1
   27c40:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   27c44:	2208      	movs	r2, #8
   27c46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   27c4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   27c4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27c52:	2201      	movs	r2, #1
   27c54:	609a      	str	r2, [r3, #8]
}
   27c56:	bd10      	pop	{r4, pc}

00027c58 <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
   27c58:	b510      	push	{r4, lr}
   27c5a:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   27c5c:	f7ff fe40 	bl	278e0 <is_tx_ready>
   27c60:	680b      	ldr	r3, [r1, #0]
   27c62:	b918      	cbnz	r0, 27c6c <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
   27c64:	2201      	movs	r2, #1
   27c66:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   27c6a:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   27c6c:	2200      	movs	r2, #0
   27c6e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   27c72:	f04f 32ff 	mov.w	r2, #4294967295
   27c76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   27c7a:	4620      	mov	r0, r4
   27c7c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   27c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   27c84:	f7ff bfc2 	b.w	27c0c <tx_start>

00027c88 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   27c88:	4770      	bx	lr

00027c8a <sys_clock_cycle_get_32>:
{
   27c8a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   27c8c:	f7f6 f9f8 	bl	1e080 <z_nrf_rtc_timer_read>
}
   27c90:	bd08      	pop	{r3, pc}

00027c92 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   27c92:	b530      	push	{r4, r5, lr}
   27c94:	b08d      	sub	sp, #52	; 0x34
   27c96:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   27c98:	4601      	mov	r1, r0
   27c9a:	4668      	mov	r0, sp
{
   27c9c:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   27c9e:	f7f7 f947 	bl	1ef30 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   27ca2:	4621      	mov	r1, r4
   27ca4:	a804      	add	r0, sp, #16
   27ca6:	f7f7 f943 	bl	1ef30 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   27caa:	f04f 30ff 	mov.w	r0, #4294967295
   27cae:	f04f 31ff 	mov.w	r1, #4294967295
   27cb2:	f7f6 fb91 	bl	1e3d8 <multithreading_lock_acquire>

	if (!errcode) {
   27cb6:	4604      	mov	r4, r0
   27cb8:	b960      	cbnz	r0, 27cd4 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   27cba:	aa08      	add	r2, sp, #32
   27cbc:	a904      	add	r1, sp, #16
   27cbe:	4668      	mov	r0, sp
   27cc0:	f7e5 f838 	bl	cd34 <sdc_soc_ecb_block_encrypt>
   27cc4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   27cc6:	f7f6 fb8f 	bl	1e3e8 <multithreading_lock_release>
	}

	if (!errcode) {
   27cca:	b91c      	cbnz	r4, 27cd4 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   27ccc:	a908      	add	r1, sp, #32
   27cce:	4628      	mov	r0, r5
   27cd0:	f7f7 f92e 	bl	1ef30 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   27cd4:	4620      	mov	r0, r4
   27cd6:	b00d      	add	sp, #52	; 0x34
   27cd8:	bd30      	pop	{r4, r5, pc}

00027cda <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   27cda:	4668      	mov	r0, sp
   27cdc:	f020 0107 	bic.w	r1, r0, #7
   27ce0:	468d      	mov	sp, r1
   27ce2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   27ce4:	f7da fe4c 	bl	2980 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   27ce8:	f7eb fef8 	bl	13adc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   27cec:	f7eb ffe4 	bl	13cb8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   27cf0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27cf4:	4685      	mov	sp, r0
   27cf6:	4770      	bx	lr

00027cf8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27cf8:	4668      	mov	r0, sp
   27cfa:	f020 0107 	bic.w	r1, r0, #7
   27cfe:	468d      	mov	sp, r1
   27d00:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   27d02:	f7da fdbf 	bl	2884 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   27d06:	f7eb fee9 	bl	13adc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27d0a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27d0e:	4685      	mov	sp, r0
   27d10:	4770      	bx	lr

00027d12 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27d12:	4668      	mov	r0, sp
   27d14:	f020 0107 	bic.w	r1, r0, #7
   27d18:	468d      	mov	sp, r1
   27d1a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   27d1c:	f7e4 fd80 	bl	c820 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   27d20:	f7eb fedc 	bl	13adc <_arch_isr_direct_pm>
   27d24:	f7eb ffc8 	bl	13cb8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27d28:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27d2c:	4685      	mov	sp, r0
   27d2e:	4770      	bx	lr

00027d30 <nrfx_clock_enable>:
}
   27d30:	4770      	bx	lr

00027d32 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   27d32:	f7db ba75 	b.w	3220 <MPSL_IRQ_CLOCK_Handler>

00027d36 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   27d36:	f7db be2d 	b.w	3994 <mpsl_is_initialized>

00027d3a <nrf_flash_sync_get_timestamp_begin>:
}
   27d3a:	4770      	bx	lr

00027d3c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27d3c:	4700      	bx	r0

00027d3e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27d3e:	f000 ba47 	b.w	281d0 <z_impl_k_busy_wait>

00027d42 <nrf_gpio_pin_present_check>:
    switch (port)
   27d42:	0943      	lsrs	r3, r0, #5
   27d44:	bf0c      	ite	eq
   27d46:	f04f 33ff 	moveq.w	r3, #4294967295
   27d4a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   27d4c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   27d50:	fa23 f000 	lsr.w	r0, r3, r0
}
   27d54:	f000 0001 	and.w	r0, r0, #1
   27d58:	4770      	bx	lr

00027d5a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   27d5a:	0080      	lsls	r0, r0, #2
}
   27d5c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   27d60:	4770      	bx	lr

00027d62 <nrf_gpio_reconfigure>:
{
   27d62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27d66:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27d68:	a801      	add	r0, sp, #4
{
   27d6a:	460e      	mov	r6, r1
   27d6c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   27d70:	4690      	mov	r8, r2
   27d72:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27d74:	f7f7 fdec 	bl	1f950 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   27d78:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   27d7a:	f1b8 0f00 	cmp.w	r8, #0
   27d7e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   27d82:	bf14      	ite	ne
   27d84:	2302      	movne	r3, #2
   27d86:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27d88:	2e00      	cmp	r6, #0
   27d8a:	bf18      	it	ne
   27d8c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27d90:	2d00      	cmp	r5, #0
   27d92:	bf14      	ite	ne
   27d94:	210c      	movne	r1, #12
   27d96:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27d98:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   27d9a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27d9e:	bf14      	ite	ne
   27da0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   27da4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27da6:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27da8:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   27dac:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27db0:	bf14      	ite	ne
   27db2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   27db6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27db8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   27dba:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27dbe:	b106      	cbz	r6, 27dc2 <nrf_gpio_reconfigure+0x60>
   27dc0:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   27dc2:	f1b8 0f00 	cmp.w	r8, #0
   27dc6:	d003      	beq.n	27dd0 <nrf_gpio_reconfigure+0x6e>
   27dc8:	f898 8000 	ldrb.w	r8, [r8]
   27dcc:	ea4f 0848 	mov.w	r8, r8, lsl #1
   27dd0:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   27dd2:	b10d      	cbz	r5, 27dd8 <nrf_gpio_reconfigure+0x76>
   27dd4:	782d      	ldrb	r5, [r5, #0]
   27dd6:	00ad      	lsls	r5, r5, #2
   27dd8:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   27ddc:	b10c      	cbz	r4, 27de2 <nrf_gpio_reconfigure+0x80>
   27dde:	7822      	ldrb	r2, [r4, #0]
   27de0:	0214      	lsls	r4, r2, #8
   27de2:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   27de4:	b10f      	cbz	r7, 27dea <nrf_gpio_reconfigure+0x88>
   27de6:	783f      	ldrb	r7, [r7, #0]
   27de8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27dea:	432c      	orrs	r4, r5
   27dec:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   27dee:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   27df2:	b002      	add	sp, #8
   27df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027df8 <nrf_gpio_cfg_sense_set>:
{
   27df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27dfa:	f10d 030f 	add.w	r3, sp, #15
   27dfe:	9301      	str	r3, [sp, #4]
   27e00:	2300      	movs	r3, #0
{
   27e02:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27e06:	9300      	str	r3, [sp, #0]
   27e08:	461a      	mov	r2, r3
   27e0a:	4619      	mov	r1, r3
   27e0c:	f7ff ffa9 	bl	27d62 <nrf_gpio_reconfigure>
}
   27e10:	b005      	add	sp, #20
   27e12:	f85d fb04 	ldr.w	pc, [sp], #4

00027e16 <is_valid_address>:
{
   27e16:	4603      	mov	r3, r0
   27e18:	4608      	mov	r0, r1
   27e1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   27e1e:	b510      	push	{r4, lr}
   27e20:	690c      	ldr	r4, [r1, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   27e22:	694a      	ldr	r2, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   27e24:	4362      	muls	r2, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   27e26:	4293      	cmp	r3, r2
   27e28:	d308      	bcc.n	27e3c <is_valid_address+0x26>
    if (uicr_allowed &&
   27e2a:	b130      	cbz	r0, 27e3a <is_valid_address+0x24>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   27e2c:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   27e30:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   27e34:	bf2c      	ite	cs
   27e36:	2000      	movcs	r0, #0
   27e38:	2001      	movcc	r0, #1
}
   27e3a:	bd10      	pop	{r4, pc}
        return true;
   27e3c:	2001      	movs	r0, #1
   27e3e:	e7fc      	b.n	27e3a <is_valid_address+0x24>

00027e40 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   27e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27e44:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   27e46:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   27e48:	4350      	muls	r0, r2
   27e4a:	4770      	bx	lr

00027e4c <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   27e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27e50:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   27e52:	4770      	bx	lr

00027e54 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   27e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27e58:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   27e5a:	4770      	bx	lr

00027e5c <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   27e5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   27e5e:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   27e60:	6b48      	ldr	r0, [r1, #52]	; 0x34
   27e62:	4298      	cmp	r0, r3
{
   27e64:	b510      	push	{r4, lr}
   27e66:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   27e6a:	d205      	bcs.n	27e78 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   27e6c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   27e6e:	5c09      	ldrb	r1, [r1, r0]
   27e70:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   27e74:	4618      	mov	r0, r3
}
   27e76:	e004      	b.n	27e82 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   27e78:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   27e7c:	b110      	cbz	r0, 27e84 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27e7e:	61d3      	str	r3, [r2, #28]
            return false;
   27e80:	2000      	movs	r0, #0
}
   27e82:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   27e84:	6a0c      	ldr	r4, [r1, #32]
   27e86:	0664      	lsls	r4, r4, #25
   27e88:	d503      	bpl.n	27e92 <twi_send_byte+0x36>
   27e8a:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   27e8c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   27e90:	e7f7      	b.n	27e82 <twi_send_byte+0x26>
   27e92:	6153      	str	r3, [r2, #20]
   27e94:	e7ee      	b.n	27e74 <twi_send_byte+0x18>

00027e96 <twi_transfer>:
{
   27e96:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27e98:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   27e9c:	4604      	mov	r4, r0
   27e9e:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   27ea0:	b12e      	cbz	r6, 27eae <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27ea2:	2300      	movs	r3, #0
   27ea4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   27ea8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   27eac:	2601      	movs	r6, #1
    if (p_cb->error)
   27eae:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   27eb2:	b320      	cbz	r0, 27efe <twi_transfer+0x68>
   27eb4:	2300      	movs	r3, #0
   27eb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   27eba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   27ebe:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   27ec2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   27ec6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   27eca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   27ece:	2e00      	cmp	r6, #0
   27ed0:	d068      	beq.n	27fa4 <twi_transfer+0x10e>
        if (!p_cb->error)
   27ed2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   27ed6:	2300      	movs	r3, #0
   27ed8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   27edc:	bb88      	cbnz	r0, 27f42 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   27ede:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27ee0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   27ee2:	429a      	cmp	r2, r3
        return false;
   27ee4:	bf1c      	itt	ne
   27ee6:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27ee8:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   27eea:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   27eee:	bf1c      	itt	ne
   27ef0:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   27ef4:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   27ef8:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   27efc:	e022      	b.n	27f44 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27efe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   27f02:	b142      	cbz	r2, 27f16 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f04:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   27f08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f0c:	2301      	movs	r3, #1
   27f0e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   27f10:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   27f14:	e7db      	b.n	27ece <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f16:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   27f1a:	b1a3      	cbz	r3, 27f46 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f1c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   27f20:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   27f24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27f26:	3301      	adds	r3, #1
   27f28:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   27f2e:	b113      	cbz	r3, 27f36 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f30:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   27f34:	e7e8      	b.n	27f08 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   27f36:	4629      	mov	r1, r5
   27f38:	4620      	mov	r0, r4
   27f3a:	f7ff ff8f 	bl	27e5c <twi_send_byte>
   27f3e:	2800      	cmp	r0, #0
   27f40:	d1c5      	bne.n	27ece <twi_transfer+0x38>
                    return false;
   27f42:	2000      	movs	r0, #0
}
   27f44:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f46:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   27f4a:	2a00      	cmp	r2, #0
   27f4c:	d0bf      	beq.n	27ece <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f4e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   27f52:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27f56:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   27f5a:	b112      	cbz	r2, 27f62 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27f5c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   27f60:	e7d2      	b.n	27f08 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   27f62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27f64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   27f66:	4293      	cmp	r3, r2
   27f68:	d2b1      	bcs.n	27ece <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   27f6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   27f6c:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   27f70:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   27f72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27f74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   27f76:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27f78:	1e51      	subs	r1, r2, #1
   27f7a:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   27f7c:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27f7e:	d108      	bne.n	27f92 <twi_transfer+0xfc>
   27f80:	6a29      	ldr	r1, [r5, #32]
   27f82:	0649      	lsls	r1, r1, #25
   27f84:	d410      	bmi.n	27fa8 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   27f86:	2302      	movs	r3, #2
   27f88:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27f8c:	2301      	movs	r3, #1
   27f8e:	6223      	str	r3, [r4, #32]
   27f90:	e79d      	b.n	27ece <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27f92:	4293      	cmp	r3, r2
   27f94:	d1fa      	bne.n	27f8c <twi_transfer+0xf6>
   27f96:	6a2b      	ldr	r3, [r5, #32]
   27f98:	065b      	lsls	r3, r3, #25
   27f9a:	d598      	bpl.n	27ece <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   27f9c:	2302      	movs	r3, #2
   27f9e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   27fa2:	e7cf      	b.n	27f44 <twi_transfer+0xae>
    return true;
   27fa4:	2001      	movs	r0, #1
   27fa6:	e7cd      	b.n	27f44 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27fa8:	4293      	cmp	r3, r2
   27faa:	d1ef      	bne.n	27f8c <twi_transfer+0xf6>
   27fac:	e7f6      	b.n	27f9c <twi_transfer+0x106>

00027fae <nrf_gpio_pin_set>:
{
   27fae:	b507      	push	{r0, r1, r2, lr}
   27fb0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27fb2:	a801      	add	r0, sp, #4
   27fb4:	f7f8 fb64 	bl	20680 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   27fb8:	9a01      	ldr	r2, [sp, #4]
   27fba:	2301      	movs	r3, #1
   27fbc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   27fbe:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   27fc2:	b003      	add	sp, #12
   27fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00027fc8 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   27fc8:	f7f8 bbf6 	b.w	207b8 <_DoInit>

00027fcc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   27fcc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   27fce:	f7ff fffb 	bl	27fc8 <SEGGER_RTT_Init>

	return 0;
}
   27fd2:	2000      	movs	r0, #0
   27fd4:	bd08      	pop	{r3, pc}

00027fd6 <z_device_state_init>:
}
   27fd6:	4770      	bx	lr

00027fd8 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27fd8:	b138      	cbz	r0, 27fea <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27fda:	68c3      	ldr	r3, [r0, #12]
   27fdc:	8818      	ldrh	r0, [r3, #0]
   27fde:	f3c0 0008 	ubfx	r0, r0, #0, #9
   27fe2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   27fe6:	4258      	negs	r0, r3
   27fe8:	4158      	adcs	r0, r3
}
   27fea:	4770      	bx	lr

00027fec <k_heap_init>:
{
   27fec:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   27fee:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   27ff2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   27ff6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   27ff8:	f7e9 b928 	b.w	1124c <sys_heap_init>

00027ffc <k_mem_slab_init>:
{
   27ffc:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   27ffe:	2400      	movs	r4, #0
   28000:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   28002:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28004:	ea41 0402 	orr.w	r4, r1, r2
   28008:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2800c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   28010:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   28012:	d10c      	bne.n	2802e <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   28014:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   28016:	42a3      	cmp	r3, r4
   28018:	d103      	bne.n	28022 <k_mem_slab_init+0x26>
   2801a:	e9c0 0000 	strd	r0, r0, [r0]
}
   2801e:	2000      	movs	r0, #0
}
   28020:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   28022:	6985      	ldr	r5, [r0, #24]
   28024:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   28026:	3401      	adds	r4, #1
		slab->free_list = p;
   28028:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2802a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2802c:	e7f3      	b.n	28016 <k_mem_slab_init+0x1a>
		return -EINVAL;
   2802e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   28032:	e7f5      	b.n	28020 <k_mem_slab_init+0x24>

00028034 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28034:	f3ef 8005 	mrs	r0, IPSR
}
   28038:	3800      	subs	r0, #0
   2803a:	bf18      	it	ne
   2803c:	2001      	movne	r0, #1
   2803e:	4770      	bx	lr

00028040 <z_impl_k_thread_name_set>:
}
   28040:	f06f 0057 	mvn.w	r0, #87	; 0x57
   28044:	4770      	bx	lr

00028046 <k_thread_name_get>:
}
   28046:	2000      	movs	r0, #0
   28048:	4770      	bx	lr

0002804a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2804a:	f7fa be7d 	b.w	22d48 <z_sched_start>

0002804e <z_pm_save_idle_exit>:
{
   2804e:	b508      	push	{r3, lr}
	pm_system_resume();
   28050:	f7ea febe 	bl	12dd0 <pm_system_resume>
}
   28054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   28058:	f7ff be16 	b.w	27c88 <sys_clock_idle_exit>

0002805c <z_queue_node_peek>:
{
   2805c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2805e:	4604      	mov	r4, r0
   28060:	b130      	cbz	r0, 28070 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   28062:	6802      	ldr	r2, [r0, #0]
   28064:	0793      	lsls	r3, r2, #30
   28066:	d003      	beq.n	28070 <z_queue_node_peek+0x14>
		ret = anode->data;
   28068:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2806a:	b109      	cbz	r1, 28070 <z_queue_node_peek+0x14>
			k_free(anode);
   2806c:	f000 f914 	bl	28298 <k_free>
}
   28070:	4620      	mov	r0, r4
   28072:	bd10      	pop	{r4, pc}

00028074 <z_impl_k_queue_init>:
	list->head = NULL;
   28074:	2300      	movs	r3, #0
	list->tail = NULL;
   28076:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2807a:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2807c:	f100 030c 	add.w	r3, r0, #12
   28080:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   28084:	f100 0314 	add.w	r3, r0, #20
   28088:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2808c:	4770      	bx	lr

0002808e <k_queue_append>:
{
   2808e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   28090:	2301      	movs	r3, #1
   28092:	9300      	str	r3, [sp, #0]
   28094:	2300      	movs	r3, #0
{
   28096:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   28098:	4619      	mov	r1, r3
   2809a:	f7f9 fb37 	bl	2170c <queue_insert>
}
   2809e:	b003      	add	sp, #12
   280a0:	f85d fb04 	ldr.w	pc, [sp], #4

000280a4 <k_queue_prepend>:
{
   280a4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   280a6:	2300      	movs	r3, #0
{
   280a8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   280aa:	9300      	str	r3, [sp, #0]
   280ac:	4619      	mov	r1, r3
   280ae:	f7f9 fb2d 	bl	2170c <queue_insert>
}
   280b2:	b003      	add	sp, #12
   280b4:	f85d fb04 	ldr.w	pc, [sp], #4

000280b8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   280b8:	b15a      	cbz	r2, 280d2 <z_impl_k_sem_init+0x1a>
   280ba:	428a      	cmp	r2, r1
   280bc:	d309      	bcc.n	280d2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   280be:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   280c2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   280c6:	e9c0 0000 	strd	r0, r0, [r0]
   280ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   280ce:	2000      	movs	r0, #0
   280d0:	4770      	bx	lr
		return -EINVAL;
   280d2:	f06f 0015 	mvn.w	r0, #21
}
   280d6:	4770      	bx	lr

000280d8 <notify_queue_locked>:
	if (queue != NULL) {
   280d8:	b120      	cbz	r0, 280e4 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   280da:	2200      	movs	r2, #0
   280dc:	4611      	mov	r1, r2
   280de:	3088      	adds	r0, #136	; 0x88
   280e0:	f7fb bc4a 	b.w	23978 <z_sched_wake>
}
   280e4:	4770      	bx	lr

000280e6 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   280e6:	68c3      	ldr	r3, [r0, #12]
{
   280e8:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   280ea:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   280ee:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   280f2:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   280f4:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   280f6:	d502      	bpl.n	280fe <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   280f8:	3010      	adds	r0, #16
   280fa:	f7fb fde5 	bl	23cc8 <z_abort_timeout>
}
   280fe:	4620      	mov	r0, r4
   28100:	bd10      	pop	{r4, pc}

00028102 <cancel_async_locked>:
{
   28102:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28104:	68c0      	ldr	r0, [r0, #12]
{
   28106:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   28108:	0784      	lsls	r4, r0, #30
   2810a:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2810e:	d416      	bmi.n	2813e <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   28110:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   28114:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   28116:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   28118:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2811a:	d510      	bpl.n	2813e <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2811c:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   28120:	b168      	cbz	r0, 2813e <cancel_async_locked+0x3c>
   28122:	4283      	cmp	r3, r0
   28124:	d11d      	bne.n	28162 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   28126:	6818      	ldr	r0, [r3, #0]
   28128:	b999      	cbnz	r1, 28152 <cancel_async_locked+0x50>
   2812a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   2812e:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   28132:	428b      	cmp	r3, r1
   28134:	d101      	bne.n	2813a <cancel_async_locked+0x38>
	list->tail = node;
   28136:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   2813a:	2200      	movs	r2, #0
   2813c:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2813e:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   28140:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   28144:	bf1e      	ittt	ne
   28146:	f042 0202 	orrne.w	r2, r2, #2
   2814a:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2814c:	f002 000f 	andne.w	r0, r2, #15
}
   28150:	bd10      	pop	{r4, pc}
   28152:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28154:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   28158:	4283      	cmp	r3, r0
	list->tail = node;
   2815a:	bf08      	it	eq
   2815c:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   28160:	e7eb      	b.n	2813a <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28162:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28164:	6800      	ldr	r0, [r0, #0]
   28166:	e7db      	b.n	28120 <cancel_async_locked+0x1e>

00028168 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28168:	4603      	mov	r3, r0
   2816a:	b920      	cbnz	r0, 28176 <z_reschedule_irqlock+0xe>
   2816c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   28170:	b90a      	cbnz	r2, 28176 <z_reschedule_irqlock+0xe>
   28172:	f7eb bce1 	b.w	13b38 <arch_swap>
   28176:	f383 8811 	msr	BASEPRI, r3
   2817a:	f3bf 8f6f 	isb	sy
}
   2817e:	4770      	bx	lr

00028180 <z_reschedule_unlocked>:
	__asm__ volatile(
   28180:	f04f 0340 	mov.w	r3, #64	; 0x40
   28184:	f3ef 8011 	mrs	r0, BASEPRI
   28188:	f383 8812 	msr	BASEPRI_MAX, r3
   2818c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   28190:	f7ff bfea 	b.w	28168 <z_reschedule_irqlock>

00028194 <z_priq_dumb_best>:
{
   28194:	4603      	mov	r3, r0
	return list->head == list;
   28196:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28198:	4283      	cmp	r3, r0
   2819a:	d003      	beq.n	281a4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2819c:	2800      	cmp	r0, #0
   2819e:	bf38      	it	cc
   281a0:	2000      	movcc	r0, #0
   281a2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   281a4:	2000      	movs	r0, #0
}
   281a6:	4770      	bx	lr

000281a8 <z_unpend_all>:
{
   281a8:	b538      	push	{r3, r4, r5, lr}
   281aa:	4605      	mov	r5, r0
	int need_sched = 0;
   281ac:	2000      	movs	r0, #0
	return list->head == list;
   281ae:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281b0:	42a5      	cmp	r5, r4
   281b2:	d000      	beq.n	281b6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   281b4:	b904      	cbnz	r4, 281b8 <z_unpend_all+0x10>
}
   281b6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   281b8:	4620      	mov	r0, r4
   281ba:	f7fa fbd9 	bl	22970 <z_unpend_thread>
		z_ready_thread(thread);
   281be:	4620      	mov	r0, r4
   281c0:	f7fa fd7a 	bl	22cb8 <z_ready_thread>
		need_sched = 1;
   281c4:	2001      	movs	r0, #1
   281c6:	e7f2      	b.n	281ae <z_unpend_all+0x6>

000281c8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   281c8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   281ca:	f7fb ff2f 	bl	2402c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   281ce:	bd08      	pop	{r3, pc}

000281d0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   281d0:	b108      	cbz	r0, 281d6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   281d2:	f7ec ba39 	b.w	14648 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   281d6:	4770      	bx	lr

000281d8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   281d8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   281da:	1c4b      	adds	r3, r1, #1
   281dc:	bf08      	it	eq
   281de:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   281e2:	4604      	mov	r4, r0
   281e4:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   281e6:	d013      	beq.n	28210 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   281e8:	ea54 0105 	orrs.w	r1, r4, r5
   281ec:	d103      	bne.n	281f6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   281ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   281f2:	f7fb bf1b 	b.w	2402c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   281f6:	f06f 0101 	mvn.w	r1, #1
   281fa:	1a0a      	subs	r2, r1, r0
   281fc:	f04f 31ff 	mov.w	r1, #4294967295
   28200:	eb61 0305 	sbc.w	r3, r1, r5
   28204:	2a00      	cmp	r2, #0
   28206:	f173 0100 	sbcs.w	r1, r3, #0
   2820a:	db02      	blt.n	28212 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2820c:	4610      	mov	r0, r2
   2820e:	4619      	mov	r1, r3
}
   28210:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   28212:	f7fb ff0b 	bl	2402c <sys_clock_tick_get>
   28216:	2c01      	cmp	r4, #1
   28218:	f175 0300 	sbcs.w	r3, r5, #0
   2821c:	bfbc      	itt	lt
   2821e:	2401      	movlt	r4, #1
   28220:	2500      	movlt	r5, #0
   28222:	1820      	adds	r0, r4, r0
   28224:	eb45 0101 	adc.w	r1, r5, r1
   28228:	e7f2      	b.n	28210 <sys_clock_timeout_end_calc+0x38>

0002822a <k_timer_init>:
	timer->status = 0U;
   2822a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2822c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   28230:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   28234:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   28238:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2823c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2823e:	6343      	str	r3, [r0, #52]	; 0x34
}
   28240:	4770      	bx	lr

00028242 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   28242:	b510      	push	{r4, lr}
   28244:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   28246:	f7fb fd3f 	bl	23cc8 <z_abort_timeout>

	if (inactive) {
   2824a:	b9b0      	cbnz	r0, 2827a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2824c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2824e:	b10b      	cbz	r3, 28254 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   28250:	4620      	mov	r0, r4
   28252:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   28254:	f104 0018 	add.w	r0, r4, #24
   28258:	f7fb f892 	bl	23380 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2825c:	b168      	cbz	r0, 2827a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2825e:	f7fa fd2b 	bl	22cb8 <z_ready_thread>
   28262:	f04f 0340 	mov.w	r3, #64	; 0x40
   28266:	f3ef 8011 	mrs	r0, BASEPRI
   2826a:	f383 8812 	msr	BASEPRI_MAX, r3
   2826e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   28272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28276:	f7ff bf77 	b.w	28168 <z_reschedule_irqlock>
   2827a:	bd10      	pop	{r4, pc}

0002827c <z_handle_obj_poll_events>:
{
   2827c:	4603      	mov	r3, r0
	return list->head == list;
   2827e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28280:	4283      	cmp	r3, r0
   28282:	d008      	beq.n	28296 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   28284:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   28288:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2828a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2828c:	2300      	movs	r3, #0
	node->prev = NULL;
   2828e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   28292:	f7fc b82f 	b.w	242f4 <signal_poll_event>
}
   28296:	4770      	bx	lr

00028298 <k_free>:
	if (ptr != NULL) {
   28298:	b120      	cbz	r0, 282a4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2829a:	1f01      	subs	r1, r0, #4
   2829c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   282a0:	f7f8 bd78 	b.w	20d94 <k_heap_free>
}
   282a4:	4770      	bx	lr

000282a6 <k_malloc>:
{
   282a6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   282a8:	2004      	movs	r0, #4
   282aa:	f7fc b92b 	b.w	24504 <k_aligned_alloc>

000282ae <k_calloc>:
{
   282ae:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   282b0:	fba0 4501 	umull	r4, r5, r0, r1
   282b4:	b935      	cbnz	r5, 282c4 <k_calloc+0x16>
	ret = k_malloc(bounds);
   282b6:	4620      	mov	r0, r4
   282b8:	f7ff fff5 	bl	282a6 <k_malloc>
	if (ret != NULL) {
   282bc:	4606      	mov	r6, r0
   282be:	b918      	cbnz	r0, 282c8 <k_calloc+0x1a>
}
   282c0:	4630      	mov	r0, r6
   282c2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   282c4:	2600      	movs	r6, #0
   282c6:	e7fb      	b.n	282c0 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   282c8:	4622      	mov	r2, r4
   282ca:	4629      	mov	r1, r5
   282cc:	f7fd fb55 	bl	2597a <memset>
   282d0:	e7f6      	b.n	282c0 <k_calloc+0x12>

000282d2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   282d2:	4770      	bx	lr

000282d4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   282d4:	f7f7 b938 	b.w	1f548 <SystemInit>
